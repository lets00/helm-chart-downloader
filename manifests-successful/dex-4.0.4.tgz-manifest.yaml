---
# Source: dex/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: dex/templates/config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
data:
  DEX_CLIENT_0_CLIENT_ID: "ZXhhbXBsZS1hcHA="
  DEX_CLIENT_0_CLIENT_SECRET: "WlhoaGJYQnNaUzFoY0hBdGMyVmpjbVYw"
---
# Source: dex/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |-
    connectors:
    - id: mock
      name: Example connector
      type: mockCallback
    enablePasswordDB: true
    issuer: https://chart-example.local
    oauth2:
      alwaysShowLoginScreen: false
      responseTypes:
      - code
      skipApprovalScreen: true
    staticClients:
    - idEnv: DEX_CLIENT_0_CLIENT_ID
      name: Example App
      redirectURIs:
      - http://127.0.0.1:5555/callback
      secretEnv: DEX_CLIENT_0_CLIENT_SECRET
    staticPasswords:
    - email: admin@example.com
      hash: $2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W
      username: admin
    storage:
      config:
        inCluster: true
      type: kubernetes
    telemetry:
      http: 0.0.0.0:8888
    web:
      http: 0.0.0.0:8080
---
# Source: dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
# Source: dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-dex
subjects:
- kind: ServiceAccount
  name: my-release-dex
  namespace: dex-4.0.4.tgz
---
# Source: dex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
---
# Source: dex/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dex
  labels:
    helm.sh/chart: dex-4.0.4
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        app.kubernetes.io/configuration-checksum: 11581f4de6a5ac59a1ad6384aee6ca11
        app.kubernetes.io/secrets-checksum: 218ae4f982eb57098e97386958d49f87
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-dex
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-dex
      containers:
        - name: dex
          securityContext:
            {}
          image: "ghcr.io/dexidp/dex:v2.28.1"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/local/bin/dex
          args:
            - serve
            - /etc/dex/cfg/config.yaml
          envFrom:
            - secretRef:
                name: my-release-dex
          ports:
            - name: http
              containerPort: 8080
            - name: telemetry
              containerPort: 8888
            - name: grpc
              containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/dex/cfg
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /healthz
              port: http
              httpHeaders:
                - name: Host
                  value: chart-example.local
          readinessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /healthz
              port: http
              httpHeaders:
                - name: Host
                  value: chart-example.local
          resources:
            {}
