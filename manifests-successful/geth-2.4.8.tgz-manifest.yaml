---
# Source: geth/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geth
      app.kubernetes.io/instance: my-release
      client-type: execution
---
# Source: geth/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
---
# Source: geth/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: geth/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-geth
subjects:
  - kind: ServiceAccount
    name: my-release-geth
    namespace: geth-2.4.8.tgz
---
# Source: geth/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
---
# Source: geth/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-geth
subjects:
  - kind: ServiceAccount
    name: my-release-geth
---
# Source: geth/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - name: http
      port: 8545
      targetPort: http
    - name: ws
      port: 8546
      targetPort: ws
    - name: metrics
      port: 6060
      targetPort: metrics
  selector:
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    client-type: execution
---
# Source: geth/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-geth
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
spec:
  replicas: 1
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      app.kubernetes.io/name: geth
      app.kubernetes.io/instance: my-release
      client-type: execution
  serviceName: my-release-geth
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geth
        app.kubernetes.io/instance: my-release
        client-type: execution
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 300
      serviceAccountName: my-release-geth
      priorityClassName: ""
      initContainers:
        - name: init
          image: "docker.io/bitnami/kubectl:1.24"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
              mkdir -p /data && chown -R 1001:1001 /data;
          volumeMounts:
            - name: env-nodeport
              mountPath: /env
      containers:
        - name: geth
          image: "docker.io/ethereum/client-go:v1.14.5"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -ac
            - >
              exec geth
              --http
              --http.addr=0.0.0.0
              --http.port=8545
              --http.corsdomain=
              --http.vhosts=*
              --http.api=web3,eth,net,engine
              --nat=extip:$(POD_IP)
              --port=30303
              --ws
              --ws.addr=0.0.0.0
              --ws.port=8546
              --ws.origins=*
              --ws.api=web3,eth,net,engine
              --datadir=/data/ethereum
              --mainnet
              "--syncmode=snap"
              "--metrics"
              "--pprof"
              "--pprof.addr=0.0.0.0"
              "--pprof.port=6060"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - name: http
              containerPort: 8545
            - name: ws
              containerPort: 8546
            - name: metrics
              containerPort: 6060
          volumeMounts:
            - name: data
              mountPath: /data/ethereum
            - name: env-nodeport
              mountPath: /env
        - name: sidecar
          image: "europe-west4-docker.pkg.dev/stakewiselabs/public/ethnode-sidecar:v1.0.6"
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVER_BINDADDR
              value: "0.0.0.0:3000"
            - name: CLIENT_PORT
              value: "8545"
          ports:
            - containerPort: 3000
              name: sidecar
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 900
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /eth1/liveness
              port: sidecar
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 30
            successThreshold: 1
            httpGet:
              path: /eth1/readiness
              port: sidecar
              scheme: HTTP
      volumes:
        - name: env-nodeport
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: geth
          helm.sh/chart: geth
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/managed-by: Helm
          client-type: execution
      spec:
        accessModes: [ReadWriteOnce]
        storageClassName: 
        resources:
          requests:
            storage: "900Gi"
---
# Source: geth/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-geth-test-connection"
  labels:
    app.kubernetes.io/name: geth
    helm.sh/chart: geth-2.4.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    client-type: execution
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-geth:8545']
  restartPolicy: Never
