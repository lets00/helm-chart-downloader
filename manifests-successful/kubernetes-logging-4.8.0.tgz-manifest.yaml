---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-fluent-bit
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
---
# Source: kubernetes-logging/templates/logging-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
---
# Source: kubernetes-logging/templates/logstash/logstash-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-logstash
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-config-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-fluent-bit
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
    k8s-app: fluent-bit
stringData:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |-
    # Provides the configuraiton data plane skeleton following Inputs -> Filter(s) -> Output(s) pattern
    # Adding custom Filters and Outputs plugin configurations are supported by the helm chart
    [SERVICE]
        Flush                         1
        Log_Level                     info
        Daemon                        off
        Parsers_File                  parsers.conf
        HTTP_Server                   On
        HTTP_Listen                   0.0.0.0
        HTTP_Port                     2020
        storage.type                  filesystem
        storage.path                  /var/fluent-bit/state/flb-storage/
        storage.sync                  normal
        storage.checksum              off
        storage.backlog.mem_limit     100M
        storage.max_chunks_up         1000
        storage.metrics               on

    # Standard input tail plugin fo reading containers logs
    @INCLUDE _input-tail.conf

    # Standard input systemd plugin fo reading systemd logs (containerd, kubelet service logs)
    @INCLUDE _input-systemd.conf

    # Read any additional input plugin configurations supplied by the helm chart
    # File names follow a naming convention with "input" prefix and ".conf" extension
    

    # Filter order does matter
    # Standar kubernetes filter adding kubernetes metadata(lables,namespace, pod, container names ...) to logs
    @INCLUDE _filter-kubernetes.conf

    # Replace dots with _ in the keys in all logs
    @INCLUDE _filter-de_dot.conf

    # Read any additional filter plugin configuration supplied by the helm chart
    # File names follow a naming convention with "filter" prefix and ".conf" extension
    
    @INCLUDE filter-*.conf

    # kafka output plugin configuration in case kafka is enabled in the helm chart
    @INCLUDE _output-kafka.conf

  _input-tail.conf: |-
    [INPUT]
        Name              tail
        Tag               kube.<pod_id>.<namespace_name>.<pod_name>.<container_name>
        Tag_Regex         /var/log/pods/(?<namespace_name>[^_/]+)_(?<pod_name>[^_/]+)_(?<pod_id>[^_/]+)/(?<container_name>[^/]+)/.*
        Path              /var/log/pods/*/*/*.log
        DB                /var/fluent-bit/state/flb_kube.db
        Exclude_Path      /var/log/pods/*/*/*.gz,/var/log/pods/*/*/*.zip
        Skip_Long_Lines   Off
        Refresh_Interval  10
        Rotate_Wait       10
        Read_from_Head    false
        Static_Batch_Size 100M
        Threaded          On

  _input-systemd.conf: |-
    [INPUT]
        Name                systemd
        Tag                 systemd.*
        Systemd_Filter      _SYSTEMD_UNIT=kubelet.service
        Systemd_Filter      _SYSTEMD_UNIT=containerd.service
        Systemd_Filter_Type Or
        Read_From_Tail      On
        Path                /run/log/journal
        Strip_Underscores   On

  _filter-kubernetes.conf: |-
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_Tag_Prefix     kube.
        Regex_Parser        kube-tag
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Merge_Log           true
        Keep_Log            On
        K8S-Logging.Parser  On
        K8S-Logging.Exclude On
        Labels              On
        Kube_Meta_Cache_TTL 60s
        Annotations         Off

  _filter-de_dot.conf: |-
    [FILTER]
        Name    lua
        Match   kube.*
        script  /fluent-bit/etc/dedot.lua
        call    dedot

  _output-opensearch-journals.conf: |-
    [OUTPUT]
        Name                opensearch
        Match               systemd.*
        Alias               systemd
        Host                ${FLUENT_opensearch_HOST}
        Port                ${FLUENT_opensearch_PORT}
        HTTP_User           ${FLUENT_opensearch_USER}
        HTTP_Passwd         ${FLUENT_opensearch_PASSWORD}
        Logstash_Format     On
        Logstash_Prefix     systemd
        Replace_Dots        On
        Retry_Limit         25
        Trace_Error         On
        Suppress_Type_Name  On
        Include_Tag_Key     Off
        Time_Key_Nanos      Off
        Generate_ID         On
        tls                 On
        tls.Verify          On
        tls.ca_file         /fluent-bit/ssl/root-ca.pem
        tls.crt_file        /fluent-bit/ssl/admin.pem
        tls.key_file        /fluent-bit/ssl/admin-key.pem

  _output-opensearch-containers.conf: |-
    [OUTPUT]
        Name                opensearch
        Match               kube.*
        Alias               containers
        Host                ${FLUENT_opensearch_HOST}
        Port                ${FLUENT_opensearch_PORT}
        HTTP_User           ${FLUENT_opensearch_USER}
        HTTP_Passwd         ${FLUENT_opensearch_PASSWORD}
        Logstash_Format     On
        Logstash_Prefix     containers
        Replace_Dots        On
        Retry_Limit         25
        Trace_Error         On
        Suppress_Type_Name  On
        Include_Tag_Key     Off
        Generate_ID         On
        tls                 On
        tls.Verify          On
        tls.ca_file         /fluent-bit/ssl/root-ca.pem
        tls.crt_file        /fluent-bit/ssl/admin.pem
        tls.key_file        /fluent-bit/ssl/admin-key.pem
        Buffer_Size         1024kb

  _output-kafka.conf: |-
    [OUTPUT]
        Name                             kafka
        Match                            *
        Alias                            kafka
        Brokers                          my-release-kafka-0:9092
        Topics                           containers
        Retry_Limit                      False
        timestamp_format                 iso8601
        rdkafka.log.connection.close     false
        rdkafka.request.required.acks    all
        rdkafka.message.max.bytes        10000000
        rdkafka.queue.buffering.max.ms   50
        rdkafka.client.id                ${HOSTNAME}

  dedot.lua: |-
    function dedot(tag, timestamp, record)
      if record["kubernetes"] == nil then
        return 0, 0, 0
      end
      dedot_keys(record["kubernetes"]["annotations"])
      dedot_keys(record["kubernetes"]["labels"])
      return 2, timestamp, record
    end

    function dedot_keys(map)
        if map == nil then
            return
        end
        local new_map = {}
        local changed_keys = {}
        for k, v in pairs(map) do
            local dedotted = string.gsub(k, "%.", "_")
            if dedotted ~= k then
                new_map[dedotted] = v
                changed_keys[k] = true
            end
        end
        for k in pairs(changed_keys) do
            map[k] = nil
        end
        for k, v in pairs(new_map) do
            map[k] = v
        end
    end

  parsers.conf: |-
    [PARSER]
        Name        kube-tag
        Format      regex
        Regex       ^(?<pod_id>[^_/]+)\.(?<namespace_name>[^_/]+)\.(?<pod_name>[^_/]+)\.(?<container_name>[^/]+)$
        Time_Format %Y-%m-%dT%H:%M:%S.%L%Z

    [PARSER]
        Name        syslog
        Format      regex
        Regex       ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
        Time_Key    time
        Time_Format %b %d %H:%M:%S

    # Appending any additional parsers from fluentbit-custom-files
    # parsers.conf must be the LAST file as parsers.conf
    # does NOT support the @INCLUDE syntax to append more.
    #
    # Using regexMatch (and others) from https://github.com/Masterminds/sprig/blob/master/regex.go

    #fluent-bit-configs/parser-nginx.conf
    [PARSER]
        Name        k8s-nginx-ingress
        Format      regex
        Regex       ^(?<host>[^ ]*) - (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*) "(?<referrer>[^\"]*)" "(?<agent>[^\"]*)" (?<request_length>[^ ]*) (?<request_time>[^ ]*) \[(?<proxy_upstream_name>[^ ]*)\] (\[(?<proxy_alternative_upstream_name>[^ ]*)\] )?(?<upstream_addr>[^ ]*) (?<upstream_response_length>[^ ]*) (?<upstream_response_time>[^ ]*) (?<upstream_status>[^ ]*) (?<reg_id>[^ ]*).*$
        Time_Key    time
        Time_Format %d/%b/%Y:%H:%M:%S %z

# Adds helm chart supplied plugin configurations to the fluent-bit secret


  #fluent-bit-configs/filter-nginx.conf
  filter-nginx.conf: |-
    [FILTER]
        Name          rewrite_tag
        Match         kube.*
        Rule          $kubernetes['labels']['app_kubernetes_io/name'] "^(ingress-nginx)$" nginx false
        Emitter_Name  nginx
        Emitter_Storage.type  filesystem
    [FILTER]
        Name                parser
        Match               nginx
        Key_Name            log
        Parser              k8s-nginx-ingress
        Reserve_Data        True


  #fluent-bit-configs/output-nginx.conf
  output-nginx.conf: |-
    [OUTPUT]
        Name                opensearch
        Match               nginx
        Alias               nginx
        Host                ${FLUENT_opensearch_HOST}
        Port                ${FLUENT_opensearch_PORT}
        HTTP_User           ${FLUENT_opensearch_USER}
        HTTP_Passwd         ${FLUENT_opensearch_PASSWORD}
        Logstash_Format     On
        Logstash_Prefix     nginx
        Replace_Dots        On
        Retry_Limit         False
        Trace_Error         On
        Suppress_Type_Name  On
        Include_Tag_Key     Off
        Time_Key_Nanos      Off
        Generate_ID         On
        tls                 On
        tls.Verify          On
        tls.ca_file         /fluent-bit/ssl/root-ca.pem
        tls.crt_file        /fluent-bit/ssl/admin.pem
        tls.key_file        /fluent-bit/ssl/admin-key.pem
---
# Source: kubernetes-logging/templates/kafka/kafka-sec-cacert.yaml
### Generate random self-signed CA certificate
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kafka-brokers-cert
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
type: kubernetes.io/tls
data:
  # generate certificates if secret does not exists
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMekNDQWhlZ0F3SUJBZ0lRRTJiKzBwZDZIWUlvTCtoY2liVGhFakFOQmdrcWhraUc5dzBCQVFzRkFEQWkKTVNBd0hnWURWUVFERXhkVFpXeG1VMmxuYm1Wa0xVTkJZMlZ5ZEMxTFlXWnJZVEFlRncweU5EQTJNakF4TkRVMwpNemxhRncweU5UQTJNakF4TkRVM016bGFNQ0l4SURBZUJnTlZCQU1URjFObGJHWlRhV2R1WldRdFEwRmpaWEowCkxVdGhabXRoTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE1UThxcTAzWVpEL1kKdmRMdWFiZUlYTUZtRzJ2ZEVqS0RLajBzSW4wQTVxU05pSHZhNVhxUW8rc0hXQTVzMUoyY0RmeXl3VWZnRE1PQQpsR29HTUkyRkl0MHNubkNqdU9sd3dweC9BWnJSTVZhYTRTMnZCcTA5VldpM0tFTjM1NjYwRXIxVnFNM1pFQVpqCnBheC84SWdja1Z6WmRCNVBJcGVrYTNITE1lWDBzWDcxalFXMW41djVPdkIyNWVIKzJpeVUzK2d2dWZVL0dQNmoKalUyNnU3RkVLL1NVVEtGenJaRXV1Z0FRMlI2djUyWFhZU2FvLzRFZnZHQU5FV2haK1JKcmNqZkZ1NE1hbnRLZgpzOUNVVFJ0OU0ybU9XSEl2MjN4ZnBEYThUSjJpZHkrZHFzcTV3Zy9OdjBwTk1vWmJRS1pwUkVBcTVHSlRPME05CmVzVE5aVjFrV3dJREFRQUJvMkV3WHpBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUIKQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGRTUxWnhkNQphVEtteTduU254WU4wRlZPMUJZR01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2d0NW5ZOWNrOXVDNVNDTnluCkdrWFRYRmNvRjZKQWI5N3R3NGFuM2M4VHhiS1dodzc5dVllVUpQb1JzV2ZId3cwMWlMYmN5L05qWlBiS1RYVUsKTlhkVWM2MVhyNk80OWFLUHU3NnIvek1weTJHNDd0Z3k3NnBSVnJJY1o5c3hUR2RaT1RDM056WVlRUUVGdWgxRgp0a3p4MDJnVU53emtnNUh3RTVBZmVGOGhVV3R4ZkxkeHF6NTN6eU9xQ2pvejdJb0tpT0lmSVQ4WXVNWXRqME5iCk15SHl0bUJwaGRsS3dnR0tPUC80ODkyK1pzeVZ3czR0NVp5aklMVHdtQ0Y5RkVZMlJjdHpERXpJVmtzWkd1a0gKWlk3ZFRYYm05MDMwbjJ4QWhtT1FPZnhpV2pBRDRERk1jeHdJN1JBQ2hiVUJRcUxONTFRWCtzZTAwSDV6bWpZegorMHFuCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNVE4cXEwM1laRC9ZdmRMdWFiZUlYTUZtRzJ2ZEVqS0RLajBzSW4wQTVxU05pSHZhCjVYcVFvK3NIV0E1czFKMmNEZnl5d1VmZ0RNT0FsR29HTUkyRkl0MHNubkNqdU9sd3dweC9BWnJSTVZhYTRTMnYKQnEwOVZXaTNLRU4zNTY2MEVyMVZxTTNaRUFaanBheC84SWdja1Z6WmRCNVBJcGVrYTNITE1lWDBzWDcxalFXMQpuNXY1T3ZCMjVlSCsyaXlVMytndnVmVS9HUDZqalUyNnU3RkVLL1NVVEtGenJaRXV1Z0FRMlI2djUyWFhZU2FvCi80RWZ2R0FORVdoWitSSnJjamZGdTRNYW50S2ZzOUNVVFJ0OU0ybU9XSEl2MjN4ZnBEYThUSjJpZHkrZHFzcTUKd2cvTnYwcE5Nb1piUUtacFJFQXE1R0pUTzBNOWVzVE5aVjFrV3dJREFRQUJBb0lCQVFDTTV1bCtldUpUdUpxaApHakdpUWszVmtQbzRmLzk3aENyL1BxWDVpUitXd1Q1MjZJbGNoQ3FaU3FnMzJKZkZxalltdkgxUk85OXN1bzVMCnZYU1ZSVmpTZTI5SS8wMFhJREpHNUhHVUVTSUIwWjV3U2VQU25acVBBVjA1blZjUzQzck4xRDN2R3NFZGhIQ2oKcHhzRVlSWUJyVFh1b2Y1WDd5UXJHOUs4blJJS1pENlM1aTZmd2dGcW1Wbkl1aGovQ0MxdnlCK2dqSGQ2YWJ5Twp2SXJNSTdYSkFrMEtVdjZROWVDcHRCSzZtTmNqMU9KTWtmYXJNeDc5UmdPaHFoQnY2SjE2N2FWU0xIUnpXWVNuCmF1MS9td3dycnJ0c0dkeFQwcTVMd3VLalJtc1pqdktsV3FXc0NkckJtS1RtbW1rcnEwZU9PMmtSL082dXZVZU0KYUdQOEZCVEJBb0dCQVB0c2orSTN4aHlnYXpDZ2VIQkFDWElBN2pDOG1vZmpEQ0pvQ096WVVYU25Zd1d4TC9jTQo2d0lVQTJTcXdBUUk2L1EwcHdaYlVXVDlWdWJ6NHV1MDdIMGRxeUJpYllXSDd0aW5SZ1ZaamNrd3Fxbm4yZHM1Cmp5aTdKNjkrNXFYTUVwZWp5ZC9xT2VPRDRBNGF0bmdXRXkwdUFHYURocU1IZERGNnIwZzFpNVJMQW9HQkFPazYKWnZUdlRqY05JczUrZlAyQnRRV0lsNFdMaTkyY1lWVjNXMFluM1IvK3ZyVFJoVjZ1TmRFMWVHaXN2WlVYMTk1cQpLQ2tVVVptWWoyWGw5WlloODhnSGNFOVh1ZzllZ2Nndm9vU2ZaZG5kbmZEVWZNc3FuUk1uL25YOGlMcm9DVkwyCndGMXdkVWs0bkxCYjdadUYvVExCV3FoM2h6YmRvekRmRFF2eVhNWXhBb0dCQU91WFpKUFRNMTVycTBWYmVMK20KSWJPano0MzNqTTI4SVFpMGQzaUhrbncreFBqMmVUMkQ2MHA5T2xpLzcwRllvdENuN2NKMUd5WUloYi9QMUZpTgpwZlB2TXdVYmRnamp3UmxlVkt4NnAvTllHUE13ZitGK1kva0V0a0VxSmpKQnNVSktoY1c5a3hUdjQ2a1R1dHQzCncreFg2S1FtcHFocE9hV0xrbWVWVlA5VkFvR0FSYWlSMDVvZDdFZGFHLzZmYWoveFJ5UFN6YW91TGhSazVkZnUKUlBmbkRZVlNoRU1INkkxenVYYVU3ZjZaNlF2a0I2UUJOclBBNDNVemJ5WE53ZmVHRGpwYWl2Z1N0RUJ2MXRDVApZN1VRQUpBMmVoV2M2RGxrRExLblI2b1RWRysxU1RnMW9ETFVkUGdacEhyd2JzRUlMTDZmU3kzWURzVUgxckxuCi9LZDRtaUVDZ1lBQkF0U0NGbXNiZnR1Z0ZxQ05Ia3NoT1VlZlFqKzJWOFhFWk5INmgyYkk3TjYveCs1V09tR0gKSWhNVnZya2ZwM1kra0FHUWFXa3d6ZTM0UmhKZVlSelE0a1JiOW1sRzVQL1VvaGJOdHFIcVVkWHpWUlFjV045Ngp0RXNLTzhXZUFGWDAyY0k4UzlTR3RKc3lTbXNhSXVVMlZoZnpXbWY4b29rYkVEWGo2TTMwOFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-config-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-dashboards-config
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
stringData:
  opensearch_dashboards.yml: |-
    server:
      host: "0.0.0.0"

    logging:
      quiet: true
      verbose: false
      json: true

    opensearch:
      logQueries: false
      hosts:
      - https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
      username: opensearch
      password: opensearch
      requestHeadersWhitelist: ["securitytenant","authorization"]
      ssl:
        verificationMode: none
        certificateAuthorities:
        - /opt/opensearch-dashboards/config/root-ca.pem

    opensearch_security:
      readonly_mode:
        roles: ["opensearch-dashboards_read_only"]

      multitenancy:
        enabled: true
        tenants:
          enable_global: true
          enable_private: true
          preferred:
            - "Developer"
            - "Global"
            - "Private"

      cookie:
        secure: true
---
# Source: kubernetes-logging/templates/opensearch/os-config-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
stringData:
  opensearch-client.yml: |-
    cluster.name: "logging"
    path.data: /data

    network.host: 0.0.0.0

    discovery.seed_hosts:
      - my-release-cluster-manager-0

    cluster.initial_master_nodes:
      - my-release-cluster-manager-0

    node.roles: []
    node.name: ${HOSTNAME}
    node.processors: ${NODE_PROCESSORS:2}

    thread_pool.write.queue_size: 1000
    thread_pool.search.queue_size: 1000
    thread_pool.get.queue_size: 1000
    thread_pool.analyze.queue_size: 1000
    thread_pool.listener.queue_size: 1000

    plugins.security.allow_unsafe_democertificates: false
    plugins.security.allow_default_init_securityindex: false
    plugins.security.system_indices.enabled: true
    plugins.security.system_indices.indices:
    - ".opendistro-alerting-config"
    - ".opendistro-alerting-alert*"
    - ".opendistro-anomaly-results*"
    - ".opendistro-anomaly-detector*"
    - ".opendistro-anomaly-checkpoints"
    - ".opendistro-anomaly-detection-state"
    - ".opendistro-reports-*"
    - ".opendistro-notifications-*"
    - ".opendistro-notebooks"
    - ".opendistro-asynchronous-search-response*"
    # plugins.security.audit.type: internal_opensearch
    # plugins.security.enable_snapshot_restore_privilege: true
    # plugins.security.check_snapshot_restore_write_privileges: true
    # cluster.routing.allocation.disk.threshold_enabled: false
    # plugins.security.audit.config.disabled_rest_categories: NONE
    # plugins.security.audit.config.disabled_transport_categories: NONE

    # TLS Configuration Transport Layer
    plugins.security.nodes_dn:
      - 'CN=*.kubernetes-logging-4.8.0.tgz.svc.cluster.local'
    plugins.security.authcz.admin_dn:
      - 'CN=admin'
    plugins.security.ssl.transport.pemcert_filepath: node.pem
    plugins.security.ssl.transport.pemkey_filepath: node-key.key
    plugins.security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
    plugins.security.ssl.transport.enforce_hostname_verification: false


    # TLS Configuration REST Layer
    plugins.security.ssl.http.enabled: true
    plugins.security.ssl.http.pemcert_filepath: ofd-rest.pem
    plugins.security.ssl.http.pemkey_filepath: ofd-rest-key.key
    plugins.security.ssl.http.pemtrustedcas_filepath: root-ca.pem
    plugins.security.restapi.roles_enabled: ["all_access", "administrator"]

  opensearch-cluster-manager.yml: |-
    cluster.name: "logging"
    path.data: /data

    network.host: 0.0.0.0

    discovery.seed_hosts:
      - my-release-cluster-manager-0

    cluster.initial_master_nodes:
      - my-release-cluster-manager-0

    node.roles: [ cluster_manager ]
    node.name: ${HOSTNAME}
    node.processors: ${NODE_PROCESSORS:2}

    thread_pool.write.queue_size: 1000
    thread_pool.search.queue_size: 1000
    thread_pool.get.queue_size: 1000
    thread_pool.analyze.queue_size: 1000
    thread_pool.listener.queue_size: 1000

    plugins.security.allow_unsafe_democertificates: false
    plugins.security.allow_default_init_securityindex: false
    plugins.security.system_indices.enabled: true
    plugins.security.system_indices.indices:
    - ".opendistro-alerting-config"
    - ".opendistro-alerting-alert*"
    - ".opendistro-anomaly-results*"
    - ".opendistro-anomaly-detector*"
    - ".opendistro-anomaly-checkpoints"
    - ".opendistro-anomaly-detection-state"
    - ".opendistro-reports-*"
    - ".opendistro-notifications-*"
    - ".opendistro-notebooks"
    - ".opendistro-asynchronous-search-response*"
    # plugins.security.audit.type: internal_opensearch
    # plugins.security.enable_snapshot_restore_privilege: true
    # plugins.security.check_snapshot_restore_write_privileges: true
    # cluster.routing.allocation.disk.threshold_enabled: false
    # plugins.security.audit.config.disabled_rest_categories: NONE
    # plugins.security.audit.config.disabled_transport_categories: NONE

    # TLS Configuration Transport Layer
    plugins.security.nodes_dn:
      - 'CN=*.kubernetes-logging-4.8.0.tgz.svc.cluster.local'
    plugins.security.authcz.admin_dn:
      - 'CN=admin'
    plugins.security.ssl.transport.pemcert_filepath: node.pem
    plugins.security.ssl.transport.pemkey_filepath: node-key.key
    plugins.security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
    plugins.security.ssl.transport.enforce_hostname_verification: false


    # TLS Configuration REST Layer
    plugins.security.ssl.http.enabled: true
    plugins.security.ssl.http.pemcert_filepath: ofd-rest.pem
    plugins.security.ssl.http.pemkey_filepath: ofd-rest-key.key
    plugins.security.ssl.http.pemtrustedcas_filepath: root-ca.pem
    plugins.security.restapi.roles_enabled: ["all_access", "administrator"]

  opensearch-data.yml: |-
    cluster.name: "logging"
    path.data: /data

    network.host: 0.0.0.0

    discovery.seed_hosts:
      - my-release-cluster-manager-0

    cluster.initial_master_nodes:
      - my-release-cluster-manager-0
    node.roles: [ data, ingest ]

    node.name: ${HOSTNAME}
    node.processors: ${NODE_PROCESSORS:2}

    thread_pool.write.queue_size: 1000
    thread_pool.search.queue_size: 1000
    thread_pool.get.queue_size: 1000
    thread_pool.analyze.queue_size: 1000
    thread_pool.listener.queue_size: 1000

    plugins.security.allow_unsafe_democertificates: false
    plugins.security.allow_default_init_securityindex: false
    plugins.security.system_indices.enabled: true
    plugins.security.system_indices.indices:
    - ".opendistro-alerting-config"
    - ".opendistro-alerting-alert*"
    - ".opendistro-anomaly-results*"
    - ".opendistro-anomaly-detector*"
    - ".opendistro-anomaly-checkpoints"
    - ".opendistro-anomaly-detection-state"
    - ".opendistro-reports-*"
    - ".opendistro-notifications-*"
    - ".opendistro-notebooks"
    - ".opendistro-asynchronous-search-response*"
    # plugins.security.audit.type: internal_opensearch
    # plugins.security.enable_snapshot_restore_privilege: true
    # plugins.security.check_snapshot_restore_write_privileges: true
    # cluster.routing.allocation.disk.threshold_enabled: false
    # plugins.security.audit.config.disabled_rest_categories: NONE
    # plugins.security.audit.config.disabled_transport_categories: NONE

    # TLS Configuration Transport Layer
    plugins.security.nodes_dn:
      - 'CN=*.kubernetes-logging-4.8.0.tgz.svc.cluster.local'
    plugins.security.authcz.admin_dn:
      - 'CN=admin'
    plugins.security.ssl.transport.pemcert_filepath: node.pem
    plugins.security.ssl.transport.pemkey_filepath: node-key.key
    plugins.security.ssl.transport.pemtrustedcas_filepath: root-ca.pem
    plugins.security.ssl.transport.enforce_hostname_verification: false


    # TLS Configuration REST Layer
    plugins.security.ssl.http.enabled: true
    plugins.security.ssl.http.pemcert_filepath: ofd-rest.pem
    plugins.security.ssl.http.pemkey_filepath: ofd-rest-key.key
    plugins.security.ssl.http.pemtrustedcas_filepath: root-ca.pem
    plugins.security.restapi.roles_enabled: ["all_access", "administrator"]
---
# Source: kubernetes-logging/templates/opensearch/os-in-certificates-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-certificates
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
type: kubernetes.io/tls
data:
  # generate certificates if secret does not exists
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRYmR5UU5rNzV3UnpUV0JmYXBqQWZXakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkc2IyZG5hVzVuTUI0WERUSTBNRFl5TURFME5UY3pPRm9YRFRNME1EWXhPREUwTlRjegpPRm93RWpFUU1BNEdBMVVFQXhNSGJHOW5aMmx1WnpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUxjOFQ1QUh6WVBBeFordUlLMFFNaVA1dTBETnlXQ3MxVCtTdFJDemJlOEt5QmhVbGROMyt2T0kKaEpkUGRUOGNYY082dERjUzdpUDFhQ05PZHdZbldhOWxRTkFnWU9xeDhNMk9oc2dFc0NtSytkNThGNFJMOXhDOApDaXZhYWN1cnFJWTZ5aWtvdm1adnM1c210cnoyNmdmR2RsV3lhdTAvb1lBVUdDdW5FUXlmRmx2WHdGdDcwaTJwCnQzcXN3SVZkcHRndjMzRjJRRnYyMFgydVBraE5yVm9OYnNyODMzS1RCMWVvVU5Gd2c4VWc3TkYwWkw5WXhQVVEKaXNZaHg4Q05XMmkrSHlCc2tDNExvbU5YbXh1YmRnMDUrOTlsY1lWa1g3bjZmdVJiNUowVlU3aVN2ZmN0TDdmRQp4N2FoaVlySnlCcHJ1bUFyaXdoTnNzWmxzbFlVd2Y4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJUWDVUUVYzT1cvTndyMkphYlM5amltcThvcWdUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBZUg4QjZKTW1FZTFCeXI5TjNEb2hyOTYxdG9wT3J5NGF5MkZGcVlkb0xRQlVOdEl5OUhwOG5vM2ZsOFJNCk5jRGZMYUlsamtKKzdSMXR0OXA3LzdhNGRaOTRyUzErUGVvcCsyL0J2OStxQkdsMzZmSHRQdTEvcmxObFhkYXQKWEJzRDArOTZ3TWhSL2F1cHdjSmNpS3VqcGVHTnJreEI3K0Q2SlB6R1NCeWw0YW5pVnN2Z2NZM2lGZjBXZG80dwpPN1kweUFHOHI3MFdmUzJFRjNxeGZmMi8zVzJ2S1VCVnhqbnZ5UnMrU1lZYkxiU08wbGhIWmpnS1N4QmV5ZmRmClRESUhWWmJKclVKdlBNNDE5cmlnUUUveVgvT1l5ZFZ3SWYwRWlZRHEwS3BYb2hTaDhZbmxOTTF3dVBMQ0N2YXMKL1ZhNlJSa09WQnBFT3Z6NFgvbnpkRzd0Mmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURkekNDQWwrZ0F3SUJBZ0lSQUlBSjVxaTEvVWtGd1pZM0o4U2FwZUl3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGJHOW5aMmx1WnpBZUZ3MHlOREEyTWpBeE5EVTNNemhhRncwek5EQTJNVGd4TkRVMwpNemhhTURzeE9UQTNCZ05WQkFNTU1Db3VhM1ZpWlhKdVpYUmxjeTFzYjJkbmFXNW5MVFF1T0M0d0xuUm5laTV6CmRtTXVZMngxYzNSbGNpNXNiMk5oYkRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1FdEFLR2tpbmpBN2VrMjN1RngrSEdyT0N2RjdjY0J1QU96eXhtcHFlcDNGaWRXbk9vaDZRV3BtV2hYcjh5awpIUG94RFZLdml1UUFDcWgrZndRUWJuSWJIZ0lpNnBjQlhSVFV1V3Y2ZFNZdkc3Y1lIci9WcGlVMWFmRWFKV00xClBhaXBOVmZPeHVJUWpHTmMwVG8xY29TTTRRUHp0MDRsaEJCcXNoUnZvMzczNGx2eDU3djYwZTl6ZE9hQm1nSi8KcVBTTkJIM1Z3Mk5PR2tPTVlIQmUzUTVSM1gyU0VESHk3dnRXSWdYTjlXelR3a2kwcHJTNXZUbjdyTlhpR2hxbApmdXQwWENBSTdqL0NaeTVaUmtWc2gzT3J1b0VQczNWcStlMzJZYS85dUlNQVN3UHRFbVdHRVJTTG04MThIT2MwCkJOUFAvSERVWXo5d3ZMbVhzemkzd1BVQ0F3RUFBYU9CbmpDQm16QU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWUQKVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwagpCQmd3Rm9BVTErVTBGZHpsdnpjSzlpV20wdlk0cHF2S0tvRXdPd1lEVlIwUkJEUXdNb0l3S2k1cmRXSmxjbTVsCmRHVnpMV3h2WjJkcGJtY3ROQzQ0TGpBdWRHZDZMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCQy84U1pNb2IwR09sWG5ZR3RWRWc2ZCtYeUFvWHBNZHBPWk55eklubEtleWhvaW5ONApBeDhpSkExTEJOc2ZSSkg4TTZ3WHFmOHE5c2VQRzRydHBvc29pc2lmMGE4T2xSNEpHSEJkQ3c1OG14enBqb1FFCnp2V2poRkphbkllT0Z6eEJuakg0QlEwQy9EZDJ3eExJUWV4MVRKU0J5OWJZNHZSNlBObFEvVUUzYkFieTR6Y2wKVCtXaXpjcGE0QkpwSTZzS054QUpUMC9pZFNyN1BJK0UrQnk2OTJqb1hyNDBzR0pqK2NpNTl3bmg1a1FFWEZqVAoyVHNNV0JXWmdyak92TGhnWGpneEN3bG82VnFwUU5ZOVRSSTFqRzBYR05yMlJOUmxhclhIM2Zob2NlbzYyeTdQCnJKRlRjZjJwZFE4elBVNysweVZlQkZZQnVBd01UQ0hxZmM3RQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd1MwQW9hU0tlTUR0NlRiZTRYSDRjYXM0SzhYdHh3RzRBN1BMR2FtcDZuY1dKMWFjCjZpSHBCYW1aYUZldnpLUWMrakVOVXErSzVBQUtxSDUvQkJCdWNoc2VBaUxxbHdGZEZOUzVhL3AxSmk4YnR4Z2UKdjlXbUpUVnA4Um9sWXpVOXFLazFWODdHNGhDTVkxelJPalZ5aEl6aEEvTzNUaVdFRUdxeUZHK2pmdmZpVy9Ibgp1L3JSNzNOMDVvR2FBbitvOUkwRWZkWERZMDRhUTR4Z2NGN2REbEhkZlpJUU1mTHUrMVlpQmMzMWJOUENTTFNtCnRMbTlPZnVzMWVJYUdxVis2M1JjSUFqdVA4Sm5MbGxHUld5SGM2dTZnUSt6ZFdyNTdmWmhyLzI0Z3dCTEErMFMKWllZUkZJdWJ6WHdjNXpRRTA4LzhjTlJqUDNDOHVaZXpPTGZBOVFJREFRQUJBb0lCQUZSeUFNbW9yU08yYXdvOQpBMWVZUTl3azFneEVuUG9XNVVNeEVJTHFhUzNtMnhkZFJJRVJTOVUrMjZJQ1d3WmhZNDEzYmZTTWFuSGJGczJyClpvajNTZUMxdS91QkdmM2pDYmEyZTB3Wms2YWFoMG9WMEROYUNTUlE0andVaXUyQWM3RE1MMVp3UFA3TDd5THMKaTBZZjRTelNqUGIyVGxacURmNUROZys2OGNUcGdZUitCWldxLzBrcGo4WUs2OVlnTXNBVEJxQTJua3lVWG83NQp2b2NJZWdrZHVWTHNEd1QrdFhlNEk0RE1IUDZQaFQ1YjVBaHZmOWh1QmlnblRyR1lxaU4zKzZoei9NTUJIY21zCmZ0aElJY09PUEJaUFYyUkFpUVVWSGlva1ZpTDhaOE51L0doNDVSNVZ2Mm5QM09XdzFGUE55eUNQMGNWRFBDQTgKV3NSblF1RUNnWUVBd1ZwOGlLdVpIKytubk50SXZMc3hycVd2dld6a08zSlQyMkt0K3VLRzBMR1BJTWdUZnl3WQpKOHF4eWkvSWpwTTFNakxLQ21FSWpEVTRmbXVoQndyb29HWFd4VDJHS0RpblpJZk9vL2U3eS9pY0cyZ3ZQdlBwClpLZUZKTUVCeGdabS9KUXZrWCs1Sm9tU3FTam1GZ0VIM202WWU5aEtvSjJmdDU0V2h5STBKdWtDZ1lFQS84UEgKZU9RYjJGVUVqUHBzK0VGTzgrODMzS092RzJvOURFZjV2RTNod3NWdm84Z0twTWVBNFdMQjBmUFE5L3k5dmNzQgp4d3U0RFRhMjRXZS9mNmlMYmg0NlhhWENpWHo2V2lJaEZKV3Evc1VGcTVXZjgxN0dDOXNZbCtFUkZqRG9oaUpuClZtd0h5ZHFYVVhSOXpnU25teUtaaTc2V1JIRGJobUJuWGFPSFdpMENnWUVBdHpnZGhnekZQeVFEdW5sNHhZN0YKRjIvZHhpd25ZY1dHZlA5WFNjUGFhR3U0NnlGc2lEZXFkQnA0dXRUb3dXSHhLSzVFRWUyOUFjOTB4eWNLSWZoTwpVNS90RWw2b2YvaWZkbjNTYkVIV2JRUWFPVVpTYnQ4R3JPQ3BKQmpZcTJOcHQ3SmNHUTNrendYU09nV05jaEJyCituVG1mWVNKd3dWYVVjNjJIanRsRy9FQ2dZQnIyUzljcjd0NkhtZDcxd0ZxTVlmTVhyd01nczBNMzJCOHRFRC8KZ1V2SWFKNnB6bW1Ha0VXdFJJcDhNTGFXUzNIcS9SWnp5MkpCMkNlSHBzcmVWc0Rzbnp4M1RyVllhbVhhNmZkUApDY21BQXE1Z2F3aDJoQ2s0eUp0M044V1B1UEhqMWRBRFppeG1scEVtSE53THFuVE9ldW1LUHNSNGVhcG40SERWCjBHWDd4UUtCZ1FDSXphbTdORk9PQmpFRnE0eVlhNVphTkFadTlNY1M4K3hTS200THAzWHlHVFpHanZRdm01T0sKNzVkQlg2a3Y4Z24wZ1YwTzhRYytnRWtjSmcrOGJldjY3WFBrdU5xTTlFdnVCalYrZ2tOWWtCUGk1SlNsQ2l1cgpQeTZEdmJSRHprNUlhRWk1dktvbDRVdFV0Z3hXNDhhbmVtUEgzOWxNQ1BFYjlnZkd5cEFNUnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: kubernetes-logging/templates/opensearch/os-in-certificates-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-admin-certificate
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
type: kubernetes.io/tls
data:
  # generate certificate if secret does not exists
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRYmR5UU5rNzV3UnpUV0JmYXBqQWZXakFOQmdrcWhraUc5dzBCQVFzRkFEQVMKTVJBd0RnWURWUVFERXdkc2IyZG5hVzVuTUI0WERUSTBNRFl5TURFME5UY3pPRm9YRFRNME1EWXhPREUwTlRjegpPRm93RWpFUU1BNEdBMVVFQXhNSGJHOW5aMmx1WnpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQUxjOFQ1QUh6WVBBeFordUlLMFFNaVA1dTBETnlXQ3MxVCtTdFJDemJlOEt5QmhVbGROMyt2T0kKaEpkUGRUOGNYY082dERjUzdpUDFhQ05PZHdZbldhOWxRTkFnWU9xeDhNMk9oc2dFc0NtSytkNThGNFJMOXhDOApDaXZhYWN1cnFJWTZ5aWtvdm1adnM1c210cnoyNmdmR2RsV3lhdTAvb1lBVUdDdW5FUXlmRmx2WHdGdDcwaTJwCnQzcXN3SVZkcHRndjMzRjJRRnYyMFgydVBraE5yVm9OYnNyODMzS1RCMWVvVU5Gd2c4VWc3TkYwWkw5WXhQVVEKaXNZaHg4Q05XMmkrSHlCc2tDNExvbU5YbXh1YmRnMDUrOTlsY1lWa1g3bjZmdVJiNUowVlU3aVN2ZmN0TDdmRQp4N2FoaVlySnlCcHJ1bUFyaXdoTnNzWmxzbFlVd2Y4Q0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trCk1CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUIwR0ExVWREZ1FXQkJUWDVUUVYzT1cvTndyMkphYlM5amltcThvcWdUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBZUg4QjZKTW1FZTFCeXI5TjNEb2hyOTYxdG9wT3J5NGF5MkZGcVlkb0xRQlVOdEl5OUhwOG5vM2ZsOFJNCk5jRGZMYUlsamtKKzdSMXR0OXA3LzdhNGRaOTRyUzErUGVvcCsyL0J2OStxQkdsMzZmSHRQdTEvcmxObFhkYXQKWEJzRDArOTZ3TWhSL2F1cHdjSmNpS3VqcGVHTnJreEI3K0Q2SlB6R1NCeWw0YW5pVnN2Z2NZM2lGZjBXZG80dwpPN1kweUFHOHI3MFdmUzJFRjNxeGZmMi8zVzJ2S1VCVnhqbnZ5UnMrU1lZYkxiU08wbGhIWmpnS1N4QmV5ZmRmClRESUhWWmJKclVKdlBNNDE5cmlnUUUveVgvT1l5ZFZ3SWYwRWlZRHEwS3BYb2hTaDhZbmxOTTF3dVBMQ0N2YXMKL1ZhNlJSa09WQnBFT3Z6NFgvbnpkRzd0Mmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREVENDQWZXZ0F3SUJBZ0lSQU9PTHloL3FXU1FyT2graUVPSi9LSmt3RFFZSktvWklodmNOQVFFTEJRQXcKRWpFUU1BNEdBMVVFQXhNSGJHOW5aMmx1WnpBZUZ3MHlOREEyTWpBeE5EVTNNemhhRncwek5EQTJNVGd4TkRVMwpNemhhTUJBeERqQU1CZ05WQkFNVEJXRmtiV2x1TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCCkNnS0NBUUVBeXJHN3RZRGRjWll0Q3FaYWkySm8yNzl0QkZzQmp4TWp5b3pxNlZDa01oWXg0YXM1T1labjJhTjEKZDNpWHhsbUVpMjc2RE9lbHN2OE5zRCtvL2VYcjRqdVZXNGVzZE5HRjcvNENCeWtGQ0pVWWlxdGlPU3k2N2xZcgpGSVo1MzBQWlpmQVlFdUtFQzR1MS9mbThVWnU0R0tuZVFpME5NSXNuQ29QWWlTODcybUFYbGJYNTQ1MWpwV0M3CmpxSVBuVnIyOWdRRFovWTBWVjhjSzI1R1Nkcmlqcmh6aTVYQVE3cFd2VjFrWGREZXUxbWVFQkw3OHRUWURyRWYKL05MUlZKU29DcGowWlVPWDQ4Qm9hSmt4ZXJwUHNhajBOeHhHa3BxSjJiWXJ0aGlwbTZFalBJai9mRnNwckpPbwo3d255VHJUNFhTTmM5OTVtZ1Y0Z2hvQ055clJsaHdJREFRQUJvMkF3WGpBT0JnTlZIUThCQWY4RUJBTUNCYUF3CkhRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WUQKVlIwakJCZ3dGb0FVMStVMEZkemx2emNLOWlXbTB2WTRwcXZLS29Fd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQgpBQ05vZE9XWjBnUW11QVVCK1A4ZmZod3BEWTJ1SmlCZFltOWFMOHk5d1poNjlzcnN4RWdHV3FYTmRuT1JxM0pPCk5LZmRlbTgvS2NpWUh5MVZVS2I1clBmMUVQTFpKNHBjZHBDaWV5SUN3RkpQcG43dzJzdXJhVW9CL1E3VGhBYnAKVlMxQ3F5TVA3QXpsV01GNDBBZVBlR2F2c201VkQ3LzAxaDBDNzhSMFlFR29BdzBwc0FuYnBibkpzN0Mva1RXVgpZV00zQTFjR0dwd0JKUGViL05yc1RPTXYwWVJnVjFxT0o1VVJ2cytDdFVpSWRXQjNiR2pXL2VuRlpRbG4xT3pJCk5OYVpubUR0eUlEWGJkMmg5R3dkeTFFcXBHTjh4Y21CdnRIT0xTRTJIVGJ2UzgyZHJURldVS3RkeVpScGRCVi8KN2pQOEpQeHNISllJSFJPQVdzRzYzZ0U9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBeXJHN3RZRGRjWll0Q3FaYWkySm8yNzl0QkZzQmp4TWp5b3pxNlZDa01oWXg0YXM1Ck9ZWm4yYU4xZDNpWHhsbUVpMjc2RE9lbHN2OE5zRCtvL2VYcjRqdVZXNGVzZE5HRjcvNENCeWtGQ0pVWWlxdGkKT1N5NjdsWXJGSVo1MzBQWlpmQVlFdUtFQzR1MS9mbThVWnU0R0tuZVFpME5NSXNuQ29QWWlTODcybUFYbGJYNQo0NTFqcFdDN2pxSVBuVnIyOWdRRFovWTBWVjhjSzI1R1Nkcmlqcmh6aTVYQVE3cFd2VjFrWGREZXUxbWVFQkw3Cjh0VFlEckVmL05MUlZKU29DcGowWlVPWDQ4Qm9hSmt4ZXJwUHNhajBOeHhHa3BxSjJiWXJ0aGlwbTZFalBJai8KZkZzcHJKT283d255VHJUNFhTTmM5OTVtZ1Y0Z2hvQ055clJsaHdJREFRQUJBb0lCQVFERnB5a1c1ZEdLcU5uRgpMOUROYUtvOTF0NFV5RFd0OGdrTncvcHloNHVGdC9UdVRVeGhGdnAvMVJCLzd0MTVzdU00SUlDL1FzaG0wcVhqCmYwQm9UZU9HV1huY3BtRjZETEtpQXp5eEJNUCt5WDBFQS9tbExVUWZrM0V3ODYwMkZQQ1NvZHluMWJEVG5XcGIKZmtLd0Jid3dlTHplSlJaZWh1TU1NdU5kYXV6ZmxPWStMOC9uUHdWT1hQb1dHWk5EMVJtQmthRHNFYjkwamNCMwpNa0JobTZDSWkyN2ZQY2pVUUhUcmdiYlUyWm95SkREejNkNzNmZmhmbEdpZUxRT0YwMUF1WmFvRllsMEpCVFQrCkxWYXRETFhEZHdmWnBBakkwNDdwNVVqVUZLWkJqQ2NTY0djbEUyZkJDK0Q5T1BTR2F3cUtPT05kd1ZRaVJNdlYKcDYvUlV1dnBBb0dCQU9EZm0zUDB5RkF4WTE5RUhERmJwS2kwSElaSzJuZm1MVTcwNStCMHE2RE50VzJxM2Y3dwpoRTN3aGRRUzNQNmd1M2ZNSGJxdHNrVkNkZHZHYkhMcEJpS0RKUm5Kb0d0bjk4cndoTkc0K2pVcHJaWjh6VjVIClorNFo5QkorQWkwdmljYnd3VE5HeW43YUJCRGprMGF2RTByam9TNzNqQTc4WitoREhYTE1uRlN6QW9HQkFPYkEKTk1EQUMyM0RSWkpYWWdubUFta3lxbUxQQmpIVjgzYUQ1UUZFWmU2R09mMDUvaTVsT0ZoVTloZzdhSWRiSlYragovb21BWnNQYTJIcGxteDlvd3VYT1lWZGpteitpUWpNaURKdDdhU0JCT2xncE5yOGdZTXJrU1ZjVFZSK3FxaCtSCnhLekE3T2Z1K2NXbWtLNWozTWlnQXNDT1ByN3ZiY1Rpd2JKdXZSM2RBb0dCQU1nYlU0c3hSVnZQUnoyTUw0WmcKcGJzV1k5ZkJIbjNaajNJV2o0ejJaWS8zM2o0VDhlNmVleTJjSG9za3FoSFFXR0ozZWZFWUJtNkpnTFdzOGU2agpuRGp6K1B6a3BtTk5wbnlwNFpkN0F2UngvUzNRS3pSOVdHZlNJcGFlR1RPNmZPRlNkcW81a1pLbVVUM3lOYW1OCnZCNUZSN2F5eEtqRlJYV3kyNjYvazFIdkFvR0JBTHF5YnJ3NVpjWFVSWmtHN0lLM3YrR2ZwYTQyZEh1ajhNMUcKSCtacmtkRndkc0RFeUR4L2x4d1krZGhYVU5hYlQxelhraDFzYnprdCt4TGszS0tJSDVEUjczNUdVQmtuVGtxUwoxUUtEMG1YUGdNWk42a2F2aXNEOS9iemZIbk4xb1JuVDFmNDBSam5ONS9jY01sbDI0TzdPVUF1OXkxU3U0ZkIzCnkySjBLTDFkQW9HQkFKSjhHQUMzVE1EOGJVRnM0SE55Mld3bEpMNWNlZzJrbVZoQi9rQjMrenFOaDFVRHVUZ3AKaHhLczNyT29WZ09jc2Fuci9Ic1ppWm9VVmpMMmlMcm1GSGRaSm5HOFJ3TXNrMkZ3d0ZlRmdVZ1dNeGZHTkp2VgpOMlg2QWhHaEh4UG9oLzcyZTU2TDNsREJpMGdMdGdTYVRPdklwQ1VYcU9oSjZpSWxCSUNnMHBsQwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: kubernetes-logging/templates/opensearch/os-securityconfig-sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-securityconfig
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
type: Opaque
data:
  action_groups.yml: |-
    X21ldGE6CiAgdHlwZTogImFjdGlvbmdyb3VwcyIKICBjb25maWdfdmVyc2lvbjogMgo=

  audit.yml: |-
    X21ldGE6CiAgdHlwZTogImF1ZGl0IgogIGNvbmZpZ192ZXJzaW9uOiAyCgpjb25maWc6CiAgIyBlbmFibGUvZGlzYWJsZSBhdWRpdCBsb2dnaW5nCiAgZW5hYmxlZDogZmFsc2UKCiAgYXVkaXQ6CiAgICAjIEVuYWJsZS9kaXNhYmxlIFJFU1QgQVBJIGF1ZGl0aW5nCiAgICBlbmFibGVfcmVzdDogZmFsc2UKCiAgICAjIENhdGVnb3JpZXMgdG8gZXhjbHVkZSBmcm9tIFJFU1QgQVBJIGF1ZGl0aW5nCiAgICBkaXNhYmxlZF9yZXN0X2NhdGVnb3JpZXM6CiAgICAgIC0gQVVUSEVOVElDQVRFRAogICAgICAtIEdSQU5URURfUFJJVklMRUdFUwoKICAgICMgRW5hYmxlL2Rpc2FibGUgVHJhbnNwb3J0IEFQSSBhdWRpdGluZwogICAgZW5hYmxlX3RyYW5zcG9ydDogdHJ1ZQoKICAgICMgQ2F0ZWdvcmllcyB0byBleGNsdWRlIGZyb20gVHJhbnNwb3J0IEFQSSBhdWRpdGluZwogICAgZGlzYWJsZWRfdHJhbnNwb3J0X2NhdGVnb3JpZXM6CiAgICAgIC0gQVVUSEVOVElDQVRFRAogICAgICAtIEdSQU5URURfUFJJVklMRUdFUwoKICAgICMgVXNlcnMgdG8gYmUgZXhjbHVkZWQgZnJvbSBhdWRpdGluZy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcnRlZC4gRWc6CiAgICAjIGlnbm9yZV91c2VyczogWyJ0ZXN0LXVzZXIiLCAiZW1wbG95ZWUtKiJdCiAgICBpZ25vcmVfdXNlcnM6CiAgICAgIC0gb3BlbnNlYXJjaAoKICAgICMgUmVxdWVzdHMgdG8gYmUgZXhjbHVkZWQgZnJvbSBhdWRpdGluZy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcnRlZC4gRWc6CiAgICAjIGlnbm9yZV9yZXF1ZXN0czogWyJpbmRpY2VzOmRhdGEvcmVhZC8qIiwgIlNlYXJjaFJlcXVlc3QiXQogICAgaWdub3JlX3JlcXVlc3RzOiBbXQoKICAgICMgTG9nIGluZGl2aWR1YWwgb3BlcmF0aW9ucyBpbiBhIGJ1bGsgcmVxdWVzdAogICAgcmVzb2x2ZV9idWxrX3JlcXVlc3RzOiBmYWxzZQoKICAgICMgSW5jbHVkZSB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdCAoaWYgYXZhaWxhYmxlKSBmb3IgYm90aCBSRVNUIGFuZCB0aGUgdHJhbnNwb3J0IGxheWVyCiAgICBsb2dfcmVxdWVzdF9ib2R5OiB0cnVlCgogICAgIyBMb2dzIGFsbCBpbmRpY2VzIGFmZmVjdGVkIGJ5IGEgcmVxdWVzdC4gUmVzb2x2ZXMgYWxpYXNlcyBhbmQgd2lsZGNhcmRzL2RhdGUgcGF0dGVybnMKICAgIHJlc29sdmVfaW5kaWNlczogdHJ1ZQoKICAgICMgRXhjbHVkZSBzZW5zaXRpdmUgaGVhZGVycyBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBsb2dzLiBFZzogQXV0aG9yaXphdGlvbgogICAgZXhjbHVkZV9zZW5zaXRpdmVfaGVhZGVyczogdHJ1ZQoKICBjb21wbGlhbmNlOgogICAgIyBlbmFibGUvZGlzYWJsZSBjb21wbGlhbmNlCiAgICBlbmFibGVkOiB0cnVlCgogICAgIyBMb2cgdXBkYXRlcyB0byBpbnRlcm5hbCBzZWN1cml0eSBjaGFuZ2VzCiAgICBpbnRlcm5hbF9jb25maWc6IHRydWUKCiAgICAjIExvZyBleHRlcm5hbCBjb25maWcgZmlsZXMgZm9yIHRoZSBub2RlCiAgICBleHRlcm5hbF9jb25maWc6IGZhbHNlCgogICAgIyBMb2cgb25seSBtZXRhZGF0YSBvZiB0aGUgZG9jdW1lbnQgZm9yIHJlYWQgZXZlbnRzCiAgICByZWFkX21ldGFkYXRhX29ubHk6IHRydWUKCiAgICAjIE1hcCBvZiBpbmRleGVzIGFuZCBmaWVsZHMgdG8gbW9uaXRvciBmb3IgcmVhZCBldmVudHMuIFdpbGRjYXJkIHBhdHRlcm5zIGFyZSBzdXBwb3J0ZWQgZm9yIGJvdGggaW5kZXggbmFtZXMgYW5kIGZpZWxkcy4gRWc6CiAgICAjIHJlYWRfd2F0Y2hlZF9maWVsZHM6IHsKICAgICMgICAidHdpdHRlciI6IFsibWVzc2FnZSJdCiAgICAjICAgImxvZ3MtKiI6IFsiaWQiLCAiYXR0cioiXQogICAgIyB9CiAgICByZWFkX3dhdGNoZWRfZmllbGRzOiB7fQoKICAgICMgTGlzdCBvZiB1c2VycyB0byBpZ25vcmUgZm9yIHJlYWQgZXZlbnRzLiBXaWxkY2FyZCBwYXR0ZXJucyBhcmUgc3VwcG9ydGVkLiBFZzoKICAgICMgcmVhZF9pZ25vcmVfdXNlcnM6IFsidGVzdC11c2VyIiwgImVtcGxveWVlLSoiXQogICAgcmVhZF9pZ25vcmVfdXNlcnM6CiAgICAgIC0gb3BlbnNlYXJjaAoKICAgICMgTG9nIG9ubHkgbWV0YWRhdGEgb2YgdGhlIGRvY3VtZW50IGZvciB3cml0ZSBldmVudHMKICAgIHdyaXRlX21ldGFkYXRhX29ubHk6IHRydWUKCiAgICAjIExvZyBvbmx5IGRpZmZzIGZvciBkb2N1bWVudCB1cGRhdGVzCiAgICB3cml0ZV9sb2dfZGlmZnM6IGZhbHNlCgogICAgIyBMaXN0IG9mIGluZGljZXMgdG8gd2F0Y2ggZm9yIHdyaXRlIGV2ZW50cy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcnRlZAogICAgIyB3cml0ZV93YXRjaGVkX2luZGljZXM6IFsidHdpdHRlciIsICJsb2dzLSoiXQogICAgd3JpdGVfd2F0Y2hlZF9pbmRpY2VzOiBbXQoKICAgICMgTGlzdCBvZiB1c2VycyB0byBpZ25vcmUgZm9yIHdyaXRlIGV2ZW50cy4gV2lsZGNhcmQgcGF0dGVybnMgYXJlIHN1cHBvcnRlZC4gRWc6CiAgICAjIHdyaXRlX2lnbm9yZV91c2VyczogWyJ0ZXN0LXVzZXIiLCAiZW1wbG95ZWUtKiJdCiAgICB3cml0ZV9pZ25vcmVfdXNlcnM6CiAgICAgIC0gb3BlbnNlYXJjaAo=

  config.yml: |-
    LS0tCl9tZXRhOgogIHR5cGU6ICJjb25maWciCiAgY29uZmlnX3ZlcnNpb246IDIKCmNvbmZpZzoKICBkeW5hbWljOgogICAgIyBTZXQgZmlsdGVyZWRfYWxpYXNfbW9kZSB0byAnZGlzYWxsb3cnIHRvIGZvcmJpZCBtb3JlIHRoYW4gMiBmaWx0ZXJlZCBhbGlhc2VzIHBlciBpbmRleAogICAgIyBTZXQgZmlsdGVyZWRfYWxpYXNfbW9kZSB0byAnd2FybicgdG8gYWxsb3cgbW9yZSB0aGFuIDIgZmlsdGVyZWQgYWxpYXNlcyBwZXIgaW5kZXggYnV0IHdhcm5zIGFib3V0IGl0IChkZWZhdWx0KQogICAgIyBTZXQgZmlsdGVyZWRfYWxpYXNfbW9kZSB0byAnbm93YXJuJyB0byBhbGxvdyBtb3JlIHRoYW4gMiBmaWx0ZXJlZCBhbGlhc2VzIHBlciBpbmRleCBzaWxlbnRseQogICAgI2ZpbHRlcmVkX2FsaWFzX21vZGU6IHdhcm4KICAgIGRvX25vdF9mYWlsX29uX2ZvcmJpZGRlbjogdHJ1ZQogICAga2liYW5hOgogICAgIyBvcGVuc2VhcmNoLWRhc2hib2FyZHMgbXVsdGl0ZW5hbmN5CiAgICAgIG11bHRpdGVuYW5jeV9lbmFibGVkOiB0cnVlCiAgICAgIHNlcnZlcl91c2VybmFtZTogb3BlbnNlYXJjaAogICAgICAjaW5kZXg6ICcua2liYW5hJwogICAgaHR0cDoKICAgICAgYW5vbnltb3VzX2F1dGhfZW5hYmxlZDogZmFsc2UKICAgICAgeGZmOgogICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgICAgI2ludGVybmFsUHJveGllczogJzE5MlwuMTY4XC4wXC4xMHwxOTJcLjE2OFwuMFwuMTEnICMgcmVnZXggcGF0dGVybgogICAgICAgIGludGVybmFsUHJveGllczogJy4qJyAjIHRydXN0IGFsbCBpbnRlcm5hbCBwcm94aWVzLCByZWdleCBwYXR0ZXJuCiAgICAgICAgcmVtb3RlSXBIZWFkZXI6ICAneC1mb3J3YXJkZWQtZm9yJwogICAgICAgICMjIyMjIyBzZWUgaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy9hcGkvamF2YS91dGlsL3JlZ2V4L1BhdHRlcm4uaHRtbCBmb3IgcmVnZXggaGVscAogICAgICAgICMjIyMjIyBtb3JlIGluZm9ybWF0aW9uIGFib3V0IFhGRiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9YLUZvcndhcmRlZC1Gb3IKICAgICAgICAjIyMjIyMgYW5kIGhlcmUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzkKICAgICAgICAjIyMjIyMgYW5kIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTguMC1kb2MvY29uZmlnL3ZhbHZlLmh0bWwjUmVtb3RlX0lQX1ZhbHZlCiAgICBhdXRoYzoKICAgICAgYmFzaWNfaW50ZXJuYWxfYXV0aF9kb21haW46CiAgICAgICAgZGVzY3JpcHRpb246ICJBdXRoZW50aWNhdGUgdmlhIEhUVFAgQmFzaWMgYWdhaW5zdCBpbnRlcm5hbCB1c2VycyBkYXRhYmFzZSIKICAgICAgICBodHRwX2VuYWJsZWQ6IHRydWUKICAgICAgICB0cmFuc3BvcnRfZW5hYmxlZDogdHJ1ZQogICAgICAgIG9yZGVyOiAwCiAgICAgICAgaHR0cF9hdXRoZW50aWNhdG9yOgogICAgICAgICAgdHlwZTogYmFzaWMKICAgICAgICAgIGNoYWxsZW5nZTogdHJ1ZQogICAgICAgIGF1dGhlbnRpY2F0aW9uX2JhY2tlbmQ6CiAgICAgICAgICB0eXBlOiBpbnRlcm4=

  elasticsearch.yml.example: |-
    

  internal_users.yml: |-
    LS0tCiMgVGhpcyBpcyB0aGUgaW50ZXJuYWwgdXNlciBkYXRhYmFzZQojIFRoZSBoYXNoIHZhbHVlIGlzIGEgYmNyeXB0IGhhc2ggYW5kIGNhbiBiZSBnZW5lcmF0ZWQgd2l0aCBwbHVnaW4vdG9vbHMvaGFzaC5zaAoKX21ldGE6CiAgdHlwZTogImludGVybmFsdXNlcnMiCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVmaW5lIHlvdXIgaW50ZXJuYWwgdXNlcnMgaGVyZQoKb3NhZG1pbjoKICBoYXNoOiAiJCRvcGVuc2VhcmNoLVBBU1NXT1JEX0hBU0giCiAgcmVzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOgogIC0gImFkbWluaXN0cmF0b3IiCiAgZGVzY3JpcHRpb246ICJvc2FkbWluIHVzZXIgZm9yIEVTIgoKb3BlbnNlYXJjaDoKICBoYXNoOiAiJCRvcGVuc2VhcmNoLWRhc2hib2FyZHNfUEFTU1dPUkRfSEFTSCIKICByZXNlcnZlZDogdHJ1ZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAiYWRtaW5pc3RyYXRvciIKICBkZXNjcmlwdGlvbjogIm9wZW5zZWFyY2ggdXNlciBmb3Igb3BlbnNlYXJjaC1kYXNoYm9hcmRzIgoKdmlld2VyOgogIGhhc2g6ICIkJG9wZW5zZWFyY2gtZGFzaGJvYXJkc19SRUFET05MWV9QQVNTV09SRF9IQVNIIgogIHJlc2VydmVkOiB0cnVlCiAgYmFja2VuZF9yb2xlczoKICAtICJ2aWV3ZXIiCiAgZGVzY3JpcHRpb246ICJ2aWV3ZXIgcmVhZCBvbmx5IHVzZXIgZm9yIG9wZW5zZWFyY2gtZGFzaGJvYXJkcyIgIAoKZGV2ZWxvcGVyOgogIGhhc2g6ICIkJG9wZW5zZWFyY2gtZGFzaGJvYXJkc19ERVZFTE9QRVJfUEFTU1dPUkRfSEFTSCIKICByZXNlcnZlZDogdHJ1ZQogIGJhY2tlbmRfcm9sZXM6CiAgLSAiZGV2ZWxvcGVyIgogIGRlc2NyaXB0aW9uOiAiZGV2ZWxvcGVyIGRldmVsb3BlciB1c2VyIGZvciBvcGVuc2VhcmNoLWRhc2hib2FyZHMiICAgIA==

  nodes_dn.yml: |-
    X21ldGE6CiAgdHlwZTogIm5vZGVzZG4iCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVmaW5lIG5vZGVzZG4gbWFwcGluZyBuYW1lIGFuZCBjb3JyZXNwb25kaW5nIHZhbHVlcwpsb2dnaW5nOgogIG5vZGVzX2RuOgogICAgLSBDTj0qLmt1YmVybmV0ZXMtbG9nZ2luZy00LjguMC50Z3ouc3ZjLmNsdXN0ZXIubG9jYWw=

  roles.yml: |-
    X21ldGE6CiAgdHlwZTogInJvbGVzIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIFJlc3RyaWN0IHVzZXJzIHNvIHRoZXkgY2FuIG9ubHkgdmlldyB2aXN1YWxpemF0aW9uIGFuZCBkYXNoYm9hcmQgb24gb3BlbnNlYXJjaC1kYXNoYm9hcmRzCm9wZW5zZWFyY2gtZGFzaGJvYXJkc19yZWFkX29ubHk6CiAgcmVzZXJ2ZWQ6IHRydWUKCmFkbWluaXN0cmF0b3I6CiAgcmVzZXJ2ZWQ6IHRydWUKICBjbHVzdGVyX3Blcm1pc3Npb25zOgogICAgLSAiKiIgICAgCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgICAtIGluZGV4X3BhdHRlcm5zOgogICAgICAgIC0gIioiCiAgICAgIGFsbG93ZWRfYWN0aW9uczogICAgICAKICAgICAgICAtICIqIgogIHRlbmFudF9wZXJtaXNzaW9uczogICAgCiAgICAtIHRlbmFudF9wYXR0ZXJuczoKICAgICAgICAtICIqIiAgICAKICAgICAgYWxsb3dlZF9hY3Rpb25zOiAgICAKICAgICAgICAtICIqIgoKb3BlbnNlYXJjaC1kYXNoYm9hcmRzX3ZpZXdlcjoKICByZXNlcnZlZDogdHJ1ZQogIGNsdXN0ZXJfcGVybWlzc2lvbnM6CiAgICAtICJjbHVzdGVyX2NvbXBvc2l0ZV9vcHNfcm8iCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgICAtIGluZGV4X3BhdHRlcm5zOiAgCiAgICAgICAgLSAiKiIKICAgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAgIC0gInJlYWQiICAgICAgICAKICAgICAgICAtICJzZWFyY2giCiAgICAgICAgLSAiZ2V0IiAgICAgICAgCiAgdGVuYW50X3Blcm1pc3Npb25zOgogIC0gdGVuYW50X3BhdHRlcm5zOgogICAgICAtICJnbG9iYWxfdGVuYW50IgogICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAtICJraWJhbmFfYWxsX3JlYWQiICAgCgpvcGVuc2VhcmNoLWRhc2hib2FyZHNfZGV2ZWxvcGVyOgogIHJlc2VydmVkOiB0cnVlCiAgY2x1c3Rlcl9wZXJtaXNzaW9uczoKICAgIC0gImNsdXN0ZXJfY29tcG9zaXRlX29wc19ybyIKICAgIC0gImNsdXN0ZXI6YWRtaW4vb3BlbnNlYXJjaC9yZXBvcnRzLyoiICAgICAKICBpbmRleF9wZXJtaXNzaW9uczoKICAgIC0gaW5kZXhfcGF0dGVybnM6CiAgICAgICAgLSAiKiIKICAgICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAgIC0gImdldCIKICAgICAgICAtICJyZWFkIiAgICAgICAKICAgICAgICAtICJzZWFyY2giCiAgICAgICAgLSAic3VnZ2VzdCIgICAgICAgIAogICAgICAgIC0gImluZGljZXM6YWRtaW4vcmVzb2x2ZS9pbmRleCIKICAgIC0gaW5kZXhfcGF0dGVybnM6CiAgICAgICAgLSAiLmtpYmFuYV8qX2RldmVsb3Blcl8qIgogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSAiZGF0YV9hY2Nlc3MiCiAgICAgICAgLSAiZ2V0IiAgCiAgICAgICAgLSAicmVhZCIgIAogICAgICAgIC0gIndyaXRlIiAgCiAgICAgICAgLSAibWFuYWdlIgogICAgICAgIC0gInNlYXJjaCIKICAgICAgICAtICJkZWxldGUiCiAgdGVuYW50X3Blcm1pc3Npb25zOgogIC0gdGVuYW50X3BhdHRlcm5zOgogICAgICAtICJnbG9iYWxfdGVuYW50IgogICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAtICJraWJhbmFfYWxsX3JlYWQiICAKICAtIHRlbmFudF9wYXR0ZXJuczoKICAgICAgLSAiRGV2ZWxvcGVyIiAgICAgIAogICAgYWxsb3dlZF9hY3Rpb25zOgogICAgICAtICJraWJhbmFfYWxsX3JlYWQiCiAgICAgIC0gImtpYmFuYV9hbGxfd3JpdGUiCiAgCiMgVGhlIHNlY3VyaXR5IFJFU1QgQVBJIGFjY2VzcyByb2xlIGlzIHVzZWQgdG8gYXNzaWduIHNwZWNpZmljIHVzZXJzIGFjY2VzcyB0byBjaGFuZ2UgdGhlIHNlY3VyaXR5IHNldHRpbmdzIHRocm91Z2ggdGhlIFJFU1QgQVBJLgpzZWN1cml0eV9yZXN0X2FwaV9hY2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydWUKIAojIEFsbG93cyB1c2VycyB0byB2aWV3IGFsZXJ0cwphbGVydGluZ192aWV3X2FsZXJ0czoKICByZXNlcnZlZDogdHJ1ZQogIGluZGV4X3Blcm1pc3Npb25zOgogICAgLSBpbmRleF9wYXR0ZXJuczoKICAgICAgLSAiLm9wZW5zZWFyY2gtYWxlcnRpbmctYWxlcnQqIgogICAgICBhbGxvd2VkX2FjdGlvbnM6CiAgICAgICAgLSByZWFkIAoKIyBBbGxvd3MgdXNlcnMgdG8gdmlldyBhbmQgYWNrbm93bGVkZ2UgYWxlcnRzCmFsZXJ0aW5nX2NydWRfYWxlcnRzOgogIHJlc2VydmVkOiB0cnVlCiAgaW5kZXhfcGVybWlzc2lvbnM6CiAgICAtIGluZGV4X3BhdHRlcm5zOgogICAgICAtICIub3BlbnNlYXJjaC1hbGVydGluZy1hbGVydCoiCiAgICAgIGFsbG93ZWRfYWN0aW9uczoKICAgICAgIC0gY3J1ZCAKCiMgQWxsb3dzIHVzZXJzIHRvIHVzZSBhbGwgYWxlcnRpbmcgZnVuY3Rpb25hbGl0eQphbGVydGluZ19mdWxsX2FjY2VzczoKICByZXNlcnZlZDogdHJ1ZQogIGluZGV4X3Blcm1pc3Npb25zOgogICAgLSBpbmRleF9wYXR0ZXJuczoKICAgICAgLSAiLm9wZW5zZWFyY2gtYWxlcnRpbmctY29uZmlnIgogICAgICAtICIub3BlbnNlYXJjaC1hbGVydGluZy1hbGVydCoiCiAgICAgIGFsbG93ZWRfYWN0aW9uczoKICAgICAgICAtIGNydWQgICAg

  roles_mapping.yml: |-
    LS0tCiMgSW4gdGhpcyBmaWxlIHVzZXJzLCBiYWNrZW5kcm9sZXMgYW5kIGhvc3RzIGNhbiBiZSBtYXBwZWQgdG8gT3BlbiBEaXN0cm8gU2VjdXJpdHkgcm9sZXMuCiMgUGVybWlzc2lvbnMgZm9yIE9wZW5kaXN0cm8gcm9sZXMgYXJlIGNvbmZpZ3VyZWQgaW4gcm9sZXMueW1sCgpfbWV0YToKICB0eXBlOiAicm9sZXNtYXBwaW5nIgogIGNvbmZpZ192ZXJzaW9uOiAyCgojIEFkbWluaXN0cmF0b3IgcHJpdmlsZWdlcwphbGxfYWNjZXNzOgogIHJlc2VydmVkOiB0cnVlCiAgYmFja2VuZF9yb2xlczogCiAgLSBhZG1pbmlzdHJhdG9yCiAgZGVzY3JpcHRpb246ICJNYXBzIGV4dGVybmFsIG9zIHVzZXIgdG8gYWRtaW4gcm9sZSIKCmFkbWluaXN0cmF0b3I6CiAgcmVzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOiAKICAtIGFkbWluaXN0cmF0b3IKICBkZXNjcmlwdGlvbjogIk1hcHMgZXh0ZXJuYWwgb3MgdXNlciB0byBhZG1pbiByb2xlIgoKYWxlcnRpbmdfZnVsbF9hY2Nlc3M6CiAgcmVzZXJ2ZWQ6IHRydWUKICBiYWNrZW5kX3JvbGVzOiAKICAtIGFkbWluaXN0cmF0b3IKICBkZXNjcmlwdGlvbjogIk1hcHMgZXh0ZXJuYWwgb3MgdXNlciB0byBhZG1pbiByb2xlIgoKIyBWaWV3ZXIgLSByZWFkb25seSBhY2Nlc3MKb3BlbnNlYXJjaC1kYXNoYm9hcmRzX3ZpZXdlcjoKICByZXNlcnZlZDogdHJ1ZQogIHVzZXJzOgogICAgLSB2aWV3ZXIKICBiYWNrZW5kX3JvbGVzOiAKICAtIHZpZXdlcgogIGRlc2NyaXB0aW9uOiAiTWFwcyB2aWV3ZXIgYmFja2VuZCByb2xlIgoKYWxlcnRpbmdfdmlld19hbGVydHM6CiAgcmVzZXJ2ZWQ6IHRydWUKICB1c2VyczoKICAgIC0gdmlld2VyCiAgYmFja2VuZF9yb2xlczogCiAgLSB2aWV3ZXIKICBkZXNjcmlwdGlvbjogIk1hcHMgdmlld2VyIGJhY2tlbmQgcm9sZSIKCgojIERldmVsb3BlciBhY2Nlc3MKb3BlbnNlYXJjaC1kYXNoYm9hcmRzX2RldmVsb3BlcjoKICByZXNlcnZlZDogdHJ1ZQogIHVzZXJzOgogICAgLSBkZXZlbG9wZXIKICBiYWNrZW5kX3JvbGVzOiAKICAtIGRldmVsb3BlciAgCiAgZGVzY3JpcHRpb246ICJNYXBzIGRldmVsb3BlciBiYWNrZW5kIHJvbGUiCgphbGVydGluZ19jcnVkX2FsZXJ0czoKICByZXNlcnZlZDogdHJ1ZQogIHVzZXJzOgogICAgLSBkZXZlbG9wZXIKICBiYWNrZW5kX3JvbGVzOiAKICAtIGRldmVsb3BlcgogIGRlc2NyaXB0aW9uOiAiTWFwcyBkZXZlbG9wZXIgYmFja2VuZCByb2xlIgoKIyBraWJhbmEgdXNlciAgYWNjZXNzCmtpYmFuYV91c2VyOgogIHJlc2VydmVkOiB0cnVlCiAgYmFja2VuZF9yb2xlczogCiAgLSB2aWV3ZXIKICAtIGRldmVsb3BlcgogIGRlc2NyaXB0aW9uOiAiTWFwcyB2aWV3ZXIgYW5kIGRldmVsb3BlciBiYWNrZW5kIHJvbGVzIHRvIG9wZW5zZWFyY2gtZGFzaGJvYXJkc191c2VyIHJvbGUiICAgICAg

  tenants.yml: |-
    LS0tCl9tZXRhOgogIHR5cGU6ICJ0ZW5hbnRzIgogIGNvbmZpZ192ZXJzaW9uOiAyCgpEZXZlbG9wZXI6CiAgcmVzZXJ2ZWQ6IHRydWUKICBkZXNjcmlwdGlvbjogIm9wZW5zZWFyY2gtZGFzaGJvYXJkcyB0ZW5hbnQgZm9yIGRldmVsb3BlcnMiCg==

  whitelist.yml: |-
    LS0tCl9tZXRhOgogIHR5cGU6ICJ3aGl0ZWxpc3QiCiAgY29uZmlnX3ZlcnNpb246IDIKCiMgRGVzY3JpcHRpb246CiMgZW5hYmxlZCAtIGZlYXR1cmUgZmxhZy4KIyBpZiBlbmFibGVkIGlzIGZhbHNlLCB0aGUgd2hpdGVsaXN0aW5nIGZlYXR1cmUgaXMgcmVtb3ZlZC4KIyBUaGlzIGlzIGxpa2UgcmVtb3ZpbmcgdGhlIGNoZWNrIHRoYXQgY2hlY2tzIGlmIGFuIEFQSSBpcyB3aGl0ZWxpc3RlZC4KIyBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gY29udGludWluZyB3aXRoIHRoZSB1c3VhbCBhY2Nlc3MgY29udHJvbCBjaGVja3MsIGFuZCByZW1vdmluZyBhbGwgdGhlIGNvZGUgdGhhdCBpbXBsZW1lbnRzIHdoaXRlbGlzdGluZy4KIyBpZiBlbmFibGVkIGlzIHRydWUsIHRoZW4gYWxsIHVzZXJzIGV4Y2VwdCBTdXBlckFkbWluIGNhbiBhY2Nlc3Mgb25seSB0aGUgQVBJcyBpbiByZXF1ZXN0cwojIFN1cGVyQWRtaW4gY2FuIGFjY2VzcyBhbGwgQVBJcy4KIyBTdXBlckFkbWluIGlzIGRlZmluZWQgYnkgdGhlIFN1cGVyQWRtaW4gY2VydGlmaWNhdGUsIHdoaWNoIGlzIGNvbmZpZ3VyZWQgaW4gdGhlIG9wZW5zZWFyY2gueW1sIHNldHRpbmc6IHBsdWdpbnMuc2VjdXJpdHkuYXV0aGN6LmFkbWluX2RuOgojIFJlZmVyIHRvIHRoZSBleGFtcGxlIHNldHRpbmcgaW4gb3BlbnNlYXJjaC55bWwuZXhhbXBsZSwgYW5kIHRoZSBvcGVuZGlzdHJvIGRvY3VtZW50YXRpb24gdG8ga25vdyBtb3JlIGFib3V0IGNvbmZpZ3VyaW5nIFN1cGVyQWRtaW4uCiMKIyByZXF1ZXN0cyAtIG1hcCBvZiB3aGl0ZWxpc3RlZCBlbmRwb2ludHMsIGFuZCB0aGUgd2hpdGVsaXN0ZWQgSFRUUCByZXF1ZXN0cyBmb3IgdGhvc2UgZW5kcG9pbnRzCgojIEV4YW1wbGVzIHNob3dpbmcgaG93IHRvIGNvbmZpZ3VyZSB0aGlzIHltbCBmaWxlIChtYWtlIHN1cmUgdGhlIF9tZXRhIGRhdGEgZnJvbSBhYm92ZSBpcyBhbHNvIHRoZXJlKToKIyBFeGFtcGxlIDE6CiMgVG8gZW5hYmxlIHdoaXRlbGlzdGluZyBhbmQgd2hpdGVsaXN0IEdFVCAvX2NsdXN0ZXIvc2V0dGluZ3MKIwojY29uZmlnOgojICBlbmFibGVkOiB0cnVlCiMgIHJlcXVlc3RzOgojICAgIC9fY2x1c3Rlci9zZXR0aW5nczoKIyAgICAgIC0gR0VUCiMKIyBFeGFtcGxlIDI6CiMgSWYgeW91IHdhbnQgdG8gd2hpdGVsaXN0IG11bHRpcGxlIHJlcXVlc3QgbWV0aG9kcyBmb3IgL19jbHVzdGVyL3NldHRpbmdzIChHRVQsUFVUKToKIwojY29uZmlnOgojICBlbmFibGVkOiB0cnVlCiMgIHJlcXVlc3RzOgojICAgIC9fY2x1c3Rlci9zZXR0aW5nczoKIyAgICAgIC0gR0VUCiMgICAgICAtIFBVVAojCiMgRXhhbXBsZSAzOgojIElmIHlvdSB3YW50IHRvIHdoaXRlbGlzdCBvdGhlciBBUElzIGFzIHdlbGwsIGZvciBleGFtcGxlIEdFVCAvX2NhdC9ub2RlcywgYW5kIEdFVCAvX2NhdC9zaGFyZHM6CiMKI2NvbmZpZzoKIyAgZW5hYmxlZDogdHJ1ZQojICByZXF1ZXN0czoKIyAgICAvX2NsdXN0ZXIvc2V0dGluZ3M6CiMgICAgICAtIEdFVAojICAgICAgLSBQVVQKIyAgICAvX2NhdC9ub2RlczoKIyAgICAgIC0gR0VUCiMgICAgL19jYXQvc2hhcmRzOgojICAgICAgLSBHRVQKIwojIEV4YW1wbGUgNDoKIyBJZiB5b3Ugd2FudCB0byBkaXNhYmxlIHRoZSB3aGl0ZWxpc3RpbmcgZmVhdHVyZSwgc2V0IGVuYWJsZWQgdG8gZmFsc2UuCiMgIGVuYWJsZWQ6IGZhbHNlCiMgIHJlcXVlc3RzOgojICAgIC9fY2x1c3Rlci9zZXR0aW5nczoKIyAgICAgIC0gR0VUCiMKI0F0IHRoaXMgcG9pbnQsIGFsbCBBUElzIGJlY29tZSB3aGl0ZWxpc3RlZCBiZWNhdXNlIHRoZSBmZWF0dXJlIHRvIHdoaXRlbGlzdCBpcyBvZmYsIHNvIHJlcXVlc3RzIGlzIGlycmVsZXZhbnQuCgoKI3RoaXMgbmFtZSBtdXN0IGJlIGNvbmZpZwpjb25maWc6CiAgZW5hYmxlZDogZmFsc2UKICByZXF1ZXN0czoKICAgIC9fY2x1c3Rlci9zZXR0aW5nczoKICAgICAgLSBHRVQKICAgIC9fY2F0L25vZGVzOgogICAgICAtIEdFVAo=
---
# Source: kubernetes-logging/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-credentials-admin
data:
  username: b3NhZG1pbg==
  password: b3NhZG1pbg==
type: Opaque
---
# Source: kubernetes-logging/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-dashboards-credentials-admin
data:
  username: b3BlbnNlYXJjaA==
  password: b3BlbnNlYXJjaA==
type: Opaque
---
# Source: kubernetes-logging/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-dashboards-credentials-developer
data:
  username: ZGV2ZWxvcGVy
  password: ZGV2ZWxvcA==
type: Opaque
---
# Source: kubernetes-logging/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-opensearch-dashboards-credentials-readonly
data:
  username: dmlld2Vy
  password: dmlldw==
type: Opaque
---
# Source: kubernetes-logging/templates/init-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-init
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  check_host_port.sh: |-
    #!/bin/bash
    set -e

    if [[ $1 == http* ]]; then
      # extract the protocol
      proto="$(echo $1 | grep :// | sed -e's,^\(.*://\).*,\1,g')"
      # remove the protocol
      url="$(echo ${1/$proto/})"
      # extract the user (if any)
      user="$(echo $url | grep @ | cut -d@ -f1)"
      # extract the host and port
      hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
      # by request host without port
      host="$(echo $hostport | sed -e 's,:.*,,g')"
      # by request - try to extract the port
      port=`echo $hostport | grep : | cut -d: -f2`
      if [[ -z $port ]]; then
        if [[ $proto = http:// ]]; then
          port=80
        fi
        if [[ $proto == https:// ]]; then
          port=443
        fi
     fi
     else
       host=$1
       port=$2
     fi

     echo "checking $host:$port"

     until $(nc -z -w 5 $host $port); do
       echo "retrying $host:$port"
       sleep 5
     done

     echo "initialized"

  check_os.sh: |-
    #!/bin/bash
    set -e

    if [ -z ${os_url+x} ]; then
      echo "opensearch url env variable (os_url) is expected but not found";
      exit -1
    elif [ -z ${os_user+x} ]; then
      echo "opensearch user env variable (os_user) is expected but not found";
      exit -1
    elif [ -z ${os_pass+x} ]; then
      echo "opensearch password env variable (os_pass) is expected but not found";
      exit -1
    fi

    echo "checking opensearch $os_url"

    check="curl -s --cacert /ssl/root-ca.pem -w "%{http_code}" -u$os_user:$os_pass $os_url -o /dev/null"

    until [[ $($check) == "200" ]]; do
      echo "retrying $os_url"
      sleep 5
    done

  init_os_node.sh: |-
    #!/bin/bash
    set -e

    for f in /config/*.pem
    do
      echo "converting $f key to pkcs8"

      filename=$(basename -- "$f")
      filename="${filename%.*}"

      openssl pkcs8 -topk8 -inform PEM -outform PEM  \
      -v1 PBE-SHA1-3DES -in $f -out "/shared/$filename.key" -nocrypt

    done
    chown 1000:1000 /shared && chmod 644 /shared/*

    if [ "$1" = "-only-keys" ]; then
      exit 0
    fi

    /sbin/sysctl -w vm.max_map_count=262144
    chown 1000:1000  /data

    if [ -d /snapshot ]; then
      chown 1000:1000 /snapshot
    fi

  check_job.sh: |-
    #!/bin/bash

    set -e

    echo "waiting for $job_name job completion"
    TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)

    state="down"
    while [[ ! $state =~ "1" ]]; do
      state=`curl -sS -X GET https://$KUBERNETES_SERVICE_HOST/apis/batch/v1/namespaces/$job_namespace/jobs/$job_name/status \
      --header "Authorization: Bearer $TOKEN" --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt | jq '.status.succeeded'`
      sleep 3
    done

    echo "$job_name job status.succeeded $state"
---
# Source: kubernetes-logging/templates/kafka/kafka-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kafka-cm
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  init_kafka_node.sh: |-
    #!/bin/bash
    echo -e "INFO: == Initializing Kafka =="

    certloc="/kafka/certs/"

    echo "INFO: -- Prefly checking ..."

    # Check input parameters
    if [ -z ${NAMESPACE+x} ]; then
      echo "ERROR: NameSpace env variable (NAMESPACE) is expected but not found!"
      exit -1
    elif [ -z ${INT_CON_EXP+x} ]; then
      echo "WARN: Time to expire broker interconnect SSL certificate env variable (INT_CON_EXP) is expected but not found!"
      echo "INFO: Setting to 90 days."
      INT_CON_EXP="90"
    fi
    echo "INFO: -- Prefly checking done."

    echo -en "INFO: Preparing Kafka storage for node \"$HOSTNAME\" ... "
      mkdir /kafka/data -p
      chown 1001:0 -R /kafka/data
    echo -e "done"

    echo -e "INFO: Preparing node certificate ... "
    mkdir ${certloc} -p

      nodeid="$(echo "$HOSTNAME" | grep -o -E '[0-9]*$')"

      openssl req -newkey rsa:2048 -keyout ${certloc}node.key \
        -out ${certloc}node.csr -nodes \
        -subj "/CN=$HOSTNAME.$NAMESPACE.svc.cluster.local/OU=OFD-LoggingHelmChart"
      echo -e "INFO: ... CSR generated"

      openssl pkcs8 -topk8 -in ${certloc}node.key -inform pem -nocrypt \
        -v1 PBE-SHA1-RC4-128 -out ${certloc}kafka.keystore.key -outform pem
      echo -e "INFO: ... key to pkcs8 converted"

      openssl x509 -req -CA /cacert/cacert.pem -CAkey /cacert/cacert.key \
        -in ${certloc}node.csr -out ${certloc}kafka.keystore.pem -sha256 \
        -days $(($INT_CON_EXP + $nodeid)) -CAcreateserial -extensions v3_req -extfile <(echo "
      [req]
      distinguished_name = req_distinguished_name
      x509_extensions = v3_req
      prompt = no
      [req_distinguished_name]
      CN = $HOSTNAME.$NAMESPACE.svc.cluster.local
      [v3_req]
      subjectAltName = @alt_names
      [alt_names]
      DNS.1 = $HOSTNAME.$NAMESPACE.svc.cluster.local
      DNS.2 = $HOSTNAME
      ")
      echo -e "INFO: ... node certificate signed"

      echo -e "INFO: Cleaning up working dir"
      rm ${certloc}node.*

      echo -e "INFO: Changing ownership for node certificates"
      chown 1001:0 -R ${certloc}

    echo -e "INFO: Node certificate prepared."

    echo -e "\nINFO: == Kafka initialized =="
---
# Source: kubernetes-logging/templates/kafka/kafka-topics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kafka-topics
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  topics.conf: |
      containers;max.message.bytes=10000000,retention.bytes=-1,retention.ms=3600000;1
    

  setup.sh: |-
    #!/bin/bash

    input="$(dirname $0)/topics.conf"

    if [[ -f "$input" ]]; then
      while IFS= read -r line; do
      IFS=';' read -ra topic <<< "$line"

      # Check settings line format
      if [[ ${#topic[@]} -ne 3 ]]; then
        echo -e "WARN: Topic configuration line mismatch, expected:\n  name;config;partitions\ngot\n  ${line}\nignoring line."
        continue
      fi

      # Parsing line to variables
      topicname="${topic[0]}"
      topicconfig="${topic[1]}"
      topicparitions=${topic[2]}

      echo -e "--=== Working with topic \"$topicname\" ===---"

      # Check current Kafka topic state
      echo -n "INFO: Looking for topic in current Kafka instance ..."
      topicexist=$(/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server $kafka --list \
        | grep -c $topicname)

      if [[ $topicexist -lt 1 ]]; then
        # Topic not exist, we will create one
        echo -e " not found, creating."

        if [[ $replicas -gt $topicparitions ]]; then
          echo -e "WARN: Partitions count is not optimal (instances:$replicas, partitions:$topicparitions)."
          echo -e "      Kafka will maybe overheating!\n"
        fi

        echo -en "INFO: "
        /opt/bitnami/kafka/bin/kafka-topics.sh \
          --bootstrap-server $kafka --create --topic $topicname \
          --partitions $topicparitions \
          --if-not-exists

        echo -en "INFO: "
        /opt/bitnami/kafka/bin/kafka-configs.sh \
          --bootstrap-server $kafka --alter \
          --topic $topicname \
          --add-config $topicconfig

        echo -e "INFO: New topic $topicname was created."

      else

        # Topic exist, check it current state
        echo -e " found, checking state."

        topicdescription=$(/opt/bitnami/kafka/bin/kafka-topics.sh \
          --describe --bootstrap-server $kafka \
          --topic $topicname)

        # Check current Kafka topic partitions count
        partitions=$(echo "$topicdescription" | head -n 1 | awk '{print $6}')

        # Grow kafka topic partitions if needed
        if [[ $topicparitions -gt $partitions ]]; then
          echo "INFO: Growing topic partitions count from $partitions to $topicparitions"
          /opt/bitnami/kafka/bin/kafka-topics.sh \
            --bootstrap-server $kafka --alter --topic $topicname \
            --partitions $topicparitions \
            --if-exists
        elif [[ $topicparitions -lt $partitions ]]; then
          echo "WARN: Reducing topic partitions is not allowed, current partitions count is $partitions (desired:$topicparitions) and stay as is."
        else
          echo "INFO: Topic partitions are in desired state (current:$partitions, desired:$topicparitions)."
        fi

        # Refresh topic configuration, change if needed, handled by Kafka itself
        configs=$(echo "$topicdescription" | head -n 1 | awk '{print $10}')
        echo -e "INFO: Refreshing topic configuration.\n  Current: $configs\n  Desired: $topicconfig"

        /opt/bitnami/kafka/bin/kafka-configs.sh \
          --bootstrap-server $kafka --alter \
          --topic $topicname \
          --add-config ${topicconfig}
      fi

      echo -e "--- --- ---\n== Current topic state:"

      /opt/bitnami/kafka/bin/kafka-topics.sh \
        --bootstrap-server $kafka --describe --topic $topicname

      echo -e "--=== --- ===---"
      done < "$input"

    else

      echo "ERROR: Topics configuration is not found!"
      exit 1

    fi
---
# Source: kubernetes-logging/templates/logstash/logstash-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-logstash
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  pipelines.yml: |-
    - pipeline.id: distributor
      path.config: /usr/share/logstash/pipeline/{00_input,01_filter,02_distributor}.conf
    - pipeline.id: containers-pipeline.conf
      path.config: /usr/share/logstash/pipeline/containers-pipeline.conf

    - pipeline.id: nginx-pipeline.conf
      path.config: /usr/share/logstash/pipeline/nginx-pipeline.conf

    - pipeline.id: systemd-pipeline.conf
      path.config: /usr/share/logstash/pipeline/systemd-pipeline.conf


  log4j2.properties: |-
    status = error
    name = LogstashPropertiesConfig

    appender.console.type = Console
    appender.console.name = plain_console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n

    appender.json_console.type = Console
    appender.json_console.name = json_console
    appender.json_console.layout.type = JSONLayout
    appender.json_console.layout.compact = true
    appender.json_console.layout.eventEol = true

    rootLogger.level = ${sys:ls.log.level}

    rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console

    logger.opensearch_output.name = logstash.outputs.opensearch
    logger.opensearch_output.level = warn

    logger.inputs_kafka.name=logstash.inputs.kafka
    logger.inputs_kafka.level=warn

    #slowlog.threshold.warn: 2s
    #slowlog.threshold.info: 1s
    #slowlog.threshold.debug: 500ms
    #slowlog.threshold.trace: 100ms
    
    #logger.inputs.name=logstash.inputs.file
    #logger.inputs.level=warn
    #logger.outputs.name=logstash.outputs.kafka
    #logger.outputs.level=debug
    #logger.pipeline.name=logstash.pipeline
    #logger.pipeline.level=debug
    #logger.grok.name=logstash.filters.grok
    #logger.grok.level=debug
    #logger.mutate.name=logstash.filters.mutate
    #logger.mutate.level=debug

  logstash.yml: |-
    http.host: "0.0.0.0"
    path.settings: /usr/share/logstash/config

    queue.type: persisted
    queue.drain: true

    pipeline.batch.size: 1000
    pipeline.workers: 10
    pipeline.ecs_compatibility: disabled

    log.format: plain
    log.level: warn

    config.reload.automatic: true
 

  jvm.options: |-
    ## JVM configuration

    # Xms represents the initial size of total heap space
    # Xmx represents the maximum size of total heap space

    -Xms1g
    -Xmx1g

    ################################################################
    ## Expert settings
    ################################################################
    ##
    ## All settings below this section are considered
    ## expert settings. Don't tamper with them unless
    ## you understand what you are doing
    ##
    ################################################################

    ## GC configuration
    8-13:-XX:+UseConcMarkSweepGC
    8-13:-XX:CMSInitiatingOccupancyFraction=75
    8-13:-XX:+UseCMSInitiatingOccupancyOnly

    ## Locale
    # Set the locale language
    #-Duser.language=en

    # Set the locale country
    #-Duser.country=US

    # Set the locale variant, if any
    #-Duser.variant=

    ## basic

    # set the I/O temp directory
    #-Djava.io.tmpdir=$HOME

    # set to headless, just in case
    -Djava.awt.headless=true

    # ensure UTF-8 encoding by default (e.g. filenames)
    -Dfile.encoding=UTF-8

    # use our provided JNA always versus the system one
    #-Djna.nosys=true

    # Turn on JRuby invokedynamic
    -Djruby.compile.invokedynamic=true
    # Force Compilation
    -Djruby.jit.threshold=0
    # Make sure joni regexp interruptability is enabled
    -Djruby.regexp.interruptible=true

    ## heap dumps

    # generate a heap dump when an allocation from the Java heap fails
    # heap dumps are created in the working directory of the JVM
    -XX:+HeapDumpOnOutOfMemoryError

    # specify an alternative path for heap dumps
    # ensure the directory exists and has sufficient space
    #-XX:HeapDumpPath=${LOGSTASH_HOME}/heapdump.hprof

    ## GC logging
    #-XX:+PrintGCDetails
    #-XX:+PrintGCTimeStamps
    #-XX:+PrintGCDateStamps
    #-XX:+PrintClassHistogram
    #-XX:+PrintTenuringDistribution
    #-XX:+PrintGCApplicationStoppedTime

    # log GC status to a file with time stamps
    # ensure the directory exists
    #-Xloggc:${LS_GC_LOG_FILE}

    # Entropy source for randomness
    -Djava.security.egd=file:/dev/urandom

    # Copy the logging context from parent threads to children
    -Dlog4j2.isThreadContextMapInheritable=true

    17-:--add-opens java.base/sun.nio.ch=ALL-UNNAMED
    17-:--add-opens java.base/java.io=ALL-UNNAMED

  startup.options: |-
    ################################################################################
    # These settings are ONLY used by $LS_HOME/bin/system-install to create a custom
    # startup script for Logstash and is not used by Logstash itself. It should
    # automagically use the init system (systemd, upstart, sysv, etc.) that your
    # Linux distribution uses.
    #
    # After changing anything here, you need to re-run $LS_HOME/bin/system-install
    # as root to push the changes to the init script.
    ################################################################################

    # Override Java location
    #JAVACMD=/usr/bin/java

    # Set a home directory
    LS_HOME=/usr/share/logstash

    # logstash settings directory, the path which contains logstash.yml
    LS_SETTINGS_DIR=/etc/logstash

    # Arguments to pass to logstash
    LS_OPTS="--path.settings ${LS_SETTINGS_DIR}"

    # Arguments to pass to java
    LS_JAVA_OPTS=""

    # pidfiles aren't used the same way for upstart and systemd; this is for sysv users.
    LS_PIDFILE=/var/run/logstash.pid

    # user and group id to be invoked as
    LS_USER=logstash
    LS_GROUP=logstash

    # Enable GC logging by uncommenting the appropriate lines in the GC logging
    # section in jvm.options
    LS_GC_LOG_FILE=/var/log/logstash/gc.log

    # Open file limit
    LS_OPEN_FILES=16384

    # Nice level
    LS_NICE=19

    # Change these to have the init script named and described differently
    # This is useful when running multiple instances of Logstash on the same
    # physical box or vm
    SERVICE_NAME="logstash"
    SERVICE_DESCRIPTION="logstash"

    # If you need to run a command or script before launching Logstash, put it
    # between the lines beginning with `read` and `EOM`, and uncomment those lines.
    ###
    ## read -r -d '' PRESTART << EOM
    ## EOM
---
# Source: kubernetes-logging/templates/logstash/logstash-pipelines-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-logstash-pipelines
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  00_input.conf: |-
    input {
    
      kafka {
        bootstrap_servers => ["${kafka_brokers}"]
        topics => ["containers"]
        client_id => "logstash"
        group_id => "logstash"
        auto_offset_reset => "latest"
        consumer_threads => 5
        receive_buffer_bytes => 1000000
        enable_metric => "true"
        codec => "json"
      }
    
    }

  01_filter.conf: |-
    filter {
    
      # generate id
      uuid {
        target => "[@metadata][uuid]"
      }
    
    # end of filter
    }
    

  02_distributor.conf: |-
    output {
    
      if [SYSTEMD_UNIT] {
    
        pipeline { send_to => systemd }
    
      } else if "ingress-nginx" in [kubernetes][labels][app_kubernetes_io/name] {
    
        pipeline { send_to => nginx }
    
      } else {
    
        pipeline { send_to => containers }
    
      }
    
    }

  containers-pipeline.conf: |-
    input {
      pipeline { address => "containers" }
    }
    
    output {
      opensearch {
          hosts => ["${os_url}"]
          user => "${os_user:\"\"}"
          password => "${os_pass:\"\"}"
          cacert => "/usr/share/logstash/certs/root-ca.pem"
          index => "containers-%{+YYYY.MM.dd}"
          ssl => "true"
          document_id => "%{[@metadata][uuid]}"
        }
    }

  nginx-pipeline.conf: |-
    input {
      pipeline { address => "nginx" }
    }
    
    output {
      opensearch {
          hosts => ["${os_url}"]
          user => "${os_user:\"\"}"
          password => "${os_pass:\"\"}"
          cacert => "/usr/share/logstash/certs/root-ca.pem"
          index => "nginx-%{+YYYY.MM.dd}"
          ssl => "true"
          document_id => "%{[@metadata][uuid]}"
        }
    }

  systemd-pipeline.conf: |-
    input {
      pipeline { address => "systemd" }
    }
    
    output {
      opensearch {
          hosts => ["${os_url}"]
          user => "${os_user:\"\"}"
          password => "${os_pass:\"\"}"
          cacert => "/usr/share/logstash/certs/root-ca.pem"
          index => "systemd-%{+YYYY.MM.dd}"
          ssl => "true"
          document_id => "%{[@metadata][uuid]}"
        }
    }
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-index-patterns-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-opensearch-dashboards-index-pattern
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  check_opensearch-dashboards.sh: |-
    #!/bin/bash

    echo "opensearch-dashboards URL: $opensearch_dashboards_URL"
    state="down"

    CURL_OPTS=""
    FILE=/ssl/ca.crt
    if [ -f "$FILE" ]; then
      CURL_OPTS="-sS --cacert $FILE"
    else
      CURL_OPTS="-sS"  
    fi

    while [[ ! $state =~ "green" ]]; do
      state=`curl $CURL_OPTS -X GET -u$opensearch_dashboards_USER:$opensearch_dashboards_PASSWORD \
        $opensearch_dashboards_URL/api/status | jq '.status.overall.state'`
      echo "opensearch_dashboards overall state $state"
      sleep 2
    done

    echo "opensearch-dashboards is up"

  create_index_pattern.sh: |-
    #!/bin/bash
    CURL_OPTS=""
    FILE=/ssl/ca.crt
    if [ -f "$FILE" ]; then
      CURL_OPTS="-sS --cacert $FILE"
    else
      CURL_OPTS="-sS"  
    fi

    echo "opensearch_dashboards URL: $opensearch_dashboards_URL"
    version=`curl $CURL_OPTS -X GET -u$opensearch_dashboards_USER:$opensearch_dashboards_PASSWORD \
        $opensearch_dashboards_URL/api/status | jq '.version.number'`

    version="${version%\"}"
    version="${version#\"}"
    echo "opensearch-dashboards VERSION: ${version}"
    echo "INDEX_PATTERNS: $INDEX_PATTERNS"
    echo "TENANTS: $TENANTS"

    if [ -z $INDEX_PATTERNS ]; then
      echo "no index patterns defined"
      exit 0
    fi

    IFS=',' read -ra PATTERNS <<< "$INDEX_PATTERNS"
    IFS=',' read -ra TENANTS <<< "$TENANTS"

    for tenant in "${TENANTS[@]}"; do
      echo
      echo "### setting up ${tenant} tenant ###"

      if [ $tenant == "Developer" ]; then
        opensearch_dashboards_USER_=$opensearch_dashboards_DEVELOPER_USER
        opensearch_dashboards_PASSWORD_=$opensearch_dashboards_DEVELOPER_PASSWORD
      else
        opensearch_dashboards_USER_=$opensearch_dashboards_USER
        opensearch_dashboards_PASSWORD_=$opensearch_dashboards_PASSWORD
      fi

      if [ -f "$FILE" ]; then
        CURL_OPTS="-s --cacert $FILE -w "%{http_code}""
      else
        CURL_OPTS="-s -w "%{http_code}""  
      fi
      
      echo "Importing saved objects for ${tenant} tenant"
      for f in /saved_objects/* ; do
        result=`curl $CURL_OPTS -X POST -u${opensearch_dashboards_USER_}:${opensearch_dashboards_PASSWORD_} \
          ${opensearch_dashboards_URL}/api/saved_objects/_import\?overwrite=true \
          -H "securitytenant: ${tenant}" -H "osd-xsrf: true" --form file=@${f}`

        if [[ "${result}" =~ "200" ]]; then
          echo "${f} imported"
        else
          echo "importing ${f} failed"
          echo "${result}"
        fi
      done

      for pattern in "${PATTERNS[@]}"; do

            result=`curl $CURL_OPTS -X POST -u${opensearch_dashboards_USER_}:${opensearch_dashboards_PASSWORD_} \
              ${opensearch_dashboards_URL}/api/saved_objects/index-pattern/${pattern}-*\?overwrite=true \
              -H "securitytenant: ${tenant}" -H "osd-xsrf: true" -H "Content-Type: application/json" \
              -d "{ \
                    \"attributes\": { \
                        \"title\":\"${pattern}-*\", \
                        \"timeFieldName\":\"@timestamp\", \
                        \"refresh_fields\":true \
                    } \
                  }"`

            if [[ "${result}" =~ "200" ]]; then
              echo "index pattern ${tenant}/${pattern}-* created successfully"
            else
              echo "creating index pattern: ${tenant}/${pattern}-* failed"
              echo "${result}"
            fi

      done

      default="${PATTERNS[0]}"
      result=`curl $CURL_OPTS -X POST -u${opensearch_dashboards_USER_}:${opensearch_dashboards_PASSWORD_} \
          ${opensearch_dashboards_URL}/api/saved_objects/config/${version}\?overwrite=true \
          -H "securitytenant: ${tenant}" -H "osd-xsrf: true" -H "Content-Type: application/json" \
          -d "{ \
                \"attributes\": { \
                    \"defaultIndex\":\"${default}-*\" \
                } \
              }"`

      if [[ "${result}" =~ "200" ]]; then
        echo "default index pattern ${tenant}/${default}-* set successfully"
      else
        echo "setting default index pattern ${tenant}/${default}-* failed"
        echo "${result}"
      fi

    done
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-saved-objects-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-opensearch-dashboards-saved-objects
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  container-logs-dashboard.ndjson: |-
    {"attributes":{"fields":"[{\"count\":0,\"name\":\"@timestamp\",\"type\":\"date\",\"esTypes\":[\"date\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_score\",\"type\":\"number\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"kubernetes.annotations.checksum/config\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.checksum/secret\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubeadm_kubernetes_io/etcd_advertise-client-urls\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubeadm_kubernetes_io/kube-apiserver_advertise-address_endpoint\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubectl_kubernetes_io/last-applied-configuration\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubernetes_io/config_hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubernetes_io/config_mirror\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubernetes_io/config_seen\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.kubernetes_io/config_source\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.annotations.sidecar_istio_io/inject\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_image\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.docker_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.host\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.addonmanager_kubernetes_io/mode\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/instance\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.component\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.controller-revision-hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.controller-uid\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.integration-test\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.job-name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.k8s-app\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.node\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.pod-template-generation\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.pod-template-hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.statefulset_kubernetes_io/pod-name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.tier\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.type\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.namespace_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"location\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":1,\"name\":\"log\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"stream\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"stream.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"stream\"}}}]","timeFieldName":"@timestamp","title":"containers-*"},"id":"containers-*","migrationVersion":{"index-pattern":"7.6.0"},"references":[],"type":"index-pattern","updated_at":"2021-07-19T06:58:15.869Z","version":"WzU0LDFd"}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Logs Count","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Logs Count\",\"type\":\"metric\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{\"customLabel\":\"Logs\"},\"schema\":\"metric\"}],\"params\":{\"addTooltip\":true,\"addLegend\":false,\"type\":\"metric\",\"metric\":{\"percentageMode\":false,\"useRanges\":false,\"colorSchema\":\"Green to Red\",\"metricColorMode\":\"None\",\"colorsRange\":[{\"from\":0,\"to\":10000}],\"labels\":{\"show\":true},\"invertColors\":false,\"style\":{\"bgFill\":\"#000\",\"bgColor\":false,\"labelColor\":false,\"subText\":\"\",\"fontSize\":40}}}}"},"id":"12285dd0-e85d-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"containers-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:06:12.984Z","version":"WzEyMCwxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Logs Namespace Cloud","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Logs Namespace Cloud\",\"type\":\"tagcloud\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"kubernetes.namespace_name\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"segment\"}],\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":8,\"maxFontSize\":35,\"showLabel\":true}}"},"id":"2df733b0-e85d-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"containers-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:04:20.278Z","version":"WzkxLDFd"}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Logs Pods Cloud","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Logs Pods Cloud\",\"type\":\"tagcloud\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"kubernetes.pod_name\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"segment\"}],\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":8,\"maxFontSize\":35,\"showLabel\":true}}"},"id":"4bda4390-e85d-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"containers-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:03:59.058Z","version":"WzgzLDFd"}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Logs Namespace Pod Control","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Logs Namespace Pod Control\",\"type\":\"input_control_vis\",\"aggs\":[],\"params\":{\"controls\":[{\"id\":\"1626677527954\",\"fieldName\":\"kubernetes.namespace_name\",\"parent\":\"\",\"label\":\"Namespace\",\"type\":\"list\",\"options\":{\"type\":\"terms\",\"multiselect\":true,\"dynamicOptions\":true,\"size\":5,\"order\":\"desc\"},\"indexPatternRefName\":\"control_0_index_pattern\"},{\"id\":\"1626677575527\",\"fieldName\":\"kubernetes.pod_name\",\"parent\":\"1626677527954\",\"label\":\"Pod\",\"type\":\"list\",\"options\":{\"type\":\"terms\",\"multiselect\":true,\"dynamicOptions\":true,\"size\":5,\"order\":\"desc\"},\"indexPatternRefName\":\"control_1_index_pattern\"}],\"updateFiltersOnChange\":true,\"useTimeFilter\":true,\"pinFilters\":false}}"},"id":"15c9ab00-e85e-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"containers-*","name":"control_0_index_pattern","type":"index-pattern"},{"id":"containers-*","name":"control_1_index_pattern","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T06:53:55.503Z","version":"WzQ5LDFd"}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Logs Count TSDB","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Logs Count TSDB\",\"type\":\"metrics\",\"aggs\":[],\"params\":{\"id\":\"61ca57f0-469d-11e7-af02-69e470af7417\",\"type\":\"timeseries\",\"series\":[{\"id\":\"61ca57f1-469d-11e7-af02-69e470af7417\",\"color\":\"#68BC00\",\"split_mode\":\"everything\",\"split_color_mode\":\"opensearchDashboards\",\"metrics\":[{\"id\":\"61ca57f2-469d-11e7-af02-69e470af7417\",\"type\":\"count\"}],\"separate_axis\":0,\"axis_position\":\"right\",\"formatter\":\"number\",\"chart_type\":\"line\",\"line_width\":1,\"point_size\":1,\"fill\":0.5,\"stacked\":\"none\",\"filter\":{\"query\":\"\",\"language\":\"kuery\"}}],\"time_field\":\"@timestamp\",\"index_pattern\":\"containers-*\",\"interval\":\"\",\"axis_position\":\"left\",\"axis_formatter\":\"number\",\"axis_scale\":\"normal\",\"show_legend\":1,\"show_grid\":1,\"tooltip_mode\":\"show_all\",\"default_index_pattern\":\"containers-*\",\"default_timefield\":\"@timestamp\",\"isModelInvalid\":false,\"axis_min\":\"0\",\"background_color_rules\":[{\"id\":\"61b952f0-e85d-11eb-9ef2-95dd2f6242e4\"}]}}"},"id":"7feea180-e85d-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2021-07-19T07:05:46.362Z","version":"WzEwMywxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Logs Namespace Table","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"title\":\"Logs Namespace Table\",\"type\":\"table\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"kubernetes.namespace_name\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"bucket\"}],\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\"}}"},"id":"ca311930-e85d-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"containers-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T06:51:48.674Z","version":"WzQ3LDFd"}
    {"attributes":{"columns":["log"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[],"title":"Logs Search","version":1},"id":"bde51950-e85e-11eb-aa9a-fbf14463643d","migrationVersion":{"search":"7.9.3"},"references":[{"id":"containers-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2021-07-19T06:58:37.541Z","version":"WzU1LDFd"}
    {"attributes":{"description":"Shows current log stream","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":0,\"w\":12,\"h\":6,\"i\":\"7d52ecf7-6aab-46ff-858e-ff46b1cd54a3\"},\"panelIndex\":\"7d52ecf7-6aab-46ff-858e-ff46b1cd54a3\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":12,\"y\":0,\"w\":17,\"h\":15,\"i\":\"cec0e115-d5ab-4cbc-b9b5-7c596603a9a0\"},\"panelIndex\":\"cec0e115-d5ab-4cbc-b9b5-7c596603a9a0\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":29,\"y\":0,\"w\":19,\"h\":15,\"i\":\"c7a4d95b-17de-4494-9d08-c4e2810bf9ac\"},\"panelIndex\":\"c7a4d95b-17de-4494-9d08-c4e2810bf9ac\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":6,\"w\":12,\"h\":9,\"i\":\"6e8e1ef8-4eb4-4fe4-9706-585580bc64ea\"},\"panelIndex\":\"6e8e1ef8-4eb4-4fe4-9706-585580bc64ea\",\"embeddableConfig\":{},\"panelRefName\":\"panel_3\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":15,\"w\":34,\"h\":8,\"i\":\"ec31ce18-44e4-45e4-ab6e-a36c177a3592\"},\"panelIndex\":\"ec31ce18-44e4-45e4-ab6e-a36c177a3592\",\"embeddableConfig\":{},\"panelRefName\":\"panel_4\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":34,\"y\":15,\"w\":14,\"h\":8,\"i\":\"36fee8a3-26f9-47bf-a84b-d826ac40e5f3\"},\"panelIndex\":\"36fee8a3-26f9-47bf-a84b-d826ac40e5f3\",\"embeddableConfig\":{},\"panelRefName\":\"panel_5\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":23,\"w\":48,\"h\":15,\"i\":\"9c62c5d9-46f3-4af8-8b8c-1830c10f4905\"},\"panelIndex\":\"9c62c5d9-46f3-4af8-8b8c-1830c10f4905\",\"embeddableConfig\":{},\"panelRefName\":\"panel_6\"}]","timeRestore":false,"title":"Containers Logs Dashboard","version":1},"id":"fc9480e0-e85f-11eb-aa9a-fbf14463643d","migrationVersion":{"dashboard":"7.9.3"},"references":[{"id":"12285dd0-e85d-11eb-aa9a-fbf14463643d","name":"panel_0","type":"visualization"},{"id":"2df733b0-e85d-11eb-aa9a-fbf14463643d","name":"panel_1","type":"visualization"},{"id":"4bda4390-e85d-11eb-aa9a-fbf14463643d","name":"panel_2","type":"visualization"},{"id":"15c9ab00-e85e-11eb-aa9a-fbf14463643d","name":"panel_3","type":"visualization"},{"id":"7feea180-e85d-11eb-aa9a-fbf14463643d","name":"panel_4","type":"visualization"},{"id":"ca311930-e85d-11eb-aa9a-fbf14463643d","name":"panel_5","type":"visualization"},{"id":"bde51950-e85e-11eb-aa9a-fbf14463643d","name":"panel_6","type":"search"}],"type":"dashboard","updated_at":"2021-07-19T08:13:43.767Z","version":"WzI0NiwxXQ=="}
  nginx-access-logs.ndjson: |-
    {"attributes":{"fields":"[{\"count\":0,\"name\":\"@timestamp\",\"type\":\"date\",\"esTypes\":[\"date\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"@version\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"@version.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"@version\"}}},{\"count\":0,\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_score\",\"type\":\"number\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"agent\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"code\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"host\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_image\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.docker_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.host\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/component\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/instance\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.firewall_cs_sap_com/access-to-cluster-allowed\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.firewall_cs_sap_com/external-traffic-policy\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.pod-template-hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.namespace_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"location\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"log\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"method\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"path\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"proxy_upstream_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"referrer\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"reg_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"request_length\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"request_time\",\"type\":\"number\",\"esTypes\":[\"double\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"size\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"stream\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"stream.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"stream\"}}},{\"count\":0,\"name\":\"upstream_addr\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_response_length\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_response_time\",\"type\":\"number\",\"esTypes\":[\"double\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_status\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"user\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true}]","refresh_fields":true,"timeFieldName":"@timestamp","title":"nginx-*"},"id":"nginx-*","migrationVersion":{"index-pattern":"7.6.0"},"references":[],"type":"index-pattern","updated_at":"2022-02-02T11:15:23.508Z","version":"WzMyLDFd"}
    {"attributes":{"columns":["_source"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[{\"meta\":{\"alias\":null,\"negate\":true,\"disabled\":false,\"type\":\"exists\",\"key\":\"log\",\"value\":\"exists\",\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index\"},\"exists\":{\"field\":\"log\"},\"$state\":{\"store\":\"appState\"}}],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[],"title":"nginx access logs","version":1},"id":"4ed55c80-3e0f-11ec-ace2-89e9a2c6be56","migrationVersion":{"search":"7.9.3"},"references":[{"id":"nginx-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"},{"id":"nginx-*","name":"kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index","type":"index-pattern"}],"type":"search","updated_at":"2022-02-02T11:14:47.893Z","version":"WzI5LDFd"}
  nginx-controller-logs.ndjson: |-
    {"attributes":{"fields":"[{\"count\":0,\"name\":\"@timestamp\",\"type\":\"date\",\"esTypes\":[\"date\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"@version\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"@version.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"@version\"}}},{\"count\":0,\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_score\",\"type\":\"number\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"agent\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"code\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"host\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_image\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.container_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.docker_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.host\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/component\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/instance\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.app_kubernetes_io/name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.firewall_cs_sap_com/access-to-cluster-allowed\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.firewall_cs_sap_com/external-traffic-policy\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.labels.pod-template-hash\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.namespace_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"kubernetes.pod_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"location\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"log\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"method\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"path\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"proxy_upstream_name\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"referrer\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"reg_id\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"request_length\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"request_time\",\"type\":\"number\",\"esTypes\":[\"double\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"size\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"stream\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"stream.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"stream\"}}},{\"count\":0,\"name\":\"upstream_addr\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_response_length\",\"type\":\"number\",\"esTypes\":[\"long\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_response_time\",\"type\":\"number\",\"esTypes\":[\"double\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"upstream_status\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"user\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true}]","refresh_fields":true,"timeFieldName":"@timestamp","title":"nginx-*"},"id":"nginx-*","migrationVersion":{"index-pattern":"7.6.0"},"references":[],"type":"index-pattern","updated_at":"2022-02-02T11:15:23.508Z","version":"WzMyLDFd"}
    {"attributes":{"columns":["kubernetes.labels.app_kubernetes_io/instance","log"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[{\"meta\":{\"alias\":null,\"negate\":false,\"disabled\":false,\"type\":\"exists\",\"key\":\"log\",\"value\":\"exists\",\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index\"},\"exists\":{\"field\":\"log\"},\"$state\":{\"store\":\"appState\"}}],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[],"title":"nginx controller logs","version":1},"id":"07619530-3e0f-11ec-ace2-89e9a2c6be56","migrationVersion":{"search":"7.9.3"},"references":[{"id":"nginx-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"},{"id":"nginx-*","name":"kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index","type":"index-pattern"}],"type":"search","updated_at":"2022-02-02T11:15:09.654Z","version":"WzMwLDFd"}
  systemd-logs-dashboard.ndjson: |-
    {"attributes":{"fields":"[{\"count\":0,\"name\":\"@timestamp\",\"type\":\"date\",\"esTypes\":[\"date\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"BOOT_ID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"CAP_EFECTIVE\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"CAP_EFFECTIVE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"CAP_EFFECTIVE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"CAP_EFFECTIVE\"}}},{\"count\":0,\"name\":\"CMDLINE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"CMDLINE.keyword\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true,\"subType\":{\"multi\":{\"parent\":\"CMDLINE\"}}},{\"count\":0,\"name\":\"CMD_LINE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"COMM\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"EXE\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"GID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"HOSTNAME\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"MACHINE_ID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":1,\"name\":\"MESSAGE\",\"type\":\"string\",\"esTypes\":[\"text\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"PID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"PRIORITY\",\"type\":\"number\",\"esTypes\":[\"short\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"STREAM_ID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSLOG_FACILITY\",\"type\":\"number\",\"esTypes\":[\"short\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSLOG_IDENTIFIER\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSTEMD_CGROUP\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSTEMD_INVOCATION_ID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSTEMD_SLICE\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"SYSTEMD_UNIT\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"TRANSPORT\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"UID\",\"type\":\"string\",\"esTypes\":[\"keyword\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":true},{\"count\":0,\"name\":\"_id\",\"type\":\"string\",\"esTypes\":[\"_id\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_index\",\"type\":\"string\",\"esTypes\":[\"_index\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_score\",\"type\":\"number\",\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_source\",\"type\":\"_source\",\"esTypes\":[\"_source\"],\"scripted\":false,\"searchable\":false,\"aggregatable\":false,\"readFromDocValues\":false},{\"count\":0,\"name\":\"_type\",\"type\":\"string\",\"esTypes\":[\"_type\"],\"scripted\":false,\"searchable\":true,\"aggregatable\":true,\"readFromDocValues\":false}]","timeFieldName":"@timestamp","title":"systemd-*"},"id":"systemd-*","migrationVersion":{"index-pattern":"7.6.0"},"references":[],"type":"index-pattern","updated_at":"2021-07-19T07:16:50.213Z","version":"WzE3NSwxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Systemd Count","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Systemd Count\",\"type\":\"metric\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"}],\"params\":{\"addTooltip\":true,\"addLegend\":false,\"type\":\"metric\",\"metric\":{\"percentageMode\":false,\"useRanges\":false,\"colorSchema\":\"Green to Red\",\"metricColorMode\":\"None\",\"colorsRange\":[{\"from\":0,\"to\":10000}],\"labels\":{\"show\":true},\"invertColors\":false,\"style\":{\"bgFill\":\"#000\",\"bgColor\":false,\"labelColor\":false,\"subText\":\"\",\"fontSize\":45}}}}"},"id":"c42278b0-e860-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"systemd-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:13:07.002Z","version":"WzE1MiwxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Systemd system units Cloud","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Systemd system units Cloud\",\"type\":\"tagcloud\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"SYSTEMD_UNIT\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"segment\"}],\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":8,\"maxFontSize\":35,\"showLabel\":true}}"},"id":"22312550-e861-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"systemd-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:17:59.548Z","version":"WzE4MCwxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"title":"Systemd Unit Table","uiStateJSON":"{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":null,\"direction\":null}}}}","version":1,"visState":"{\"title\":\"Systemd Unit Table\",\"type\":\"table\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"SYSTEMD_UNIT\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":5,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\"},\"schema\":\"bucket\"}],\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\"}}"},"id":"fa25dff0-e861-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"systemd-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:21:47.119Z","version":"WzE4NywxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Systemd Node Unit Control","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Systemd Node Unit Control\",\"type\":\"input_control_vis\",\"aggs\":[],\"params\":{\"controls\":[{\"id\":\"1626679132839\",\"fieldName\":\"HOSTNAME\",\"parent\":\"\",\"label\":\"Node\",\"type\":\"list\",\"options\":{\"type\":\"terms\",\"multiselect\":false,\"dynamicOptions\":true,\"size\":5,\"order\":\"desc\"},\"indexPatternRefName\":\"control_0_index_pattern\"},{\"id\":\"1626679157044\",\"fieldName\":\"SYSTEMD_UNIT\",\"parent\":\"1626679132839\",\"label\":\"Systemd Unit\",\"type\":\"list\",\"options\":{\"type\":\"terms\",\"multiselect\":false,\"dynamicOptions\":true,\"size\":5,\"order\":\"desc\"},\"indexPatternRefName\":\"control_1_index_pattern\"}],\"updateFiltersOnChange\":true,\"useTimeFilter\":true,\"pinFilters\":false}}"},"id":"c7fe84f0-e861-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[{"id":"systemd-*","name":"control_0_index_pattern","type":"index-pattern"},{"id":"systemd-*","name":"control_1_index_pattern","type":"index-pattern"}],"type":"visualization","updated_at":"2021-07-19T07:20:22.975Z","version":"WzE4MiwxXQ=="}
    {"attributes":{"description":"","kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"title":"Systemd Count TSDB","uiStateJSON":"{}","version":1,"visState":"{\"title\":\"Systemd Count TSDB\",\"type\":\"metrics\",\"aggs\":[],\"params\":{\"id\":\"61ca57f0-469d-11e7-af02-69e470af7417\",\"type\":\"timeseries\",\"series\":[{\"id\":\"61ca57f1-469d-11e7-af02-69e470af7417\",\"color\":\"#68BC00\",\"split_mode\":\"everything\",\"split_color_mode\":\"opensearchDashboards\",\"metrics\":[{\"id\":\"61ca57f2-469d-11e7-af02-69e470af7417\",\"type\":\"count\"}],\"separate_axis\":0,\"axis_position\":\"right\",\"formatter\":\"number\",\"chart_type\":\"line\",\"line_width\":1,\"point_size\":1,\"fill\":0.5,\"stacked\":\"none\"}],\"time_field\":\"@timestamp\",\"index_pattern\":\"systemd-*\",\"interval\":\"\",\"axis_position\":\"left\",\"axis_formatter\":\"number\",\"axis_scale\":\"normal\",\"show_legend\":1,\"show_grid\":1,\"tooltip_mode\":\"show_all\",\"default_index_pattern\":\"containers-*\",\"default_timefield\":\"@timestamp\",\"isModelInvalid\":false}}"},"id":"e1ac4500-e860-11eb-aa9a-fbf14463643d","migrationVersion":{"visualization":"7.10.0"},"references":[],"type":"visualization","updated_at":"2021-07-19T07:13:56.560Z","version":"WzE2MywxXQ=="}
    {"attributes":{"columns":["MESSAGE"],"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[],"title":"Systemd Search","version":1},"id":"53859ff0-e861-11eb-aa9a-fbf14463643d","migrationVersion":{"search":"7.9.3"},"references":[{"id":"systemd-*","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2021-07-19T07:17:07.567Z","version":"WzE3NiwxXQ=="}
    {"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"},"optionsJSON":"{\"hidePanelTitles\":false,\"useMargins\":true}","panelsJSON":"[{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":0,\"w\":11,\"h\":8,\"i\":\"aa26ece2-d991-4d83-856c-f91e7c7da7b2\"},\"panelIndex\":\"aa26ece2-d991-4d83-856c-f91e7c7da7b2\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":11,\"y\":0,\"w\":23,\"h\":8,\"i\":\"ab340c71-106a-4ce2-9971-263cd93b5bb5\"},\"panelIndex\":\"ab340c71-106a-4ce2-9971-263cd93b5bb5\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":34,\"y\":0,\"w\":14,\"h\":8,\"i\":\"afa85aef-5d4d-408c-a3d3-6495d723757a\"},\"panelIndex\":\"afa85aef-5d4d-408c-a3d3-6495d723757a\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":8,\"w\":11,\"h\":8,\"i\":\"8e366122-9c8d-4181-b583-870964a733bb\"},\"panelIndex\":\"8e366122-9c8d-4181-b583-870964a733bb\",\"embeddableConfig\":{},\"panelRefName\":\"panel_3\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":11,\"y\":8,\"w\":37,\"h\":8,\"i\":\"f522813c-d1f7-4410-923a-556f82b89aa3\"},\"panelIndex\":\"f522813c-d1f7-4410-923a-556f82b89aa3\",\"embeddableConfig\":{},\"panelRefName\":\"panel_4\"},{\"version\":\"1.0.0\",\"gridData\":{\"x\":0,\"y\":16,\"w\":48,\"h\":15,\"i\":\"c35f5bad-5d82-4b0d-9649-c3cd921ee2ce\"},\"panelIndex\":\"c35f5bad-5d82-4b0d-9649-c3cd921ee2ce\",\"embeddableConfig\":{},\"panelRefName\":\"panel_5\"}]","timeRestore":false,"title":"Systemd Logs Dashboard","version":1},"id":"adf36d30-e863-11eb-aa9a-fbf14463643d","migrationVersion":{"dashboard":"7.9.3"},"references":[{"id":"c42278b0-e860-11eb-aa9a-fbf14463643d","name":"panel_0","type":"visualization"},{"id":"22312550-e861-11eb-aa9a-fbf14463643d","name":"panel_1","type":"visualization"},{"id":"fa25dff0-e861-11eb-aa9a-fbf14463643d","name":"panel_2","type":"visualization"},{"id":"c7fe84f0-e861-11eb-aa9a-fbf14463643d","name":"panel_3","type":"visualization"},{"id":"e1ac4500-e860-11eb-aa9a-fbf14463643d","name":"panel_4","type":"visualization"},{"id":"53859ff0-e861-11eb-aa9a-fbf14463643d","name":"panel_5","type":"search"}],"type":"dashboard","updated_at":"2021-07-19T08:13:04.195Z","version":"WzI0MCwxXQ=="}
---
# Source: kubernetes-logging/templates/opensearch/os-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  livenessProbe.sh: |-
    #!/bin/bash

    curl -sSk -u$os_user:$os_pass $os_url

  log4j2.properties: |-
    status = info

    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = OpenSearchJsonLayout
    appender.console.layout.type_name = logging
    #appender.console.layout.type = PatternLayout
    #appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker %m%n

    rootLogger.level = warn
    rootLogger.appenderRef.console.ref = console

    logger.discovery.name = org.opensearch.discovery
    logger.discovery.level = info

    logger.bootsrap.name = org.opensearch.bootsrap
    logger.bootsrap.level = info

    logger.security.name = org.opensearch.security
    logger.security.level = info

    logger.coordination.name = org.opensearch.cluster.coordination
    logger.coordination.level = info

    logger.jwt.name = com.amazon.dlic.auth.http.jwt
    logger.jwt.level = info

    logger.oidc.name = com.amazon.dlic.auth.http.jwt.oidc.json
    logger.oidc.level = info

    logger.keybyoidc.name = com.amazon.dlic.auth.http.jwt.keybyoidc
    logger.keybyoidc.level = info

    logger.saml.name = com.amazon.dlic.auth.http.saml
    logger.saml.level = info
---
# Source: kubernetes-logging/templates/opensearch/os-index-templates-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-index-templates
data:
  containers_index_template.json: |-
    {
       "index_patterns":[
          "containers-*"
       ],
       "composed_of":[
             "kubernetes-metadata"
       ],
       "template":{
          "settings":{
             "index":{
                "mapping":{
                   "total_fields":{
                      "limit":10000
                   }
                },
                "max_docvalue_fields_search":200,
                "number_of_shards":"1",
                "number_of_replicas":"0"
             }
          },
          "mappings":{
             "_source":{
                "enabled":true
             },
             "properties":{
                "@timestamp":{
                  "type":"date"
                },
                "level":{
                   "type":"keyword"
                },
                "message":{
                   "type":"text"
                }
             }
          }
       }
    }
    
  index-retention_policy.json: |-
    {
       "policy":{
          "description":"Retention policy for logging indices",
          "default_state":"hot",
          "ism_template":{
             "index_patterns":["*-*.*.*"],
             "priority":100
          },
          "states":[
             {
                "name":"hot",
                "transitions":[
                   {
                      "state_name":"delete",
                      "conditions":{
                         "min_index_age": "7d"
                      }
                   }
                ]
             },
             {
                "name":"delete",
                "actions":[
                   {
                      "delete":{}
                   }
                ]
             }
          ]
       }
    }
    
  kubernetes-metadata_component_template.json: |-
    {
       "template":{
           "settings":{
             "query":{
                "default_field":[
                   "log",
                   "kubernetes.pod_name",
                   "kubernetes.namespace_name"
                ]
             },
             "refresh_interval":"5s"
          },
          "mappings":{
             "dynamic_templates":[
                {
                   "kubernetes.annotations.*/*":{
                      "mapping":{
                         "type":"keyword"
                      },
                      "match_mapping_type":"*",
                      "path_match":"kubernetes.annotations.*/*"
                   }
                },
                {
                   "kubernetes.labels.*":{
                      "mapping":{
                         "type":"keyword"
                      },
                      "match_mapping_type":"*",
                      "path_match":"kubernetes.labels.*"
                   }
                }
             ],
             "properties":{
                "location":{
                   "type":"keyword"
                },
                "log":{
                   "type":"text"
                },
                "kubernetes":{
                   "properties":{
                      "container_name":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "container_image":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "container_hash":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "docker_id":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "host":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "namespace_name":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "pod_id":{
                         "type":"keyword",
                         "ignore_above":"256"
                      },
                      "pod_name":{
                         "type":"keyword",
                         "ignore_above":"256"
                      }
                   }
                }
             }
          }
       }
    }
    
  nginx_index_template.json: |-
    {
       "index_patterns":[
          "nginx-*"
       ],
       "composed_of":[
          "kubernetes-metadata"
       ],
       "template":{
          "settings":{
             "index":{
                "codec":"best_compression",
                "mapping":{
                   "total_fields":{
                      "limit":1000
                   }
                },
                "number_of_shards":"1",
                "number_of_replicas":"0",
                "refresh_interval":"5s"
             }
          },
          "mappings":{
             "_source":{
                "enabled":true
             },
             "properties":{
                "@timestamp":{
                  "type":"date"
                },
                "log":{
                   "type":"text"
                },
                "agent":{
                   "type":"keyword"
                },
                "code":{
                   "type":"keyword"
                },
                "host":{
                   "type":"keyword"
                },
                "method":{
                   "type":"keyword"
                },
                "path":{
                   "type":"keyword"
                },
                "proxy_upstream_name":{
                   "type":"keyword"
                },
                "referrer":{
                   "type":"keyword"
                },
                "reg_id":{
                   "type":"keyword"
                },
                "request_length":{
                   "type":"long"
                },
                "request_time":{
                   "type":"double"
                },
                "size":{
                   "type":"long"
                },
                "upstream_addr":{
                   "type":"keyword"
                },
                "upstream_response_length":{
                   "type":"long"
                },
                "upstream_response_time":{
                   "type":"double"
                },
                "upstream_status":{
                   "type":"keyword"
                },
                "user":{
                   "type":"keyword"
                }
             }
          }
       }
    }
    
  systemd_index_template.json: |-
    {   
       "index_patterns":[
          "systemd-*"
       ],
       "template":{
         "settings":{
            "index":{
               "codec":"best_compression",
               "mapping":{
                  "total_fields":{
                     "limit":2000
                  }
               },
               "max_docvalue_fields_search":200,
               "number_of_shards":"1",
               "number_of_replicas":"0",
               "refresh_interval":"5s"
            }
         },
         "mappings":{
            "_source":{
               "enabled":true
            },
            "dynamic_templates":[],
            "properties":{
               "@timestamp":{
                  "type":"date"
               },
               "BOOT_ID":{
                  "type":"keyword"
               },
               "CAP_EFECTIVE":{
                  "type":"keyword"
               },
               "CMD_LINE":{
                  "type":"text"
               },
               "COMM":{
                  "type":"keyword"
               },
               "EXE":{
                  "type":"keyword"
               },
               "GID":{
                  "type":"keyword"
               },
               "HOSTNAME":{
                  "type":"keyword"
               },
               "MACHINE_ID":{
                  "type":"keyword"
               },
               "MESSAGE":{
                  "type":"text"
               },
               "PID":{
                  "type":"keyword"
               },
               "PRIORITY":{
                  "type":"short"
               },
               "STREAM_ID":{
                  "type":"keyword"
               },
               "SYSLOG_FACILITY":{
                  "type":"short"
               },
               "SYSLOG_IDENTIFIER":{
                  "type":"keyword"
               },
               "SYSTEMD_CGROUP":{
                  "type":"keyword"
               },
               "SYSTEMD_INVOCATION_ID":{
                  "type":"keyword"
               },
               "SYSTEMD_SLICE":{
                  "type":"keyword"
               },
               "SYSTEMD_UNIT":{
                  "type":"keyword"
               },
               "TRANSPORT":{
                  "type":"keyword"
               },
               "UID":{
                  "type":"keyword"
               }
            }
         }
       }
    }
  templates.sh: |-
    #!/bin/bash

    echo "INFO: --=== Prefly checking ===--"

    # Check input parameters
    if [[ -z ${os_url+x} ]]; then
      echo "ERROR: OpenSearch url env variable (os_url) is expected but not found!"
      exit -1
    elif [ -z ${os_cacert_file+x} ]; then
      echo "ERROR: OpenSearch CA Certificate env variable (cacert_file) is expected but not found!";
      exit -1
    elif [[ -z ${os_user+x} ]]; then
      echo "ERROR: OpenSearch user env variable (os_user) is expected but not found!"
      exit -1
    elif [[ -z ${os_pass+x} ]]; then
      echo "ERROR: OpenSearch password env variable (os_pass) is expected but not found!"
      exit -1
    elif [[ -z ${os_data_nodes+x} ]]; then
      echo "ERROR: OpenSearch data nodes count env variable (os_data_nodes) is expected but not found!"
      exit -1
    fi
    echo "INFO: Input parameters found."

    # Check for secure comminucation with OS cluster
    echo "INFO: Checking secure communication with OpenSearch cluster ..."
    curl -s --cacert $os_cacert_file -X GET -u$os_user:$os_pass \
      -o /dev/null "$os_url/_cat/health"
    errcode=$?

    if [[ $errcode == "60" ]]; then
      echo "ERROR: Failed to verify the legitimacy of the server, check CA certificate!!!"
      exit 1
    elif [[ $errcode != "0" ]]; then
      curl -s --cacert $os_cacert_file -X GET -u$os_user:$os_pass "$os_url/_cat/health"
      echo "ERROR: It isnt possible to communicate with OpenSearch cluster!!!"
      exit 1
    # TODO: Add aditional curl error codes explanation
    fi
    echo "INFO: It is possible to secure communicate with OpenSearch cluster."

    # Check cluster health
    echo -e "INFO: Checking cluster health ..."
    health=$(curl -s --cacert $os_cacert_file -X GET \
             -u$os_user:$os_pass "$os_url/_cat/health" | awk '{print $4}')
    if [[ $health = "green" ]]; then
      echo "INFO: Cluster health is green."
    elif [[ $health = "yellow" ]]; then
      echo "WARN: Cluster health is yellow."
    elif [[ $health = "red" ]]; then
      echo "ERROR: Cluster health is red!!!"
      exit 1
    elif [[ -z $health ]]; then
      echo "ERROR: It isnt possible to communicate with OpenSearch cluster!!!"
      exit 1
    fi
    echo "INFO: --=== Prefly checking done ===--"

    echo "INFO: --=== Processing indices templates ===--"
    templates=("component" "index")
    for type in ${templates[@]}; do
      echo "INFO: Seting up $type templates type ..."
      for file in $(find /templates/ -name "*_${type}_template.json" -type f); do
        echo "INFO: Processing file $file:"
        name="$(basename -- $file)"
        template=$(echo $name | cut -d'_' -f 1 | cut -d'/' -f 3)
        echo -e "INFO: ... creating / updating $type template: $template"
        curl -s --cacert $os_cacert_file -X PUT \
          -H "Content-Type: application/json" -u$os_user:$os_pass \
          "$os_url/_${type}_template/$template?pretty=true" -d @$file
        echo -e "INFO: ... done."
      done
    done
    echo "INFO: --===--"

    echo "INFO: --=== Processing indices policies ===--"

    echo "INFO: Disabling ISM history"
    curl -s --cacert $os_cacert_file -X PUT -u$os_user:$os_pass \
      -H "Content-Type: application/json" "$os_url/_cluster/settings?pretty=true" \
      -d "{\"persistent\":{\"opendistro.index_state_management.history.enabled\":false}}"
    if [[ $? -ne 0 ]]; then
      echo "ERROR: It isnt possible disable ISM history!!!"
      exit 1
    else
      echo "INFO: OK, ISM history disabled."
    fi

    # Change default settings for some ISM indices
    ism_indices=(".opendistro-job-scheduler-lock" ".opendistro-ism-config")
    replica_shards=$((os_data_nodes-1))
    for ism_index in ${ism_indices[@]}; do
      echo "INFO: Seting up shards count for \"$ism_index\" index ..."
      index_name=$(tr -d "." <<< "$ism_index")
      json="
      {\"index_patterns\":[\"$ism_index\"],
       \"template\":{\"settings\":
        {\"number_of_shards\":$os_data_nodes,
         \"number_of_replicas\":$replica_shards
      }}}"
      curl -s --cacert $os_cacert_file -X PUT \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_index_template/$index_name?pretty=true" \
        -d "$json"
      if [[ $? -ne 0 ]]; then
        echo "ERROR: It isnt possible set shards count for index \"$ism_index\"!!!"
        exit 1
      else
        echo "INFO: Shards count for \"$ism_index\" index set"
        echo "INFO: Shards total: $os_data_nodes, replicas of it: $replica_shards"
      fi
    done

    # Apply templates for policies
    for file in $(find /templates/ -name "*_policy.json" -type f); do
      echo -e "INFO: Processing file $file:"
      name="$(basename -- $file)"
      template=$(echo $name | cut -d'_' -f 1 | cut -d'/' -f 3)

      # Get indices selector
      indices=$(grep "index_patterns" $file | grep -o -E '\[\".*\"\]' | tr -d '"[]')
      echo -e "INFO: Selecting indices by pattern: $indices"
      echo -en "INFO: Ckecking ISM policy $template: "
      exists=$(curl -s --cacert $os_cacert_file -w "%{http_code}" -o /dev/null \
        -X GET -u$os_user:$os_pass "$os_url/_plugins/_ism/policies/$template")
      if [[ $exists -eq 200 ]]; then
        echo -e "exists.\nINFO: Removing old policy implementation from cluster ..."
        # Remove existing ISM policy
        echo "INFO: Removing policy $template:"
        curl -s --cacert $os_cacert_file -X DELETE -u$os_user:$os_pass \
          "$os_url/_plugins/_ism/policies/$template?pretty=true"
        echo "INFO: Removing policy done."
        # Unassign policy from all selected indices
        echo "INFO: Unassigning policy $template from indices:"
        curl -s --cacert $os_cacert_file -X POST -u$os_user:$os_pass \
          "$os_url/_plugins/_ism/remove/$indices?pretty=true"
        echo "INFO: Unassigning policy done."
      else
        echo -e "not exist."
      fi

      # Add ISM policy
      echo "INFO: Adding new policy $template:"
      curl -s --cacert $os_cacert_file -X PUT \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_plugins/_ism/policies/$template?pretty=true" -d @$file
      echo "INFO: Adding policy done."
      # Assign policy to all selected indices
      echo "INFO: Assigning policy $template to selected indices:"
      curl -s --cacert $os_cacert_file -X POST \
        -H "Content-Type: application/json" -u$os_user:$os_pass \
        "$os_url/_plugins/_ism/add/$indices?pretty=true" \
        -d "{\"policy_id\": \"$template\"}"
      echo "INFO: Assigning policy done."
      echo "INFO: Processing file $file done."
    done
    echo -e "INFO: --===--"
    exit 0
---
# Source: kubernetes-logging/templates/opensearch/os-securityadmin-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-securityadmin
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
data:
  setup.sh: |-
    #!/bin/bash

    set -e

    echo "executing security admin job"
    echo "node $os_node"

    export JAVA_HOME=/usr/share/opensearch/jdk
    export PATH=$PATH:$JAVA_HOME/bin

    chmod +x /usr/share/opensearch/plugins/opensearch-security/tools/hash.sh
    chmod +x /usr/share/opensearch/plugins/opensearch-security/tools/securityadmin.sh

    os_pass_hash=`/usr/share/opensearch/plugins/opensearch-security/tools/hash.sh -env os_pass | tail -1`
    ki_pass_hash=`/usr/share/opensearch/plugins/opensearch-security/tools/hash.sh -env ki_pass | tail -1`
    ki_ro_pass_hash=`/usr/share/opensearch/plugins/opensearch-security/tools/hash.sh -env ki_ro_pass | tail -1`
    ki_dev_pass_hash=`/usr/share/opensearch/plugins/opensearch-security/tools/hash.sh -env ki_dev_pass | tail -1`

    cp /usr/share/opensearch/config/opensearch-security/internal_users.yml /tmp/internal_users.yml

    chmod +w /tmp/internal_users.yml

    sed -i -e "s|\$\$opensearch-PASSWORD_HASH|$os_pass_hash|" /tmp/internal_users.yml
    sed -i -e "s|\$\$opensearch-dashboards_PASSWORD_HASH|$ki_pass_hash|" /tmp/internal_users.yml
    sed -i -e "s|\$\$opensearch-dashboards_READONLY_PASSWORD_HASH|$ki_ro_pass_hash|" /tmp/internal_users.yml
    sed -i -e "s|\$\$opensearch-dashboards_DEVELOPER_PASSWORD_HASH|$ki_dev_pass_hash|" /tmp/internal_users.yml

    echo "##### checking configurations #####"
    /usr/share/opensearch/plugins/opensearch-security/tools/securityadmin.sh \
      -cacert /usr/share/opensearch/config/root-ca.pem \
      -cert /usr/share/opensearch/config/admin.pem \
      -key /usr/share/opensearch/config/admin-key.key \
      -cd /usr/share/opensearch/config/opensearch-security \
      -h $os_node -vc

    echo "##### setting up security configuration #####"

    /usr/share/opensearch/plugins/opensearch-security/tools/securityadmin.sh \
      -cacert /usr/share/opensearch/config/root-ca.pem \
      -cert /usr/share/opensearch/config/admin.pem \
      -key /usr/share/opensearch/config/admin-key.key \
      -cd /usr/share/opensearch/config/opensearch-security \
      -h $os_node -sniff -icl

    echo "##### setting up users configuration #####"
    /usr/share/opensearch/plugins/opensearch-security/tools/securityadmin.sh \
      -cacert /usr/share/opensearch/config/root-ca.pem \
      -cert /usr/share/opensearch/config/admin.pem \
      -key /usr/share/opensearch/config/admin-key.key \
      -f /tmp/internal_users.yml \
      -h $os_node -sniff -icl
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-fluent-bit
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
rules:
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  verbs: ["get", "list", "watch"]
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-fluent-bit
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-fluent-bit
subjects:
- kind: ServiceAccount
  name: my-release-fluent-bit
  namespace: kubernetes-logging-4.8.0.tgz
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-fluent-bit-init
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
rules:
- apiGroups: ["batch"]
  resources:
  - jobs
  - jobs/status
  verbs: ["get", "list", "watch"]
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-fluent-bit-init
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-fluent-bit-init
subjects:
- kind: ServiceAccount
  name: my-release-fluent-bit
  namespace: kubernetes-logging-4.8.0.tgz
---
# Source: kubernetes-logging/templates/kafka/kafka-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  clusterIP: None
  ports:
  - port: 9092
    name: kafka
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    type: kafka
---
# Source: kubernetes-logging/templates/kafka/kafka-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kafka-0
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  ports:
    - port: 9092
      name: kafka
    - port: 9093
      name: broker
    - port: 9094
      name: internal
    - port: 12345
      name: jmx
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    statefulset.kubernetes.io/pod-name: my-release-kafka-0
    type: kafka
---
# Source: kubernetes-logging/templates/logstash/logstash-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-logstash
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  type: ClusterIP
  ports:
  - name: monitoring-api
    port: 9600
    targetPort: monitoring-api
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    type: logstash
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-opensearch-dashboards
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  type: ClusterIP
  ports:
  - name: ui
    port: 5601
    targetPort: ui
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    type: opensearch-dashboards
---
# Source: kubernetes-logging/templates/opensearch/os-client-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-client
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  ports:
  - name: http
    port: 9200
    targetPort: http
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    type: client
  type: ClusterIP
---
# Source: kubernetes-logging/templates/opensearch/os-cluster-manager-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cluster-manager-0
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  ports:
    - port: 9300
      name: transport
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    statefulset.kubernetes.io/pod-name: my-release-cluster-manager-0
    type: cluster-manager
---
# Source: kubernetes-logging/templates/opensearch/os-data-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-data-0
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  ports:
    - port: 9300
      name: transport
    - port: 9200
      name: http
  selector:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    statefulset.kubernetes.io/pod-name: my-release-data-0
    type: data
---
# Source: kubernetes-logging/templates/fluent-bit/fluent-bit-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-fluent-bit
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    k8s-app: fluent-bit
spec:
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      k8s-app: fluent-bit
  template:
    metadata:
      annotations:
        checksum/config: 02de3a523662ed7708b19ae5c40f9c507f9e5c8a5e8bb9a5c5a92ad213d95c08
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        k8s-app: fluent-bit
    spec:
      priorityClassName: 
      securityContext:
        runAsUser: 0
      serviceAccountName: my-release-fluent-bit
      initContainers:
      - name: check-os
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:1.1.0
        command: ["sh","-c",'/init/check_os.sh']
        env:
          - name: os_url
            value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
          - name: os_user
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: username
          - name: os_pass
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: password
        volumeMounts:
        - name: certificates
          mountPath: /ssl/root-ca.pem
          subPath: ca.crt
        - mountPath: "/init"
          name: init
      - name: check-kafka
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:1.1.0
        command: ["sh","-c",'/init/check_host_port.sh $kafka 9092']
        env:
          - name: kafka
            value: my-release-kafka-0
        volumeMounts:
        - mountPath: "/init"
          name: init
      - name: check-job
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:1.1.0
        command: ["sh","-c",'/init/check_job.sh']
        env:
          - name: job_name
            value: my-release-index-templates
          - name: job_namespace
            value: kubernetes-logging-4.8.0.tgz
        volumeMounts:
        - mountPath: "/init"
          name: init
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:2.1.9
        imagePullPolicy: IfNotPresent
        resources: 
          limits:
            memory: 100Mi
          requests:
            memory: 50Mi
        ports:
          - name: http
            containerPort: 2020
          - name: cfgw
            containerPort: 8888
        env:
        - name: FLUENT_opensearch_HOST
          value: "my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local"
        - name: FLUENT_opensearch_PORT
          value: "9200"
        - name: FLUENT_opensearch_USER
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: FLUENT_opensearch_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
        volumeMounts:
        - name: fluentbitstate
          mountPath: /var/fluent-bit/state
        - name: containerslog
          mountPath: /var/log/pods
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
        - name: journallog
          mountPath: /run/log
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        - name: certificates
          mountPath: /fluent-bit/ssl/root-ca.pem
          subPath: ca.crt
        - name: admin-certificate
          mountPath: /fluent-bit/ssl/admin.pem
          subPath: tls.crt
        - name: admin-certificate
          mountPath: /fluent-bit/ssl/admin-key.pem
          subPath: tls.key
      terminationGracePeriodSeconds: 10
      volumes:
      - name: fluentbitstate
        hostPath:
          path: /var/fluent-bit/state
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: journallog
        hostPath:
          path: /var/log
      - name: containerslog
        hostPath:
          path: /var/log/pods
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        secret:
          secretName: my-release-fluent-bit
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: admin-certificate
        secret:
          secretName: my-release-opensearch-admin-certificate
      tolerations: 
        - operator: Exists
---
# Source: kubernetes-logging/templates/logstash/logstash-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-logstash
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  replicas: 1
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: logstash
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: logstash
      annotations:
        checksum/config: f50e5b3729896f59bae7f172b799694ab7cd7ffc6939a2d1881137db4760310e
    spec:
      priorityClassName: 
      serviceAccountName: my-release-logstash
      initContainers:
      - name: init
        imagePullPolicy: IfNotPresent
        image: nickytd/init-container:1.1.0
        command: ["sh","-c",'/init/check_os.sh && /init/check_host_port.sh $kafka 9092']
        env:
        - name: os_url
          value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        - name: kafka
          value: my-release-kafka-0
        volumeMounts:
        - name: certificates
          mountPath: /ssl/root-ca.pem
          subPath: ca.crt
        - mountPath: "/init"
          name: init
      containers:
      - name: logstash
        image: opensearchproject/logstash-oss-with-opensearch-output-plugin:8.9.0
        resources: 
          limits:
            memory: 700Mi
          requests:
            memory: 700Mi
        ports:
        - containerPort: 9600
          name: monitoring-api
          protocol: TCP
        env:
        - name: os_url
          value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        - name: kafka_brokers
          value: my-release-kafka-0:9092
        - name: LS_JAVA_OPTS
          value: "-Xms256M -Xmx256M"
        volumeMounts:
        - mountPath: "/usr/share/logstash/config"
          name: config
        - mountPath: "/usr/share/logstash/pipeline"
          name: pipelines
        - name: certificates
          mountPath: /usr/share/logstash/certs/root-ca.pem
          subPath: ca.crt
      volumes:
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: config
        configMap:
          name: my-release-logstash
      - name: pipelines
        configMap:
          name: my-release-logstash-pipelines
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-opensearch-dashboards
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  replicas: 1
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: opensearch-dashboards
  template:
    metadata:
      annotations:
        checksum/secret: 38c385df34d941eb14491b1ce18263cbb4df208c844f23af346f840c602b4514
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: opensearch-dashboards
    spec:
      priorityClassName: 
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/check_os.sh"]
        env:
        - name: os_url
          value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: password
        volumeMounts:
        - name: certificates
          mountPath: /ssl/root-ca.pem
          subPath: ca.crt
        - mountPath: "/init"
          name: init
      containers:
      - name: main
        image: opensearchproject/opensearch-dashboards:2.10.0
        resources:
          limits:
            memory: 500Mi
          requests:
            memory: 500Mi
        env:
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: "/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml"
          subPath: opensearch_dashboards.yml
        - name: certificates
          mountPath: /opt/opensearch-dashboards/config/root-ca.pem
          subPath: ca.crt
        - name: admin-certificate
          mountPath: /opt/opensearch-dashboards/config/admin.pem
          subPath: tls.crt
        - name: certificates
          mountPath: /opt/opensearch-dashboards/config/admin-key.pem
          subPath: tls.key
      volumes:
      - name: config
        secret:
          secretName: my-release-opensearch-dashboards-config
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: admin-certificate
        secret:
          secretName: my-release-opensearch-admin-certificate
      - name: securityconfig
---
# Source: kubernetes-logging/templates/opensearch/os-client-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-client
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
    node: os
spec:
  replicas: 1
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: client      
  template:
    metadata:
      annotations:
        checksum/config: 33bf21faafe483d4a4d33585c76bb0aa9e24b11acf1f9f5ad765c926c41a3ea6
        checksum/secret1: 3af744576f41b3fd7a4764299e677422a7058503e759673541a6d71dc02fc260
        checksum/secret2: eb77d08bb879e69e922f78537df494700470ac995c6c343ecdcf7cd751e8ea5e
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: client
    spec:
      priorityClassName: 
      serviceAccountName: my-release
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/check_host_port.sh $os_cluster_manager 9300 && /init/init_os_node.sh "]
        env:
          - name: os_cluster_manager
            value: my-release-cluster-manager-0
        volumeMounts:
        - name: shared
          mountPath: /shared
        - name: certificates
          mountPath: /config/node-key.pem
          subPath: tls.key
        - name: certificates
          mountPath: /config/ofd-rest-key.pem
          subPath: tls.key
        - name: os-data
          mountPath: /data
        - mountPath: "/init"
          name: init
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: main
        image: opensearchproject/opensearch:2.10.0
        imagePullPolicy: IfNotPresent
        resources: 
          limits:
            memory: 2000Mi
          requests:
            memory: 1000Mi
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 60
        ports:
        - containerPort: 9300
          name: transport
        - containerPort: 9200
          name: http
        volumeMounts:
        - name: opensearch
          mountPath: /livenessProbe.sh
          subPath: livenessProbe.sh
        - name: opensearchsecret
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch-client.yml
        - name: opensearch
          mountPath: /usr/share/opensearch/config/log4j2.properties
          subPath: log4j2.properties
        - name: os-data
          mountPath: /data
        - name: certificates
          mountPath: /usr/share/opensearch/config/node.pem
          subPath: tls.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/root-ca.pem
          subPath: ca.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/ofd-rest.pem
          subPath: tls.crt
        - name: shared
          mountPath: /usr/share/opensearch/config/node-key.key
          subPath: node-key.key
        - name: shared
          mountPath: /usr/share/opensearch/config/ofd-rest-key.key
          subPath: ofd-rest-key.key
        env:
        - name: os_url
          value: https://localhost:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xms512M -Xmx512M \
                  -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system \
                  -Djava.util.logging.config.file=/usr/share/opensearch/config/logging.properties"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace        
        - name: NODE_PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu          
      volumes:
      - name: opensearch
        configMap:
          name: my-release
          defaultMode: 0755
      - name: opensearchsecret
        secret:
          secretName: my-release
          defaultMode: 0644
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: os-data
        emptyDir: {}
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: admin-certificate
        secret:
          secretName: my-release-opensearch-admin-certificate
      - name: securityconfig
        secret:
          secretName: my-release-securityconfig
      - name: shared
        emptyDir: {}
---
# Source: kubernetes-logging/templates/kafka/kafka-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-kafka
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: kafka
  serviceName: kafka
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: kafka
    spec:
      priorityClassName: 
      
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INT_CON_EXP
          value: "60"
        command: ["sh", "-c", "/init/init_kafka_node.sh"]
        volumeMounts:
        - name: init
          mountPath: init
        - name: kafka-data
          mountPath: /kafka
        - name: cacert
          mountPath: /cacert/cacert.pem
          subPath: tls.crt
        - name: cacert
          mountPath: /cacert/cacert.key
          subPath: tls.key
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: kafka
        image: bitnami/kafka:3.4.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9093
          name: broker
        - containerPort: 9094
          name: internal
        - containerPort: 12345
          name: jmx
        resources: 
          limits:
            memory: 600Mi
          requests:
            memory: 600Mi
        ### Workaround for missing but required variable
        ### Details: https://github.com/bitnami/containers/issues/33271
        command:
        - /bin/bash
        args:
        - -ec
        - |
          export KAFKA_CFG_NODE_ID="$(echo "$MY_POD_NAME" | grep -o -E '[0-9]*$')"
          /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh
        ### --- ###
        env:
        # - name: BITNAMI_DEBUG # get more information from Kafka pod logs
        #   value: "true" # default "false"
        - name: KAFKA_KRAFT_CLUSTER_ID
          value: M2M5NGQ3ZDA5NWI1NDkxYz
        - name: KAFKA_CFG_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
          value: 0@my-release-kafka-0:9093
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094"
        - name: KAFKA_CFG_INITIAL_BROKER_REGISTRATION_TIMEOUT_MS
          value: "270000" # default 60000 (1 minute)
        - name: KAFKA_CFG_LOG_DIRS
          value: "/kafka/data"
        # - name: NODE_ID_COMMAND # need for get broker ID, broken, see workaround above
        #   value: 'hostname | cut -d "-" -f 3'
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx256M -Xms256M"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "INTERNAL://$(MY_POD_NAME).logging.svc.cluster.local:9094,PLAINTEXT://$(MY_POD_NAME).logging.svc.cluster.local:9092"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERNAL"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL:SSL,CONTROLLER:SSL,PLAINTEXT:PLAINTEXT"
        - name: KAFKA_TLS_TYPE
          value: "PEM"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "1"
        lifecycle:
          preStop:
            exec:
              command: ["/opt/bitnami/kafka/bin/kafka-server-stop.sh"]
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 24
        livenessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: kafka-data
          mountPath: /kafka
        - name: cacert
          mountPath: /opt/bitnami/kafka/config/certs/kafka.truststore.pem
          subPath: tls.crt
        - name: kafka-data
          mountPath: /opt/bitnami/kafka/config/certs/kafka.keystore.pem
          subPath: certs/kafka.keystore.pem
        - name: kafka-data
          mountPath: /opt/bitnami/kafka/config/certs/kafka.keystore.key
          subPath: certs/kafka.keystore.key
      terminationGracePeriodSeconds: 10
      volumes:
      - name: init
        configMap:
          name: my-release-kafka-cm
          defaultMode: 0550
      - name: cacert
        secret:
          secretName: my-release-kafka-brokers-cert
          defaultMode: 0644
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# Source: kubernetes-logging/templates/opensearch/os-cluster-manager-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name:  my-release-cluster-manager
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
    node: os
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: my-release-cluster-manager
  replicas: 1
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: cluster-manager      
  template:
    metadata:
      annotations:
        checksum/config: 33bf21faafe483d4a4d33585c76bb0aa9e24b11acf1f9f5ad765c926c41a3ea6
        checksum/secret1: 69775b2c77a84ed96529b7e4f90288454fdba201ea490800a1ca04dc7b2e2717
        checksum/secret2: eb77d08bb879e69e922f78537df494700470ac995c6c343ecdcf7cd751e8ea5e
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: cluster-manager
    spec:
      priorityClassName: 
      serviceAccountName: my-release
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/init_os_node.sh "]
        volumeMounts:
        - name: init
          mountPath: /init
        - name: shared
          mountPath: /shared
        - name: certificates
          mountPath: /config/node-key.pem
          subPath: tls.key
        - name: certificates
          mountPath: /config/ofd-rest-key.pem
          subPath: tls.key
        - name: os-data
          mountPath: /data
        securityContext:
          privileged: true
          runAsUser: 0
      containers:
      - name: main
        image: opensearchproject/opensearch:2.10.0
        imagePullPolicy: IfNotPresent
        resources: 
          limits:
            memory: 700Mi
          requests:
            memory: 700Mi
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 60
        ports:
        - containerPort: 9300
          name: transport
        volumeMounts:
        - name: os-data
          mountPath: /data
        - name: opensearchsecret
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch-cluster-manager.yml
        - name: opensearch
          mountPath: /usr/share/opensearch/config/log4j2.properties
          subPath: log4j2.properties
        - name: certificates
          mountPath: /usr/share/opensearch/config/node.pem
          subPath: tls.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/root-ca.pem
          subPath: ca.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/ofd-rest.pem
          subPath: tls.crt
        - name: shared
          mountPath: /usr/share/opensearch/config/node-key.key
          subPath: node-key.key
        - name: shared
          mountPath: /usr/share/opensearch/config/ofd-rest-key.key
          subPath: ofd-rest-key.key
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xms256M -Xmx256M -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system"
        - name: NODE_PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu  
      volumes:
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: opensearch
        configMap:
          name: my-release
      - name: opensearchsecret
        secret:
          secretName: my-release
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: securityconfig
        secret:
          secretName: my-release-securityconfig
      - name: shared
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: os-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
# Source: kubernetes-logging/templates/opensearch/os-data-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-data
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: my-release-data
  replicas: 1
  selector:
    matchLabels:       
      app.kubernetes.io/name: kubernetes-logging
      app.kubernetes.io/instance: my-release
      type: data      
  template:
    metadata:
      annotations:
        checksum/config: 33bf21faafe483d4a4d33585c76bb0aa9e24b11acf1f9f5ad765c926c41a3ea6
        checksum/secret1: 7fb56f0ccbb415ae3f460568e6ec36faa239c8297ebb0ef55f154870948885d1
        checksum/secret2: eb77d08bb879e69e922f78537df494700470ac995c6c343ecdcf7cd751e8ea5e
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: data
    spec:
      priorityClassName: 
      serviceAccountName: my-release
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/init_os_node.sh "]
        volumeMounts:
        - name: init
          mountPath: init
        - name: os-data
          mountPath: /data
        - name: shared
          mountPath: /shared
        - name: certificates
          mountPath: /config/node-key.pem
          subPath: tls.key
        - name: certificates
          mountPath: /config/ofd-rest-key.pem
          subPath: tls.key
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: main
        image: opensearchproject/opensearch:2.10.0
        imagePullPolicy: IfNotPresent
        resources: 
          limits:
            memory: 2000Mi
          requests:
            memory: 1000Mi
        ports:
        - containerPort: 9300
          name: transport
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 60
          periodSeconds: 60
        volumeMounts:
        - name: os-data
          mountPath: /data
        - name: opensearchsecret
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch-data.yml
        - name: opensearch
          mountPath: /usr/share/opensearch/config/log4j2.properties
          subPath: log4j2.properties
        - name: certificates
          mountPath: /usr/share/opensearch/config/node.pem
          subPath: tls.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/root-ca.pem
          subPath: ca.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/ofd-rest.pem
          subPath: tls.crt
        - name: shared
          mountPath: /usr/share/opensearch/config/node-key.key
          subPath: node-key.key
        - name: shared
          mountPath: /usr/share/opensearch/config/ofd-rest-key.key
          subPath: ofd-rest-key.key
        env:
        - name: os_url
          value: https://localhost:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xms512M -Xmx512M -Djava.net.preferIPv4Stack=true -XshowSettings:properties -XshowSettings:vm -XshowSettings:system"        
        - name: NODE_PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu  
      volumes:
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: opensearch
        configMap:
          name: my-release
          defaultMode: 0755
      - name: opensearchsecret
        secret:
          secretName: my-release
          defaultMode: 0644
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: securityconfig
        secret:
          defaultMode: 0644
          secretName: my-release-securityconfig
      - name: shared
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: os-data
    spec:
      resources:
        requests:
          storage: 1Gi
      accessModes:
      - ReadWriteOnce
---
# Source: kubernetes-logging/templates/kafka/kafka-topics-job.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: my-release-topics-config
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
  annotations:
    "helm.sh/hook": "post-install, post-upgrade"
    "helm.sh/hook-weight": "-8"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: kafka-topics
    spec:
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/check_host_port.sh $kafka 9092"]
        env:
          - name: kafka
            value: my-release-kafka-0
        volumeMounts:
        - mountPath: "/init"
          name: init
      containers:
      - name: kafka
        image: bitnami/kafka:3.4.1
        command: ["/bin/sh","-c","/topics-conf/setup.sh"]
        env:
        - name: kafka
          value: my-release-kafka-0.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9092
        - name: replicas
          value: "1"
        volumeMounts:
        - name: setup
          mountPath: /topics-conf/setup.sh
          subPath: setup.sh
        - name: setup
          mountPath: /topics-conf/topics.conf
          subPath: topics.conf
      restartPolicy: Never
      volumes:
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: setup
        configMap:
          name: my-release-kafka-topics
          defaultMode: 0755
---
# Source: kubernetes-logging/templates/opensearch-dashboards/opensearch-dashboards-index-patterns-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name:   my-release-index-pattern-job
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-7"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: os-dashboards-index-patterns
    spec:
      restartPolicy: Never
      initContainers:
      - name: check-os
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/check_os.sh"]
        env:
        - name: os_url
          value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        volumeMounts:
        - name: certificates
          mountPath: /ssl/root-ca.pem
          subPath: ca.crt
        - name: init
          mountPath: "/init"
      - name: check-opensearch-dashboards
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/config/check_opensearch-dashboards.sh"]
        env:
        - name: opensearch_dashboards_URL
          value: http://my-release-opensearch-dashboards.kubernetes-logging-4.8.0.tgz.svc.cluster.local:5601
        - name: opensearch_dashboards_USER
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: username
        - name: opensearch_dashboards_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: password
        volumeMounts:
        - name: config
          mountPath: "/config"
      containers:
      - name: main
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["/config/create_index_pattern.sh"]
        env:
        - name: opensearch_dashboards_URL
          value: http://my-release-opensearch-dashboards.kubernetes-logging-4.8.0.tgz.svc.cluster.local:5601
        - name: opensearch_dashboards_USER
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: username
        - name: opensearch_dashboards_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: password
        - name: opensearch_dashboards_DEVELOPER_USER
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-developer
              key: username
        - name: opensearch_dashboards_DEVELOPER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-developer
              key: password
        - name: INDEX_PATTERNS
          value: containers,systemd,nginx
        - name: TENANTS
          value: Global,Developer
        volumeMounts:
        - name: config
          mountPath: "/config"
        - name: saved-objects
          mountPath: "/saved_objects"
      volumes:
      - name: config
        configMap:
          name: my-release-opensearch-dashboards-index-pattern
          defaultMode: 0755
      - name: saved-objects
        configMap:
          name: my-release-opensearch-dashboards-saved-objects
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
---
# Source: kubernetes-logging/templates/opensearch/os-index-templates-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-index-templates
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-9"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: os-index-template
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh","-c",'/init/check_os.sh']
        env:
          - name: os_url
            value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
          - name: os_user
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: username
          - name: os_pass
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: password
        volumeMounts:
        - name: certificates
          mountPath: /ssl/root-ca.pem
          subPath: ca.crt
        - name: init
          mountPath: "/init"
      containers:
      - name: main
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/templates/templates.sh"]
        env:
          - name: os_url
            value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
          - name: os_cacert_file
            value: /etc/ssl/certs/open_search_ca.crt
          - name: os_user
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: username
          - name: os_pass
            valueFrom:
              secretKeyRef:
                name: my-release-opensearch-credentials-admin
                key: password
          - name: os_data_nodes
            value: "1"
        volumeMounts:
        - name: templates
          mountPath: /templates
        - name: certificates
          mountPath: /etc/ssl/certs/open_search_ca.crt
          subPath: ca.crt
          readOnly: true
      volumes:
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: templates
        configMap:
          name: my-release-index-templates
          defaultMode: 0755
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
          defaultMode: 0444
---
# Source: kubernetes-logging/templates/opensearch/os-securityadmin-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-securityadmin
  labels:     
    app.kubernetes.io/name: kubernetes-logging
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/opensearch: 2.10.0
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:         
        app.kubernetes.io/name: kubernetes-logging
        app.kubernetes.io/instance: my-release
        type: os-securityadmin
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: init
        image: nickytd/init-container:1.1.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/init/check_host_port.sh $os_node 9300 && /init/init_os_node.sh -only-keys"]
        env:
          - name: os_node
            value: my-release-data-0.kubernetes-logging-4.8.0.tgz.svc.cluster.local
        volumeMounts:
        - mountPath: "/init"
          name: init
        - mountPath: "/shared"
          name: shared
        - name: certificates
          mountPath: /config/node-key.pem
          subPath: tls.key
        - name: certificates
          mountPath: /config/ofd-rest-key.pem
          subPath: tls.key
        - name: admin-certificate
          mountPath: /config/admin-key.pem
          subPath: tls.key
      containers:
      - name: main
        image: opensearchproject/opensearch:2.10.0
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "/setup.sh"]
        env:
        - name: os_url
          value: https://my-release-client.kubernetes-logging-4.8.0.tgz.svc.cluster.local:9200
        - name: os_node
          value: my-release-data-0.kubernetes-logging-4.8.0.tgz.svc.cluster.local
        - name: os_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: username
        - name: os_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-credentials-admin
              key: password
        - name: ki_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: username
        - name: ki_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-admin
              key: password
        - name: ki_ro_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-readonly
              key: username
        - name: ki_ro_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-readonly
              key: password
        - name: ki_dev_user
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-developer
              key: username
        - name: ki_dev_pass
          valueFrom:
            secretKeyRef:
              name: my-release-opensearch-dashboards-credentials-developer
              key: password
        volumeMounts:
        - name: setup
          mountPath: /setup.sh
          subPath: setup.sh
        - name: certificates
          mountPath: /usr/share/opensearch/config/node.pem
          subPath: tls.crt
        - name: certificates
          mountPath: /usr/share/opensearch/config/root-ca.pem
          subPath: ca.crt
        - name: admin-certificate
          mountPath: /usr/share/opensearch/config/admin.pem
          subPath: tls.crt
        - name: shared
          mountPath: /usr/share/opensearch/config/node-key.key
          subPath: node-key.key
        - name: shared
          mountPath: /usr/share/opensearch/config/ofd-rest-key.key
          subPath: ofd-rest-key.key
        - name: shared
          mountPath: /usr/share/opensearch/config/admin-key.key
          subPath: admin-key.key
        - name: securityconfig
          mountPath: /usr/share/opensearch/config/opensearch-security
      volumes:
      - name: certificates
        secret:
          secretName: my-release-opensearch-certificates
      - name: admin-certificate
        secret:
          secretName: my-release-opensearch-admin-certificate
      - name: securityconfig
        secret:
          secretName: my-release-securityconfig
          defaultMode: 0644
      - name: init
        configMap:
          name: my-release-init
          defaultMode: 0755
      - name: setup
        configMap:
          name: my-release-securityadmin
          defaultMode: 0755
      - name: shared
        emptyDir: {}
