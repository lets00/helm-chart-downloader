---
# Source: iofog/templates/router/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: iofog-router
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: iofog/templates/router/secret-internal.yaml
kind: Secret
apiVersion: v1
metadata:
  name: iofog-router-internal
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router-internal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: iofog/templates/router/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: iofog-router
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
data:
  qdrouterd.conf: |
    router {
        mode: interior
        id: default-router
    }

    listener {
      host: 0.0.0.0
      port: 5672
      role: normal
    }

    sslProfile {
      name: router-amqps
      certFile: /etc/qpid-dispatch-certs/router-amqps/tls.crt
      privateKeyFile: /etc/qpid-dispatch-certs/router-amqps/tls.key
      caCertFile: /etc/qpid-dispatch-certs/router-amqps/ca.crt
    }

    listener {
      host: 0.0.0.0
      port: 9090
      role: normal
      http: true
      httpRootDir: disabled
      websockets: false
      healthz: true
      metrics: true
    }

    sslProfile {
      name: router-internal
      certFile: /etc/qpid-dispatch-certs/router-internal/tls.crt
      privateKeyFile: /etc/qpid-dispatch-certs/router-internal/tls.key
      caCertFile: /etc/qpid-dispatch-certs/router-internal/ca.crt
    }

    listener {
      role: inter-router
      host: 0.0.0.0
      port: 55672
      saslMechanisms: ANONYMOUS
      authenticatePeer: no
    }

    listener {
      role: edge
      host: 0.0.0.0
      port: 45672
      saslMechanisms: ANONYMOUS
      authenticatePeer: no
    }
---
# Source: iofog/templates/controller/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: iofog-database
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-database
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1G
---
# Source: iofog/templates/router/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iofog-router
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - verbs: [ "get", "list", "watch" ]
    apiGroups: [ "" ]
    resources: [ "pods" ]
---
# Source: iofog/templates/router/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iofog-router
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: iofog-router
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: iofog-router
---
# Source: iofog/templates/controller/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: iofog-controller
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-controller
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    
    app.kubernetes.io/name: iofog-controller
    app.kubernetes.io/instance: my-release
  ports:
    - port: 51121
      name: controller
      targetPort: controller
    - port: 8080
      name: viewer
      targetPort: viewer
---
# Source: iofog/templates/controller/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: iofog-controller
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-controller
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: iofog-controller
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        
        helm.sh/chart: iofog-0.1.1
        app.kubernetes.io/name: iofog-controller
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      initContainers:
        - name: init-config
          image: registry.access.redhat.com/ubi8-minimal
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
                echo 'window.controllerConfig = { url: "https://api-iofog-0.1.1.tgz.my.cluster", user: {} }' | tee /etc/config/api/controller-config.js
          volumeMounts:
            - mountPath: /etc/config/api
              name: config
        - name: init-user
          image: quay.io/ctrontesting/iofog-controller:latest
          imagePullPolicy: Always
          command:
            - iofog-controller
            - user
            - add
            - -f
            - "System"
            - -l
            - "Admin"
            - -e
            - "admin@my.cluster"
            - -p
            - "admin1234"
          volumeMounts:
            - mountPath: /usr/local/lib/node_modules/iofogcontroller/src/data/sqlite_files/
              name: database
              subPath: prod_database.sqlite
      containers:
        - name: controller
          image: quay.io/ctrontesting/iofog-controller:latest
          imagePullPolicy: Always
          env:
            - name: DB_PROVIDER
            - name: DB_NAME
            - name: DB_USERNAME
            - name: DB_PASSWORD
            - name: DB_HOST
            - name: DB_PORT
            - name: MSVC_PORT_PROVIDER
            - name: PORT_ALLOC_ADDRESS
            - name: ECN_NAME
            - name: PID_BASE
              value: /tmp
            - name: VIEWER_PORT
              value: "8080"
            - name: SystemImages_Proxy_1
              value: "docker.io/iofog/proxy:2.0.2"
            - name: SystemImages_Router_1
              value: "docker.io/iofog/router:2.0.1"
          ports:
            - name: controller
              containerPort: 51121
              protocol: TCP
            - name: viewer
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 51121
              path: /api/v3/status
          volumeMounts:
            - mountPath: /usr/local/lib/node_modules/iofogcontroller/src/data/sqlite_files/
              name: database
              subPath: prod_database.sqlite
            - mountPath: /etc/config/api
              name: config
      volumes:
        - name: database
          persistentVolumeClaim:
            claimName:  iofog-database
        - name: config
          emptyDir: {}
---
# Source: iofog/templates/router/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: iofog-router
  labels:
    
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog-router
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
    skupper.io/component: "router"
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: iofog-router
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        
        helm.sh/chart: iofog-0.1.1
        app.kubernetes.io/name: iofog-router
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.0.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: iofog-router
      containers:
        - name: router
          image: docker.io/iofog/router:2.0.1
          imagePullPolicy: IfNotPresent
          command:
            - "/qpid-dispatch/launch.sh"
          env:
            - name: APPLICATION_NAME
              value: router
            - name: QDROUTERD_AUTO_MESH_DISCOVERY
              value: QUERY
            - name: QDROUTERD_CONF
              value: |
                router {
                  mode: interior
                  id: default-router
                }

                listener {
                  host: 0.0.0.0
                  port: 5672
                  role: normal
                }

                sslProfile {
                  name: router-amqps
                  certFile: /etc/qpid-dispatch-certs/router-amqps/tls.crt
                  privateKeyFile: /etc/qpid-dispatch-certs/router-amqps/tls.key
                  caCertFile: /etc/qpid-dispatch-certs/router-amqps/ca.crt
                }

                listener {
                  host: 0.0.0.0
                  port: 9090
                  role: normal
                  http: true
                  httpRootDir: disabled
                  websockets: false
                  healthz: true
                  metrics: true
                }

                sslProfile {
                  name: router-internal
                  certFile: /etc/qpid-dispatch-certs/router-internal/tls.crt
                  privateKeyFile: /etc/qpid-dispatch-certs/router-internal/tls.key
                  caCertFile: /etc/qpid-dispatch-certs/router-internal/ca.crt
                }

                listener {
                  role: inter-router
                  host: 0.0.0.0
                  port: 55672
                  saslMechanisms: ANONYMOUS
                  authenticatePeer: no
                }

                listener {
                  role: edge
                  host: 0.0.0.0
                  port: 45672
                  saslMechanisms: ANONYMOUS
                  authenticatePeer: no
                }

            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP

          ports:
            - containerPort: 45672
              name: edge
              protocol: TCP
            - containerPort: 55672
              name: interior
              protocol: TCP

          readinessProbe:
            httpGet:
              port: 9090
              path: /healthz

          volumeMounts:
            - name: config
              mountPath: /etc/qpid-dispatch/qdrouterd.conf
#            - name: internal
#              mountPath: /etc/qpid-dispatch-certs/router-internal
#            - name: amqps
#              mountPath: /etc/qpid-dispatch-certs/amqps

      volumes:
        - name: config
          configMap:
            name: iofog-router
---
# Source: iofog/templates/controller/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: iofog
  labels:
    helm.sh/chart: iofog-0.1.1
    app.kubernetes.io/name: iofog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: viewer-iofog-0.1.1.tgz.my.cluster
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: iofog-controller
                port:
                  name: viewer
    - host: api-iofog-0.1.1.tgz.my.cluster
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: iofog-controller
                port:
                  name: controller
