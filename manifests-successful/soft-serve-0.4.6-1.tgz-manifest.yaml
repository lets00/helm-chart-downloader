---
# Source: soft-serve/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-soft-serve
  labels:
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
---
# Source: soft-serve/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-soft-serve
  labels: 
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
data:
  entrypoint: |-
    #!/usr/bin/env sh
    # This script is needed for a very specific use case when the repo storage
    # persistent volume is provisioned with an NFS Ganesha server that runs on a
    # node different than the application node. This init script will initialize
    # the repostiory and ssh keys in an ephemeral volume, stop the server, move
    # the repository and ssh keys to the persistent volume, and then start the
    # server as usual. The reason for this is that NFS locks don't work properly
    # in this scenario. Fixes "FATA no locks available" failures.
    set -e
    # If the ssh key and repository paths don't exist...
    if [ ! -d "${SOFT_SERVE_REPO_PATH}/config" ] \
      || [ ! -f "${SOFT_SERVE_KEY_PATH}" ]; then
      mkdir -p "${SOFT_SERVE_REPO_PATH}" "$(dirname "${SOFT_SERVE_KEY_PATH}")"
      # ...and we can't create a lock (ex: NFS mounted)...
      if ! flock "${SOFT_SERVE_REPO_PATH/.lock}" test 1 2>/dev/null \
        || ! flock "${SOFT_SERVE_KEY_PATH}" test 1 2>/dev/null; then
        # ...then initialize the repo in an ephemeral volume...
        echo "$(date +"%x %X") Pre-initializing filesystem due to file locking issue"
        # Read output from soft until the server says it's started
        while read -r line; do
          echo "$line"
          echo "$line" | grep -ql "Starting SSH server" && killall soft
        done < <(SOFT_SERVE_REPO_PATH="/working${SOFT_SERVE_REPO_PATH}" \
          SOFT_SERVE_KEY_PATH="/working${SOFT_SERVE_KEY_PATH}" soft serve "$@" 2>&1)
        # ...and move it to the proper paths
        cp --recursive /working/* / && rm -rf /working/*
      fi
    fi
    echo "$(date +"%x %X") Starting server"
    soft serve "$@"
---
# Source: soft-serve/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-soft-serve-headless
  labels:
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None  # Headless service
  ports:
    - name: ssh
      port: 23231
      protocol: TCP
  selector: 
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
---
# Source: soft-serve/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-soft-serve
  labels:
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 23231
      targetPort: ssh
      protocol: TCP
      name: ssh
  selector:
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
---
# Source: soft-serve/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-soft-serve
  labels: 
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: soft-serve
      app.kubernetes.io/instance: my-release
  serviceName: my-release-soft-serve-headless
  template:
    metadata:
      annotations: 
        kube-score/ignore: container-security-context-readonlyrootfilesystem,container-security-context-user-group-id
      labels: 
        app.kubernetes.io/name: soft-serve
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-soft-serve
      securityContext: 
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 10000
        runAsNonRoot: true
        runAsUser: 10000
      containers:
        - name: soft-serve
          securityContext: 
            capabilities:
              drop:
              - NET_BIND_SERVICE
            readOnlyRootFilesystem: true
          image: "ghcr.io/charmbracelet/soft-serve:v0.4.6"
          imagePullPolicy: IfNotPresent
          command: ["sh"]
          args: ["/usr/local/sbin/entrypoint"]
          env:
          - name: SOFT_SERVE_INITIAL_ADMIN_KEY
            value: ""
          - name: SOFT_SERVE_HOST
            value: "localhost"
          - name: SOFT_SERVE_PORT
            value: "23231"
          volumeMounts:
          - name: working
            mountPath: /working
          - name: entrypoint
            mountPath: /usr/local/sbin
          ports:
          - name: ssh
            containerPort: 23231
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: ssh
          resources: 
            {}
      volumes:
        - name: entrypoint
          configMap:
            name: my-release-soft-serve
        - name: working
          emptyDir:
            sizeLimit: 1Mi
---
# Source: soft-serve/templates/tests/test-connection.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-soft-serve-test-connection"
  labels: 
    helm.sh/chart: soft-serve-0.4.6-1
    app.kubernetes.io/name: soft-serve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.6"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
    kube-score/ignore: container-image-tag
spec:
  ttlSecondsAfterFinished: 600
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: test
          image: kroniak/ssh-client
          command: ['ssh']
          args:
            - '-p 23231'
            - '-o'
            - 'StrictHostKeyChecking=accept-new'
            - 'my-release-soft-serve'
            - 'help'
          securityContext:   
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            readOnlyRootFilesystem: true
