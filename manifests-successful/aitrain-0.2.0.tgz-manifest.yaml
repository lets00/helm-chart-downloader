---
# Source: aitrain/templates/00_namespace/install.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: aitrain-system
---
# Source: aitrain/templates/00_namespace/install.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: aitrain-teacher
  
  labels:
    instance: aitrain
---
# Source: aitrain/templates/00_namespace/install.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: aitrain-public
  
  labels:
    instance: aitrain
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: twgc-api-server
  namespace: aitrain-system
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
# service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: course-operator-sa
  namespace: aitrain-system
---
# Source: aitrain/templates/00_namespace/install.yaml
---

#https://helm.sh/docs/howto/charts_tips_and_tricks/#creating-image-pull-secrets
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: aitrain-system
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL3JlZ2lzdHJ5LmdpdGxhYi5jb20iOnsidXNlcm5hbWUiOiJnaXRsYWIrZGVwbG95LXRva2VuLTEyMTMzNDciLCJwYXNzd29yZCI6IkZmWjNYU2NkQnN6U3NuWnlIZVB6IiwiYXV0aCI6IloybDBiR0ZpSzJSbGNHeHZlUzEwYjJ0bGJpMHhNakV6TXpRM09rWm1Xak5ZVTJOa1FuTjZVM051V25sSVpWQjYifX19
---
# Source: aitrain/templates/00_namespace/install.yaml
---

# https://blog.frognew.com/2018/09/using-helm-manage-tls-secret.html

apiVersion: v1
kind: Secret
metadata:
  name: nchc-tls-secret
  namespace: aitrain-system
type: kubernetes.io/tls
data:
  
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaakNDQXM2Z0F3SUJBZ0lRVFZJVnlVcDJtOGtkMm9pa3llSkNHREFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKa1RFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNVE13TVFZRFZRUUxEQ3B2WjNKbApNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWJpeWt4T2pBNEJnTlZCQU1NCk1XMXJZMlZ5ZENCdlozSmxNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWIKaXlrd0hoY05Nakl3TkRBMk1ETXdOVEV6V2hjTk1qUXdOekEyTURNd05URXpXakJlTVNjd0pRWURWUVFLRXg1dAphMk5sY25RZ1pHVjJaV3h2Y0cxbGJuUWdZMlZ5ZEdsbWFXTmhkR1V4TXpBeEJnTlZCQXNNS205bmNtVXdOREF6ClFIWndiaTEwWXpBek5DNXVZMmhqTG05eVp5NTBkeUFvNkk2SzVhNjI2WnVMS1RDQ0FTSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxhSFEvRmsralFsQzU3YUIxZTJ1TExIaXlhTjV1Z2ViYWRMaGRMZgozZFJzNm9CR0xHS0RDU0ZwcHBZUW5CdDNVbWx5QTZ4bmNLUytnd0JZZ0JPY0EzNlRiYUZhajZoT2VTbEZZME9XCkRiZ0tkSXNGU09xdmkrR1lKWWw4UGZQcVdkcHFDc2tnS3VQaWcwcWhPdWl1SW1xU2hwN2VkVmF0RmtKTWJlM00KNzJMalhLTkpqdDMwSktPWHRDVjhzWFVYL21tOTliQ1F6T1dTcGI0MmN5Smo2QUE1SWQvQUlwTHBIVVlDTlBvTgpYdllacnREUmdQWjVTdGttcmpIWDlaWGl4YlZ1REtLU3dYY3BXTzI5M3k4SVR6Y29oQ3VpZWx6ejRsNnptWEFoCnR2dHNBZUNEeWlCOG5kNHFCTHRLcDhGS3hCd0dLLzM5dUN5TC9LSHNQZzgwMjhrQ0F3RUFBYU5zTUdvd0RnWUQKVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQjhHQTFVZEl3UVlNQmFBRkowSwpYSnYzQXpybHh0WG4xNFJudTREc2NKaDZNQ0lHQTFVZEVRUWJNQm1DRnlvdU1UUXdMVEV4TUMweE16WXROekl1CmJtbHdMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCZ1FDaU51Z0h3bFlVSVA2c1NHUzFHcUI4cWhMZ1VxK3MKUWtwRmJZSHkrZy9OUHdVYXlnNU52akpKbitKSEJSZ281cnFjYlhtMUovZVEzRGxvcTdvMWZYMjBsRDN3OFFPSQpBNEpGcnY5T29md0Y2TEQ1cSsvcW9ocTdyd1g2MUJyZWxRT2pVVDBrV3FMS0tiVDhzSW9zZG5GQzdLWEM4S2N0ClQrZDhzNmFRNDFDM2tabnhKQ1c4SW44MXgxdDNnRkUyZHBLYS91L2tSbHM5aFpjUVZxTVg3SUNpVXJ2NHovbnoKbzNOMFFPbVJmcGloYXpmQXlDWU1QN1lqMXV1STNiTjhabVJrSlM2dnNuMTFab0NBcFhzMVByZENEY01Fc0phNQpQZzM4NlhiUWtJVXZyaFhDVVlRRUprUzdyTmQ1WWdlT3AxN0dPbVJ2ZHVrQnkrWUpTeVljZENvd0dpdzVUUi9vCjZ1eGRRVzJlcW5zZGxzRjBRNUdiZlhDM3pBSXZvdWp1QUtESGlwUjhNZ21lcWNGK05QQ2pTUHJId3dnMVhHR2YKZTAzb1JscGxlTVlxZkF6dEwrdGRYTDlzN3RtbFVSMUJ5YnJPMktUVklBeVhpRjZLYlVaWmdoUXkxOFAyQTljcwpsa0JDb0N0S3BzRmlUTXQybm0ySHlvcVNKeFZCRW1WMW9GYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzJoMFB4WlBvMEpRdWUKMmdkWHRyaXl4NHNtamVib0htMm5TNFhTMzkzVWJPcUFSaXhpZ3draGFhYVdFSndiZDFKcGNnT3NaM0Nrdm9NQQpXSUFUbkFOK2syMmhXbytvVG5rcFJXTkRsZzI0Q25TTEJVanFyNHZobUNXSmZEM3o2bG5hYWdySklDcmo0b05LCm9Ucm9yaUpxa29hZTNuVldyUlpDVEczdHpPOWk0MXlqU1k3ZDlDU2psN1FsZkxGMUYvNXB2Zld3a016bGtxVysKTm5NaVkrZ0FPU0hmd0NLUzZSMUdBalQ2RFY3MkdhN1EwWUQyZVVyWkpxNHgxL1dWNHNXMWJneWlrc0YzS1ZqdAp2ZDh2Q0U4M0tJUXJvbnBjOCtKZXM1bHdJYmI3YkFIZ2c4b2dmSjNlS2dTN1NxZkJTc1FjQml2OS9iZ3NpL3loCjdENFBOTnZKQWdNQkFBRUNnZ0VBRk9xUE9KeFBwNllQSE5ielBIUHQybDdQYlUyWmhrUG1ZT05ncEhlTzNnYlYKSUhucUlDZlA1Z3BMVXFyNG1KVWwxbnVBUEVObVB4cXR2RjVuM3Rkajl4OUIwdG1qMksrVlpzdFN3cTN4U0lPNgpNeXdaM1ByYzFxOHVyZ0NVd055OEN6RlhweENPbWFxZFRQSUk1QjBBU0tJZDF4cTY2NEhPS1M3RThoa24zWGJxCnVLRFkyOTd1WldKN1JDWGt6SGlObjd6eGpKZm1QNU9yTGhpYmZsM01GOTZDQ2tmY2JwR2NoS0NDdlN6SmFibXkKeTNwL3dOWHlIUlBRTHRVTXBlUC96MUIxaXNrV2l2eWgwazhoN2pVR1lkWFpwVVVUb0phK0c0T3FveGoxWFVENwpVcEtzNWRFMCt4Z1kwTTNxNnR6Mm9EYVo5OWdXcHdFVDZGbExxakpBQVFLQmdRRHBZb01GdGRvWWYxZUFCZzYvCmRLejh1Mi9LUS8xN1k3bFpTM094Mk40c0YzY3EyZXROU01aUUlwdkRWR040Y054d2dzbHAzVTY4RmVSdnpubTYKTmpZQUVCSjRoQUFtVXJ1Mi9vb2VzSTZ6SmFhSFZJZHVzR0FuUHlKQlkxOGF0NVk1UU1iSHpyU3BMcXRKRWZPVQpVMVhEdXdYT1NUbWhzUGhuZnUzeTQrSi95UUtCZ1FESU55MXVNK2MvVkxHZ09tTTFucHVjMXNoTDliSWE2cEhUCkducjYzTTVreXIxbWRwanpWeWZ5Rk5mNmF4M3FZNWMzdUVZRkgyRm9JKzg3Ri8zcTAzdkRqazRlWjljVHo1UGEKQXMzam9JZkZKaWczeGl4bVcvc1B5ZkphVjM2Zm1TM3FVV2VJNGJKUkh5RlYyQ2JpbHN4aTJrLzlPT04vKzBkbQpMdUlSZ29WOEFRS0JnUURDOHg4dkxmQzRkZWJKY2tYdmQ2N29qa21iVTUveDZpTnhpNjFnNmg3c0JjM3RaWXRBClM0SWNma3hPcGJkUmJEVTNab2lJZmV5L0FDcUptcGZrREZTZlNNMmxEZDV5SkxuWTZsYkZ2QVgzYjRQamw2QnAKdmJzVURaQzN2aUk3VncrTlU2YTRVTnBvV0N1TUpncXA0OUxJWlBrOGo3NHNhbitWTkZuZmdxdzR3UUtCZ0d5SwpoVVdPTzlwNGhzZFBnQU5NbGg0anpuaG5uWU84RVF3NStkdlFJdEEvblFoVVdUenF6Z3dPUXJ4T24rdzJ5Mzc0CmxuVW1ldjhqSkFtTVN5cW9OaHRoSlhhVVl1UXBqNFVNS2lReUhnakNVK0ZRdlRkTXZFSG1BRTM3eXZpbzZWeHoKZjBhVTNML2Z1WW01WWZOTFAwaUVCQU5LZVFNajdhUTIzSFlUcFZ3QkFvR0FXOFAzRS9jaVRxN1lraDV3bW10ZQplV0Vqa2JReEhZTE5FamZiUVdiNTA0allEMEQvZDgwZGlyVUlMYlFaMWxpdkhTaHFra3lUckJuZU9JQUtsQVVWCjJ0cW9yS29YZG9iTkVHNTM4L2pkajhrTTYzOEw4VGpncm52RGVVREZnTks3TGc2Kyt1Q0Y5NHVZd1lWcFJmaU8KWmUyaTNqMFdiTTloUTRydTA5eDhtaGM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=
---
# Source: aitrain/templates/00_namespace/install.yaml
apiVersion: v1
kind: Secret
metadata:
  name: nchc-tls-secret
  namespace: aitrain-teacher
type: kubernetes.io/tls
data:
  
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaakNDQXM2Z0F3SUJBZ0lRVFZJVnlVcDJtOGtkMm9pa3llSkNHREFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKa1RFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNVE13TVFZRFZRUUxEQ3B2WjNKbApNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWJpeWt4T2pBNEJnTlZCQU1NCk1XMXJZMlZ5ZENCdlozSmxNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWIKaXlrd0hoY05Nakl3TkRBMk1ETXdOVEV6V2hjTk1qUXdOekEyTURNd05URXpXakJlTVNjd0pRWURWUVFLRXg1dAphMk5sY25RZ1pHVjJaV3h2Y0cxbGJuUWdZMlZ5ZEdsbWFXTmhkR1V4TXpBeEJnTlZCQXNNS205bmNtVXdOREF6ClFIWndiaTEwWXpBek5DNXVZMmhqTG05eVp5NTBkeUFvNkk2SzVhNjI2WnVMS1RDQ0FTSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxhSFEvRmsralFsQzU3YUIxZTJ1TExIaXlhTjV1Z2ViYWRMaGRMZgozZFJzNm9CR0xHS0RDU0ZwcHBZUW5CdDNVbWx5QTZ4bmNLUytnd0JZZ0JPY0EzNlRiYUZhajZoT2VTbEZZME9XCkRiZ0tkSXNGU09xdmkrR1lKWWw4UGZQcVdkcHFDc2tnS3VQaWcwcWhPdWl1SW1xU2hwN2VkVmF0RmtKTWJlM00KNzJMalhLTkpqdDMwSktPWHRDVjhzWFVYL21tOTliQ1F6T1dTcGI0MmN5Smo2QUE1SWQvQUlwTHBIVVlDTlBvTgpYdllacnREUmdQWjVTdGttcmpIWDlaWGl4YlZ1REtLU3dYY3BXTzI5M3k4SVR6Y29oQ3VpZWx6ejRsNnptWEFoCnR2dHNBZUNEeWlCOG5kNHFCTHRLcDhGS3hCd0dLLzM5dUN5TC9LSHNQZzgwMjhrQ0F3RUFBYU5zTUdvd0RnWUQKVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQjhHQTFVZEl3UVlNQmFBRkowSwpYSnYzQXpybHh0WG4xNFJudTREc2NKaDZNQ0lHQTFVZEVRUWJNQm1DRnlvdU1UUXdMVEV4TUMweE16WXROekl1CmJtbHdMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCZ1FDaU51Z0h3bFlVSVA2c1NHUzFHcUI4cWhMZ1VxK3MKUWtwRmJZSHkrZy9OUHdVYXlnNU52akpKbitKSEJSZ281cnFjYlhtMUovZVEzRGxvcTdvMWZYMjBsRDN3OFFPSQpBNEpGcnY5T29md0Y2TEQ1cSsvcW9ocTdyd1g2MUJyZWxRT2pVVDBrV3FMS0tiVDhzSW9zZG5GQzdLWEM4S2N0ClQrZDhzNmFRNDFDM2tabnhKQ1c4SW44MXgxdDNnRkUyZHBLYS91L2tSbHM5aFpjUVZxTVg3SUNpVXJ2NHovbnoKbzNOMFFPbVJmcGloYXpmQXlDWU1QN1lqMXV1STNiTjhabVJrSlM2dnNuMTFab0NBcFhzMVByZENEY01Fc0phNQpQZzM4NlhiUWtJVXZyaFhDVVlRRUprUzdyTmQ1WWdlT3AxN0dPbVJ2ZHVrQnkrWUpTeVljZENvd0dpdzVUUi9vCjZ1eGRRVzJlcW5zZGxzRjBRNUdiZlhDM3pBSXZvdWp1QUtESGlwUjhNZ21lcWNGK05QQ2pTUHJId3dnMVhHR2YKZTAzb1JscGxlTVlxZkF6dEwrdGRYTDlzN3RtbFVSMUJ5YnJPMktUVklBeVhpRjZLYlVaWmdoUXkxOFAyQTljcwpsa0JDb0N0S3BzRmlUTXQybm0ySHlvcVNKeFZCRW1WMW9GYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzJoMFB4WlBvMEpRdWUKMmdkWHRyaXl4NHNtamVib0htMm5TNFhTMzkzVWJPcUFSaXhpZ3draGFhYVdFSndiZDFKcGNnT3NaM0Nrdm9NQQpXSUFUbkFOK2syMmhXbytvVG5rcFJXTkRsZzI0Q25TTEJVanFyNHZobUNXSmZEM3o2bG5hYWdySklDcmo0b05LCm9Ucm9yaUpxa29hZTNuVldyUlpDVEczdHpPOWk0MXlqU1k3ZDlDU2psN1FsZkxGMUYvNXB2Zld3a016bGtxVysKTm5NaVkrZ0FPU0hmd0NLUzZSMUdBalQ2RFY3MkdhN1EwWUQyZVVyWkpxNHgxL1dWNHNXMWJneWlrc0YzS1ZqdAp2ZDh2Q0U4M0tJUXJvbnBjOCtKZXM1bHdJYmI3YkFIZ2c4b2dmSjNlS2dTN1NxZkJTc1FjQml2OS9iZ3NpL3loCjdENFBOTnZKQWdNQkFBRUNnZ0VBRk9xUE9KeFBwNllQSE5ielBIUHQybDdQYlUyWmhrUG1ZT05ncEhlTzNnYlYKSUhucUlDZlA1Z3BMVXFyNG1KVWwxbnVBUEVObVB4cXR2RjVuM3Rkajl4OUIwdG1qMksrVlpzdFN3cTN4U0lPNgpNeXdaM1ByYzFxOHVyZ0NVd055OEN6RlhweENPbWFxZFRQSUk1QjBBU0tJZDF4cTY2NEhPS1M3RThoa24zWGJxCnVLRFkyOTd1WldKN1JDWGt6SGlObjd6eGpKZm1QNU9yTGhpYmZsM01GOTZDQ2tmY2JwR2NoS0NDdlN6SmFibXkKeTNwL3dOWHlIUlBRTHRVTXBlUC96MUIxaXNrV2l2eWgwazhoN2pVR1lkWFpwVVVUb0phK0c0T3FveGoxWFVENwpVcEtzNWRFMCt4Z1kwTTNxNnR6Mm9EYVo5OWdXcHdFVDZGbExxakpBQVFLQmdRRHBZb01GdGRvWWYxZUFCZzYvCmRLejh1Mi9LUS8xN1k3bFpTM094Mk40c0YzY3EyZXROU01aUUlwdkRWR040Y054d2dzbHAzVTY4RmVSdnpubTYKTmpZQUVCSjRoQUFtVXJ1Mi9vb2VzSTZ6SmFhSFZJZHVzR0FuUHlKQlkxOGF0NVk1UU1iSHpyU3BMcXRKRWZPVQpVMVhEdXdYT1NUbWhzUGhuZnUzeTQrSi95UUtCZ1FESU55MXVNK2MvVkxHZ09tTTFucHVjMXNoTDliSWE2cEhUCkducjYzTTVreXIxbWRwanpWeWZ5Rk5mNmF4M3FZNWMzdUVZRkgyRm9JKzg3Ri8zcTAzdkRqazRlWjljVHo1UGEKQXMzam9JZkZKaWczeGl4bVcvc1B5ZkphVjM2Zm1TM3FVV2VJNGJKUkh5RlYyQ2JpbHN4aTJrLzlPT04vKzBkbQpMdUlSZ29WOEFRS0JnUURDOHg4dkxmQzRkZWJKY2tYdmQ2N29qa21iVTUveDZpTnhpNjFnNmg3c0JjM3RaWXRBClM0SWNma3hPcGJkUmJEVTNab2lJZmV5L0FDcUptcGZrREZTZlNNMmxEZDV5SkxuWTZsYkZ2QVgzYjRQamw2QnAKdmJzVURaQzN2aUk3VncrTlU2YTRVTnBvV0N1TUpncXA0OUxJWlBrOGo3NHNhbitWTkZuZmdxdzR3UUtCZ0d5SwpoVVdPTzlwNGhzZFBnQU5NbGg0anpuaG5uWU84RVF3NStkdlFJdEEvblFoVVdUenF6Z3dPUXJ4T24rdzJ5Mzc0CmxuVW1ldjhqSkFtTVN5cW9OaHRoSlhhVVl1UXBqNFVNS2lReUhnakNVK0ZRdlRkTXZFSG1BRTM3eXZpbzZWeHoKZjBhVTNML2Z1WW01WWZOTFAwaUVCQU5LZVFNajdhUTIzSFlUcFZ3QkFvR0FXOFAzRS9jaVRxN1lraDV3bW10ZQplV0Vqa2JReEhZTE5FamZiUVdiNTA0allEMEQvZDgwZGlyVUlMYlFaMWxpdkhTaHFra3lUckJuZU9JQUtsQVVWCjJ0cW9yS29YZG9iTkVHNTM4L2pkajhrTTYzOEw4VGpncm52RGVVREZnTks3TGc2Kyt1Q0Y5NHVZd1lWcFJmaU8KWmUyaTNqMFdiTTloUTRydTA5eDhtaGM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=
---
# Source: aitrain/templates/00_namespace/install.yaml
apiVersion: v1
kind: Secret
metadata:
  name: nchc-tls-secret
  namespace: aitrain-public
type: kubernetes.io/tls
data:
  
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaakNDQXM2Z0F3SUJBZ0lRVFZJVnlVcDJtOGtkMm9pa3llSkNHREFOQmdrcWhraUc5dzBCQVFzRkFEQ0IKa1RFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNVE13TVFZRFZRUUxEQ3B2WjNKbApNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWJpeWt4T2pBNEJnTlZCQU1NCk1XMXJZMlZ5ZENCdlozSmxNRFF3TTBCMmNHNHRkR013TURrdWJtTm9ZeTV2Y21jdWRIY2dLT2lPaXVXdXR1bWIKaXlrd0hoY05Nakl3TkRBMk1ETXdOVEV6V2hjTk1qUXdOekEyTURNd05URXpXakJlTVNjd0pRWURWUVFLRXg1dAphMk5sY25RZ1pHVjJaV3h2Y0cxbGJuUWdZMlZ5ZEdsbWFXTmhkR1V4TXpBeEJnTlZCQXNNS205bmNtVXdOREF6ClFIWndiaTEwWXpBek5DNXVZMmhqTG05eVp5NTBkeUFvNkk2SzVhNjI2WnVMS1RDQ0FTSXdEUVlKS29aSWh2Y04KQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxhSFEvRmsralFsQzU3YUIxZTJ1TExIaXlhTjV1Z2ViYWRMaGRMZgozZFJzNm9CR0xHS0RDU0ZwcHBZUW5CdDNVbWx5QTZ4bmNLUytnd0JZZ0JPY0EzNlRiYUZhajZoT2VTbEZZME9XCkRiZ0tkSXNGU09xdmkrR1lKWWw4UGZQcVdkcHFDc2tnS3VQaWcwcWhPdWl1SW1xU2hwN2VkVmF0RmtKTWJlM00KNzJMalhLTkpqdDMwSktPWHRDVjhzWFVYL21tOTliQ1F6T1dTcGI0MmN5Smo2QUE1SWQvQUlwTHBIVVlDTlBvTgpYdllacnREUmdQWjVTdGttcmpIWDlaWGl4YlZ1REtLU3dYY3BXTzI5M3k4SVR6Y29oQ3VpZWx6ejRsNnptWEFoCnR2dHNBZUNEeWlCOG5kNHFCTHRLcDhGS3hCd0dLLzM5dUN5TC9LSHNQZzgwMjhrQ0F3RUFBYU5zTUdvd0RnWUQKVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQjhHQTFVZEl3UVlNQmFBRkowSwpYSnYzQXpybHh0WG4xNFJudTREc2NKaDZNQ0lHQTFVZEVRUWJNQm1DRnlvdU1UUXdMVEV4TUMweE16WXROekl1CmJtbHdMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCZ1FDaU51Z0h3bFlVSVA2c1NHUzFHcUI4cWhMZ1VxK3MKUWtwRmJZSHkrZy9OUHdVYXlnNU52akpKbitKSEJSZ281cnFjYlhtMUovZVEzRGxvcTdvMWZYMjBsRDN3OFFPSQpBNEpGcnY5T29md0Y2TEQ1cSsvcW9ocTdyd1g2MUJyZWxRT2pVVDBrV3FMS0tiVDhzSW9zZG5GQzdLWEM4S2N0ClQrZDhzNmFRNDFDM2tabnhKQ1c4SW44MXgxdDNnRkUyZHBLYS91L2tSbHM5aFpjUVZxTVg3SUNpVXJ2NHovbnoKbzNOMFFPbVJmcGloYXpmQXlDWU1QN1lqMXV1STNiTjhabVJrSlM2dnNuMTFab0NBcFhzMVByZENEY01Fc0phNQpQZzM4NlhiUWtJVXZyaFhDVVlRRUprUzdyTmQ1WWdlT3AxN0dPbVJ2ZHVrQnkrWUpTeVljZENvd0dpdzVUUi9vCjZ1eGRRVzJlcW5zZGxzRjBRNUdiZlhDM3pBSXZvdWp1QUtESGlwUjhNZ21lcWNGK05QQ2pTUHJId3dnMVhHR2YKZTAzb1JscGxlTVlxZkF6dEwrdGRYTDlzN3RtbFVSMUJ5YnJPMktUVklBeVhpRjZLYlVaWmdoUXkxOFAyQTljcwpsa0JDb0N0S3BzRmlUTXQybm0ySHlvcVNKeFZCRW1WMW9GYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQzJoMFB4WlBvMEpRdWUKMmdkWHRyaXl4NHNtamVib0htMm5TNFhTMzkzVWJPcUFSaXhpZ3draGFhYVdFSndiZDFKcGNnT3NaM0Nrdm9NQQpXSUFUbkFOK2syMmhXbytvVG5rcFJXTkRsZzI0Q25TTEJVanFyNHZobUNXSmZEM3o2bG5hYWdySklDcmo0b05LCm9Ucm9yaUpxa29hZTNuVldyUlpDVEczdHpPOWk0MXlqU1k3ZDlDU2psN1FsZkxGMUYvNXB2Zld3a016bGtxVysKTm5NaVkrZ0FPU0hmd0NLUzZSMUdBalQ2RFY3MkdhN1EwWUQyZVVyWkpxNHgxL1dWNHNXMWJneWlrc0YzS1ZqdAp2ZDh2Q0U4M0tJUXJvbnBjOCtKZXM1bHdJYmI3YkFIZ2c4b2dmSjNlS2dTN1NxZkJTc1FjQml2OS9iZ3NpL3loCjdENFBOTnZKQWdNQkFBRUNnZ0VBRk9xUE9KeFBwNllQSE5ielBIUHQybDdQYlUyWmhrUG1ZT05ncEhlTzNnYlYKSUhucUlDZlA1Z3BMVXFyNG1KVWwxbnVBUEVObVB4cXR2RjVuM3Rkajl4OUIwdG1qMksrVlpzdFN3cTN4U0lPNgpNeXdaM1ByYzFxOHVyZ0NVd055OEN6RlhweENPbWFxZFRQSUk1QjBBU0tJZDF4cTY2NEhPS1M3RThoa24zWGJxCnVLRFkyOTd1WldKN1JDWGt6SGlObjd6eGpKZm1QNU9yTGhpYmZsM01GOTZDQ2tmY2JwR2NoS0NDdlN6SmFibXkKeTNwL3dOWHlIUlBRTHRVTXBlUC96MUIxaXNrV2l2eWgwazhoN2pVR1lkWFpwVVVUb0phK0c0T3FveGoxWFVENwpVcEtzNWRFMCt4Z1kwTTNxNnR6Mm9EYVo5OWdXcHdFVDZGbExxakpBQVFLQmdRRHBZb01GdGRvWWYxZUFCZzYvCmRLejh1Mi9LUS8xN1k3bFpTM094Mk40c0YzY3EyZXROU01aUUlwdkRWR040Y054d2dzbHAzVTY4RmVSdnpubTYKTmpZQUVCSjRoQUFtVXJ1Mi9vb2VzSTZ6SmFhSFZJZHVzR0FuUHlKQlkxOGF0NVk1UU1iSHpyU3BMcXRKRWZPVQpVMVhEdXdYT1NUbWhzUGhuZnUzeTQrSi95UUtCZ1FESU55MXVNK2MvVkxHZ09tTTFucHVjMXNoTDliSWE2cEhUCkducjYzTTVreXIxbWRwanpWeWZ5Rk5mNmF4M3FZNWMzdUVZRkgyRm9JKzg3Ri8zcTAzdkRqazRlWjljVHo1UGEKQXMzam9JZkZKaWczeGl4bVcvc1B5ZkphVjM2Zm1TM3FVV2VJNGJKUkh5RlYyQ2JpbHN4aTJrLzlPT04vKzBkbQpMdUlSZ29WOEFRS0JnUURDOHg4dkxmQzRkZWJKY2tYdmQ2N29qa21iVTUveDZpTnhpNjFnNmg3c0JjM3RaWXRBClM0SWNma3hPcGJkUmJEVTNab2lJZmV5L0FDcUptcGZrREZTZlNNMmxEZDV5SkxuWTZsYkZ2QVgzYjRQamw2QnAKdmJzVURaQzN2aUk3VncrTlU2YTRVTnBvV0N1TUpncXA0OUxJWlBrOGo3NHNhbitWTkZuZmdxdzR3UUtCZ0d5SwpoVVdPTzlwNGhzZFBnQU5NbGg0anpuaG5uWU84RVF3NStkdlFJdEEvblFoVVdUenF6Z3dPUXJ4T24rdzJ5Mzc0CmxuVW1ldjhqSkFtTVN5cW9OaHRoSlhhVVl1UXBqNFVNS2lReUhnakNVK0ZRdlRkTXZFSG1BRTM3eXZpbzZWeHoKZjBhVTNML2Z1WW01WWZOTFAwaUVCQU5LZVFNajdhUTIzSFlUcFZ3QkFvR0FXOFAzRS9jaVRxN1lraDV3bW10ZQplV0Vqa2JReEhZTE5FamZiUVdiNTA0allEMEQvZDgwZGlyVUlMYlFaMWxpdkhTaHFra3lUckJuZU9JQUtsQVVWCjJ0cW9yS29YZG9iTkVHNTM4L2pkajhrTTYzOEw4VGpncm52RGVVREZnTks3TGc2Kyt1Q0Y5NHVZd1lWcFJmaU8KWmUyaTNqMFdiTTloUTRydTA5eDhtaGM9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth-database-cm
  namespace: aitrain-system
data:
  database-init: |-
    CREATE DATABASE go_oauth2_server;
    CREATE USER 'go_oauth2_server'@'localhost' IDENTIFIED BY 'go_oauth2_server';
    CREATE USER 'go_oauth2_server'@'%' IDENTIFIED BY 'go_oauth2_server';
    GRANT ALL ON go_oauth2_server.* TO 'go_oauth2_server'@'localhost';
    GRANT ALL ON go_oauth2_server.* TO 'go_oauth2_server'@'%';
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth-server-cm
  namespace: aitrain-system
data:
  conf: |-
    {
      "Database": {
        "Type": "mysql",
        "Host": "oauth-database-svc",
        "Port": 3306,
        "User": "go_oauth2_server",
        "Password": "go_oauth2_server",
        "DatabaseName": "go_oauth2_server",
        "MaxIdleConns": 10,
        "MaxOpenConns": 10
      },
      "Oauth": {
        "AccessTokenLifetime": 259200,
        "RefreshTokenLifetime": 1209600,
        "AuthCodeLifetime": 3600
      },
      "Session": {
        "Secret": "test_secret",
        "Path": "/",
        "MaxAge": 604800,
        "HTTPOnly": true
      },
      "IsDevelopment": true
    }
  roles: |-
    - table: 'oauth_roles'
      pk:
        id: 'superuser'
      fields:
        name: 'Superuser'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
    - table: 'oauth_roles'
      pk:
        id: 'user'
      fields:
        name: 'User'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
    - table: 'oauth_roles'
      pk:
        id: 'teacher'
      fields:
        name: 'Teacher'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
    - table: 'oauth_roles'
      pk:
        id: 'student'
      fields:
        name: 'Student'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
  scopes: |-
    - table: 'oauth_scopes'
      pk:
        id: "1"
      fields:
        scope: 'read'
        is_default: true
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'

    - table: 'oauth_scopes'
      pk:
        id: "2"
      fields:
        scope: 'read_write'
        is_default: false
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
  clients: |-
    - table: 'oauth_clients'
      pk:
        id: "1"
      fields:
        name: 'test_client_1'
        secret: '$2a$10$CUoGytf1pR7CC6Y043gt/.vFJUV4IRqvH5R6F0VfITP8s2TqrQ.4e'
        redirect_uri: 'https://www.example.com'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'

    - table: 'oauth_clients'
      pk:
        id: "2"
      fields:
        name: 'test_client_2'
        secret: '$2a$10$CUoGytf1pR7CC6Y043gt/.vFJUV4IRqvH5R6F0VfITP8s2TqrQ.4e'
        redirect_uri: 'https://www.example.com'
        created_at: 'ON_INSERT_NOW()'
        updated_at: 'ON_UPDATE_NOW()'
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-database-cm
  namespace: aitrain-system
data:
  database-init: |-
    CREATE DATABASE twgc;
    CREATE USER 'twgc'@'localhost' IDENTIFIED BY 'twgc@NCHC';
    CREATE USER 'twgc'@'%' IDENTIFIED BY 'twgc@NCHC';
    GRANT ALL ON twgc.* TO 'twgc'@'localhost';
    GRANT ALL ON twgc.* TO 'twgc'@'%';
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-api-cm
  namespace: aitrain-system
data:
  api-conf: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "aitrain",
        "uidRange": "0/100000",
        "provider": {
          "type": "go-oauth",
          "name": "test-provider",
          "client_id": "test_client_1",
          "client_secret": "test_secret",
          "url": "http://oauth-server-svc.aitrain-system:8080",
          "redirect_url": "https://v2022-07-aitrain-ui.127-0-0-1.nip.io/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.aitrain-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://v2022-07-aitrain-nodeport.127-0-0-1.nip.io",
        "storageclass": "standard"
      },
      "rfstack": {
        "enable": false,
        "url": "http://rfstack-svc.aitrain-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.aitrain-system",
        "port": 6379
      }
    }
  api-conf-google: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "aitrain",
        "uidRange": "0/100000",
        "provider": {
          "type": "google-oauth",
          "name": "google-provider",
          "client_id": "294126750314-kilf7lm39n919kj1gss11nj1pph58iu2.apps.googleusercontent.com",
          "client_secret": "mMw1-3oTIUyrGxyPPuDDoNOF",
          "url": "http://oauth-server-svc.aitrain-system:8080",
          "redirect_url": "https://v2022-07-aitrain-ui.127-0-0-1.nip.io/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.aitrain-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://v2022-07-aitrain-nodeport.127-0-0-1.nip.io",
        "storageclass": "standard"
      },
      "rfstack": {
        "enable": false,
        "url": "http://rfstack-svc.aitrain-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.aitrain-system",
        "port": 6379
      }
    }
  api-conf-github: |-
    {
      "api-server": {
        "isOutsideCluster": false,
        "port": 38080,
        "enableSecureAPI": true,
        "namespacePrefix": "aitrain",
        "uidRange": "0/100000",
        "provider": {
          "type": "github-oauth",
          "name": "github-provider",
          "client_id": "8c7e2529d37a0855c8bc",
          "client_secret": "4dbe46e60428ac3b6918379ef2023082261c831d",
          "url": "http://oauth-server-svc.aitrain-system:8080",
          "redirect_url": "https://v2022-07-aitrain-ui.127-0-0-1.nip.io/user/classroom-manage"
        }
      },
      "database": {
        "host": "twgc-database-svc.aitrain-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "kubernetes": {
        "kubeconfig": "/etc/api-server/openstack-kubeconfig",
        "nodeportDNS": "http://v2022-07-aitrain-nodeport.127-0-0-1.nip.io",
        "storageclass": "standard"
      },
      "rfstack": {
        "enable": false,
        "url": "http://rfstack-svc.aitrain-system:8088"
      },
      "redis": {
        "host": "twgc-redis-svc.aitrain-system",
        "port": 6379
      }
    }
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: course-operator-cm
  namespace: aitrain-system
data:
  course-operator-conf: |-
    {
      "isOutsideCluster": false,
      "ingressBaseUrl": "127-0-0-1.nip.io",
      "ingressClass": "nginx",
      "database": {
        "host": "twgc-database-svc.aitrain-system",
        "port": 3306,
        "username": "twgc",
        "password": "twgc@NCHC",
        "database": "twgc"
      },
      "redis": {
        "host": "twgc-redis-svc.aitrain-system",
        "port": 6379
      }
    }
---
# Source: aitrain/templates/07_ui/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-ui-cm
  namespace: aitrain-system
data:
  endpoint-conf: |-
    export const WEBSITE_URL = 'https://v2022-07-aitrain-ui.127-0-0-1.nip.io';
    export const API_URL = '/api';
    export const API_VERSION = 'beta';
    export const API_VM_URL = ''
    export const API_VM_VERSION = 'v1';
    export const API_MOCK_URL = 'http://localhost:3000'
    export const AUTH_PROVIDER_URL = 'https://v2022-07-aitrain-oauth.127-0-0-1.nip.io';
    export const RETURN_ROUTE = '/user/classroom-manage';
    export const JOB_INTERVAL = 10000;
    export const pdfLink = 'https://drive.google.com/file/d/1MvfNxfLkBr4yvbxsJhh-D6PeaFsovNPl/view'
    export const APPLY_ADMIN_LINK = 'https://docs.google.com/forms/d/e/1FAIpQLSccwgqH5a0sA9-UriWS5atlmQ8X4uzdbYl57eLF8S-NbodHHg/viewform'
    export const ENABLE_RFSTACK = false
    export const OAUTH_PROVIDER = 'go-oauth'
---
# Source: aitrain/templates/07_ui/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-nginx-cm
  namespace: aitrain-system
data:
  nginx-conf: |-
    server {
        listen       3010;
        server_name  localhost;

        # avoid proxy_pass DNS cache
        # https://www.jianshu.com/p/b2df15133d12
        resolver     10.96.0.10;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;

            # fix Single Page Application cannot found when proxy
            # https://stackoverflow.com/questions/32593739/nginx-config-for-single-page-app-with-html5-app-cache
            try_files $uri /index.html =404;
        }

        # proxy /api/beta/* apis to api-server server
        set $ctr_proxy_pass_url http://twgc-api-svc.aitrain-system.svc.cluster.local:38080;
        location /api {
            proxy_pass $ctr_proxy_pass_url;
        }

        # proxy /v1/* apis to rfstack server
        set $vm_proxy_pass_url  http://rfstack-svc.aitrain-system.svc.cluster.local:8088;
        location /v1 {
            proxy_pass $vm_proxy_pass_url;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
---
# Source: aitrain/templates/08_admin-signup-ui/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-signup-ui-cm
  namespace: aitrain-system
data:
  endpoint-conf: |-
    export const API_URL = '/api';
    export const API_VERSION = 'beta';
---
# Source: aitrain/templates/08_admin-signup-ui/install.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: twgc-signup-nginx-cm
  namespace: aitrain-system
data:
  nginx-conf: |-
    server {
        listen       3010;
        server_name  localhost;

        # avoid proxy_pass DNS cache
        # https://www.jianshu.com/p/b2df15133d12
        resolver     10.96.0.10;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;

            # fix Single Page Application cannot found when proxy
            # https://stackoverflow.com/questions/32593739/nginx-config-for-single-page-app-with-html5-app-cache
            try_files $uri /index.html =404;
        }

        # proxy /api/beta/* apis to api-server server
        set $ctr_proxy_pass_url http://twgc-api-svc.aitrain-system.svc.cluster.local:38080;
        location /api {
            proxy_pass $ctr_proxy_pass_url;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: oauth-mysql-pvc
  namespace: aitrain-system
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: aitrain-system
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
# Course CRD
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: courses.nchc.ai
spec:
  group: nchc.ai
  names:
    kind: Course
    plural: courses
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                image:
                  type: string
                accessType:
                  type: string
                  enum:
                    - "Ingress"
                    - "NodePort"
                  default: "Ingress"
                gpu:
                  type: integer
                  minimum: 0
                  maximum: 8
                  default: 0
                schedule:
                  type: array
                  items:
                    type: string
                dataset:
                  type: array
                  items:
                    type: string
                port:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                writableVolume:
                  type: object
                  properties:
                    owner:
                      type: string
                    storageclass:
                      type: string
                    mountPoint:
                      type: string
                    uid:
                      type: integer
              required:
                - image
                - schedule
                - accessType
                - port
            status:
              type: object
              properties:
                service:
                  type: string
                accessible:
                  type: boolean
                subPath:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                nodePort:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true                     
      subresources:
        status: {}                
      additionalPrinterColumns:
        - name: AccessType
          type: string
          description: The cron spec defining the interval a CronJob is run
          jsonPath: .spec.accessType
        - name: Gpu
          type: integer
          description: The number of jobs launched by the CronJob
          jsonPath: .spec.gpu
        - name: owner
          type: string
          description: The number of jobs launched by the CronJob
          jsonPath: .spec.writableVolume.owner
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
---
# Source: aitrain/templates/04_api/install.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aitrain-system-course-namespace-clusterrole
rules:
- apiGroups: ["nchc.ai"]
  resources: ["courses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["namespaces", "persistentvolumes", "persistentvolumeclaims","nodes"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["create"]
- apiGroups: ["security.openshift.io"]
  resourceNames: ["anyuid", "hostmount-anyuid"]
  resources: ["securitycontextconstraints"]
  verbs: ["use"]
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
# ClusterRole
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: aitrain-system-course-operator-clusterrole
rules:
- apiGroups: ["nchc.ai"]
  resources: ["courses", "courses/finalizers","courses/status"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "deployments/finalizers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]  
- apiGroups: [""]
  resources: ["events", "services", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["route.openshift.io"]
  resources: ["routes", "routes/custom-host"]
  verbs:  ["create", "patch"]
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aitrain-system-twgc-api-rolebinding-2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aitrain-system-course-namespace-clusterrole
subjects:
- kind: ServiceAccount
  namespace: aitrain-system
  name: twgc-api-server
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aitrain-system-twgc-api-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  namespace: aitrain-system
  name: twgc-api-server
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aitrain-system-course-operator-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aitrain-system-course-operator-clusterrole
subjects:
- kind: ServiceAccount
  name: course-operator-sa
  namespace: aitrain-system
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: oauth-database-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 3306
  selector:
    tier: oauth-mysql
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: oauth-server-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 8080
  selector:
    tier: oauth-server
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-database-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 3306
  selector:
    tier: mysql
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-api-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 38080
  selector:
    tier: api-server
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-redis-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 6379
  selector:
    tier: redis
---
# Source: aitrain/templates/07_ui/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-ui
  namespace: aitrain-system
spec:
  ports:
    - port: 3010
  selector:
    tier: twgc-ui
---
# Source: aitrain/templates/08_admin-signup-ui/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-signup-ui-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 3010
  selector:
    tier: twgc-signup-ui
---
# Source: aitrain/templates/09_static-site/install.yaml
apiVersion: v1
kind: Service
metadata:
  name: twgc-static-ui-svc
  namespace: aitrain-system
spec:
  ports:
    - port: 80
  selector:
    tier: twgc-static-ui
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth-database
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: oauth-mysql
  replicas: 1
  template:
    metadata:
      name: oauth-mysql-pod
      labels:
        tier: oauth-mysql
    spec:
      containers:
      - name: oauth-database
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/mysql:v2022.07"
        ports:
          - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: N4MKJYpL
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: oauth-database-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: oauth-mysql-pvc
      - name: oauth-database-init
        configMap:
          name: oauth-database-cm
          items:
          - key: database-init
            path: init.sql
      imagePullSecrets:
        - name: regcred
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth-server
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: oauth-server
  replicas: 1
  template:
    metadata:
      name: oauth-server
      labels:
        tier: oauth-server
    spec:
      containers:
      - name: oauth-server
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/oauth-server:v2022.07"
        args: ["runserver"]
        env:
        - name: CONFIG_PATH
          value: /etc/go_oauth2_server/go_oauth2_server.json
        readinessProbe:
          httpGet:
            path: /v1/health
            port: 8080
        livenessProbe:
          httpGet:
            path: /v1/health
            port: 8080 
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: oauth-server-conf
          mountPath: /etc/go_oauth2_server/
      volumes:
      - name: oauth-server-conf
        configMap:
          name: oauth-server-cm
          items:
          - key: conf
            path: go_oauth2_server.json
          - key: roles
            path: roles.yml
          - key: scopes
            path: scopes.yml
          - key: clients
            path: clients.yml
      imagePullSecrets:
      - name: regcred
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-database
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: mysql
  replicas: 1
  template:
    metadata:
      name: mysql-pod
      labels:
        tier: mysql
    spec:
      containers:
      - name: twgc-database
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/mysql:v2022.07"
        ports:
          - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: 83Y9faiS
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: twgc-database-init
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: twgc-database-init
        configMap:
          name: twgc-database-cm
          items:
          - key: database-init
            path: init.sql
      imagePullSecrets:
        - name: regcred
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-api
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: api-server
  replicas: 1
  template:
    metadata:
      name: api-server
      labels:
        tier: api-server
    spec:
      serviceAccountName: twgc-api-server
      initContainers:
        - name: wait-for-mysql
          image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/mysql:v2022.07"
          command:
            - sh
            - -ec
            - |
              until mysql -h twgc-database-svc -u twgc -ptwgc@NCHC  --execute "use twgc;"  > /dev/null 2>&1; do
                  if [ $? -ne 0 ]; then
                      echo "wait for DB ready"
                      sleep 5
                  fi
              done
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi      
      containers:
      - name: twgc-api
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/api:v2022.07"
        imagePullPolicy: Always
        command: ['sh', '-c']
        args:
        - ln -s /etc/ssl/certs/nchc/chain.cert /etc/ssl/certs/chain.cert;
          /app --logtostderr=true --conf=/etc/api-server/api-config.json
        ports:
        - containerPort: 38080
        volumeMounts:
        - name: twgc-api-conf
          mountPath: /etc/api-server/
        - name: nchc-cert
          mountPath: /etc/ssl/certs/nchc
      volumes:
      - name: twgc-api-conf
        configMap:
          name: twgc-api-cm
          items:
          - key: api-conf
            path: api-config.json
          - key: api-conf-google
            path: api-config-google.json
          - key: api-conf-github
            path: api-config-github.json
      - name: nchc-cert
        secret:
          secretName: nchc-tls-secret
          items:
          - key: tls.crt
            path: chain.cert
      imagePullSecrets:
      - name: regcred
---
# Source: aitrain/templates/04_api/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-redis-cache
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: redis
  replicas: 1
  template:
    metadata:
      name: redis-pod
      labels:
        tier: redis
    spec:
      containers:
      - name: twgc-redis-cache
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/rejson:v2022.07"
        ports:
          - containerPort: 6379
      imagePullSecrets:
        - name: regcred
---
# Source: aitrain/templates/06_course-crd-controller/install.yaml
# operator deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: course-operator
  namespace: aitrain-system
spec:
  replicas: 1
  selector:
    matchLabels:
      operator: course
  template:
    metadata:
      labels:
        operator: course
    spec:
      serviceAccountName: course-operator-sa
      initContainers:
        - name: wait-for-mysql
          image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/mysql:v2022.07"
          command:
            - sh
            - -ec
            - |
              until mysql -h twgc-database-svc -u twgc -ptwgc@NCHC  --execute "use twgc;"  > /dev/null 2>&1; do
                  if [ $? -ne 0 ]; then
                      echo "wait for DB ready"
                      sleep 5
                  fi
              done
          resources:
            requests:
              cpu: 25m
              memory: 32Mi
            limits:
              cpu: 50m
              memory: 64Mi         
      containers:
      - name: course-operator
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/course-operator:issue-24-25"
        imagePullPolicy: Always
        volumeMounts:
        - name: course-operator-conf
          mountPath: /etc/course-operator
      volumes:
      - name: course-operator-conf
        configMap:
          name: course-operator-cm
          items:
          - key: course-operator-conf
            path: config.json
      imagePullSecrets:
      - name: regcred
---
# Source: aitrain/templates/07_ui/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-ui
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: twgc-ui
  replicas: 1
  template:
    metadata:
      name: twgc-ui
      labels:
        tier: twgc-ui
    spec:
      containers:
        # use nginx to serve built page
        - name: twgc-nginx
          image: nginx:1.15-alpine
          ports:
            - containerPort: 3010
          volumeMounts:
            - name: twgc-nginx-conf
              mountPath: /etc/nginx/conf.d
            - name: dist
              mountPath: /usr/share/nginx/html
      initContainers:
        # some configuration is stored in configMap, we need a initContainer to build before serve
        - name: twgc-ui
          image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/ui:v2022.07"
          command: ["sh", "-c", "yarn build"]
          volumeMounts:
            - name: twgc-ui-conf
              mountPath: /src/gitlab.com/nchc-ai/aitrain-ui/app/config/
            - name: dist
              mountPath: /tmp/dist
      volumes:
        - name: twgc-ui-conf
          configMap:
            name: twgc-ui-cm
            items:
              - key: endpoint-conf
                path: api.js
        - name: twgc-nginx-conf
          configMap:
            name: twgc-nginx-cm
            items:
              - key: nginx-conf
                path: default.conf
        - name: dist
          emptyDir: {}
      imagePullSecrets:
        - name: regcred
---
# Source: aitrain/templates/08_admin-signup-ui/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-signup-ui
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: twgc-signup-ui
  replicas: 1
  template:
    metadata:
      name: twgc-signup-ui
      labels:
        tier: twgc-signup-ui
    spec:
      containers:
      # use nginx to serve built page
      - name: twgc-nginx
        image: nginx:1.15-alpine
        ports:
        - containerPort: 3010
        volumeMounts:
        - name: twgc-nginx-conf
          mountPath: /etc/nginx/conf.d
        - name: dist
          mountPath: /usr/share/nginx/html
      initContainers:
      # some configuration is stored in configMap, we need a initContainer to build before serve
      - name: twgc-signup-ui
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/ui-signup:v2022.07"
        command: ["sh", "-c","yarn build"]
        volumeMounts:
        - name: twgc-ui-conf
          mountPath: /src/gitlab.com/nchc-ai/aitrain-ui-signup/app/config/
        - name: dist
          mountPath: /tmp/dist
      volumes:
      - name: twgc-ui-conf
        configMap:
          name: twgc-signup-ui-cm
          items:
          - key: endpoint-conf
            path: api.js
      - name: twgc-nginx-conf
        configMap:
          name: twgc-signup-nginx-cm
          items:
          - key: nginx-conf
            path:  default.conf
      - name: dist
        emptyDir: {}
      imagePullSecrets:
      - name: regcred
---
# Source: aitrain/templates/09_static-site/install.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: twgc-static-ui
  namespace: aitrain-system
spec:
  selector:
    matchLabels:
      tier: twgc-static-ui
  replicas: 1
  template:
    metadata:
      name: twgc-static-ui
      labels:
        tier: twgc-static-ui
    spec:
      containers:
      - name: twgc-nginx
        image: "registry.gitlab.com/nchc-ai/aitrain-deploy/twgc/static-site:v2022.07"
        ports:
        - containerPort: 80
      imagePullSecrets:
      - name: regcred
---
# Source: aitrain/templates/03_oauth-server/install.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oauth-ingress
  namespace: aitrain-system
  annotations:
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: v2022-07-aitrain-oauth.127-0-0-1.nip.io
    http:
      paths:
      - pathType: ImplementationSpecific
        backend:
          service:
            name: oauth-server-svc
            port: 
              number: 8080
  tls:
  - secretName: nchc-tls-secret
    hosts: 
    - v2022-07-aitrain-oauth.127-0-0-1.nip.io
---
# Source: aitrain/templates/07_ui/install.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aitrain-ingress
  namespace: aitrain-system
  annotations:
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
    - host: v2022-07-aitrain-ui.127-0-0-1.nip.io
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: twgc-ui
                port: 
                  number: 3010
  tls:
    - secretName: nchc-tls-secret
      hosts:
        - v2022-07-aitrain-ui.127-0-0-1.nip.io
---
# Source: aitrain/templates/08_admin-signup-ui/install.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: twgc-signup-ui-ingress
  namespace: aitrain-system
  annotations:
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
    - host: v2022-07-aitrain-admin.127-0-0-1.nip.io
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: twgc-signup-ui-svc
                port: 
                  number: 3010
  tls:
    - secretName: nchc-tls-secret
      hosts:
        - v2022-07-aitrain-admin.127-0-0-1.nip.io
---
# Source: aitrain/templates/09_static-site/install.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aitrain-static-ingress
  namespace: aitrain-system
  annotations:
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
    - host: v2022-07-aitrain-static.127-0-0-1.nip.io
      http:
        paths:
        - pathType: ImplementationSpecific
          backend:
            service:
              name: twgc-static-ui-svc
              port: 
                number: 80
  tls:
    - secretName: nchc-tls-secret
      hosts:
        - v2022-07-aitrain-static.127-0-0-1.nip.io
