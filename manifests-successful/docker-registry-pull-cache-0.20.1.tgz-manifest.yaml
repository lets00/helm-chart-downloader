---
# Source: docker-registry-pull-cache/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-docker-registry-pull-cache-registry
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: docker-registry-pull-cache
    app.kubernetes.io/version: 2.8.1
    helm.sh/chart: docker-registry-pull-cache-0.20.1
  annotations:
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "50Gi"
---
# Source: docker-registry-pull-cache/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-docker-registry-pull-cache
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: docker-registry-pull-cache
    app.kubernetes.io/version: 2.8.1
    helm.sh/chart: docker-registry-pull-cache-0.20.1
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: docker-registry-pull-cache
    role: primary
---
# Source: docker-registry-pull-cache/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-docker-registry-pull-cache
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: docker-registry-pull-cache
    app.kubernetes.io/version: 2.8.1
    helm.sh/chart: docker-registry-pull-cache-0.20.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: docker-registry-pull-cache
      role: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/name: docker-registry-pull-cache
        role: primary
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        []
      containers:
        - name: my-release-docker-registry-pull-cache
          image: "registry:2.8.1"
          imagePullPolicy: IfNotPresent
          
          env:
            - name: REGISTRY_PROXY_REMOTEURL
              value: https://registry-1.docker.io
            - name: REGISTRY_STORAGE_DELETE_ENABLED
              value: "true"
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - name: registry
              mountPath: /var/lib/registry
          livenessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
      volumes:
        - name: registry
          persistentVolumeClaim:
            claimName: my-release-docker-registry-pull-cache-registry
