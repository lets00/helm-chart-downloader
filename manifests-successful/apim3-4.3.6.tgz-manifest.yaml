---
# Source: apim3/templates/common/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apim3
  annotations:
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.3.6
    app.kubernetes.io/component: "apim"
    app.kubernetes.io/managed-by: Helm
---
# Source: apim3/templates/api/api-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
data:
  gravitee.yml: |

    management:
      type: mongodb
      mongodb:
        sslEnabled: false
        socketKeepAlive: false
        uri: mongodb://graviteeio-apim-mongodb-replicaset-headless:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000

    # Secret Manager configuration

    installation:
      type: standalone
      api:
        url: https://apim.example.com
        proxyPath:
          management: /management
          portal: /portal
      standalone:
        console:
          url: https://apim.example.com/console
        portal:
          url: https://apim.example.com
      

    console:
    services:
      core:
        http:
          enabled: true
          port: 18083
          host: localhost
          authentication:
            type: basic
            users:
              admin: adminadmin
      metrics:
        enabled: false
        prometheus:
          enabled: true
    httpClient:
      timeout: 10000
    http:
      api:
        entrypoint: /
        management:
          entrypoint: ${http.api.entrypoint}management
        portal:
          entrypoint: ${http.api.entrypoint}portal

    analytics:
      type: elasticsearch
      elasticsearch:
        endpoints:
          - http://graviteeio-apim-elasticsearch-ingest-hl:9200
        index_mode: daily
        index: gravitee
    security:
      trustAll: false
      providers:
        - type: gravitee
        - type: memory
          # password encoding/hashing algorithm. One of:
          # - bcrypt : passwords are hashed with bcrypt
          # - none : passwords are not hashed/encrypted
          # default value is bcrypt
          password-encoding-algo: bcrypt
          allow-email-in-search-results: false
          users:
            - user:
              username: admin
              password: $2a$10$Ihk05VSds5rUSgMdsMVi9OKMIx2yUvMz7y9VP3rJmQeizZLrhLMyq
              roles: ORGANIZATION:ADMIN, ENVIRONMENT:ADMIN
              email: 
              firstName: 
              lastName: 
            - user:
              username: user
              # Password value: password
              password: $2a$10$9kjw/SH9gucCId3Lnt6EmuFreUAcXSZgpvAYuW2ISv7hSOhHRH1AO
              roles: ORGANIZATION:USER, ENVIRONMENT:USER
              # Useful to receive notifications
              #email:
              #firstName:
              #lastName:
            - user:
              username: api1
              # Password value: api1
              password: $2a$10$iXdXO4wAYdhx2LOwijsp7.PsoAZQ05zEdHxbriIYCbtyo.y32LTji
              # You can declare multiple roles using comma separator
              roles: ORGANIZATION:USER, ENVIRONMENT:API_PUBLISHER
              #email:
              #firstName:
              #lastName:
            - user:
              username: application1
              # Password value: application1
              password: $2a$10$2gtKPYRB9zaVaPcn5RBx/.3T.7SeZoDGs9GKqbo9G64fKyXFR1He.
              roles: ORGANIZATION:USER, ENVIRONMENT:USER
              #email:
              #firstName:
              #lastName:
            
    # SMTP configuration used to send mails
    email:
      enabled: true
    
    # SMTP configuration used to send notifications / alerts
    notifiers:
      email:
        enabled: true
        host: ${email.host}
        subject: "${email.subject}"
        port: ${email.port}
        from: ${email.from}
        username: ${email.username}
        password: ${email.password}
        starttls.enabled: false

    # Mail templates
    templates:
      path: ${gravitee.home}/templates

    jwt:
      secret: myJWT4Gr4v1t33_S3cr3t

    swagger:
      # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
      scheme: https

    user:
      login:
        # Create a default application when user connects to the portal for the very first time (default true)
        defaultApplication: true

      creation:
        # Allows to register new users from portal (default false)
        #enabled: true
        token:
          #expire-after: 86400
        anonymize-on-delete:
          enabled: false
    # The portal URL used in emails
    portalURL: https://apim.example.com

    # Allows to create support ticket (default value: false)
    support:
      enabled: true

    # Allows to rate an API (default value: false)
    rating :
      enabled: true

    # Set the Subscribe to newsletter feature (default value: true)
    newsletter :
      enabled: true
    
    gateway:
      unknown-expire-after: 604800

    # Alert Engine communication
    
    alerts:
      alert-engine-connector-ws:
        enabled: false
    # APIs specific configuration
    # External Authentication
---
# Source: apim3/templates/gateway/gateway-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
data:
  gravitee.yml: |
    # Gateway HTTP server
    http:
      port: 8082
      host: 0.0.0.0
    #  idleTimeout: 0
    #  tcpKeepAlive: true
    #  compressionSupported: false
    #  instances: 0
      requestTimeout: 30000
      requestTimeoutGraceDelay: 30
      maxHeaderSize: 8192
      maxChunkSize: 8192
      maxInitialLineLength: 4096
      maxFormAttributeSize: 2048
      alpn: true
      websocket:
        enabled: false
    management:
      type: mongodb
      mongodb:
        sslEnabled: false
        socketKeepAlive: false
        uri: mongodb://graviteeio-apim-mongodb-replicaset-headless:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000
    
    ratelimit:
      type: mongodb
      mongodb:
        sslEnabled: false
        socketKeepAlive: false
        uri: mongodb://graviteeio-apim-mongodb-replicaset-headless:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000

    # Sharding tags configuration
    # Allows to define inclusion/exclusion sharding tags to only deploy a part of APIs. To exclude just prefix the tag with '!'.
    tags:   

    # Multi-tenant configuration
    # Allow only a single-value
    tenant: 
    
    # Reporters configuration (used to store reporting monitoring data, request metrics, healthchecks and others...
    # All reporters are enabled by default. To stop one of them, you have to add the property 'enabled: false'
    reporters:
      # Elasticsearch reporter
      elasticsearch:
        enabled: true
        endpoints:
          - http://graviteeio-apim-elasticsearch-ingest-hl:9200
        index_mode: daily
        pipeline:
          plugins:
            ingest: geoip, user_agent
        index: gravitee
        settings:
          number_of_replicas: 1
          number_of_shards: 1
          refresh_interval: 5s
        bulk:
          actions: 1000           # Number of requests action before flush
          flush_interval: 5       # Flush interval in seconds

    services:
      core:
        http:
          enabled: true
          port: 18082
          host: 0.0.0.0
          authentication:
            type: basic
            users:
              admin: adminadmin
          secured: false

      sync: 
        cron: '*/5 * * * * *'

      # Service used to store and cache api-keys from the management repository to avoid direct repository communication
      # while serving requests.
      apikeyscache:
        delay: 10000
        unit: MILLISECONDS
        threads: 3 # Threads core size used to retrieve api-keys from repository.

      # Local registry service.
      # This registry is used to load API Definition with json format from the file system. By doing so, you do not need
      # to configure your API using the web console or the rest API (but you need to know and understand the json descriptor
      # format to make it work....)
      local:
        enabled: false
        path: ${gravitee.home}/apis # The path to API descriptors

      # Gateway monitoring service.
      # This service retrieves metrics like os / process / jvm metrics and send them to an underlying reporting service.
      monitoring:
        delay: 5000
        unit: MILLISECONDS

      # Endpoint healthcheck service.
      healthcheck:
        threads: 3 # Threads core size used to check endpoint availability
      metrics:
        enabled: false
        prometheus:
          enabled: true
    policy:
      api-key:
        header: X-Gravitee-Api-Key
        param: api-key
    
    # Alert Engine communication
    alerts:
      alert-engine-connector-ws:
        enabled: false

    # APIs specific configuration
    api:

    gracefulShutdown:
      delay: 0
      unit: MILLISECONDS

    # Secret Manager configuration

    # Old class loader behavior, false by default
    classloader:
      legacy:
        enabled: false
---
# Source: apim3/templates/portal/portal-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: "*"
  config.json: |
    {
      "baseURL": "https://apim.example.com/portal",
      "loaderURL": "assets/images/gravitee-loader.gif",
      "pagination": {
        "size": {
          "default": 10,
          "values": [5, 10, 25, 50, 100]
        }
      }
    }
---
# Source: apim3/templates/ui/ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: "*"
  constants.json: |
    {
      "baseURL": "https://apim.example.com/management",
      "management": {
        "title": "API Management"
      },
      "company": {
        "name": "Gravitee.io"
      },
      "documentation": {
        "url": "https://documentation.gravitee.io/"
      },
      "portal": {
        "entrypoint": "https://apim.example.com/",
        "title": "Management UI",
        "analytics": {"enabled":false,"trackingId":""},
        "apikeyHeader": "X-Gravitee-Api-Key",
        "rating": {"enabled":false},
        "support": {"enabled":true},
        "userCreation": {"enabled":false}
      },
      "theme": {"loader":"assets/gravitee_logo_anim.gif","logo":"themes/assets/GRAVITEE_LOGO1-01.png","name":"default"},
      "scheduler": {"tasks":10}
    }
---
# Source: apim3/templates/common/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-apim3-role
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.3.6
    app.kubernetes.io/component: "apim"
    app.kubernetes.io/managed-by: Helm
rules: 
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    verbs:
    - get
    - list
    - watch
---
# Source: apim3/templates/common/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-apim3-role-binding
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.3.6
    app.kubernetes.io/component: "apim"
    app.kubernetes.io/managed-by: Helm
  annotations:
roleRef:
  kind: Role
  name: my-release-apim3-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: my-release-apim3
  namespace: "apim3-4.3.6.tgz"
---
# Source: apim3/templates/api/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 83
      targetPort: 8083
      protocol: TCP
      
      
      appProtocol: http
      
      
      name: api
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "api"
---
# Source: apim3/templates/gateway/gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 82
      targetPort: 8082
      protocol: TCP
      
      appProtocol: http
      
      name: gateway
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "gateway"
---
# Source: apim3/templates/portal/portal-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8003
      targetPort: 8080
      protocol: TCP
      
      appProtocol: http
      
      name: portal
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "portal"
---
# Source: apim3/templates/ui/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 8002
      targetPort: 8080
      protocol: TCP
      
      appProtocol: http
      
      name: ui
  selector:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "ui"
---
# Source: apim3/templates/api/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "api"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 5b456a29acd628012e2172e7874a8c429ef44dbdbf439193f61081cddd01f087
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.3.6"
        app.kubernetes.io/component: "api"
    spec:
      securityContext: 
        null
      serviceAccountName: my-release-apim3
      affinity: 
        {}
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      initContainers:        
      containers:
        - name: my-release-apim3-api
          image: "graviteeio/apim-management-api:4.3.6"
          imagePullPolicy: Always
          securityContext: 
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8083
            - name: api-techapi
              containerPort: 18083
          env:
            - name: portal.entrypoint
              value: "https://apim.example.com/"
          envFrom: 
            []
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            tcpSocket:
              port: http

          resources: 
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-management-api/config/gravitee.yml
              subPath: gravitee.yml            
      volumes:
        - name: config
          configMap:
            name: my-release-apim3-api
---
# Source: apim3/templates/gateway/gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "gateway"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: bd91a6e3d8815d9fbafca372e72d29e51c2848092d31efa70b37472926d7094d
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.3.6"
        app.kubernetes.io/component: "gateway"
    spec:
      securityContext: 
        null
      serviceAccountName: my-release-apim3
      affinity: 
        {}
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      initContainers:        
      containers:
        - name: my-release-apim3-gateway
          image: "graviteeio/apim-gateway:4.3.6"
          imagePullPolicy: Always
          securityContext: 
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8082
            - name: gateway-techapi
              containerPort: 18082
          env:
          envFrom: 
            []
          livenessProbe:
            periodSeconds: 15
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /_node/health?probes=http-server
              scheme: HTTP
              port: 18082
              httpHeaders:
                - name: Authorization
                  value: Basic YWRtaW46YWRtaW5hZG1pbg==
          readinessProbe:
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 2
            httpGet:
              path: /_node/health?probes=sync-process
              scheme: HTTP
              port: 18082
              httpHeaders:
                - name: Authorization
                  value: Basic YWRtaW46YWRtaW5hZG1pbg==
          startupProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 29
            httpGet:
              path: /_node/health?probes=http-server
              scheme: HTTP
              port: 18082
              httpHeaders:
                - name: Authorization
                  value: Basic YWRtaW46YWRtaW5hZG1pbg==
          resources: 
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /opt/graviteeio-gateway/config/gravitee.yml
              subPath: gravitee.yml            
      volumes:
        - name: config
          configMap:
            name: my-release-apim3-gateway
---
# Source: apim3/templates/portal/portal-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "portal"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 62fdd5278d557b27de09337638e9cdaa7bbca5b7d467389b17a5aff65fdb4973
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.3.6"
        app.kubernetes.io/component: "portal"
    spec:
      securityContext: 
        null
      affinity: 
        {}
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: my-release-apim3-portal
          image: "graviteeio/apim-portal-ui:4.3.6"
          imagePullPolicy: Always
          securityContext: 
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          env:
            - name: PORTAL_API_URL
              value: "https://apim.example.com/portal/"
            - name: PORTAL_BASE_HREF
              value: /
          envFrom: 
            []
          ports:
            - name: http
              containerPort: 8080
          lifecycle:
            preStop:
              exec:
                command: ['sh','-c', 'sleep 5 && /usr/sbin/nginx -s quit']
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources: 
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /usr/share/nginx/html/assets/config.json
              subPath: config.json
      volumes:
        - name: config
          configMap:
            name: my-release-apim3-portal
---
# Source: apim3/templates/ui/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: apim3
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "ui"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 35e33f7f009af0d40d89fe1ea562e4d6b53d29688307f88ff8ad49b321264105
      labels:
        app.kubernetes.io/name: apim3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.3.6"
        app.kubernetes.io/component: "ui"
    spec:
      securityContext: 
        null
      affinity: 
        {}
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: my-release-apim3-ui
          image: "graviteeio/apim-management-ui:4.3.6"
          imagePullPolicy: Always
          securityContext: 
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          env:
            - name: MGMT_API_URL
              value: "https://apim.example.com/management/"
            - name: CONSOLE_BASE_HREF
              value: /console/
          envFrom: 
            []
          ports:
            - name: http
              containerPort: 8080
          lifecycle:
            preStop:
              exec:
                command: ['sh','-c', 'sleep 5 && /usr/sbin/nginx -s quit']
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources: 
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /usr/share/nginx/html/constants.json
              subPath: constants.json
      volumes:
        - name: config
          configMap:
            name: my-release-apim3-ui
---
# Source: apim3/templates/api/api-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-apim3-api
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-apim3-api
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: apim3/templates/gateway/gateway-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-apim3-gateway
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: apim3/templates/portal/portal-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-apim3-portal
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: apim3/templates/ui/ui-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-apim3-ui
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: apim3/templates/api/api-ingress-management.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-apim3-api-management
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_pass_header if-match;\n"
spec:
  rules:
  - host: "apim.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /management
        backend:
          service:
            name: my-release-apim3-api
            port:
              number: 83
---
# Source: apim3/templates/api/api-ingress-portal.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-apim3-api-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
spec:
  rules:
  - host: "apim.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /portal
        backend:
          service:
            name: my-release-apim3-api
            port:
              number: 83
---
# Source: apim3/templates/gateway/gateway-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-apim3-gateway
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "gateway"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: "apim.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: my-release-apim3-gateway
            port:
              number: 82
---
# Source: apim3/templates/portal/portal-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-apim3-portal
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "portal"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\n"
    nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
  - host: "apim.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: my-release-apim3-portal
            port:
              number: 8003
---
# Source: apim3/templates/ui/ui-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-apim3-ui
  labels:
    app.kubernetes.io/name: apim3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.6"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: apim3-4.3.6
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\n"
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  rules:
  - host: "apim.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /console(/.*)?
        backend:
          service:
            name: my-release-apim3-ui
            port:
              number: 8002
