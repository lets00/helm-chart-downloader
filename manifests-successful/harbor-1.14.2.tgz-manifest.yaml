---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "WE8wdzdRTUlrRDlvSlJoTA=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBeUJMck5iWm9pNitjN3ZlM2ZuMjVzcUs2Yi9SK2FZVmR5R21PSlhYNnZwKytTTDFLCnA4WVN4Q2krRUlscEpsaWxzYXJUWW1WQ2JneVBCUmZIOHlPbTdndEkrVkRQSUN1VS9XTVQ5NVlRVnlETUR5QU4Kd1N5T2t1bFBiWjRTaHp1SkVTaGNCNHdXZ0Q4Nk9DZlFydm1HWlIxM2dMVHFta0dRLys0YmorcTZxSWYwWURjcgo5NjEybFJVeXVTZW5JSDQxVitRZERZT0UzK1d0TTlURDkwcllJV3hYVHRXWnpDYXVWc2pYYW9GdmZEUWtjVG5PCmx1TG84eCtTaXZmUkFPTHp3b0F2dGpQUWNMODNCLzJBc2JBUjF3V0ZsYjN3Ym9RaEFHa2pWdnd6L1Z0L1ZkT0QKazhUdG83Y2crTmlWUWJqQ1J2S1lEWCsrdDNSbG5DakIvZmRmNndJREFRQUJBb0lCQUVzK1NqVVdGN1ZJNDBVLwo1a05zOXhTR2ZJVTBOd0pxUkwzbGJLOEw4clFVRVpUN2s0TUxTKzEzd1JzcEFtR0lmekFWSlpCZ3NwMytuUjcyCk5aMXNNQkJnTUI2TFZJb3R1Y2VkcGxtN2x3T2Rjd0RSTmpzTERjZVVkT210eEJ3VnVOTzZFUHBKcGdDdlJxN3QKMGw2cnV1NTJLWVkvQStmbGRxbTVtNllCU2hlczkxMkNybElLNlF3OWZnaEtyN3RMNzlxa2VsRStFR1ZiR0dRdgoxSUM4enMwd2UxYmFxZXdnS2d1a3lKWjcxZWs3ajh2bHJBUm5xNUgzeTcwSnZ6WWozb1h3a09YQ21EcnpUTnhKCjU2dVhoYWtzdldGYXkzUUIxam5vb0szUzdjZnZvbVlqcDNwMEZSUDBtN2ZwYmtLWjVKbWFiSTFHOVVvRG1xbzQKS2JwU0Z0RUNnWUVBNlU4UEJJWDNVSTBvMUw5dm9iNE92RW1URTRPeTM3Q05hQVFtQlN1bm9HVzg4b00yKzcycQp6UlRKUzBFd3N2R28ySmVNK0pEa0NjeVFEa1pHeXBkWGFtdWs1VjJYRDNDZ0VlZnI0NDUrQ0IvdU1lQXMrN3ZhCmhkVXU3eFovM2x5VTg1OWRNdDcrNVRMSnNoZldXaEZsOEMwQTdvOWsrRjBxeExid3c5K1N5R01DZ1lFQTI0aGYKM0FlT3RaLzlJTm9xeGNtRUhyZVZvWlRIaE9ZYWRqMVJaMUxSRkdDQ0VqMGRWa1FqOXllbUtGSnhNTkd5dnBqcgplcGEvVU9Ob05NcVV0VnNncHA4Sy8zOFpwS2oyTVVBeWVrWlNOcFFOZ1g0ZTFFaC9XY3hBMWNmUlNvUUZYd1Z6CndQUWpBa0s3R2s0cnhBTUw1Z1NPdjVFOTdZSzcvOVRQUVE1RHJOa0NnWUI5M2FUZ2I5V0lvMTdQeDZkVnZzNzgKVFVVSFZobCtEQ1Y5WkIrTzBvcFFRaEs1VW9pckx4dWlJQUNvbExiTkV3cGdMd0ppWnVoZlVQaTJlcnRlT0Y5MApqalliZDI0emFqTXc5Y21RcmlMWUIwSGRybThXTDdZb1ZXWkluZjdGMjNTUUtmMkJvRVFyS2tjZHlUWmV5TndSCnduV3FQYm5mTTRRTE5CYVgxVm0rdVFLQmdHSU1HSFFXMC8vK1FubG50dTY3UDh6UVJYM3pDdUVxTyt0UEc0cEEKREsxREpSU3NRdXdDWnVXOXlaSDhzQjBUcXZkQktQcUpWVXoxSTlkZ0d1YWNtb3FRUWNNMnF1ZEZweDc4QXc5bApWTmFYYlNqR2dWSmlScTUrY1A2SnpjbXdDUTRWUzB1RVBoYUdZell1YjVHTm9zVEtpRTY2dWFQWVhjcTI2eEd0CkkwQ1JBb0dBRTgxVlUvVVh0WkxJRC90MWZrUU1rKzN2T21EcDdqOUxCMnFwR3VSWHBnSXBFaHBGKzhnNWVTWUcKNDdxV2dCck1yb1dVOWREM3hNclo3cEg0THRLZll0eWxLbWZ6Y3hyRTFCd0JPK1k4OTMvaitWTDN0WHZnWVRHdgpld09hNUZKVzBJREduNXNsckxlMnFHdXNESEpuSmVoWWRHZUN0N0c3b3J2V3BiZDBEUFk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU5zeTNHaVI5Y1FWVXprYmVSUG40ak13RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSTBNRFl5TURFME5UWTFOVm9YRFRJMQpNRFl5TURFME5UWTFOVm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUJMck5iWm9pNitjN3ZlM2ZuMjVzcUs2Yi9SK2FZVmQKeUdtT0pYWDZ2cCsrU0wxS3A4WVN4Q2krRUlscEpsaWxzYXJUWW1WQ2JneVBCUmZIOHlPbTdndEkrVkRQSUN1VQovV01UOTVZUVZ5RE1EeUFOd1N5T2t1bFBiWjRTaHp1SkVTaGNCNHdXZ0Q4Nk9DZlFydm1HWlIxM2dMVHFta0dRCi8rNGJqK3E2cUlmMFlEY3I5NjEybFJVeXVTZW5JSDQxVitRZERZT0UzK1d0TTlURDkwcllJV3hYVHRXWnpDYXUKVnNqWGFvRnZmRFFrY1RuT2x1TG84eCtTaXZmUkFPTHp3b0F2dGpQUWNMODNCLzJBc2JBUjF3V0ZsYjN3Ym9RaApBR2tqVnZ3ei9WdC9WZE9EazhUdG83Y2crTmlWUWJqQ1J2S1lEWCsrdDNSbG5DakIvZmRmNndJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkdubGxPYmZtMU1tSnVSWGNzK0dIamZ5N295eQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNMUHZOek5kbGl2bU9JUTRYRElJTmRNOTEzSnZLcW5RYVdUQkRyCi9xVGI5OUVHT1NEN1BZdmJJbW1ZcnR1ZGtsa2J0dk9UcU1NeU1Ma05KZjRPcG9KOFNJMG5hRTFoUWszcWpFNzIKWnR0N3pKc1QrdVIzSnMvWXBQMkZrYjRtR0krM2lhS2Z3d2pVQU5aS0JQK0tlNHBxa254ejF4ZGVBMzBsUVJOSwpYRDltSkttd0VxZFRiMThEa3h4eGZCSHNCd08xSXpWeHlBT2F0OGMxNUhFM2MrNG1rajJpNVpLNTloaHFSd05wCkYrOEk0bittdUJTWHVoUGxTOXJsNTV5QmU5Y2JZZjVLaENMcDZ3UTFFdkFnMmM3dVJDckVJYVQ3bHFCazdCNmMKdUZTM2FoSmFLcWtqVUtmTm43MTFsNS92cTAwSFRFblZkV1lkREsxM3VEUWs5dDB4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "M3IzbUJxeDZaNUNhZ0Z5TWFIejdleXlxbTFzdWNKR0U="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-ingress"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRTjJsb3hWRE9UQUpLdUJjSnBKNUJ0VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TmpJd01UUTFOalUxV2hjTk1qVXdOakl3TVRRMQpOalUxV2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3BvZ1hHbjM4WU5iVmlxVFlZYkZlWUZVMEsxL3JjSVZRN29odzkKSFBFQ0ZBdEhKNVZvQ2RDWDhjSUozNmFUb3VVM1RVODhwYVJHdnZhbjBnbGRlVEhnL2FYcUlKcDY3T00vaE90Rwo0dGRBR1FhZXFMN25LNzVVRHV4S25FRFJmT0d5dm56bE5lUnM4Q2ZlS2NYblJOVmJZNGhUTmxCdmZETzRmSml4ClBjbVVJcWZaQjZaLzBPSkNhU0pRQ2dsZWVmM1ZJU1pubXJVb2ZlRVdJTEcwSFpMQWtHelQ5SnRyZEUzeFkzR2IKVDJJdUdxeklmNmNVeVpMY2R6dk1GR2V2N0pFZUJHbFAwQjJocWlJTlI1aWdrek1zc0F0UjJ5S0MzbDVpV2g2LwpZWFBBSWt3NStWTUNTd1ZscXRPZzR3U0hkdXpjVndNQ1MySGhYM1VoR1pFSEJwcGZBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWYyT2VtVU5LblhwT0tRME1PVmh1bTdRNUpDekFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSWYyCmJMNVZOVmM4TnJpb0Nld0FTSzVvY01sVlFCODNRVTE1SzJwZ0xWbkRjRVNmZUtVeGRsR0RCYnJub0NBZm9TMVEKbEpOaTJFZlZId1ZEYnJNS1pMc1E4MEwxTldRZC9LbmZaUzB1QkRoNTdZK1N5MnBLLzlwdXpUTzdHZHlPa2lLZApyUzRvZGc5Sy9RMFp6SzR1U1k0a2F4WmVnSWJNZ0hGUUI3NEpkalByY2lHUERGMTVnSnR2ZTF0MmxQSzh2ckFhCkpqOUFKOWZVYXUycThTbTFOT3VuMDArOElXT2dJRVNrUkl2NGk1c1U5M1J5NlBuZkVPU2RXbFZwbFJVLzZRYkEKNUx5M0R4QWl1SFZ5cXc5YkxOZ3VmeU9Mb0syV0VTdDJIRDY1bjlHQUJYTDlKMWdESWlIMWdPUXJPN1UxVDlseQpta3B4ZjNwWEUxenQ1NUkrbE9NPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcWFJRnhwOS9HRFcxWXFrMkdHeFhtQlZOQ3RmNjNDRlVPNkljUFJ6eEFoUUxSeWVWCmFBblFsL0hDQ2QrbWs2TGxOMDFQUEtXa1JyNzJwOUlKWFhreDRQMmw2aUNhZXV6alA0VHJSdUxYUUJrR25xaSsKNXl1K1ZBN3NTcHhBMFh6aHNyNTg1VFhrYlBBbjNpbkY1MFRWVzJPSVV6WlFiM3d6dUh5WXNUM0psQ0tuMlFlbQpmOURpUW1raVVBb0pYbm45MVNFbVo1cTFLSDNoRmlDeHRCMlN3SkJzMC9TYmEzUk44V054bTA5aUxocXN5SCtuCkZNbVMzSGM3ekJSbnIreVJIZ1JwVDlBZG9hb2lEVWVZb0pNekxMQUxVZHNpZ3Q1ZVlsb2V2MkZ6d0NKTU9mbFQKQWtzRlphclRvT01FaDNiczNGY0RBa3RoNFY5MUlSbVJCd2FhWHdJREFRQUJBb0lCQURYcVYyZWYvaWRWdXNjVwovU2lhRnVVeHNBRUlVS1Z5dW5FUnYyUDFOT3p5TGZ0NXExVWIrWDZ4eW5pVTZ6NzFnV0VvWTB6bFlPZFRmdFlzClBlbkZ3WUsvVytLa1pqVTM0YXFvdHBjYk5rc2JLUzE0ZU9URTFJT25FcGRNUHBYVzJXMlVlZUhvVlNnQzFNa2EKQWRyVjEvSnFHa1JJZVJ4V0g2STloOUtkenRvVC9PR1VHaXJ6SmVneXljb1Y4aXhyWnB6aWVlNld1VloyUnBIeApmYU1MRUJqTWtXY3RZY3p0c0hBb0p4dWJ0Z3h4T21Jb1BMRjFndTR6dUtOWkcxVkV4NVM0SEcybFFFd2pTbjYzCitnb1Q3VXlMN1NWZkd0d3ZMQnExVVFVd3Nac01Bek9BNHZCTlFtOVNkQTJoM2h1ZGl3VHhGTnh6bmVyZmszWG8Kc3g1WXB5RUNnWUVBd0xoRStkcFNMdmZ0ZTh0RlA4OXlSdWxTaHU0WGNHVW9JN1ZRSDlQS1hSaGpUQVl1bVlMZQpXckVqcWw4aVlyQm9HVjUzTlFKbURJdnRTS3NxRnhjdytJRlpzRFF0b0NXMGZCUktIb2dUc3Zyemhtd3h4YU52CnhuRHdscEVHV3VKUzV5cWEyZTRNanVoWFZHSXZ0KzlzZzJ1OTFvNjBiV2JJMlpXeEJiQWFEdWtDZ1lFQTRWVWEKaHJUcU9oNnlsallkdlNwNmxxVG51ODFmRm4wd1JHcnFsSjltblIyV0laR2tMR2RHNks3NWRzLzlTdVo5bnRuMgpYbStxeHZCVE15dTFnajVUa0R5RGsrV2NxbG1nWDIyWGI3S2RXVFJtaXRSYXJmaUF6Yi85TmliUU5mS2NCUWc5CllnaDN2K2NWSzRaTmZnZlBWcWVocmtPTitwR1RwMlgrNldUallnY0NnWUIvTGR1UEN1MXJRMy84VHZOL0hiWXIKWjdSbmlOMzg5VFNkQS8xQlU3SGE1OG8zbEdqU001UHJRN1Rtck90ek56a3JiTFM4VGIzc2o3YmlXdHBtN0k0TApvTWtBU0I3SDdib0NuQjBoc3VsVkZ0ajRuNVBrK21zOENMSXNtcjRYNGYyVndmNzR6R2lMTW5iWElBaWZtS2dDCnZtcEVHbDZsUjh4S0VzZ0VtZWRJYVFLQmdBUVJSRFJRU2JZWTNjSm1ZYTBMZWtFRDR3YjUweENWMit3d1BlSEcKNnRSRk4zT05ySGY4dVVQei9KN1BiRlFReXcyMkE0TjY0b3RLeFVXME1VZVRsbkNSRnhMeFh4MllGcFFDWjJ4bAp2ZjloT2NTaHhxMURRaGYwc2o1cS92RXFXdlNnVEhOYmtjWE9Cd3pORk5NRWt4S09YaFhHTkdia2Y5VFN1NEk5CkJ2bTdBb0dBQjFnN0lERjRlblBVNis0R1c4cU5KUS8rSkphblFNWnhrVkxXYUIySU1iVnl2K3Q1UVFJTWt3VFUKdU5WNXhrZVBRSmlsMGxNMER4MzJEUzJiQ2plczFuMjFmUWdYRG4yNUlUbWtJMXJXTjhHMlZzTW1ialIvNmphbAp3TkhRd1Fxa25YMkMzWExRR0FqYitYUWtYazhTU0J0a0NLZS9EUWFJWVk4cktLb0Nia1k9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRTmlndzljdFBPL3lLa1pld0N2SzloakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TmpJd01UUTFOalUxV2hjTk1qVXdOakl3TVRRMQpOalUxV2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ2FabldESkZOdjdhbTNlZ3RyRVRWTmtNVDlKdTh0aEJsQ0pWV2lXV1c3MnpBL1oycnUKeDh1Rnk2dUVWM1gwQnFZdThJbTRvVEVYTHFQc0hCTUEyaEZxMGJ5Q0M3NzlLVnIwQlU5V241ZFZxaFBvZlF6WApQbHVHVVdnRnRVaWtHYjBDUVU4RllVRzRYVUZrenVsTE1EanlKWElscHo0SzhKbTBJQmpUQVB1eC9RKy83amtXCkV2Ri9GUXU0VkZMREFYK0FERksvT25KbzdRRFRiZi9UL3czVld2WTFHRG9rYWRZUkx4TjBTeGJHNU5YNkVjQmUKQmd3c3Bvb3F1cXBqSEp4MllFYllyakRhLzFyc2xPNjdlR2U1NmZPeVk1YVBFS29XOUw0M2l0ZXQ4by93TmRqMgptL1FJYmtJUDdFUytKdzZlYUl6ZXV0ZFZhTDRLdDA1U1E3bmxBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVIOWpucGxEU3AxNlRpa05ERGxZYnB1ME9TUXN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFGN3BhR3UwZjVlaUR1VG1DbDl4aGJhVWxpY290c29vM2pYTFRJZ3BQUUlGdm80QmVVRnVjbFc1ClcreGZPcDJ2NmY0dmtlYnVJb1RJeStjeGRhYVZISzhhVXVGN09Ha3pZV05DRFRYeGszNkNlQkhCbXVrRkR3M1YKcHlFVVlBcnowdFA2ZFlSZVZRTTA5a1JMbnZnTUpQTlh5MkNoUTc1Wnpzb3RQM3NjTXFGbXdrTU9ZaWF1WnhIRQpBUmo2aDB3bS94VWp0cWFqRFQwRUM1L0pxQXlxZDlNSUlJb2p0R2hhUFZkN3ptb2FRUkF2VmljKzB0c016UmJjCmExWVE0OStVK21CKzhoenloY2ZMRjZVUEQ3MDl6WXRmakx0bVNrZEpzM0pvMUYzQTlvaGxWVGJZcE1UQXhSQnAKTlNjeldkNDlXUUlMMnBOZEZESlhRM0s1R2pHRlhrcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "RG5pdGJsNzB4SkRUVnlDaw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "SkpVUnVwM1kxQVl6VkpMbg=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJHJ2ZXdMdUcwQTRjRkxBcVZxdUR4L2UzRTdTS0NlTjlJdndWLmd5VDhWbkxGd09iMklHRVRX"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-trivy
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9teS1yZWxlYXNlLWhhcmJvci1yZWRpczo2Mzc5LzU/aWRsZV90aW1lb3V0X3NlY29uZHM9MzA=
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "my-release-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://my-release-harbor-core:80"
  JOBSERVICE_URL: "http://my-release-harbor-jobservice"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://my-release-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://my-release-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://my-release-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://my-release-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://my-release-harbor-core:80"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://my-release-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: my-release-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: my-release
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-redis
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: my-release
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: my-release
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-trivy"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: my-release
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: my-release
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: c3116563d85f6b9bdcbac25e2d0c099426c9de6a8c2914649b4aaffbfafef8f9
        checksum/secret: d88ac5d653235ef1fe21154f9d94689d7672267ca714c0b3cbd1b658237bb1aa
        checksum/secret-jobservice: 73806a249b6a7315968a613595374225ed1cc94e8ae50f2ba8f8a2a9ff4e39ae
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.2
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "my-release-harbor-core"
        - secretRef:
            name: "my-release-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: my-release-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: my-release-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: my-release-harbor-core
      - name: ca-download
        secret:
          secretName: "my-release-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 4f7dbbc49083e08019aef002eb306672953036d7f85e00f568404bde6c98d976
        checksum/configmap-env: 444e5b5fb018c6309eda013df23304fb64c2c247607e2490803a3a9b8e3b4ab3
        checksum/secret: 72293f0ea4a0e48fc0b337439e1fbf6b7ae6cde262c799a454cbb6d312f54558
        checksum/secret-core: 20bdff27d6d1e07b5f1bca7f5c56438470da29b318aa29b1b997d66960ad2f37
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "my-release-harbor-jobservice-env"
        - secretRef:
            name: "my-release-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "my-release-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: my-release-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: my-release
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 4f57228da5b996ce2e1d73f0b48047e3c9bcad7981c56b409a4049c270489dc2
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "my-release-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: b75e637804ef6ab7e2215cc2ab72b2231972ce38099b82e0ce84c84464a961e7
        checksum/secret: 3a17bc3e87c91adaf7722e6e783d9308c853994e81c210392d5e7421e7355ddb
        checksum/secret-jobservice: 1c7fbab0ae67021643f006b6361a26717d771801698241b2f78c17ff0325e088
        checksum/secret-core: cad45f701e752a7f03a06ab8cefe10ef13c2465f8785e1a94e4e71ae33588d8e
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "my-release-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "my-release-harbor-registryctl"
        - secretRef:
            name: "my-release-harbor-registry"
        - secretRef:
            name: "my-release-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-release-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-release-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: my-release-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "my-release-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: my-release-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "my-release-harbor-database"
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: ed9edd1f8c192111d15a20b2a392275408e9802a66f04db8f24eb48610f87df2
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "my-release-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-harbor-redis
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: my-release-harbor-redis
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-harbor-trivy
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: my-release-harbor-trivy
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 4b4f43fdfe71cee5a7df60db35cd1de066d89ced7a5abe80c64c7bcbac2ce9af
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "my-release-harbor-ingress"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: my-release-harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-portal
            port:
              number: 80
    host: core.harbor.domain
