---
# Source: cockpit/templates/common/cockpit-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cockpit
  annotations:
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.43.0
    app.kubernetes.io/component: "cockpit"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
---
# Source: cockpit/templates/api/api-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-cockpit-api
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
data:
  gravitee.yml: |
    jetty:
      port: 8063

    management:
      type: mongodb
      mongodb:
        sslEnabled: false
        socketKeepAlive: false
        uri: mongodb://graviteeio-cockpit-mongodb-replicaset-headless:27017/gravitee?&replicaSet=rs0&connectTimeoutMS=30000

    cluster:
      type: hazelcast
      hazelcast:
        config-path: ${gravitee.home}/config/hazelcast.xml

    cache:
      type: hazelcast
      hazelcast:
        config-path: ${gravitee.home}/config/hazelcast.xml

    exchange:
      controller:
        ws:
          port: 8062
          secured: true
          ssl:
            clientAuth: REQUIRED
            keystore:
              type: ${ssl.keystore.type}
              path: ${ssl.keystore.path}
              password: ${ssl.keystore.password}
            truststore:
              type: ${truststore.type}
              path: ${truststore.path}
              password: ${truststore.password}

    swaggerGenerator:
      url: http://my-release-cockpit-swagger-generator:84
      apiKey: api_key_value

    services:
      core:
        http: 
          enabled: true
          port: 18063
          host: localhost
          authentication:
            type: basic
            users:
              admin: adminadmin
      healthCheckPurge:
        cron: 0 0 0 */1 * *
        onPremise:
          dataRetentionDuration: -1

    reCaptcha:
      enabled: false

    email:
      enabled: true 
      host: smtp.example.com
      subject: "[gravitee] %s"
      port: 25
      from: info@example.com
      username: info@example.com
      password: example.com
      properties:
        auth : "true"
        starttls.enable : "false"

    onboarding:
      incomplete:
        time-before-notifying: PT30M

    jwt:
      secret: ybbrZDZmjnzWhstP8xv2SQL28AdHuNah

    platform:
      admin:
        password: $2a$10$YCR.gYLmG8TzKSg5TYxdzeJOpMGpEavOCni5sbHukD2qwwZxhuXvO

    certificates:
      secret: QdjshTRmurH3YtzFCrYATkSG8H65xwah
      principal: 'EMAILADDRESS=contact@graviteesource.com, CN={accountId}, OU=Cockpit, O=GraviteeSource, L=Lille, ST=France, C=FR'
      expire-after: 31536000
      key:
        alg: RSA
        size: 4096
      signature:
        alg: SHA512WithRSA

    endpoints:
      loginPath: "/auth/cockpit?token={token}"
      apim:
        name: "GraviteeAPIManagement"
        ui: "http://localhost:3000"
        api: "http://localhost:8083/management"
      am:
        name: "GraviteeAccessManagement"
        ui: "http://localhost:4200"
        api: "http://localhost:8093/management"
      ui: "https://cockpit.example.com/"
      ws: "https://cockpit-controller.example.com/"
    initialPlans:
      large:
        dataRetentionDuration: 182
        maxDesignerModelsCount: 1
        maxEnvs: -1
        name: Large
      medium:
        dataRetentionDuration: 30
        maxDesignerModelsCount: 1
        maxEnvs: 4
        name: Medium
      small:
        dataRetentionDuration: 1
        isDefault: "true"
        maxDesignerModelsCount: 1
        maxEnvs: 2
        name: Small

    auth:
      callbackUrl: /management/auth/login/callback
      github:
        redirectUri: https://cockpit.example.com/management/auth/login/callback?provider=github
        accessTokenUri: https://github.com/login/oauth/access_token
        clientId: null
        clientSecret: null
        codeParameter: code
        responseType: code
        userAutorizationUri: https://github.com/login/oauth/authorize
        userProfileUri: https://api.github.com/user
      google:
        redirectUri: https://cockpit.example.com/management/auth/login/callback?provider=google
        accessTokenUri: https://oauth2.googleapis.com/token
        clientId: null
        clientSecret: null
        codeParameter: code
        responseType: code
        scopes: openid,profile,email
        userAutorizationUri: https://accounts.google.com/o/oauth2/v2/auth
        userProfileUri: https://openidconnect.googleapis.com/v1/userinfo
      oidc:
        redirectUri: https://cockpit.example.com/management/auth/login/callback?provider=oidc
        clientId: null
        clientSecret: null
        codeParameter: code
        responseType: code
        scopes: openid,profile,email

  hazelcast.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <hazelcast xmlns="http://www.hazelcast.com/schema/config"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.hazelcast.com/schema/config
               http://www.hazelcast.com/schema/config/hazelcast-config-5.3.xsd">
        <cluster-name>graviteeio-cockpit</cluster-name>
        <properties>
            <property name="hazelcast.discovery.enabled">true</property>
            <property name="hazelcast.max.wait.seconds.before.join">3</property>
            <property name="hazelcast.member.list.publish.interval.seconds">5</property>
            <property name="hazelcast.socket.client.bind.any">false</property>
            <property name="hazelcast.logging.type">slf4j</property>
        </properties>

        <queue name="exchange-cluster-command-*">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </queue>

        <map name="exchange-controller-primary-channel-candidate">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </map>

        <cp-subsystem>
            <cp-member-count>0</cp-member-count>
        </cp-subsystem>

        <network>
            <join>
                <multicast enabled="false"/>
                <tcp-ip enabled="false"/>
                <kubernetes enabled="true">
                    <namespace>cockpit-2.0.0.tgz</namespace>
                    <service-name>my-release-cockpit-api</service-name>
                </kubernetes>
            </join>
        </network>
    </hazelcast>

  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%mdc] - %msg%n</pattern>
              </encoder>
            </appender>

            <logger name="io.gravitee" level="INFO" />
            <logger name="com.graviteesource" level="INFO" />
            <logger name="org.eclipse.jetty" level="INFO" />
            <logger name="com.hazelcast" level="INFO"/>

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
            </root>

        </configuration>
---
# Source: cockpit/templates/generator/generator-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-cockpit-swagger-generator
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "swagger-generator"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
data:
  env.props: |
    HOST=0.0.0.0
    PORT=3003
    APIZR_API_KEY_VALUE=api_key_value
    LICENSE_KEY=license_value
    LICENSE_EXPIRATION=license_expiration_date
---
# Source: cockpit/templates/ui/ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-cockpit-ui
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
data:
  use-gzip: "true"
  gzip-level: "5"
  gzip-types: "*"
  config.json: |
    {
      "baseURL": "https://cockpit.example.com/management",
      "loaderURL": "assets/images/gravitee-loader.gif",
      "pagination": {
        "size": {
          "default": 10,
          "values": [5, 10, 25, 50, 100]
        }
      }
    }
---
# Source: cockpit/templates/common/cockpit-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cockpit-role
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.43.0
    app.kubernetes.io/component: "cockpit"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
rules: 
  - apiGroups:
    - ""
    resources:
    - endpoints
    - pods
    - nodes
    - services
    - configmaps
    - secrets
    verbs:
    - get
    - list
    - watch
---
# Source: cockpit/templates/common/cockpit-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cockpit-role-binding
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: 4.43.0
    app.kubernetes.io/component: "cockpit"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
roleRef:
  kind: Role
  name: my-release-cockpit-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: my-release-cockpit
  namespace: cockpit-2.0.0.tgz
---
# Source: cockpit/templates/api/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cockpit-api
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - name: api-http
      port: 8063
      targetPort: api-http
      protocol: TCP
      
      
      appProtocol: http
      
      
      
    - name: api-ws
      port: 8062
      targetPort: api-ws
      protocol: TCP
      
      appProtocol: http
      
  selector:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "api"
---
# Source: cockpit/templates/generator/generator-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cockpit-swagger-generator
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "swagger-generator"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - name: swagger-generator
      port: 84
      targetPort: generator-http
      protocol: TCP
      
      appProtocol: http
      
  selector:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "swagger-generator"
---
# Source: cockpit/templates/ui/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cockpit-ui
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - name: ui
      port: 8002
      targetPort: ui-http
      protocol: TCP
      
      appProtocol: http
      
  selector:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: "ui"
---
# Source: cockpit/templates/api/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cockpit-api
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  strategy: 
            rollingUpdate:
              maxUnavailable: 1
            type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: cockpit
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "api"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 98c7302428510e8e76e7bbed1974ee807584f8272ac18fc041882955208a4726
      labels:
        app.kubernetes.io/name: cockpit
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.43.0"
        app.kubernetes.io/component: "api"
    spec:
      serviceAccountName: my-release-cockpit
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - cockpit
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - api
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: my-release-cockpit-api
          image: "graviteeio/cockpit-management-api:4.43.0"
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: api-http
              containerPort: 8063
            - name: api-ws
              containerPort: 8062
            - name: api-technical
              containerPort: 18063
          env:
          envFrom: 
            []
          livenessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: api-http
          readinessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: api-http
          resources: 
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config
              mountPath: /opt/gravitee-cockpit-management-api/config/gravitee.yml
              subPath: gravitee.yml
            - name: config
              mountPath: /opt/gravitee-cockpit-management-api/config/hazelcast.xml
              subPath: hazelcast.xml
            - name: config
              mountPath: /opt/gravitee-cockpit-management-api/config/hazelcast.yml
              subPath: hazelcast.yml
            - name: config
              mountPath: /opt/gravitee-cockpit-management-api/config/logback.xml
              subPath: logback.xml            
      volumes:
        - name: config
          configMap:
            name: my-release-cockpit-api
---
# Source: cockpit/templates/generator/generator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cockpit-swagger-generator
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "swagger-generator"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  replicas: 1
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: cockpit
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "swagger-generator"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: b757544a9e885daa965c0e41097e92a4d9912fb33a2276f370c877250d74ae9f
      labels:
        app.kubernetes.io/name: cockpit
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.43.0"
        app.kubernetes.io/component: "swagger-generator"
    spec:
      serviceAccountName: my-release-cockpit
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - cockpit
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - swagger-generator
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: my-release-cockpit-swagger-generator
          image: "graviteeio/cockpit-swagger-generator:4.43.0"
          imagePullPolicy: Always
          securityContext:  
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: generator-http
              containerPort: 3003
          env:
          envFrom: 
            []
          livenessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            tcpSocket:
              port: generator-http
          readinessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            tcpSocket:
              port: generator-http
          resources: 
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /app/.env
              subPath: env.props
      volumes:
        - name: config
          configMap:
            name: my-release-cockpit-swagger-generator
---
# Source: cockpit/templates/ui/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cockpit-ui
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: cockpit
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: "ui"
  template:
    metadata:
      annotations:
        chaos.alpha.kubernetes.io/enabled: "false"
        checksum/config: 139bc5025e89ec04ac8256ff56e82facb7000ecbdbccaec8d3b14203a0d69ca1
      labels:
        app.kubernetes.io/name: cockpit
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.43.0"
        app.kubernetes.io/component: "ui"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - cockpit
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - ui
              topologyKey: kubernetes.io/hostname
            weight: 100
      nodeSelector: 
        {}
      topologySpreadConstraints: 
        []
      tolerations: 
        []
      terminationGracePeriodSeconds: 30
      containers:
        - name: my-release-cockpit-ui
          image: "graviteeio/cockpit-management-ui:4.43.0"
          imagePullPolicy: Always
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          env:
          envFrom: 
            []
          ports:
            - name: ui-http
              containerPort: 8080
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: ui-http
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /
              port: ui-http
            initialDelaySeconds: 10
            periodSeconds: 30
          resources: 
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          volumeMounts:
            - name: config
              mountPath: /usr/share/nginx/html/assets/config.json
              subPath: config.json
      volumes:
        - name: config
          configMap:
            name: my-release-cockpit-ui
---
# Source: cockpit/templates/api/api-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-cockpit-api
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-cockpit-api
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: cockpit/templates/generator/generator-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-cockpit-swagger-generator
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "swagger-generator"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-cockpit-swagger-generator
  minReplicas: 1
  maxReplicas: 1
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: cockpit/templates/ui/ui-autoscaler.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-cockpit-ui
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-cockpit-ui
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
      
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
---
# Source: cockpit/templates/api/api-ingress-ws.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-cockpit-api-ws
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: "cockpit-controller.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: my-release-cockpit-api
            port:
              number: 8062
          
  tls:
    - hosts:
      - cockpit-controller.example.com
      secretName: api-custom-cert
---
# Source: cockpit/templates/api/api-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-cockpit-api
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "api"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
    nginx.ingress.kubernetes.io/eventsource: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "21600"
spec:
  rules:
  - host: "cockpit.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /management
        backend:
          service:
            name: my-release-cockpit-api
            port:
              number: 8063
          
  tls:
    - hosts:
      - cockpit.example.com
      secretName: api-custom-cert
---
# Source: cockpit/templates/ui/ui-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-cockpit-ui
  labels:
    app.kubernetes.io/name: cockpit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.43.0"
    app.kubernetes.io/component: "ui"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cockpit-2.0.0
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\n"
spec:
  rules:
  - host: "cockpit.example.com"
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: my-release-cockpit-ui
            port:
              number: 8002
          
  tls:
    - hosts:
      - cockpit.example.com
      secretName: api-custom-cert
