---
# Source: geonetwork-k8s/charts/postgis-db/templates/postgis-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    geonetwork-hnap/app: postgis-db
  name: init-postgres-cm
data:
  init-sql: |-
    \c geonetwork
    CREATE SCHEMA geonetwork;
---
# Source: geonetwork-k8s/charts/elasticsearch/templates/elasticsearch-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  storageClassName: default
---
# Source: geonetwork-k8s/charts/postgis-db/templates/postgis-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: geonetwork-db-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: default
---
# Source: geonetwork-k8s/templates/geonetwork-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: geonetwork-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: default
---
# Source: geonetwork-k8s/charts/elasticsearch/templates/elasticsearch-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: elasticsearch
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: tcp
      port: 9200
      targetPort: tcp
      protocol: TCP
  selector:
      geonetwork-hnap/app: elasticsearch
      geonetwork-hnap/siteName: my-release
---
# Source: geonetwork-k8s/charts/kibana/templates/kibana-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kibana
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: kibana
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5601
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
      geonetwork-hnap/app: kibana
      geonetwork-hnap/siteName: my-release
---
# Source: geonetwork-k8s/charts/ogcapi/templates/ogc-api-records-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ogcapi
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: ogcapi
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
      geonetwork-hnap/app: ogcapi
      geonetwork-hnap/siteName: my-release
---
# Source: geonetwork-k8s/charts/postgis-db/templates/postgis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: geonetwork-db
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    app.kubernetes.io/name: postgis-db
    helm.sh/chart: geonetwork-hnap-4.2.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
    geonetwork-hnap/app: postgis-db
    geonetwork-hnap/siteName: my-release
---
# Source: geonetwork-k8s/templates/geonetwork-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: geonetwork
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: geonetwork
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName:  my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: tcp
      protocol: TCP
      name: tcp
  selector:
    geonetwork-hnap/app: geonetwork
    geonetwork-hnap/siteName: my-release
---
# Source: geonetwork-k8s/charts/elasticsearch/templates/elasticsearch-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: elasticsearch
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      geonetwork-hnap/app: elasticsearch
      geonetwork-hnap/siteName: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        geonetwork-hnap/app: elasticsearch
        geonetwork-hnap/siteName: my-release
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: elasticsearch
          image: "elasticsearch:7.17.15"
          imagePullPolicy: IfNotPresent
          env:
            - name: ES_JAVA_OPTS
              value: -Xms1G -Xmx1G
            - name: discovery.type
              value: single-node
          ports:
            - name: tcp
              containerPort: 9200
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - mountPath: "/usr/share/elasticsearch/data"
              name: esdata
      restartPolicy: Always
      volumes:
        - name: esdata
          persistentVolumeClaim:
            claimName: elasticsearch-pvc
---
# Source: geonetwork-k8s/charts/kibana/templates/kibana-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: kibana
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      geonetwork-hnap/app: kibana
      geonetwork-hnap/siteName: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        geonetwork-hnap/app: kibana
        geonetwork-hnap/siteName: my-release
    spec:
      containers:
        - name: kibana
          image: "kibana:7.17.15"
          imagePullPolicy: IfNotPresent
          env:
            #- name: ELASTICSEARCH_URL
            #  value: http://elasticsearch:9200/ 
            - name: ELASTICSEARCH_HOST
              value: elasticsearch 
            - name: ELASTICSEARCH_PORT
              value: "9200"            
            - name: KIBANA_INDEX
              value: .dashboards
            - name: SERVER_BASEPATH
              value: /geonetwork/dashboards
            - name: SERVER_NAME
              value: kibana
            - name: SERVER_REWRITEBASEPATH
              value: "false"
            - name: XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED
              value: "true"
          ports:
            - name: tcp
              containerPort: 5601
              protocol: TCP
          resources:
            {}
      restartPolicy: Always
---
# Source: geonetwork-k8s/charts/ogcapi/templates/ogc-api-records-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ogcapi
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: ogcapi
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas:  1
  selector:
    matchLabels:
      geonetwork-hnap/app: ogcapi
      geonetwork-hnap/siteName: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        geonetwork-hnap/app: ogcapi
        geonetwork-hnap/siteName: my-release
    spec:
      containers:
        - name: ogcapi
          image: "geonetwork/gn-cloud-ogc-api-records-service:4.2.8-0"
          imagePullPolicy: IfNotPresent
          env:
            - name: GN_BASEURL
              value: http://:8080/geonetwork/api
            - name: GN_INDEX_URL
              value: http://elasticsearch:9200
            - name: GN_LEGACY_URL
              value: http://:8080/geonetwork/
            - name: JAVA_OPTS
              value: -Dfile.encoding=UTF-8
            - name: SERVER_FORWARDHEADERSSTRATEGY
              value: FRAMEWORK
            - name: SPRING_DATASOURCE_PASSWORD
              value: geonetwork
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://geonetwork-db:5432/geonetwork
            - name: SPRING_DATASOURCE_USERNAME
              value: geonetwork
            - name: SPRING_PROFILES_ACTIVE
              value: standalone
          ports:
            - name: tcp
              containerPort: 8080
              protocol: TCP
          resources:
            {}
      restartPolicy: Always
---
# Source: geonetwork-k8s/charts/postgis-db/templates/postgis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geonetwork-db
  annotations:
    geonetwork-hnap.version: 4.2.8                           
  labels:
    app.kubernetes.io/name: postgis-db
    helm.sh/chart: geonetwork-hnap-4.2.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      geonetwork-hnap/app: postgis-db
      geonetwork-hnap/siteName: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        geonetwork-hnap/app: postgis-db
        geonetwork-hnap/siteName: my-release
    spec:
      containers:
        - name: postgis-db
          image: "postgis/postgis:11-2.5"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_USER
              value: geonetwork
            - name: POSTGRES_PASSWORD
              value: geonetwork
            - name: POSTGRES_DB
              value: geonetwork
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {}
          volumeMounts:
            - mountPath: "/var/lib/postgresql"
              name: postgis-volume
            - name: init-postgres
              mountPath: /docker-entrypoint-initdb.d

      volumes:
        - name: postgis-volume
          persistentVolumeClaim:
            claimName: geonetwork-db-pvc
        - name: init-postgres
          configMap:
            name: init-postgres-cm
            items:
            - key: init-sql
              path: init.sql
---
# Source: geonetwork-k8s/templates/geonetwork-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geonetwork
  annotations:
    geonetwork-hnap.version: 4.2.8
  labels:
    geonetwork-hnap/app: geonetwork
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName:  my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      geonetwork-hnap/app: geonetwork
      geonetwork-hnap/siteName: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        geonetwork-hnap/app: geonetwork
        geonetwork-hnap/siteName: my-release
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: geonetwork-k8s
          image: "jingking/geonetwork-hnap:4.2.8"
          imagePullPolicy: IfNotPresent
          env:
            - name: DATA_DIR
              value: /catalogue-data
            - name: ES_HOST
              value: elasticsearch
            - name: ES_PORT
              value: "9200"
            - name: ES_PROTOCOL
              value: http
            - name: GEONETWORK_DB_HOST
              value: geonetwork-db
            - name: GEONETWORK_DB_NAME
              value: geonetwork
            - name: GEONETWORK_DB_PASSWORD
              value: geonetwork
            - name: GEONETWORK_DB_PORT
              value: "5432"
            - name: GEONETWORK_DB_TYPE
              value: postgres
            - name: GEONETWORK_DB_USERNAME
              value: geonetwork
            - name: GEONETWORK_MICROSERVICESPROXY_TARGETURI
              value: http://ogcapi:8080
            - name: JAVA_OPTS
              value: |
                -Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Xms512M -Xss512M -Xmx2G -XX:+UseConcMarkSweepGC -Dgeonetwork.resources.dir=/catalogue-data/resources -Dgeonetwork.data.dir=/catalogue-data -Dgeonetwork.codeList.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/codelist -Dgeonetwork.schema.dir=/var/lib/jetty/webapps/geonetwork/WEB-INF/data/config/schema_plugins
            - name: KB_URL
              value: http://kibana:5601
          ports:
            - name: tcp
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          volumeMounts:
            - mountPath: /catalogue-data
              name: geonetwork
      restartPolicy: Always
      volumes:
        - name: geonetwork
          persistentVolumeClaim:
            claimName: geonetwork-pvc
---
# Source: geonetwork-k8s/templates/geonetwork-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: geonetwork
  labels:
    geonetwork-hnap/app: geonetwork
    helm.sh/chart: geonetwork-hnap-4.2.8
    geonetwork-hnap/siteName:  my-release
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/secure-backends: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: "geonetwork.example.com"
      http:
        paths:
          - path: /geonetwork(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: geonetwork
                port:
                  number: 8080
