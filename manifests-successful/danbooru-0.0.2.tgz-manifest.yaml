---
# Source: danbooru/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-danbooru
  labels:
    helm.sh/chart: danbooru-0.0.2
    app.kubernetes.io/name: danbooru
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9cab67c0ac72a8c52289302c519715ceec2372d9"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: danbooru
    app.kubernetes.io/instance: my-release
---
# Source: danbooru/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-danbooru
  labels:
    helm.sh/chart: danbooru-0.0.2
    app.kubernetes.io/name: danbooru
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9cab67c0ac72a8c52289302c519715ceec2372d9"
    app.kubernetes.io/managed-by: Helm
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: danbooru
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: danbooru
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: my-release-danbooru
          image: "ghcr.io/danbooru/danbooru:9cab67c0ac72a8c52289302c519715ceec2372d9"
          imagePullPolicy: IfNotPresent
          args:
            
            - bash
            - -c
            - bin/rails db:prepare && bin/rails db:seed && bin/rails server -b 0.0.0.0
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
---
# Source: danbooru/templates/cron.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-danbooru-cron"
  labels:
    helm.sh/chart: danbooru-0.0.2
    app.kubernetes.io/name: danbooru
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9cab67c0ac72a8c52289302c519715ceec2372d9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "danbooru-cron"
      app.kubernetes.io/instance: "my-release"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "danbooru-cron"
        app.kubernetes.io/instance: "my-release"
    spec:
      containers:
        - name: "danbooru-cron"
          image: "ghcr.io/danbooru/danbooru:9cab67c0ac72a8c52289302c519715ceec2372d9"
          imagePullPolicy: IfNotPresent
          args:
              
            - bash
            - -c
            - bin/wait-for-http http://danbooru:3000 5s && bin/rails danbooru:cron
---
# Source: danbooru/templates/jobs.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-danbooru-jobs"
  labels:
    helm.sh/chart: danbooru-0.0.2
    app.kubernetes.io/name: danbooru
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9cab67c0ac72a8c52289302c519715ceec2372d9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "danbooru-jobs"
      app.kubernetes.io/instance: "my-release"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "danbooru-jobs"
        app.kubernetes.io/instance: "my-release"
    spec:
      containers:
        - name: "danbooru-jobs"
          image: "ghcr.io/danbooru/danbooru:9cab67c0ac72a8c52289302c519715ceec2372d9"
          imagePullPolicy: IfNotPresent
          args:
              
            - bash
            - -c
            - bin/wait-for-http http://danbooru:3000 5s && bin/good_job start
