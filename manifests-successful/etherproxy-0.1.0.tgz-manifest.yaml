---
# Source: etherproxy/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-etherproxy
  labels:
    helm.sh/chart: etherproxy-0.1.0
    app.kubernetes.io/name: etherproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  ETHERPROXY_PORT: "9000"
  ETHERPROXY_TARGET: "https://rpc.gnosischain.com/"
  ETHERPROXY_EXPIRY: "2000"
---
# Source: etherproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-etherproxy
  labels:
    helm.sh/chart: etherproxy-0.1.0
    app.kubernetes.io/name: etherproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: etherproxy
    app.kubernetes.io/instance: my-release
---
# Source: etherproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-etherproxy
  labels:
    helm.sh/chart: etherproxy-0.1.0
    app.kubernetes.io/name: etherproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: etherproxy
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: etherproxy
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: etherproxy
          securityContext:
            {}
          image: "ethersphere/etherproxy:1.0.0"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: my-release-etherproxy
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
          resources:
            {}
