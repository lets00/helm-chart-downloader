---
# Source: mlflow/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mlflow
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/version: 2.1.1
    helm.sh/chart: mlflow-0.0.1
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/instance: my-release
---
# Source: mlflow/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mlflow
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mlflow
    app.kubernetes.io/version: 2.1.1
    helm.sh/chart: mlflow-0.0.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mlflow
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mlflow
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: my-release-mlflow
          image: "mlflow/mlflow:2.1.1"
          imagePullPolicy: IfNotPresent
          command:
              
            - mlflow
            - server
          args:
            
            - --host
            - 0.0.0.0
            - --port
            - "5000"
          env:
            - name: AWS_ACCESS_KEY_ID
              value: null
            - name: AWS_SECRET_ACCESS_KEY
              value: null
            - name: BACKEND_STORE_URI
              value: postgresql://mlflow:mlflow-pass@postgresql:5432/mlflow
            - name: DEFAULT_ARTIFACT_ROOT
              value: null
            - name: MLFLOW_S3_ENDPOINT_URL
              value: null
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
