---
# Source: kratos/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kratos
  labels:
    app.kubernetes.io/scraped: "prometheus"
    app.kubernetes.io/framework: "kratos"
    helm.sh/chart: kratos-0.1.0
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
    - port: 9000
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: my-release
---
# Source: kratos/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kratos
  labels:
    helm.sh/chart: kratos-0.1.0
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos
        app.kubernetes.io/instance: my-release
    spec:
      securityContext:
        {}
      containers:
        - name: kratos
          securityContext:
            {}
          image: "kratos:1.0.1"
          imagePullPolicy: IfNotPresent      
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: grpc
              containerPort: 9000
              protocol: TCP  
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {}
