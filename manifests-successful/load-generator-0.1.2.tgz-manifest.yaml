---
# Source: load-generator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-load-generator
data:
  load.js: |
    import http from "k6/http";
    import { check, fail } from "k6";
    import { Rate } from "k6/metrics";
    
    export let options = {
        noConnectionReuse: true,
        thresholds: {
            "errors": ["rate<0.05"]
        }
    };
    
    export let url = "https://example.com/"
    export let errorRate = new Rate("errors");
    
    export default function() {
    
        let params = {
            headers: {
                        "User-Agent": "k6"
                     },
            redirects: 5,
            tags: { "k6test": "yes" }
        };
        let jar = http.cookieJar();
        jar.set(url, "loadtest", "true");
    
        let res = http.post(url, params );
    
        errorRate.add(res.status != 200);
        check(res, {
            "Status 200": (r) => r.status === 200
        });
    };
---
# Source: load-generator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-load-generator
  labels:
    app.kubernetes.io/name: load-generator
    helm.sh/chart: load-generator-0.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: load-generator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: load-generator
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: load-generator
          image: "loadimpact/k6:0.22.1"
          imagePullPolicy: Always
          command: ["k6", "run", "/k6/load.js"]
          env:
            - name: K6_DURATION
              value: "0"
            - name: K6_RPS
              value: "1"
            - name: K6_VUS_MAX
              value: "1"
            - name: K6_VUS
              value: "1"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
          - name: k6files
            mountPath: /k6
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 128Mi
      volumes:
        - name: k6files
          configMap:
            name: my-release-load-generator
