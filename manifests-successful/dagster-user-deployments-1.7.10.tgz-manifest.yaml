---
# Source: dagster-user-deployments/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dagster-user-deployments-user-deployments
  labels: 
    helm.sh/chart: dagster-user-deployments-1.7.10
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.7.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
automountServiceAccountToken: false
---
# Source: dagster-user-deployments/templates/configmap-env-shared.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dagster-user-deployments-user-deployments-shared-env
  labels:
    app: dagster-user-deployments
    chart: dagster-user-deployments-1.7.10
    release: my-release
    heritage: Helm
data:
  
  
  
  DAGSTER_HOME: "/opt/dagster/dagster_home"
  DAGSTER_K8S_PIPELINE_RUN_NAMESPACE: "dagster-user-deployments-1.7.10.tgz"
  DAGSTER_K8S_PIPELINE_RUN_ENV_CONFIGMAP: "my-release-dagster-user-deployments-pipeline-env"
---
# Source: dagster-user-deployments/templates/configmap-env-user.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dagster-user-deployments-k8s-example-user-code-1-user-env
  labels:
    app: dagster-user-deployments
    chart: dagster-user-deployments-1.7.10
    release: my-release
    heritage: Helm
data:
  # If this is a map, we write it to this configmap. If it's a list, we include it
  # directly on the container (can use more k8s spec like valueFrom).
---
# Source: dagster-user-deployments/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-dagster-user-deployments-role
  labels: 
    helm.sh/chart: dagster-user-deployments-1.7.10
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.7.10"
    app.kubernetes.io/managed-by: Helm

# Allow the Dagster service account to read and write Kubernetes jobs, deployments, pods, and events.
rules:
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs/status"]
    verbs: ["get", "watch", "list"]
  # The empty arg "" corresponds to the core API group
  - apiGroups: [""]
    resources: ["pods", "events"]
    verbs: ["create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods/log", "pods/status"]
    verbs: ["get", "watch", "list"]
---
# Source: dagster-user-deployments/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-dagster-user-deployments-rolebinding
  labels: 
    helm.sh/chart: dagster-user-deployments-1.7.10
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.7.10"
    app.kubernetes.io/managed-by: Helm

subjects:
- kind: ServiceAccount
  name: my-release-dagster-user-deployments-user-deployments
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-dagster-user-deployments-role
---
# Source: dagster-user-deployments/templates/service-user.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8s-example-user-code-1
  labels:
    helm.sh/chart: dagster-user-deployments-1.7.10
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.7.10"
    app.kubernetes.io/managed-by: Helm
    component: user-deployments
    deployment: k8s-example-user-code-1
  annotations:
spec:
  type: "ClusterIP"
  ports:
    - port: 3030
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    component: user-deployments
    deployment: k8s-example-user-code-1
---
# Source: dagster-user-deployments/templates/deployment-user.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dagster-user-deployments-k8s-example-user-code-1
  labels:
    helm.sh/chart: dagster-user-deployments-1.7.10
    app.kubernetes.io/name: dagster-user-deployments
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.7.10"
    app.kubernetes.io/managed-by: Helm
    component: user-deployments
    deployment: k8s-example-user-code-1
  annotations: 
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dagster-user-deployments
      app.kubernetes.io/instance: my-release
      component: user-deployments
      deployment: k8s-example-user-code-1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dagster-user-deployments
        app.kubernetes.io/instance: my-release
        component: user-deployments
        deployment: k8s-example-user-code-1
      annotations:
        checksum/dagster-user-deployment: 56f05e02872c8af48f867a514096b4e6b32369ca5341f5be95d978b57aaf5e84
    spec:
      imagePullSecrets: 
        []
      serviceAccountName: my-release-dagster-user-deployments-user-deployments
      automountServiceAccountToken: true
      securityContext: 
        {}
      containers:
        - name: dagster-user-deployments
          securityContext: 
            {}
          imagePullPolicy: Always
          image: "docker.io/dagster/user-code-example:1.7.10"
          args: ["dagster", "api", "grpc", "-h", "0.0.0.0", "-p", "3030", "-f","/example_project/example_repo/repo.py"]
          env:
            - name: DAGSTER_CURRENT_IMAGE
              value: "docker.io/dagster/user-code-example:1.7.10"
            - name: DAGSTER_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dagster-postgresql-secret
                  key: postgresql-password
            # uses the auto_envvar_prefix of the dagster cli to set the --container-context arg
            # on 'dagster api grpc'
            - name: DAGSTER_CLI_API_GRPC_CONTAINER_CONTEXT
              value: "{\"k8s\":{\"env_config_maps\":[\"my-release-dagster-user-deployments-k8s-example-user-code-1-user-env\"],\"image_pull_policy\":\"Always\",\"namespace\":\"dagster-user-deployments-1.7.10.tgz\",\"run_k8s_config\":{\"pod_spec_config\":{\"automount_service_account_token\":true}},\"service_account_name\":\"my-release-dagster-user-deployments-user-deployments\"}}"
            # If this is a map, we write it to a configmap. If it's a list, we include it here (can use more k8s spec like valueFrom).
          envFrom:
            - configMapRef:
                name: my-release-dagster-user-deployments-user-deployments-shared-env
            - configMapRef:
                name: my-release-dagster-user-deployments-k8s-example-user-code-1-user-env
            - secretRef:
                name: dagster-celery-config-secret
                optional: true
          resources: 
            {}
        # Only disable readiness if explicitly set to false
          readinessProbe:
            exec:
              command: ["dagster", "api", "grpc-health-check", "-p", "3030"]
            periodSeconds:
              20
            timeoutSeconds:
              10
            successThreshold:
              1
            failureThreshold:
              3
      nodeSelector: 
        {}
      affinity: 
        {}
      tolerations:
        []
