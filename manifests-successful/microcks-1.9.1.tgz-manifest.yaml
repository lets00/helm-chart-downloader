---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-grpc-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQUwvK29ZTXFLSFVLWHZnaE54Vzdxdmd3RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRFl5TURFME5UYzFOVm9YRFRNME1EWXhPREUwTlRjMU5Wb3dNakV3TUM0R0ExVUVBeE1uCmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwVDFtM1ZaRmNHRkRnSzZIZk9hMHlIY0ZJcFduT2taNgpPV1ZnMFFxdFBWcU5HZWtrYTB4Y1FZRHF0QkVVdE5peXBxRnN3b2VyN0ZGVy9vdGF1MmhZc0hpOW9aWVNSN1pnCjRVL0kzMW9kbDhMNEdtWWRQNG8ycUVaaFMrRWpmeW55bGxvWWk4VXNWZXU0M2QzanNFcjYzNnVYSFRzWU96bUwKUmQyQnRkWDNsZG5Ubmdtc1hFbVlXVTV2TlpLTFZaRk4zdzI3Ulc1MG83emdCK3pkNmxmMFJHdVRSeEU3dTczUgowQXBOSVF3M3NudzNDTTY5cThDV0s0SXI5dGw2RVVUTHZkK2ZwT2dtb2R4WGNSTzdPUUxhY3d1RHZjakE0TkhPCm9KTkhWdHk2dkcxUG53RTg0N2dOR1JRTEI0Q0pPMWR5OFExQnF6OGMwaEpKcmlpVE9Pd2JzUUlEQVFBQm80RzQKTUlHMU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSApBd0l3REFZRFZSMFRBUUgvQkFJd0FEQjJCZ05WSFJFRWJ6QnRnaXh0YVdOeWIyTnJjeTFuY25CakxXMXBZM0p2ClkydHpMakU1TWk0eE5qZ3VPVGt1TVRBd0xtNXBjQzVwYjRJeWJXbGpjbTlqYTNNdFozSndZeTV0YVdOeWIyTnIKY3kweExqa3VNUzUwWjNvdWMzWmpMbU5zZFhOMFpYSXViRzlqWVd5Q0NXeHZZMkZzYUc5emREQU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBZWFWMEE5NlFCbHRHaHpOaUk0WVBXL2o3TTN2alRGSmRjeDNTYXlVMTVDUVNlcE51CjRIdWhiTFgyQlV2bGZUaHQ5NkkxeHZMZ2xrWjkwMXBJMXQyVlFXRExpUDA5V0huQUwzUkJTOEJJQzltZ0l3MU8KaStpWit2SzFVSW4yRWppMjZRbjZEeERqUXBHK2FuT3lidXFZNmsxZml1NVd5Zk9xQjlpV2J0dlRwVHJsQlFlcgoxaGxucEhkZmF2OUVoRVFZKy9aYTA4azBYSzAzUDFveHZleGxGa1ZpMnZscW8xQWVnVDk1WTBZRGxjdGgrNVBOCjZqbGFvRzYzUWZQRitMWlhBM0l4bnJlczVGcTErQ2hMbzh0U01MTHd0SFpHQjV0ZUtXb240bDdpam9oZHIzNWMKak11K1ErampoNXJ3U3RkKzIxRUo3Q25DY3ZjQVdYN1FTaU9FR2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBMFQxbTNWWkZjR0ZEZ0s2SGZPYTB5SGNGSXBXbk9rWjZPV1ZnMFFxdFBWcU5HZWtrCmEweGNRWURxdEJFVXROaXlwcUZzd29lcjdGRlcvb3RhdTJoWXNIaTlvWllTUjdaZzRVL0kzMW9kbDhMNEdtWWQKUDRvMnFFWmhTK0VqZnlueWxsb1lpOFVzVmV1NDNkM2pzRXI2MzZ1WEhUc1lPem1MUmQyQnRkWDNsZG5UbmdtcwpYRW1ZV1U1dk5aS0xWWkZOM3cyN1JXNTBvN3pnQit6ZDZsZjBSR3VUUnhFN3U3M1IwQXBOSVF3M3NudzNDTTY5CnE4Q1dLNElyOXRsNkVVVEx2ZCtmcE9nbW9keFhjUk83T1FMYWN3dUR2Y2pBNE5IT29KTkhWdHk2dkcxUG53RTgKNDdnTkdSUUxCNENKTzFkeThRMUJxejhjMGhKSnJpaVRPT3dic1FJREFRQUJBb0lCQVFESnBwdFVCS2kzUFlXSQpwcXI4dkhyT0Y2WmpSa2I3NnFBd1lIdUYrdndxZlBJdlhua3l6MHk1OUR3OWZaaXZFWWhhL29lS2txWW1BZDROClF0QVdmT0c4Y1NDUWNjajhROC9xVkxJS1R4Ym1BNGlJS0pGWGd5UloyRG84bnFWUEVHWXljSEhuZ2diUVozU3EKbmdXcENSbnVKYmhrKzJiRzdSWkVKczJ6S0pxTFZyeHZ1M0o0RmVOclNmRExienBKYmhVUGhuZWRqOFJBdDBPRAo4Q3VvRFJoaXNJRkhqVjVRa0w5N0ZLZmE1NXc0RmpEam9JeC9NdkNwYWZ3NHhFR2c1dEx0ejJNbk5uNWh6Q1c0Cm44Ukt6MnBkZjE0WTBUdzFiSm0xL1l3dFhHcHZTQVUyL01id0tXbU1SMVFPNkZoKzduMUtiNGxieWEvOWxJM0wKS0RoOXd0bmhBb0dCQU9TQWpuZlZTeTltUmlycW5QZjdwR1A2bEVkNHl1RjhmU2ZqZFpFeGhscy9FRVN6RTF3NgpFSG1mSEJLZHQ0cXNjTkI1ZzBDd0ZJbFZtYUczcjRYcUEydGFoMW9BTXNlYWFYTlZQUGRVb2YvQk1sbm9rZzc4CjdnaXdSZzhVcTVreGNrajc1RmxBa1RiQUNQMlNMVXNJV0x1M0htS0poc0ZYZ3Y4a1d2MFYwRk5IQW9HQkFPcHIKYnM5SHd5L0hQR3hJd1JaNlNPRHo1UXMrTWlTTU5UcUxrSDc3RDZpV0NUakJaSnNoSGhhTDFjelorVjUxS0VGawpoUXNLWlVRQm0zbFhnM2lYU0xCdGxQZ0ZyODNDNUE3c2NXSUZiL25lUTZxNVRFVWJsL2MzRHFsNkYxcC82ZHJFCjlRT2ZFSTNTTnNzWEhHbnBiT25HSjNpblJNOUdBd2x0eTZCTFptVkhBb0dCQUtDR0Q0L3ZyNW5rNTNaT3kyY0sKeVRuVFYwZStmQWhjUkRBNWd1WTFQSVh0ajZnemhXNU0vRFgwcU93TEVGM0ROcDIrUDQ2NkpETTJoMjhzYzRwSQpFNDdmVWliUDdOeDhoWWdZWVhQL2FLOGJNaHduWGpSWlMzK2ZGaGlTRk5yUitjOTc1YmN0dk5ZUm9qOUE2Y0RFClpGRzdHd1Z1UjlTYmZkTnYzdHZjN3pVUkFvR0JBT0o0eGtZbEszSTJScTdLbnhpckxVdCs5WkltRldWdnUyRUQKUXFjYXdHYjhCSTY3Y0FuYk5lbE1VVkttWjUrVkNqNGE4ZG5Yd2p1d1hkY2Q4QnNKOVNUVnlXelFlYWNOR1MwOQp5dENMTmtJdE5DeDA5alZ4MGgvNUpnWWZ1UDRxdy9BaUJoL29oYUt1SzFlTHpWeVpNaXFyMEtoazJUcHloaTZPCno0SGVObCt6QW9HQkFOSTB1VWlWMnEwNHNRRmNDQldVb0FjMEQ0M3JxL2RIVmNtRjNIRWhpNXBMTm92UFN6bWoKbHVOaHhIS1g0dlA3Z3dhbWp3dmdXZ01PWlY1ZytoSFJnS09GZjdsOW5EYjIwTWFXN3IrdjdZT21UNC9welEzawpUMXNqdTJPcEVwUmx3U1BBZkMvUENFWlVnMlFOQmZNUEtySkNiYkoyalB3bmladytwTDFkQzhIZgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMVENDQWhXZ0F3SUJBZ0lRTVFYVmJ4c1M5MEx2RFVLMjVLbi8zekFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkdGFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdOakl3TVRRMU56VTFXaGNOTWpVd05qSXdNVFExTnpVMVdqQXlNVEF3TGdZRFZRUURFeWR0CmFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2EzN3B3L3J3L05sbmxvSXVMemVwMVV0bWVTeUxoTnA2WApQTDJoMkx6ZVVzNndjVjdaT0JYU0o3dnZLejF2bG1admRXMzcrNHJHNTNSSWFCWXB2dXNCZlpHUDV4UUlZTTM3CnBrSmJ2Vm9qY3VtL0pOL3BhTEFQclA1dnkxa1hlNG1talgvcVNnTDRZT2ZodjRvQ2Qxc0wrbituUzJBNXBQeEIKSUNGY21mMFo3VnFwSmNkTUtuaE1GZmRHYjh3bE1zeVR0QmV2Q1BLeGlUcEk0QmJQT2Ztdzd3Z3ZUQlQ0bUlTVgpDMXJBWllyU0RYdlErRUNTbnZTV0cvbTF4d2F0NUZRWjBySUtmbkVrMlh1SlVJaVVQWWlBa0dxUHE3V2lnMVdpCjY0bHBXcHJIb1A3M3k0cGFPSExPSU5XcmRza2RnNVlta2taam40a2ZrNm5RWnNSeTduMHhBZ01CQUFHalB6QTkKTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJdwpEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVpLWmgyRkFWcnl1Q0I1STRQbnl3Cm5KMWFNbVFzUFN1L0o4SzR4UG42Vm9SZTluWHdLZ2JESndVdEU3Qmh3MGxEMis0QWw0TkxUSUlTb3hubXNKMFoKRVI1YzExQ1dHRnNvcklvbWI5TnJLSVc4bjkyTjlaNWVUekdQZThnejIrTmtLYUp6SDlISHRIZGdMd05zWHRRTQpqbFhDa00ydnpvQlBtbnFjclRFaCtVYWZSUCswQ01YNWplVlJTdDBIVGphMEJ5U3Jnd0RXNm12SnBMMndnRTFwClRCS0JTamlXYWJ4a0JrM3h6ZVd1dnFXRzhxQUc5R3l6V0RQeGhIaEM2YkRaanRKTjRRN3dxSkdQbHFEbGNuN1UKUExYdjBQL0tQY05ZZWxuMmFhV0xJMXprUSs3bktEVUtRSkR1aktQdUw2ZUVYOG96UlNBR1B0dEhqQUFyS0dYcApsUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXQrNmNQNjhQelpaNWFDTGk4M3FkVkxabmtzaTRUYWVsenk5b2RpODNsTE9zSEZlCjJUZ1YwaWU3N3lzOWI1Wm1iM1Z0Ky91S3h1ZDBTR2dXS2I3ckFYMlJqK2NVQ0dETis2WkNXNzFhSTNMcHZ5VGYKNldpd0Q2eitiOHRaRjN1SnBvMS82a29DK0dEbjRiK0tBbmRiQy9wL3AwdGdPYVQ4UVNBaFhKbjlHZTFhcVNYSApUQ3A0VEJYM1JtL01KVExNazdRWHJ3anlzWWs2U09BV3p6bjVzTzhJTDB3VStKaUVsUXRhd0dXSzBnMTcwUGhBCmtwNzBsaHY1dGNjR3JlUlVHZEt5Q241eEpObDdpVkNJbEQySWdKQnFqNnUxb29OVm91dUphVnFheDZEKzk4dUsKV2poeXppRFZxM2JKSFlPV0pwSkdZNStKSDVPcDBHYkVjdTU5TVFJREFRQUJBb0lCQUQxOG80V203TS9mNFRMMApXVktvN3ZPamIvaVRkZ2FaNjc2NWc4UVV5MjhzeXhocitpOGRRRFNPUitPOWRBZXdXM3pXejFLaVhFZDVyc1hzClpSZ3Z6eGRwWmZnTzB2bzhqS3JqS0NkSjl0WnFFZmtzUjZWZ1JiNERmWVNlNUFFWnI5MnJBZVRmZTJ4bTlNakEKaGFkVEFaZXczU3RyRm9uc1FhWU5mcEZJSlo4NzZZaS9iY1ZPUUN3WS91bGhpbFVQUXZ2Z2grdGVEcTR3TVZJQQp6M1djNXFXTXB1WHdwcUI2bVR6VUpUS3ZIVTlpV0pJMXkzOHAwd2JVMUZqT0FjRkN2NC92SWtvOWEwUmFKa0pWCkR2UWJ2b1Ivc2RJUy8wa1NHVGY3S0FFaXBvUko1VXozTUVZMmNzWFRrRUF5T1phMFNpdkE5WUc0L0h5Vk14NkoKOUxBQzZORUNnWUVBdzlxZ2sxZFJOMCtrTHFEbGZJZXVETXRDR09YK0x3RjlIc0M0VWp3dTJTeC80T01nbDd3Ygo0Ylo4UmkrOGE5RGZVL3FUTzM2YndCK0ZBS1Z6NWpyOU5icWNrcStERjg3YkI1Vk5YbEhPZEpzL2xka2lqS29KCjJxVnZoaGxmY0Z2ODhkbFB6bE5PVjgvc21qL0lYTk9vcll5QlBMWmIrY2FlTEZFbnA5dEVBZ1VDZ1lFQXltOWoKUTJWNW5VcTJOck9iQlRlTk1NZzVTUlNROEJrdGlRd2t6VUlPTHpQVW1VR2xpVFdDUWMzRkZnMXM2cU1CVDEvegpGbWV1RG9JR0pzVDBhOVVVdEUwWjBzdDBNaXRUL3lqeFg1aEtxdHBEdG1HOFRLZm1SRnFISHd1c0xwSzNsZXZnCmNabmtRdUNmOHNXbmEzWjAwaHdKdVpJenNBbHAvSXBURUJqbm1qMENnWUJGTWM2ZGY3SHY2ckZFMEErRDZhT3kKWFhWaXVvOE5LR2QrSC9SL0NVZzc3aDdYNHlhMnRQemN4ODRzTmQxSjhpZVUwZWlHa25xUWJCSmZZaFVLZURqUgpiTGE0bEUycWNhaXNpekVrYTU2WFQrb3RGT1BCOHFrOG1FcEloRnBWcGdvOW45czBOL1pyeThmNXp5TUl1TGJWCmFkaVhESTUrTm8vWGRHeWdQelZOeVFLQmdHWmVQNDhVWUpSMjlIL2pBVkI1RUJBTUlGUGhiNDNLM2FrQkdCY28KQVM1RGdvM2hrWWs2SXQyTjVjMUtDcnI0cFMvemNHVHpGeVRGQWNGWE5kYlYwUHVBUmIvQUhNbEYrZHI5WkZvWQpGQ0lqNzd2cDNxUFEvL091NThkK1NwcmVuTEhXcnhBalp6ZWVpYVBsNmN6QkFVQkM1M1FOQjlCTVltbFB0Y05kCkpMbHRBb0dCQUorQ3RiZ0ZCTTIvNzNUOXBHODhtV0ZCeTU0cnFGV2lCWUNPVHZPMlZoOEQzdVY2UkFYUVlPclEKZUxBVXVaRG1OVkdwRERyak41U3pPNVQxZHNZWnNtekJCRTZuQ01JN2grcnBGelB4WGdiZ2ZNcEpjU1k1ZzlUYgo0ZERZbzlLUVFlT1lQYVVwZUU1Q09wM29KZVpFdlU2NEhpZ2R1by9iTjFLT0p1QzlRU2szCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-mongodb-connection"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
type: kubernetes.io/basic-auth
stringData:
  username: "userM"
data:
  password: "cHoxdlU4S0pndm9HdG12Z0tpclMweU40T1RKRWhxbnk="
  adminPassword: "blVDWTFGVUl1MVZ4UFNrUTd3Undzb2UxdDNOazVMbEdXclVxTDF0MA=="
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMVENDQWhXZ0F3SUJBZ0lRZFF3NTNTRmJqUGFudmlGTkpGdDMyVEFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkclpYbGpiRzloYXkxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdOakl3TVRRMU56VTJXaGNOTWpVd05qSXdNVFExTnpVMldqQXlNVEF3TGdZRFZRUURFeWRyClpYbGpiRzloYXkxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3E5RnIwV0RUNkhiZXo0SWw1dnNsdmVUdVBWSXIwc3dqdApCVGRlcHBKcEYzUW1mNEw1VElDSlRxMnRSYUtmdFByUVRrbDJianE0Nk9YM3dCSXl2SWI5MnFwNGZRcFYyYW5yCjR2am9WQ3FIaUlUNC8wa25DUy9VenJhUkRDWnd5bzBXVkFVb0dLUkRwVkJvYlhkbjExb05HRG8rNk9jMkJDWFcKd1hVWFpFZGlDaTlKNGVERm1TMnNGS1ZQNVpXMkE5L2JSMXdRY1VlWGIreC9yN0FQakMwdGl1MkUxa2JIQ04zRQpxNGRkcEdGK05oZjF4UzlSYnNCYlhxR0lQMVRxNUl0QytqNE9kWUZIZzhDMWcrWERtb3FPeUlTL0cwbXY5Y3hyCjZMOVdnKzlvRkpqRTI0eXhNRDd4QXE1LzRwbzJFUVhiejNjSG5QQXpEN1diNkd5MlZIZ1pBZ01CQUFHalB6QTkKTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJdwpEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUtiZE01U1F0WThTRFZlUndvd1NxCkx5MHdqaTBaSE8wNkFvWUJKSGNmSEp5TTYvcUo4NTkyWFpDK2VwVzk5Y1lBaU1iTUpYanBuaHMxRWo0VndtZHoKT0sremRBR2xUcmdjamEyT3dHMDJXdGJvNFBWN2hWRk5ucHNVc3EzVWpDYmIvRDAxMHhsVWI1ZG53QWhodFZacQpacExpQndmcDFuUER4Q1dYUHBPVzQ4YlJ2eUFkTG1sTXZTWjNheEFVVXNEMkxPV05YNGxiSmppOHhucEd3aWZCCkFGZE1wcWFRN0pxTnF2emE1cmh6Y0FyRGFiZDVKUGhQQ3FJQ3h3c0t1MTdPcThMbGZSMHlXZkZWSEtjWno3NlYKTzBLSlBvQXNTY3VFdkx1Q2lHTEdMU0ZzeXVJS1RaWmdhVmg2ZmlBTU1Pam8yRWhveXExQzk4RXlMWmZxaHc3dwp4UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcXZSYTlGZzAraDIzcytDSmViN0piM2s3ajFTSzlMTUk3UVUzWHFhU2FSZDBKbitDCitVeUFpVTZ0clVXaW43VDYwRTVKZG00NnVPamw5OEFTTXJ5Ry9kcXFlSDBLVmRtcDYrTDQ2RlFxaDRpRStQOUoKSndrdjFNNjJrUXdtY01xTkZsUUZLQmlrUTZWUWFHMTNaOWRhRFJnNlB1am5OZ1FsMXNGMUYyUkhZZ292U2VIZwp4Wmt0ckJTbFQrV1Z0Z1BmMjBkY0VIRkhsMi9zZjYrd0Q0d3RMWXJ0aE5aR3h3amR4S3VIWGFSaGZqWVg5Y1V2ClVXN0FXMTZoaUQ5VTZ1U0xRdm8rRG5XQlI0UEF0WVBsdzVxS2pzaUV2eHRKci9YTWEraS9Wb1B2YUJTWXhOdU0Kc1RBKzhRS3VmK0thTmhFRjI4OTNCNXp3TXcrMW0raHN0bFI0R1FJREFRQUJBb0lCQVFDa0JycXlVV1BiUytJegp5OC84S1N1Yk1vWU1Hd0VNa2krUlEzMEI2dTcxdUpRd1VBNDU1c1k1ZUcwNW9HUE51dGNnUU0xSnZhL0lOV1paClZVZmd1SFVKWXVKSG95bmtmMmtETkk3QVUrbE9pNVdTVjFjNEJoK0hueU1hZnI3dlg5a0pRR3FHTTBhQXhVQW0KUWtuY0w0dHVudjFiMlJubkFRblJTV053b3oyK2VSYS9CQktYTTlYUUVUZ08rWmM1cGg4dXBZY01UdmFveTZSLwo0dDJLSzFvKy93K3ZnZEk5c28xTGp4K0ZBaGg3WmxrVTZybHExQTkvRENDOCtiN3FNMTJtaTVEZUo0ak9Ed1oxCmxMZVZmZ1Y4eHJEc1ZpbzhuMVJwUDdyRk5hcWpzZWd0NDh0d2dYYi9Fb3dLZVJTL1dQZmlOQVZNWlBtUThpL1oKWEFuUndvZWxBb0dCQU9CelRsTGhHMDJLZDJ1YUpXMHg4cVVXai82bHVjOGphQ3JEY0NXaW1uYUxod2pXRTI2MQpobGV2L1N6YW0xSVRva1R6dTJmRTZXaWlpUjJqZnczTG9YbHNMUGlVcU4wQW05SmpNRStKSjdEZ3dzd0RRL3VQCnhoWTMzRnoyVEZtLzZmS0VZaUNKT3hWNVVJYUVTanNLSnI3WWxqcUJaVldWQVJ6Vjl3QlFpb2RyQW9HQkFNTDgKQ1R1L1I0UmI3d2dBQXFvT1RINlVONnRoYzF3YVBrTy9FNEZOU1lDd003Z0EwVnJQOHNsZ2dWQlNOeUN5Uzh1QQo4aVVaTGFMSUxncy9heHo3UllkL0lNZ29aUHMvU2h3RnI0L3pINFY5RWRuVUNpODU4RGkwN3V2S2E1Y3FkRlNICkhBTU9xdm1RV0Q5cnBtRTYxVWI4eXAvYStWb0lVZWdObmQ2dE1CT0xBb0dCQUsxUW5GUm5PcHYvcGdOU3ZqKzUKWi9LT241WTFCbXVxblk4WDV3dElxaG1MMkRPOGlyamNOdWFUSU41MzE2UGpRVlFaR01jaVNGSGg0QnNnMnNVZQpUb3ZpT2oraEcxdThVcFo4dlJ0TmYzYVh1Qk90R2R1d3czYjRuNUt4SlhmUU42aHJEUkt1cFE4SjVHSmEySzhLClFhend0ZUJyZG9KRlV0eWZZK0c4VDV3TkFvR0FMdis3Wmdoc1A2NDlScXRoK1FXclVKTi9lN0xvc0ptdXludWoKUXZhVE1nN0cyS0p4MURidHFiYTJWTnNNYUxneFp1TTArdFkvMXMzenMwaGRGRVpJOHlra2lMcWI1S2ZUd0Q5cQptd01hWlAzSnNMelltNXVXbU1TY0ZuL2JRVHU5Z0taMGpSUWJDRDdQMXJHbkVDYXpSQUlwQVRFeUM0NlgxNXg0Cm9qVVNzcE1DZ1lBb0Q0eDlldWQ0aE9rWm1paUpPY0h0WGNKNGRXZWg2RXpWSmdiMkgraHhVa0g5NGplV1pOWVgKUXNsNWVmeGpqT1FEM20vSzkyVktuMEgyNGJLbHBtVkVnV25Mb3pZYVUxL2VhSnZoRXhROVdXMGhQTUVrNzcwRgpENjBMc3U5cnlIQmR3ajV1OUJkVmVIVEMrTXdVc2VFTEVsNXo0ajBuZUpYZWp1blM3Rm5DUmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-admin"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
type: kubernetes.io/basic-auth
stringData:
  username: "admin"
  postgresUsername: "userP"
data:
  password: "THUyUFNnb1dPV2dJT1BTeldmMTYzRGE1TTlVdE8xWExFUkoyUFF0Sw=="
  postgresPassword: "TFJzYlRwdk11ZGZ3NHpsSHNTZk9EeWtXQnp0eTh0YWY="
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-config"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
data:
  features.properties: |-
    features.feature.microcks-hub.enabled=true
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles=admin,manager,manager-any

    features.feature.repository-filter.enabled=false
    features.feature.repository-filter.label-key=app
    features.feature.repository-filter.label-label=Application
    features.feature.repository-filter.label-list=app,status

    features.feature.repository-tenancy.enabled=false
    features.feature.repository-tenancy.artifact-import-allowed-roles=admin,manager,manager-any

    features.feature.async-api.enabled=false
    features.feature.async-api.default-binding=KAFKA
    features.feature.async-api.endpoint-WS=microcks-ws-microcks.192.168.99.100.nip.io
    features.feature.async-api.endpoint-KAFKA=microcks-kafka.192.168.99.100.nip.io:443

    features.feature.ai-copilot.enabled=false
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://microcks-microcks.192.168.99.100.nip.io/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm=microcks
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled=false
    async-api.default-binding=KAFKA
    async-api.default-frequency=10

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
    
    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key

    # AI Copilot configuration properties
    ai-copilot.enabled=false
    ai-copilot.implementation=openai
    ai-copilot.openai.api-key=sk-my-openai-api-token
    ai-copilot.openai.timeout=20
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="INFO"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-keycloak-config"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "users" : [
        {
          "username" : "user",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user" ]
          }
        },
        {
          "username" : "manager",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user", "manager" ]
          }
        },
        {
          "username" : "admin",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "realm-management": [ "manage-users", "manage-clients" ],
            "account": [ "manage-account" ],
            "microcks-app": [ "user", "manager", "admin" ]
          }
        }
      ],
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "groups": [
        {
          "name": "microcks",
          "path": "/microcks",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": [
            {
              "name": "manager",
              "path": "/microcks/manager",
              "attributes": {},
              "realmRoles": [],
              "clientRoles": {},
              "subGroups": []
            }
          ]
        }
      ],
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ],
        "realm-management": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manage-users",
              "manage-clients"
            ]
          }
        ]
      },
      "clients": [
        {
          "clientId": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "redirectUris": [
            "https://microcks-microcks.192.168.99.100.nip.io/*"
          ],
          "webOrigins": [
            "+"
          ],
          "fullScopeAllowed": false,
          "protocolMappers": [
            {
              "name": "microcks-group-mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "microcks-groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "microcks-serviceaccount",
          "secret": "ab54d329-e435-41ae-a900-ec6b3fe15c54",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "keycloakVersion": "10.0.1"
    }
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    

spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: spring
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: spring-grpc
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
    name: postman-runtime
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: postman-runtime
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: mongodb
    protocol: TCP
    port: 27017
    targetPort: 27017
    nodePort: 0
  selector:
    app: "microcks"
    container: mongodb
    group: microcks
  type: ClusterIP
  sessionAffinity: None
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: keycloak
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks"
        container: spring
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: spring
        image: quay.io/microcks/microcks:1.9.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@microcks-mongodb:27017/${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_DATABASE
            value: microcks
          - name: POSTMAN_RUNNER_URL
            value: http://microcks-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://microcks:8080
          - name: KEYCLOAK_ENABLED
            value: "true"
          - name: KEYCLOAK_URL
            value: https://keycloak-microcks.192.168.99.100.nip.io
          - name: KAFKA_BOOTSTRAP_SERVER
            value: "microcks-kafka-kafka-bootstrap:9092"
          - name: SERVICES_UPDATE_INTERVAL
            value: 0 0 0/2 * * *
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "microcks-config"
            mountPath: "/deployments/config"
          - name: "microcks-grpc-certs"
            mountPath: "/deployments/config/grpc"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "microcks-config"
          configMap:
            name: "microcks-config"
        - name: "microcks-grpc-certs"
          secret:
            secretName: "microcks-microcks-grpc-secret"
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks-postman-runtime"
        container: postman-runtime
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: postman-runtime
        image: quay.io/microcks/microcks-postman-runtime:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      containers:
      - name: mongodb
        image: centos/mongodb-36-centos7:latest
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-mongodb-connection"
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "microcks-mongodb-connection"
        - name: MONGODB_DATABASE
          value: "microcks"
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 512Mi
        volumeMounts:
        - name: "microcks-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "microcks-mongodb-data"
        persistentVolumeClaim:
          claimName: "microcks-mongodb"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: keycloak-server
        image: quay.io/keycloak/keycloak:22.0.3
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 400m
            memory: 512Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        - '--hostname=keycloak-microcks.192.168.99.100.nip.io'
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-keycloak-admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "microcks-keycloak-postgresql"
        - name: KC_PROXY
          value: "edge"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: microcks-keycloak-config
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "microcks-keycloak-config"
        configMap:
          name: "microcks-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 26
        runAsGroup: 26
        fsGroup: 26
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: centos/postgresql-95-centos7:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
              -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_DATABASE
          value: root
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: '100'
        - name: POSTGRESQL_SHARED_BUFFERS
          value: 12MB
        volumeMounts:
          - name: "microcks-keycloak-postgresql-data"
            mountPath: "/var/lib/pgsql/data"
      volumes:
      - name: "microcks-keycloak-postgresql-data"
        persistentVolumeClaim:
          claimName: "microcks-keycloak-postgresql"
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "microcks-microcks.192.168.99.100.nip.io"
    secretName: microcks-microcks-ingress-secret
  rules:
  - host: "microcks-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks"
            port:
              number: 8080
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  tls:
  - hosts:
     - "microcks-grpc-microcks.192.168.99.100.nip.io"
  rules:
  - host: "microcks-grpc-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-grpc"
            port:
              number: 9090
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "keycloak-microcks.192.168.99.100.nip.io"
    secretName: microcks-keycloak-ingress-secret
  rules:
  - host: "keycloak-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-keycloak"
            port:
              number: 8080
