---
# Source: grafana-pdf-exporter/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-grafana-pdf-exporter-secret
type: Opaque
stringData:
  GRAFANA_USER: SETME
  GRAFANA_PASSWORD: SETME
  SENDGRID_API_KEY: SETME
---
# Source: grafana-pdf-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana-pdf-exporter
  labels:
    app.kubernetes.io/name: grafana-pdf-exporter
    helm.sh/chart: grafana-pdf-exporter-2.1.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-pdf-exporter
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana-pdf-exporter
        helm.sh/chart: grafana-pdf-exporter-2.1.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      volumes:
      - name: "grafana-pdf-exporter-config"
        configMap:
          name: my-release-grafana-pdf-exporter
      containers:
      - name: grafana-pdf-exporter
        image: ghcr.io/wiremind/grafana-pdf-exporter:v1.7
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: my-release-grafana-pdf-exporter-secret
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
---
# Source: grafana-pdf-exporter/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-pdf-export-cronjob-my-first-cron
  labels:
    app.kubernetes.io/component: grafana-pdf-export-cronjob
spec:
  concurrencyPolicy: Allow
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  # Avoid 00:00 -> 03:00, there are a lot of activities going on because of
  # ElasticSearch ILM
  schedule: "0 6 1 * *"
  suspend: false
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          containers:
          - command:
            - sh
            args:
            - -c
            - |
              set -e;
              set -x;
              # Construct the dashboard Input URL and Output FILENAME
              # $1 : grafana input dashboard, $2 : grafana pdf dashboard
              # node grafana_pdf.js $1 $GRAFANA_USER:$GRAFANA_PASSWORD $2
              # Parse the dashboard to set the correct date
              # FROM and TO are computed according to MONTHLY or DAILY
              if [ ! -z "$MONTHLY" ]
              then
                # Replace dates in the Dashboard URL input
                echo $DASHBOARD_IN > dashboard_url
                # Replace FROM field
                date_from=$(date -d "`date +%Y%m01` -1 month" +%s%3N)
                #multiply=1000
                # date_from_epoch=$($date_from * $multiply)
                sed -i "s/from=.*\&to/from=$date_from\&to/g" dashboard_url
                # Replace TO field
                date_to=$(date -d "`date +%Y%m01` " +%s%3N)
                # date_to_epoch=$( $date_to * $multiply )
                sed -i "s/to=.*\&kiosk/to=$date_to\&kiosk/g" dashboard_url

                # Prepare the Dashboard Output name
                echo $DASHBOARD_OUT > dashboard_out
                #From 1st day of last month
                sed -i "s/from.*_to/from_$(date -d "`date +%Y%m01` -1 month" +%Y-%m-%d)_to/g" dashboard_out
                # Replace TO field
                #To last day of last month
                sed -i "s/to.*/to_$(date -d "`date +%Y%m01` " +%Y-%m-%d).pdf/g" dashboard_out

                URL="$(cat dashboard_url)"
                OUTPUT="$(cat dashboard_out)"

                # 1st parameter is input dashboard / 2nd parameter is output file
                ./grafana_pdf_exporter.sh $(cat dashboard_url) "/tmp/$(cat dashboard_out)"

                # Send the email
                export FROM_NAME=${EMAIL_SENDER_NAME}
                export FROM_EMAIL=${EMAIL_SENDER_EMAIL}
                bash -x sendgridSendEmail.sh -t $EMAIL_SEND_TO \
                  -s "$EMAIL_SUBJECT" \
                  -o "$EMAIL_BODY" \
                  -a "/tmp/$(cat dashboard_out)"
              fi
            env:
              - name: MONTHLY
                value: "true"
              - name: DASHBOARD_IN
                value: https://xxxxxx/d/prometheus-blackbox-exporter/prometheus-blackbox-exporter?orgId=1&from=1619820000000&to=1622498399000&kiosk
              - name: DASHBOARD_OUT
                value: output.pdf
              - name: EMAIL_SEND_TO
                value: "platform@corporate.io"
              - name: EMAIL_SENDER_EMAIL
                value: "platform@corporate.io"
              - name: EMAIL_SENDER_NAME
                value: "My Team"
              - name: EMAIL_SUBJECT
                value: "Pod Dashboard"
              - name: EMAIL_BODY
                value: "Here is the monthly dashboard"
            envFrom:
              # Used to get AWS, Grafana and Sendgrid variables
              - secretRef:
                  name: my-release-grafana-pdf-exporter-secret
            image: ghcr.io/wiremind/grafana-pdf-exporter:v1.7
            name: "my-first-cron"
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: false
          restartPolicy: Never
          securityContext:
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
---
# Source: grafana-pdf-exporter/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: grafana-pdf-export-cronjob-my-second-cron
  labels:
    app.kubernetes.io/component: grafana-pdf-export-cronjob
spec:
  concurrencyPolicy: Allow
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  # Avoid 00:00 -> 03:00, there are a lot of activities going on because of
  # ElasticSearch ILM
  schedule: "0 6 1 * *"
  suspend: false
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          containers:
          - command:
            - sh
            args:
            - -c
            - |
              set -e;
              set -x;
              # Construct the dashboard Input URL and Output FILENAME
              # $1 : grafana input dashboard, $2 : grafana pdf dashboard
              # node grafana_pdf.js $1 $GRAFANA_USER:$GRAFANA_PASSWORD $2
              # Parse the dashboard to set the correct date
              # FROM and TO are computed according to MONTHLY or DAILY
              if [ ! -z "$MONTHLY" ]
              then
                # Replace dates in the Dashboard URL input
                echo $DASHBOARD_IN > dashboard_url
                # Replace FROM field
                date_from=$(date -d "`date +%Y%m01` -1 month" +%s%3N)
                #multiply=1000
                # date_from_epoch=$($date_from * $multiply)
                sed -i "s/from=.*\&to/from=$date_from\&to/g" dashboard_url
                # Replace TO field
                date_to=$(date -d "`date +%Y%m01` " +%s%3N)
                # date_to_epoch=$( $date_to * $multiply )
                sed -i "s/to=.*\&kiosk/to=$date_to\&kiosk/g" dashboard_url

                # Prepare the Dashboard Output name
                echo $DASHBOARD_OUT > dashboard_out
                #From 1st day of last month
                sed -i "s/from.*_to/from_$(date -d "`date +%Y%m01` -1 month" +%Y-%m-%d)_to/g" dashboard_out
                # Replace TO field
                #To last day of last month
                sed -i "s/to.*/to_$(date -d "`date +%Y%m01` " +%Y-%m-%d).pdf/g" dashboard_out

                URL="$(cat dashboard_url)"
                OUTPUT="$(cat dashboard_out)"

                # 1st parameter is input dashboard / 2nd parameter is output file
                ./grafana_pdf_exporter.sh $(cat dashboard_url) "/tmp/$(cat dashboard_out)"

                # Send the email
                export FROM_NAME=${EMAIL_SENDER_NAME}
                export FROM_EMAIL=${EMAIL_SENDER_EMAIL}
                bash -x sendgridSendEmail.sh -t $EMAIL_SEND_TO \
                  -s "$EMAIL_SUBJECT" \
                  -o "$EMAIL_BODY" \
                  -a "/tmp/$(cat dashboard_out)"
              fi
            env:
              - name: MONTHLY
                value: "true"
              - name: DASHBOARD_IN
                value: https://xxxxxx/d/prometheus-blackbox-exporter/prometheus-blackbox-exporter?orgId=1&from=1619820000000&to=1622498399000&kiosk
              - name: DASHBOARD_OUT
                value: output.pdf
              - name: EMAIL_SEND_TO
                value: "platform@corporate.io"
              - name: EMAIL_SENDER_EMAIL
                value: "myteam@corporate.io"
              - name: EMAIL_SENDER_NAME
                value: "My Team"
              - name: EMAIL_SUBJECT
                value: "Pod Dashboard"
              - name: EMAIL_BODY
                value: "Here is the monthly dashboard"
            envFrom:
              # Used to get AWS, Grafana and Sendgrid variables
              - secretRef:
                  name: my-release-grafana-pdf-exporter-secret
            image: ghcr.io/wiremind/grafana-pdf-exporter:v1.7
            name: "my-second-cron"
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: false
          restartPolicy: Never
          securityContext:
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
