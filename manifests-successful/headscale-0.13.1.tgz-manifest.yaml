---
# Source: headscale/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-headscale
  labels:
    app.kubernetes.io/service: my-release-headscale
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: headscale
    app.kubernetes.io/version: 0.22.3
    helm.sh/chart: headscale-0.13.1
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 9090
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: headscale
---
# Source: headscale/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-headscale
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: headscale
    app.kubernetes.io/version: 0.22.3
    helm.sh/chart: headscale-0.13.1
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: headscale
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: headscale
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      initContainers:
        - command:
          - sh
          - -c
          - |
            if [[ -f "$CONFIG_DIR/config.yaml" ]]; then
              echo 'Config already exists' >&2
            else
              echo 'Writing empty config' >&2
              mkdir -p "$CONFIG_DIR"
              cat <<- 'EOF' >"$CONFIG_DIR/config.yaml"
                # It's suggested to use environment variables to configure Headscale.
                # For config reference, see https://github.com/juanfont/headscale/blob/main/config-example.yaml
                # To configure any of these as an env:
                #   1. Flatten object keys using "_"
                #   2. Prefix with "HEADSCALE_"
                #
                # For example:
                #   - "listen_addr" becomes "HEADSCALE_LISTEN_ADDR"
                #   - "log.level" becomes "HEADSCALE_LOG_LEVEL"
            EOF
            fi
          env:
          - name: CONFIG_DIR
            value: /etc/headscale
          image: alpine
          name: config
          volumeMounts: null
      containers:
        - name: my-release-headscale
          image: ghcr.io/juanfont/headscale:0.22.3
          imagePullPolicy: IfNotPresent
          args:
            
            - headscale
            - serve
          env:
            - name: HEADSCALE_DB_PATH
              value: /etc/headscale/db.sqlite
            - name: HEADSCALE_DB_TYPE
              value: sqlite3
            - name: HEADSCALE_DERP_AUTO_UPDATE_ENABLED
              value: "true"
            - name: HEADSCALE_DERP_UPDATE_FREQUENCY
              value: 24h
            - name: HEADSCALE_DERP_URLS
              value: https://controlplane.tailscale.com/derpmap/default
            - name: HEADSCALE_DNS_CONFIG_BASE_DOMAIN
              value: example.com
            - name: HEADSCALE_DNS_CONFIG_MAGIC_DNS
              value: "true"
            - name: HEADSCALE_DNS_CONFIG_NAMESERVERS
              value: 1.1.1.1 1.0.0.1
            - name: HEADSCALE_EPHEMERAL_NODE_INACTIVITY_TIMEOUT
              value: 30m
            - name: HEADSCALE_IP_PREFIXES
              value: fd7a:115c:a1e0::/48 100.64.0.0/10
            - name: HEADSCALE_LISTEN_ADDR
              value: 0.0.0.0:8080
            - name: HEADSCALE_METRICS_LISTEN_ADDR
              value: 0.0.0.0:9090
            - name: HEADSCALE_NOISE
              value: '{}'
            - name: HEADSCALE_NOISE_PRIVATE_KEY_PATH
              value: /etc/headscale/noise_private.key
            - name: HEADSCALE_PRIVATE_KEY_PATH
              value: /etc/headscale/private.key
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 0
            periodSeconds: 10
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            initialDelaySeconds: 0
            periodSeconds: 5
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
