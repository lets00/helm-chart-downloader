---
# Source: console/templates/config-init.yaml
# Service account "config-init"
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  name: "config-init"
  labels:
    app.kubernetes.io/component: "config-init"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
---
# Source: console/templates/service-account.yaml
# Service account main Stratos Deployment
# Allows it to create some resources in its namespace
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  name: "stratos"
  labels:
    app.kubernetes.io/component: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
---
# Source: console/templates/secrets.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "my-release-secret"
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "console-secret"
    helm.sh/chart: "console-4.4.0"
data:
  client: "Y2Y="
  clientSecret: ""
  localAdminPassword: ""
  smtpUser: ""
  smtpPassword: ""
---
# Source: console/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-db-secret"
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "console-db-secret"
    helm.sh/chart: "console-4.4.0"
type: Opaque
data:
  rootPassword: "dHZQcFB0SkVFMmVnZnRKNk9nYlFVMDlVVWVxMjNsdHE="
  password: "V1BvbXF5ak9IMzh6b0RwV1E1ZlNFR013V2VsalVGVlU="
  user: "Y29uc29sZQ=="
  database: "Y29uc29sZQ=="
  sessionStoreSecret: "bnF4WU9iWlZHMVI1eXBIUjFqVDN3akNkUjZ0T2Fxd283ZFhGUXk1Y0pCcFRsTTRYZzE1YW80SEdYNGhiaFpTdQ=="
---
# Source: console/templates/volumes.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: console-mariadb
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "console-mariadb-volume"
    helm.sh/chart: "console-4.4.0"
  annotations:
    volume.alpha.kubernetes.io/storage-class: default
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
---
# Source: console/templates/config-init.yaml
# Role "config-init-role" only used by account "[- config-init]"
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  name: "config-init-role"
  labels:
    app.kubernetes.io/component: "config-init-role"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
rules:
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs:
  - "create"
  - "post"
  - "get"
  - "delete"
---
# Source: console/templates/service-account.yaml
# Role "stratos-role" only used by account "stratos"
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  name: "stratos-role"
  labels:
    app.kubernetes.io/component: "stratos-role"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
rules:
- apiGroups:
  - ""
  resources:
  - "secrets"
  - "pods"
  verbs:
  - "create"
  - "update"
  - "get"
  - "list"
  - "delete"
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "get"]
---
# Source: console/templates/config-init.yaml
# Role binding for service account "config-init" and role "config-init-role"
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "config-init-secrets-role-binding"
  labels:
    app.kubernetes.io/component: "config-init-secrets-role-binding"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
subjects:
- kind: "ServiceAccount"
  name: "config-init"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: "config-init-role"
---
# Source: console/templates/service-account.yaml
# Role binding for service account "stratos" and role "stratos-role"
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "stratos-role-binding"
  labels:
    app.kubernetes.io/component: "stratos-role-binding"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
subjects:
- kind: "ServiceAccount"
  name: "stratos"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: "stratos-role"
---
# Source: console/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "console-ext-service"
    helm.sh/chart: "console-4.4.0"
  name: "my-release-ui-ext"
spec:
  selector:
    app: "my-release"
    component: stratos
# Note: HTTP Port is optional - HTTPS port is always included
# HTTP Service (optional)
  type: ClusterIP
  ports:
# HTTPS Service
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
---
# Source: console/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-mariadb"
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "stratos-db-service"
    helm.sh/chart: "console-4.4.0"
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: "my-release"
    app.kubernetes.io/component: stratos-db
---
# Source: console/templates/database.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stratos-db
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "stratos-db"
    helm.sh/chart: "console-4.4.0"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "stratos"
      app.kubernetes.io/component: "stratos-db"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "stratos"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/version: "4.4.0"
        app.kubernetes.io/component: "stratos-db"
        helm.sh/chart: "console-4.4.0"
        app: "my-release"        
    spec:
      containers:
      - name: mariadb
        image: docker.io/splatform/stratos-mariadb:4.4.0-bc65c315c
        imagePullPolicy: Always
        env:
        - name: STRATOS_IMAGE_REF
          value: "4.4.0-bc65c315c:1"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: rootPassword
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: user
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: database
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - /dbping.sh
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /dbping.sh
          initialDelaySeconds: 20
          periodSeconds: 15
          timeoutSeconds: 3
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: console-mariadb
---
# Source: console/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stratos
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "4.4.0"
    app.kubernetes.io/component: "stratos"
    helm.sh/chart: "console-4.4.0"
    app: "my-release"
    component: stratos
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: "stratos"
      app.kubernetes.io/component: "stratos"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "stratos"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/version: "4.4.0"
        app.kubernetes.io/component: "stratos"
        helm.sh/chart: "console-4.4.0"
        app: "my-release"
        component: stratos
    spec:
      containers:
      - image: docker.io/splatform/stratos-console:4.4.0-bc65c315c
        imagePullPolicy: Always
        name: ui
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        env:
        - name: STRATOS_IMAGE_REF
          value: "4.4.0-bc65c315c:1"
        - name: CONSOLE_CERT_PATH
          value: "/my-release-cert-volume"
        - name: SSL_PROTOCOLS
          value: ""
        - name: SSL_CIPHERS
          value: ""
        volumeMounts:
        - mountPath: "/my-release-cert-volume"
          name: "my-release-cert-volume"
          readOnly: true
      - image: docker.io/splatform/stratos-jetstream:4.4.0-bc65c315c
        imagePullPolicy: Always
        name: proxy
        env:
        - name: STRATOS_IMAGE_REF
          value: "4.4.0-bc65c315c:1"
        - name: STRATOS_HELM_RELEASE
          value: "my-release"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: password
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: database
        - name: DB_HOST
          value: "my-release-mariadb"
        - name: DB_PORT
          value: "3306"
        - name: DATABASE_PROVIDER
          value: "mysql"
        - name: DB_SSL_MODE
          value: "false"
        - name: HTTP_CONNECTION_TIMEOUT_IN_SECS
          value: "10"
        - name: HTTP_CLIENT_TIMEOUT_IN_SECS
          value: "30"
        - name: HTTP_CLIENT_TIMEOUT_MUTATING_IN_SECS
          value: "120"
        - name: HTTP_CLIENT_TIMEOUT_LONGRUNNING_IN_SECS
          value: "600"
        - name: SKIP_TLS_VERIFICATION
          value: "false"
        - name: CONSOLE_PROXY_TLS_ADDRESS
          value: :3003
        - name: CF_CLIENT
          value: cf
        - name: ALLOWED_ORIGINS
          value: https://localhost
        - name: ENCRYPTION_KEY_VOLUME
          value: "my-release-encryption-key-volume"
        - name: ENCRYPTION_KEY_FILENAME
          value: key
        - name: SESSION_STORE_SECRET
          valueFrom:
            secretKeyRef:
              name: "my-release-db-secret"
              key: sessionStoreSecret
        - name: CONSOLE_PROXY_CERT_PATH
          value: "/my-release-cert-volume/tls.crt"
        - name: CONSOLE_PROXY_CERT_KEY_PATH
          value: "/my-release-cert-volume/tls.key"
        - name: HTTP_PROXY
        - name: HTTPS_PROXY
        - name: NO_PROXY
        - name: FTP_PROXY
        - name: SOCKS_PROXY
        - name: LOG_LEVEL
          value: info
        - name: CONSOLE_CLIENT 
          valueFrom:
            secretKeyRef:
              name: "my-release-secret"
              key: client
        - name: CONSOLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "my-release-secret"
              key: clientSecret
        # Local admin user
        # UAA
        # Highest priority setting to use is uaa.endpoint
        - name: HELM_NAME
          value: "console-helm-chart-4.4.0-bc65c315c.tgz/my-release"
        - name: HELM_REVISION
          value: "1"
        - name: HELM_CHART_VERSION
          value: "4.4.0"
        - name: HELM_LAST_MODIFIED
          value: "seconds:1718895349 nanos:0 "        
        - name: SSO_LOGIN
          value: "false"
        - name: SSO_OPTIONS
          value: ""
        - name: SSO_ALLOWLIST
          value: ""
        - name: TEMPLATE_DIR
          value: /srv/templates
        - name: SMTP_AUTH
          value: "false"
        - name: SMTP_FROM_ADDRESS
          value: ""
        - name: SMTP_HOST
          value: ""
        - name: SMTP_PORT
          value: "25"
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: "my-release-secret"
              key: smtpUser
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "my-release-secret"
              key: smtpPassword
        - name: INVITE_USER_SUBJECT
          value: ""
        - name: ENABLE_TECH_PREVIEW
          value: "false"
        - name: API_KEYS_ENABLED
          value: "admin_only"
        - name: HELM_CACHE_FOLDER
          value: /helm-cache
        - name: UI_LIST_ALLOW_LOAD_MAXED
          value: "false"
        - name: ANALYSIS_SERVICES_API
          value: "http://my-release-analyzers:8090"
        - name: STRATOS_KUBERNETES_NAMESPACE
          value: "console-helm-chart-4.4.0-bc65c315c.tgz"
        - name: STRATOS_KUBERNETES_TERMINAL_IMAGE
          value: "docker.io/splatform/stratos-kube-terminal:4.4.0-bc65c315c"
        - name: STRATOS_KUBERNETES_DASHBOARD_IMAGE
          value: ""        
        - name: ARTIFACT_HUB_DISABLED
          value: "false"        
        readinessProbe:
          httpGet:
            path: /pp/v1/ping
            scheme: HTTPS
            port: 3003
        ports:
        - containerPort: 3003
          name: proxy
          protocol: TCP
        volumeMounts:
        - mountPath: "/my-release-encryption-key-volume"
          name: "my-release-encryption-key-volume"
          readOnly: true
        - mountPath: "/my-release-cert-volume"
          name: "my-release-cert-volume"
          readOnly: true
        - mountPath: /etc/secrets/
          name: "my-release-db-secret"
          readOnly: true
        - mountPath: /helm-cache
          name: helm-cache-volume
      serviceAccountName: "stratos"
      volumes:
      - name: "my-release-encryption-key-volume"
        secret:
          secretName: "my-release-key"
      - name: "my-release-cert-volume"
        secret:
          secretName: "my-release-cert"
      - name: "my-release-db-secret"
        secret:
          secretName: "my-release-db-secret"
      - name: "my-release-secret"
        secret:
          secretName: "my-release-secret"
      - name: helm-cache-volume
        emptyDir: {}
---
# Source: console/templates/config-init.yaml
# Config init job will create a secrets for the Encryption Key and Certificate (auto-generated)
apiVersion: "batch/v1"
kind: "Job"
metadata:
  name: "stratos-config-init-1"
  labels:
    app.kubernetes.io/component: "stratos-config-init-1"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/version: "4.4.0"
    helm.sh/chart:  "console-4.4.0"
spec:
  template:
    metadata:
      name: "stratos-config-init"
      labels:
        app.kubernetes.io/component: "stratos-config-init"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/name: "stratos"
        app.kubernetes.io/version: "4.4.0"
        helm.sh/chart:  "console-4.4.0"
    spec:
      containers:
      - env:
        - name: STRATOS_IMAGE_REF
          value: "4.4.0-bc65c315c:1"
        - name: "STRATOS_VOLUME_MIGRATION"
          value: "true"
        - name: "IS_UPGRADE"
          value: "false"
        - name: "NAMESPACE"
          value: "console-helm-chart-4.4.0-bc65c315c.tgz"
        - name: "RELEASE_NAME"
          value: "my-release"
        - name: "RELEASE_REVISION"
          value: "1"
        - name: "RELEASE_VERSION"
          value: "4.4.0"
        - name: "HELM_CHART"
          value:  "console-4.4.0"
        - name: CONSOLE_TLS_SECRET_NAME
          value: ""
        image: docker.io/splatform/stratos-config-init:4.4.0-bc65c315c
        command: ["/config-init.sh"]
        imagePullPolicy: Always
        livenessProbe: ~
        name: "config-init"
        readinessProbe: ~
      restartPolicy: "OnFailure"
      serviceAccountName: "config-init"
      terminationGracePeriodSeconds: 600
