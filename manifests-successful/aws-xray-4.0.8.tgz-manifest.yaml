---
# Source: aws-xray/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: aws-xray
    helm.sh/chart: aws-xray-4.0.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  name: my-release-aws-xray
---
# Source: aws-xray/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-aws-xray-config
  labels:
    helm.sh/chart: aws-xray-4.0.8
    app.kubernetes.io/name: aws-xray
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.3.12"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |-
    # Maximum buffer size in MB (minimum 3). Choose 0 to use 1% of host memory.
    TotalBufferSizeMB: 0
    # Maximum number of concurrent calls to AWS X-Ray to upload segment documents.
    Concurrency: 8
    # Send segments to AWS X-Ray service in a specific region
    Region: ""
    # Change the X-Ray service endpoint to which the daemon sends segment documents.
    Endpoint: ""
    Socket:
      # Change the address and port on which the daemon listens for UDP packets containing segment documents.
      # Make sure we listen on all IP's by default for the k8s setup
      UDPAddress: "0.0.0.0:2000"
      TCPAddress: "0.0.0.0:2000"
    Logging:
      LogRotation: true
      # Change the log level, from most verbose to least: dev, debug, info, warn, error, prod (default).
      LogLevel: "prod"
      # Output logs to the specified file path.
      LogPath: ""
    # Turn on local mode to skip EC2 instance metadata check.
    LocalMode: false
    # Amazon Resource Name (ARN) of the AWS resource running the daemon.
    ResourceARN: ""
    # Assume an IAM role to upload segments to a different account.
    RoleARN: ""
    # Disable TLS certificate verification.
    NoVerifySSL: false
    # Upload segments to AWS X-Ray through a proxy.
    ProxyAddress: ""
    # Daemon configuration file format version.
    Version: 1
---
# Source: aws-xray/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-aws-xray
  labels:
    helm.sh/chart: aws-xray-4.0.8
    app.kubernetes.io/name: aws-xray
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.3.12"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 2000
      protocol: UDP
      name: incoming
    - port: 2000
      protocol: TCP
      name: xray-tcp
  selector:
    app.kubernetes.io/name: aws-xray
    app.kubernetes.io/instance: my-release
---
# Source: aws-xray/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-aws-xray
  labels:
    helm.sh/chart: aws-xray-4.0.8
    app.kubernetes.io/name: aws-xray
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.3.12"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-xray
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-xray
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-aws-xray
      priorityClassName: 
      volumes:
        - name: config-volume
          configMap:
            name: "my-release-aws-xray-config"
      hostNetwork: true
      securityContext:
        {}
      containers:
        - name: aws-xray
          securityContext:
            {}
          image: "public.ecr.aws/xray/aws-xray-daemon:3.3.12"
          imagePullPolicy: IfNotPresent
          command: ["/xray", "-c", "/aws/xray/config.yaml"]
          ports:
            - name: xray-ingest
              containerPort: 2000
              hostPort: 2000
              protocol: UDP
            - name: xray-tcp
              containerPort: 2000
              hostPort: 2000
              protocol: TCP
          volumeMounts:
            - name: config-volume
              mountPath: /aws/xray
          resources:
            {}
