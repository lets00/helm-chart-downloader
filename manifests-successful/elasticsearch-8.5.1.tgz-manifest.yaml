---
# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: my-release
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURxRENDQXBDZ0F3SUJBZ0lSQVBsa1Bnb2xlajFMUEV3T3ZNdktxcEF3RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREEyTWpBeE5EVTJNVFZhRncweQpOVEEyTWpBeE5EVTJNVFZhTUI4eEhUQWJCZ05WQkFNVEZHVnNZWE4wYVdOelpXRnlZMmd0YldGemRHVnlNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0eXgyWndOdVFEZ29RL0xGaFVMQjhMUVcKTlB3Wnh3ZUJlMjRWVUdJV3hoTzNHbmdDbmx3UWYwM0M2VlhBYmkxbkxncldxckxxUXJiV3V5WU90SlVMTTRyOQpHZmppZTc0Yzdkd1FGTzFzRkV4VGxnT09kSGkyc05wM0xidnZOR2psUm1ONEFNdjdsazlKWTlMNGVMMSs2ZXpKCnE4R2JPMnU5U1Z2b2VlWWNDUEtDOXo0QzJKQVpCd0xybnBhb1U5Zi9IcHlZWkg3VkU2QzlvSEFMWXU0OFBHN0sKZUx1ZDN5em1odUZ2SlAyU0djZC9Hemx3L3ZpRlNxYmVPcEdDV3VPMG55U2hrVWMrb3Q4SkQvZTFWbW5hVVFjNgo5UmxJRzRiWnRxR2Z4MlNCT205THpUR2MwU2c1TnpWbkFWdzBERWxkNHpYelhqU1Zrc2VHc29NUWFCWkIyUUlECkFRQUJvNEhpTUlIZk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlRPMnpVYkRLYVFiODVsTGw5YgpUbUpPenNyMGxUQi9CZ05WSFJFRWVEQjJnaFJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY29Jc1pXeGhjM1JwClkzTmxZWEpqYUMxdFlYTjBaWEl1Wld4aGMzUnBZM05sWVhKamFDMDRMalV1TVM1MFozcUNNR1ZzWVhOMGFXTnoKWldGeVkyZ3RiV0Z6ZEdWeUxtVnNZWE4wYVdOelpXRnlZMmd0T0M0MUxqRXVkR2Q2TG5OMll6QU5CZ2txaGtpRwo5dzBCQVFzRkFBT0NBUUVBYWhJVDFDdmxLZmIvQU9RY1MxTy8zOE5KWjNQODJpeWNBNkJKN1g1RDA3QloydFVqClpoQnYrUWhQNEVjSUVUdFkwUlhFRlZ0dGVWR0hMLzlVNWNQRHgwQVNCNno0eGNmd2hIc014aEhhbG44bFNUSGYKdno0WWgzRXI4cXFoL1lQSG1wMlBscDRxNlNNb0hESjFhS1dJZFplN09VYlZaNDRDbXp6b2JlM08wZ1Vib3ROZApocWNHcnBIcVpaOTNEaDU1VE9waHc5Qko3Y0srTEUySjhWRllHNnFUbEMzZ1BUQkh5bk9PZTFIeUI1L0ZqZ2N3Cm10MzlxQS9oTHQ2elV0SnNzdXd4VXVhdjZ1UWo3SERzODZsN3dhOW1lUnlscDYyczl4d2p3VDg1eWFxeGQ4QnQKOUdrMDRienVlcDZJY01yTFVDaytkWENZa2piM1MwcjllZHpmU1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdHl4Mlp3TnVRRGdvUS9MRmhVTEI4TFFXTlB3Wnh3ZUJlMjRWVUdJV3hoTzNHbmdDCm5sd1FmMDNDNlZYQWJpMW5MZ3JXcXJMcVFyYld1eVlPdEpVTE00cjlHZmppZTc0Yzdkd1FGTzFzRkV4VGxnT08KZEhpMnNOcDNMYnZ2TkdqbFJtTjRBTXY3bGs5Slk5TDRlTDErNmV6SnE4R2JPMnU5U1Z2b2VlWWNDUEtDOXo0QwoySkFaQndMcm5wYW9VOWYvSHB5WVpIN1ZFNkM5b0hBTFl1NDhQRzdLZUx1ZDN5em1odUZ2SlAyU0djZC9Hemx3Ci92aUZTcWJlT3BHQ1d1TzBueVNoa1VjK290OEpEL2UxVm1uYVVRYzY5UmxJRzRiWnRxR2Z4MlNCT205THpUR2MKMFNnNU56Vm5BVncwREVsZDR6WHpYalNWa3NlR3NvTVFhQlpCMlFJREFRQUJBb0lCQUJIWEc4VVd1WE01eFBveApOL210c2RQdXhrYnMwdG5tcWo3S1R2c2dRcFdTTUFBODlneFViU3JvK1BYZTZ6b1A0Ly9CQUgxcHBaVlAxNFFzCnhidmkxRTkxMXdiampiTjlwYldvL0V2OWY4eE9Uc25LbU9KUks0SDRGU2w0SjJrVVdsaExzZEZxREp2c0p2cTQKL29oTDlJTjJFNEpOL2YrQWs5UUVScFV3eTBRM3FFS3IzWDdPelM3MUJJbDlrVDhBQmtkQXpqNWZ1M3lTdkJJMAo0ZHphVHVlQ1JIK1ZnNENSU1JMT0kvVCtyZm1sYzRBUGoxNml4RU9relZxbXVDd0VuTDJnUVZoQUVvdWM4ZmgwCmkxZDllY0ZqN3kycGtqUTZMWnhoS0VwdEV6OWN3b3RubGxFcXAyOENFdFA0Q3U3MWZkd3EyRVFyU1crN21CQSsKbWRPUGg5MENnWUVBNERnRDJtTFFnQThOblpyVWVkVzRwYzFCRXRnL04rWGZZWWpxbGhvcXJOUXgyMHVrYkVrMAplTk85eVp6UEoxQkZqaWZzZU8wWTlGSmNSUzNmOXpjaUhmcmQyOVdLbis1VTlBMUh6Q0ZveWFqNUNDV3ViS0d5CkRCdjNvSXRWWENmeXpyUzJ6Q0tCM0swOWZVWUpEUGxCVWhPSlBuWFFaWnAxTm9lNVBpdEl4R01DZ1lFQTBTTVcKWUZkcWZlZ0hJZUNLY2JBK3FUTHB6THJRS2R3MXVSbnQrUlc5MWE1Z29QbHUwckRGSll0aWxWTFFhSnU2bXhvVQp6WGdFNk5PcjVYbDFvYVprVDNGcjZZYzRlaVFFRUEremZSUVZnbkd1OW5kUU8yRHpLNWRzdWpwY0taWXlJb2RKCjc3d0w3V0NPNFcyUVBTSURwRVVVQ3pkclRWUERZYk0raDBXY241TUNnWUIrZ1J3cmF2VVlTMlh6TmhnTFpYbjQKa2dYVkRBMGZES01yOUlQbWpIem5aaEY3R1FKNzFoRzAya0tLTGQ3eTMyZGUvVWQrTXNlUmthWmRvYlJyVnIvNQpDa0dDZHNqdjB4ZzdXZ0xZT1VGV0JlLzdtTWNBbzNwQk9zWkwzbEVhM2E4dzBPVVI1Nlk5UzhFVm5SNGVJOE9tCit6N0Q3dFRWZm9BRGREQWYwMndLNFFLQmdRQ2s5L2grcG5YcU8wemsvQ280NDcySjJnOXkzeW0wMjIvRlF4N2sKakxIaURGdE1uM1U3M1JTbU9QemFyU2lZVzc4bStidlBHQTFIV3pFTkluSVh3UmovVVlpOS9Wd2ZmS2wzd2VyagpqeVFvY1dTQ0pqdXpteFkySEl3M21qRjQzSEZQcTBnM1F5NWxZUFZUL1FqNk1BcVBXYTRsNnVGSmJmbUE1OU03CkFUNDY0UUtCZ0dicVR3OVJFaWZBWnEyVmxjZW9NSUUxYlpNd2s2WlFzYmtwa2VXc3NwNHZub0FVMnJNY3BMcXYKM210QWx1dmV3N0Nad0psQUc3K0JwZkdUekhLOEw0a004cnZpalIwN0w5cWVod051YkV5bE9QZkZJREIwSGV1RApORGNtZS9VMm0rS0t0dmZtM0w3cGlmaVdJQWNVNXJnU3JEUnl3Z1B5NkY2ZUVJVTFWTjU0Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQU40UHVWZWl1Z2V0UzZ3MFRiK3h6Q293RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRBZUZ3MHlOREEyTWpBeE5EVTJNVFZhRncweQpOVEEyTWpBeE5EVTJNVFZhTUJzeEdUQVhCZ05WQkFNVEVHVnNZWE4wYVdOelpXRnlZMmd0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFERnNvWlNCSWdRSk5oaUo3WGpObE54cysxTkVjTmkKMHVKT0d3L2t0NzQ2aVFXaE9nMUxXZmdqTnZvUS9NbGJ6S2o1c2ZYdnZDQkxNWFE3Z0tINjIvbWR0djY1c3hzWgpkamhHbkhuOVBsRExvUkN4QkI4dERock51VTczSUFLUmFSbDMvTENWSVlYbDVPUjdZUFRpWU9nNmo5allPSUhnCnIzZXJlaDlCSEdXZ1dkN2NKMi8yYXAxWG5HVkdvY1I3SWJwVlFUeVZRM1B5VW5MNCtYb1Fpa2tGbmkraXZFdmcKaFh4bDZBbU4zM1VHbDRhZlpzNS91cXBza203V25zZVgySW8xYVBaNUVMZCtWdFB4TUNLdmJCd2l5ajljZ3VoTwptR0l5TFVOTnhteXJUY0pwdGNEaytCYWg2MGpFQkR1OEZxckNablh1akFRRWNhdkJNcnE1SE1BckFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXp0czFHd3lta0cvT1pTNWZXMDVpVHM3Swo5SlV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUs3SG9sTUxORzFhdDZhOWRiWHdzeWxzakN3Wkg5cXhvZWkxCjNLU3pVMzRkNlVRZGxiVVJsR2FkZnNQV2p4b3czaGxSRXoxT29ZUFJtemhDdi9GNWhvYkVjWjJKd2U1bjlYcFAKQWh6bnpEZzFGTFV2bStyQkU3SFdJdjlPS1MxMzRKczlIeFNzVmxncmx2T0hyd016dWZyZUNOMW9OMnlFNEV3ZApFWEJDVTk5YjFtWGxuUmpCT2RQNzY3ZFJyUWlSUHZ1V2J0MGNQbTBZeGxENVhLNXlaNng3TEpHaVc0MXBJcUZ5CkNGVXNMaytLdkpPM2syd05hREpmUU5UcXJYQ2Y4b01rYmEzU08yMGpmdlVKTldLWnVpQjA0bTdKd3pYOEEzQnQKalBqVnEzcWtwYmhVNmhBT1NHWTlaYk1NTmNsUURaem9NNHcwUUZVOFYzODJSTDhwcXA0PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "my-release"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "R1h6Y05id1ZmOHlETElmSw=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-release"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "my-release"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "my-release"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "my-release"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "my-release"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
---
# Source: elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-jlcbr-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "my-release-sruoy-test"
    env:
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-master-credentials
            key: password
    image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
    volumeMounts:
      - name: elasticsearch-certs
        mountPath: /usr/share/elasticsearch/config/certs
        readOnly: true
  restartPolicy: Never
  volumes:
    - name: elasticsearch-certs
      secret:
        secretName: elasticsearch-master-certs
