---
# Source: ethproxy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-ethproxy
  labels:
    helm.sh/chart: ethproxy-0.1.3
    app.kubernetes.io/name: ethproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: ethproxy/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-ethproxy
  labels:
    helm.sh/chart: ethproxy-0.1.3
    app.kubernetes.io/name: ethproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  PROXY_API_PORT: "6100"
  PROXY_BACKEND_ENDPOINT: "ws://geth-swap:8546"
  PROXY_WS_PORT: "6000"
---
# Source: ethproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ethproxy
  labels:
    helm.sh/chart: ethproxy-0.1.3
    app.kubernetes.io/name: ethproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: api
      protocol: TCP
      name: api
    - port: 8546
      targetPort: ws
      protocol: TCP
      name: ws
  selector:
    app.kubernetes.io/name: ethproxy
    app.kubernetes.io/instance: my-release
---
# Source: ethproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ethproxy
  labels:
    helm.sh/chart: ethproxy-0.1.3
    app.kubernetes.io/name: ethproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: ethproxy
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ethproxy
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-ethproxy
      securityContext:
        {}
      containers:
        - name: ethproxy
          securityContext:
            {}
          image: "ethersphere/ethproxy:latest"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: my-release-ethproxy
          ports:
            - name: api
              containerPort: 6100
              protocol: TCP
            - name: ws
              containerPort: 6000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: api
          readinessProbe:
            httpGet:
              path: /readiness
              port: api
          resources:
            {}
