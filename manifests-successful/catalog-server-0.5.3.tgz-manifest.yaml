---
# Source: catalog-server/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-catalog-server
  labels:
    helm.sh/chart: catalog-server-0.5.3
    app.kubernetes.io/name: catalog-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.8.8"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: catalog-server-0.5.3
      app.kubernetes.io/name: catalog-server
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/version: "0.8.8"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'catalog-server-0.5.3.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: cp-kafka
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'catalog-server-0.5.3.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: cp-schema-registry
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'catalog-server-0.5.3.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'catalog-server-0.5.3.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: radar-s3-connector
  policyTypes:
  - Ingress
  - Egress
---
# Source: catalog-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-catalog-server
  labels:
    app: catalog-server
    chart: catalog-server-0.5.3
    release: my-release
    heritage: Helm
data:
  config.yaml: |
    # Kafka
    kafka:
      security.protocol: PLAINTEXT

    sources:
      active: []
      connector: []
      exclude: []
      include: []
      monitor: []
      passive: []
      push: []
      stream: []

    schemas:
      active: {}
      catalogue: {}
      connector: {}
      exclude: []
      include: []
      kafka: {}
      monitor: {}
      passive: {}
      push: {}
      stream: {}

    topics:
      null
---
# Source: catalog-server/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-catalog-server
  labels:
    app: "my-release-catalog-server"
    chart: "catalog-server-0.5.3"
    release: "my-release"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Mi"
---
# Source: catalog-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-catalog-server
  labels:
    app.kubernetes.io/name: catalog-server
    helm.sh/chart: catalog-server-0.5.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9010
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: catalog-server
    app.kubernetes.io/instance: my-release
---
# Source: catalog-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-catalog-server
  labels:
    app.kubernetes.io/name: catalog-server
    helm.sh/chart: catalog-server-0.5.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog-server
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog-server
        app.kubernetes.io/instance: my-release
      annotations:
        backup.velero.io/backup-volumes: config
        checksum/configmap: e32015de400bac33fde9c3cf021acc3211ce0d668e361713e0b68b5c09af80e6
    spec:
      securityContext:
        fsGroup: 101
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - catalog-server
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - my-release
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: kafka-init
        securityContext:
            {}
        image: "radarbase/radar-schemas-tools:0.8.8"
        args:
          - topic_init.sh
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "cp-kafka-headless:9092"
        - name: KAFKA_SCHEMA_REGISTRY
          value: "http://cp-schema-registry:8081"
        - name: KAFKA_NUM_BROKERS
          value: "3"
        - name: RADAR_NUM_PARTITIONS
          value: "3"
        - name: RADAR_NUM_REPLICATION_FACTOR
          value: "3"
        - name: CONFIG_PATH
          value: /etc/radar-schemas-tools/config.yaml
        volumeMounts:
          - name: config
            mountPath: /etc/radar-schemas-tools
          - name: config-schemas
            mountPath: /schema/conf
      containers:
        - name: catalog-server
          securityContext:
            {}
          image: "radarbase/radar-schemas-tools:0.8.8"
          args:
            - radar-catalog-server
            - -c
            - /etc/radar-schemas-tools/config.yaml
            - /schema/merged
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9010
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /source-types
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /source-types
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /etc/radar-schemas-tools
            - name: config-schemas
              mountPath: /schema/conf
      volumes:
        - name: config
          configMap:
            name: my-release-catalog-server
        - name: config-schemas
          persistentVolumeClaim:
            claimName: my-release-catalog-server
---
# Source: catalog-server/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-catalog-server-test-connection"
  labels:
    app.kubernetes.io/name: catalog-server
    helm.sh/chart: catalog-server-0.5.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-catalog-server:9010']
  restartPolicy: Never
