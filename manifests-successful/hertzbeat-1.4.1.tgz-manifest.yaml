---
# Source: hertzbeat/templates/collector/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-hertzbeat-collector"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  IDENTITY: ""
  MANAGER_HOST: "my-release-hertzbeat-cluster"
  MANAGER_PORT: "1158"
  application.yml: |+
    server:
      port: 1159
    spring:
      application:
        name: ${HOSTNAME:@hertzbeat-collector@}${PID}
      profiles:
        active: cluster
      jackson:
        default-property-inclusion: ALWAYS
      # need to disable spring boot mongodb auto config, or default mongodb connection tried and failed...
      autoconfigure:
        exclude: org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
    
    ---
    spring:
      config:
        activate:
          on-profile: cluster
    
    collector:
      dispatch:
        entrance:
          netty:
            enabled: true
            identity: ${IDENTITY:}
            mode: ${MODE:public}
            manager-host: ${MANAGER_HOST:127.0.0.1}
            manager-port: ${MANAGER_PORT:1158}
    
    common:
      queue:
        # memory or kafka
        type: ${QUEUE_TYPE:netty}
        # properties when queue type is kafka
        kafka:
          servers: ${KAFKA_SERVERS:127.0.0.1:9092}
          metrics-data-topic: ${KAFKA_TOPIC:async-metrics-data}
---
# Source: hertzbeat/templates/database/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-hertzbeat-database"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  TZ: "Asia/Shanghai"
  MYSQL_ROOT_PASSWORD: "123456"
  schema.sql: |+
    set names utf8mb4;
    create database if not exists hertzbeat default charset utf8mb4 collate utf8mb4_general_ci;
    commit;
---
# Source: hertzbeat/templates/manager/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-hertzbeat"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |+
    server:
      port: 1157
    spring:
      application:
        name: ${HOSTNAME:@hertzbeat@}${PID}
      profiles:
        active: prod
      mvc:
        static-path-pattern: /**
      jackson:
        default-property-inclusion: ALWAYS
      web:
        resources:
          static-locations:
            - classpath:/dist/
            - classpath:../dist/
      # need to disable spring boot mongodb auto config, or default mongodb connection tried and failed..
      autoconfigure:
        exclude: org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration
      thymeleaf:
        prefix: classpath:/templates/
        check-template-location: true
        cache: true
        suffix: .html
        mode: HTML
        template-resolver-order: 1
    
    management:
      health:
        mail:
          enabled: off
      endpoints:
        web:
          exposure:
            include:
              - 'metrics'
              - 'health'
              - 'env'
        enabled-by-default: on
    
    sureness:
      auths:
        - digest
        - basic
        - jwt
      jwt:
        secret: CyaFv0bwq2Eik0jdrKUtsA6bx3sDJeFV143R LnfKefTjsIfJLBa2YkhEqEGtcHDTNe4CU6+9 8tVt4bisXQ13rbN0oxhUZR73M6EByXIO+SV5 dKhaX0csgOCTlCxq20yhmUea6H6JIpSE2Rwp
    
    ---
    spring:
      config:
        activate:
          on-profile: prod
    
      datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        username: root
        password: 123456
        url: jdbc:mysql://my-release-hertzbeat-database:3306/hertzbeat?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true&useSSL=false
        hikari:
          max-lifetime: 120000
    
      jpa:
        hibernate:
          ddl-auto: update
    
      mail:
        # Attention: this is mail server address.
        # 请注意此为邮件服务器地址：qq邮箱为 smtp.qq.com qq 企业邮箱为 smtp.exmail.qq.com
        host: smtp.qq.com
        username: tancloud@qq.com
        # Attention: this is not email account password, this requires an email authorization code
        # 请注意此非邮箱账户密码 此需填写邮箱授权码
        password: your-password
        #Attention: Tencent mail smtps 465,smtp 587
        #请注意腾讯邮箱465为smtps,587为smtp
        port: 587
        properties:
          mail:
            smtp:
              socketFactoryClass: javax.net.ssl.SSLSocketFactory
              ssl:
                enable: true
    
    common:
      queue:
        # memory or kafka
        type: memory
        # properties when queue type is kafka
        kafka:
          servers: 127.0.0.1:9092
          metrics-data-topic: async-metrics-data
          alerts-data-topic: async-alerts-data
    
    warehouse:
      store:
        # store history metrics data, enable only one below
        # 存储历史数据方式, 下方只能enabled启用一种方式
        jpa:
          enabled: false
          # The maximum retention time for history records, after which records will be deleted
          expire-time: 1h
          # The maximum number of history records retained, if this number is exceeded, half of the data in this configuration item will be deleted
          # (please set this configuration reasonably as history records can affect performance when it is large)
          # 历史数据的最大保留条数，超过此数量时，将会删除一半于此配量的数据（由于历史数据较大时会影响性能，请合理设置此配置）
          max-history-record-num: 6000
        td-engine:
          enabled: false
          driver-class-name: com.taosdata.jdbc.rs.RestfulDriver
          url: jdbc:TAOS-RS://localhost:6041/hertzbeat
          username: root
          password: taosdata
        greptime:
          enabled: false
          endpoint: localhost:4001
        iot-db:
          enabled: true
          host: my-release-hertzbeat-tsdb
          rpc-port: 6667
          username: root
          password: root
          # org.dromara.hertzbeat.warehouse.config.IotDbVersion: V_0_13 || V_1_0
          version: V_0_13
          query-timeout-in-ms: -1
          # 数据存储时间：默认'7776000000'（90天,单位为毫秒,-1代表永不过期）
          # data expire time, unit:ms, default '7776000000'(90 days, -1:never expire)
          expire-time: '7776000000'
        influxdb:
          enabled: false
          server-url: http://127.0.0.1:8086
          username: root
          password: root
          expire-time: '30d'
          replication: 1
    
        # store real-time metrics data, enable only one below
        # 存储实时数据方式, 下方只能enabled启用一种方式
        memory:
          enabled: true
          init-size: 1024
        redis:
          enabled: false
          host: 127.0.0.1
          port: 6379
          password: 123456
          db: 0
    
    alerter:
      # custom console url
      console-url: https://console.tancloud.cn
    
    scheduler:
      server:
        enabled: true
        port: 1158


  sureness.yml: |+
    resourceRole:
      - /api/account/auth/refresh===post===[admin,user,guest]
      - /api/apps/**===get===[admin,user,guest]
      - /api/monitor/**===get===[admin,user,guest]
      - /api/monitor/**===post===[admin,user]
      - /api/monitor/**===put===[admin,user]
      - /api/monitor/**===delete==[admin]
      - /api/monitors/**===get===[admin,user,guest]
      - /api/monitors/**===post===[admin,user]
      - /api/monitors/**===put===[admin,user]
      - /api/monitors/**===delete===[admin]
      - /api/alert/**===get===[admin,user,guest]
      - /api/alert/**===post===[admin,user]
      - /api/alert/**===put===[admin,user]
      - /api/alert/**===delete===[admin]
      - /api/alerts/**===get===[admin,user,guest]
      - /api/alerts/**===post===[admin,user]
      - /api/alerts/**===put===[admin,user]
      - /api/alerts/**===delete===[admin]
      - /api/notice/**===get===[admin,user,guest]
      - /api/notice/**===post===[admin,user]
      - /api/notice/**===put===[admin,user]
      - /api/notice/**===delete===[admin]
      - /api/tag/**===get===[admin,user,guest]
      - /api/tag/**===post===[admin,user]
      - /api/tag/**===put===[admin,user]
      - /api/tag/**===delete===[admin]
      - /api/summary/**===get===[admin,user,guest]
      - /api/summary/**===post===[admin,user]
      - /api/summary/**===put===[admin,user]
      - /api/summary/**===delete===[admin]
    
    excludedResource:
      - /api/account/auth/**===*
      - /api/i18n/**===get
      - /api/metrics===get
      - /api/apps/hierarchy===get
      - /actuator/**===get
      # web ui 
      - /===get
      - /dashboard/**===get
      - /monitors/**===get
      - /alert/**===get
      - /account/**===get
      - /setting/**===get
      - /passport/**===get
      - /**/*.html===get
      - /**/*.js===get
      - /**/*.css===get
      - /**/*.ico===get
      - /**/*.ttf===get
      - /**/*.png===get
      - /**/*.gif===get
      - /**/*.jpg===get
      - /**/*.svg===get
      - /**/*.json===get
      # swagger ui 
      - /swagger-resources/**===get
      - /v2/api-docs===get
      - /v3/api-docs===get
      # h2 database
      - /h2-console/**===*
    
    account:
      - appId: admin
        credential: hertzbeat
        role: [admin]
      - appId: tom
        credential: hertzbeat
        role: [user]
      - appId: guest
        credential: hertzbeat
        role: [guest]
      - appId: lili
        credential: 1A676730B0C7F54654B0E09184448289
        salt: 123
        role: [guest]
---
# Source: hertzbeat/templates/tsdb/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-hertzbeat-tsdb"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
data:
  TZ: "Asia/Shanghai"
---
# Source: hertzbeat/templates/database/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-hertzbeat-database
  annotations:
    helm.sh/resource-policy: keep
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: database
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
# Source: hertzbeat/templates/tsdb/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-hertzbeat-tsdb
  annotations:
    helm.sh/resource-policy: keep
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: tsdb
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
# Source: hertzbeat/templates/database/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-hertzbeat-database
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
  selector:
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    component: database
---
# Source: hertzbeat/templates/manager/service-cluster.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-hertzbeat-cluster"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 1158
      targetPort: 1158
      protocol: TCP
      name: cluster
  selector:
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    component: manager
---
# Source: hertzbeat/templates/manager/service-expose.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-hertzbeat-http"
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 1157
      targetPort: 1157
      protocol: TCP
      name: http
      nodePort: 31157
  selector:
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    component: manager
---
# Source: hertzbeat/templates/tsdb/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-hertzbeat-tsdb
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6667
      targetPort: 6667
      protocol: TCP
  selector:
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    component: tsdb
---
# Source: hertzbeat/templates/collector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-hertzbeat-collector
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hertzbeat
      app.kubernetes.io/instance: my-release
      component: collector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hertzbeat
        app.kubernetes.io/instance: my-release
        component: collector
    spec:
      securityContext:
        {}
      containers:
        - name: hertzbeat-collector
          securityContext:
            {}
          image: "tancloud/hertzbeat-collector:v1.4.1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1159
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 1159
          readinessProbe:
            tcpSocket:
              port: 1159
          envFrom:
            - configMapRef:
                name: "my-release-hertzbeat-collector"
          volumeMounts:
            - mountPath: /opt/hertzbeat-collector/config/application.yml
              subPath: application.yml
              name: application
          resources:
            {}
      volumes:
        - name: application
          configMap:
            name: my-release-hertzbeat-collector
---
# Source: hertzbeat/templates/manager/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-hertzbeat
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hertzbeat
      app.kubernetes.io/instance: my-release
      component: manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hertzbeat
        app.kubernetes.io/instance: my-release
        component: manager
    spec:
      securityContext:
        {}
      containers:
        - name: hertzbeat
          securityContext:
            {}
          image: "tancloud/hertzbeat:v1.4.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 1157
              protocol: TCP
            - name: cluster
              containerPort: 1158
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 1157
          readinessProbe:
            tcpSocket:
              port: 1157
          volumeMounts:
            - mountPath: /opt/hertzbeat/config/application.yml
              subPath: application.yml
              name: application
            - mountPath: /opt/hertzbeat/config/sureness.yml
              subPath: sureness.yml
              name: sureness
          resources:
            {}
      volumes:
        - name: application
          configMap:
            name: my-release-hertzbeat
        - name: sureness
          configMap:
            name: my-release-hertzbeat
---
# Source: hertzbeat/templates/database/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-hertzbeat-database
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: database
spec:
  replicas: 1
  serviceName: my-release-hertzbeat-database
  selector:
    matchLabels:
      app.kubernetes.io/name: hertzbeat
      app.kubernetes.io/instance: my-release
      component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hertzbeat
        app.kubernetes.io/instance: my-release
        component: database
    spec:
      securityContext:
        {}
      containers:
      - name: database
        image: mysql:8
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
            {}
        envFrom:
          - configMapRef:
              name: "my-release-hertzbeat-database"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: ""
        - mountPath: /docker-entrypoint-initdb.d/schema.sql
          subPath: schema.sql
          name: schema
      volumes:
        - name: schema
          configMap:
            name: my-release-hertzbeat-database
        - name: data
          persistentVolumeClaim: 
            claimName: my-release-hertzbeat-database
---
# Source: hertzbeat/templates/tsdb/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-hertzbeat-tsdb
  labels:
    helm.sh/chart: hertzbeat-1.4.1
    app.kubernetes.io/name: hertzbeat
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.4.1"
    app.kubernetes.io/managed-by: Helm
    component: tsdb
spec:
  replicas: 1
  serviceName: my-release-hertzbeat-tsdb
  selector:
    matchLabels:
      app.kubernetes.io/name: hertzbeat
      app.kubernetes.io/instance: my-release
      component: tsdb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hertzbeat
        app.kubernetes.io/instance: my-release
        component: tsdb
    spec:
      securityContext:
        {}
      containers:
      - name: tsdb
        image: apache/iotdb:0.13.3-node
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6667
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6667
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
            {}
        envFrom:
          - configMapRef:
              name: "my-release-hertzbeat-tsdb"
        volumeMounts:
        - name: data
          mountPath: /iotdb/data
          subPath: ""
      volumes:
        - name: data
          persistentVolumeClaim: 
            claimName: my-release-hertzbeat-tsdb
