---
# Source: dex-k8s/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dex-k8s
  labels:
    helm.sh/chart: dex-k8s-0.2.1
    app.kubernetes.io/name: dex-k8s
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: dex-k8s/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dex-k8s
data:
  config.yaml: |-
    issuer: https://dex.example.org
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
    connectors: []
    oauth2:
      skipApprovalScreen: true
    staticClients: []
---
# Source: dex-k8s/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-dex-k8s
rules:
  - apiGroups: ["dex.coreos.com"] # API group created by dex
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
# Source: dex-k8s/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-dex-k8s
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-dex-k8s
subjects:
  - kind: ServiceAccount
    name: my-release-dex-k8s
    namespace: dex-k8s-0.2.1.tgz
---
# Source: dex-k8s/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dex-k8s
  labels:
    helm.sh/chart: dex-k8s-0.2.1
    app.kubernetes.io/name: dex-k8s
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 5556
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dex-k8s
    app.kubernetes.io/instance: my-release
---
# Source: dex-k8s/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dex-k8s
  labels:
    helm.sh/chart: dex-k8s-0.2.1
    app.kubernetes.io/name: dex-k8s
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex-k8s
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dex-k8s
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-dex-k8s
      securityContext:
        runAsUser: 1001
      containers:
        - name: dex-k8s
          command:
            - /usr/local/bin/dex
            - serve
            - /srv/dex/cfg/config.yaml
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          image: "ghcr.io/dexidp/dex:v2.28.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - mountPath: /srv/dex/cfg
              name: config
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: my-release-dex-k8s
            items:
              - key: config.yaml
                path: config.yaml
---
# Source: dex-k8s/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-dex-k8s-test-connection"
  labels:
    helm.sh/chart: dex-k8s-0.2.1
    app.kubernetes.io/name: dex-k8s
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2.28.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-dex-k8s:5556/healthz']
  restartPolicy: Never
