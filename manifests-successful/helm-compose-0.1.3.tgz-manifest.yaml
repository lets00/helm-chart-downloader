---
# Source: helm-compose/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: helm-compose/templates/secret.env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-env-db
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: db
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: "c29tZXdvcmRwcmVzcw=="
  MYSQL_DATABASE: "d29yZHByZXNz"
  MYSQL_USER: "d29yZHByZXNz"
  MYSQL_PASSWORD: "d29yZHByZXNz"
---
# Source: helm-compose/templates/secret.env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-env-wordpress
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: wordpress
type: Opaque
data:
  WORDPRESS_DB_HOST: "ZGI="
  WORDPRESS_DB_USER: "d29yZHByZXNz"
  WORDPRESS_DB_PASSWORD: "d29yZHByZXNz"
  WORDPRESS_DB_NAME: "d29yZHByZXNz"
---
# Source: helm-compose/templates/volumes.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-db-data
spec:
  storageClassName: ""
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: helm-compose/templates/volumes.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-wp-data
spec:
  storageClassName: ""
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: helm-compose/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: db
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: expose-0
      protocol: TCP
      name: expose-0
    - port: 33060
      targetPort: expose-1
      protocol: TCP
      name: expose-1
  selector:
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    docker-compose/service: db
---
# Source: helm-compose/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: wordpress
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: port-0
      protocol: TCP
      name: port-0
  selector:
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    docker-compose/service: wordpress
---
# Source: helm-compose/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-db
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: helm-compose
      app.kubernetes.io/instance: my-release
      docker-compose/service: db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: helm-compose
        app.kubernetes.io/instance: my-release
        docker-compose/service: db
      annotations:
        checksum/environment: f05fc0488e2feace1960593037f2064e608320355344567c31ea349c2e2c9932
    spec:
      serviceAccountName: my-release
      containers:
        - name: db
          image: "mariadb:10.8.2-focal"
          envFrom:
            - secretRef:
                name: my-release-env-db
          ports:
            - name: expose-0
              containerPort: 3306
              protocol: TCP
            - name: expose-1
              containerPort: 33060
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: vol-0
      volumes:
        - name: vol-0
          
          emptyDir: {}
---
# Source: helm-compose/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-wordpress
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: wordpress
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: helm-compose
      app.kubernetes.io/instance: my-release
      docker-compose/service: wordpress
  template:
    metadata:
      labels:
        app.kubernetes.io/name: helm-compose
        app.kubernetes.io/instance: my-release
        docker-compose/service: wordpress
      annotations:
        checksum/environment: 02bcedc1798ff5ae68169bc64d89e58148553dfca14261ba7a4f523557f928f8
    spec:
      serviceAccountName: my-release
      containers:
        - name: wordpress
          image: "wordpress:latest"
          envFrom:
            - secretRef:
                name: my-release-env-wordpress
          ports:
            - name: port-0
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /var/www/html
              name: vol-0
      volumes:
        - name: vol-0
          
          emptyDir: {}
---
# Source: helm-compose/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-wordpress
  labels:
    helm.sh/chart: helm-compose-0.1.3
    app.kubernetes.io/name: helm-compose
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    docker-compose/service: wordpress
spec:
  ingressClassName: nginx-internal
  rules:
  - host: 
    http:
      paths:
      - backend:
          service:
            name: wordpress
            port:
              name: port-0
        path: /
        pathType: ImplementationSpecific
