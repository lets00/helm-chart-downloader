---
# Source: cso-proxy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cso-proxy
  labels:
    helm.sh/chart: cso-proxy-0.1.3
    app.kubernetes.io/name: cso-proxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "cccf49fd"
    app.kubernetes.io/managed-by: Helm
---
# Source: cso-proxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cso-proxy
  labels:
    helm.sh/chart: cso-proxy-0.1.3
    app.kubernetes.io/name: cso-proxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "cccf49fd"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: cso-proxy
    app.kubernetes.io/instance: my-release
---
# Source: cso-proxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cso-proxy
  labels:
    helm.sh/chart: cso-proxy-0.1.3
    app.kubernetes.io/name: cso-proxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "cccf49fd"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cso-proxy
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cso-proxy
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-cso-proxy
      securityContext:
        {}
      containers:
        - name: cso-proxy
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/djcass44/cso-proxy:cccf49fd"
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "8080"
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: 100m
          livenessProbe:
            httpGet:
              port: http
              path: /healthz
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
          readinessProbe:
            httpGet:
              port: http
              path: /healthz
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
