---
# Source: app-config/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-app-config
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      helm.sh/chart: app-config-1.1.1
      app.kubernetes.io/name: app-config
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/version: "0.5.0"
      app.kubernetes.io/managed-by: Helm
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'app-config-1.1.1.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: management-portal
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'app-config-1.1.1.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: postgresql
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
    to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: 'app-config-1.1.1.tgz'
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
  policyTypes:
  - Ingress
  - Egress
---
# Source: app-config/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-app-config
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: app-config/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-app-config
  labels:
    app: app-config
    chart: app-config-1.1.1
    release: "my-release"
    heritage: "Helm"
type: Opaque
data:
  managementPortalClientId: "cmFkYXJfYXBwY29uZmln"
  managementPortalClientSecret: "c2VjcmV0"
  databaseUrl: "amRiYzpwb3N0Z3Jlc3FsOi8vcG9zdGdyZXNxbDo1NDMyL2FwcGNvbmZpZw=="
  databaseUser: "cG9zdGdyZXM="
  databasePassword: "cGFzc3dvcmQ="
---
# Source: app-config/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-app-config
  labels:
    app: app-config
    chart: app-config-1.1.1
    release: my-release
    heritage: Helm
data:
  healthcheck.sh: |
    #!/bin/sh
    STATUS=$(curl -s --max-time 4 localhost:8090/appconfig/api/health)
    if ! (echo "$STATUS" | grep -Fq 'db":{"status":"UP'); then
      exit 1
    fi
  appconfig.yml: |
    baseUri: http://0.0.0.0:8090/appconfig/api
    isJmxEnabled: false

    inject:
      enhancerFactory: org.radarbase.appconfig.inject.ManagementPortalEnhancerFactory

    auth:
      managementPortal:
        url: http://management-portal:8080/managementportal
      jwtResourceName: res_appconfig

    database:
      driver: org.postgresql.Driver
      dialect: org.hibernate.dialect.PostgreSQLDialect

    hazelcast:
      network:
        port: 5801
        join:
          multicastConfig:
            enabled: false
          kubernetesConfig:
            enabled: true
            properties:
              service-name: my-release-app-config
              service-port: 5801
              namespace: default
---
# Source: app-config/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-app-config
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- kind: ServiceAccount
  name: my-release-app-config
  namespace: default
---
# Source: app-config/templates/service-hazelcast.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-app-config-hazelcast
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: hazelcast
    targetPort: hazelcast
    protocol: TCP
    port: 5801
  selector:
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
---
# Source: app-config/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-app-config
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8090
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
---
# Source: app-config/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-app-config
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: app-config
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/configmap: 43de4c786a49bb414600bfdbfacc756bf4b214d5ae2e7d4baff26365ca25819d
        checksum/secrets: 213cf72004fee8157a8122d1cd2442c9ae021206d47ffa844799d2a880bf31b8
      labels:
        app.kubernetes.io/name: app-config
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-app-config
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - app-config
                  - key: "app.kubernetes.io/instance"
                    operator: In
                    values:
                    - my-release
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: app-config
          securityContext:
            {}
          image: "radarbase/radar-app-config:0.5.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: JAVA_OPTS
            value: "-Xmx550m"
          - name: MANAGEMENT_PORTAL_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: my-release-app-config
                key: managementPortalClientId
          - name: MANAGEMENT_PORTAL_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-app-config
                key: managementPortalClientSecret
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: my-release-app-config
                key: databaseUrl
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: my-release-app-config
                key: databaseUser
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-app-config
                key: databasePassword
          volumeMounts:
          - name: config
            mountPath: /etc/radar-app-config/
          ports:
            - name: http
              containerPort: 8090
              protocol: TCP
            - name: hazelcast
              containerPort: 5801
              protocol: TCP
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/radar-app-config/healthcheck.sh
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - /etc/radar-app-config/healthcheck.sh
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 2
            requests:
              cpu: 100m
              memory: 768Mi
      volumes:
        - name: config
          configMap:
            name: my-release-app-config
---
# Source: app-config/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-app-config
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: "nginx"
  tls:
    - hosts:
        - "localhost"
      secretName: radar-base-tls-appconfig
  rules:
    - host: "localhost"
      http:
        paths:
          - path: "/appconfig/api"
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-app-config
                port:
                  number: 8090
---
# Source: app-config/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-app-config-test-connection"
  labels:
    helm.sh/chart: app-config-1.1.1
    app.kubernetes.io/name: app-config
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-app-config:8090']
  restartPolicy: Never
