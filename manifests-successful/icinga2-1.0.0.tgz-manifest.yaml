---
# Source: icinga2/templates/configmap-notification.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: notification
  labels:
    app.kubernetes.io/name: icinga2
    helm.sh/chart: icinga2-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: icinga2
  annotations:
    helm.sh/hook-weight: "0"
data:
  mail-host-notification.sh: |-
    #!/bin/sh
    # Icinga 2 | (c) 2012 Icinga GmbH | GPLv2+
    # Except of function urlencode which is Copyright (C) by Brian White (brian@aljex.com) used under MIT license
  
    PROG="`basename $0`"
    ICINGA2HOST="`hostname`"
    MAILBIN="ssmtp"
  
    if [ -z "`which $MAILBIN`" ] ; then
        echo "$MAILBIN not found in \$PATH. Consider installing it."
        exit 1
    fi
  
    ## Function helpers
    Usage() {
    cat << EOF
  
    Required parameters:
        -d LONGDATETIME (\$icinga.long_date_time\$)
        -l HOSTNAME (\$host.name\$)
        -n HOSTDISPLAYNAME (\$host.display_name\$)
        -o HOSTOUTPUT (\$host.output\$)
        -r USEREMAIL (\$user.email\$)
        -s HOSTSTATE (\$host.state\$)
        -t NOTIFICATIONTYPE (\$notification.type\$)
  
    Optional parameters:
        -4 HOSTADDRESS (\$address\$)
        -6 HOSTADDRESS6 (\$address6\$)
        -b NOTIFICATIONAUTHORNAME (\$notification.author\$)
        -c NOTIFICATIONCOMMENT (\$notification.comment\$)
        -i ICINGAWEB2URL (\$notification_icingaweb2url\$, Default: unset)
        -f MAILFROM (\$notification_mailfrom\$, requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE))
        -v (\$notification_sendtosyslog\$, Default: false)
  
    EOF
    }
  
    Help() {
        Usage;
        exit 0;
    }
  
    Error() {
        if [ "$1" ]; then
        echo $1
        fi
        Usage;
        exit 1;
    }
  
    urlencode() {
        local LANG=C i=0 c e s="$1"
  
        while [ $i -lt ${#1} ]; do
        [ "$i" -eq 0 ] || s="${s#?}"
        c=${s%"${s#?}"}
        [ -z "${c#[[:alnum:].~_-]}" ] || c=$(printf '%%%02X' "'$c")
        e="${e}${c}"
        i=$((i + 1))
        done
        echo "$e"
    }
  
    ## Main
    while getopts 4:6::b:c:d:f:hi:l:n:o:r:s:t:v: opt
    do
        case "$opt" in
        4) HOSTADDRESS=$OPTARG ;;
        6) HOSTADDRESS6=$OPTARG ;;
        b) NOTIFICATIONAUTHORNAME=$OPTARG ;;
        c) NOTIFICATIONCOMMENT=$OPTARG ;;
        d) LONGDATETIME=$OPTARG ;; # required
        f) MAILFROM=$OPTARG ;;
        h) Help ;;
        i) ICINGAWEB2URL=$OPTARG ;;
        l) HOSTNAME=$OPTARG ;; # required
        n) HOSTDISPLAYNAME=$OPTARG ;; # required
        o) HOSTOUTPUT=$OPTARG ;; # required
        r) USEREMAIL=$OPTARG ;; # required
        s) HOSTSTATE=$OPTARG ;; # required
        t) NOTIFICATIONTYPE=$OPTARG ;; # required
        v) VERBOSE=$OPTARG ;;
        \?) echo "ERROR: Invalid option -$OPTARG" >&2
            Error ;;
        :) echo "Missing option argument for -$OPTARG" >&2
            Error ;;
        *) echo "Unimplemented option: -$OPTARG" >&2
            Error ;;
        esac
    done
  
    shift $((OPTIND - 1))
  
    ## Keep formatting in sync with mail-service-notification.sh
    for P in LONGDATETIME HOSTNAME HOSTDISPLAYNAME HOSTOUTPUT HOSTSTATE USEREMAIL NOTIFICATIONTYPE ; do
            eval "PAR=\$${P}"
  
            if [ ! "$PAR" ] ; then
                    Error "Required parameter '$P' is missing."
            fi
    done
  
    ## Build the message's subject
    SUBJECT="[$NOTIFICATIONTYPE] Host $HOSTDISPLAYNAME is $HOSTSTATE!"
  
    ## Build the notification message
    NOTIFICATION_MESSAGE=`cat << EOF
    ***** Host Monitoring on $ICINGA2HOST *****
  
    $HOSTDISPLAYNAME is $HOSTSTATE!
  
    Info:    $HOSTOUTPUT
  
    When:    $LONGDATETIME
    Host:    $HOSTNAME
    EOF
    `
  
    ## Check whether IPv4 was specified.
    if [ -n "$HOSTADDRESS" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
    IPv4:    $HOSTADDRESS"
    fi
  
    ## Check whether IPv6 was specified.
    if [ -n "$HOSTADDRESS6" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
    IPv6:    $HOSTADDRESS6"
    fi
  
    ## Check whether author and comment was specified.
    if [ -n "$NOTIFICATIONCOMMENT" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
  
    Comment by $NOTIFICATIONAUTHORNAME:
        $NOTIFICATIONCOMMENT"
    fi
  
    ## Check whether Icinga Web 2 URL was specified.
    if [ -n "$ICINGAWEB2URL" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
  
    $ICINGAWEB2URL/monitoring/host/show?host=$(urlencode "$HOSTNAME")"
    fi
  
    ## Check whether verbose mode was enabled and log to syslog.
    if [ "$VERBOSE" = "true" ] ; then
        logger "$PROG sends $SUBJECT => $USEREMAIL"
    fi
  
    ## Send the mail using the $MAILBIN command.
    ## If an explicit sender was specified, try to set it.
    if [ -n "$MAILFROM" ] ; then
        ## Modify this for your own needs!
        /usr/bin/printf "To: %s\nFrom: %s\nSubject: %s\n%b\n" "$USEREMAIL" "$MAILFROM" "$SUBJECT" "$NOTIFICATION_MESSAGE" | $MAILBIN "$USEREMAIL"
    else
        /usr/bin/printf "To: %s\nFrom: %s\nSubject: %s\n%b\n" "$USEREMAIL" "$MAILFROM" "$SUBJECT" "$NOTIFICATION_MESSAGE" | $MAILBIN "$USEREMAIL"
    fi
  mail-service-notification.sh: |-
    #!/bin/sh
    # Icinga 2 | (c) 2012 Icinga GmbH | GPLv2+
    # Except of function urlencode which is Copyright (C) by Brian White (brian@aljex.com) used under MIT license
  
    PROG="`basename $0`"
    ICINGA2HOST="`hostname`"
    MAILBIN="ssmtp"
  
    if [ -z "`which $MAILBIN`" ] ; then
        echo "$MAILBIN not found in \$PATH. Consider installing it."
        exit 1
    fi
  
    ## Function helpers
    Usage() {
    cat << EOF
  
    Required parameters:
        -d LONGDATETIME (\$icinga.long_date_time\$)
        -e SERVICENAME (\$service.name\$)
        -l HOSTNAME (\$host.name\$)
        -n HOSTDISPLAYNAME (\$host.display_name\$)
        -o SERVICEOUTPUT (\$service.output\$)
        -r USEREMAIL (\$user.email\$)
        -s SERVICESTATE (\$service.state\$)
        -t NOTIFICATIONTYPE (\$notification.type\$)
        -u SERVICEDISPLAYNAME (\$service.display_name\$)
  
    Optional parameters:
        -4 HOSTADDRESS (\$address\$)
        -6 HOSTADDRESS6 (\$address6\$)
        -b NOTIFICATIONAUTHORNAME (\$notification.author\$)
        -c NOTIFICATIONCOMMENT (\$notification.comment\$)
        -i ICINGAWEB2URL (\$notification_icingaweb2url\$, Default: unset)
        -f MAILFROM (\$notification_mailfrom\$, requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE))
        -v (\$notification_sendtosyslog\$, Default: false)
  
    EOF
    }
  
    Help() {
        Usage;
        exit 0;
    }
  
    Error() {
        if [ "$1" ]; then
        echo $1
        fi
        Usage;
        exit 1;
    }
  
    urlencode() {
        local LANG=C i=0 c e s="$1"
  
        while [ $i -lt ${#1} ]; do
        [ "$i" -eq 0 ] || s="${s#?}"
        c=${s%"${s#?}"}
        [ -z "${c#[[:alnum:].~_-]}" ] || c=$(printf '%%%02X' "'$c")
        e="${e}${c}"
        i=$((i + 1))
        done
        echo "$e"
    }
  
    ## Main
    while getopts 4:6:b:c:d:e:f:hi:l:n:o:r:s:t:u:v: opt
    do
        case "$opt" in
        4) HOSTADDRESS=$OPTARG ;;
        6) HOSTADDRESS6=$OPTARG ;;
        b) NOTIFICATIONAUTHORNAME=$OPTARG ;;
        c) NOTIFICATIONCOMMENT=$OPTARG ;;
        d) LONGDATETIME=$OPTARG ;; # required
        e) SERVICENAME=$OPTARG ;; # required
        f) MAILFROM=$OPTARG ;;
        h) Usage ;;
        i) ICINGAWEB2URL=$OPTARG ;;
        l) HOSTNAME=$OPTARG ;; # required
        n) HOSTDISPLAYNAME=$OPTARG ;; # required
        o) SERVICEOUTPUT=$OPTARG ;; # required
        r) USEREMAIL=$OPTARG ;; # required
        s) SERVICESTATE=$OPTARG ;; # required
        t) NOTIFICATIONTYPE=$OPTARG ;; # required
        u) SERVICEDISPLAYNAME=$OPTARG ;; # required
        v) VERBOSE=$OPTARG ;;
        \?) echo "ERROR: Invalid option -$OPTARG" >&2
            Usage ;;
        :) echo "Missing option argument for -$OPTARG" >&2
            Usage ;;
        *) echo "Unimplemented option: -$OPTARG" >&2
            Usage ;;
        esac
    done
  
    shift $((OPTIND - 1))
  
    ## Keep formatting in sync with mail-host-notification.sh
    for P in LONGDATETIME HOSTNAME HOSTDISPLAYNAME SERVICENAME SERVICEDISPLAYNAME SERVICEOUTPUT SERVICESTATE USEREMAIL NOTIFICATIONTYPE ; do
            eval "PAR=\$${P}"
  
            if [ ! "$PAR" ] ; then
                    Error "Required parameter '$P' is missing."
            fi
    done
  
    ## Build the message's subject
    SUBJECT="[$NOTIFICATIONTYPE] $SERVICEDISPLAYNAME on $HOSTDISPLAYNAME is $SERVICESTATE!"
  
    ## Build the notification message
    NOTIFICATION_MESSAGE=`cat << EOF
    ***** Service Monitoring on $ICINGA2HOST *****
  
    $SERVICEDISPLAYNAME on $HOSTDISPLAYNAME is $SERVICESTATE!
  
    Info:    $SERVICEOUTPUT
  
    When:    $LONGDATETIME
    Service: $SERVICENAME
    Host:    $HOSTNAME
    EOF
    `
  
    ## Check whether IPv4 was specified.
    if [ -n "$HOSTADDRESS" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
    IPv4:    $HOSTADDRESS"
    fi
  
    ## Check whether IPv6 was specified.
    if [ -n "$HOSTADDRESS6" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
    IPv6:    $HOSTADDRESS6"
    fi
  
    ## Check whether author and comment was specified.
    if [ -n "$NOTIFICATIONCOMMENT" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
  
    Comment by $NOTIFICATIONAUTHORNAME:
        $NOTIFICATIONCOMMENT"
    fi
  
    ## Check whether Icinga Web 2 URL was specified.
    if [ -n "$ICINGAWEB2URL" ] ; then
        NOTIFICATION_MESSAGE="$NOTIFICATION_MESSAGE
  
    $ICINGAWEB2URL/monitoring/service/show?host=$(urlencode "$HOSTNAME")&service=$(urlencode "$SERVICENAME")"
    fi
  
    ## Check whether verbose mode was enabled and log to syslog.
    if [ "$VERBOSE" = "true" ] ; then
        logger "$PROG sends $SUBJECT => $USEREMAIL"
    fi
  
    ## Send the mail using the $MAILBIN command.
    ## If an explicit sender was specified, try to set it.
    if [ -n "$MAILFROM" ] ; then
        ## Modify this for your own needs!
        /usr/bin/printf "To: %s\nFrom: %s\nSubject: %s\n%b\n" "$USEREMAIL" "$MAILFROM" "$SUBJECT" "$NOTIFICATION_MESSAGE" | $MAILBIN "$USEREMAIL"
    else
        /usr/bin/printf "To: %s\nFrom: %s\nSubject: %s\n%b\n" "$USEREMAIL" "$MAILFROM" "$SUBJECT" "$NOTIFICATION_MESSAGE" | $MAILBIN "$USEREMAIL"
    fi
  sendmessage.pl: |-
    #!/usr/bin/perl
    #
    # Copyright (c) 2001 SymLABS <symlabs@symlabs.com>, All Rights Reserved.
    # See README for license. NO WARRANTY.
    #
    # 15.3.2001, Sampo Kellomaki <sampo@iki.fi>
    # July, 2001, J-Phone specific experimentation and hacks
    #             by Felix Gaehtgens <felix@symlabs.com>
    # 1.8.2001, Checked in CVS and clarified, Sampo Kellomaki <sampo@symlabs.com>
    # $Id: sendmessage.pl,v 1.4 2001/09/28 20:08:25 sampo Exp $
    #
    # Send a message given on command line
    #
    # Test Net::SMPP in ESME role
    #
    # Usage: ./sendmessage.pl *message*
  
    use Net::SMPP;
    use Data::Dumper;
  
    $trace            = 1;
    $Net::SMPP::trace = 1;
    $sysid            = '9321';
    $pw               = 'ttmlmb';
    $host             = '10.51.37.196';
    $port             = 6200;
    $ton              = '1';
    $npi              = '1';
    $SrcAdrTON        = '1';
    $SrcAdrNPI        = '1';
    $DestAdrTON       = '1';
    $DestAdrNPI       = '1';
    $data_coding      = 'UCS2';
    $facil            = 0x00010003;       # NF_PDC | GF_PVCY
    my $phone = $ARGV[0];
    my $mymsg = $ARGV[1];
  
    foreach $argnum ( 2 .. $#ARGV ) {
  
        $mymsg = join( " ", $mymsg, $ARGV[$argnum] );
  
    }
    my $multimsg = 0;
    if ( length($mymsg) > 128 ) {
        $multimsg = 1;
    }
    $vers    = 0x4;    #3.4
    $if_vers = 0x33;
  
    ### Connect and bind
  
    ( $smpp, $resp ) = Net::SMPP->new_transmitter(
        $host,
  
        #    smpp_version => $vers,
        #    interface_version => $if_vers,
        system_id       => $sysid,
        password        => $pw,
        addr_ton        => $ton,
        addr_npi        => $npi,
        source_addr_ton => $SrcAdrTON,
        source_addr_npi => $SrcAdrNPI,
        dest_addr_ton   => $DestAdrTON,
        dest_addr_npi   => $DestAdrNPI,
        system_type     => 'client01',
  
        #    facilities_mask => $facil,
        port => $port,
    ) or die "Can't contact server: $!";
  
    ###
    ### Typical session in synchronous mode
    ###
  
    warn "Sending submit_sm";
    $multimsg = 0;
    $sent_no  = 0;
    $origref  = $ref = 160;    #160
    $textptr  = 0;
    $finished = 0;
  
    # $esmclass=0x00;
    # $esmclass=0x40 x1xxxxxx;
    $esmclass = 0x40;
  
    #print "FELIX: Now checking length of string: ".length ($mymsg)."\n";
    # $msgtext = $mymsg;
    printf "Now sending: (multimsg = %.8x) (len: %d) %s\n", $multimsg,
      length($msgtext), $msgtext;
    $msgref = sprintf "%.8d", $ref;
    print "MESSAGE REFERENCE: $msgref   REF= $ref\n";
  
    if ( length($mymsg) > 128 ) {
        $multimsg_maxparts = int( length($mymsg) / 128 );
        if ( length($mymsg) % 128 ) {
            $multimsg_maxparts++;
        }
        $multimsg_curpart = 1;
        print "multimsgsparts: $multimsg_maxparts\n";
    }
    $msgtext = substr( $mymsg, 0, 128, "" );
    while ( length($msgtext) ) {
  
        ### See V4, p. 77
  
        if ($multimsg_curpart) {
            @udh_ar = map { sprintf "%x", $_ } $origref, $multimsg_maxparts,
              $multimsg_curpart;
            $udh = pack( "hhhhhh", 0x05, 0x00, 0x03, @udh_ar );
            $multimsg =
              pack( "nCC", $origref, $multimsg_curpart, $multimsg_maxparts );
            printf STDERR "\nI AM SETTING MULTIPART: len=%d\n", multimsg;
        }
        else {
            $multimsg = undef;
        }
        printf "Now sending: (multimsg = %.8x) (len: %d) %s\n", $multimsg,
          length($msgtext), $msgtext;
        $msgref = sprintf "%.8d", $ref;
        print "MESSAGE REFERENCE: $msgref   REF= $ref\n";
  
        $resp = $smpp->submit_sm(    #message_class=>0,
            protocol_id      => 0x00,              # telematic_interworking
            validity_period  => '',                # "default"
            source_addr_ton  => $SrcAdrTON,
            source_addr      => '9321',
            destination_addr => $phone,
            esm_class        => $esmclass,
            data_coding      => $data_coding,
            short_message    => $udh . $msgtext,
  
            #  PDC_MessageClass => "\x20\x00",
            #  PDC_PresentationOption => "\x01\xff\xff\xff",
            #  PDC_AlertMechanism => "\x01",
            #  PDC_Teleservice => "\x04",
            #  PDC_MultiPartMessage => $multimsg,
            #  PDC_PredefinedMsg => "\0",
            #  PVCY_AuthenticationStr => "\x01\x00\x00",
  
            #  source_subaddress => "\x01\x00\x00",  # PDC_Originator_Subaddr
            #  dest_subaddress => "\x01\x00\x00"
        ) or die "Response indicated error: ";
  
        $multimsg_curpart++;
        $msgtext = substr( $mymsg, 0, 128, "" );
        $ref++;
    }
  
    # warn "################";
  
    # warn Dumper $resp;
  
    # warn "################";
  
    $resp = $smpp->unbind() or die "teo";
  
    # warn Dumper $resp;
    warn "Done.";
  
    #EOF
  sms-host-notification.sh: |-
    #!/bin/sh
    template=`cat <<TEMPLATE
    ***** NMS HOST METRO *****
    Host: $HOSTALIAS - $HOSTADDRESS
    State: $HOSTSTATE
    Time: $LONGDATETIME
    Additional Info: $HOSTOUTPUT
    Source server: $HOSTNAME
    TEMPLATE
    `
    perl /etc/icinga2/scripts/sendmessage.pl $phone "$template"
  sms-service-notification.sh: |-
    #!/bin/sh
    template=`cat <<TEMPLATE
    Service: $SERVICEDESC
    State: $SERVICESTATE
    Host: $HOSTALIAS
    Address: $HOSTADDRESS
    Info: $SERVICEOUTPUT
    Time: $LONGDATETIME
    TEMPLATE
    `
    perl /etc/icinga2/scripts/sendmessage.pl $phone "$template"
---
# Source: icinga2/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: icinga2-headless
  labels:
    app.kubernetes.io/name: icinga2
    helm.sh/chart: icinga2-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: icinga2
  annotations:
    helm.sh/hook-weight: "0"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: icinga2-api
      port: 5665
      targetPort: icinga2-api
      protocol: TCP
    - name: livestatus
      port: 6558
      targetPort: livestatus
      protocol: TCP
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: icinga2
    app.kubernetes.io/instance: my-release
---
# Source: icinga2/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: icinga2-satellite-headless
  labels:
    app.kubernetes.io/name: icinga2
    helm.sh/chart: icinga2-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: icinga2
  annotations:
    helm.sh/hook-weight: "0"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: icinga2-api
      port: 5665
      targetPort: icinga2-api
      protocol: TCP
    - name: livestatus
      port: 6558
      targetPort: livestatus
      protocol: TCP
  selector: 
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: icinga2-satellite
---
# Source: icinga2/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: icinga2
  labels:
    app.kubernetes.io/name: icinga2
    helm.sh/chart: icinga2-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: icinga2-api
      port: 5665
      targetPort: icinga2-api
      nodePort: null
    - name: livestatus
      port: 6558
      targetPort: livestatus
      nodePort: null
    - name: redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: icinga2
    app.kubernetes.io/instance: my-release
---
# Source: icinga2/templates/statefulset-distribute-master.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-icinga2-master
  labels:
    app.kubernetes.io/name: icinga2
    helm.sh/chart: icinga2-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: icinga2
  annotations:
    helm.sh/hook-weight: "0"
spec:
  serviceName: icinga2-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: icinga2
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: icinga2
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: icinga2
        helm.sh/chart: icinga2-1.0.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: icinga2
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: icinga2
                app.kubernetes.io/name: icinga2
            topologyKey: kubernetes.io/hostname
      containers:
        - name: icinga2-side-car-scanning-satellite
          image: svtechnmaa/svtech_icinga2:v1.1.6
          securityContext:
            runAsUser: 999
          command:
          - bash
          - -ec
          - |
            sleep 120 # DO NOT REMOVE THIS
            export POD_INDEX=${POD_NAME: -1}
            if [ $POD_INDEX != 0 ]; then
            while true
            do
              echo "Do nothing..."
              sleep 60
            done
            else
            git config --global user.name "icinga"
            git config --global user.email "icinga@localhost"
            touch /etc/icinga2/zones.d/master/zones.conf
            touch /etc/icinga2/zones.d/master/satellite.conf
            python3 /opt/SVTECH-Junos-Automation/module_utils/ICINGA2_DISCOVERY.py \
              --sts_name my-release-icinga2-satellite \
              --namespace icinga2-1.0.0.tgz \
              --all_config_folder /etc/icinga2/zones.d/all_config \
              --discovery_folder /etc/icinga2/zones.d \
              --zone_prefix zone_satellite \
              --endpoint_prefix my-release-icinga2-satellite \
              --headless_service icinga2-satellite-headless \
              --master_sts_name my-release-icinga2-master \
              --master_zones_config /etc/icinga2/zones.d/master/zones.conf \
              --master_endpoints_config /etc/icinga2/zones.d/master/endpoints.conf \
              --master_constants_config /etc/icinga2/zones.d/master/constants.conf \
              --master_folder /etc/icinga2/zones.d/master \
              --master_zone_config_path /etc/icinga2/zones.d/master_zones.conf \
              --master_headless_service icinga2-headless \
              --checking_interval 60 \
              --waiting_time_after_rebalancing 300
            fi
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
        # redis container
        - name: redis
          image: docker.io/redis:7.2.3 # redis:7.2.3
          imagePullPolicy: IfNotPresent
          ports:
          - name: redis
            containerPort: 6379
          ## ENV
          env:
          - name: TZ
            value: "Asia/Ho_Chi_Minh"
        # icingadb container
        - name: icingadb
          image: docker.io/svtechnmaa/svtech_icingadb:v1.1.2
          ## ENV
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name          
          - name: ICINGADB_REDIS_HOST
            value: "localhost"
          - name: ICINGADB_REDIS_PORT
            value: "6379"
          - name: ICINGADB_DATABASE_HOST
            value: "mariadb"
          - name: ICINGADB_DATABASE_PORT
            value: "3306"
          - name: ICINGADB_DATABASE_USER
            value: "icingadb"
          - name: ICINGADB_DATABASE_PASSWORD
            value: "juniper@123"
          - name: ICINGADB_DATABASE_DATABASE
            value: "icingadb"
          - name: RETENTION_HISTORY_DAYS
            value: "30"
          - name: RETENTION_OPTION_ACKNOWLEDGEMENT
            value: "30" 
          - name: RETENTION_OPTION_COMMENT
            value: "30"
          - name: RETENTION_OPTION_DOWNTIME
            value: "30"
          - name: RETENTION_OPTION_FLAPPING
            value: "30"
          - name: RETENTION_OPTION_NOTIFICATION
            value: "30"
          - name: RETENTION_OPTION_STATE
            value: "30"
          - name: TZ
            value: "Asia/Ho_Chi_Minh"
          ## Config icingadb
          command:
            - /bin/bash
            - -c
            - |
              POD_INDEX=${POD_NAME: -1}
              cat > /etc/icingadb/icingadb.conf << EOF
              database:
                host: $ICINGADB_DATABASE_HOST
                port: $ICINGADB_DATABASE_PORT
                database: $ICINGADB_DATABASE_DATABASE
                user: $ICINGADB_DATABASE_USER
                password: $ICINGADB_DATABASE_PASSWORD
              redis:
                host: $ICINGADB_REDIS_HOST
                port: $ICINGADB_REDIS_PORT


              retention:
                # Number of days to RETAIN FULL HISTORICAL data. By default, historical data is retained forever.
                history-days: $RETENTION_HISTORY_DAYS
                # Number of days to retain historical data for SLA reporting. By default, it is retained forever.
              #  sla-days:

                # Map of history category to number of days to retain its data in order to
                # enable retention only for specific categories or to
                # override the number that has been configured in history-days.
                options:
                  acknowledgement: $RETENTION_OPTION_ACKNOWLEDGEMENT
                  comment: $RETENTION_OPTION_COMMENT
                  downtime: $RETENTION_OPTION_DOWNTIME
                  flapping: $RETENTION_OPTION_FLAPPING
                  notification: $RETENTION_OPTION_NOTIFICATION
                  state: $RETENTION_OPTION_STATE
              EOF
              /entrypoint
        # icinga2 container
        - name: icinga2
          image: svtechnmaa/svtech_icinga2:v1.1.6
          imagePullPolicy: "IfNotPresent"
          command:
          - bash
          - -ec
          - |
            function check_empty_dir {
                dir="$1"
                default_dir="$2"
                status=`ls -A $dir | grep -v 'lost+found' | grep -v '^\.st*' | wc -l`

                if [[ "$status" != "0" ]]; then
                    echo "$dir is not Empty. Take no action"
                else
                    echo "$dir is Empty. Push icinga2 default config to /etc/icinga2:"
                    rsync -avzhp  $default_dir/* $dir
                    chown icinga:icinga $dir -R && chmod 775 $dir -R
                fi
            }

            export REPO_DIR="/opt/SVTECH-Junos-Automation"
            if [ -d "$REPO_DIR" ];then
                # ADD ICINGA2s' PREBUILD CONFIG and PLUGINS by SVTECH
                rsync -azhp $REPO_DIR/icinga2-entities/plugins-* /opt/default_plugin
                rsync -azhp $REPO_DIR/module_utils /opt/default_plugin
                check_empty_dir "/etc/icinga2/zones.d/global-templates" "$REPO_DIR/icinga2-entities/configs/global-templates"
                check_empty_dir "/etc/icinga2/zones.d/master" "$REPO_DIR/icinga2-entities/configs/master"
                check_empty_dir "/etc/icinga2/scripts" "$REPO_DIR/icinga2-entities/scripts"
            fi

            check_empty_dir "/etc/icinga2/conf.d" "/opt/default_config/conf.d"
            check_empty_dir "/etc/icinga2/features-available" "/opt/default_config/features-available"
            check_empty_dir "/usr/share/icinga2/plugins/libexec" "/opt/default_plugin"

            cp --update --symbolic-link /usr/share/icinga2/plugins/libexec/plugins-pl/* /usr/share/icinga2/plugins/libexec
            chmod -R 775 /etc/icinga2/conf.d $PLUGIN_DIR
            chown -R icinga:icinga /etc/icinga2/conf.d $PLUGIN_DIR

            mkdir -p /etc/icinga2/zones.d/all_config
            chmod -R 775 /etc/icinga2/zones.d/all_config

            FULL_POD_NAME=${POD_NAME}.icinga2-headless.icinga2-1.0.0.tgz
            FULL_NAME=my-release-icinga2-master
            COMMON_NAME_ORIGIN=${COMMON_NAME}
            POD_INDEX=${POD_NAME: -1}
            if [ $POD_INDEX != 0 ]; then
              echo "***************** inside if ***************"
              master_pod_name=${FULL_NAME}-0.icinga2-headless.icinga2-1.0.0.tgz

              export ROLE="satellite"

              export PARENT_NAME=${COMMON_NAME}
              export PARENT_ZONE=${ZONE}

              export PARENT_HOST=$master_pod_name
              export PARENT_PORT=5665
              export TRUSTEDCERT=/var/lib/icinga2/certs/trusted-parent.crt

              export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
              export ZONE="${ZONE}-${POD_INDEX}"
            else
              export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
            fi

            echo "*****************************"

            echo "$ROLE, $PARENT_NAME, $PARENT_ZONE, $COMMON_NAME, $ZONE "

            echo "******************************"


            # Init Config
            /opt/scripts/entrypoint.sh no_start

            if [ ! -e "/etc/icinga2/zones.d/master_zones.conf" ]; then
            cat <<EOF | tee /etc/icinga2/zones.d/master_zones.conf
            object Endpoint "${COMMON_NAME_ORIGIN}-0" {
              host = "${FULL_NAME}-0.icinga2-headless.icinga2-1.0.0.tgz.svc.cluster.local"
              port = "5665"
            }
            object Endpoint "${COMMON_NAME_ORIGIN}-1" {
              host = "${FULL_NAME}-1.icinga2-headless.icinga2-1.0.0.tgz.svc.cluster.local"
              port = "5665"
            }

            object Zone "master" {
              endpoints = [
              "${COMMON_NAME_ORIGIN}-0" ,
              "${COMMON_NAME_ORIGIN}-1" ,
              ]
            }

            object Zone "global-templates" {
              global = true
            }

            object Zone "director-global" {
              global = true
            }
            EOF
            fi

            rm -rf /etc/icinga2/zones.conf
            ln -s /etc/icinga2/zones.d/master_zones.conf /etc/icinga2/zones.conf

            # cat <<EOF | tee /etc/icinga2/zones.conf
            # object Endpoint "master-0" {
            #         host = "localhost"
            # }

            # object Zone "master" {
            #         endpoints = [ "master-0" ]
            # }


            # object Zone "global-templates" {
            #         global = true
            # }

            # object Zone "director-global" {
            #         global = true
            # }

            # EOF
            

            # Check git folder
            check_git=`ls -la /etc/icinga2/zones.d | grep ".git" | wc -l`
            echo $check_git
            if [ $check_git == 0 ]; then
                cd /etc/icinga2/zones.d/ && \
                echo ".stversions" > .gitignore && \
                git init && \
                git config --global user.name icinga && \
                git config --global user.email icinga@localhost && \
                git add -A && git commit -m "init config"

                # Add curl into post-commit
            cat << 'EOF' > /etc/icinga2/zones.d/.git/hooks/post-commit
            echo 'Sleep 30s before restart, please wait'
            sleep 30
            MASTER_LIST=($(dig srv +search +short icinga2-headless |awk '{print $4}' | uniq | sed 's/.$//g'))
            for MASTER in "${MASTER_LIST[@]}"
            do
            master_index=$(cut -d'.' -f1 <<< $(echo $MASTER 2>/dev/null) | awk -F'-' '{print $NF}')
            url="https://my-release-icinga2-master-${master_index}.icinga2-headless.icinga2-1.0.0.tgz:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF
            fi

            # Add curl into reload
            cat << 'EOF' > /usr/bin/reload
            echo 'Sleep 30s before restart, please wait'
            sleep 30
            icinga2 daemon -C > /dev/null 2>&1
            exit_code=$?
            if [ $exit_code -eq 0 ]; then
            echo "Valid icinga2 config"
            else
            echo "WARNING: Invalid icinga2 config, resolve the problem first"
            echo "Cancle restart!!!"
            exit 1
            fi
            MASTER_LIST=($(dig srv +search +short icinga2-headless |awk '{print $4}' | uniq | sed 's/.$//g'))
            for MASTER in "${MASTER_LIST[@]}"
            do
            master_index=$(cut -d'.' -f1 <<< $(echo $MASTER 2>/dev/null) | awk -F'-' '{print $NF}')
            url="https://my-release-icinga2-master-${master_index}.icinga2-headless.icinga2-1.0.0.tgz:5665/v1/actions/restart-process?pretty=1"
            curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST "$url"
            done
            EOF

            if [ ! -e "/etc/icinga2/zones.d/master/${COMMON_NAME}.conf" ]; then
            cat << EOF > /etc/icinga2/zones.d/master/${COMMON_NAME}.conf
            object Host "${COMMON_NAME}" {
              import "generic-host-nms"
              check_command = "hostalive"
              address = "${FULL_POD_NAME}"
              address6 = "::1"
              vars.agent_endpoint = name
              vars.device_type = ""
              vars.os = "Linux"
              vars.http_vhosts["http"] = {
                http_uri = "/thruk"
              }
              vars.disks["disk"] = {
                /* No parameters. */
              }
              vars.notification["mail"] = {
                groups = [ "icingaadmins" ]
              }
            }
            EOF
            fi

            # truncate some config files
            truncate -s 0 /etc/icinga2/conf.d/services.conf
            truncate -s 0 /etc/icinga2/conf.d/hosts.conf

            chmod 777 /etc/icinga2/zones.d -R
            echo "Start Icinga2:"
            exec /tini -- icinga2 daemon
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: ROLE
              value: master
            - name: COMMON_NAME
              value: master
            - name: ZONE
              value: master
            - name: ICINGA_HOST
              value: "0.0.0.0"
            - name: ICINGA_PORT
              value: "5665"
            - name: INFLUXDB_ENABLE
              value: "true"
            - name: INFLUXDB_HOST
              value: "influxdb-relay"
            - name: INFLUXDB_PORT
              value: "9096"
            - name: INFLUXDB_DATABASE
              value: "influxdb_nms"
            - name: INFLUXDB_USER
              value: "juniper"
            - name: INFLUXDB_PASSWORD
              value: "juniper@123"
            # Enable and config icingadb feature
            - name: ICINGADB_ENABLE
              value: "true"
            - name: REDIS_HOST
              value: "localhost"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: icinga2-api
              containerPort: 5665
              # protocol: TCP
            - name: livestatus
              containerPort: 6558
              # protocol: TCP
          resources:
            limits: {}
            requests: {}
      initContainers:
        - name: wait-for-init-repo
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
                until [ `ls -A /opt/SVTECH-Junos-Automation | grep 'completed' | wc -l` != 0 ];
                do
                  echo "Waiting for Init Repo...";
                  sleep 2;
                done
          volumeMounts:
        - name: wait-for-influxdb
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
              until nc -zvw5 influxdb-relay 9096; do echo "Waiting for InfluxDB..."; sleep 2; done

      imagePullSecrets:
      - name: ghcr-pull-secret
---
# Source: icinga2/templates/statefulset-distribute-satelite.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: icinga2-satellite
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: icinga2-satellite
    # helm.sh/chart: icinga2-satellite-1.0.0
  name: my-release-icinga2-satellite
spec:
  # podManagementPolicy: OrderedReady
  replicas: 3
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: icinga2-satellite
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: icinga2-satellite
  serviceName: icinga2-satellite-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/component: icinga2-satellite
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: icinga2-satellite
        helm.sh/chart: icinga2-satellite-1.0.0
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - icinga2-satellite
            topologyKey: kubernetes.io/hostname
      containers:
        - name: icinga2
          image: svtechnmaa/svtech_icinga2:v1.1.6
          imagePullPolicy: "IfNotPresent"
          command:
          - bash
          - -ec
          - |
            # COMMON_NAME=$() # DO NOT CHANGE THIS
            COMMON_NAME=${HOSTNAME%-*} # DO NOT CHANGE THIS

            SATELLITE_ZONE_NAME="zone_satellite" # DO NOT CHANGE THIS; DO NOT NAME IT 'satellite'
            satellite_index=$(awk -F'-' '{print $NF}' <<< $HOSTNAME)
            zone_index=$(($satellite_index/2))
            full_satellite_zone_name=${SATELLITE_ZONE_NAME}-${zone_index}

            function check_empty_dir {
                dir="$1"
                default_dir="$2"
                status=`ls -A $dir | grep -v 'lost+found' | grep -v '^\.st*' | wc -l`

                if [[ "$status" != "0" ]]; then
                    echo "$dir is not Empty. Take no action"
                else
                    echo "$dir is Empty. Push icinga2 default config to /etc/icinga2:"
                    rsync -avzhp  $default_dir/* $dir
                    chown icinga:icinga $dir -R && chmod 775 $dir -R
                fi
            }

            export REPO_DIR="/opt/SVTECH-Junos-Automation"
            if [ -d "$REPO_DIR" ];then
                # ADD ICINGA2s' PREBUILD CONFIG and PLUGINS by SVTECH
                rsync -azhp $REPO_DIR/icinga2-entities/plugins-* /opt/default_plugin
                rsync -azhp $REPO_DIR/module_utils /opt/default_plugin
                check_empty_dir "/etc/icinga2/zones.d/global-templates" "$REPO_DIR/icinga2-entities/configs/global-templates"
                check_empty_dir "/etc/icinga2/zones.d/master" "$REPO_DIR/icinga2-entities/configs/master"
                check_empty_dir "/etc/icinga2/scripts" "$REPO_DIR/icinga2-entities/scripts"
            fi

            check_empty_dir "/etc/icinga2/conf.d" "/opt/default_config/conf.d"
            check_empty_dir "/etc/icinga2/features-available" "/opt/default_config/features-available"
            check_empty_dir "/usr/share/icinga2/plugins/libexec" "/opt/default_plugin"

            FULL_POD_NAME=${POD_NAME}.icinga2-satellite-headless.icinga2-1.0.0.tgz
            FULL_NAME=my-release-icinga2-master
            COMMON_NAME_ORIGIN=${COMMON_NAME}
            POD_INDEX=${POD_NAME: -1}

            # if [ $POD_INDEX != 0 ]; then
            master_pod_name=${FULL_NAME}-0.icinga2-headless.icinga2-1.0.0.tgz

            export ROLE="satellite"

            export PARENT_NAME=${COMMON_NAME}
            export PARENT_ZONE=${ZONE}

            export PARENT_HOST=$master_pod_name
            export PARENT_PORT=5665
            export TRUSTEDCERT=/var/lib/icinga2/certs/trusted-parent.crt

            export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
            export ZONE="${ZONE}-${POD_INDEX}"
            # else
            #   export COMMON_NAME="${COMMON_NAME}-${POD_INDEX}"
            # fi



            # Init Config
            /opt/scripts/entrypoint.sh no_start

            MY_ZONE_INDEX=$(($(awk -F'-' '{print $NF}' <<< "${HOSTNAME}")/2))

            #$( awk -F'-' '{print $NF}'| <<< $(echo $HOSTNAME 2>/dev/null))
            MY_ZONE="zone_satellite"-${MY_ZONE_INDEX}

            cat <<EOF | tee /etc/icinga2/zones.conf
            object Endpoint "master-0" {
            }
            object Endpoint "master-1" {
            }

            object Zone "master" {
              endpoints = [
              "master-0" ,
              "master-1" ,
              ]
            }

            object Endpoint "$COMMON_NAME" {
            }

            object Zone "$MY_ZONE" {
                    endpoints = [ "$COMMON_NAME" ]
                    parent = "master"
            }

            object Zone "global-templates" {
                    global = true
            }

            object Zone "director-global" {
                    global = true
            }
            EOF


            # fix these later
            # truncate -s 0 /etc/icinga2/features-enabled/api.conf
            # truncate -s 0 /etc/icinga2/zones.d/master/endpoints.conf
            # truncate -s 0 /etc/icinga2/zones.d/master/zones.conf
            rm -rf /etc/icinga2/zones.d/* # it has a copy default config to this dir, but satellite does not need these
            touch /etc/icinga2/zones.d/empty.conf # git commit throw empty, and might stop at this point? review later

            # Check git folder
            check_git=`ls -la /etc/icinga2/zones.d | grep ".git" | wc -l`
            echo $check_git
            if [ $check_git == 0 ]; then
                cd /etc/icinga2/zones.d/ && \
                git init && \
                git config --global user.name icinga && \
                git config --global user.email icinga@localhost && \
                git add -A && git commit -m "init config"


                # **add its reload here, later
                # # Add curl into post-commit
                # echo "curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST 'https://${FULL_NAME}-0.icinga2-satellite-headless.icinga2-1.0.0.tgz:5665/v1/actions/restart-process?pretty=1'" >> /etc/icinga2/zones.d/.git/hooks/post-commit
                # echo "curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST 'https://${FULL_NAME}-1.icinga2-satellite-headless.icinga2-1.0.0.tgz:5665/v1/actions/restart-process?pretty=1'" >> /etc/icinga2/zones.d/.git/hooks/post-commit
                # echo "curl -k -s -S -i -u icingaAdmin:icingaAdmin -H 'Accept: application/json' -X POST 'https://${FULL_NAME}-2.icinga2-satellite-headless.icinga2-1.0.0.tgz:5665/v1/actions/restart-process?pretty=1'" >> /etc/icinga2/zones.d/.git/hooks/post-commit

            fi

            # Add curl into reload
            # cat /etc/icinga2/zones.d/.git/hooks/post-commit > /usr/bin/reload

            # ** no /etc/icinga2/zones.d/master after I remove this dir; fix this later
            # mkdir /etc/icinga2/zones.d/${full_satellite_zone_name}
            # if [ ! -e "/etc/icinga2/zones.d/${full_satellite_zone_name}/${COMMON_NAME}.conf" ]; then
            # cat << EOF > /etc/icinga2/zones.d/${full_satellite_zone_name}/${COMMON_NAME}.conf
            # object Host "${COMMON_NAME}" {
            #   import "generic-host-nms"
            #   check_command = "hostalive"
            #   address = "${FULL_POD_NAME}"
            #   address6 = "::1"
            #   vars.agent_endpoint = name
            #   vars.device_type = ""
            #   vars.os = "Linux"
            #   vars.http_vhosts["http"] = {
            #     http_uri = "/thruk"
            #   }
            #   vars.disks["disk"] = {
            #     /* No parameters. */
            #   }
            #   vars.notification["mail"] = {
            #     groups = [ "icingaadmins" ]
            #   }
            # }
            # EOF
            # fi

            # truncate some config files
            truncate -s 0 /etc/icinga2/conf.d/services.conf
            truncate -s 0 /etc/icinga2/conf.d/hosts.conf

            # chmod 777 /etc/icinga2/zones.d -R

            icinga2 feature disable command icingadb ido-mysql influxdb livestatus notification syslog
            # **check this, icinga satellite still need this file to be created manually
            cat > /etc/icinga2/features-enabled/api.conf << EOF
            object ApiListener "api" {
              accept_config = true
              accept_commands = true
            }
            EOF

            # remove some default folder inside image 

            echo "Start Icinga2:"
            exec /tini -- icinga2 daemon
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: ROLE
              value: master
            - name: COMMON_NAME
              value: master
            - name: ZONE
              value: master
            - name: ICINGA_HOST
              value: "0.0.0.0"
            - name: ICINGA_PORT
              value: "5665"
            - name: INFLUXDB_ENABLE
              value: "true"
            - name: INFLUXDB_HOST
              value: "influxdb-relay"
            - name: INFLUXDB_PORT
              value: "9096"
            - name: INFLUXDB_DATABASE
              value: "influxdb_nms"
            - name: INFLUXDB_USER
              value: "juniper"
            - name: INFLUXDB_PASSWORD
              value: "juniper@123"
          ports:
            - name: icinga2-api
              containerPort: 5665
              # protocol: TCP
            - name: livestatus
              containerPort: 6558
              # protocol: TCP
          resources:
            limits: {}
            requests: {}
      imagePullSecrets:
      - name: ghcr-pull-secret
      initContainers:
        - name: wait-for-init-repo
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
                until [ `ls -A /opt/SVTECH-Junos-Automation | grep 'completed' | wc -l` != 0 ];
                do
                  echo "Waiting for Init Repo...";
                  sleep 2;
                done
          volumeMounts:
        - name: wait-for-influxdb
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
              until nc -zvw5 influxdb-relay 9096; do echo "Waiting for InfluxDB..."; sleep 2; done
