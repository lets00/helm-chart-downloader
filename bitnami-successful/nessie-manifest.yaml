---
# Source: nessie/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: nessie/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nessie
      app.kubernetes.io/component: nessie
      app.kubernetes.io/part-of: nessie
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 19120
        - port: 9000
---
# Source: nessie/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: nessie/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nessie
      app.kubernetes.io/component: nessie
      app.kubernetes.io/part-of: nessie
---
# Source: nessie/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
automountServiceAccountToken: false
---
# Source: nessie/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
automountServiceAccountToken: false
---
# Source: nessie/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
type: Opaque
data:
  postgres-password: "SW1OV1k0SDh3Zw=="
  password: "bUZ2VW5EYThIcw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: nessie/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
data:
---
# Source: nessie/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
data:
  NESSIE_VERSION_STORE_PERSIST_JDBC_DATASOURCE: postgresql
  NESSIE_VERSION_STORE_TYPE: JDBC
  QUARKUS_DATASOURCE_POSTGRESQL_JDBC_URL: jdbc:postgresql://my-release-postgresql:5432/bitnami_nessie
  QUARKUS_DATASOURCE_POSTGRESQL_USERNAME: bn_nessie
  QUARKUS_HTTP_PORT: "19120"
  QUARKUS_LOG_LEVEL: INFO
  QUARKUS_MANAGEMENT_PORT: "9000"
---
# Source: nessie/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: nessie/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: nessie/templates/service-management.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nessie-management
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-management
      port: 9000
      targetPort: http-management
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: nessie
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
---
# Source: nessie/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http-server
      port: 19120
      targetPort: http-server
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: nessie
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
---
# Source: nessie/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-nessie
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nessie
    app.kubernetes.io/version: 0.90.4
    helm.sh/chart: nessie-0.1.8
    app.kubernetes.io/component: nessie
    app.kubernetes.io/part-of: nessie
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nessie
      app.kubernetes.io/component: nessie
      app.kubernetes.io/part-of: nessie
  template:
    metadata:
      annotations:
        checksum/config: d0dd05a1f7211146965aa6aca1edf871723ea143e68a2520db4b572a8c3d4241
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nessie
        app.kubernetes.io/version: 0.90.4
        helm.sh/chart: nessie-0.1.8
        app.kubernetes.io/component: nessie
        app.kubernetes.io/part-of: nessie
    spec:
      serviceAccountName: my-release-nessie
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: nessie
                    app.kubernetes.io/component: nessie
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Nessie.
        - name: wait-for-db
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r14
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
              export DATABASE_PASSWORD="$(< "/bitnami/nessie/secrets/database/QUARKUS_DATASOURCE_POSTGRESQL_PASSWORD")"
              info "Waiting for host $DATABASE_HOST"
              export PGCONNECT_TIMEOUT="5"
              psql_is_ready() {
                  if ! echo "SELECT 1" | postgresql_execute "$DATABASE_NAME" "$DATABASE_USER" "$DATABASE_PASSWORD" "-h" "$DATABASE_HOST"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_USER
              value: "bn_nessie"
            - name: DATABASE_NAME
              value: "bitnami_nessie"
          volumeMounts:
            - name: database-password
              mountPath: /bitnami/nessie/secrets/database
      containers:
        - name: nessie
          image: docker.io/bitnami/nessie:0.90.4-debian-12-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              # We need to load all the secret env vars to the system
              for file in $(find /bitnami/nessie/secrets -type f); do
                  env_var_name="$(basename $file)"
                  echo "Exporting $env_var_name"
                  export $env_var_name="$(< $file)"
              done
              exec java  -jar /opt/bitnami/nessie/quarkus-run.jar
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - configMapRef:
                name: my-release-nessie
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          ports:
            - name: http-server
              containerPort: 19120
            - name: http-management
              containerPort: 9000
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /q/health/live
              port: http-management
              scheme: HTTP
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /q/health/ready
              port: http-management
              scheme: HTTP
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: database-password
              mountPath: /bitnami/nessie/secrets/database
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: database-password
          secret:
            secretName: my-release-postgresql
            items:
              - key: password
                path: QUARKUS_DATASOURCE_POSTGRESQL_PASSWORD
---
# Source: nessie/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "nessie"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.6
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r14
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_nessie"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "bitnami_nessie"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_nessie" -d "dbname=bitnami_nessie" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_nessie" -d "dbname=bitnami_nessie" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
