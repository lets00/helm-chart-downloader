---
# Source: harbor/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: harbor/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-redis
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: harbor/templates/core/core-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: core
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: harbor/templates/jobservice/jobservice-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: jobservice
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: harbor/templates/nginx/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-nginx
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: nginx
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: harbor/templates/portal/portal-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-portal
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: portal
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: portal
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: harbor/templates/registry/registry-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: registry
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: registry
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5000
        - port: 8080
        - port: 5001
---
# Source: harbor/templates/trivy/trivy-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-harbor-trivy
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: trivy
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: harbor/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: harbor/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-redis-master
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: harbor/templates/core/core-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: core
---
# Source: harbor/templates/jobservice/jobservice-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: jobservice
---
# Source: harbor/templates/nginx/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-nginx
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: nginx
---
# Source: harbor/templates/portal/portal-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-portal
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: portal
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: portal
---
# Source: harbor/templates/registry/registry-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: registry
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: registry
---
# Source: harbor/templates/trivy/trivy-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-harbor-trivy
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: trivy
---
# Source: harbor/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
automountServiceAccountToken: false
---
# Source: harbor/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-master
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
---
# Source: harbor/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
type: Opaque
data:
  postgres-password: "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: harbor/templates/core/core-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-core-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
type: Opaque
data:
  _REDIS_URL_CORE: "cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzA="
  _REDIS_URL_REG: "cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzI="
  REGISTRY_CREDENTIAL_USERNAME: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "V3Q3ZkU4NXI1WGxDZXRmRTBtQUFYOUZKNjVuNUVsRVQ="
  HARBOR_ADMIN_PASSWORD: "aFRVejNUUHlrSA=="
  POSTGRESQL_PASSWORD: "bm90LXNlY3VyZS1kYXRhYmFzZS1wYXNzd29yZA=="
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
type: Opaque
data:
  secretKey: "Nm9zNWNNR3l4TzNabjlpcA=="
  secret: "ZGdYYmk4bHo0NXA3eEZXMw=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQU9idW83Mnc0NWN4QTdtWTI4N1lsd3d3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSTBNRFl5TURFME5ETTBORm9YRFRJMQpNRFl5TURFME5ETTBORm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdEFveG03R29LQ2h6OTE1cGJXMVNFNEIrVDNhZ0xuTmUKOW1WcXcxQVJvWnZQVFU1NWhCTTBMZ2hpNEU5N0R2MnhSYXpxRmYvWWNTSTBZT3UxUksyQ0MzWm1GeWFZRTlwTwpuME1IWXR3dWRTVHJlVldtbFNjdGIvTHFZYTRmSmtWOUlSazYyUHJZaTJPaDd3K2t6cnRHb2FsL09sTlBGUUJGCnJWNHdjSkRyS1hpc1JPZG5yTFhZVU9KNFhkNlNrUHhoNTRvR1VRSW8va1NGbXNqL3lNR2VZeTkraEVpY3lOaXMKTEgrWG8xUzhUV2ZLbW1MdnQ3dURiVmEybENONDFhRmhpYUw3TjBWdlMvQkd6dGVVK0VsNThob0lPQWxKVS9WVAovZXA2bGFIeGhITEdMeUNYQTkyUXVuamFlT3JSWDFHYjdwcWdBMndjaXhqR2xuMFQvU3E3NVFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkpFMUU0eUF1ZDBsNmQzbEs0Q0IrV1oxZFV6bwpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNBeXB3ZTB6Vm9yeXhMOWZwUkZvekh6OXZHT3BVbklqL3VUcDhPCjlLY0x4RGRncmNDTUhudVdoV0ZwNFluWGZMLzNpYng0OXBodzV4Q0U2TERtaUN2SVl6RlYrb25qYUVZN3dXUjAKbjdYdDZwNE82djN3azY0NGFIMm1BZm5XdWc2YldhNGMxdEtJUG9lYnJ2YTljZm9hWEdEbVJwM1BveXFtdEs0UgpkNDR6SzUrR2IzRkhGd1ZMR1VmdGx1WThscitmNGhvWEJENkFScU5iT3JPM0RvQTVLTXY3eWdlU3hrTGY2NUZGCkt6UXRKZUM0VE5FUFdrMGpTdE1kN2ZUZjdrYWtMemI3eXNXU3o4Szdaa1JmZnd1VmZIZEdxN2JpZm5sOGlsdXAKQ0NJbmx3RDdRS2N6bWlpNmJ6MTV2NWxPYlRtOVE0QWtsdXh2clBGNDN1S0ZIOG85Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdEFveG03R29LQ2h6OTE1cGJXMVNFNEIrVDNhZ0xuTmU5bVZxdzFBUm9adlBUVTU1CmhCTTBMZ2hpNEU5N0R2MnhSYXpxRmYvWWNTSTBZT3UxUksyQ0MzWm1GeWFZRTlwT24wTUhZdHd1ZFNUcmVWV20KbFNjdGIvTHFZYTRmSmtWOUlSazYyUHJZaTJPaDd3K2t6cnRHb2FsL09sTlBGUUJGclY0d2NKRHJLWGlzUk9kbgpyTFhZVU9KNFhkNlNrUHhoNTRvR1VRSW8va1NGbXNqL3lNR2VZeTkraEVpY3lOaXNMSCtYbzFTOFRXZkttbUx2CnQ3dURiVmEybENONDFhRmhpYUw3TjBWdlMvQkd6dGVVK0VsNThob0lPQWxKVS9WVC9lcDZsYUh4aEhMR0x5Q1gKQTkyUXVuamFlT3JSWDFHYjdwcWdBMndjaXhqR2xuMFQvU3E3NVFJREFRQUJBb0lCQVFDWnMvSXlKM09XQlNNcgoxbkJQT1h0T3B1NHV6T2xuZnB0ZDQ2dEgzejJPS01UTURPajA5cWdmZkkxZFRyMlNTTWRrNG9CZUU3UW1zYnJoCjI1ay9icG1OUzZGUXRtUXkzcmNzaEQ3MENXR29KTUxiTFdJd0IraGtvSSswb01CN0hldjdxOXh2allmOVNDdmgKT2d2TGFscWNmV1hlMTJ5MlV5c3BIVFpoZzNjZ1NUTTRZaHRrQnVmMzJVaktud1RTZkl2OGgzTXNIM2pyY3p1eApzSTcvdlRXU3g0YW5JTWt0V2FvWi9qRWw0eHQvTnRxZG9Sb0ZMZ0JzVDdUQk1GR3NZMFpQcUdGdUZNcHk2M1pJCmRoMXVtWlZweE9WdFlhejNROXdwMkpBRldoS0xhdCtGUkYwTk42ZDVXeGl4MTlnYnhLVWtwM2xJUzRrQk9IUG4KZGRLQnRBdnBBb0dCQU90c3dCZ293U3VtNkg2RFdqOXM3MnJsZ1ZIRFRVTVJ4NkRFQmpkb1BMcDB5UWxmeW5KYgphMWp4M1dsMERVZlBvNVI0KzNtQXVkZ1EwTEQ5aEJINEgrU0F5cU93WDl5RWZLWGJ5UDNHTjE5QmlmekQxZUVHCmxmVUZZL1ZCRWxjQTFYeDVMSkM4aVpobFVzbDEwZHVWWmdraVJQelJUVmhHaHlxTWx4bEVFYW1YQW9HQkFNUEcKU3poajQ2S2hpSkxTbFhWQ0UvdEd6Q0xROUYvQm42NU53Q0tLYmdzYldxeDFJQWNZUHRUTXpURzFISnFGZjFuSwpNamFyT1hjTEp1a0t6dS85ZS94R2U3WFJLQWFUMlhTeUJ5a1Q5K1ZKaWZzMXBnTm9hUGtZQUc1eHFTbXhoTVNlCkdOWndZRlIxNWNvV1c2SjlITGdzbDJOTjZ0SEtJOEZrd0VKTjl0M2pBb0dCQU45Y3I2aDhTa0pET29TRjFVTWwKOU1WaitGejl3amtuRGxMdWlNTmE1M3MwUUdUZmVIRWxZV1RqSE9IblZJNVVaMnYvbVFBL2JKT2Q2SkowQlRFVApUQmI5UnNVbEd0NWE2UFJuNFhzODY5NDVqVlMrN1JaeHJDYnJOVnBFb2NUZ0txek5Qc1lYeXloR3dkUVlMOEo1CkxYVHZDYXNnWFpTcVhhVzErOG5oOWl3REFvR0FIVE5EWHVyUE5oK2Z6ajVvbW0rN3FUdjdFS3BYK0x4Wmc5Y0cKOUYvdlgrcTVrSVY3dkhNcVUvVWtHZWpvbGtlWkloeGRkdmY4L3p1RGx6ak1ldEUxSUFDblRRd2dTekxjT1dLZwpYTWtrcldkVmxFbUJOSHJyUlZRR0pITUJoejE2RHhXQm9PSnNDOHoxOURsM2UzbnJ3YkNzOTl2VVRXdzMvdzEyCis2ekRTSDhDZ1lFQXFLNGpzSEIwcVRPSDJKckFtNjlhS0ZjTE9FL2hGam5OeVBSVFUyQmxjU1B5RlJXRmlKSFgKMkdvNUNvd2xZWWx6L2NjS0p3RytLMithTWh5UlZISkcvYmxPUElLWmFPLy9ibERKZE1OdWh5WTNGY05PWHRNVQo4Y3ZtaU5mV0Nsd01nTnk4VDVzUncrOGdMZmRpRTRKN3BGTFkwTUVlU093bXNmRDM1c3NWNEFnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: harbor/templates/jobservice/jobservice-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-jobservice-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  JOB_SERVICE_POOL_REDIS_URL: "cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzE="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  secret: "ZzVVOFRPTkFKb09KUnpENg=="
---
# Source: harbor/templates/nginx/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-nginx
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRVEswenRndkJid1lYQk4zdGxHdVpIREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TmpJd01UUTBNelF6V2hjTk1qVXdOakl3TVRRMApNelF6V2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREVrVkYybnV1WDJHdGNYSS9Ba0RLcXd2cVZRRFlGVVZZWldTZFAKTFZvMHZXMXNZNXhtMVRiRkVCZFIrR0huR1I1ZmJVUjNjZHp1NnJkMGc3dWkwWjRSYmVRU2p5M1J4VHp0TVlCbQpRaVNzL0RIc08rdjZ3VXJmeXZUVm03S1E1Z0FheU9lWnRnRG43RFVUSnl4L2poWG8wS3BNSVVtV3hNS0JuVDJPCkxZU2JUTytHZUtlU0Fpdm1yVFNTaThHbWRiQzBtQ1FPRmJOQlQ5bVhlYkpjZzd4UXVaZ3dKMkdWN2NJaFE0d3cKV3ZkbkxmVTd0UlorVkhTd1NwYXltejNhdjcxdTd0a2w1NllVRm4yQ3BrMEVCSE9CeTZid3FhTUdBK3I5RDFOdwp3WW1YdHBWR29NbDJZelNzVG1VOEI2bmwrQWFXbVA3NFlIMnRLQTIvYjhMTGxhNVBBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU3huNzBIaW9ZRjJUVDJocUpJOVRGaGwwbTVtVEFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ2xSCmtKOG5IcER0N1NqaFkxcmZ0RWZRWDRnRWw5MVdFaWhweFF4S08waVlwaVJ1ZjFjL3NMelNPUWNPRGJHRDVKWncKUkpFenE4NW1SMkF4d3MvN1ppR3BTNi9KMTRLSWRBczNDeGF1ZXJGRnhkbnBMdTNvZWQ3cVQwMVZ0QWFwQ3FGcQo2RWVWb2o1eEJBbEh6NEdkTnZ4cTNZT2NYMmM1WkZzOG5TblBnSWdJQmJrWkExRVRzcnhMb2NvdUJKNFRIRDNDCjVpNFZaMTNmSm5pa3dqOU82cnlrc1IvdHBNUjNxZEJhYlVLaSsrMm1RS1Z2MWhNZkx4Y2JobXNxczV4NjRIUVUKNnJpRlE3RkljRTJiVHJtMmZuUFJ5dXpMelFOeEZpZHp4Nm5TYnViZmUrRWxOemltdzBNVkNZZDk3NG94a05hYwpZTzk3ZkxwMmU4ZGZRT2Y0azRBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeEpGUmRwN3JsOWhyWEZ5UHdKQXlxc0w2bFVBMkJWRldHVmtuVHkxYU5MMXRiR09jClp0VTJ4UkFYVWZoaDV4a2VYMjFFZDNIYzd1cTNkSU83b3RHZUVXM2tFbzh0MGNVODdUR0Faa0lrclB3eDdEdnIKK3NGSzM4cjAxWnV5a09ZQUdzam5tYllBNSt3MUV5Y3NmNDRWNk5DcVRDRkpsc1RDZ1owOWppMkVtMHp2aG5pbgprZ0lyNXEwMGtvdkJwbld3dEpna0RoV3pRVS9abDNteVhJTzhVTG1ZTUNkaGxlM0NJVU9NTUZyM1p5MzFPN1VXCmZsUjBzRXFXc3BzOTJyKzlidTdaSmVlbUZCWjlncVpOQkFSemdjdW04S21qQmdQcS9ROVRjTUdKbDdhVlJxREoKZG1NMHJFNWxQQWVwNWZnR2xwaisrR0I5clNnTnYyL0N5NVd1VHdJREFRQUJBb0lCQUNWT1J4MnlMNWhUOUp4RQozT3Q0OG9UQ0dIaTNCUW1oVkN2ZlpieDdLUUdWYWUwR1FxcXBrSWw1OGxNV1JzNXJULzVnYUh3YTJnbGw5b2RnCmNQNEh0bTRzWXZxNnZjRndJNDRJdFF1elJlNm10bnJWTElZY3BTOHYvNk9DdHpNVTA3UkJxT0xkVGZLMk82UjAKN05jUWlrdnpQajdRbW56SXZ2bUdkQ1pGc1VNZjA0elg0QU1WN2tON2NKYkdKcW90Vmpvb1RnUjFkWWdJUWFZSApvWkxmSFNFa2Q0ZG5lWEJvV2l1d20zdjNGdFRKNzVKN1VUTWFON0xld3RxK2lHVWNuQ3FLNkZvZlY1aUFPU3k2ClhLdzNhdXBmWjJzYyt1TEtuYlNnUUpuVjRkbUh1NjA4MDNpb3A4NXdDaG9kd1ZjVEdkQUZhMy9VUkdGMDA0U0sKZVBQdU5rRUNnWUVBMHErVjRJMzR2NUd2S0pkM0hUaDFuWXBnOG8zNnM5cGMvZmExZC9kRXlnNElhMSs2WGpQMgpRQlRlcjBtMzFZUnAvenhkWEVIQ1RvVDR4TmpXemxoN012T1FKOFFyMFpxeWFyWWNabm5JUzhoK25kZlEyMGlUCjNRcS9LM01ySTRFMS9sdVNSeHhkVzhuNXBTT3NIWGRWd1B2YW1PNzJuTnMrMDR0TmJmSG5tbEVDZ1lFQTd0aGgKTE11RkF1d3h5ZWhyQkN1NTF5aHZRVi9DM1lqVXhnTExFY3daMjMzUDZTOGZ1dzlGdFVGNjBnV1V0V0VxTkk3eQpPU01hTGlIM1E2TjhBUjBsMk9ySGVuMGRPdTlmQkZTdG1pc2sxVHd5U0hxdmt5MlVSTXIyQmNnRjRMcGlyZk04CjdZTTV2dU1UUHorQjkwYjcwNjRiVU9UU3pTWXd3Q28ydDllRDlwOENnWUFHdG1Gb0RoM212SldBRFpOVjh2Nk0KVG1SWVZmMnV6VDQ1T1NyKzczblpsaWplZ3VaRktoS21hQVBRUWVFQmhINThDMGhPTUNvb3BrUG13YUhXWVN0TApyRWJqZlhTSDhRM09LSTh2RktJMUIrWkEwU2R1VlJtZzZUNjkrNlZjTkRtc0tPNjRKVWMwTFhNdXQ3dzhGQmsvClZNYmFLSUxpN0hsTDlCdzdiSUdjZ1FLQmdRQ2lvOStRRkVwUDBpeVpNOVhqc2k3TFQzSnJEdDF2NDJRWUxnQy8KN3I3UTB0eElDbG5PRkRsQWt3VWlqTUJWdm9OeDVNRVduVXVQakh1R3FJV2hjSXE4S2l1SndqYXNVaUhlbmhiVQorM29LWmdKTGpwZU9YaVF2c0JGVm9INDRLRk5YNW1GZnp0TDhwRDRQL0p2d21YcVVDMlA0Y3NrRS8zT0U5M25wCk9DMVpPd0tCZ0Q3aVdLRGl4Sm1TVXJDSVpqcENFTFUvRHlWSmUwQ1VRR244ZEdEQWNCb3VBUXVrKzh1eDBvc3oKbUw5TlAxQlYrSmd5K3RCWlJBZ3hhQ1dUbjZSbWpsaW5RbElLV2JOaVFFNnZKYzVGN3VjNUgyVU5FWGY3Q3FlNQpkSFNYM0tXU3pCR1VPVlUxRjJxMVpTbFZVTTkwQUloTEIvOTBualBNS2hIN3JUZXdERS9ICi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtMcXhqb0ZmOFAxakdTOHBWM3Boa3d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURZeU1ERTBORE0wTTFvWERUSTFNRFl5TURFMApORE0wTTFvd0ZERVNNQkFHQTFVRUF4TUphR0Z5WW05eUxXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0NUtaV2VWZVoyQ2JnY1VFMExlVnpzb3c5SnQ4NFlraVRJaVRmTVoxL3doQnFpWHgKQmQzME45R0R0d3g2eVBPYVZnWEZSOStLQ0U0cDVwZGJBOGVFTzNNZ29nNmZ2YXgyTWU3R1NwWGh0bDlGdDQ1SwpiWVJYSyttRExpVUhvZzMyMHg0eUdRekZwNUwrNkN3cWhTZnI5NkZuTDJ2Qkp1MEpkbkJxVjZvZFgzSlZ2SWFZCkFidHg5dzcvWUxTQzlCQVlBT2YvcHk2bEM3LzJBM0VOOFVJYTRRenJPcXMxUGpSZjd3YnhOV04wTGs0a1RzR2oKbmx1RDlUL0h1L2lUdTBoaHdidmNUSUdQVHgySTJmSVBrUy9HUGMxbWs4ZFF6OHo4VGdJSDQxT3JBdkZ0YmgzTwp0cDl5SllYc3ZqUFYyR084MzdEN25MaWh6ZGtobHBmVFZ3TWltd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGTEdmdlFlS2hnWFpOUGFHb2tqMU1XR1hTYm1aTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQnUvMWU2eVF0TXFiYlpPNjFDTXF6WFdSKzJFL1NqYzZCMC9CeHdUUDQ1UGpWUUY0L3dzWllYCmxyaENnWjRIdmp1Zy8wUjdETTk0UGhhUERXTy8zbDJ1NXVoVXVNMzFQb0EzMGFRYnhFTUNpLzBqMlQvVlREZlgKR1RPTjQ2ZisrcWRZUGhGOFdZSHFkVXBVU1BvZWxOWkNoRmF0dmF0VlZBQnhmeVNnQ0V2Y1Z4VWNja21DZ2N1ZgpuWDFZR2liMmJLS1F4Um14U3lyZ0Y3M05tdlJVVGdMMjZoZktIYlU0T2ZldUFhTm5YVXlJbWJGd21hRUM0aW5yClFDQjJLWVlOV1BLK096VHVGN292WXhPU1dHdVlyUHRRbkkyYTJQUWgwcTMxSlVpdkdpQmdpSTZHYmRlOGlFZlgKUnU0K1NOMlBpNThiTmFwcHU0SXNVV2s0WkY1ek40QzUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "bVN1RDJGRWR4ZE1kWjRBVA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/trivy/trivy-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-trivy-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
type: Opaque
data:
  SCANNER_TRIVY_GITHUB_TOKEN: ""
  SCANNER_REDIS_URL: cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzU=
  SCANNER_STORE_REDIS_URL: cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzU=
  SCANNER_JOB_QUEUE_REDIS_URL: cmVkaXM6Ly9teS1yZWxlYXNlLXJlZGlzLW1hc3Rlcjo2Mzc5LzU=
---
# Source: harbor/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-extended-configuration
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    max_connections = 1024
---
# Source: harbor/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-init-scripts
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
data:
  initial-registry.sql: |
    CREATE DATABASE registry ENCODING 'UTF8';
    \c registry;
    CREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);
---
# Source: harbor/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: harbor/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: harbor/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: harbor/templates/core/core-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-core-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
data:
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "my-release-postgresql"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://my-release-harbor-core:80"
  JOBSERVICE_URL: "http://my-release-harbor-jobservice:80"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://my-release-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "debug"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  PORTAL_URL: "http://my-release-harbor-portal:80"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = "8080"
---
# Source: harbor/templates/jobservice/jobservice-cm-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-jobservice-config
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    metric:
      enabled: false
      path: /metrics
      port: 8001
---
# Source: harbor/templates/jobservice/jobservice-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-jobservice-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
data:
  CORE_URL: "http://my-release-harbor-core:80"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
  LOG_LEVEL: "debug"
---
# Source: harbor/templates/nginx/configmap-https.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-nginx
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |+
    worker_processes auto;
    pid /opt/bitnami/nginx/tmp/nginx.pid;

    events {
      worker_connections 3096;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
      proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
      fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
      scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
      uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server my-release-harbor-core:80;
      }

      upstream portal {
        server my-release-harbor-portal:80;
      }

      log_format timed_combined '[$time_local]:$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      
      server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }
        
        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

      location /service/notifications {
          return 404;
        }
      }
      server {
          listen 8080;
          listen [::]:8080;
          return 301 https://$host$request_uri;
      }
    }
---
# Source: harbor/templates/portal/portal-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-portal
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: portal
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /opt/bitnami/harbor;
            index  index.html index.htm;
            include /opt/bitnami/nginx/conf/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
            location /devcenter-api-2.0 {
              try_files $uri $uri/ /swagger-ui-index.html;
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "my-release-redis-master:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/trivy/trivy-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-trivy-envvars
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
data:
  SCANNER_LOG_LEVEL: "debug"
  SCANNER_TRIVY_CACHE_DIR: "/bitnami/harbor-adapter-trivy/.cache/trivy"
  SCANNER_TRIVY_REPORTS_DIR: "/bitnami/harbor-adapter-trivy/.cache/reports"
  SCANNER_TRIVY_DEBUG_MODE: "false"
  SCANNER_TRIVY_VULN_TYPE: "os,library"
  SCANNER_TRIVY_SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
  SCANNER_TRIVY_IGNORE_UNFIXED: "false"
  SCANNER_TRIVY_SKIP_UPDATE: "false"
  SCANNER_TRIVY_INSECURE: "false"
  SCANNER_API_SERVER_ADDR: ":8080"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: registry
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: harbor/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: harbor/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: harbor/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: core
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: jobservice
---
# Source: harbor/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: nginx
---
# Source: harbor/templates/portal/portal-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-portal
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: portal
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: portal
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: registry
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-trivy
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
      targetPort: api-server
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-core
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: core
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.11.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: fd3bc55c91b135bc3989de1e491d0af0e63665a461ed39ae40817280e693615a
        checksum/configmap-envvars: 29082f4c70c2786b83efaa87415b7b95013ec07de13e12723a99086eddf752d6
        checksum/secret: 72e7143b3757febfedacd84e80dc029ec299e7f4567b01457b1b6d7cdd453523
        checksum/secret-envvars: 04dc8c34b86db938f3666706e7b58a8b9462169c557e2bf4642db3627f240f0c
        checksum/secret-jobservice: efa5b8e46fc4162d422e801d9cc0f670ec5500f8c95171f050293245482fa226
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: core
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: core
          image: docker.io/bitnami/harbor-core:2.11.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: my-release-harbor-core-envvars
            - secretRef:
                name: my-release-harbor-core-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: my-release-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: token-service-private-key
          secret:
            secretName: my-release-harbor-core
        - name: secret-key
          secret:
            secretName: my-release-harbor-core
            items:
              - key: secretKey
                path: key
        - name: ca-download
          secret:
            secretName: my-release-harbor-nginx
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-jobservice
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: jobservice
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.11.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap-env: 0d223752087b624c318eab43f4cf6d752f45a00ae83b488bea5a5e05a822f653
        checksum/secret-env: b0cc1113af310d91be2c3f3f08f5079b6cd0f11a1391f1cb031d6d9ed92da476
        checksum/configmap-config: 999205d0b52203a1219c6a6bf756e153f2c07fb88d536d5c08f3eaa33b3c6809
        checksum/secret: 3c57467f43cad92f59f86199cc3190f6ea6e65f1ada472a4eb37bf4e34ad49e0
        checksum/secret-core: c8e00a3c45bf27b9d1392e06e76920fa2ccd949a85da1026de4c084079ec7615
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: jobservice
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: jobservice
          image: docker.io/bitnami/harbor-jobservice:2.11.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: my-release-harbor-jobservice-envvars
            - secretRef:
                name: my-release-harbor-jobservice-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath: 
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: jobservice-config
          configMap:
            name: my-release-harbor-jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: my-release-harbor-jobservice
---
# Source: harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-nginx
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: nginx
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 1.27.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: nginx
      annotations:
        checksum/configmap: 831189e2f7291afe0aba8f21444105fac4f4d164c19631c44d4024684b237f93
        checksum/tls-secret: ae306253e4f6dbf7ddd1f787ab706a7907824284482947ff92bb1b825ab1fc91
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/nginx:1.27.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/nginx/logs; then
                cp -r /opt/bitnami/nginx/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.27.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8443
              name: https
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: https
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
            - name: certificate
              mountPath: /etc/nginx/cert
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: my-release-harbor-nginx
        - name: certificate
          secret:
            secretName: my-release-harbor-nginx
---
# Source: harbor/templates/portal/portal-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-portal
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: portal
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.11.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: portal
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: portal
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: portal
          image: docker.io/bitnami/harbor-portal:2.11.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: portal-config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: portal-config
          configMap:
            name: my-release-harbor-portal
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-registry
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: registry
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.11.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: b79bc51ba3b39a2ca42262a5fc7b139e7384294886bbc19e7ac8ebda05255bb9
        checksum/secret: 13b4ce069a243e4056e3f4687375af4c475b144a2b2b7c7980428eb5859bbe8e
        checksum/secret-jobservice: 03a56a2a80896d2949a37b57e837e6c94c1f758b8a03a28b1e2fa0714fdf777b
        checksum/secret-core: 3449ab21d3402f201a066193e247255074c267b2d47c41540b753fcdb69d3564
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: registry
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: registry
          image: docker.io/bitnami/harbor-registry:2.11.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - secretRef:
                name: my-release-harbor-registry
          ports:
            - containerPort: 5000
              name: registry
            - containerPort: 5001
              name: debug
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: registry
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              scheme: HTTP
              port: registry
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: docker.io/bitnami/harbor-registryctl:2.11.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: my-release-harbor-registry
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
              name: registryctl
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: registryctl
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: registry-htpasswd
          secret:
            secretName: my-release-harbor-registry
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-root-certificate
          secret:
            secretName: my-release-harbor-core
        - name: registry-config
          configMap:
            name: my-release-harbor-registry
        - name: registry-data
          persistentVolumeClaim:
            claimName: my-release-harbor-registry
---
# Source: harbor/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.6
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.6
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: fd18c85829958181cad9f64e7138083fdb14bc37799ad2071e85662b7ff3ccf7
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:13.15.0-debian-12-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: postgresql-extended-config
          configMap:
            name: my-release-postgresql-extended-configuration
        - name: custom-init-scripts
          configMap:
            name: my-release-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: harbor/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.4
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.5.4
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 43cdf68c28f3abe25ce017a82f74dbf2437d1900fd69df51a55a3edf6193d141
        checksum/secret: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-harbor-trivy
  namespace: "harbor"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.11.0
    helm.sh/chart: harbor-21.4.6
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: my-release-harbor-trivy
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: trivy
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.11.0
        helm.sh/chart: harbor-21.4.6
        app.kubernetes.io/component: trivy
      annotations:
        checksum/configmap-env: 59558806c2b8266da3f2597ab830daddfad3a9f8508d4bbdede92458932dec06
        checksum/secret-env: e1378610e0f1ebd10b5720a09a6c0ebad46167cf27b02b593eb8718fc0af21b8
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: trivy
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: trivy
          image: docker.io/bitnami/harbor-adapter-trivy:2.11.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - configMapRef:
                name: my-release-harbor-trivy-envvars
            - secretRef:
                name: my-release-harbor-trivy-envvars
          ports:
            - name: api-server
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: data
              mountPath: /bitnami/harbor-adapter-trivy/.cache
              readOnly: false
      volumes:
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: harbor
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
