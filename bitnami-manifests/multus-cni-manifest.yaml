---
# Source: multus-cni/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-multus-cni
  namespace: multus-cni
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: multus-cni
    app.kubernetes.io/version: 4.0.2
    helm.sh/chart: multus-cni-2.1.5
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: multus-cni
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: multus-cni/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-multus-cni
  namespace: "multus-cni"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: multus-cni
    app.kubernetes.io/version: 4.0.2
    helm.sh/chart: multus-cni-2.1.5
automountServiceAccountToken: false
---
# Source: multus-cni/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-multus-cni-multus-cni
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: multus-cni
    app.kubernetes.io/version: 4.0.2
    helm.sh/chart: multus-cni-2.1.5
rules:
  - apiGroups: ["k8s.cni.cncf.io"]
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/status
    verbs:
      - get
      - update
  - apiGroups:
      - ""
      - events.k8s.io
    resources:
      - events
    verbs:
      - create
      - patch
      - update
---
# Source: multus-cni/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-multus-cni-multus-cni
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: multus-cni
    app.kubernetes.io/version: 4.0.2
    helm.sh/chart: multus-cni-2.1.5
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-multus-cni-multus-cni
subjects:
  - kind: ServiceAccount
    name: my-release-multus-cni
    namespace: "multus-cni"
---
# Source: multus-cni/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-multus-cni
  namespace: "multus-cni"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: multus-cni
    app.kubernetes.io/version: 4.0.2
    helm.sh/chart: multus-cni-2.1.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: multus-cni
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: multus-cni
        app.kubernetes.io/version: 4.0.2
        helm.sh/chart: multus-cni-2.1.5
    spec:
      
      hostNetwork: true
      serviceAccountName: my-release-multus-cni
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: multus-cni
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      priorityClassName: ""
      automountServiceAccountToken: true
      initContainers:
        - name: install-multus-binary
          image: docker.io/bitnami/multus-cni:4.0.2-debian-12-r28
          command:
            - cp 
            - -r
            # Using /usr/src to allow compatibility with upstream multus container
            - "/usr/src/multus-cni/bin/multus"
            - "/bitnami/multus-cni/host/opt/cni/bin/"
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: cni-bin-dir
              mountPath: /bitnami/multus-cni/host/opt/cni/bin
              mountPropagation: Bidirectional
        - name: generate-kubeconfig
          image: docker.io/bitnami/multus-cni:4.0.2-debian-12-r28
          command:
            - install_multus
          args:
            - "--type"
            - "thin"
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: cni-bin-dir
              mountPath: /bitnami/multus-cni/host/opt/cni/bin
              mountPropagation: Bidirectional
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: multus-cni
          image: docker.io/bitnami/multus-cni:4.0.2-debian-12-r28
          imagePullPolicy: "IfNotPresent"
          command:
            - "/thin_entrypoint"
          args:
            - "--multus-conf-file=auto"
            - "--cni-conf-dir=/bitnami/multus-cni/host/etc/cni/net.d"
            - "--multus-autoconfig-dir=/bitnami/multus-cni/host/etc/cni/net.d"
            - "--cni-bin-dir=/bitnami/multus-cni/host/opt/cni/bin"
            - "--multus-log-level=verbose"
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          livenessProbe:
            exec:
              command:
                - pgrep
                - thin_entrypoint
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - pgrep
                - thin_entrypoint
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: cni-net-dir
              mountPath: /bitnami/multus-cni/host/etc/cni/net.d
            - name: cni-bin-dir
              mountPath: /bitnami/multus-cni/host/opt/cni/bin
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
