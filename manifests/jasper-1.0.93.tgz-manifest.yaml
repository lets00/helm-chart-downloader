---
# Source: jasper/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-jasper
  labels:
    helm.sh/chart: jasper-1.0.93
    app.kubernetes.io/name: jasper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.2.421"
    app.kubernetes.io/managed-by: Helm
---
# Source: jasper/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jasper-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "ODVlaVMyeXc1UA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: jasper/templates/jwt-conf.yaml
apiVersion: v1
kind: Secret
metadata:
  name: jasper-jwt-config
type: Opaque
data:
---
# Source: jasper/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jasper-db-extended-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    default_text_search_config = 'pg_catalog.english'
---
# Source: jasper/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: jasper-db-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: jasper/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: jasper-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: jasper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-jasper
  labels:
    helm.sh/chart: jasper-1.0.93
    app.kubernetes.io/name: jasper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.2.421"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    affinity: web
    app.kubernetes.io/name: jasper
    app.kubernetes.io/instance: my-release
---
# Source: jasper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-jasper
  labels:
    helm.sh/chart: jasper-1.0.93
    app.kubernetes.io/name: jasper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.2.421"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jasper
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        affinity: web
        app.kubernetes.io/name: jasper
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-jasper
      securityContext:
        {}
      containers:
        - name: jasper
          securityContext:
            {}
          image: "ghcr.io/cjmalloy/jasper:v1.2.421"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          env:
            - name: SERVER_PORT
              value: "8081"
            - name: SPRING_TASK_EXECUTION_POOL_CORE_SIZE
              value: "2"
            - name: SPRING_TASK_EXECUTION_POOL_MAX_SIZE
              value: "20"
            - name: JASPER_HEAP
              value: 512m
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://jasper-db:5432/jasper
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jasper-db
                  key: postgres-password
            - name: SPRING_REDIS_HOST
              value: 
            - name: JASPER_SCRAPE_DELAY_MIN
              value: "5"
            - name: JASPER_SCRAPE_INTERVAL_MIN
              value: "1"
            - name: JASPER_PULL_DELAY_MIN
              value: "5"
            - name: JASPER_PULL_INTERVAL_MIN
              value: "1"
            - name: JASPER_MIN_ROLE
              value: ROLE_ANONYMOUS
            - name: JASPER_DEFAULT_ROLE
              value: ROLE_ANONYMOUS
            - name: JASPER_ALLOW_LOCAL_ORIGIN_HEADER
              value: "false"
            - name: JASPER_ALLOW_USER_TAG_HEADER
              value: "false"
            - name: JASPER_ALLOW_USER_ROLE_HEADER
              value: "false"
            - name: JASPER_ALLOW_AUTH_HEADERS
              value: "false"
            - name: JASPER_OVERRIDE_SECURITY_MODE
              value: 
            - name: JASPER_OVERRIDE_SECURITY_CLIENT_ID
              value: 
            - name: JASPER_OVERRIDE_SECURITY_JWKS_URI
              value: 
            - name: JASPER_OVERRIDE_SECURITY_USERNAME_CLAIM
              value: 
            - name: JASPER_OVERRIDE_SECURITY_TOKEN_ENDPOINT
              value: 
            - name: JASPER_OVERRIDE_SECURITY_SCIM_ENDPOINT
              value: 
            - name: JASPER_SSH_CONFIG_NAMESPACE
              value: "default"
            - name: JASPER_SSH_CONFIG_MAP_NAME
              value: "ssh-authorized-keys"
            - name: JASPER_MAIL_HOST
              value: "smtp-relay.gmail.com"
            - name: JASPER_MAIL_PORT
              value: "587"
            - name: JASPER_MAIL_PROPERTIES_MAIL_SMTP_LOCALHOST
              value: "jasper.local"
          volumeMounts:
            - name: storage
              mountPath: "/var/lib/jasper"
          livenessProbe:
            initialDelaySeconds: 90
            failureThreshold: 10
            timeoutSeconds: 5
            httpGet:
              path: /management/health/liveness
              port: http
          readinessProbe:
            initialDelaySeconds: 15
            httpGet:
              path: /management/health/readiness
              port: http
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: affinity
                operator: In
                values:
                - worker
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: storage
          emptyDir: {}
---
# Source: jasper/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jasper-db
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: jasper-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: jasper-db
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: 67501f18d4a5c880489059ee83f7beb5fdf110b52eb76f6236465dda7405586a
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r35
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jasper-db
                  key: postgres-password
            - name: POSTGRES_DB
              value: "jasper"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=jasper" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=jasper" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: jasper-db-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: jasper/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-jasper-test-connection"
  labels:
    helm.sh/chart: jasper-1.0.93
    app.kubernetes.io/name: jasper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.2.421"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-jasper:80']
  restartPolicy: Never
