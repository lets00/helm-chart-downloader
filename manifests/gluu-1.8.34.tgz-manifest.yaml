---
# Source: gluu/charts/oxd-server/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: default
  name: oxd-server-policy
  labels:
    app: oxd-server
    helm.sh/chart: oxd-server-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  policyTypes:
    - Ingress
  podSelector:
    matchLabels:
      app: oxd-server
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: casa
    ports:
    - protocol: TCP
      port: 8443
  - from:
    - podSelector:
        matchLabels:
          app: oxauth
    ports:
    - protocol: TCP
      port: 8443
  - from:
    - namespaceSelector:
        matchLabels:
          app: ingress-kong
    - podSelector:
        matchLabels:
          app: ingress-kong
    ports:
    - protocol: TCP
      port: 8443
---
# Source: gluu/charts/opendj/templates/opendj-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-opendj
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: opendj
---
# Source: gluu/charts/oxauth/templates/oxauth-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-oxauth
spec:
  maxUnavailable: 90%
  selector:
    matchLabels:
      app: oxauth
---
# Source: gluu/charts/oxd-server/templates/oxd-server-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-oxd-server
spec:
  maxUnavailable: 90%
  selector:
    matchLabels:
      app: oxd-server
---
# Source: gluu/charts/oxtrust/templates/oxtrust-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-oxtrust
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: oxtrust
---
# Source: gluu/charts/config/templates/secrets.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: Secret
metadata:
  name: my-release-config-gen-json-file
  namespace: default
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  generate.json: |-
    {
      "hostname": "demoexample.gluu.org",
      "country_code": "US",
      "state": "TX",
      "city": "Austin",
      "admin_pw": "P@ssw0rd",
      "ldap_pw": "P@ssw0rd",
      "redis_pw": "P@assw0rd",
      "email": "support@gluu.com",
      "org_name": "Gluu",
      "salt": ""
    }
---
# Source: gluu/charts/config/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-cb-pass
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  couchbase_password: UEBzc3cwcmQ=
---
# Source: gluu/charts/config/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-cb-crt
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  couchbase.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lKQUwyem5UWlREUHFNTUEwR0NTcUdTSWIzRFFFQkN3VUFNQzB4S3pBcEJnTlYKQkFNTUlpb3VZMkpuYkhWMUxtUmxabUYxYkhRdWMzWmpMbU5zZFhOMFpYSXViRzlqWVd3d0hoY05NakF3TWpBMQpNRGt4T1RVeFdoY05NekF3TWpBeU1Ea3hPVFV4V2pBdE1Tc3dLUVlEVlFRRERDSXFMbU5pWjJ4MWRTNWtaV1poCmRXeDBMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUIKQ2dLQ0FRRUFycmQ5T3lvSnRsVzhnNW5nWlJtL2FKWjJ2eUtubGU3dVFIUEw4Q2RJa1RNdjB0eHZhR1B5UkNQQgo3RE00RTFkLzhMaU5takdZZk41QjZjWjlRUmNCaG1VNmFyUDRKZUZ3c0x0cTFGT3MxaDlmWGo3d3NzcTYrYmlkCjV6Umw3UEE0YmdvOXVkUVRzU1UrWDJUUVRDc0dxVVVPWExrZ3NCMjI0RDNsdkFCbmZOeHcvYnFQa2ZCQTFxVzYKVXpxellMdHN6WE5GY0dQMFhtU3c4WjJuaFhhUGlva2pPT2dyMkMrbVFZK0htQ2xGUWRpd2g2ZjBYR0V0STMrKwoyMStTejdXRkF6RlFBVUp2MHIvZnk4TDRXZzh1YysvalgwTGQrc2NoQTlNQjh3YmJORUp2ZjNMOGZ5QjZ0cTd2CjF4b0FnL0g0S1dJaHdqSEN0dFVnWU1oU0xWV3UrUUlEQVFBQm80R2NNSUdaTUIwR0ExVWREZ1FXQkJTWmQxWU0KVGNIRVZjSENNUmp6ejczZitEVmxxREJkQmdOVkhTTUVWakJVZ0JTWmQxWU1UY0hFVmNIQ01Sanp6NzNmK0RWbApxS0V4cEM4d0xURXJNQ2tHQTFVRUF3d2lLaTVqWW1kc2RYVXVaR1ZtWVhWc2RDNXpkbU11WTJ4MWMzUmxjaTVzCmIyTmhiSUlKQUwyem5UWlREUHFNTUF3R0ExVWRFd1FGTUFNQkFmOHdDd1lEVlIwUEJBUURBZ0VHTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQk9meTVWSHlKZCtWUTBXaUQ1aSs2cmhidGNpSmtFN0YwWVVVZnJ6UFN2YWVFWQp2NElVWStWOC9UNnE4Mk9vVWU1eCtvS2dzbFBsL01nZEg2SW9CRnVtaUFqek14RTdUYUhHcXJ5dk13Qk5IKzB5CnhadG9mSnFXQzhGeUlwTVFHTEs0RVBGd3VHRlJnazZMRGR2ZEN5NVdxWW1MQWdBZVh5VWNaNnlHYkdMTjRPUDUKZTFiaEFiLzRXWXRxRHVydFJrWjNEejlZcis4VWNCVTRLT005OHBZN05aaXFmKzlCZVkvOEhZaVQ2Q0RRWWgyTgoyK0VWRFBHcFE4UkVsRThhN1ZLL29MemlOaXFyRjllNDV1OU1KdjM1ZktmNUJjK2FKdWduTGcwaUZUYmNaT1prCkpuYkUvUENIUDZFWmxLaEFiZUdnendtS1dDbTZTL3g0TklRK2JtMmoKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: gluu/charts/config/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-superuser-cb-pass
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  couchbase_superuser_password: UEBzc3cwcmQ=
---
# Source: gluu/charts/config/templates/configmaps.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-config-cm
  namespace: default
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
data:
  GLUU_SQL_DB_DIALECT: mysql
  GLUU_SQL_DB_HOST: my-release-mysql.default.svc.cluster.local
  GLUU_SQL_DB_PORT: "3306"
  GLUU_SQL_DB_NAME: gluu
  GLUU_SQL_DB_USER: gluu
  GLUU_SQL_DB_TIMEZONE: UTC
  GLUU_SQL_PASSWORD_FILE: /etc/gluu/conf/sql_password
  
  
  
  
  GLUU_CONFIG_ADAPTER: kubernetes
  GLUU_SECRET_ADAPTER: kubernetes
  GLUU_SSL_CERT_FROM_DOMAIN: "false"
  GLUU_CONFIG_KUBERNETES_NAMESPACE: "default"
  GLUU_SECRET_KUBERNETES_NAMESPACE: "default"
  GLUU_CONTAINER_METADATA: "kubernetes"
  GLUU_MAX_RAM_PERCENTAGE: "75.0"
  GLUU_CACHE_TYPE: "NATIVE_PERSISTENCE"
  GLUU_DOCUMENT_STORE_TYPE: "DB"
  GLUU_JACKRABBIT_SYNC_INTERVAL: "300"
  GLUU_JACKRABBIT_URL: "http://jackrabbit:8080"
  DOMAIN: "demoexample.gluu.org"
  GLUU_OXAUTH_BACKEND: "oxauth:8080"
  GLUU_OXAUTH_APP_LOGGERS: '{"audit_log_level":"INFO","audit_log_target":"FILE","oxauth_log_level":"INFO","oxauth_log_target":"STDOUT","cleaner_log_level":"INFO","cleaner_log_target":"FILE","enable_stdout_log_prefix":"true","http_log_level":"INFO","http_log_target":"FILE","ldap_stats_log_level":"INFO","ldap_stats_log_target":"FILE","persistence_duration_log_level":"INFO","persistence_duration_log_target":"FILE","persistence_log_level":"INFO","persistence_log_target":"FILE","script_log_level":"INFO","script_log_target":"FILE"}'
  GLUU_OXD_SERVER_URL: "oxd-server:8443"
  GLUU_OXD_BIND_IP_ADDRESSES: "*"
  GLUU_OXD_APP_LOGGERS: '{"oxd_log_level":"INFO","oxd_log_target":"STDOUT"}'
  GLUU_PERSISTENCE_TYPE: couchbase
  #  used only if GLUU_PERSISTENCE_TYPE is couchbase or hybrid
  GLUU_COUCHBASE_BUCKET_PREFIX: gluu
  GLUU_COUCHBASE_URL: cbgluu.default.svc.cluster.local
  GLUU_COUCHBASE_USER: gluu
  GLUU_COUCHBASE_INDEX_NUM_REPLICA: "0"
  GLUU_COUCHBASE_CERT_FILE: "/etc/certs/couchbase.crt"
  GLUU_COUCHBASE_PASSWORD_FILE: "/etc/gluu/conf/couchbase_password"
  GLUU_COUCHBASE_SUPERUSER: admin
  GLUU_COUCHBASE_SUPERUSER_PASSWORD_FILE: "/etc/gluu/conf/couchbase_superuser_password"
  GLUU_KEY_ROTATION_FORCE: "false"
  GLUU_KEY_ROTATION_CHECK: "3600"
  GLUU_KEY_ROTATION_INTERVAL: "48"
  GLUU_CONTAINER_MAIN_NAME: my-release-oxauth
  GLUU_SSL_CERT_FROM_SECRETS: "true"
  # options: default/user/site/cache/statistic used only if GLUU_PERSISTENCE_TYPE is hybrid or hybrid
  GLUU_OXTRUST_CONFIG_GENERATION: "true"
  # must the same as the opendj service name
  GLUU_CERT_ALT_NAME: opendj #my-release-config-service
  GLUU_SYNC_CASA_MANIFESTS: "false"
  GLUU_OXTRUST_BACKEND: "oxtrust:8080"
  GLUU_OXTRUST_APP_LOGGERS: '{"apachehc_log_level":"INFO","apachehc_log_target":"FILE","audit_log_level":"INFO","audit_log_target":"FILE","cache_refresh_log_level":"INFO","cache_refresh_log_target":"FILE","cache_refresh_python_log_level":"INFO","cache_refresh_python_log_target":"FILE","cleaner_log_level":"INFO","cleaner_log_target":"FILE","enable_stdout_log_prefix":"true","http_log_level":"INFO","http_log_target":"FILE","ldap_stats_log_level":"INFO","ldap_stats_log_target":"FILE","oxtrust_log_level":"INFO","oxtrust_log_target":"STDOUT","persistence_duration_log_level":"INFO","persistence_duration_log_target":"FILE","persistence_log_level":"INFO","persistence_log_target":"FILE","script_log_level":"INFO","script_log_target":"FILE","velocity_log_level":"INFO","velocity_log_target":"FILE"}'
  GLUU_FIDO2_APP_LOGGERS: '{"enable_stdout_log_prefix":"true","fido2_log_level":"INFO","fido2_log_target":"STDOUT","persistence_log_level":"INFO","persistence_log_target":"FILE"}'
  GLUU_SYNC_SHIB_MANIFESTS: "false"
  GLUU_OXTRUST_API_ENABLED: "false"
  GLUU_OXTRUST_API_TEST_MODE: "false"
  
  
  GLUU_JACKRABBIT_ADMIN_ID: "admin"
  GLUU_JACKRABBIT_ADMIN_PASSWORD_FILE: "/etc/gluu/conf/jackrabbit_admin_password"
  GLUU_JACKRABBIT_CLUSTER: "true"
  GLUU_JACKRABBIT_POSTGRES_USER: "jackrabbit"
  GLUU_JACKRABBIT_POSTGRES_PASSWORD_FILE: "/etc/gluu/conf/postgres_password"
  GLUU_JACKRABBIT_POSTGRES_HOST: "postgresql.postgres.svc.cluster.local"
  GLUU_JACKRABBIT_POSTGRES_PORT: "5432"
  GLUU_JACKRABBIT_POSTGRES_DATABASE: "jackrabbit"
  # Auto enable installation of some services
  GLUU_CASA_ENABLED: "false"
  GLUU_PASSPORT_ENABLED: "false"
  GLUU_SCIM_ENABLED: "false"
  GLUU_SCIM_PROTECTION_MODE: "OAUTH"
  GLUU_SCIM_APP_LOGGERS: '{"enable_stdout_log_prefix":"true","persistence_duration_log_level":"INFO","persistence_duration_log_target":"FILE","persistence_log_level":"INFO","persistence_log_target":"FILE","scim_log_level":"INFO","scim_log_target":"STDOUT","script_log_level":"INFO","script_log_target":"FILE"}'
  GLUU_OXD_APPLICATION_CERT_CN: "oxd-server"
  GLUU_OXD_ADMIN_CERT_CN: "oxd-server"
  
  # BELOW TEMP ENV. TO BE REMOVED IN 4.4
  GLUU_PASSPORT_FAILURE_REDIRECT_URL: ""
---
# Source: gluu/charts/config/templates/configmaps.yaml
apiVersion: v1
data:
  tls_generator.py: |-
    from kubernetes import config, client
    import logging
    import base64

    from pygluu.containerlib import get_manager

    log_format = '%(asctime)s - %(name)8s - %(levelname)5s - %(message)s'
    logging.basicConfig(format=log_format, level=logging.INFO)
    logger = logging.getLogger("tls-generator")

    # use the serviceAccount k8s gives to pods
    config.load_incluster_config()
    core_cli = client.CoreV1Api()

    def patch_or_create_namespaced_secret(name, literal, value_of_literal, namespace="default",
                                          secret_type="Opaque", second_literal=None, value_of_second_literal=None,
                                          data=None):
        """Patch secret and if not exist create
        :param name:
        :param literal:
        :param value_of_literal:
        :param namespace:
        :param secret_type:
        :param second_literal:
        :param value_of_second_literal:
        :param data:
        :return:
        """
        # Instantiate the Secret object
        body = client.V1Secret()
        metadata = client.V1ObjectMeta(name=name)
        body.data = data
        if not data:
            body.data = {literal: value_of_literal}
        body.metadata = metadata
        body.type = secret_type
        if second_literal:
            body.data = {literal: value_of_literal, second_literal: value_of_second_literal}
        try:
            core_cli.patch_namespaced_secret(name, namespace, body)
            logger.info('Secret  {} in namespace {} has been patched'.format(name, namespace))
            return
        except client.rest.ApiException as e:
            if e.status == 404 or not e.status:
                try:
                    core_cli.create_namespaced_secret(namespace=namespace, body=body)
                    logger.info('Created secret {} of type {} in namespace {}'.format(name, secret_type, namespace))
                    return True
                except client.rest.ApiException as e:
                    logger.exception(e)
                    return False
            logger.exception(e)
            return False

    # check if gluu secret exists
    def get_certs():
        """Get cert and key from secret layer.

        :return: ssl cert and key (if any)
        """
        def b64encode(value):
            return base64.b64encode(value.encode()).decode()

        manager = get_manager()

        # returns empty string if not found
        ssl_cert = manager.secret.get("ssl_cert")
        if ssl_cert:
            ssl_cert = b64encode(ssl_cert)

        # returns empty string if not found
        ssl_key = manager.secret.get("ssl_key")
        if ssl_key:
            ssl_key = b64encode(ssl_key)
        return ssl_cert, ssl_key


    def main():
        namespace = "default"
        secret_name = "gluu"
        cert, key = get_certs()
        # global vars
        name = "tls-certificate"

        # if istio is enabled

        if cert and key:
            patch_or_create_namespaced_secret(name=name,
                                              namespace=namespace,
                                              literal="tls.crt",
                                              value_of_literal=cert,
                                              secret_type="kubernetes.io/tls",
                                              second_literal="tls.key",
                                              value_of_second_literal=key)
        else:
            logger.error("No certificate or key was found in secrets."
                          "This can happen when the ssl certificate for the domain is able to be pulled."
                          "In that scenario the ssl_cert will be pulled from the domain provided")

    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: my-release-config-tls-script
  namespace: default
---
# Source: gluu/charts/config/templates/configmaps.yaml
apiVersion: v1
data:
  updatelbip.py: |-
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

    # Update the IP of the load balancer automatically

    """
     License terms and conditions for Gluu Cloud Native Edition:
     https://www.apache.org/licenses/LICENSE-2.0
    """

    import socket
    import os
    import logging
    import time

    logger = logging.getLogger("update-lb-ip")
    logger.setLevel(logging.INFO)
    ch = logging.StreamHandler()
    fmt = logging.Formatter('%(levelname)s - %(asctime)s - %(message)s')
    ch.setFormatter(fmt)
    logger.addHandler(ch)


    def backup(hosts):
        timenow = time.strftime("%c")
        timestamp = "Backup occurred %s \n" % timenow
        logger.info("Backing up hosts file to /etc/hosts.back ...")
        with open('/etc/hosts.back', 'a+') as f:
            f.write(timestamp)
            for line in hosts:
                f.write(line)


    def get_hosts(lb_addr, domain):
        ip_list = []
        hosts_list = []
        ais = socket.getaddrinfo(lb_addr, 0, 0, 0, 0)
        for result in ais:
            ip_list.append(result[-1][0])
        ip_list = list(set(ip_list))
        for ip in ip_list:
            add_host = ip + " " + domain
            hosts_list.append(add_host)

        return hosts_list


    def main():
        try:
            while True:
                lb_addr = os.environ.get("LB_ADDR", "")
                domain = os.environ.get("DOMAIN", "demoexample.gluu.org")
                host_file = open('/etc/hosts', 'r').readlines()
                hosts = get_hosts(lb_addr, domain)
                stop = []
                for host in hosts:
                    for i in host_file:
                        if host.replace(" ", "") in i.replace(" ", ""):
                            stop.append("found")
                if len(stop) != len(hosts):
                    backup(host_file)
                    logger.info("Writing new hosts file")
                    with open('/etc/hosts', 'w') as f:
                        for line in host_file:
                            if domain not in line:
                                f.write(line)
                        for host in hosts:
                            f.write(host)
                            f.write("\n")
                        f.write("\n")
                time.sleep(300)
        except KeyboardInterrupt:
            logger.warning("Canceled by user; exiting ...")


    if __name__ == "__main__":
        main()

kind: ConfigMap
metadata:
  name: my-release-updatelbip
  namespace: default
---
# Source: gluu/charts/config/templates/roles.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-gluu-role
  namespace: default
rules:
- apiGroups: [""] # "" refers to the core API group
  resources: ["configmaps", "secrets", "pods", "pods/exec"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
# Source: gluu/charts/config/templates/rolebinding.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: default-rolebinding
  namespace: default
subjects:
- kind: User
  name: system:serviceaccount:default:default # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role # this must be Role or ClusterRole
  name: default-gluu-role # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
# Source: gluu/charts/oxauth/templates/service.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: Service
metadata:
  name: oxauth
  namespace: default
  labels:
    APP_NAME: oxauth
    app: oxauth
    helm.sh/chart: oxauth-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - port: 8080
    name: http-oxauth
  selector:
    app: oxauth #oxauth
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# Source: gluu/charts/oxd-server/templates/service.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: Service
metadata:
  # the name must match the application
  name: oxd-server
  namespace: default
  labels:
    app: oxd-server
    helm.sh/chart: oxd-server-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 8444
      name: tcp-oxd-server-admin-gui
    - port: 8443
      name: tcp-oxd-server-app-connector
  selector:
    app: oxd-server
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# Source: gluu/charts/oxtrust/templates/service.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: v1
kind: Service
metadata:
  name: oxtrust
  namespace: default
  labels:
    app: oxtrust
    APP_NAME: oxtrust
    helm.sh/chart: oxtrust-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
  - port: 8080
    name: http-oxtrust
  selector:
    app: oxtrust
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# Source: gluu/charts/oxauth/templates/deployment.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-oxauth
  namespace: default
  labels:
    APP_NAME: oxauth
    app: oxauth
    helm.sh/chart: oxauth-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oxauth
  template:
    metadata:
      labels:
        APP_NAME: oxauth
        app: oxauth
    spec:
      dnsPolicy: ""
      containers:
      - name: oxauth
        imagePullPolicy: IfNotPresent
        image: gluufederation/oxauth:4.5.4-1
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        env:
        - name: GLUU_JAVA_OPTIONS
          value: " -XX:MaxDirectMemorySize=2500m -Xmx2200m -DCN_IDP_HOST=http://oxshibboleth:8080"                        
        ports:
        - name: http-oxauth
          containerPort: 8080
        envFrom:
        - configMapRef:
            name: my-release-config-cm
        
        
        lifecycle:
          {}        
        volumeMounts:
        
        
          - name: cb-pass
            mountPath: "/etc/gluu/conf/couchbase_password"
            subPath: couchbase_password
          - name: cb-crt 
            mountPath: "/etc/certs/couchbase.crt"
            subPath: couchbase.crt
        livenessProbe:
          exec:
            command:
            - python3
            - /app/scripts/healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - python3
            - /app/scripts/healthcheck.py
          initialDelaySeconds: 25
          periodSeconds: 25
          timeoutSeconds: 5
        resources: {}
      hostAliases:
      - ip: 22.22.22.22
        hostnames:
        - demoexample.gluu.org
      volumes:
      
      
        - name: cb-pass
          secret:
            secretName: my-release-cb-pass
        - name: cb-crt 
          secret:
            secretName: my-release-cb-crt
---
# Source: gluu/charts/oxd-server/templates/deployment.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-oxd-server
  namespace: default
  labels:
    app: oxd-server
    helm.sh/chart: oxd-server-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oxd-server
      release: my-release
  template:
    metadata:
      labels:
        app: oxd-server
        release: my-release
    spec:
      dnsPolicy: ""
      containers:
        - name: oxd-server
          lifecycle:
            {}          
          image: "gluufederation/oxd-server:4.5.4-1"
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
          env:
          - name: GLUU_JAVA_OPTIONS
            value: " -XX:MaxDirectMemorySize=400m -Xmx100m -DCN_IDP_HOST=http://oxshibboleth:8080"                        
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8444
            - containerPort: 8443
          envFrom:
            - configMapRef:
                name: my-release-config-cm
            
            
          livenessProbe:
            exec:
              command:
              - curl
              - -k
              - http://localhost:8080/health-check
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - curl
              - -k
              - http://localhost:8080/health-check
            initialDelaySeconds: 25
            periodSeconds: 25
            timeoutSeconds: 5
          volumeMounts:
          
          
            - name: cb-pass
              mountPath: "/etc/gluu/conf/couchbase_password"
              subPath: couchbase_password
            - name: cb-crt
              mountPath: "/etc/certs/couchbase.crt"
              subPath: couchbase.crt
          resources: {}
      volumes:
      
      
        - name: cb-pass
          secret:
            secretName: my-release-cb-pass
        - name: cb-crt
          secret:
            secretName: my-release-cb-crt
      hostAliases:
      - ip: 22.22.22.22
        hostnames:
        - demoexample.gluu.org
---
# Source: gluu/charts/opendj/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-opendj
  labels:
    app: opendj
    helm.sh/chart: opendj-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: my-release-opendj
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
# Source: gluu/charts/oxauth/templates/hpa.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-oxauth
  labels:
    APP_NAME: oxauth
    app: oxauth
    helm.sh/chart: oxauth-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-oxauth
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
# Source: gluu/charts/oxd-server/templates/hpa.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-oxd-server
  labels:
    app: oxd-server
    helm.sh/chart: oxd-server-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-oxd-server
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
# Source: gluu/charts/oxtrust/templates/hpa.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-oxtrust
  labels:
    app: oxtrust
    APP_NAME: oxtrust
    helm.sh/chart: oxtrust-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: my-release-oxtrust
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 50
---
# Source: gluu/charts/oxtrust/templates/statefulset.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-oxtrust
  namespace: default
  labels:
    app: oxtrust
    APP_NAME: oxtrust
    helm.sh/chart: oxtrust-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: oxtrust
  replicas: 1
  selector:
    matchLabels:
      app: oxtrust
      APP_NAME: oxtrust
  template:
    metadata:
      labels: 
        app: oxtrust
        APP_NAME: oxtrust
    spec:
      dnsPolicy: ""
      containers:
      - name: oxtrust
        lifecycle:
          {}        
        imagePullPolicy: IfNotPresent
        image: gluufederation/oxtrust:4.5.4-1
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        resources: {}
        ports:
        - name: http-oxtrust
          containerPort: 8080
        env:
        - name: GLUU_JAVA_OPTIONS
          value: "-XshowSettings:vm -XX:MaxRAMPercentage=80 -XX:MaxDirectMemorySize=2500m -Xmx2200m -DCN_IDP_HOST=http://oxshibboleth:8080"                
        envFrom:
        - configMapRef:
            name: my-release-config-cm
        
        
        volumeMounts:
        
        
          - name: cb-pass
            mountPath: "/etc/gluu/conf/couchbase_password"
            subPath: couchbase_password
          - name: cb-crt
            mountPath: "/etc/certs/couchbase.crt"
            subPath: couchbase.crt
        livenessProbe:
          exec:
            command:
            - python3
            - /app/scripts/healthcheck.py
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - python3
            - /app/scripts/healthcheck.py
          initialDelaySeconds: 25
          periodSeconds: 25
          timeoutSeconds: 5
      volumes:
      
      
        - name: cb-pass
          secret:
            secretName: my-release-cb-pass
        - name: cb-crt 
          secret:
            secretName: my-release-cb-crt
      hostAliases:
      - ip: 22.22.22.22
        hostnames:
        - demoexample.gluu.org
---
# Source: gluu/charts/config/templates/load-init-config.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-config
  namespace: default
  labels:
    app: config-init-load
    helm.sh/chart: config-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      name: config-job
      labels:
        app: config-init-load
    spec:
      dnsPolicy: ""
      # handle edge case with ALB in a non FQDN setup .Values.global.alb.ingress.enabled
      # removed: if and (eq .Values.global.isDomainRegistered "false") (.Values.global.alb.ingress.enabled)
      hostAliases:
       - ip: 22.22.22.22
         hostnames:
         - demoexample.gluu.org
      volumes:
      
        - name: my-release-config-mount-gen-file
          secret:
            secretName: my-release-config-gen-json-file
        - name: my-release-config-tls-script
          configMap:
            name: my-release-config-tls-script
        
      containers:
      - name: config-load
        lifecycle:
          {}        
        image: "gluufederation/config-init:4.5.4-1"
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        env:                        
        volumeMounts:
        
          - mountPath: /opt/config-init/db/generate.json
            name: my-release-config-mount-gen-file
            subPath: generate.json
          - mountPath: /scripts/tls_generator.py
            name: my-release-config-tls-script
            subPath: tls_generator.py
          
        envFrom:
        - configMapRef:
            name: my-release-config-cm
        
        
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 300m
            memory: 300Mi
        command:
          - tini
          - -g
          - --
          - /bin/sh
          - -c
          - |
              /app/scripts/entrypoint.sh load
              /usr/bin/python3 /scripts/tls_generator.py

      restartPolicy: Never
---
# Source: gluu/charts/persistence/templates/jobs.yml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-persistence
  namespace: default
  labels:
    app: persistence
    helm.sh/chart: persistence-1.8.34
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      name: persistence
      labels:
        app: persistence
    spec:
      dnsPolicy: ""
      restartPolicy: Never
      containers:
      - name: persistence
        lifecycle:
          {}        
        image: "gluufederation/persistence:4.5.4-1"
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
        env:                        
        envFrom:
        - configMapRef:
            name: my-release-config-cm
        
        
        volumeMounts:
        
        
          - name: cb-pass
            mountPath: "/etc/gluu/conf/couchbase_password"
            subPath: couchbase_password
          - name: cb-super-pass
            mountPath: "/etc/gluu/conf/couchbase_superuser_password"
            subPath: couchbase_superuser_password
          - name: cb-crt 
            mountPath: "/etc/certs/couchbase.crt"
            subPath: couchbase.crt
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 300m
            memory: 300Mi
      volumes:
      
      
        - name: cb-pass
          secret:
            secretName: my-release-cb-pass
        - name: cb-super-pass
          secret:
            secretName: my-release-superuser-cb-pass
        - name: cb-crt 
          secret:
            secretName: my-release-cb-crt
---
# Source: gluu/charts/opendj/templates/cronjobs.yaml
kind: CronJob
apiVersion: batch/v1
metadata:
  name: my-release-opendj-backup
spec:
  schedule: "*/59 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          dnsPolicy: ""
          securityContext:
            runAsUser: 1000
            runAsNonRoot: true
            fsGroup: 1000
            #fsGroupChangePolicy: "OnRootMismatch" enable once 1.23 is the lowest version
          containers:
            - name: my-release-opendj-backup
              image: "gluufederation/opendj:4.5.4-1"
              envFrom:
                - configMapRef:
                    name: my-release-config-cm
              ports:
                - containerPort: 4444
                  name: tcp-admin
                - containerPort: 1389
                  name: tcp-ldap
                - containerPort: 1636
                  name: tcp-ldaps
                - containerPort: 8989
                  name: tcp-repl
                - containerPort: 7946
                  name: tcp-serf
                - containerPort: 7946
                  name: udp-serf
              env:
                - name: LDAP_HOST
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Gluu was installed. This is normally cn.
                      # Found in Gluu chart under config.configmap.gluuConfigKubernetesConfigMap
                      name: gluu
                      key: ldap_init_host
                - name: LDAP_PORT
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Gluu was installed. This is normally cn.
                      # Found in Gluu chart under config.configmap.gluuConfigKubernetesConfigMap
                      name: gluu
                      key: ldap_init_port
                - name: LDAP_BIND_DN
                  valueFrom:
                    configMapKeyRef:
                      # ConfigMap generated by the Configuration chart when Gluu was installed. This is normally cn.
                      # Found in Gluu chart under config.configmap.gluuConfigKubernetesConfigMap
                      name: gluu
                      key: ldap_site_binddn
                - name: LDAP_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: my-release-ldap-cron-pass
                      key: password
              #  while true; do sleep 60; ldaplog=$(cat /opt/opendj/logs/server.out); startedstr="The Directory Server has started successfully";  if [ -z "${ldaplog##*$startedstr*}" ]; then break; fi; echo "Waiting for opendj server to start"; done
              command:
              - /bin/sh
              - -c
              - |
                # =========
                # FUNCTIONS
                # =========

                set_java_args() {
                    # not sure if we can omit `-server` safely
                    local java_args="-server"
                    java_args="${java_args} -XX:+UseContainerSupport -XX:MaxRAMPercentage=${GLUU_MAX_RAM_PERCENTAGE} ${GLUU_JAVA_OPTIONS}"
                    # set the env var so it is loaded by `start-ds` script
                    export OPENDJ_JAVA_ARGS=${java_args}
                }

                # ==========
                # ENTRYPOINT
                # ==========

                mkdir -p /opt/opendj/locks

                export JAVA_VERSION=$(java -version 2>&1 | awk -F '[\"_]' 'NR==1{print $2}')

                python3 /app/scripts/wait.py

                if [ ! -f /deploy/touched ]; then
                    python3 /app/scripts/entrypoint.py
                    touch /deploy/touched
                fi
                # run OpenDJ server
                set_java_args
                exec /opt/opendj/bin/start-ds -N &
                sleep 300
                RANDOM_NUM=$(cat /dev/urandom | tr -cd '0-5' | head -c 1)
                LDAP_BACKUP_FILE=backup-$RANDOM_NUM.ldif
                /opt/opendj/bin/export-ldif --hostname "$LDAP_HOST" --port 4444 --bindDN "$LDAP_BIND_DN" --bindPassword "$LDAP_PASSWORD" --backendID userRoot --ldifFile /opt/opendj/ldif/$LDAP_BACKUP_FILE --trustAll
          restartPolicy: Never
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
# License terms and conditions for Gluu Cloud Native Edition:
# https://www.apache.org/licenses/LICENSE-2.0
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-base
  labels:
    app: my-release-nginx-ingress-oxtrust
  annotations:
    nginx.ingress.kubernetes.io/app-root: "/identity"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "base-route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"

spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
               name: oxtrust
               port:
                number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-device-code
  labels:
    app: my-release-nginx-ingress-device-code
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/device_authorization.htm
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /device-code
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-firebase-messaging
  labels:
    app: my-release-nginx-ingress-firebase-messaging
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/firebase-messaging-sw.js
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /firebase-messaging-sw.js
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-openid-config
  labels: 
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/openid-configuration
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /.well-known/openid-configuration
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-uma2-config
  labels: 
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/restv1/uma2-configuration
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /.well-known/uma2-configuration
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-webfinger
  labels: 
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/webfinger
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /.well-known/webfinger
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-webdiscovery
  labels: 
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/simple-web-discovery
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /.well-known/simple-web-discovery
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-u2f-config
  labels:
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/restv1/fido-configuration
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /.well-known/fido-configuration
            pathType: Exact
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-gluu
  labels: 
    app: my-release-nginx-ingress-oxauth
  annotations:
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /oxauth
            pathType: Prefix
            backend:
              service:
                name: oxauth
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-nginx-ingress-admin-ui
  labels:
    app: my-release-nginx-ingress-oxtrust
  annotations:
    nginx.ingress.kubernetes.io/app-root: "/identity"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "admin-ui-route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - "demoexample.gluu.org"
      secretName: tls-certificate
  rules:
    - host: "demoexample.gluu.org"
      http:
        paths:
          - path: /identity
            pathType: Prefix
            backend:
              service:
                name: oxtrust
                port:
                  number: 8080
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
---
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
---
---
# Source: gluu/charts/nginx-ingress/templates/ingress.yaml
---
