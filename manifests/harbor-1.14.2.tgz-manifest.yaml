---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "V1NuRndDaEY1U3EyN2dIYg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMkJwTk5haHoxeXlESEUzaE9HV1VYdWJNOTQ5SFlyTVpyRnRSMDlRVjVsbUNNVHBWCnhxMDdWV1pVK0NmVnRkejJYREpoYWNqdkhUU0VuNkgwWm9ndjR4M2N3Ujd0L0draThzY05ZTTZKcW1KeVhDaVQKY0Z5UVVTN1AyZ29YeWhld2NmVUNNTWJpcjNDSGFxcUdmOVVWdnhLVVlXdHNrbVZvRWxTRWMwYmJ3dkV4WURjbworQXE2Tzh6bFo1cmE3M1hMai9aaU5Yb0xQUGM3YmxBYXhKVGorektIbWErc0FnNjNKVm03SjcybXlVaExwNTRIClNETFZ6QS9YdTBlN1JwSWFINStHRE1kV0Vua2xzaUNYeUdDSlFrZFZycm51RVJrZjg5Vk1ONjZBL3d6Unc0REEKUUlLZ01KN05scElRbTh4VTdURmJYT0Y5WjkveHNURk1QUDUrblFJREFRQUJBb0lCQUZNQXB5ODQ2R1Y1UDFLYgp4eW0yT21ySkUyanlxMlNKamc3WmRIQjhRWDBjWEJrMFlzWFF1NzF0ZEsxci8zVyt6UkZVZUgzOUkzcUFOWUJxCjRFaVJmbk1wZ1NUY0VHU21yVG02b3JUUUg2aEY3ODdkOXVOdGFqRUVYZWxOZngyc1E2VkJpZm5hS2k5Z2RXTE8KNUtJczRoRmx2WUE5bHBJVVNRamhWWTVCWlI5V2VBQXFpS2N6NE5iTmt0dk85aGJ6QVBXM0txSzVjMUlkb0N3bgphK0ZYV21pWTFVQy9KRlBVekdIWkRXNVF2cFNScG1RUjhZajdoUGhRY0VrYlZJekp4MkhpZXNaeUVHWnpUeW5qCmRwS0ZheHpUSGR1ZTFha09yYm1UdHA3ZlFNRDZ5NXB3ejMvUzl5UWFVWVFlNnQwaHUxRkM0ak0vRXBnb2ZrK20KUHh4Qmk3RUNnWUVBN3R0NUxrVGlBTFUra2xrOUhCQTYrVkVTQlN3M1pJQytzZ2piR2tjWFhheTRzRDVqbm5OdgpJWGdOWXdmU1JrdEtWK3JNMTZUbXFZeWFMZkJrdmtjVnlKdnQ1TkdDN0ZJUkdRMjRMaVl1VjdQbjA5dVZwL2g0CldBcGVBbVBMQlI2ODFMbVp6WkQ0ZjFqMzc3Qy8yVWRuTlJWMTVabWh0czVENTNIa0FqektyVDhDZ1lFQTU1ekMKSHM1ZVlhRVlkUXoyN1hqVHFFd1NOTk15RXQ0T25PZVl6TkdWZk42SUxyaXgwdDI4R1dtMnhWRUo5WkpKL210QQpCZWszU0xuRk9qdGZBVThTcTUvVFdNKzl1NktzRno5ZlZoWkJyUlF3SU5ER2M5SmV1cEQ0MmtHcVNwdzM4TWdKCmJNME1XeHNWcWJpVW1KaG45NmsyWnB1bmlEUmRzV2FEQ2tVd2NTTUNnWUE4Z0NyNXBVajVsTzc4Y3M0ZnhaeXEKZWZadWlQeWU0RjF0Q3dFMGJyMWtaTk9ERU1wNjRCSk9EL0tVR3U4UUR4SU5vdE92NjN6aGhWT29QelBGWG93TgovREVOdkdQRktDUmNqRFVTdTJrUm5lZ2lxWVFHdjlEN3UrU0VCbkx1SVJNRGJ0K2VTaEluYjRtZGxNK0RZYXFxCnIzemxZenlxNlNRYUE2Y1ZTZ0NzVVFLQmdDRGQ2ZDRkUXQ5djBOeXJYazhNbWx5RGp3SFlCbjhPNjl2d01ZcS8KSXd0NU9MSUltNU5reTlCL1krUlVQNm1OZk5xUnRhQWhIQ3RCMFc4V0JjRlZ5engzamJKSXFJLzc0WmZhOGxoeApDQmpiaUlqZmw0blFESWxGRVV0SGpqYlFQRS82MHZ1UmpYTlFRSjY1QnIwd3czQXRudjZvai9tUUZNdWIxSFNjCnBPY3BBb0dBQnorM2VNdGJTOHZtS2lFNUZxTDlWT3RUN2RnaUVmWDl6RTYzejRJNkREckRINVdNS1JQSUQwS0kKenFJYVBxUVExU0VTWDV4WlQ2VkRqbmt0Y3VDMzVWVzcwemkwZ2VTSW1SZDg1MHFLakJKbU9wU1VXRW10eDczSgpNMGFBcUFCZ2NsVnFjdTlxOEcxS01iT1pNNUN0WFEwd1RPcDA4UUpGOUZ0UCtUMFFQaHc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQUkwc1U4ZG1ZdVdrbjBORG9ReVI2ZEV3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSTBNRFl4TlRJek1qazBNRm9YRFRJMQpNRFl4TlRJek1qazBNRm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMkJwTk5haHoxeXlESEUzaE9HV1VYdWJNOTQ5SFlyTVoKckZ0UjA5UVY1bG1DTVRwVnhxMDdWV1pVK0NmVnRkejJYREpoYWNqdkhUU0VuNkgwWm9ndjR4M2N3Ujd0L0draQo4c2NOWU02SnFtSnlYQ2lUY0Z5UVVTN1AyZ29YeWhld2NmVUNNTWJpcjNDSGFxcUdmOVVWdnhLVVlXdHNrbVZvCkVsU0VjMGJid3ZFeFlEY28rQXE2Tzh6bFo1cmE3M1hMai9aaU5Yb0xQUGM3YmxBYXhKVGorektIbWErc0FnNjMKSlZtN0o3Mm15VWhMcDU0SFNETFZ6QS9YdTBlN1JwSWFINStHRE1kV0Vua2xzaUNYeUdDSlFrZFZycm51RVJrZgo4OVZNTjY2QS93elJ3NERBUUlLZ01KN05scElRbTh4VTdURmJYT0Y5WjkveHNURk1QUDUrblFJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkU0cVdlcUpXVi9VejJIbW1VYW9xTmN2OU1qSQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJPMFZ6Zkw3c29aV29HV3BSYkZROW1GOWJYRkp5b3B0K1ZiL0lICnd1c2xLQzN1UUFxa1hTSXFOOUUyMEJSTmN4RjlCajZYVjNOVnloaGZoYzJwbE9LaEZrUy9nSjZSa3I2TEVZZGMKNis3OHgyOEsyQ00rNkl1STNsWmZSZk9KRTBpejFnYytOK2w3emJWUTQ0dUFPVFhjeWllYWkrVURUU1ArTEkwZgpQekM5czV5L2JRNzdTaHpwd3FtbmEvbEFTdWJCVnBuczVHRHhGcXhoMHgyZGQ4d0treS9YWlMzYlUzdnNFR3J1CmRBKzdCV3pSVkN3clZlVkI0R1JqSGpVSlpyVlJVa0NyYkVQbTY5cUNrOHJBMXo4YUlCWE1xWjVpTHJsODdrTWcKK29YS254TmkxNnBUVWd1bVlESXlwUS94V0x4Y3ZBanVMeS9XZVc0NlljaEdOaTc1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "QXpzNVFMeVIzRExPTHBkUUpvRDUzUXd1Vk9xSVE2bFE="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/ingress/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-ingress"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: kubernetes.io/tls
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlPZ0F3SUJBZ0lSQUpUWVhNamxNZzVZVnJqTURMUVh2WjB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSmFHRnlZbTl5TFdOaE1CNFhEVEkwTURZeE5USXpNamswTUZvWERUSTFNRFl4TlRJegpNamswTUZvd0hURWJNQmtHQTFVRUF4TVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwbmp0VElwaWpIaEE5c2FpT29Ea1FFWFUydGNXaXV1MlVpU0gKa2U4WFVxd0luQXBvanFIWTBtK3dsOWFpL0YrTjEwMzlyQUxIb0FXZEFBVkN3WHEzYXZDSVJWcVZDL1hkeEo2VQorVFlBVUVBV01MTXdRbVdRNkRCVzgvZ241V21VVGtCT2Q3YTVKMjRuQlg2M295RHdaSjJaRTA0ZmNmb3pVOWR2CnpZN3B2Sm0rQ1Nkai96ZmV1d0UwKzBnc3YvTkZORHhkYTRueVpOYzRmbnJYRVd2TzBBaFlOTENHOFpNeGl0aFMKQ1RQVWsrNnJEVnpGdlJIeWdOQVRmaG9DT2xqN1dzQklFZ1dBQzg4a0pWYnRlaXJLSFdHT282Ulo1VjdjY2p4LwpvejRzM3EzWElMbUd4UEVBR2tKUHEvMjlOaUM0QjZQWExpdUhuUjc3UXkrZW52ak43d0lEQVFBQm8zOHdmVEFPCkJnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVEeGZUTWpuZWFqVHdlb201Y2E4MWkyZ0RpOWN3SFFZRApWUjBSQkJZd0ZJSVNZMjl5WlM1b1lYSmliM0l1Wkc5dFlXbHVNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI2CkU5SFpIMmJKNStGaEFWSTVCNG5FL011dnhaaDZqS2JhMmJRNGF0QU4vc252Z2V2VEt5TzgyVW9FNUMvbEFLSlQKSEM2U1RmMFZnTnc1aVBrYXJVV0VDS2xwT0Y0VlpESXlqWVpEWjlLVFFMc2orTFczM0Q0aFBoYXpvVE95OERwWgo4ZFVUUlFka3A0UjJzWlJkRk9vK3NjMCt2eE83UUZqUzhmMDFhMWw5ZE9hV1h2QWViVk1hVkpWVzZLalNRZXJNCkxRQWN1YkRKL1huSW9jYXhGVVI2TG9kTm1MMmRuTmZZMUg4SDRkSWRQa2dkb2x1WkxRQW5KQTNBQjhubEpaWTMKUndXbnZLY1hwSURRUDdIQTF4blhjd3JCaUNUNWhsVnFqbHpDVEEwdlY3MkhpWURrczZlQ3g3TjlHVVQyNHdDZQowUVV1VVM4OWhTOENBYWZCeG9WKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMG5qdFRJcGlqSGhBOXNhaU9vRGtRRVhVMnRjV2l1dTJVaVNIa2U4WFVxd0luQXBvCmpxSFkwbSt3bDlhaS9GK04xMDM5ckFMSG9BV2RBQVZDd1hxM2F2Q0lSVnFWQy9YZHhKNlUrVFlBVUVBV01MTXcKUW1XUTZEQlc4L2duNVdtVVRrQk9kN2E1SjI0bkJYNjNveUR3WkoyWkUwNGZjZm96VTlkdnpZN3B2Sm0rQ1NkagovemZldXdFMCswZ3N2L05GTkR4ZGE0bnlaTmM0Zm5yWEVXdk8wQWhZTkxDRzhaTXhpdGhTQ1RQVWsrNnJEVnpGCnZSSHlnTkFUZmhvQ09sajdXc0JJRWdXQUM4OGtKVmJ0ZWlyS0hXR09vNlJaNVY3Y2NqeC9vejRzM3EzWElMbUcKeFBFQUdrSlBxLzI5TmlDNEI2UFhMaXVIblI3N1F5K2VudmpON3dJREFRQUJBb0lCQUgvdStXNzQvd1liWW9HZQpJNllrQ3BuMjJIZGRIbHE3QkV2UjRJWVlLcmtaMFBIb2NiMmhLMFplbFp6MTNvUkJJTnFxa1hNcERXWjdndjhzCk0zT2Z3RFhFbDFCd3l3QkdKdE1KQWN5cHdtOEZSWGU4czZ6b1I3aWJDWCtxYTdYTEExYTlSL1VFb0c4VFNhelIKWlpaR3cxaWxZeEtVL2hBdDRWMHBLdEJyK2kra3VMYU8wdHVlWjRmNUZuTDRqdVJhRm03cUFWYzRoRC9BcGxiYwpZSE9OSHlOVTBWQlhMQkN4cFQwa3hqRXRVa0NrYTk2dWd1VUZrM3ZEQWZ0TXNCV2dpclluV2VGTitxc0xhTDlYCndNdTAwZ28xUVVWeUxnVmNQWkdaU0FJWTVySzNhb09Jajd6S1dXK2JrK3czNFNxaG1zOVlwdW1ieklCZjNNRmYKalNPTmRRRUNnWUVBL29tQWVyR3NNeXJVUUpXVE5xbGdMYURTdFJxSFk4czdaVFBpVkZndno1QjhHZ1hmbUJtRApsT3Iwa2k4ZnNCUXRHSnVHTldQZ0xtZjNTT1IvMjJGT2VHNkZSMGM5aGl6RnBUNWVWcFBHT3dEeUE5ZnVQS3ZtClU5bnBUdEgrd3JpT2JURmIrQ2Z3ZmZ4dXFkZnBSK1Y4TmE5SXVuRHdOVnBlNHFBUG83RC8rSThDZ1lFQTA2NlgKMEN4TTV5ODEvTWJoTURQRkJRKy9OQkdieWsvYXFWNTVhVnBSNkE4ZWdKKzJDdU94ek9nMk1OMnVPVyt5NUJjOApybWFwTnprUXZhZkdQWTUzTjZQYlJxZTRTOE1VL01PTHVlb0lWN0pOZkdJa2t0cjJtWVhtem5Kams3ZU0zQVcxCm1renhKZGpuY2FYV1VjWW1YUkR6SlNmeGJqT09YKytmU0dsUXhLRUNnWUVBaDMwZjA2K2hydmJjVnFpSDNTL1oKajFBcytOUHZQNUtkd2lnVkVMcUVjS05EUEFMbVd5c3huR0pZM3p1UVRZVGY0RnBnM1NpVjIzM2g1bjRqQk43TwpDMU1oUktqS09oSzQvbFd0bDc0L1pZY0NURU56Zi80c3MzT3FPaGVUMllpdDM3ZkhjZGVvcnhkZ3ZLMitjbFBZCmd5Y1R1cEtGZXBEcE13N3FaRUxDYmtjQ2dZQUtaQXFkdEY3K0Jpby9Rei93anNvQUNwclhJbm9rUHpFN21TQ2EKbEUxcTk3c0drMUJyVG12KzQvTXRDT1N4ZXhNcjhSd1FiNGVrNTA4MEVCVkNGa2t4MlFBOWdxUWdTKzR1emlhQQp0TVUrRU1tTzduNWZHeEo1ek1IY3BtN081SGFzb2pjYzRPUUJlSms3MGVrb1VISzNwTXBhcTVCRldaQ0drd3VkCmtWWGVvUUtCZ1FEenRIa0dqU21saDRkOS9zNEQrMkhkUmJ6blpxdFZndk4relp2SjFrdjFMNnh5Mi9USllPYXoKcXI1ODFFLy90b2YwRldYZnN4MWZpTkxPcExlUXJpVHlWTXJTSFJsdWgvS0pqUUo2NWtHaUlzZlVQc21aU3EvVQp2eXp5WFdaQ1dkb3IySlp5ekhyMjZnYXF6MmY1eW9SM2NNZkI2Z0FzcGxMdWppTzdUSk1QUXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVlJ6VVBWeDZwRG1uR3hwM1c5WnNHekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NalF3TmpFMU1qTXlPVFF3V2hjTk1qVXdOakUxTWpNeQpPVFF3V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ1VDQUxPeG5NWGg0bG9GcmZ0RU5mYm52eTRmd3hVZXZ5WGVXYkhJV1ZHNkViS05Rd20KTEFRUjlmNi8yVjhQS29USUJsTDk3dHB3djZ3bmF6NFV6dkdjaEs0Mk5tUHFxMGFkN0VGK21KTmM1akNiTXBIQQp0RVNtdGp5Y2RpcnFHcDcxNlZJdGwxb282Z0ZRTHhLY25MU3J0VGwzc0dkeWxUdXM1Z1RqSVJjbDQ5QmIvMVZOCmQ3M1Q0ck1mWWdnTnRWNXNlKytSR1ZobTJUR256eE1hOG1DMXIwQ2kyL1AzeWhwYkhYQUlYWnV6M3YwRzdDWU4KYURWTVI2U2hCWWE2NHY1dUEwS1gvZ3RzdFVTOFJiSk5pdnhLV2lERTlpMktDaGVLTmovQUNvckNOS2dvQnFyVApCdXBoQ1ZqZFUyaGFXd1VqbHdtV1pheG1MbVltTVgwUVpXRjFBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVEeGZUTWpuZWFqVHdlb201Y2E4MWkyZ0RpOWN3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIdU1ldkFnUk1wUk1vUDlBUTVGTWdXZ092YjhwQmRNTXFIMW16dGFkSEZabFlFWXFuVmNrZEZPClRmTUtwN2I3ZFFZcW4yZXhSOEtoczcvOTBhZ245WnE3MDIxS0dhSGg2WXhqN1cxaGpsNUJ4WXQ5WGllMEkxSkQKMXg4Tmg0UHp3dDhIbStEemVRZC9BYStkc1QzREVlSTVRMmEvdUpTamtsQ1cyYm5tdVdxMWg4MTMxY0tLR2lHZwpnc1dFMytlUWtQQ05vRGp4OVBiTXFRVW9ibnRXSElvVG9TZmJMbGl4MnFFeGU4MzdQUEx0Sk5KTkVkaWFhOXlMCnRiWDhHOFFYbnFBdVFJSU5HaVRPSnNieWd1R0pHUUV3VWQyeCtSN2lRdTZwRHZ2djBuWllGZldUR0hCOVdmdC8KbkF0bVNLdzdwNnkrcUZCOGtpcFIydzhyako5OXlXUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "WUN5ZmdMZm5lejY2MFZHVg=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "Z1ZvQ3ZHSnBpTnhKcFp0Nw=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJHRWMjgzT2YzNi9NNW04V2J2RngybnVHUHAzQ3NHWFhpRWt4bFhVbEthZlJGSjBoUnFsNEwu"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-harbor-trivy
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9teS1yZWxlYXNlLWhhcmJvci1yZWRpczo2Mzc5LzU/aWRsZV90aW1lb3V0X3NlY29uZHM9MzA=
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "my-release-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://my-release-harbor-core:80"
  JOBSERVICE_URL: "http://my-release-harbor-jobservice"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://my-release-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://my-release-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://my-release-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://my-release-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://my-release-harbor-core:80"
  TOKEN_SERVICE_URL: "http://my-release-harbor-core:80/service/token"
  REGISTRY_URL: "http://my-release-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://my-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://my-release-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: my-release-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "my-release-harbor-registryctl"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: my-release
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: my-release
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-harbor-redis
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: my-release
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: my-release
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-harbor-trivy"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: my-release
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-harbor-core
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: my-release
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: c3116563d85f6b9bdcbac25e2d0c099426c9de6a8c2914649b4aaffbfafef8f9
        checksum/secret: dd40a883605fae7e897f01eaef017ebdc582c4c9fe758258a4dd387868f634a3
        checksum/secret-jobservice: 0838cbb8ce1f395fd5e5d766cd59d575244a29889a2ecf12f87434a225f5b825
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:v2.10.2
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "my-release-harbor-core"
        - secretRef:
            name: "my-release-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: my-release-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: my-release-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: my-release-harbor-core
      - name: ca-download
        secret:
          secretName: "my-release-harbor-ingress"
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-jobservice"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 4f7dbbc49083e08019aef002eb306672953036d7f85e00f568404bde6c98d976
        checksum/configmap-env: 444e5b5fb018c6309eda013df23304fb64c2c247607e2490803a3a9b8e3b4ab3
        checksum/secret: 12fb5f8b243a1e2a60aa59b874c5a8cb8d9b8819143359f3d8d63fb5dd408d97
        checksum/secret-core: a3d3140a77eafe513b8700ea9755cc0b5cd31c464f60998825aac14b95bbb73d
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "my-release-harbor-jobservice-env"
        - secretRef:
            name: "my-release-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "my-release-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: my-release-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-portal"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: my-release
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 4f57228da5b996ce2e1d73f0b48047e3c9bcad7981c56b409a4049c270489dc2
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "my-release-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-harbor-registry"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: b75e637804ef6ab7e2215cc2ab72b2231972ce38099b82e0ce84c84464a961e7
        checksum/secret: 8497d39820b00577166c285a08b981a1748afaab64d1baada8c4db79a53bc19d
        checksum/secret-jobservice: 56b0eaee4a28efa220190f8b398fa0ab263b13b0a2f376edf7ab768836003876
        checksum/secret-core: 78a5b6a1b2eae057b962586a84f3b1a099c3a49458d41add0460ba51b1800566
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "my-release-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "my-release-harbor-registryctl"
        - secretRef:
            name: "my-release-harbor-registry"
        - secretRef:
            name: "my-release-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-release-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: my-release-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: my-release-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "my-release-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: my-release-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-release-harbor-database"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "my-release-harbor-database"
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: ed9edd1f8c192111d15a20b2a392275408e9802a66f04db8f24eb48610f87df2
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        envFrom:
          - secretRef:
              name: "my-release-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-harbor-redis
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: my-release-harbor-redis
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:v2.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-harbor-trivy
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: my-release-harbor-trivy
  selector:
    matchLabels:
      release: my-release
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 4b4f43fdfe71cee5a7df60db35cd1de066d89ced7a5abe80c64c7bcbac2ce9af
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.10.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "my-release-harbor-core,my-release-harbor-jobservice,my-release-harbor-database,my-release-harbor-registry,my-release-harbor-portal,my-release-harbor-trivy,my-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_JAVA_DB_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: my-release-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: my-release
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "my-release-harbor-ingress"
  labels:
    heritage: Helm
    release: my-release
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: my-release-harbor-ingress
    hosts:
    - core.harbor.domain
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-release-harbor-portal
            port:
              number: 80
    host: core.harbor.domain
