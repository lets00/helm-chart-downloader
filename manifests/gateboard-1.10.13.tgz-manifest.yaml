---
# Source: gateboard/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-gateboard
  labels:
    helm.sh/chart: gateboard-1.10.13
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.10.13"
    app.kubernetes.io/managed-by: Helm
---
# Source: gateboard/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-gateboard
data:
  AUTOMEMLIMIT_DEBUG: "true"
  LOG_DRIVER: zap
  OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger-collector:14268
  OTEL_PROPAGATORS: b3multi
  OTEL_TRACES_EXPORTER: jaeger
  OTEL_TRACES_SAMPLER: parentbased_traceidratio
  OTEL_TRACES_SAMPLER_ARG: "0.01"
  OTELCONFIG_EXPORTER: jaeger
  REPO_LIST: /etc/gateboard/repo.yaml
---
# Source: gateboard/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-gateboard-config
data:
  mongo-tls-ca-bundle.pem: |
    -----BEGIN CERTIFICATE-----
    -----END CERTIFICATE-----
  repo.yaml: |
    # Example repo.yaml
    # Edit this file to suit your use case.
    # Keep only the repositories you actually need.
    #
    # Available repo kinds:
    #
    # mem:      testing-only pseudo-storage
    # mongo:    MongoDB
    # redis:    redis
    # dynamodb: DynamoDB
    # s3:       S3
    #
    # Use env var REPO_LIST to set the filename: export REPO_LIST=repo.yaml
  
    - kind: mem
      name: mem1 # name is used for metrics
    - kind: mem
      name: mem2 # pick distinct names for multiple instances of the same kind
  
    - kind: mongo
      name: mongo1 # name is used for metrics
      mongo:
        uri: mongodb://localhost:27017/
        database: gateboard
        collection: gateboard
        username: ""
        #password: "aws-parameterstore:us-east-1:/mongo/cluster1/password" # see https://github.com/udhos/boilerplate
        #tls_ca_file: /etc/gateboard/mongo-tls-ca-bundle.pem
        min_pool: 1
        index_creation_disable: false
        index_creation_retry: 5
        index_creation_cooldown: 5s
  
    - kind: dynamodb
      name: dynamo1 # name is used for metrics
      dynamodb:
        table: gateboard
        region: us-east-1
        role_arn: ""
        manual_create: false # if false, gateboard will create the table automatically
  
    - kind: redis
      name: redis1 # name is used for metrics
      redis:
        addr: localhost:6379
        #password: "aws-parameterstore:us-east-1:/redis/cluster3/password" # see https://github.com/udhos/boilerplate
        key: gateboard
        #tls: true
        #tls_insecure_skip_verify: true
        client_name: auto # 'auto' means use hostname
  
    - kind: s3
      name: s3one # name is used for metrics
      s3:
        bucket_name: ""
        bucket_region: us-east-1
        prefix: gateboard
        role_arn: ""
        manual_create: false # if false, gateboard will create the bucket automatically
        #server_side_encryption: AES256
---
# Source: gateboard/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-gateboard
rules:
- apiGroups:
  - ""
  resources:
  - 'pods'
  verbs:
  - 'get'
  - 'list'
  - 'watch'
---
# Source: gateboard/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-gateboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-gateboard
subjects:
- kind: ServiceAccount
  name: my-release-gateboard
  namespace: default
---
# Source: gateboard/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gateboard
  labels:
    helm.sh/chart: gateboard-1.10.13
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.10.13"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
---
# Source: gateboard/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gateboard
  labels:
    helm.sh/chart: gateboard-1.10.13
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.10.13"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: gateboard
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        rollme: "jCvnM"
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "true"
      labels:
        app.kubernetes.io/name: gateboard
        app.kubernetes.io/instance: my-release
        app: gateboard
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: my-release
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: my-release
      serviceAccountName: my-release-gateboard
      securityContext:
        {}
      volumes:
      - name: config
        configMap:
          name: my-release-gateboard-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: my-release
          securityContext:
            {}
          image: "udhos/gateboard:1.10.13"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
          - configMapRef:
              name: my-release-gateboard
          volumeMounts:
          - name: config
            mountPath: /etc/gateboard
          startupProbe:
            # must initialize within 3*100=300 seconds
            httpGet:
              path: /health
              port: 8888
            periodSeconds: 3
            failureThreshold: 100
          readinessProbe:
            # not ready after 10*6=60 seconds without success
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            periodSeconds: 10
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            # kill after 20*6=120 seconds without success
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            periodSeconds: 20
            failureThreshold: 6
            successThreshold: 1
            timeoutSeconds: 10            
          resources:
            limits:
              cpu: 2000m
              ephemeral-storage: 200Mi
              memory: 400Mi
            requests:
              cpu: 300m
              ephemeral-storage: 200Mi
              memory: 100Mi
---
# Source: gateboard/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-gateboard
  labels:
    helm.sh/chart: gateboard-1.10.13
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.10.13"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-gateboard
  minReplicas: 1
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
---
# Source: gateboard/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-gateboard-test-connection"
  labels:
    helm.sh/chart: gateboard-1.10.13
    app.kubernetes.io/name: gateboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.10.13"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-gateboard:8080']
  restartPolicy: Never
