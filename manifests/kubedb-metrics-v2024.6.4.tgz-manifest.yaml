---
# Source: kubedb-metrics/templates/connectcluster/kafka-kubedb-com-connectcluster.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kafka-kubedb-com-connectcluster
spec:
  targetRef:
    apiVersion: kafka.kubedb.com/v1alpha1
    kind: ConnectCluster
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Kubedb kafka connect cluster information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: enableSSL
          valuePath: .spec.enableSSL
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: kafkaRef
          valuePath: .spec.kafkaRef.name
      metricValue:
        value: 1

    - name: replicas
      help: "Number of kafka connect cluster replicas"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_conditions
      help: "Kafka connect cluster instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: status_phase
      help: "Kafka connect cluster instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: Unknown
            metricValue:
              valueFromExpression: "int(phase == 'Unknown')"

    - name: security_http_ssl_enabled
      help: "Kafka connect cluster ssl information"
      type: gauge
      params:
        - key: ssl
          valuePath: .spec.enableSSL
      metricValue:
        valueFromExpression: int(ssl == 'true')

    - name: certmanager_managed_tls_enabled
      help: "Kafka connect cluster cert manager managed tls info"
      type: gauge
      params:
        - key: tls_issuerRef
          valuePath: .spec.tls.issuerRef
      metricValue:
        valueFromExpression: int(tls_issuerRef != 'nil')

    - name: resource_request_cpu
      help: "Requested CPU by Kafka connect cluster in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Kafka connect cluster in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Kafka connect cluster in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Kafka connect cluster in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Kafka connect cluster in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Kafka connect cluster in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/druid/catalog-kubedb-com-druidversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-druidversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: DruidVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Druid versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/druid/kubedb-com-druid.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-druid
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Druid
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of druid instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "Druid instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Druid instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.topology.historicals.storageType
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "Druid instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Druid in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Druid in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Druid in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Druid in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Druid in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Druid in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    ### Metrics for coordinators topology ###

    - name: coordinators_node_replicas
      help: "Number of replicas for druid coordinators node"
      type: gauge
      field:
        path: .spec.topology.coordinators.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.coordinators.replicas

    ### Metrics for overlords topology ###

    - name: overlords_node_replicas
      help: "Number of replicas for druid overlords node"
      type: gauge
      field:
        path: .spec.topology.overlords.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.overlords.replicas

    ### Metrics for historicals topology ###

    - name: historicals_node_replicas
      help: "Number of replicas for druid historicals node"
      type: gauge
      field:
        path: .spec.topology.historicals.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.historicals.replicas

    - name: historicals_node_storage_class_info
      help: "Druid historicals node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.historicals.storage.storageClassName
      metricValue:
        value: 1

    ### Metrics for middleManagers topology ###

    - name: middlemanagers_node_replicas
      help: "Number of replicas for druid middleManagers node"
      type: gauge
      field:
        path: .spec.topology.middleManagers.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.middleManagers.replicas

    - name: middleManagers_node_storage_class_info
      help: "Druid middleManagers node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.middleManagers.storage.storageClassName
      metricValue:
        value: 1

    ### Metrics for brokers topology ###

    - name: brokers_node_replicas
      help: "Number of replicas for druid brokers node"
      type: gauge
      field:
        path: .spec.topology.brokers.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.brokers.replicas

    ### Metrics for routers topology ###

    - name: routers_node_replicas
      help: "Number of replicas for druid routers node"
      type: gauge
      field:
        path: .spec.topology.routers.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.routers.replicas
---
# Source: kubedb-metrics/templates/elasticsearch/catalog-kubedb-com-elasticsearchversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-elasticsearchversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: ElasticsearchVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: info
      help: "Elastic search versions info"
      type: gauge
      labels:
        - key: auth_plugin
          valuePath: .spec.authPlugin
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
        - key: distribution
          valuePath: .spec.distribution
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/elasticsearch/kubedb-com-elasticsearch.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-elasticsearch
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Elasticsearch
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Kubedb elasticsearch information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.storageType
        - key: enableSSL
          valuePath: .spec.enableSSL
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
        - key: storageClassName
          valuePath: .spec.storage.storageClassName
      metricValue:
        value: 1

    - name: replicas
      help: "Number of elasticsearch replicas in general mode"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_conditions
      help: "Elasticsearch instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: status_phase
      help: "Elasticsearch instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: security_http_ssl_enabled
      help: "Elasticsearch ssl information"
      type: gauge
      params:
        - key: ssl
          valuePath: .spec.enableSSL
      metricValue:
        valueFromExpression: int(ssl == 'true')

    - name: certmanager_managed_tls_enabled
      help: "Elasticsearch cert manager managed tls info"
      type: gauge
      params:
        - key: tls_issuerRef
          valuePath: .spec.tls.issuerRef
      metricValue:
        valueFromExpression: int(tls_issuerRef != 'nil')

    - name: resource_request_cpu
      help: "Requested CPU by Elasticsearch in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Elasticsearch in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Elasticsearch in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Elasticsearch in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Elasticsearch in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Elasticsearch in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    ##### Metrics for Master topology #####

    - name: master_node_replicas
      help: "Number of replicas for elasticsearch master node"
      type: gauge
      field:
        path: .spec.topology.master.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.master.replicas

    - name: master_node_storage_class_info
      help: "Elasticsearch master node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.master.storage.storageClassName
      metricValue:
        value: 1

    - name: master_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.master.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.master.maxUnavailable

    ##### Metrics for Data topology #####

    - name: data_node_replicas
      help: "Number of replicas for elasticsearch data node"
      type: gauge
      field:
        path: .spec.topology.data.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.data.replicas

    - name: data_node_storage_class_info
      help: "Elasticsearch data node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.data.storage.storageClassName
      metricValue:
        value: 1

    - name: data_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.data.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.data.maxUnavailable

      ##### Metrics for DataContent topology #####

    - name: datacontent_node_replicas
      help: "Number of replicas for elasticsearch dataContent node"
      type: gauge
      field:
        path: .spec.topology.dataContent.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataContent.replicas

    - name: datacontent_node_storage_class_info
      help: "Elasticsearch dataContent node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.dataContent.storage.storageClassName
      metricValue:
        value: 1

    - name: datacontent_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.dataContent.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataContent.maxUnavailable

    ##### Metrics for DataHot topology #####

    - name: datahot_node_replicas
      help: "Number of replicas for elasticsearch dataHot node"
      type: gauge
      field:
        path: .spec.topology.dataHot.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataHot.replicas

    - name: datahot_node_storage_class_info
      help: "Elasticsearch dataHot node information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.dataHot.storage.storageClassName
      metricValue:
        value: 1

    - name: datahot_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.dataHot.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataHot.maxUnavailable

    ##### Metrics for DataWarm topology #####

    - name: datawarm_node_replicas
      help: "Number of replicas for elasticsearch dataWarm node"
      type: gauge
      field:
        path: .spec.topology.dataWarm.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataWarm.replicas

    - name: datawarm_node_storage_class_info
      help: "Elasticsearch dataWarm node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.dataWarm.storage.storageClassName
      metricValue:
        value: 1

    - name: datawarm_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.dataWarm.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataWarm.maxUnavailable

    ##### Metrics for DataCold topology #####

    - name: datacold_node_replicas
      help: "Number of replicas for elasticsearch dataCold node"
      type: gauge
      field:
        path: .spec.topology.dataCold.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataCold.replicas

    - name: datacold_node_storage_class_info
      help: "Elasticsearch dataCold node storage information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.dataCold.storage.storageClassName
      metricValue:
        value: 1

    - name: datacold_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.dataCold.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataCold.maxUnavailable

    ##### Metrics for DataFrozen topology #####

    - name: datafrozen_node_replicas
      help: "Number of replicas for elasticsearch dataFrozen node"
      type: gauge
      field:
        path: .spec.topology.dataFrozen.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataFrozen.replicas

    - name: datafrozen_node_storage_class_info
      help: "Elasticsearch dataFrozen node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.dataFrozen.storage.storageClassName
      metricValue:
        value: 1

    - name: datafrozen_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.dataFrozen.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.dataFrozen.maxUnavailable

    ##### Metrics for Ingest topology #####

    - name: ingest_node_replicas
      help: "Number of replicas for elasticsearch ingest node"
      type: gauge
      field:
        path: .spec.topology.ingest.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.ingest.replicas

    - name: ingest_node_storage_class_info
      help: "Elasticsearch ingest node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.ingest.storage.storageClassName
      metricValue:
        value: 1

    - name: ingest_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.ingest.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.ingest.maxUnavailable

    ##### Metrics for ML topology #####

    - name: ml_node_replicas
      help: "Number of replicas for elasticsearch ml node"
      type: gauge
      field:
        path: .spec.topology.ml.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.ml.replicas


    - name: ml_node_storage_class_info
      help: "Elasticsearch ml node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.ml.storage.storageClassName
      metricValue:
        value: 1

    - name: ml_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.ml.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.ml.maxUnavailable

    ##### Metrics for transform topology #####

    - name: transform_node_replicas
      help: "Number of replicas for elasticsearch transform node"
      type: gauge
      field:
        path: .spec.topology.transform.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.transform.replicas

    - name: transform_node_storage_class_info
      help: "Elasticsearch transform node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.transform.storage.storageClassName
      metricValue:
        value: 1

    - name: transform_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.transform.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.transform.maxUnavailable

    ##### Metrics for coordinating topology #####

    - name: coordinating_node_replicas
      help: "Number of replicas for elasticsearch coordinating node"
      type: gauge
      field:
        path: .spec.topology.coordinating.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.coordinating.replicas

    - name: coordinating_node_storage_class_info
      help: "Elasticsearch coordinating node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.coordinating.storage.storageClassName
      metricValue:
        value: 1

    - name: coordinating_node_max_unavailable
      help: "Maximum number of pods unavailable after an eviction"
      type: gauge
      field:
        path: .spec.topology.coordinating.maxUnavailable
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.coordinating.maxUnavailable
---
# Source: kubedb-metrics/templates/elasticsearch/ops-kubedb-com-elasticsearchopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-elasticsearchopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: ElasticsearchOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "Elasticsearch OpsRequest Type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The current phase of Elasticsearch OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/ferretdb/catalog-kubedb-com-ferretdbversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-ferretdbversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: FerretDBVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "FerretDB versions info"
      type: gauge
      labels:
        - key: ferretdb_image
          valuePath: .spec.db.image
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/ferretdb/kubedb-com-ferretdb.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-ferretdb
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: FerretDB
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of ferretdb instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "FerretDB instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "FerretDB instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: backend_url
          valuePath: .spec.backend.postgres.url
      metricValue:
        value: 1

    - name: status_conditions
      help: "FerretDB instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by ferretdb in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by FerretDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by FerretDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for FerretDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for FerretDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for FerretDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/kafka/catalog-kubedb-com-kafkaversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-kafkaversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: KafkaVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: info
      help: "Kafka versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: connect_cluster_image
          valuePath: .spec.connectCluster.image
        - key: deprecated
          valuePath: .spec.deprecated
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/kafka/kubedb-com-kafka.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-kafka
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Kafka
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Kubedb kafka information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.storageType
        - key: enableSSL
          valuePath: .spec.enableSSL
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: storageClassName
          valuePath: .spec.storage.storageClassName
      metricValue:
        value: 1

    - name: replicas
      help: "Number of kafka replicas in combined mode"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_conditions
      help: "Kafka instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: status_phase
      help: "Kafka instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: security_http_ssl_enabled
      help: "Kafka ssl information"
      type: gauge
      params:
        - key: ssl
          valuePath: .spec.enableSSL
      metricValue:
        valueFromExpression: int(ssl == 'true')

    - name: certmanager_managed_tls_enabled
      help: "Kafka cert manager managed tls info"
      type: gauge
      params:
        - key: tls_issuerRef
          valuePath: .spec.tls.issuerRef
      metricValue:
        valueFromExpression: int(tls_issuerRef != 'nil')

    - name: resource_request_cpu
      help: "Requested CPU by Kafka in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Kafka in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Kafka in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Kafka in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Kafka in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Kafka in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    ##### Metrics for Broker topology #####

    - name: broker_node_replicas
      help: "Number of replicas for kafka broker nodepool"
      type: gauge
      field:
        path: .spec.topology.broker.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.broker.replicas

    - name: broker_node_storage_class_info
      help: "Kafka broker node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.broker.storage.storageClassName
      metricValue:
        value: 1

    ##### Metrics for Controller topology #####

    - name: controller_node_replicas
      help: "Number of replicas for kafka controller nodepool"
      type: gauge
      field:
        path: .spec.topology.controller.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.controller.replicas

    - name: controller_node_storage_class_info
      help: "Kafka controller node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.controller.storage.storageClassName
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/kafka/ops-kubedb-com-kafkaopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-kafkaopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: KafkaOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "Kafka OpsRequest Type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The current phase of Kafka OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/mariadb/catalog-kubedb-com-mariadbversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-mariadbversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: MariaDBVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "MariaDB versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: db_image
          valuePath: .spec.db.image
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/mariadb/kubedb-com-mariadb.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-mariadb
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: MariaDB
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of mariadb instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "MariaDB instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "MariaDB instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: requireSSL
          valuePath: .spec.requireSSL
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "MariaDB instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by MariaDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by MariaDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by MariaDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for MariaDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for MariaDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for MariaDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/mariadb/ops-kubedb-com-mariadbopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-mariadbopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: MariaDBOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "MariaDB OpsRequest type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "MariaDB OpsRequest current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/mariadb/schema-kubedb-com-mariadbdatabase.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: schema-kubedb-com-mariadbdatabase
spec:
  targetRef:
    apiVersion: schema.kubedb.com/v1alpha1
    kind: MariaDBDatabase
  commonLabels:
    - key: app
      valuePath: .spec.database.serverRef.name
    - key: app_namespace
      valuePath: .spec.database.serverRef.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: status_phase
      help: "MariaDB schema current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: InProgress
            metricValue:
              valueFromExpression: "int(phase == 'InProgress')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Current
            metricValue:
              valueFromExpression: "int(phase == 'Current')"
          - labelValue: Expired
            metricValue:
              valueFromExpression: "int(phase == 'Expired')"
          - labelValue: Terminating
            metricValue:
              valueFromExpression: "int(phase == 'Terminating')"
---
# Source: kubedb-metrics/templates/mongodb/catalog-kubedb-com-mongodbversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-mongodbversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: MongoDBVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "MongoDB versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
        - key: distribution
          valuePath: .spec.distribution
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/mongodb/kubedb-com-mongodb.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-mongodb
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: MongoDB
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: status_phase
      help: "MongoDB instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "MongoDB instance information"
      type: gauge
      labels:
        - key: clusterAuthMode
          valuePath: .spec.clusterAuthMode
        - key: sslMode
          valuePath: .spec.sslMode
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
        - key: version
          valuePath: .spec.version
      metricValue:
        value: 1

    - name: status_conditions
      help: "MongoDB instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: shard_enabled
      help: "MongoDB sharded topology enable info"
      type: gauge
      params:
        - key: topology
          valuePath: .spec.shardTopology
      metricValue:
        valueFromExpression: "int(topology != 'nil')"

    - name: resource_request_cpu
      help: "Requested CPU by MongoDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by MongoDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by MongoDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for MongoDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for MongoDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for MongoDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: replicas
      help: "Number of replicas in the MongoDB replicaset"
      type: gauge
      field:
        path: .spec.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.replicas

    ##### Metrics config for mongodb sharded database #####

    - name: shard_shards
      help: "Number of shards of the MongoDB database"
      type: gauge
      field:
        path: .spec.shardTopology.shard.shards
        type: Integer
      metricValue:
        valueFromPath: .spec.shardTopology.shard.shards

    - name: shard_replicas
      help: "Number of replicas in the MongoDB shards"
      type: gauge
      field:
        path: .spec.shardTopology.shard.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.shardTopology.shard.replicas

    - name: configsvr_replicas
      help: "Number of replicas in MongoDB config server in sharded database"
      type: gauge
      field:
        path: .spec.shardTopology.configServer.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.shardTopology.configServer.replicas

    - name: mongos_replicas
      help: "Number of replicas in mongodb sharded mongos"
      type: gauge
      field:
        path: .spec.shardTopology.mongos.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.shardTopology.mongos.replicas
---
# Source: kubedb-metrics/templates/mongodb/ops-kubedb-com-mongodbopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-mongodbopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: MongoDBOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "MongoDB OpsRequest Type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The current phase of MongoDB OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/mongodb/schema-kubedb-com-mongodbdatabase.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: schema-kubedb-com-mongodbdatabase
spec:
  targetRef:
    apiVersion: schema.kubedb.com/v1alpha1
    kind: MongoDBDatabase
  commonLabels:
    - key: app
      valuePath: .spec.database.serverRef.name
    - key: app_namespace
      valuePath: .spec.database.serverRef.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: status_phase
      help: "MongoDB schema current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: InProgress
            metricValue:
              valueFromExpression: "int(phase == 'InProgress')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Current
            metricValue:
              valueFromExpression: "int(phase == 'Current')"
          - labelValue: Expired
            metricValue:
              valueFromExpression: "int(phase == 'Expired')"
          - labelValue: Terminating
            metricValue:
              valueFromExpression: "int(phase == 'Terminating')"
---
# Source: kubedb-metrics/templates/mysql/catalog-kubedb-com-mysqlversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-mysqlversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: MySQLVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "MySQL versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: db_image
          valuePath: .spec.db.image
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: distribution
          valuePath: .spec.distribution
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/mysql/kubedb-com-mysql.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-mysql
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: MySQL
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of mysql instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "MySQL instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "MySQL instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: useAddressType
          valuePath: .spec.useAddressType
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
        - key: requireSSL
          valuePath: .spec.requireSSL
      metricValue:
        value: 1

    - name: status_conditions
      help: "MySQL instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by MySQL in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by MySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by MySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for MySQL in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for MySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for MySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/mysql/ops-kubedb-com-mysqlopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-mysqlopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: MySQLOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "MySQL Opsrequest type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The opsrequest current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/mysql/schema-kubedb-com-mysqldatabase.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: schema-kubedb-com-mysqldatabase
spec:
  targetRef:
    apiVersion: schema.kubedb.com/v1alpha1
    kind: MySQLDatabase
  commonLabels:
    - key: app
      valuePath: .spec.database.serverRef.name
    - key: app_namespace
      valuePath: .spec.database.serverRef.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: status_phase
      help: "MySQL schema current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: InProgress
            metricValue:
              valueFromExpression: "int(phase == 'InProgress')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Current
            metricValue:
              valueFromExpression: "int(phase == 'Current')"
          - labelValue: Expired
            metricValue:
              valueFromExpression: "int(phase == 'Expired')"
          - labelValue: Terminating
            metricValue:
              valueFromExpression: "int(phase == 'Terminating')"
---
# Source: kubedb-metrics/templates/perconaxtradb/catalog-kubedb-com-perconaxtradbversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-perconaxtradbversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: PerconaXtraDBVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "PerconaXtraDB versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: db_image
          valuePath: .spec.db.image
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/perconaxtradb/kubedb-com-perconaxtradb.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-perconaxtradb
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: PerconaXtraDB
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of perconaxtradb instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "PerconaXtraDB instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "PerconaXtraDB instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: requireSSL
          valuePath: .spec.requireSSL
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "PerconaXtraDB instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by PerconaXtraDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by PerconaXtraDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by PerconaXtraDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for PerconaXtraDB in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for PerconaXtraDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for PerconaXtraDB in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/perconaxtradb/ops-kubedb-com-perconaxtradbopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-perconaxtradbopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: PerconaXtraDBOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "PerconaXtraDB OpsRequest type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "PerconaXtraDB OpsRequest current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/pgpool/catalog-kubedb-com-pgpoolversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-pgpoolversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: PgpoolVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Pgpool versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: pgpool_image
          valuePath: .spec.pgpool.image
        - key: exporter_image
          valuePath: .spec.exporter.image
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/pgpool/kubedb-com-pgpool.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-pgpool
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Pgpool
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of pgpool instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "Pgpool instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Pgpool instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: backend
          valuePath: .spec.postgresRef.name
      metricValue:
        value: 1

    - name: status_conditions
      help: "Pgpool instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by pgpool in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Pgpool in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Pgpool in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Pgpool in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Pgpool in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Pgpool in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/postgres/catalog-kubedb-com-postgresversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-postgresversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: PostgresVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Postgres versions info"
      type: gauge
      labels:
        - key: coordinator_image
          valuePath: .spec.coordinator.image
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
        - key: distribution
          valuePath: .spec.distribution
        - key: exporter_image
          valuePath: .spec.exporter.image
        - key: stash_addon_backup_task
          valuePath: .spec.stash.addon.backupTask.name
        - key: stash_addon_restore_task
          valuePath: .spec.stash.addon.restoreTask.name
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/postgres/kubedb-com-postgres.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-postgres
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Postgres
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of postgres instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "Postgres instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Postgres instance information"
      type: gauge
      labels:
        - key: clientAuthMode
          valuePath: .spec.clientAuthMode
        - key: sslMode
          valuePath: .spec.sslMode
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
        - key: version
          valuePath: .spec.version
        - key: standby_mode
          valuePath: .spec.standbyMode
        - key: streaming_mode
          valuePath: .spec.streamingMode
      metricValue:
        value: 1

    - name: status_conditions
      help: "Postgres instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: leader_election_info
      help: "Postgres leader election config info"
      type: gauge
      labels:
        - key: election_tick
          valuePath: .spec.leaderElection.electionTick
        - key: heart_beat_tick
          valuePath: .spec.leaderElection.heartbeatTick
        - key: maximum_lag_before_failover
          valuePath: .spec.leaderElection.maximumLagBeforeFailover
        - key: period
          valuePath: .spec.leaderElection.period
      metricValue:
        value: 1

    - name: monitoring_info
      help: "Postgres monitoring agent info"
      type: gauge
      labels:
        - key: agent
          valuePath: .spec.monitor.agent
      metricValue:
        value: 1

    - name: tls_info
      help: "Postgres database tls info"
      type: gauge
      labels:
        - key: issuers_name
          valuePath: .spec.tls.issuerRef.name
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Postgres in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Postgres in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Postgres in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Postgres in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Postgres in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Postgres in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/postgres/ops-kubedb-com-postgresopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-postgresopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: PostgresOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "Postgres OpsRequest Type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The current phase of Postgres OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/postgres/schema-kubedb-com-postgresdatabase.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: schema-kubedb-com-postgresdatabase
spec:
  targetRef:
    apiVersion: schema.kubedb.com/v1alpha1
    kind: PostgresDatabase
  commonLabels:
    - key: app
      valuePath: .spec.database.serverRef.name
    - key: app_namespace
      valuePath: .spec.database.serverRef.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: status_phase
      help: "PostgreSQL schema current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: InProgress
            metricValue:
              valueFromExpression: "int(phase == 'InProgress')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Current
            metricValue:
              valueFromExpression: "int(phase == 'Current')"
          - labelValue: Expired
            metricValue:
              valueFromExpression: "int(phase == 'Expired')"
          - labelValue: Terminating
            metricValue:
              valueFromExpression: "int(phase == 'Terminating')"
---
# Source: kubedb-metrics/templates/proxysql/catalog-kubedb-com-proxysqlversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-proxysqversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: ProxySQLVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "ProxySQL versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: proxysql_image
          valuePath: .spec.proxysql.image
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/proxysql/kubedb-com-proxysql.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-proxysql
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: ProxySQL
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of proxysql instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "ProxySQL instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "ProxySQL instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
        - key: backend
          valuePath: .spec.backend.name
        - key: ssl
          valuePath: .spec.tls
      metricValue:
        value: 1

    - name: status_conditions
      help: "ProxySQL instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by ProxySQL in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by ProxySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by ProxySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for ProxySQL in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for ProxySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for ProxySQL in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/proxysql/ops-kubedb-com-proxysqlopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-proxysqlopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: ProxySQLOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.proxyRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "ProxySQL OpsRequest type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "ProxySQL OpsRequest current phase."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/rabbitmq/catalog-kubedb-com-rabbitmqversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-rabbitmqversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: RabbitMQVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "RabbitMQ versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/rabbitmq/kubedb-com-rabbitmq.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-rabbitmq
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: RabbitMQ
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: status_phase
      help: "RabbitMQ instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "RabbitMQ instance information"
      type: gauge
      labels:
        - key: storageType
          valuePath: .spec.storageType
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: version
          valuePath: .spec.version
      metricValue:
        value: 1

    - name: status_conditions
      help: "RabbitMQ instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by RabbitMQ in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by RabbitMQ in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by RabbitMQ in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for RabbitMQ in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for RabbitMQ in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for RabbitMQ in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: replicas
      help: "Number of replicas in the RabbitMQ replicaset"
      type: gauge
      field:
        path: .spec.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.replicas
---
# Source: kubedb-metrics/templates/redis/catalog-kubedb-com-redisversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-redisversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: RedisVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Redis versions info"
      type: gauge
      labels:
        - key: deprecated
          valuePath: .spec.deprecated
        - key: db_image
          valuePath: .spec.db.image
        - key: exporter_image
          valuePath: .spec.exporter.image
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/redis/kubedb-com-redis.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-redis
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Redis
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: mode
      help: "Redis database instance mode"
      type: gauge
      labels:
        - key: mode
          valuePath: .spec.mode
      metricValue:
        value: 1

    - name: cluster_master_nodes
      help: "Number of master nodes in redis cluster"
      type: gauge
      field:
        path: .spec.cluster.master
        type: Integer
      metricValue:
        valueFromPath: .spec.cluster.master

    - name: cluster_replicas
      help: "Number of replicas in redis cluster"
      type: gauge
      field:
        path: .spec.cluster.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.cluster.replicas

    - name: replicas
      help: "Number of replicas of redis instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "Redis instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Redis instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: mode
          valuePath: .spec.mode
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "Redis instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Redis in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Redis in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Redis in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Redis in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Redis in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Redis in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/redis/kubedb-com-redissentinel.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-redissentinel
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: RedisSentinel
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of redis sentinel instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: tls_enabled
      help: "Redis sentinel tls info"
      type: gauge
      params:
        - key: tls
          valuePath: .spec.tls
      metricValue:
        valueFromExpression: int(tls != 'nil')

    - name: status_phase
      help: "Redis sentinel instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Redis senitel instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.storageType
        - key: terminationPolicy
          valuePath: .spec.terminationPolicy
      metricValue:
        value: 1

    - name: status_conditions
      help: "Redis sentinel instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Redis sentinel in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Redis sentinel in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Redis sentinel in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Redis sentinel in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Redis sentinel in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Redis sentinel in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/redis/ops-kubedb-com-redisopsrequest.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: ops-kubedb-com-redisopsrequest
spec:
  targetRef:
    apiVersion: ops.kubedb.com/v1alpha1
    kind: RedisOpsRequest
  commonLabels:
    - key: app
      valuePath: .spec.databaseRef.name
    - key: app_namespace
      valuePath: .metadata.namespace
    - key: type
      valuePath: .spec.type
  metrics:
    - name: type
      help: "Redis OpsRequest Type"
      type: gauge
      metricValue:
        value: 1
    - name: status_phase
      help: "The current phase of Redis OpsRequest."
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Progressing
            metricValue:
              valueFromExpression: "int(phase == 'Progressing')"
          - labelValue: Failed
            metricValue:
              valueFromExpression: "int(phase == 'Failed')"
          - labelValue: Pending
            metricValue:
              valueFromExpression: "int(phase == 'Pending')"
          - labelValue: Successful
            metricValue:
              valueFromExpression: "int(phase == 'Successful')"
---
# Source: kubedb-metrics/templates/singlestore/kubedb-com-singlestore.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-singlestore
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Singlestore
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: replicas
      help: "Number of replicas of singlestore instance"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_phase
      help: "Singlestore instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "Singlestore instance information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.storageType
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: requireSSL
          valuePath: .spec.tls
      metricValue:
        value: 1

    - name: status_conditions
      help: "Singlestore instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by Singlestore in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Singlestore in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Singlestore in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Singlestore in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Singlestore in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Singlestore in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)
---
# Source: kubedb-metrics/templates/solr/catalog-kubedb-com-solrversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-solrversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: SolrVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp
    - name: info
      help: "Solr versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/solr/kubedb-com-solr.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-solr
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: Solr
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation time stamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "Kubedb solr information"
      type: gauge
      labels:
        - key: version
          valuePath: .spec.version
        - key: storageType
          valuePath: .spec.storageType
        - key: enableSSL
          valuePath: .spec.enableSSL
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: storageClassName
          valuePath: .spec.storage.storageClassName
        - key: zookeeper
          valuePath: .spec.zookeeperRef.name
      metricValue:
        value: 1

    - name: replicas
      help: "Number of solr replicas in general mode"
      type: gauge
      params:
        - key: obj
          valuePath: .
      metricValue:
        valueFromExpression: resource_replicas(obj)

    - name: status_conditions
      help: "Solr instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: status_phase
      help: "Solr instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: security_http_ssl_enabled
      help: "Solr ssl information"
      type: gauge
      params:
        - key: ssl
          valuePath: .spec.enableSSL
      metricValue:
        valueFromExpression: int(ssl == 'true')

    - name: certmanager_managed_tls_enabled
      help: "Solr cert manager managed tls info"
      type: gauge
      params:
        - key: tls_issuerRef
          valuePath: .spec.tls.issuerRef
      metricValue:
        valueFromExpression: int(tls_issuerRef != 'nil')

    - name: resource_request_cpu
      help: "Requested CPU by Solr in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by Solr in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by Solr in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for Solr in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for Solr in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for Solr in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    ### Metrics for overseer topology ###

    - name: overseer_node_replicas
      help: "Number of replicas for solr overseer node"
      type: gauge
      field:
        path: .spec.topology.overseer.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.overseer.replicas

    - name: overseer_node_storage_class_info
      help: "Solr overseer node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.overseer.storage.storageClassName
      metricValue:
        value: 1

    ### Metrics for data topology ###

    - name: data_node_replicas
      help: "Number of replicas for solr data node"
      type: gauge
      field:
        path: .spec.topology.data.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.data.replicas

    - name: data_node_storage_class_info
      help: "Solr data node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.data.storage.storageClassName
      metricValue:
        value: 1

    ### Metrics for coordinator topology ###

    - name: coordinator_node_replicas
      help: "Number of replicas for solr coordinator node"
      type: gauge
      field:
        path: .spec.topology.coordinator.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.topology.coordinator.replicas

    - name: coordinator_node_storage_class_info
      help: "Solr coordinator node storage class information"
      type: gauge
      labels:
        - key: storage_className
          valuePath: .spec.topology.coordinator.storage.storageClassName
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/zookeeper/catalog-kubedb-com-zookeeperversion.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: catalog-kubedb-com-zookeeperversion
spec:
  targetRef:
    apiVersion: catalog.kubedb.com/v1alpha1
    kind: ZooKeeperVersion
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: info
      help: "ZooKeeper versions info"
      type: gauge
      labels:
        - key: db_image
          valuePath: .spec.db.image
        - key: deprecated
          valuePath: .spec.deprecated
        - key: exporter_image
          valuePath: .spec.exporter.image
      metricValue:
        value: 1
---
# Source: kubedb-metrics/templates/zookeeper/kubedb-com-zookeeper.yaml
apiVersion: metrics.appscode.com/v1alpha1
kind: MetricsConfiguration
metadata:
  name: kubedb-com-zookeeper
spec:
  targetRef:
    apiVersion: kubedb.com/v1alpha2
    kind: ZooKeeper
  commonLabels:
    - key: app
      valuePath: .metadata.name
    - key: app_namespace
      valuePath: .metadata.namespace
  metrics:
    - name: created
      help: "Unix creation timestamp"
      type: gauge
      field:
        path: .metadata.creationTimestamp
        type: DateTime
      metricValue:
        valueFromPath: .metadata.creationTimestamp

    - name: status_phase
      help: "ZooKeeper instance current phase"
      type: gauge
      field:
        path: .status.phase
        type: String
      params:
        - key: phase
          valuePath: .status.phase
      states:
        labelKey: phase
        values:
          - labelValue: Ready
            metricValue:
              valueFromExpression: "int(phase == 'Ready')"
          - labelValue: Halted
            metricValue:
              valueFromExpression: "int(phase == 'Halted')"
          - labelValue: Provisioning
            metricValue:
              valueFromExpression: "int(phase == 'Provisioning')"
          - labelValue: Critical
            metricValue:
              valueFromExpression: "int(phase == 'Critical')"
          - labelValue: NotReady
            metricValue:
              valueFromExpression: "int(phase == 'NotReady')"
          - labelValue: DataRestoring
            metricValue:
              valueFromExpression: "int(phase == 'DataRestoring')"

    - name: info
      help: "ZooKeeper instance information"
      type: gauge
      labels:
        - key: deletionPolicy
          valuePath: .spec.deletionPolicy
        - key: version
          valuePath: .spec.version
      metricValue:
        value: 1

    - name: status_conditions
      help: "ZooKeeper instance status condition"
      type: gauge
      field:
        path: .status.conditions
        type: Array
      labels:
        - key: type
          valuePath: .status.conditions[*].type
        - key: status
          valuePath: .status.conditions[*].status
      metricValue:
        value: 1

    - name: resource_request_cpu
      help: "Requested CPU by ZooKeeper in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_memory
      help: "Requested memory by ZooKeeper in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_request_storage
      help: "Requested storage by ZooKeeper in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_requests(obj, resourceType)

    - name: resource_limit_cpu
      help: "CPU limit for ZooKeeper in core"
      type: gauge
      labels:
        - key: unit
          value: core
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: cpu
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_memory
      help: "Memory limit for ZooKeeper in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: memory
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: resource_limit_storage
      help: "Storage limit for ZooKeeper in byte"
      type: gauge
      labels:
        - key: unit
          value: byte
      params:
        - key: obj
          valuePath: .
        - key: resourceType
          value: storage
      metricValue:
        valueFromExpression: total_resource_limits(obj, resourceType)

    - name: replicas
      help: "Number of replicas in the ZooKeeper"
      type: gauge
      field:
        path: .spec.replicas
        type: Integer
      metricValue:
        valueFromPath: .spec.replicas
---
# Source: kubedb-metrics/templates/metrics-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:metrics:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - metrics.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: kubedb-metrics/templates/metrics-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:metrics:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - metrics.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
