---
# Source: k8s-image-swapper/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-k8s-image-swapper
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
imagePullSecrets:
    []
---
# Source: k8s-image-swapper/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-k8s-image-swapper
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    dryRun: true
    logFormat: console
    logLevel: debug
    source:
      filters:
      - jmespath: obj.metadata.namespace == 'kube-system'
    target:
      aws:
        accountId: "12345678"
        region: ap-southeast-2
---
# Source: k8s-image-swapper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-k8s-image-swapper
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
---
# Source: k8s-image-swapper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-k8s-image-swapper
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-image-swapper
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: app
  template:
    metadata:
      annotations:
        checksum/config: 635eefa2b99daf825e609f1e22bafaf6796e21fb1c0df24f593f641ad3964da1
      labels:
        helm.sh/chart: k8s-image-swapper-1.10.3
        app.kubernetes.io/name: k8s-image-swapper
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: app
        app.kubernetes.io/version: "1.5.10"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: my-release-k8s-image-swapper
      securityContext:
        {}
      containers:
        - name: k8s-image-swapper
          securityContext:
            {}
          image: "ghcr.io/estahn/k8s-image-swapper:1.5.10"
          imagePullPolicy: IfNotPresent
          args:
            - --config=/.k8s-image-swapper.yaml
            - --tls-cert-file=/usr/local/certificates/cert
            - --tls-key-file=/usr/local/certificates/key
            - --listen-address=:8443
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          resources:
            {}
          volumeMounts:
            - name: my-release-k8s-image-swapper
              subPath: config.yaml
              mountPath: /.k8s-image-swapper.yaml
              readOnly: true
            - mountPath: /tmp
              name: tmp
            - name: webhook-cert
              mountPath: "/usr/local/certificates/"
              readOnly: true
      volumes:
        - name: my-release-k8s-image-swapper
          configMap:
            name: my-release-k8s-image-swapper
        - name: tmp
          emptyDir: {}
        - name: webhook-cert
          secret:
            secretName: my-release-k8s-image-swapper
---
# Source: k8s-image-swapper/templates/mutatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name:  my-release-k8s-image-swapper
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: k8s-image-swapper.github.io
    timeoutSeconds: 10
    failurePolicy: Ignore
    reinvocationPolicy: Never
    namespaceSelector:
      {}
    objectSelector:
      {}
    rules:
      - apiGroups:
          - "*"
        apiVersions:
          - "*"
        resources:
          - pods
        operations:
          - CREATE
          - UPDATE
    clientConfig:
      service:
        namespace: default
        name: my-release-k8s-image-swapper
        path: /webhook
    admissionReviewVersions: ["v1beta1"]
    sideEffects: None
---
# Source: k8s-image-swapper/templates/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-k8s-image-swapper-patch
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
imagePullSecrets:
    []
---
# Source: k8s-image-swapper/templates/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-k8s-image-swapper-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: k8s-image-swapper/templates/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-k8s-image-swapper-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-k8s-image-swapper-patch
subjects:
  - kind: ServiceAccount
    name: my-release-k8s-image-swapper-patch
    namespace: default
---
# Source: k8s-image-swapper/templates/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-k8s-image-swapper-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: k8s-image-swapper/templates/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-k8s-image-swapper-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-k8s-image-swapper-patch
subjects:
  - kind: ServiceAccount
    name: my-release-k8s-image-swapper-patch
    namespace: default
---
# Source: k8s-image-swapper/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-k8s-image-swapper-test-connection"
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: app
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:
        - --no-check-certificate
        - -O-
        - 'https://my-release-k8s-image-swapper:443'
  restartPolicy: Never
---
# Source: k8s-image-swapper/templates/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-k8s-image-swapper-patch-create
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name: my-release-k8s-image-swapper-create
      labels:
        helm.sh/chart: k8s-image-swapper-1.10.3
        app.kubernetes.io/name: k8s-image-swapper
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: job-patch
        app.kubernetes.io/version: "1.5.10"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: create
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.3.0
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=my-release-k8s-image-swapper,my-release-k8s-image-swapper.default.svc
            - --namespace=default
            - --secret-name=my-release-k8s-image-swapper
          resources:
            {}
      restartPolicy: OnFailure
      serviceAccountName: my-release-k8s-image-swapper-patch
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: k8s-image-swapper/templates/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-k8s-image-swapper-patch
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: k8s-image-swapper-1.10.3
    app.kubernetes.io/name: k8s-image-swapper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: job-patch
    app.kubernetes.io/version: "1.5.10"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      name: my-release-k8s-image-swapper-patch
      labels:
        helm.sh/chart: k8s-image-swapper-1.10.3
        app.kubernetes.io/name: k8s-image-swapper
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: job-patch
        app.kubernetes.io/version: "1.5.10"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - name: patch
          image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.3.0
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=my-release-k8s-image-swapper
            - --namespace=default
            - --secret-name=my-release-k8s-image-swapper
            - --patch-validating=false
            - --patch-failure-policy=Ignore
          resources:
            {}
      restartPolicy: OnFailure
      serviceAccountName: my-release-k8s-image-swapper-patch
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
