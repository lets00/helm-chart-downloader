---
# Source: gocd/templates/gocd-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-gocd
  labels:
    chart: "gocd-2.7.1"
    app: "gocd"
    heritage: "Helm"
    release: "my-release"
  annotations:
---
# Source: gocd/templates/gocd-server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-gocd
  labels:
    app: gocd
    chart: "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
data:
  preconfigure_server.sh: |-
    #!/bin/bash
    while true
    do
      status_code=$(curl 'http://localhost:8153/go/api/v1/health' -o /dev/null -w "%{http_code}")
      if [ $status_code == 200 ]; then
        break
      fi
      sleep 10
    done

    set -e

    echo "checking if server has already been configured" >> /godata/logs/preconfigure.log

    if [ -f /godata/logs/preconfigure_complete.log ]
    then
      echo "Existing server configuration found in cruise-config.xml. Skipping preconfigure_server scripts." >> /godata/logs/preconfigure.log
      exit 0
    fi

    echo "No configuration found in cruise-config.xml. Using default preconfigure_server scripts to configure server" >> /godata/logs/preconfigure.log

    echo "Trying to configure cluster profile." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/admin/elastic/cluster_profiles' \
      -H 'Accept: application/vnd.go.cd+json'  \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "id": "k8-cluster-profile",
        "plugin_id": "cd.go.contrib.elasticagent.kubernetes",
        "properties": [
            {
                "key": "go_server_url",
                "value": "http://my-release-gocd-server.default:8153/go"
            }
          ]
      }' >> /godata/logs/preconfigure.log)

    echo "Trying to create an elastic profile now." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/elastic/profiles' \
      -H 'Accept: application/vnd.go.cd+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{
        "id": "demo-app",
        "cluster_profile_id": "k8-cluster-profile",
        "properties": [
          {
            "key": "Image",
            "value": "gocd/gocd-agent-wolfi:v24.1.0"
          },
          {
            "key": "PodConfiguration",
            "value": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: gocd-agent-{{ POD_POSTFIX }}\n  labels:\n    app: web\nspec:\n  serviceAccountName: default\n  containers:\n    - name: gocd-agent-container-{{ CONTAINER_POSTFIX }}\n      image: gocd/gocd-agent-wolfi:v24.1.0"
          },
          {
            "key": "PodSpecType",
            "value": "yaml"
          }
        ]
      }' >> /godata/logs/preconfigure.log)

    echo "Trying to creating a hello world pipeline." >> /godata/logs/preconfigure.log

    (curl --fail -i 'http://localhost:8153/go/api/admin/pipelines' \
      -H 'Accept: application/vnd.go.cd+json' \
      -H 'Content-Type: application/json' \
      -X POST -d '{ "group": "sample",
                    "pipeline": {
                      "label_template": "${COUNT}",
                      "name": "getting_started_pipeline",
                      "materials": [
                        {
                          "type": "git",
                          "attributes": {
                            "url": "https://github.com/gocd-contrib/getting-started-repo",
                            "shallow_clone": true
                          }
                        }
                      ],
                      "stages": [
                        {
                          "name": "default_stage",
                          "jobs": [
                            {
                              "name": "default_job",
                              "elastic_profile_id": "demo-app",
                              "tasks": [
                                {
                                  "type": "exec",
                                  "attributes": {
                                    "command": "./build"
                                  }
                                }
                              ],
                              "tabs": [
                                {
                                  "name": "Sample",
                                  "path": "my-artifact.html"
                                }
                              ],
                              "artifacts": [
                                {
                                  "type": "build",
                                  "source": "my-artifact.html"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }' >> /godata/logs/preconfigure.log )

    echo "Done preconfiguring the GoCD server" > /godata/logs/preconfigure_complete.log
---
# Source: gocd/templates/gocd-server-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-gocd-server
  labels:
    app: gocd
    chart: "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
    component: server
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "2Gi"
---
# Source: gocd/templates/gocd-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-gocd
  labels:
    chart: "gocd-2.7.1"
    app: "gocd"
    heritage: "Helm"
    release: "my-release"
rules:
- apiGroups: [""]
  resources:
  - pods
  - pods/log
  verbs: ["*"]
- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list"]
- apiGroups: [""]
  resources:
  - events
  verbs: ["list"]
---
# Source: gocd/templates/gocd-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-gocd
  labels:
    chart: "gocd-2.7.1"
    app: "gocd"
    heritage: "Helm"
    release: "my-release"
subjects:
- kind: ServiceAccount
  name: my-release-gocd
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-gocd
---
# Source: gocd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gocd-server
  annotations:
  labels:
    app: gocd
    chart: "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
    component: server
spec:
  type: NodePort
  
  ports:
    - port: 8153
      targetPort: 8153
      protocol: TCP
      name: http
  selector:
    app: gocd
    release: "my-release"
    component: server
---
# Source: gocd/templates/gocd-agent-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gocd-agent
  labels:
    app: gocd
    chart:  "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
    component: agent
  annotations:
spec:
  replicas: 0
  selector:
    matchLabels:
      app: gocd
      release: "my-release"
      component: agent
  template:
    metadata:
      labels:
        app: gocd
        release: "my-release"
        component: agent
      annotations:
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 1000
        runAsGroup: 0
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: gocd-agent
          image: "gocd/gocd-agent-wolfi:v24.1.0"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
            - name: GO_SERVER_URL
              value: "http://my-release-gocd-server:8153/go"
          securityContext:
            privileged: false
      restartPolicy: Always
---
# Source: gocd/templates/gocd-server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gocd-server
  labels:
    app: gocd
    chart: "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
    component: server
  annotations:
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gocd
      release: "my-release"
      component: server
  template:
    metadata:
      labels:
        app: gocd
        release: "my-release"
        component: server
      annotations:
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 0
        fsGroup: 0
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: my-release-gocd
      automountServiceAccountToken: true
      volumes:
        - name: config-vol
          configMap:
            name: my-release-gocd
        - name: goserver-vol
          persistentVolumeClaim:
            claimName: my-release-gocd-server
      containers:
        - name: gocd-server
          image: "gocd/gocd-server:v24.1.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: GOCD_PLUGIN_INSTALL_kubernetes-elastic-agents
              value: https://github.com/gocd/kubernetes-elastic-agents/releases/download/v4.1.0-541/kubernetes-elastic-agent-4.1.0-541.jar
            - name: GOCD_PLUGIN_INSTALL_docker-registry-artifact-plugin
              value: https://github.com/gocd/docker-registry-artifact-plugin/releases/download/v1.4.0-691/docker-registry-artifact-plugin-1.4.0-691.jar
          ports:
            - containerPort: 8153
          livenessProbe:
            httpGet:
              path: /go/api/v1/health
              port: 8153
            initialDelaySeconds: 90
            periodSeconds: 15
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /go/api/v1/health
              port: 8153
            initialDelaySeconds: 90
            periodSeconds: 15
            failureThreshold: 10
          volumeMounts:
            - name: config-vol
              mountPath: /preconfigure_server.sh
              subPath: preconfigure_server.sh
            - name: goserver-vol
              mountPath: /godata
              subPath: godata
            - name: goserver-vol
              mountPath: /home/go
              subPath: homego
            - name: goserver-vol
              mountPath: /docker-entrypoint.d
              subPath: scripts
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - /preconfigure_server.sh
          resources:
            {}
      restartPolicy: Always
---
# Source: gocd/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-gocd-server
  labels:
    app: gocd
    chart: "gocd-2.7.1"
    release: "my-release"
    heritage: "Helm"
    component: server
  annotations:
spec:
  defaultBackend:
    service:
      name: my-release-gocd-server
      port:
        number: 8153
