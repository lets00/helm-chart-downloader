---
# Source: factorio/templates/rcon-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-factorio-rcon
  labels:
    app: my-release-factorio
    chart: my-release-factorio
    release: "my-release"
    heritage: "Helm"
data:
  rconpw: |
      Q0hBTkdFTUVDSEFOR0VNRQ==
---
# Source: factorio/templates/Settings-Configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-factorio-serversettingsconfig
  labels:
    app: my-release-factorio
    chart: my-release-factorio
    release: "my-release"
    heritage: "Helm"
data:
  server-settings.json: |
    {"afk_autokick_interval":0,"allow_commands":"admins-only","auto_pause":true,"autosave_interval":10,"autosave_only_on_server":true,"autosave_slots":5,"description":"Factorio running on Kubernetes","ignore_player_limit_for_returning_players":false,"max_players":0,"max_upload_in_kilobytes_per_second":0,"max_upload_slots":5,"maximum_segment_size":100,"maximum_segment_size_peer_count":10,"minimum_latency_in_ticks":0,"minimum_segment_size":25,"minimum_segment_size_peer_count":20,"name":"Factorio","non_blocking_saving":false,"only_admins_can_pause_the_game":true,"require_user_verification":false,"tags":["game","tags"],"visibility":{"lan":true,"public":false}}
  map-gen-settings.json: |
    {"autoplace_controls":{},"cliff_settings":{"cliff_elevation_0":10,"cliff_elevation_interval":40,"name":"cliff","richness":1},"height":0,"peaceful_mode":false,"property_expression_names":{"control-setting:aux:bias":"0","control-setting:aux:frequency:multiplier":"1","control-setting:moisture:bias":"0","control-setting:moisture:frequency:multiplier":"1"},"seed":null,"starting_area":1,"starting_points":[{"x":0,"y":0}],"terrain_segmentation":1,"water":1,"width":0}
  map-settings.json: |
    {"difficulty_settings":{"recipe_difficulty":0,"research_queue_setting":"after-victory","technology_difficulty":0,"technology_price_multiplier":1},"enemy_evolution":{"destroy_factor":0.002,"enabled":true,"pollution_factor":9e-7,"time_factor":0.000004},"enemy_expansion":{"building_coefficient":0.1,"enabled":true,"enemy_building_influence_radius":2,"friendly_base_influence_radius":2,"max_colliding_tiles_coefficient":0.9,"max_expansion_cooldown":216000,"max_expansion_distance":7,"min_base_spacing":3,"min_expansion_cooldown":14400,"neighbouring_base_chunk_coefficient":0.4,"neighbouring_chunk_coefficient":0.5,"other_base_coefficient":2,"settler_group_max_size":20,"settler_group_min_size":5},"max_failed_behavior_count":3,"path_finder":{"cache_accept_path_end_distance_ratio":0.15,"cache_accept_path_start_distance_ratio":0.2,"cache_max_connect_to_cache_steps_multiplier":100,"cache_path_end_distance_rating_multiplier":20,"cache_path_start_distance_rating_multiplier":10,"direct_distance_to_consider_short_request":100,"enemy_with_different_destination_collision_penalty":30,"extended_collision_penalty":3,"fwd2bwd_ratio":5,"general_entity_collision_penalty":10,"general_entity_subsequent_collision_penalty":3,"goal_pressure_ratio":2,"ignore_moving_enemy_collision_distance":5,"long_cache_min_cacheable_distance":30,"long_cache_size":25,"max_clients_to_accept_any_new_request":10,"max_clients_to_accept_short_new_request":100,"max_steps_worked_per_tick":100,"max_work_done_per_tick":8000,"min_steps_to_check_path_find_termination":2000,"negative_cache_accept_path_end_distance_ratio":0.3,"negative_cache_accept_path_start_distance_ratio":0.3,"negative_path_cache_delay_interval":20,"overload_levels":[0,100,500],"overload_multipliers":[2,3,4],"short_cache_min_algo_steps_to_cache":50,"short_cache_min_cacheable_distance":10,"short_cache_size":5,"short_request_max_steps":1000,"short_request_ratio":0.5,"stale_enemy_with_same_destination_collision_penalty":30,"start_to_goal_cost_multiplier_to_terminate_path_find":500,"use_path_cache":true},"pollution":{"ageing":1,"diffusion_ratio":0.02,"enabled":true,"enemy_attack_pollution_consumption_modifier":1,"expected_max_per_chunk":150,"max_pollution_to_restore_trees":20,"min_pollution_to_damage_trees":60,"min_to_diffuse":15,"min_to_show_per_chunk":50,"pollution_per_tree_damage":50,"pollution_restored_per_tree_damage":10,"pollution_with_max_forest_damage":150},"steering":{"default":{"force_unit_fuzzy_goto_behavior":false,"radius":1.2,"separation_factor":1.2,"separation_force":0.005},"moving":{"force_unit_fuzzy_goto_behavior":false,"radius":3,"separation_factor":3,"separation_force":0.01}},"unit_group":{"max_gathering_unit_groups":30,"max_group_gathering_time":36000,"max_group_member_fallback_factor":3,"max_group_radius":30,"max_group_slowdown_factor":0.3,"max_member_slowdown_when_ahead":0.6,"max_member_speedup_when_behind":1.4,"max_unit_group_size":200,"max_wait_time_for_late_members":7200,"member_disown_distance":10,"min_group_gathering_time":3600,"min_group_radius":5,"tick_tolerance_when_member_arrives":60}}
  server-adminlist.json: |
    []
  server-whitelist.json: |
    []
  server-banlist.json: |
    []
---
# Source: factorio/templates/mod-downloader-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-factorio-mod-downloader-configmap
  labels:
    app: my-release-factorio
    chart: my-release-factorio
    release: "my-release"
    heritage: "Helm"
data:
  # credit to the factoriotools/factorio-docker team, most of this logic came from them
  # https://github.com/factoriotools/factorio-docker/blob/master/docker/files/update-mods.sh
  mod-downloader.sh: |
    modDir=/factorio/mods
    MOD_BASE_URL="https://mods.factorio.com"
    declare -a officialMods
    officialMods=(
    )
    declare -A unofficialMods
    function print_step()
    {
      echo "$1"
    }
    function print_success()
    {
      echo "$1"
    }
    function print_failure()
    {
      echo "$1"
    }
    function downloadUnofficial() {
        cd $modDir;curl -L -o $2 $1
    }
    function downloadofficial() {
        if [[ -z ${USERNAME:-} ]]; then
          USERNAME="$(cat /account/username)"
        fi

        if [[ -z ${TOKEN:-} ]]; then
          TOKEN="$(cat /account/token)"
        fi

        if [[ -z ${USERNAME:-} ]]; then
          echo "You need to provide your Factorio username to update mods."
        fi

        if [[ -z ${TOKEN:-} ]]; then
          echo "You need to provide your Factorio token to update mods."
        fi
        MOD_INFO_URL="$MOD_BASE_URL/api/mods/$1"
        MOD_INFO_JSON=$(curl --silent "$MOD_INFO_URL")
    #    echo "$MOD_INFO_URL $MOD_INFO_JSON"
        if ! echo "$MOD_INFO_JSON" | jq -e .name >/dev/null; then
          print_success "  Custom mod not on $MOD_BASE_URL, skipped."
          return 0
        fi
        MOD_INFO=$(echo "$MOD_INFO_JSON" | jq -j --arg version "$VERSION" ".releases|reverse|map(select(.info_json.factorio_version as \$mod_version | \$version | startswith(\$mod_version)))[0]|.file_name, \";\", .download_url, \";\", .sha1")
        echo $MOD_INFO
        MOD_FILENAME=$(echo "$MOD_INFO" | cut -f1 -d";")
        MOD_URL=$(echo "$MOD_INFO" | cut -f2 -d";")
        MOD_SHA1=$(echo "$MOD_INFO" | cut -f3 -d";")
        if [[ $MOD_FILENAME == null ]]; then
          print_failure "  Not compatible with version"
          return 0
        fi
        print_step "Downloading..."
        FULL_URL="$MOD_BASE_URL$MOD_URL?username=$USERNAME&token=$TOKEN"
        echo $FULL_URL
        HTTP_STATUS=$(curl --silent -L -w "%{http_code}" -o "$modDir/$MOD_FILENAME" "$FULL_URL")

        if [[ $HTTP_STATUS != 200 ]]; then
          print_failure "  Download failed: Code $HTTP_STATUS."
          rm -f "$modDir/$MOD_FILENAME"
          return 1
        fi

        if [[ ! -f $modDir/$MOD_FILENAME ]]; then
          print_failure "  Downloaded file missing!"
          return 1
        fi

        if ! [[ $(sha1sum "$modDir/$MOD_FILENAME") =~ $MOD_SHA1 ]]; then
          print_failure "  SHA1 mismatch!"
          rm -f "$modDir/$MOD_FILENAME"
          return 1
        fi

        print_success "  Download complete."
    }
    mkdir -p $modDir
    for key in "${!unofficialMods[@]}"; do
      downloadUnofficial "${unofficialMods[$key]}" $key
    done

    if [ -f "/account/username" ]; then
      if [ -f "/account/token" ]; then
        echo "server is running version $VERSION"
        for officialMod in ${officialMods[*]}; do
          downloadofficial $officialMod $USERNAME $TOKEN
        done
      fi
    fi
---
# Source: factorio/templates/save-importer-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-factorio-save-importer-configmap
  labels:
    app: my-release-factorio
    chart: my-release-factorio
    release: "my-release"
    heritage: "Helm"
data:
  save-importer.sh: |
    #directory where file at $source_url will be downloaded to
    download_dir="/factorio/save-importer/download" 

    #directory where files from $source_url that meet staging criteria will be downloaded to
    #OR where files can be manually placed for import regardless of criteria.
    staging_dir="/factorio/save-importer/import" 

    #file used to record checksums and urls of previously downloaded files
    import_data="/factorio/save-importer/import_data.txt"

    target_dir="/factorio/saves"
    app_name="factorio"
    file_extension=".zip" #note, this is used both for searching the staging_dir and displaying messages to the user
    file_type="save"

    #config read from values.yaml
    target_filename="replaceMe.zip" #name for the downloaded file
    source_url=""
    reimport_on_file_change=0
    reimport_every_time=0


    main() {
    echo "starting $file_type import process"

    build_import_structure

    if [ "${#source_url}" -gt 0 ]; then
        echo "source_url $source_url provided. checking..."
        download_file
        stage_downloaded_file
    else
        echo "no download url specified. checking $staging_dir for manually staged files..."
    fi

    import_file
    }

    get_sha256sum() {
    sha256sum "$1" | awk '{ print $1 }'
    }

    get_previous_sha256sum() {
    echo $(grep "^${source_url}::" "$import_data" | awk -F '::' '{print $NF}')
    }

    build_import_structure() {
    # staging_dir
    if [ ! -d "$staging_dir" ]; then
        mkdir -p "$staging_dir"
    fi

    # download_dir
    if [ ! -d "$download_dir" ]; then
        mkdir -p "$download_dir"
    fi

    # target_dir
    if [ ! -d "$target_dir" ]; then
        mkdir -p "$target_dir"
    fi

    # data file
    if [ ! -f "$import_data" ]; then
        touch "$import_data"
    fi
    }

    download_file() {
    do_download=0
    if [ "$reimport_every_time" -eq 1 ]; then
        do_download=1
        echo "reimport_every_time is set to true."
    else
        echo "reimport_every_time is set to false."
    fi

    if  [ "$reimport_on_file_change" -eq 1 ]; then
        do_download=1
        echo "reimport_on_file_change is set to true."
    else
        echo "reimport_on_file_change is set to false."
    fi

    if ! grep -q "$source_url" "$import_data"; then
        do_download=1
        echo "source '$source_url' not previously downloaded."
    else
        echo "source '$source_url' previously downloaded."
    fi
    
    if [ "$do_download" -eq 1 ]; then
        echo "downloading '$source_url'..."
        if curl -L -o "$download_dir/$target_filename" "$source_url"; then
        echo "$file_type file downloaded from '$source_url' and renamed '$target_filename'"
        else
        echo "unable to download $file_type file from '$source_url'. skipping import process."
        exit 0
        fi
    else 
        echo "conditions not met to download file."
    fi
    }



    write_sha256sum () {
    echo "writing checksum of '$source_url' download to '$import_data' file for future runs of the import script."
    if grep -q "^${source_url}::" "$import_data"; then
        # Update the checksum if the file entry already exists (escape any ampersands!)
        sed -i "s~^${source_url}::.*~${source_url//&/\\&}::${checksum}~" "$import_data"
    else
        # Append the new entry to the checksum file if it doesn't exist
        echo "${source_url}::${checksum}" >> "$import_data"
    fi
    }


    stage_downloaded_file(){
    stage_file=0
    if [ -e "$download_dir/$target_filename" ]; then
        #get checksum of file, and any previous checksums that might exist for this source url
        checksum=$(get_sha256sum "$download_dir/$target_filename")
        previous_checksum=$(get_previous_sha256sum "$source_url")
        echo "previous checksum: $previous_checksum"

        if [ "$reimport_every_time" -eq 1 ]; then
        stage_file=1
        echo "reimport_every_time flag is set. file will be staged for import"
        fi

        if [ -z "$previous_checksum" ]; then
        stage_file=1
        echo "no record found of a previous download for this file. file will be staged for import."
        fi

        if [ "$checksum" != "$previous_checksum" -a "$reimport_on_file_change" ]; then
        echo "file from '$source_url' has changed since we last downloaded it..."
        if [ "$reimport_on_file_change" -eq 1 ]; then
            stage_file=1
            echo "...and 'reimport_on_file_change' is enabled. file will be staged for import"
        else
            echo "...but 'reimport_on_file_change' is disabled. file will NOT be staged for import"
        fi
        else
        echo "file from '$source_url' has NOT changed since we last downloaded it..."
        fi

        if [ "$stage_file" -eq 1 ]; then
        echo "file downloaded from $source_url meets conditions for import. Moving to $staging_dir to prepare for $file_type import."
        write_sha256sum
        mv -f "$download_dir/$target_filename" "$staging_dir"
        else
        echo "file downloaded from $source_url does not meet conditions for import. Deleting the downloaded file."
        rm -f "$download_dir/$target_filename"
        fi
    else
        echo "target file not found in download directory. checking $staging_dir for manually staged files."
    fi
    }

    import_file() {
    # Count the number of files with the $file_extension in the source dir
    count=$(find "$staging_dir" -maxdepth 1 -type f -name "*$file_extension" | wc -l)

    if [ "$count" -eq 1 ]; then
        file_to_import=$(find "$staging_dir" -maxdepth 1 -type f -name "*$file_extension")
        echo "Found $file_type file to import - '$file_to_import'."
        echo "Copying '$file_to_import' to '$target_dir/$target_filename'. This will replace any previously existing file at this destination."
        # Copy and rename the file
        cp -f "$file_to_import" "$target_dir/$target_filename"
        if [ $? -eq 0 ]; then
        # Copy was successful
        echo "File copied to '$target_dir/$target_filename'."
        
        # Touch the new copy to be _certain_ it's the latest file
        touch "$target_dir/$target_filename"
        
        # Delete the original file, so we don't reimport it again
        rm "$file_to_import"
        echo "staging file '$file_to_import' deleted."
        else
        echo "Error copying the file."
        exit 1
        fi
    elif [ "$count" -eq 0 ]; then
        echo "No $file_type file found in '$staging_dir'"
        echo "Skipping $file_type import process."
    else
        echo "Multiple $file_type files found in '$staging_dir'"
        echo "Put only one $app_name $file_type $file_extension file in '$staging_dir' to enable the import process."
        echo "Skipping $file_type import process."
    fi
    }

    main
---
# Source: factorio/templates/datadir-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-factorio-datadir
  labels:
    app: "my-release-factorio-1.2.7"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
# Source: factorio/templates/rcon-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-factorio-rcon
  labels:
    app: my-release-factorio
    chart: "factorio-1.2.7"
    release: "my-release"
    heritage: "Helm"
  annotations:
spec:
  type: LoadBalancer
  ports:
    - name: rcon
      port: 30100
      targetPort: 27015
      protocol: TCP
  selector:
    app: my-release-factorio
---
# Source: factorio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-factorio
  labels:
    app: my-release-factorio
    chart: "factorio-1.2.7"
    release: "my-release"
    heritage: "Helm"
spec:
  type: NodePort
  ports:
    - name: factorio
      targetPort: 34197
      port: 31497
      protocol: UDP
      nodePort: 31497
  selector:
    app: my-release-factorio
---
# Source: factorio/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-factorio
  labels:
    app: my-release-factorio
    chart: my-release-factorio
    release: "my-release"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-factorio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: my-release-factorio
    spec:
      hostNetwork: 
      dnsConfig:
        options:
          - name: ndots
            value: '1'
      initContainers:
        - name: volume-permissions-serversettingsconfig
          image: "factoriotools/factorio:latest"
          imagePullPolicy:  Always
          command:
            - /bin/bash
            - -ec
            - |
              mkdir -p /factorio/configs
              mkdir -p /factorio/config
              cp --verbose /deployed-configs/* /factorio/configs
              if [ -f "/rcon-pw/rconpw" ]; then
                cp --verbose /rcon-pw/rconpw /factorio/configs/rconpw
              fi
              if [ -f "/account/username" ]; then
                jq -M --rawfile username /account/username '.username=($username|gsub("[\\n\\t]"; ""))' /factorio/configs/server-settings.json > /tmp/server-settings.json && mv /tmp/server-settings.json /factorio/configs/server-settings.json
                if [ -f "/account/password" ]; then
                  jq -M --rawfile password /account/password '.password=($password|gsub("[\\n\\t]"; ""))' /factorio/configs/server-settings.json > /tmp/server-settings.json && mv /tmp/server-settings.json /factorio/configs/server-settings.json
                fi
                if [ -f "/account/token" ]; then
                  jq -M --rawfile token /account/token '.token=($token|gsub("[\\n\\t]"; ""))' /factorio/configs/server-settings.json > /tmp/server-settings.json && mv /tmp/server-settings.json /factorio/configs/server-settings.json
                fi
              fi
              if [ -f "/gamePassword/game_password" ]; then
                jq -M --rawfile game_password /gamePassword/game_password '.game_password=($game_password|gsub("[\\n\\t]"; ""))' /factorio/configs/server-settings.json > /tmp/server-settings.json && mv /tmp/server-settings.json /factorio/configs/server-settings.json
              fi
              #sleep 100
              chown -vR factorio:factorio /factorio
              chmod -vR 777 /factorio/configs
              ls -alth /factorio
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: datadir
              mountPath: /factorio
            - name: my-release-factorio-serversettingsconfig
              mountPath: /deployed-configs
            - name: rcon
              mountPath: /rcon-pw
        - name: import-factorio-save
          image: "factoriotools/factorio:latest"
          imagePullPolicy:  Always
          command:
            - /bin/bash
            - -ec
            - |
              bash /scripts/save-importer.sh
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: datadir
              mountPath: /factorio
            - name: my-release-factorio-save-importer-configmap
              mountPath: /scripts        
      containers:
      - name: my-release-factorio
        image: "factoriotools/factorio:latest"
        imagePullPolicy: Always
        securityContext:
          runAsUser: 0
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -ec
              - '/bin/ps aux | /bin/grep -v grep | /bin/grep factorio'
          periodSeconds: 10
          initialDelaySeconds: 5
          failureThreshold: 3
        ports:
        - name: factorio
          containerPort: 34197
          protocol: UDP
        - containerPort: 27015
          protocol: TCP
        resources:
          limits: {}
          requests:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
          - name: datadir
            mountPath: /factorio
        env:
        - name: UPDATE_MODS_ON_START
          value: "false"
        - name: INSTANCE_NAME
          value: "Factorio"
        - name: INSTANCE_DESC
          value: "Factorio running on Kubernetes"
        - name: SAVE_NAME
          value: "replaceMe"
        - name: GENERATE_NEW_SAVE
          value: "true"
        - name: LOAD_LATEST_SAVE
          value: "true"
        - name: CONFIG
          value: /factorio/configs
      volumes:
        - name: rcon
          secret:
            secretName: my-release-factorio-rcon
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-factorio-datadir 
        - name: my-release-factorio-serversettingsconfig
          configMap:
            name: my-release-factorio-serversettingsconfig
        - name: my-release-factorio-mod-downloader-configmap
          configMap:
            name: my-release-factorio-mod-downloader-configmap
        - name: my-release-factorio-save-importer-configmap
          configMap:
            name: my-release-factorio-save-importer-configmap
---
# Source: factorio/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-factorio-test-connection"
  labels:
    helm.sh/chart: factorio-1.2.7
    app.kubernetes.io/name: factorio
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: rcon
      image: outdead/rcon
      command:
        - /bin/sh
        - -ec
        - |
          RCONPW="$(cat /rconpw/rconpw)"
          ./rcon -a my-release-factorio-rcon:30100 -p $RCONPW -t rcon -T 180s /s Test
      volumeMounts:
        - mountPath: /rconpw
          name: rconpw
  restartPolicy: Never
  volumes:
    - name: rconpw
      secret:
        secretName: my-release-factorio-rcon
