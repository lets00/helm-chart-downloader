---
# Source: feedbacksystem/charts/checkerMongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-checker-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: checkerMongodb-13.18.5
secrets:
  - name: my-release-checker-mongodb
automountServiceAccountToken: true
---
# Source: feedbacksystem/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.1
automountServiceAccountToken: true
secrets:
  - name: my-release-minio
---
# Source: feedbacksystem/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.1
automountServiceAccountToken: true
secrets:
  - name: my-release-mysql
---
# Source: feedbacksystem/charts/runnerMysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-runner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: runnerMysql-9.16.1
automountServiceAccountToken: true
secrets:
  - name: my-release-runner-mysql
---
# Source: feedbacksystem/charts/checkerMongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-checker-mongodb
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: checkerMongodb-13.18.5
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "cm9vdA=="
  mongodb-passwords: "ZmJz"
---
# Source: feedbacksystem/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.1
type: Opaque
data:
  root-user: "YWRtaW4="
  root-password: "ZmJzLTEyMzQ1Njc4"
---
# Source: feedbacksystem/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.1
type: Opaque
data:
  mysql-root-password: "cm9vdA=="
  mysql-password: "ZmJz"
---
# Source: feedbacksystem/charts/playgroundSharePostgres/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-playground-share-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: playgroundSharePostgres-12.12.10
type: Opaque
data:
  postgres-password: "cm9vdA=="
  password: "ZmJz"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: feedbacksystem/charts/runnerMysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-runner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: runnerMysql-9.16.1
type: Opaque
data:
  mysql-root-password: "cm9vdA=="
  mysql-password: "ZmJz"
---
# Source: feedbacksystem/charts/runnerPlaygroundPostgres/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-runner-playground-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPlaygroundPostgres-12.12.10
type: Opaque
data:
  postgres-password: "cm9vdA=="
  password: "ZmJz"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: feedbacksystem/charts/runnerPostgres/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-runner-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPostgres-12.12.10
type: Opaque
data:
  postgres-password: "cm9vdA=="
  password: "ZmJz"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: feedbacksystem/templates/config.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: my-release-sql-checker
data:
  mongodbUri: bW9uZ29kYjovL2ZiczpmYnNAbXktcmVsZWFzZS1jaGVja2VyLW1vbmdvZGI6MjcwMTcvZmJz
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: my-release-core
data:
  jwtSecret: "MmVkYjg3OTNkOTg3Mzg5ZTE2MjY5MThlMGVjMWRiZWU="
  mysqlPassword: "ZmJz"
  classroomSecret: "MTIzNA=="
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: my-release-runner
data:
  mysqlPassword: cm9vdA==
  psqlPassword: cm9vdA==
  playgroundPsqlPassword: cm9vdA==
  playgroundSharePsqlPassword: cm9vdA==
  hmacSecret: ZmJz
---
# Source: feedbacksystem/charts/checkerMongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-checker-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: checkerMongodb-13.18.5
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    readiness_test='db.isMaster().ismaster || db.isMaster().secondary'
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        readiness_test='db.hello().isWritablePrimary || db.hello().secondary'
    fi
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "${readiness_test}" | grep 'true'
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: feedbacksystem/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-common
data:
  host: https://feedback.example.org
---
# Source: feedbacksystem/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-sql-checker
data:
  mongoDatabase: "fbs"
---
# Source: feedbacksystem/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-anti-brute-force
data:
  trusted_proxy_count: "0"
  interval: "600"
  max_attempts: "10"
  allow_list: ""
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-core
data:
  mysqlJdbclUri: "jdbc:mysql://my-release-mysql:3306"
  mysqlUser:  "fbs"
  minioUrl: "http://my-release-minio"
  classroomUrl: "https://bbb.feedback.example.org"
  sqlPlaygroundSharePublicHost: "127.0.0.1"
  sqlPlaygroundSharePublicPort: "4321"
  idSalt: "fbs-helm-chart-salt"
---
# Source: feedbacksystem/templates/mysql-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
    name: my-release-mysql-config
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    sql-mode=""
    skip-log-bin=true

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-runner
data:
  mysqlJdbclUri: jdbc:mysql://my-release-runner-mysql:3306?allowMultiQueries=true
  psqlJdbclUri: jdbc:postgresql://my-release-runner-postgres:5432/?allowMultiQueries=true
  playgroundPsqlJdbclUri: jdbc:postgresql://my-release-runner-playground-postgres:5432/?allowMultiQueries=true
  playgroundSharePsqlJdbclUri: jdbc:postgresql://my-release-playground-share-postgres:5432/?allowMultiQueries=true
  mysqlUsername: 'root'
  psqlUsername: 'postgres'
  playgroundPsqlUsername: 'postgres'
  playgroundSharePsqlUsername: 'postgres'
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-custom-runner-scripts
data:
  prepare-runner-images.sh: |
    #!/bin/sh
    set -e
    sleep 10 # ToDo: Wait for docker to be ready instead of fixed time
    docker pull "$BASH_DOCKER"
    docker pull "$RUNNER_SQL_CHECKER_IMAGE"
    ./fbs-runner.checker run scala:de.thm.ii.fbs.MainVerticle
---
# Source: feedbacksystem/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.1
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-core-config
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8G
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-core-upload-dir
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 16G
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-runner-docker-images
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 16G
---
# Source: feedbacksystem/charts/checkerMongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-checker-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: checkerMongodb-13.18.5
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/component: mongodb
---
# Source: feedbacksystem/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.1
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: minio
---
# Source: feedbacksystem/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/playgroundSharePostgres/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-playground-share-postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: playgroundSharePostgres-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/playgroundSharePostgres/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-playground-share-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: playgroundSharePostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerMysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-mysql-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: runnerMysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerMysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: runnerMysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerPlaygroundPostgres/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-playground-postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPlaygroundPostgres-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerPlaygroundPostgres/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-playground-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPlaygroundPostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerPostgres/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-postgres-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPostgres-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/charts/runnerPostgres/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/component: primary
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-core
  labels:
    app: my-release-core
spec:
  selector:
    app: my-release-core
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-runner
  labels:
    app: my-release-runner
spec:
  selector:
    app: my-release-runner
  ports:
    - name: https
      protocol: TCP
      port: 8081
      targetPort: 8081
---
# Source: feedbacksystem/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2023.12.23
        helm.sh/chart: minio-12.13.1
      annotations:
        checksum/credentials-secret: 2f6c46b0c2fc68cabefdcbbb6c3946be04db445c46fdd1bd0c215fb038657317
    spec:
      
      serviceAccountName: my-release-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: minio
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.12.23-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/minio/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: my-release-minio
---
# Source: feedbacksystem/templates/core.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-core
  labels:
    app: my-release-core
spec:
  selector:
    matchLabels:
      app: my-release-core
  template:
    metadata:
      labels:
        app: my-release-core
    spec:
      containers:
      - name: my-release-core
        image: docker.io/thmmniii/fbs-core:v1.16.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        env:
          - name: SERVER_HOST
            valueFrom:
              configMapKeyRef:
                name: my-release-common
                key: host
          - name: MYSQL_URI
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: mysqlJdbclUri
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: mysqlUser
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-core
                key: mysqlPassword
          - name: MINIO_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: minioUrl
          - name: MINIO_USER
            valueFrom:
              secretKeyRef:
                name: my-release-minio
                key: root-user
          - name: MINIO_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-minio
                key: root-password
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-core
                key: jwtSecret
          - name: CLASSROOM_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: classroomUrl
          - name: CLASSROOM_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-core
                key: classroomSecret
          - name: CLASSROOM_TLS_INSECURE
            value: "true"
          
          - name: MASTER_RUNNER_URL
            value: https://my-release-runner:8081
          - name: MASTER_RUNNER_TLS_INSECURE
            value: "true"
          
          
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                name: my-release-sql-checker
                key: mongodbUri
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                name: my-release-sql-checker
                key: mongoDatabase
          
          - name: SELF_URL
            value: https://my-release-core
          
          - name: TRUSTED_PROXIES
            valueFrom:
              configMapKeyRef:
                name: my-release-anti-brute-force
                key: trusted_proxy_count
          - name: BRUTEFORCE_INTERVAL
            valueFrom:
              configMapKeyRef:
                name: my-release-anti-brute-force
                key: interval
          - name: BRUTEFORCE_ATTEMPTS
            valueFrom:
              configMapKeyRef:
                name: my-release-anti-brute-force
                key: max_attempts
          - name: BRUTEFORCE_ALLOW_LIST
            valueFrom:
              configMapKeyRef:
                name: my-release-anti-brute-force
                key: allow_list
          - name: SQL_PLAYGROUND_SHARE_PUBLIC_HOST
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: sqlPlaygroundSharePublicHost
          - name: SQL_PLAYGROUND_SHARE_PUBLIC_PORT
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: sqlPlaygroundSharePublicPort
          - name: ID_SALT
            valueFrom:
              configMapKeyRef:
                name: my-release-core
                key: idSalt
        resources:
          requests:
            cpu: 0.1
            memory: 250Mi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: config
          mountPath: /usr/local/fbs-core.api/conf
        - name: upload-dir
          mountPath: /upload-dir
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: my-release-core-config
      - name: upload-dir
        persistentVolumeClaim:
          claimName: my-release-core-upload-dir
---
# Source: feedbacksystem/templates/runner.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-runner
  labels:
    app: my-release-runner
spec:
  selector:
    matchLabels:
      app: my-release-runner
  template:
    metadata:
      labels:
        app: my-release-runner
    spec:
      containers:
      - name: my-release-runner
        image: docker.io/thmmniii/fbs-runner:v1.16.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          name: https
        command: ["/custom/prepare-runner-images.sh"]
        env:
          - name: BASH_DOCKER
            value: thmmniii/fbs-runtime-bash:latest
          - name: RUNNER_SQL_CHECKER_IMAGE
            value: thmmniii/fbs-sql-checker:latest
          - name: HOST_TMP_DIR
            value: /fbs-tmp
          - name: INSIDE_DOCKER
            value: "true"
          - name: RESULT_SERVER_HOST
            value: my-release-core
          - name: MYSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: mysqlJdbclUri
          - name: MYSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: mysqlUsername
          - name: MYSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-runner
                key: mysqlPassword
          - name: PSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: psqlJdbclUri
          - name: PSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: psqlUsername
          - name: PSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-runner
                key: psqlPassword
          - name: SQL_PLAYGROUND_PSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: playgroundPsqlJdbclUri
          - name: SQL_PLAYGROUND_PSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: playgroundPsqlUsername
          - name: SQL_PLAYGROUND_PSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-runner
                key: playgroundPsqlPassword
          - name: SQL_PLAYGROUND_SHARE_PSQL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: playgroundSharePsqlJdbclUri
          - name: SQL_PLAYGROUND_SHARE_PSQL_SERVER_USERNAME
            valueFrom:
              configMapKeyRef:
                name: my-release-runner
                key: playgroundSharePsqlUsername
          - name: SQL_PLAYGROUND_SHARE_PSQL_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-runner
                key: playgroundSharePsqlPassword
          - name: HMAC_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-runner
                key: hmacSecret
          - name: RUNNER_SQL_CHECKER_DISABLE_NETWORK
            value: "true"
          
        resources:
          requests:
            cpu: 0.1
            memory: 250Mi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: shared-tmp
          mountPath: /dockertemp
        - name: docker-socket
          mountPath: /var/run
        - name: upload-dir
          mountPath: /upload-dir
        - name: custom-runner-scripts
          mountPath: /custom
      - name: my-release-runner-docker
        image: docker.io/library/docker:20.10.21-dind
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 0.1
            memory: 100Mi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: shared-tmp
          mountPath: /fbs-tmp
        - name: docker-socket
          mountPath: /var/run/
        - name: docker-images
          mountPath: /var/lib/docker
      volumes:
      - name: shared-tmp
        emptyDir: {}
      - name: docker-socket
        emptyDir: {}
      - name: upload-dir
        persistentVolumeClaim:
          claimName: my-release-core-upload-dir
      - name: docker-images
        persistentVolumeClaim:
          claimName: my-release-runner-docker-images
      - name: custom-runner-scripts
        configMap:
          name: my-release-custom-runner-scripts
          defaultMode: 0555
---
# Source: feedbacksystem/charts/checkerMongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-checker-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: checker-mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: checkerMongodb-13.18.5
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  serviceName: my-release-checker-mongodb
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: checker-mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: checker-mongodb
        app.kubernetes.io/version: 6.0.10
        helm.sh/chart: checkerMongodb-13.18.5
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-checker-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: checker-mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.10-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "fbs"
            - name: MONGODB_EXTRA_DATABASES
              value: "fbs"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: my-release-checker-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-checker-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-checker-mongodb-common-scripts
            defaultMode: 0550
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: feedbacksystem/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: mysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
  serviceName: my-release-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.0.35
        helm.sh/chart: mysql-9.16.1
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.35-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "fbs"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: "fbs"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mysql-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: feedbacksystem/charts/playgroundSharePostgres/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-playground-share-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: playground-share-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: playgroundSharePostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-playground-share-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: playground-share-postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-playground-share-postgres
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: playground-share-postgres
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: playgroundSharePostgres-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: playground-share-postgres
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "fbs"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-playground-share-postgres
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-playground-share-postgres
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "fbs"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: feedbacksystem/charts/runnerMysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-runner-mysql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-mysql
    app.kubernetes.io/version: 8.0.35
    helm.sh/chart: runnerMysql-9.16.1
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: runner-mysql
      app.kubernetes.io/component: primary
  serviceName: my-release-runner-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: runner-mysql
        app.kubernetes.io/version: 8.0.35
        helm.sh/chart: runnerMysql-9.16.1
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-runner-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: runner-mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.35-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "fbs"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-mysql
                  key: mysql-password
            - name: MYSQL_DATABASE
              value: "fbs"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mysql-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: runner-mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: feedbacksystem/charts/runnerPlaygroundPostgres/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-runner-playground-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-playground-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPlaygroundPostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-runner-playground-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: runner-playground-postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-runner-playground-postgres
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: runner-playground-postgres
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: runnerPlaygroundPostgres-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: runner-playground-postgres
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "fbs"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-playground-postgres
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-playground-postgres
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "fbs"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: feedbacksystem/charts/runnerPostgres/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-runner-postgres
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: runner-postgres
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: runnerPostgres-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-runner-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: runner-postgres
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-runner-postgres
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: runner-postgres
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: runnerPostgres-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: runner-postgres
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "fbs"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-postgres
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-runner-postgres
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "fbs"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "fbs" -d "dbname=fbs" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
