---
# Source: drogue-cloud-examples/templates/grafana/service-account-grafana.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
---
# Source: drogue-cloud-examples/templates/grafana/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: grafana
type: Opaque
stringData:
  admin.password: admin123456
---
# Source: drogue-cloud-examples/templates/timescaledb/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: timescaledb-secret
type: Opaque
data:
  read.username: cmVhZGVy
  read.password: cmVhZGVyMTIzNA==
  admin.username: YWRtaW4=
  admin.password: YWRtaW4xMjM0NTY=
---
# Source: drogue-cloud-examples/templates/grafana/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-datasources
data:
  iot.yaml: |
    apiVersion: 1

    datasources:
      - name: TimescaleDB
        type: postgres
        access: proxy
        database: $TIMESCALE_DATABASE
        url: timescaledb:5432
        user: $TIMESCALE_USERNAME
        secureJsonData:
          password: $TIMESCALE_PASSWORD
        jsonData:
          sslmode: "disable"
          timescaledb: true
          postgresVersion: 1200
        editable: false
---
# Source: drogue-cloud-examples/templates/grafana/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-dashboard-providers
data:
  local.yaml: |
    apiVersion: 1

    providers:
      - name: configmap
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards
---
# Source: drogue-cloud-examples/templates/grafana/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-dashboards
  labels:
    grafana: dashboards
data:
  
  temperatures.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 2,
      "iteration": 1635961302363,
      "links": [],
      "panels": [
        {
          "datasource": "TimescaleDB",
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "stepAfter",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": 300000,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "celsius"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 21,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "interval": "1s",
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "format": "time_series",
              "group": [
                {
                  "params": [
                    "$__interval",
                    "none"
                  ],
                  "type": "time"
                }
              ],
              "hide": false,
              "metricColumn": "device_id",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT $__timeGroupAlias(\"time\",$__interval), device_id as metric, avg(avg(temperature)) OVER w as temp\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\") AND\n  device_id = ANY (ARRAY[$device_id]::varchar[])\nGROUP BY 1, device_id\nWINDOW w as (PARTITION BY device_id ORDER BY $__timeGroup(\"time\",$__interval) RANGE '5 minute'::INTERVAL PRECEDING)\nORDER BY 1, device_id",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "temperature"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "avg"
                    ],
                    "type": "aggregate"
                  },
                  {
                    "params": [
                      "temperature"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamptz",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                },
                {
                  "datatype": "varchar",
                  "name": "",
                  "params": [
                    "device_id",
                    "IN",
                    "($device_id)"
                  ],
                  "type": "expression"
                }
              ]
            }
          ],
          "title": "Temperature",
          "type": "timeseries"
        },
        {
          "datasource": "TimescaleDB",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 60,
              "min": 0,
              "noValue": "n/a",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "light-blue",
                    "value": null
                  },
                  {
                    "color": "semi-dark-green",
                    "value": 10
                  },
                  {
                    "color": "dark-yellow",
                    "value": 20
                  },
                  {
                    "color": "semi-dark-orange",
                    "value": 30
                  },
                  {
                    "color": "semi-dark-red",
                    "value": 40
                  },
                  {
                    "color": "semi-dark-purple",
                    "value": 50
                  }
                ]
              },
              "unit": "celsius"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 3,
            "x": 21,
            "y": 0
          },
          "id": 6,
          "options": {
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true,
            "text": {}
          },
          "pluginVersion": "8.1.1",
          "targets": [
            {
              "format": "time_series",
              "group": [
                {
                  "params": [
                    "$__interval",
                    "none"
                  ],
                  "type": "time"
                }
              ],
              "metricColumn": "none",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT\n  $__timeGroupAlias(\"time\",$__interval),\n  max(temperature) AS \"temperature\"\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\") AND\n  device_id = ANY (ARRAY[$device_id]::varchar[])\nGROUP BY 1\nORDER BY 1",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "temperature"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "max"
                    ],
                    "type": "aggregate"
                  },
                  {
                    "params": [
                      "temperature"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "timeFrom": "1m",
          "title": "Temperature",
          "type": "gauge"
        },
        {
          "datasource": "TimescaleDB",
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "stepAfter",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": 300000,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "humidity"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 21,
            "x": 0,
            "y": 8
          },
          "id": 3,
          "interval": "1s",
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "format": "time_series",
              "group": [
                {
                  "params": [
                    "$__interval",
                    "none"
                  ],
                  "type": "time"
                }
              ],
              "hide": false,
              "metricColumn": "device_id",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT $__timeGroupAlias(\"time\",$__interval), device_id as metric, avg(avg(humidity)) OVER w as hum\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\") AND\n  device_id = ANY (ARRAY[$device_id]::varchar[])\nGROUP BY time, device_id\nWINDOW w as (PARTITION BY device_id ORDER BY time RANGE '5 minute'::INTERVAL PRECEDING)\nORDER BY time, device_id",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "humidity"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "avg"
                    ],
                    "type": "aggregate"
                  },
                  {
                    "params": [
                      "humidity"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamptz",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                },
                {
                  "datatype": "varchar",
                  "name": "",
                  "params": [
                    "device_id",
                    "IN",
                    "($device_id)"
                  ],
                  "type": "expression"
                }
              ]
            }
          ],
          "title": "Humidity",
          "type": "timeseries"
        },
        {
          "datasource": "TimescaleDB",
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "max": 100,
              "min": 0,
              "noValue": "n/a",
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "text",
                    "value": null
                  }
                ]
              },
              "unit": "humidity"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 3,
            "x": 21,
            "y": 8
          },
          "id": 7,
          "options": {
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true,
            "text": {}
          },
          "pluginVersion": "8.1.1",
          "targets": [
            {
              "format": "time_series",
              "group": [
                {
                  "params": [
                    "$__interval",
                    "none"
                  ],
                  "type": "time"
                }
              ],
              "metricColumn": "none",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT\n  $__timeGroupAlias(\"time\",$__interval),\n  max(humidity) AS \"humidity\"\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\") AND\n  device_id = ANY (ARRAY[$device_id]::varchar[])\nGROUP BY 1\nORDER BY 1",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "humidity"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "max"
                    ],
                    "type": "aggregate"
                  },
                  {
                    "params": [
                      "humidity"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "timeFrom": "1m",
          "title": "Humidity",
          "type": "gauge"
        },
        {
          "datasource": "TimescaleDB",
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "stepAfter",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": 300000,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 12,
            "w": 7,
            "x": 0,
            "y": 16
          },
          "id": 8,
          "interval": "1s",
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "format": "time_series",
              "group": [
                {
                  "params": [
                    "$__interval",
                    "none"
                  ],
                  "type": "time"
                }
              ],
              "hide": false,
              "metricColumn": "device_id",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT $__timeGroupAlias(\"time\",$__interval), device_id as metric, avg(avg(battery)) OVER w as batt\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\") AND\n  device_id = ANY (ARRAY[$device_id]::varchar[])\nGROUP BY time, device_id\nWINDOW w as (PARTITION BY device_id ORDER BY time RANGE '60 minute'::INTERVAL PRECEDING)\nORDER BY time, device_id",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "battery"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "avg"
                    ],
                    "type": "aggregate"
                  },
                  {
                    "params": [
                      "battery"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamptz",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                },
                {
                  "datatype": "varchar",
                  "name": "",
                  "params": [
                    "device_id",
                    "IN",
                    "($device_id)"
                  ],
                  "type": "expression"
                }
              ]
            }
          ],
          "title": "Battery",
          "type": "timeseries"
        },
        {
          "datasource": "TimescaleDB",
          "description": "",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "left",
                "displayMode": "auto"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "dark-red",
                    "value": null
                  },
                  {
                    "color": "#EAB839",
                    "value": 5
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": [
              {
                "matcher": {
                  "id": "byName",
                  "options": "Device"
                },
                "properties": [
                  {
                    "id": "custom.align",
                    "value": "left"
                  },
                  {
                    "id": "custom.width",
                    "value": 120
                  }
                ]
              },
              {
                "matcher": {
                  "id": "byName",
                  "options": "Battery Level"
                },
                "properties": [
                  {
                    "id": "custom.align",
                    "value": "right"
                  },
                  {
                    "id": "custom.displayMode",
                    "value": "color-background-solid"
                  }
                ]
              }
            ]
          },
          "gridPos": {
            "h": 12,
            "w": 3,
            "x": 7,
            "y": 16
          },
          "id": 4,
          "interval": "1m",
          "options": {
            "showHeader": true,
            "sortBy": []
          },
          "pluginVersion": "8.1.1",
          "targets": [
            {
              "format": "table",
              "group": [
                {
                  "params": [
                    "device_id"
                  ],
                  "type": "column"
                }
              ],
              "hide": false,
              "metricColumn": "device_id",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT device_id as \"Device\", min(battery) as \"Battery Level\" FROM temperatures WHERE battery < 10 AND $__timeFilter(time) GROUP BY device_id ORDER BY 1,2;",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "battery"
                    ],
                    "type": "column"
                  },
                  {
                    "params": [
                      "battery"
                    ],
                    "type": "alias"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamptz",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                },
                {
                  "datatype": "float8",
                  "name": "",
                  "params": [
                    "battery",
                    "<",
                    "10"
                  ],
                  "type": "expression"
                }
              ]
            }
          ],
          "timeFrom": "1m",
          "title": "Battery",
          "type": "table"
        },
        {
          "circleMaxSize": "10",
          "circleMinSize": 2,
          "colors": [
            "#C0D8FF",
            "#C8F2C2",
            "#56A64B",
            "#E0B400",
            "#FA6400",
            "#C4162A"
          ],
          "datasource": "TimescaleDB",
          "decimals": 0,
          "description": "",
          "esMetric": "Count",
          "gridPos": {
            "h": 12,
            "w": 14,
            "x": 10,
            "y": 16
          },
          "hideEmpty": false,
          "hideTimeOverride": true,
          "hideZero": false,
          "id": 10,
          "initialZoom": "2",
          "locationData": "table",
          "mapCenter": "custom",
          "mapCenterLatitude": "20",
          "mapCenterLongitude": "0",
          "maxDataPoints": 1,
          "mouseWheelZoom": true,
          "showLegend": true,
          "stickyLabels": false,
          "tableQueryOptions": {
            "geohashField": "geohash",
            "labelField": "device_id",
            "latitudeField": "lat",
            "longitudeField": "lon",
            "metricField": "temperature",
            "queryType": "coordinates"
          },
          "targets": [
            {
              "format": "table",
              "group": [],
              "metricColumn": "device_id",
              "queryType": "randomWalk",
              "rawQuery": true,
              "rawSql": "SELECT\n  \"time\" AS \"time\",\n  device_id,\n  temperature,\n  lat,\n  lon\nFROM temperatures\nWHERE\n  $__timeFilter(\"time\")\n  AND lat IS NOT NULL\n  AND lon IS NOT NULL\nORDER BY 1,2",
              "refId": "A",
              "select": [
                [
                  {
                    "params": [
                      "temperature"
                    ],
                    "type": "column"
                  }
                ],
                [
                  {
                    "params": [
                      "lat"
                    ],
                    "type": "column"
                  }
                ],
                [
                  {
                    "params": [
                      "lon"
                    ],
                    "type": "column"
                  }
                ]
              ],
              "table": "temperatures",
              "timeColumn": "\"time\"",
              "timeColumnType": "timestamp",
              "where": [
                {
                  "name": "$__timeFilter",
                  "params": [],
                  "type": "macro"
                }
              ]
            }
          ],
          "thresholds": "0,10,20,30,40",
          "timeFrom": "1m",
          "type": "grafana-worldmap-panel",
          "unitPlural": "°C",
          "unitSingle": "",
          "unitSingular": "°C",
          "valueName": "current"
        }
      ],
      "refresh": "10s",
      "schemaVersion": 30,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "allValue": null,
            "current": {
              "selected": true,
              "text": [
                "All"
              ],
              "value": [
                "$__all"
              ]
            },
            "datasource": "TimescaleDB",
            "definition": "select distinct device_id from temperatures",
            "description": null,
            "error": null,
            "hide": 0,
            "includeAll": true,
            "label": "Device ID",
            "multi": true,
            "name": "device_id",
            "options": [],
            "query": "select distinct device_id from temperatures",
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-24h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Temperatures Dashboard",
      "uid": "F96MiCMnz",
      "version": 1
    }
---
# Source: drogue-cloud-examples/templates/timescaledb/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: timescaledb-config
data:
  databaseName: example
---
# Source: drogue-cloud-examples/templates/timescaledb/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: timescaledb-initdb
  labels:
    app: timescaledb
data:
  
  100_init.sql: |
    CREATE TABLE temperatures (
        time TIMESTAMP WITH TIME ZONE NOT NULL,
    
        device_id VARCHAR(64) NOT NULL,
    
        temperature DOUBLE PRECISION NOT NULL,
        humidity DOUBLE PRECISION,
        battery DOUBLE PRECISION,
    
        lon NUMERIC,
        lat NUMERIC
    );
    
    SELECT create_hypertable('temperatures', 'time', 'device_id', 2);
---
# Source: drogue-cloud-examples/templates/grafana/persistent-volume-claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
 name: grafana-pvc
 labels:
   app: grafana
spec:
 accessModes:
 - ReadWriteOnce
 resources:
   requests:
     storage: 1G
---
# Source: drogue-cloud-examples/templates/grafana/role-grafana.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role

metadata:
  name: grafana

rules:
  - apiGroups: [ "" ]
    resources: [ "configmaps" ]
    verbs: [ "get", "list" ]
---
# Source: drogue-cloud-examples/templates/grafana/role-binding-grafana.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana

subjects:
  - kind: ServiceAccount
    name: grafana

roleRef:
  kind: Role
  name: grafana
  apiGroup: rbac.authorization.k8s.io
---
# Source: drogue-cloud-examples/templates/grafana/service.yaml
kind: Service
apiVersion: v1
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  ports:
    - name: web
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: grafana
---
# Source: drogue-cloud-examples/templates/pusher/service.yaml
kind: Service
apiVersion: v1
metadata:
  labels:
    app: timescaledb-pusher
  name: timescaledb-pusher
spec:
  ports:
    - name: web
      port: 80
      targetPort: web
      protocol: TCP
  selector:
    app: timescaledb-pusher
---
# Source: drogue-cloud-examples/templates/timescaledb/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: timescaledb
  labels:
    app: timescaledb
spec:
  selector:
    app: timescaledb

  type: ClusterIP

  ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
---
# Source: drogue-cloud-examples/templates/grafana/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: grafana
  labels:
    app: grafana
    app.kubernetes.io/part-of: example-app
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"StatefulSet","name":"timescaledb"}]'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        checksum/config: 783020ec29d54e0b1f10c8463a32685f915d8de8e6a1e052fe870a584a571630
        checksum/config-timescale: 282c741315a25e27268a5f827f43e0da571b18ea0b3e6224741fa22a95937be6
        checksum/secret-timescale: bb36db7a8d2b6ee79fcba40b8d5468b839332016412a694e3d194f623766149a
    spec:
      serviceAccountName: grafana
      

      initContainers:
        - name: collect-dashboards
          image: ghcr.io/ctron/kubectl:1.25
          imagePullPolicy: IfNotPresent
          

          command:
            - bash
            - -c
            - |
              cd /var/lib/grafana/dashboards
              readarray -d $'\0' -t a < <(kubectl get cm -l grafana=dashboards -o json | jq -cj '.items[] | . as $cm | .data | to_entries[] | [ ($cm.metadata.name + "-" + .key), .value ][]+"\u0000"') ; count=0; while [ $count -lt ${#a[@]} ]; do echo "${a[$((count + 1))]}" > ${a[$count]}; count=$(( $count + 2)); done
          volumeMounts:
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-dashboards
      containers:
        - name: grafana
          image: docker.io/grafana/grafana:9.2.4
          imagePullPolicy: IfNotPresent
          

          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: admin.password
            - name: GF_ANALYTICS_REPORTING_ENABLED
              value: "false"

            - name: GF_LOG_LEVEL
              value: "debug"

            - name: GF_SERVER_ROOT_URL
              value: https://grafana.my-cluster.dns

            - name: GF_INSTALL_PLUGINS
              value: grafana-worldmap-panel

            - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
              value: /var/lib/grafana/dashboards/grafana-dashboards-temperatures.json

            - name: TIMESCALE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: timescaledb-secret
                  key: read.username
            - name: TIMESCALE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: timescaledb-secret
                  key: read.password
            - name: TIMESCALE_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: timescaledb-config
                  key: databaseName
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            timeoutSeconds: 1
          ports:
            - containerPort: 3000
              name: web
              protocol: TCP
          resources:
            limits:
              memory: 1Gi
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
            - mountPath: /etc/grafana/provisioning/dashboards
              name: grafana-dashboard-providers
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-dashboards

      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboard-providers
          configMap:
            name: grafana-dashboard-providers
        - name: grafana-dashboards
          emptyDir: {}
---
# Source: drogue-cloud-examples/templates/pusher/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: timescaledb-pusher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timescaledb-pusher
  template:
    metadata:
      labels:
        app: timescaledb-pusher
    spec:
      

      containers:
        - name: timescaledb-pusher
          image: ghcr.io/drogue-iot/postgresql-pusher:0.2.1
          imagePullPolicy: IfNotPresent
          

          ports:
          - containerPort: 8080
            name: web
            protocol: TCP
          env:
            - name: RUST_LOG
              value: debug
            - name: RUST_BACKTRACE
              value: "1"

            - name: ACTIX__BIND_ADDR
              value: 0.0.0.0:8080

            - name: POSTGRESQL__CONNECTION__HOST
              value: timescaledb
            - name: POSTGRESQL__CONNECTION__DBNAME
              value: example
            - name: POSTGRESQL__CONNECTION__USER
              value: admin
            - name: POSTGRESQL__CONNECTION__PASSWORD
              value: admin123456

            - name: POSTGRESQL__TIME_COLUMN
              value: time

            - name: POSTGRESQL__TABLE
              value: temperatures

            - name: FIELD_TEMPERATURE
              value: $.temp
            - name: TYPE_FIELD_TEMPERATURE
              value: float
            - name: FIELD_BATTERY
              value: $.batt
            - name: TYPE_FIELD_BATTERY
              value: float
            - name: FIELD_HUMIDITY
              value: $.hum
            - name: TYPE_FIELD_HUMIDITY
              value: float
            - name: TAG_DEVICE_ID
              value: $.device

            - name: FIELD_LAT
              value: $.geoloc.lat
            - name: TYPE_FIELD_LAT
              value: float
            - name: FIELD_LON
              value: $.geoloc.lon
            - name: TYPE_FIELD_LON
              value: float
---
# Source: drogue-cloud-examples/templates/source/drogue/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: drogue-event-source
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drogue-event-source
  template:
    metadata:
      labels:
        app: drogue-event-source
    spec:
      

      containers:
        - name: drogue-event-source
          image: ghcr.io/drogue-iot/drogue-event-source:0.2.1
          imagePullPolicy: IfNotPresent
          

          env:
            - name: RUST_LOG
              value: debug
            - name: RUST_BACKTRACE
              value: "1"

            - name: K_SINK
              value: http://timescaledb-pusher:8080
            - name: MODE
              value: ws
            - name: DROGUE_ENDPOINT
              value: wss://ws-integration.sandbox.drogue.cloud
            - name: DROGUE_APP
              value: drogue-public-temperature
            - name: DROGUE_USER
              value: 
            - name: DROGUE_TOKEN
              value:
---
# Source: drogue-cloud-examples/templates/timescaledb/statefulset.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: timescaledb
  labels:
    app: timescaledb
    app.kubernetes.io/part-of: example-app
spec:
  replicas: 1
  serviceName: timescaledb
  selector:
    matchLabels:
      app: timescaledb
  template:
    metadata:
      labels:
        app: timescaledb
    spec:
      

      initContainers:
        # we need this to gather the existing init script from timescale db and ours
        # into a complete set up of init scripts
        - name: gather-init-scripts
          image: docker.io/timescale/timescaledb-ha:pg14-ts2.6-latest
          imagePullPolicy: IfNotPresent
          

          command:
            - bash
            - -c
            - |
              cp -v /docker-entrypoint-initdb.d/* /var/lib/docker-entrypoint-initdb.d
              cp -v /etc/docker-entrypoint-initdb.d/* /var/lib/docker-entrypoint-initdb.d
          volumeMounts:
            - mountPath: /etc/docker-entrypoint-initdb.d
              name: initdb-config
            - mountPath: /var/lib/docker-entrypoint-initdb.d
              name: initdb
              readOnly: false

      containers:
        - name: timescaledb
          image: docker.io/timescale/timescaledb-ha:pg14-ts2.6-latest
          imagePullPolicy: IfNotPresent
          

          env:
            - name: POSTGRES_USER
              value: admin
            - name: POSTGRES_PASSWORD
              value: admin123456
            - name: POSTGRES_DB
              value: example
            - name: PGDATA
              value: /var/lib/storage/pgdata
          volumeMounts:
            - mountPath: /var/lib/storage
              name: storage
              subPath: pgdata
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb
            - mountPath: /var/run/postgresql
              name: run-postgres
      volumes:
        - name: initdb
          emptyDir: {}
        - name: run-postgres
          emptyDir: {}
        - name: initdb-config
          configMap:
            name: timescaledb-initdb

  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
---
# Source: drogue-cloud-examples/templates/grafana/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: grafana
  annotations:
    
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: grafana.my-cluster.dns
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  name: web
---
# Source: drogue-cloud-examples/templates/timescaledb/post-install.yaml
kind: Job
apiVersion: batch/v1
metadata:
  name: post-install-timescaledb
  labels:
    
    app.kubernetes.io/name: post-install-timescaledb
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.11.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: drogue-iot
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 1000
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600

  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: post-install-timescaledb
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "0.11.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: drogue-iot
    spec:
      

      restartPolicy: OnFailure
      containers:
        - name: migrate
          image: docker.io/bitnami/postgresql:14
          

          env:
            - name:  PGUSER
              valueFrom:
                secretKeyRef:
                  name: timescaledb-secret
                  key: admin.username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: timescaledb-secret
                  key: admin.password
            - name:  PGDATABASE
              valueFrom:
                configMapKeyRef:
                  name: timescaledb-config
                  key: databaseName
          command:
            - psql
            - -h
            - timescaledb
            - -c
            - |
              DO $$$$
              BEGIN
              CREATE USER reader;
              EXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;
              END
              $$$$;
              ALTER USER reader WITH PASSWORD 'reader1234';
              GRANT SELECT ON ALL TABLES IN SCHEMA public TO reader;
