---
# Source: armiarma/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-armiarma
  labels:
    helm.sh/chart: armiarma-0.1.1
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: default
---
# Source: armiarma/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.23
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: armiarma/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-armiarma-env
  labels:
    helm.sh/chart: armiarma-0.1.1
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ARMIARMA_PORT: MzEwMDA=
  ARMIARMA_METRICS_PORT: OTA4MA==
  ARMIARMA_SSE_PORT: OTA5OQ==
  ARMIARMA_BACKUP_INTERVAL: MTJo
  ARMIARMA_FORK_DIGEST: IjB4NGEyNmM1OGIi
  ARMIARMA_GOSSIP_TOPICS: YmVhY29uX2Jsb2Nr
  ARMIARMA_LOG_LEVEL: aW5mbw==
  ARMIARMA_PSQL: cG9zdGdyZXM6Ly9wb3N0Z3Jlczpwb3N0Z3Jlc0BteS1yZWxlYXNlLWFybWlhcm1hLXBvc3RncmVzcWw6NTQzMi9hcm1pYXJtYWRi
  ARMIARMA_SUBNETS: YWxs
---
# Source: armiarma/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.23
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: armiarma/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.23
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: armiarma/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-armiarma-headless
  labels:
    helm.sh/chart: armiarma-0.1.1
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 9080
      targetPort: metrics
      protocol: TCP
      name: metrics
    - port: 9099
      targetPort: sse
      protocol: TCP
      name: sse
  selector:
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
---
# Source: armiarma/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-armiarma
  labels:
    helm.sh/chart: armiarma-0.1.1
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9080
      targetPort: metrics
      protocol: TCP
      name: metrics
    - port: 9099
      targetPort: sse
      protocol: TCP
      name: sse
  selector:
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
---
# Source: armiarma/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.2.23
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.2.23
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14-debian-11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "armiarmadb"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=armiarmadb" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=armiarmadb" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: armiarma/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-armiarma
  labels:
    helm.sh/chart: armiarma-0.1.1
    app.kubernetes.io/name: armiarma
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: armiarma
      app.kubernetes.io/instance: my-release
  serviceName: my-release-armiarma-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: armiarma
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/secrets: 6a3c3f679f12d8c3d775d52c5d14c81645af68857f9081fc0d6ce96acd89bd93
    spec:
      serviceAccountName: my-release-armiarma
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
      containers:
        - name: armiarma
          image: "ethpandaops/armiarma:master"
          imagePullPolicy: IfNotPresent
          args:
            - eth2
            - --persist-connevents=false
            - --persist-msgs=false
          securityContext:
            {}
          volumeMounts:
            - name: config
              mountPath: "/config"
          ports:
            - name: metrics
              containerPort: 9080
              protocol: TCP
            - name: sse
              containerPort: 9099
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 120
            tcpSocket:
              port: metrics
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: metrics
          resources:
            {}
          envFrom:
            - secretRef:
                name: my-release-armiarma-env
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      topologySpreadConstraints:
        []
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          emptyDir: {}
