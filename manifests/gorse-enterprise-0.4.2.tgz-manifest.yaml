---
# Source: gorse-enterprise/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: gorse-enterprise/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "NXZ0Z0hUY1FPVQ=="
  mongodb-passwords: "YWpuSHVhZ0haQw=="
---
# Source: gorse-enterprise/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-gorse-enterprise
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  dashboard-username: "Z29yc2U="
  dashboard-password: "TndvMEpvU0kxSA=="
  api-key: "aHBxQlZYcEFrazh2WEFoTHpEU2ROZU9wQ0VZcDRrZDk="
---
# Source: gorse-enterprise/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: gorse-enterprise/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-gorse-enterprise-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  config.toml: |
    [database]

    # The database for caching, support Redis, MySQL, Postgres and MongoDB:
    #   redis://<user>:<password>@<host>:<port>/<db_number>
    #   rediss://<user>:<password>@<host>:<port>/<db_number>
    #   redis+cluster://<user>:<password>@<host1>:<port1>,<host2>:<port2>,...,<hostN>:<portN>
    #   postgres://bob:secret@1.2.3.4:5432/mydb?sslmode=verify-full
    #   postgresql://bob:secret@1.2.3.4:5432/mydb?sslmode=verify-full
    #   mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
    #   mongodb+srv://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
    cache_store = "redis://localhost:6379/0"

    # The database for persist data, support MySQL, Postgres, ClickHouse and MongoDB:
    #   mysql://[username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN]
    #   postgres://bob:secret@1.2.3.4:5432/mydb?sslmode=verify-full
    #   postgresql://bob:secret@1.2.3.4:5432/mydb?sslmode=verify-full
    #   clickhouse://user:password@host[:port]/database?param1=value1&...&paramN=valueN
    #   chhttp://user:password@host[:port]/database?param1=value1&...&paramN=valueN
    #   chhttps://user:password@host[:port]/database?param1=value1&...&paramN=valueN
    #   mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
    #   mongodb+srv://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
    data_store = "mysql://gorse:gorse_pass@tcp(localhost:3306)/gorse"

    # The naming prefix for tables (collections, keys) in databases.
    table_prefix = ""

    [master]

    # GRPC port of the master node. The default value is 8086.
    port = 8086

    # gRPC host of the master node. The default values is "0.0.0.0".
    host = "0.0.0.0"

    # HTTP port of the master node. The default values is 8088.
    http_port = 8088

    # HTTP host of the master node. The default values is "0.0.0.0".
    http_host = "0.0.0.0"

    # AllowedDomains is a list of allowed values for Http Origin.
    # The list may contain the special wildcard string ".*" ; all is allowed
    # If empty all are allowed.
    http_cors_domains = []

    # AllowedMethods is either empty or has a list of http methods names. Checking is case-insensitive.
    http_cors_methods = []

    # Number of working jobs in the master node. The default value is 1.
    n_jobs = 1

    # Meta information timeout. The default value is 10s.
    meta_timeout = "10s"

    # Username for the master node dashboard.
    dashboard_user_name = ""

    # Password for the master node dashboard.
    dashboard_password = ""

    # Secret key for admin APIs (SSL required).
    admin_api_key = ""

    [server]

    # Default number of returned items. The default value is 10.
    default_n = 10

    # Secret key for RESTful APIs (SSL required).
    api_key = ""

    # Clock error in the cluster. The default value is 5s.
    clock_error = "5s"

    # Insert new users while inserting feedback. The default value is true.
    auto_insert_user = true

    # Insert new items while inserting feedback. The default value is true.
    auto_insert_item = true

    # Server-side cache expire time. The default value is 10s.
    cache_expire = "10s"

    [recommend]

    # The cache size for recommended/popular/latest items. The default value is 10.
    cache_size = 10

    # Recommended cache expire time. The default value is 72h.
    cache_expire = "72h"

    [recommend.data_source]

    # The feedback types for positive events.
    positive_feedback_types = []

    # The feedback types for read events.
    read_feedback_types = []

    # The time-to-live (days) of positive feedback, 0 means disabled. The default value is 0.
    positive_feedback_ttl = 0

    # The time-to-live (days) of items, 0 means disabled. The default value is 0.
    item_ttl = 0

    [recommend.popular]

    # The time window of popular items. The default values is 4320h.
    popular_window = "4320h"

    [recommend.user_neighbors]

    # The type of neighbors for users. There are three types:
    #   similar: Neighbors are found by number of common labels.
    #   related: Neighbors are found by number of common liked items.
    #   auto: If a user have labels, neighbors are found by number of common labels.
    #         If this user have no labels, neighbors are found by number of common liked items.
    # The default value is "auto".
    neighbor_type = "similar"

    # Enable approximate user neighbor searching using vector index. The default value is true.
    enable_index = true

    # Minimal recall for approximate user neighbor searching. The default value is 0.8.
    index_recall = 0.8

    # Maximal number of fit epochs for approximate user neighbor searching vector index. The default value is 3.
    index_fit_epoch = 3

    [recommend.item_neighbors]

    # The type of neighbors for items. There are three types:
    #   similar: Neighbors are found by number of common labels.
    #   related: Neighbors are found by number of common users.
    #   auto: If a item have labels, neighbors are found by number of common labels.
    #         If this item have no labels, neighbors are found by number of common users.
    # The default value is "auto".
    neighbor_type = "similar"

    # Enable approximate item neighbor searching using vector index. The default value is true.
    enable_index = true

    # Minimal recall for approximate item neighbor searching. The default value is 0.8.
    index_recall = 0.8

    # Maximal number of fit epochs for approximate item neighbor searching vector index. The default value is 3.
    index_fit_epoch = 3

    [recommend.collaborative]

    # Enable approximate collaborative filtering recommend using vector index. The default value is true.
    enable_index = true

    # Minimal recall for approximate collaborative filtering recommend. The default value is 0.9.
    index_recall = 0.9

    # Maximal number of fit epochs for approximate collaborative filtering recommend vector index. The default value is 3.
    index_fit_epoch = 3

    # The time period for model fitting. The default value is "60m".
    model_fit_period = "60m"

    # The time period for model searching. The default value is "360m".
    model_search_period = "360m"

    # The number of epochs for model searching. The default value is 100.
    model_search_epoch = 100

    # The number of trials for model searching. The default value is 10.
    model_search_trials = 10

    # Enable searching models of different sizes, which consume more memory. The default value is false.
    enable_model_size_search = false

    [recommend.replacement]

    # Replace historical items back to recommendations. The default value is false.
    enable_replacement = false

    # Decay the weights of replaced items from positive feedbacks. The default value is 0.8.
    positive_replacement_decay = 0.8

    # Decay the weights of replaced items from read feedbacks. The default value is 0.6.
    read_replacement_decay = 0.6

    [recommend.offline]

    # The time period to check recommendation for users. The default values is 1m.
    check_recommend_period = "1m"

    # The time period to refresh recommendation for inactive users. The default values is 120h.
    refresh_recommend_period = "24h"

    # Enable latest recommendation during offline recommendation. The default value is false.
    enable_latest_recommend = true

    # Enable popular recommendation during offline recommendation. The default value is false.
    enable_popular_recommend = false

    # Enable user-based similarity recommendation during offline recommendation. The default value is false.
    enable_user_based_recommend = true

    # Enable item-based similarity recommendation during offline recommendation. The default value is false.
    enable_item_based_recommend = false

    # Enable collaborative filtering recommendation during offline recommendation. The default value is true.
    enable_collaborative_recommend = true

    # Enable click-though rate prediction during offline recommendation. Otherwise, results from multi-way recommendation
    # would be merged randomly. The default value is false.
    enable_click_through_prediction = true

    # The explore recommendation method is used to inject popular items or latest items into recommended result:
    #   popular: Recommend popular items to cold-start users.
    #   latest: Recommend latest items to cold-start users.
    # The default values is { popular = 0.0, latest = 0.0 }.
    explore_recommend = { popular = 0.1, latest = 0.2 }

    [recommend.online]

    # The fallback recommendation method is used when cached recommendation drained out:
    #   item_based: Recommend similar items to cold-start users.
    #   popular: Recommend popular items to cold-start users.
    #   latest: Recommend latest items to cold-start users.
    # Recommenders are used in order. The default values is ["latest"].
    fallback_recommend = []

    # The number of feedback used in fallback item-based similar recommendation. The default values is 10.
    num_feedback_fallback_item_based = 10

    [tracing]

    # Enable tracing for REST APIs. The default value is false.
    enable_tracing = false

    # The type of tracing exporters should be one of "jaeger", "zipkin", "otlp" and "otlphttp". The default value is "jaeger".
    exporter = "jaeger"

    # The endpoint of tracing collector.
    collector_endpoint = "http://localhost:14268/api/traces"

    # The type of tracing sampler should be one of "always", "never" and "ratio". The default value is "always".
    sampler = "always"

    # The ratio of ratio based sampler. The default value is 1.
    ratio = 1
---
# Source: gorse-enterprise/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: gorse-enterprise/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: gorse-enterprise/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gorse-enterprise-master-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
    - name: grpc
      port: 8086
      protocol: TCP
      targetPort: grpc
      nodePort: null
  selector:
    app.kubernetes.io/name: gorse-enterprise
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: gorse-enterprise/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gorse-enterprise-proxy
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: gorse-enterprise
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: worker
---
# Source: gorse-enterprise/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gorse-enterprise-server-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: server
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: gorse-enterprise
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: server
---
# Source: gorse-enterprise/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-release-gorse-enterprise-proxy
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gorse-enterprise
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gorse-enterprise
        helm.sh/chart: gorse-enterprise-0.4.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
      annotations:
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: gorse-enterprise
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - name: gorse-enterprise-worker
          image: "zhenghaoz/gorse-proxy:0.4.0"
          imagePullPolicy: IfNotPresent
          command: 
              - "/usr/bin/gorse-proxy"
              - "--endpoints"
              - http://my-release-gorse-enterprise-server-default:80
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          # TODO - We dont have a proper endpoint for health check
          # livenessProbe:
          #   httpGet:
          #     path: /metrics
          #     port: http
          #   initialDelaySeconds: 120
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          #   initialDelaySeconds: 0
          resources:
            limits: {}
            requests: {}
---
# Source: gorse-enterprise/templates/server/deployment.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-release-gorse-enterprise-server-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: sever
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gorse-enterprise
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gorse-enterprise
        helm.sh/chart: gorse-enterprise-0.4.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: server
      annotations:
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: gorse-enterprise
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - name: gorse-enterprise-server
          image: "zhenghaoz/gorse-server:0.4.12"
          imagePullPolicy: IfNotPresent
          command: 
              - "/usr/bin/gorse-server"
              - "--master-host"
              - "my-release-gorse-enterprise-master"
              - "--master-port"
              - "8086"
              - "--http-host"
              - "0.0.0.0"
          ports:
            - name: http
              containerPort: 8087
              protocol: TCP              
          # TODO - We dont have a proper endpoint for health check
          # livenessProbe:
          #   httpGet:
          #     path: /apidocs
          #     port: http
          #   initialDelaySeconds: 120
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          #  initialDelaySeconds: 0
          resources:
            limits: {}
            requests: {}
---
# Source: gorse-enterprise/templates/worker/deployment.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-release-gorse-enterprise-worker-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: sever
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gorse-enterprise
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gorse-enterprise
        helm.sh/chart: gorse-enterprise-0.4.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: worker
      annotations:
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: gorse-enterprise
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - name: gorse-enterprise-worker
          image: "zhenghaoz/gorse-worker:0.4.12"
          imagePullPolicy: IfNotPresent
          command: 
              - "/usr/bin/gorse-worker"
              - "--master-host"
              - "my-release-gorse-enterprise-master"
              - "--master-port"
              - "8086"
          ports:
            - name: http
              containerPort: 8089
              protocol: TCP
          # TODO - We dont have a proper endpoint for health check
          # livenessProbe:
          #   httpGet:
          #     path: /metrics
          #     port: http
          #   initialDelaySeconds: 120
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          #   initialDelaySeconds: 0
          resources:
            limits: {}
            requests: {}
---
# Source: gorse-enterprise/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.6.8
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.4-debian-11-r10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "gorse"
            - name: MONGODB_EXTRA_DATABASES
              value: "gorse"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: gorse-enterprise/templates/master/deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-gorse-enterprise-master-default
  namespace: "default"
  labels:
    app.kubernetes.io/name: gorse-enterprise
    helm.sh/chart: gorse-enterprise-0.4.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gorse-enterprise
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-gorse-enterprise-master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gorse-enterprise
        helm.sh/chart: gorse-enterprise-0.4.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: gorse-enterprise
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - name: gorse-enterprise-master
          image: "zhenghaoz/gorse-master:0.4.12"
          imagePullPolicy: IfNotPresent
          command: 
              - "/usr/bin/gorse-master"
              - "-c"
              - "/etc/gorse/config.toml"
              - "--debug"
              # - "--log-path /var/log/gorse/master.log"
              # - "--cache-path /var/lib/gorse/master_cache.data"
          env:
            - name: GORSE_SERVER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-gorse-enterprise
                  key: api-key
            - name: GORSE_DASHBOARD_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: my-release-gorse-enterprise
                  key: dashboard-username
            - name: GORSE_DASHBOARD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-gorse-enterprise
                  key: dashboard-password
            - name: GORSE_DASHBOARD_AUTH_SERVER
              value: 
            - name: GORSE_MASTER_PORT
              value: "8086"
            - name: GORSE_MASTER_HTTP_PORT
              value: "80"
            - name: GORSE_MASTER_JOBS
              value: "1"
            - name: GORSE_DATABASE_HOST
              value: my-release-mongodb
            - name: GORSE_DATABASE_PORT
              value: "27017"
            - name: GORSE_DATABASE_NAME
              value: gorse
            - name: GORSE_DATABASE_USER
              value: gorse
            - name: GORSE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
            - name: GORSE_CACHE_STORE
              value: mongodb://$(GORSE_DATABASE_USER):$(GORSE_DATABASE_PASSWORD)@$(GORSE_DATABASE_HOST):$(GORSE_DATABASE_PORT)/$(GORSE_DATABASE_NAME)?connect=direct
            - name: GORSE_DATA_STORE
              value: mongodb://$(GORSE_DATABASE_USER):$(GORSE_DATABASE_PASSWORD)@$(GORSE_DATABASE_HOST):$(GORSE_DATABASE_PORT)/$(GORSE_DATABASE_NAME)?connect=direct
          volumeMounts:
            - name: config
              mountPath: /etc/gorse/
            - name: data
              mountPath: /var/lib/gorse
          ports:
            - name: grpc
              containerPort: 8086
              protocol: TCP
            - name: http
              containerPort: 80
              protocol: TCP
          # TODO - We dont have a proper endpoint for health check
          livenessProbe:
            httpGet:
              path: /overview
              port: http
            initialDelaySeconds: 120
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          #   initialDelaySeconds: 0
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: config
          configMap:
            name: my-release-gorse-enterprise-default
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: gorse-enterprise
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
