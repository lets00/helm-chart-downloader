---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: kubefed-admission-webhook
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: default
  name: kubefed-admission-webhook-serving-cert
type: kubernetes.io/tls
stringData:
  tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDjzCCAnegAwIBAgIQQMvrGOq1Fwrv0QZIdxk+pzANBgkqhkiG9w0BAQsFADAn\nMSUwIwYDVQQDExxrdWJlZmVkLWFkbWlzc2lvbi13ZWJob29rLWNhMB4XDTI0MDYx\nNjAwMzA1M1oXDTM0MDYxNDAwMzA1M1owJzElMCMGA1UEAxMcbXktcmVsZWFzZS1h\nZG1pc3Npb24td2ViaG9vazCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\nALu9g5vKxm76TqN+v8LXFMdD0b4k9Vwn7HMfF8nL2JwjMfuag22vYeUJrcG+FLMB\nOWXBC/Uja3UjE8SeSaHZn+P1vbVjgkmlMC1P59CswjYg+PiewYrLOaWWN9qbEDGf\n0/tqgrVfwY4vyeyNHLb5ck5VdaGwWtWyJ/xx6mvFS1ETBux3lYamwjO7o7pXsmji\nXp2pwU746gT6EfzOIV3Gz5Uz9bakWrAby79lXjaiwEB9bCAZT88BnnfgxAqb54us\nU84mYj4KTWgFSYsFvBooM55Xznyb4H+cyfJRL4C/e9V+AOdHtnVYcpO6GwHs4ha6\n54Db3lTmkVth36nmO2hokwkCAwEAAaOBtjCBszAOBgNVHQ8BAf8EBAMCBaAwHQYD\nVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0j\nBBgwFoAU2of1V2IHv1Js/LqnUPePcOYbL6EwUwYDVR0RBEwwSoIha3ViZWZlZC1h\nZG1pc3Npb24td2ViaG9vay5kZWZhdWx0giVrdWJlZmVkLWFkbWlzc2lvbi13ZWJo\nb29rLmRlZmF1bHQuc3ZjMA0GCSqGSIb3DQEBCwUAA4IBAQCs7MZ6K5GYdsdWHLd2\noqnmLPScdsxPfCAvY93b4VMk9vTb5dBgwNT1Yjfjuz8cG4pEZjGR0Fm0R5SkHpO9\nr3ORkhyZDCG+xA5Vk1SWOu9ggj0RwqEcjKAO8CPQxvc4FeUUNXjmbWVyakVt0J0m\nPwH7K7SAFP4FYaS1YwIZzgzjuHLJ/oqxGW5Sx9wssUXakmFQoWE/Vw189tSTFIRp\nx7Oe31NT3ZQkQHWxlj8bA2C7YNGIBi5c+pPxUv+P0Iz34T24xFjur0kRF2QkR+hX\nXTKMslBdAEuNWTl7E8dk8hz8eua6lwK4rE0Hc0ULR7NEXS8yEKe9a1udDD6TdLO4\n+8MF\n-----END CERTIFICATE-----\n"
  tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAu72Dm8rGbvpOo36/wtcUx0PRviT1XCfscx8XycvYnCMx+5qD\nba9h5Qmtwb4UswE5ZcEL9SNrdSMTxJ5Jodmf4/W9tWOCSaUwLU/n0KzCNiD4+J7B\niss5pZY32psQMZ/T+2qCtV/Bji/J7I0ctvlyTlV1obBa1bIn/HHqa8VLURMG7HeV\nhqbCM7ujuleyaOJenanBTvjqBPoR/M4hXcbPlTP1tqRasBvLv2VeNqLAQH1sIBlP\nzwGed+DECpvni6xTziZiPgpNaAVJiwW8GigznlfOfJvgf5zJ8lEvgL971X4A50e2\ndVhyk7obAeziFrrngNveVOaRW2HfqeY7aGiTCQIDAQABAoIBAGoYU0O7eCBHPCGR\nA3VsbsWdQe6enDoUJb95FsxncmXqTdjOHO/jaQMyUQtoC/KNAo7KZaOG/LcZt5Yp\njZr1jTIaMbdMINjVjUBOI8b9mlNUlt6JeP6iklVNawsTDje9BuLR8kPldVCRGR+h\nL1UH6tzx1qQlMXAKWiaDieKVgFaz3J7RsPzAGAZa29PxOogmfUxv7QytTIysdty+\nE2c4UAJUulHcri+L6gzkmLBvY616xEk91t6ru3VqWvDTQWiGHaa4HCYV0VG37vvV\nnmg2l5KBPJ1//Hl95/ZOsoS6EhRi94WHXbiylSvHoaNb5fkxUtJmJPuawUSYXLPo\n4T6tEgECgYEAw+OTt2sbnrwuLD/MX9Q0MDglvUalM7588m8/534DEkgopY+eG9mm\nRO25pR6MAw6crQ6kv/+R7JzplXEmGGL3zFRLPUJvM2JmqJQ8D9eE2qhjX0k1JKEt\nr4GiZ/z6Bn+Str3syg7qEYE/WxyBoiu25aGnCcQMxTzgv1FQC/+TubkCgYEA9VnN\nVc9WBRd7F8RU3XN3l7DEZkOzSQyOvR1u7TkETf8RzlnnsXfNhYqmg50+qcByHIVf\nN1SoYz3vhVbd5DOE5ymif/zH+s9H+P/TJBPSYSo0ler1FXDRW2K6t8lb9XiAH6l1\nqjx1Tl2DQXAKDhZfsMerq0YsWb2coL686cPrC9ECgYBT2lljTLA4FOnW+0BrTRVC\nBubwzQruyX4G8WRzndeGvejYZlASL+si2nh7nEXnERw0YG5Z2fcHSGwdEqByE/tr\nNjI2+PdNEbRMOZg0V9eBGk/ffCEJmw1Jcb6psPr+SSHupAJ2xEeiUqdiQyOi3f+e\n8MHmRkwJKnQysYYIfNEp0QKBgQDnnXsGQtEFxYDikuk6lUKU5L7De63IjB5D0YFi\nWK0DpIN+tcjP9DUEmDtRjCQXxCD1Y8LbTQQZi+KNkc+vGiOgxeEtychPsVZUbc05\nBa1ZJKq3zDLJptM83hs+XMx/Et6BBUybBLAI5qZ+I/KaEe0LybL54SkFHsa5yNY2\nKEm/wQKBgA6eKqiUZZvCPBhYCmNWZ0bjgs12uqFNtfFTOn+ZrXV4GlHp7iQr1p/J\nVuEBnRni4m5KMs1OLqkp4QW1+JLyQuvSaAFqvPG2fxCVNIF3HxipAzZA8EZhVvTu\nU5p9EikwHBrLfAtOq9fGzQ68ihTbH8AXxyj2GYU9Gm7s17g8UNS7\n-----END RSA PRIVATE KEY-----\n"
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kubefed-admin
rules:
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: kubefed-edit
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - create
  - patch
  - delete
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kubefed-view
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-role
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
# This role provides the necessary permissions to create admission reviews.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: system:kubefed:admission-requester

rules:
- apiGroups:
  - validation.core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - create
- apiGroups:
  - mutation.core.kubefed.io
  resources:
  - kubefedconfigs
  verbs:
  - create
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubefed-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefed-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# name using the namespace. This is needed because admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:auth-delegator

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
# This clusterrolebinding grants permissions for the admission webhook to create
# admission reviews on behalf of the system:anonymous user.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:anonymous-auth

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:kubefed:admission-requester

subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-config-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
# Only need access to these core namespaced resources in the KubeFed system
# namespace regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-admission-webhook-role
  namespace: default
rules:
- apiGroups:
  - core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Grant admission webhook access to core.kubefed.io in the KubeFed system
# namespace only, regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-admission-webhook-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-admission-webhook-role
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Allow the admission webhook to read the config for terminating
# authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique resource name in
# the kube-system namespace using the namespace. This is needed because
# admission-webhooks do not currently support the ability to have
# namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:apiextension-viewer

  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: default
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-admission-webhook
  namespace: default
spec:
  selector:
    kubefed-admission-webhook: "true"
  ports:
  - port: 443
    targetPort: 8443
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-controller-manager-metrics-service
  namespace: default
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  selector:
    kubefed-control-plane: "controller-manager"
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubefed-controller-manager
  namespace: default
  labels:
    kubefed-control-plane: controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      kubefed-control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      labels:
        kubefed-control-plane: controller-manager
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-controller
      containers:
      - command:
        - /hyperfed/controller-manager
        - "--v=2"
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        name: controller-manager
        ports:
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 3
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 64Mi
      terminationGracePeriodSeconds: 10
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: kubefed-admission-webhook
  labels:
    kubefed-admission-webhook: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      kubefed-admission-webhook: "true"
  template:
    metadata:
      labels:
        kubefed-admission-webhook: "true"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-admission-webhook
      containers:
      - name: admission-webhook
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - "/hyperfed/webhook"
        - "--secure-port=8443"
        - "--cert-dir=/var/serving-cert/"
        - "--v=8"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubefed-admission-webhook-serving-cert
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: clusterroles.rbac.authorization.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedClusterRole
    pluralName: federatedclusterroles
    scope: Cluster
    version: v1beta1
  propagation: Enabled
  targetType:
    group: rbac.authorization.k8s.io
    kind: ClusterRole
    pluralName: clusterroles
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: configmaps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedConfigMap
    pluralName: federatedconfigmaps
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ConfigMap
    pluralName: configmaps
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: deployments.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedDeployment
    pluralName: federateddeployments
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: Deployment
    pluralName: deployments
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: ingresses.networking.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedIngress
    pluralName: federatedingresses
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: networking.k8s.io
    kind: Ingress
    pluralName: ingresses
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: jobs.batch
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedJob
    pluralName: federatedjobs
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: batch
    kind: Job
    pluralName: jobs
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: namespaces
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedNamespace
    pluralName: federatednamespaces
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Namespace
    pluralName: namespaces
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: replicasets.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedReplicaSet
    pluralName: federatedreplicasets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: ReplicaSet
    pluralName: replicasets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: secrets
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedSecret
    pluralName: federatedsecrets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Secret
    pluralName: secrets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: serviceaccounts
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedServiceAccount
    pluralName: federatedserviceaccounts
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ServiceAccount
    pluralName: serviceaccounts
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: services
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedService
    pluralName: federatedservices
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Service
    pluralName: services
    scope: Namespaced
    version: v1
---
# Source: kubefed/charts/controllermanager/templates/kubefedconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedConfig
metadata:
  name: kubefed
  namespace: default
spec:
  scope: "Cluster"
  controllerDuration:
    availableDelay: "20s"
    unavailableDelay: "60s"
    cacheSyncTimeout: "5m"
  leaderElect:
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "5s"
    resourceLock: "configmaps"
  clusterHealthCheck:
    period: "10s"
    failureThreshold: 3
    successThreshold: 1
    timeout: "3s"
  syncController:
    maxConcurrentReconciles: 1
    adoptResources: "Enabled"
  statusController:
    maxConcurrentReconciles: 1
  featureGates:
  - name: PushReconciler
    configuration: "Enabled"
  - name: SchedulerPreferences
    configuration: "Enabled"
  # NOTE: Commented feature gate to fix https://github.com/kubernetes-sigs/kubefed/issues/1333
  #- name: RawResourceStatusCollection
  #  configuration: "Disabled"
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
# The same comments for ValidatingWebhookConfiguration apply here to
# MutatingWebhookConfiguration.
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: mutation.core.kubefed.io
  annotations:
webhooks:
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /default-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU16bEhWenJ5emYzbWdFTFB0bnVzZXd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNVFl3TURNd05UTmFGdzB6TkRBMk1UUXdNRE13TlROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMkhRN0hSTkd0aWVUOVMybkZSajZoU09hb3dhN2IwMjVUUXNqUWxXeXBHN20vRUlHeEpyRnhWaE9RdDFjawpieWVKblNKUkx6cVIvMy9qZktacVM1T1UvNExPNXJSbzNhSm1IS0pBV2ZVbERaWFBWOWFQdUs3NkRPTlBWNHJICmtZY05uZ3RqL0dzVExaWmdFbHQ3T2pJN0ZTemhqMWRYN2ZSR09nd2ttU2k1aC9kUzRsK0FZZ0ZEbFEzQ0R2S3QKeHczbEdzZXVOaU5uRldmcERvQURNcHc2QjAybVVRRVdCdk9wS24zZ0VkWklNMVdRTFlVeW5tajBwak5TV29vcwpCY2o0czNWZ2xLM1UxZm96UU50cWpXbkc3R3ZNTVZ5eUJsa3lXYVoxV1VVQWpES2xyTDVjL3ZEeXFPOVE5NlkvCjRaM2RNN2VXUnVUV2dTUWtTYWJONWZZdEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTJvZjFWMklIdjFKcy9McW5VUGVQY09ZYkw2RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGQ4ClJ5dUFwanR6djVtRHZiRzJrc1ZhQ1hwSHBRd1ZlZEI2VGNybGtHZ00weUpwRHJqTHpERkp4bS95b1Avbkc4WTMKSCtpNXlKdUNFSlFwOG5BU1lqS3ZrS0dkV2d3WGc2LzI3T0ZIdXhGaWhvN25KTGZMb1RpZjRHaXBsR1lBTXlHbgplclBSTU83MWZKUUQvNHhJWFEvbVlVSkg3ZzhmaGNUSmhtNkdPMjdTeGpMdXZ6WlVSTXhKTi9hQ0MwVUVPN1NQCkdmdkt3NFUwN3QraUszZmhvdzJvNnllRHYwNW5XMVYwSm13SVF2RVVzTHBUME9KVEVaeDJ1TTl0cnVCQk0zWm4KaWFFQ1NWVWl2MWxNcnBBcVFIN1pUOFRjdDVlaXhGU2hZakhiNm9GeStaV05ISTFsNyswZWN1c3gzeXdwTVFBbgpHVmlTcXRiOUR1NElOSGN1Nm1vPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# using the namespace.
  name: validations.core.kubefed.io
  annotations:
webhooks:
- name: federatedtypeconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-federatedtypeconfigs
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU16bEhWenJ5emYzbWdFTFB0bnVzZXd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNVFl3TURNd05UTmFGdzB6TkRBMk1UUXdNRE13TlROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMkhRN0hSTkd0aWVUOVMybkZSajZoU09hb3dhN2IwMjVUUXNqUWxXeXBHN20vRUlHeEpyRnhWaE9RdDFjawpieWVKblNKUkx6cVIvMy9qZktacVM1T1UvNExPNXJSbzNhSm1IS0pBV2ZVbERaWFBWOWFQdUs3NkRPTlBWNHJICmtZY05uZ3RqL0dzVExaWmdFbHQ3T2pJN0ZTemhqMWRYN2ZSR09nd2ttU2k1aC9kUzRsK0FZZ0ZEbFEzQ0R2S3QKeHczbEdzZXVOaU5uRldmcERvQURNcHc2QjAybVVRRVdCdk9wS24zZ0VkWklNMVdRTFlVeW5tajBwak5TV29vcwpCY2o0czNWZ2xLM1UxZm96UU50cWpXbkc3R3ZNTVZ5eUJsa3lXYVoxV1VVQWpES2xyTDVjL3ZEeXFPOVE5NlkvCjRaM2RNN2VXUnVUV2dTUWtTYWJONWZZdEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTJvZjFWMklIdjFKcy9McW5VUGVQY09ZYkw2RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGQ4ClJ5dUFwanR6djVtRHZiRzJrc1ZhQ1hwSHBRd1ZlZEI2VGNybGtHZ00weUpwRHJqTHpERkp4bS95b1Avbkc4WTMKSCtpNXlKdUNFSlFwOG5BU1lqS3ZrS0dkV2d3WGc2LzI3T0ZIdXhGaWhvN25KTGZMb1RpZjRHaXBsR1lBTXlHbgplclBSTU83MWZKUUQvNHhJWFEvbVlVSkg3ZzhmaGNUSmhtNkdPMjdTeGpMdXZ6WlVSTXhKTi9hQ0MwVUVPN1NQCkdmdkt3NFUwN3QraUszZmhvdzJvNnllRHYwNW5XMVYwSm13SVF2RVVzTHBUME9KVEVaeDJ1TTl0cnVCQk0zWm4KaWFFQ1NWVWl2MWxNcnBBcVFIN1pUOFRjdDVlaXhGU2hZakhiNm9GeStaV05ISTFsNyswZWN1c3gzeXdwTVFBbgpHVmlTcXRiOUR1NElOSGN1Nm1vPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - federatedtypeconfigs
    - federatedtypeconfigs/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedclusters.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedcluster
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU16bEhWenJ5emYzbWdFTFB0bnVzZXd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNVFl3TURNd05UTmFGdzB6TkRBMk1UUXdNRE13TlROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMkhRN0hSTkd0aWVUOVMybkZSajZoU09hb3dhN2IwMjVUUXNqUWxXeXBHN20vRUlHeEpyRnhWaE9RdDFjawpieWVKblNKUkx6cVIvMy9qZktacVM1T1UvNExPNXJSbzNhSm1IS0pBV2ZVbERaWFBWOWFQdUs3NkRPTlBWNHJICmtZY05uZ3RqL0dzVExaWmdFbHQ3T2pJN0ZTemhqMWRYN2ZSR09nd2ttU2k1aC9kUzRsK0FZZ0ZEbFEzQ0R2S3QKeHczbEdzZXVOaU5uRldmcERvQURNcHc2QjAybVVRRVdCdk9wS24zZ0VkWklNMVdRTFlVeW5tajBwak5TV29vcwpCY2o0czNWZ2xLM1UxZm96UU50cWpXbkc3R3ZNTVZ5eUJsa3lXYVoxV1VVQWpES2xyTDVjL3ZEeXFPOVE5NlkvCjRaM2RNN2VXUnVUV2dTUWtTYWJONWZZdEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTJvZjFWMklIdjFKcy9McW5VUGVQY09ZYkw2RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGQ4ClJ5dUFwanR6djVtRHZiRzJrc1ZhQ1hwSHBRd1ZlZEI2VGNybGtHZ00weUpwRHJqTHpERkp4bS95b1Avbkc4WTMKSCtpNXlKdUNFSlFwOG5BU1lqS3ZrS0dkV2d3WGc2LzI3T0ZIdXhGaWhvN25KTGZMb1RpZjRHaXBsR1lBTXlHbgplclBSTU83MWZKUUQvNHhJWFEvbVlVSkg3ZzhmaGNUSmhtNkdPMjdTeGpMdXZ6WlVSTXhKTi9hQ0MwVUVPN1NQCkdmdkt3NFUwN3QraUszZmhvdzJvNnllRHYwNW5XMVYwSm13SVF2RVVzTHBUME9KVEVaeDJ1TTl0cnVCQk0zWm4KaWFFQ1NWVWl2MWxNcnBBcVFIN1pUOFRjdDVlaXhGU2hZakhiNm9GeStaV05ISTFsNyswZWN1c3gzeXdwTVFBbgpHVmlTcXRiOUR1NElOSGN1Nm1vPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedclusters
    - kubefedclusters/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "default"
      name: kubefed-admission-webhook
      path: /validate-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQU16bEhWenJ5emYzbWdFTFB0bnVzZXd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNVFl3TURNd05UTmFGdzB6TkRBMk1UUXdNRE13TlROYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDMkhRN0hSTkd0aWVUOVMybkZSajZoU09hb3dhN2IwMjVUUXNqUWxXeXBHN20vRUlHeEpyRnhWaE9RdDFjawpieWVKblNKUkx6cVIvMy9qZktacVM1T1UvNExPNXJSbzNhSm1IS0pBV2ZVbERaWFBWOWFQdUs3NkRPTlBWNHJICmtZY05uZ3RqL0dzVExaWmdFbHQ3T2pJN0ZTemhqMWRYN2ZSR09nd2ttU2k1aC9kUzRsK0FZZ0ZEbFEzQ0R2S3QKeHczbEdzZXVOaU5uRldmcERvQURNcHc2QjAybVVRRVdCdk9wS24zZ0VkWklNMVdRTFlVeW5tajBwak5TV29vcwpCY2o0czNWZ2xLM1UxZm96UU50cWpXbkc3R3ZNTVZ5eUJsa3lXYVoxV1VVQWpES2xyTDVjL3ZEeXFPOVE5NlkvCjRaM2RNN2VXUnVUV2dTUWtTYWJONWZZdEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTJvZjFWMklIdjFKcy9McW5VUGVQY09ZYkw2RXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGQ4ClJ5dUFwanR6djVtRHZiRzJrc1ZhQ1hwSHBRd1ZlZEI2VGNybGtHZ00weUpwRHJqTHpERkp4bS95b1Avbkc4WTMKSCtpNXlKdUNFSlFwOG5BU1lqS3ZrS0dkV2d3WGc2LzI3T0ZIdXhGaWhvN25KTGZMb1RpZjRHaXBsR1lBTXlHbgplclBSTU83MWZKUUQvNHhJWFEvbVlVSkg3ZzhmaGNUSmhtNkdPMjdTeGpMdXZ6WlVSTXhKTi9hQ0MwVUVPN1NQCkdmdkt3NFUwN3QraUszZmhvdzJvNnllRHYwNW5XMVYwSm13SVF2RVVzTHBUME9KVEVaeDJ1TTl0cnVCQk0zWm4KaWFFQ1NWVWl2MWxNcnBBcVFIN1pUOFRjdDVlaXhGU2hZakhiNm9GeStaV05ISTFsNyswZWN1c3gzeXdwTVFBbgpHVmlTcXRiOUR1NElOSGN1Nm1vPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "my-release-kubefed-config-hook"
  namespace: "default"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  setup.sh: |-
    #!/bin/bash
    set -euo pipefail

    kubectl patch kubefedconfig -n default kubefed --type='json' -p='[{"op": "add", "path": "/spec/featureGates", "value":[{"configuration": "Enabled","name":"PushReconciler"},{"configuration": "Disabled","name":"RawResourceStatusCollection"},{"configuration": "Enabled","name":"SchedulerPreferences"}]}]'

    echo "Kubefedconfig patched successfully!"

    kubectl rollout restart deployment/kubefed-controller-manager -n default
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["patch","get"]
  - apiGroups: ["core.kubefed.io"]
    resources: ["kubefedconfigs"]
    verbs: ["patch","get"]
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-hook
  namespace: default
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-hook
subjects:
  - kind: ServiceAccount
    name: kubefed-config-hook
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-ihtnybywqy"
  namespace: "default"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: 0.8.1
    helm.sh/chart: "controllermanager-0.0.6"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  template:
    metadata:
      name: "my-release"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-release"
        helm.sh/chart: "controllermanager-0.0.6"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      restartPolicy: Never
      serviceAccountName: kubefed-config-hook
      automountServiceAccountToken: true
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.17.16"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/bash"]
        args: ["/opt/scripts/setup.sh"]
        volumeMounts:
        - name: "scripts"
          mountPath: "/opt/scripts"
      volumes:
      - name: "scripts"
        configMap:
          name: "my-release-kubefed-config-hook"
