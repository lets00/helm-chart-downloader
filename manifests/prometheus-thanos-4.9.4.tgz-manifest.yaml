---
# Source: prometheus-thanos/templates/ruler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-prometheus-thanos-ruler
  labels:
    app.kubernetes.io/name: prometheus-thanos-ruler
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: prometheus-thanos/templates/receiver/hashring-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-prometheus-thanos-receiver-hashring
data:
  hashrings.json: |
    [
      {
        "endpoints": [
            "my-release-prometheus-thanos-receiver-0.my-release-prometheus-thanos-receiver.default.svc.cluster.local:10901"
        ]
      }
    ]
---
# Source: prometheus-thanos/templates/ruler/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-prometheus-thanos-ruler
  labels:
    app.kubernetes.io/name: prometheus-thanos-ruler
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  default.rules.yaml: |
---
# Source: prometheus-thanos/templates/compactor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-compact
  labels:
    app.kubernetes.io/name: prometheus-thanos-compact
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: monitoring
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prometheus-thanos-compact
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/querier/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-querier
  labels:
    app.kubernetes.io/name: prometheus-thanos-querier
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: prometheus-thanos-querier
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/query-frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-query-frontend
  labels:
    app.kubernetes.io/name: prometheus-thanos-query-frontend
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: prometheus-thanos-query-frontend
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/receiver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-receiver
  labels:
    app.kubernetes.io/name: prometheus-thanos-receiver
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
    - port: 9091
      targetPort: http-rw
      protocol: TCP
      name: http-rw
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: prometheus-thanos-receiver
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/ruler/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-ruler
  labels:
    app.kubernetes.io/name: prometheus-thanos-ruler
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: prometheus-thanos-ruler
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/store-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus-thanos-store-gateway
  labels:
    app.kubernetes.io/name: prometheus-thanos-store-gateway
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: prometheus-thanos-store-gateway
    app.kubernetes.io/instance: my-release
---
# Source: prometheus-thanos/templates/querier/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-prometheus-thanos-querier
  labels:
    app.kubernetes.io/name: prometheus-thanos-querier
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-querier
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-querier
        app.kubernetes.io/instance: my-release
        prometheus-thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
    spec:
      containers:
        - name: prometheus-thanos-querier
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - query
          - --log.level=info
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            {}
---
# Source: prometheus-thanos/templates/query-frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-prometheus-thanos-query-frontend
  labels:
    app.kubernetes.io/name: prometheus-thanos-query-frontend
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-query-frontend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-query-frontend
        app.kubernetes.io/instance: my-release
        prometheus-thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
    spec:
      containers:
        - name: prometheus-thanos-query-frontend
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - query-frontend
          - --log.level=info
          - --query-frontend.log-queries-longer-than=0
          - --query-range.split-interval=24h
          - --query-frontend.downstream-url=http://my-release-prometheus-thanos-querier.default.svc.cluster.local:9090
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            {}
---
# Source: prometheus-thanos/templates/compactor/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-prometheus-thanos-compact
  labels:
    app.kubernetes.io/name: prometheus-thanos-compact
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-compact
      app.kubernetes.io/instance: my-release
  serviceName: prometheus-thanos-compact
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-compact
        app.kubernetes.io/instance: my-release
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
    spec:
      containers:
        - name: prometheus-thanos-compact
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - compact
          - --log.level=info
          - --retention.resolution-raw=30d
          - --retention.resolution-5m=30d
          - --retention.resolution-1h=10y
          - --consistency-delay=30m
          - --wait
          ports:
          - name: monitoring
            containerPort: 10902
          resources:
            {}
          volumeMounts:
            - mountPath: /data
              name: storage-volume
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
---
# Source: prometheus-thanos/templates/receiver/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-prometheus-thanos-receiver
  labels:
    app.kubernetes.io/name: prometheus-thanos-receiver
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-receiver
      app.kubernetes.io/instance: my-release
  serviceName: my-release-prometheus-thanos-receiver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-receiver
        app.kubernetes.io/instance: my-release
        prometheus-thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
    spec:
      containers:
        - name: prometheus-thanos-receiver
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - receive
          - --tsdb.path=/data
          - --log.level=info
          - --receive.replication-factor=1
          - --label=receive_replica="$(K8S_POD)"
          - --tsdb.retention=1d
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:9090
          - --remote-write.address=0.0.0.0:9091
          - --receive.local-endpoint=$(K8S_POD).$(K8S_SERVICE).$(K8S_NAMESPACE).svc.cluster.local:10901
          - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
          - |
            --objstore.config=type: GCS
            config:
              {}
          
          ports:
            - name: grpc
              containerPort: 10901
              protocol: TCP
            - name: http
              containerPort: 9090
              protocol: TCP
            - name: http-rw
              containerPort: 9091
              protocol: TCP
          
          env:
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_POD
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_SERVICE
              value: my-release-prometheus-thanos-receiver

          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          
          resources:
            {}

          volumeMounts:
          - mountPath: /data
            name: storage-volume
            readOnly: false
          - mountPath: /var/lib/thanos-receive
            name: hashring-config
      volumes:
        - name: hashring-config
          configMap:
            name: my-release-prometheus-thanos-receiver-hashring
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "8Gi"
---
# Source: prometheus-thanos/templates/ruler/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-prometheus-thanos-ruler
  labels:
    app.kubernetes.io/name: prometheus-thanos-ruler
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-ruler
      app.kubernetes.io/instance: my-release
  serviceName: my-release-prometheus-thanos-ruler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-ruler
        app.kubernetes.io/instance: my-release
        prometheus-thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
        checksum/config: f3f20f395100f816c5d6e5f86a888df353f30e85489fabfd4c5013c9d25264de
    spec:
      serviceAccount: my-release-prometheus-thanos-ruler
      containers:
        - name: prometheus-thanos-ruler
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - rule
          - --data-dir=/data
          - --log.level=info
          - --eval-interval=1m
          - --rule-file=/etc/thanos-ruler/**/*-rules.yaml
          - --alertmanagers.url=http://localhost
          - --query=my-release-prometheus-thanos-querier:9090
          - --label=ruler_cluster=""
          - --label=replica="$(POD_NAME)"
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            {}
          volumeMounts:
          - mountPath: /etc/thanos-ruler
            name: config
          - mountPath: /etc/thanos-ruler/external
            name: external-config-volume
          - mountPath: /data
            name: storage-volume
      volumes:
      - name: external-config-volume
        emptyDir: {}
      - configMap:
          name: my-release-prometheus-thanos-ruler
        name: config
      priority: 0
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
---
# Source: prometheus-thanos/templates/store-gateway/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-prometheus-thanos-store-gateway
  labels:
    app.kubernetes.io/name: prometheus-thanos-store-gateway
    helm.sh/chart: prometheus-thanos-4.9.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-thanos-store-gateway
      app.kubernetes.io/instance: my-release
  serviceName: my-release-prometheus-thanos-store-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-thanos-store-gateway
        app.kubernetes.io/instance: my-release
        prometheus-thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10902"
    spec:
      containers:
        - name: prometheus-thanos-store-gateway
          imagePullPolicy: IfNotPresent
          image: "quay.io/thanos/thanos:v0.27.0"
          args:
          - store
          - --data-dir=/data
          - --log.level=info
          - |
            --index-cache.config=type: IN-MEMORY
            config:
              max_size: 500MB
          - --chunk-pool-size=500MB
          - |
            --objstore.config=type: GCS
            config:
              {}
          
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources:
            {}
          volumeMounts:
            - mountPath: /data
              name: storage-volume
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
