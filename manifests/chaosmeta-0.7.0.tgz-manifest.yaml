---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: workflow-controller
value: 1000000
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: chaosmeta-flow-operator
  name: chaosmeta-flow-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: chaosmeta-inject-operator
  name: chaosmeta-inject-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: chaosmeta-measure-operator
  name: chaosmeta-measure-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chaosmeta-platform
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-server
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosmeta-flow-config
  namespace: chaosmeta
data:
  chaosmeta-flow.json: |-
    {
      "executor": {
        "image": "registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-jmeter:v1.0.0",
        "resource": {
          "cpu": "0",
          "memory": "1Gi"
        },
        "namespace": "chaosmeta"
      }
    }
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosmeta-inject-config
  namespace: chaosmeta
data:
  chaosmeta-inject.json: |-
    {
      "worker": {
        "poolCount": 16
      },
      "ticker": {
        "autoCheckInterval": 2
      },
      "executor": {
        "mode": "daemonset",
        "executor": "chaosmetad",
        "version": "0.5.1",
        "agentConfig": {
          "agentPort": 29595
        },
        "daemonsetConfig": {
          "localExecPath": "/tmp",
          "daemonName": "chaosmeta-daemon",
          "daemonNs": "chaosmeta",
          "daemonLabel": {
            "app.chaosmeta.io": "chaosmeta-daemon"
          }
        },
        "middlewareConfig" : {
          "url" : "",
          "mistConfig" : {
            "antVipUrl" : "",
            "bkmiUrl" : "",
            "appName" : "",
            "tenant" : "",
            "mode" : "",
            "secret" : ""
          }
        }
      }
    }
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosmeta-measure-config
  namespace: chaosmeta
data:
  chaosmeta-measure.json: |-
    {
      "monitor": {
        "engine": "prometheus",
        "url": "http://127.0.0.1:9090"
      },
      "tasklimit": 10
    }
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chaosmeta-platform
  namespace: chaosmeta
data:
  app.conf: |-
    appname = "chaosmeta-platform"
    httpaddr =  ""
    httpport = 8082
    runmode = "dev"
    level = INFO
    EnableDocs = true
    copyrequestbody = true
  app.yaml: |-
    secretkey: chaosmeta1234567
    argoWorkflowNamespace: chaosmeta
    workflowNamespace: chaosmeta
    db:
      name: chaosmeta
      user: root
      passwd: chaosmeta
      url: chaosmeta-mysql:3306
      maxidle: 30
      maxconn: 30
    log:
      path: ./chaosmeta-platform.log
      level: info
    runmode: ServiceAccount
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: chaosmeta
data:
  executor: |
    image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/argoexec:v3.4.10
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: chaosmeta-flow-manager-role
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - chaosmeta.io
  resources:
  - loadtests
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - chaosmeta.io
  resources:
  - loadtests/finalizers
  verbs:
  - update
- apiGroups:
  - chaosmeta.io
  resources:
  - loadtests/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - '*'
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests
  verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests/status
    - certificatesigningrequests/approval
  verbs:
    - update
- apiGroups:
    - certificates.k8s.io
  resources:
    - signers
  resourceNames:
    - kubernetes.io/kubelet-serving # example.com/* 可用于为 “example.com” 域中的所有签名者授权
  verbs:
    - sign
    - approve
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: chaosmeta-inject-manager-role
rules:
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  - deployments/scale
  - statefulsets/scale
  - replicasets/scale
  verbs:
  - '*'
- apiGroups:
  - batchs
  resources:
  - jobs
  verbs:
  - '*'
- apiGroups:
  - chaosmeta.io
  resources:
  - experiments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - chaosmeta.io
  resources:
  - experiments/finalizers
  verbs:
  - update
- apiGroups:
  - chaosmeta.io
  resources:
  - experiments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - namespaces
  - nodes
  - pods
  - pods/exec
  - services
  verbs:
  - '*'
- apiGroups:
    - admissionregistration.k8s.io
  resources:
    - mutatingwebhookconfigurations
    - validatingwebhookconfigurations
  verbs:
    - '*'
- apiGroups:
    - ""
  resources:
    - secrets
  verbs:
    - '*'
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests
  verbs:
    - '*'
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests/status
    - certificatesigningrequests/approval
  verbs:
    - update
- apiGroups:
    - certificates.k8s.io
  resources:
    - signers
  resourceNames:
    - kubernetes.io/kubelet-serving # example.com/* 可用于为 “example.com” 域中的所有签名者授权
  verbs:
    - sign
    - approve
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: chaosmeta-measure-manager-role
rules:
- apiGroups:
  - chaosmeta.io
  resources:
  - commonmeasures
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - chaosmeta.io
  resources:
  - commonmeasures/finalizers
  verbs:
  - update
- apiGroups:
  - chaosmeta.io
  resources:
  - commonmeasures/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - '*'
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests
  verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
- apiGroups:
    - certificates.k8s.io
  resources:
    - certificatesigningrequests/status
    - certificatesigningrequests/approval
  verbs:
    - update
- apiGroups:
    - certificates.k8s.io
  resources:
    - signers
  resourceNames:
    - kubernetes.io/kubelet-serving # example.com/* 可用于为 “example.com” 域中的所有签名者授权
  verbs:
    - sign
    - approve
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chaosmeta-platform
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["argoproj.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["chaosmeta.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["*"]
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: argo-aggregate-to-admin
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  - workflowtasksets
  - workflowtasksets/finalizers
  - workflowtaskresults
  - workflowtaskresults/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: argo-aggregate-to-edit
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  - workflowtaskresults
  - workflowtaskresults/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: argo-aggregate-to-view
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  - workflowtaskresults
  - workflowtaskresults/finalizers
  verbs:
  - get
  - list
  - watch
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  - persistentvolumeclaims/finalizers
  verbs:
  - create
  - update
  - delete
  - get
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workflowtasksets
  - workflowtasksets/finalizers
  - workflowartifactgctasks
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
  - create
- apiGroups:
  - argoproj.io
  resources:
  - workflowtemplates
  - workflowtemplates/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - workflowtaskresults
  verbs:
  - list
  - watch
  - deletecollection
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
- apiGroups:
  - argoproj.io
  resources:
  - cronworkflows
  - cronworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - get
  - delete
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-server-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - eventsources
  - sensors
  - workflows
  - workfloweventbindings
  - workflowtemplates
  - cronworkflows
  - clusterworkflowtemplates
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: chaosmeta-flow-operator
  name: chaosmeta-flow-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chaosmeta-flow-manager-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-flow-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: chaosmeta-inject-operator
  name: chaosmeta-inject-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chaosmeta-inject-manager-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-inject-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: chaosmeta-measure-operator
  name: chaosmeta-measure-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chaosmeta-measure-manager-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-measure-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind:  ClusterRoleBinding
metadata:
  name: chaosmeta-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind:  ClusterRole
  name: chaosmeta-platform
subjects:
  - kind: ServiceAccount
    name: chaosmeta-platform
    namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-cluster-role
subjects:
- kind: ServiceAccount
  name: argo
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-server-cluster-role
subjects:
- kind: ServiceAccount
  name: argo-server
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: chaosmeta-flow-operator
  name: chaosmeta-flow-leader-election-role
  namespace: chaosmeta
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: chaosmeta-inject-operator
  name: chaosmeta-inject-leader-election-role
  namespace: chaosmeta
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: chaosmeta-measure-operator
  name: chaosmeta-measure-leader-election-role
  namespace: chaosmeta
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-role
  namespace: chaosmeta
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: chaosmeta-flow-operator
  name: chaosmeta-flow-leader-election-rolebinding
  namespace: chaosmeta
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chaosmeta-flow-leader-election-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-flow-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: chaosmeta-inject-operator
  name: chaosmeta-inject-leader-election-rolebinding
  namespace: chaosmeta
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chaosmeta-inject-leader-election-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-inject-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: chaosmeta-measure-operator
  name: chaosmeta-measure-leader-election-rolebinding
  namespace: chaosmeta
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chaosmeta-measure-leader-election-role
subjects:
- kind: ServiceAccount
  name: chaosmeta-measure-controller-manager
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-binding
  namespace: chaosmeta
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-role
subjects:
- kind: ServiceAccount
  name: argo
  namespace: chaosmeta
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: chaosmeta-flow-operator
  name: chaosmeta-flow-webhook-service
  namespace: chaosmeta
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
    app: chaosmeta-flow
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: chaosmeta-inject-operator
  name: chaosmeta-inject-webhook-service
  namespace: chaosmeta
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
    app: chaosmeta-inject
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: webhook
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: webhook-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: chaosmeta-measure-operator
  name: chaosmeta-measure-webhook-service
  namespace: chaosmeta
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
    app: chaosmeta-measure
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: v1
kind: Service
metadata:
  name: chaosmeta-mysql
  namespace: chaosmeta
spec:
  ports:
    - port: 3306
  selector:
    app: chaosmeta-mysql
  clusterIP: None
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: v1
kind: Service
metadata:
  finalizers:
    - service.k8s.alibaba/resources
  labels:
    app: chaosmeta-platform
  name: chaosmeta-platform
  namespace: chaosmeta
spec:
  allocateLoadBalancerNodePorts: true
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - name: http
      nodePort: 32504
      port: 8000
      protocol: TCP
      targetPort: 8000
  selector:
    app: chaosmeta-platform
  sessionAffinity: None
  type: LoadBalancer
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: v1
kind: Service
metadata:
  name: argo-server
  namespace: chaosmeta
spec:
  ports:
  - name: web
    port: 2746
    targetPort: 2746
  selector:
    app: argo-server
---
# Source: chaosmeta/templates/chaosmeta-daemon.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: chaosmeta-daemon
  namespace: chaosmeta
spec:
  selector:
    matchLabels:
      app.chaosmeta.io: chaosmeta-daemon
  template:
    metadata:
      labels:
        app.chaosmeta.io: chaosmeta-daemon
    spec:
#      tolerations:
#        - effect: NoSchedule
#          key: node-role.kubernetes.io/master
#      nodeSelector:
#        chaos-role.chaosmeta.io: chaosmeta-daemon
      containers:
        - name: chaosmeta-daemon
          image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-daemon:v0.5.1
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /tmp
              name: chaosmeta-workdir
      hostPID: true
      hostIPC: true
      hostNetwork: true
      volumes:
        - hostPath:
            path: /tmp
          name: chaosmeta-workdir
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: chaosmeta-flow-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: chaosmeta-flow-operator
    control-plane: controller-manager
  name: chaosmeta-flow-controller-manager
  namespace: chaosmeta
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app: chaosmeta-flow
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app: chaosmeta-flow
    spec:
      containers:
      - args:
        - --leader-elect
        command:
        - /manager
        image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-flow-controller:v0.0.6
        env:
        - name: DEFAULTNAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
          - mountPath: /workspace/config/chaosmeta-flow.json
            name: config-volume
            subPath: chaosmeta-flow.json
      securityContext:
        runAsNonRoot: true
      serviceAccountName: chaosmeta-flow-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - configMap:
            name: chaosmeta-flow-config
          name: config-volume
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: chaosmeta-inject-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: chaosmeta-inject-operator
    control-plane: controller-manager
  name: chaosmeta-inject-controller-manager
  namespace: chaosmeta
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app: chaosmeta-inject
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app: chaosmeta-inject
    spec:
      containers:
      - args:
        - --leader-elect
        command:
        - /manager
        image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-inject-controller:v0.1.3
        imagePullPolicy: Always
        env:
          - name: DEFAULTNAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LOCAL_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8083
          initialDelaySeconds: 20
          periodSeconds: 20
          failureThreshold: 3
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8083
          initialDelaySeconds: 20
          periodSeconds: 20
          failureThreshold: 3
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /config/chaosmeta-inject.json
          name: config-volume
          subPath: chaosmeta-inject.json
      securityContext:
        runAsNonRoot: true
      serviceAccountName: chaosmeta-inject-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: chaosmeta-inject-config
        name: config-volume
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: chaosmeta-measure-operator
    app.kubernetes.io/instance: controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: chaosmeta-measure-operator
    control-plane: controller-manager
  name: chaosmeta-measure-controller-manager
  namespace: chaosmeta
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app: chaosmeta-measure
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
        app: chaosmeta-measure
    spec:
      containers:
      - args:
        - --leader-elect
        command:
        - /manager
        image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-measure-controller:v0.0.7
        env:
        - name: DEFAULTNAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /workspace/config/chaosmeta-measure.json
          name: config-volume
          subPath: chaosmeta-measure.json
      securityContext:
        runAsNonRoot: true
      serviceAccountName: chaosmeta-measure-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: chaosmeta-measure-config
        name: config-volume
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaosmeta-platform
  namespace: chaosmeta
  labels:
    release: chaosmeta-platform
    app: chaosmeta-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chaosmeta-platform
  template:
    metadata:
      labels:
        app: chaosmeta-platform
    spec:
      serviceAccountName: chaosmeta-platform
      containers:
        - name: chaosmeta-platform
          image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-platform:v0.6.3
          resources:
            requests:
              cpu: "1"
              memory: "200Mi"
            limits:
              cpu: "1"
              memory: "200Mi"
          volumeMounts:
            - name: chaosmeta-config
              mountPath: /home/admin/conf
        - name: chaosmeta-platform-frontend
          image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/chaosmeta-platform-frontend:v0.6.3
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
      volumes:
        - name: chaosmeta-config
          configMap:
            name: chaosmeta-platform
            items:
              - key: app.conf
                path: app.conf
              - key: app.yaml
                path: app.yaml
---
# Source: chaosmeta/templates/chaosmeta-platform.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaosmeta-mysql
  namespace: chaosmeta
spec:
  selector:
    matchLabels:
      app: chaosmeta-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: chaosmeta-mysql
    spec:
      serviceAccountName: chaosmeta-platform
      containers:
        - image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/mysql:8.0
          name: chaosmeta-mysql
          env:
            - name: MYSQL_DATABASE
              value: "chaosmeta"
            - name: MYSQL_ROOT_PASSWORD
              value: "chaosmeta"
          ports:
            - containerPort: 3306
              name: chaosmeta-mysql
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          hostPath:
            path: "/mnt/chaosmeta-platform-mysql"
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-server
  namespace: chaosmeta
spec:
  selector:
    matchLabels:
      app: argo-server
  template:
    metadata:
      labels:
        app: argo-server
    spec:
      containers:
      - args:
        - server
        env: []
        image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/argocli:v3.4.10.3
        name: argo-server
        ports:
        - containerPort: 2746
          name: web
        readinessProbe:
          httpGet:
            path: /
            port: 2746
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 20
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
      serviceAccountName: argo-server
      volumes:
      - emptyDir: {}
        name: tmp
---
# Source: chaosmeta/templates/chaosmeta-workflow.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-controller
  namespace: chaosmeta
spec:
  selector:
    matchLabels:
      app: workflow-controller
  template:
    metadata:
      labels:
        app: workflow-controller
    spec:
      containers:
      - args: []
        command:
        - workflow-controller
        env:
        - name: LEADER_ELECTION_IDENTITY
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: registry.cn-hangzhou.aliyuncs.com/chaosmeta/workflow-controller:v3.4.10
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 6060
          initialDelaySeconds: 90
          periodSeconds: 60
          timeoutSeconds: 30
        name: workflow-controller
        ports:
        - containerPort: 9090
          name: metrics
        - containerPort: 6060
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: workflow-controller
      securityContext:
        runAsNonRoot: true
      serviceAccountName: argo
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-flow-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-flow-webhook-service
      namespace: chaosmeta
      path: /mutate-chaosmeta-io-v1alpha1-loadtest
  failurePolicy: Fail
  name: mloadtest.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    resources:
    - loadtests
  sideEffects: None
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-inject-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-inject-webhook-service
      namespace: chaosmeta
      path: /mutate-chaosmeta-io-v1alpha1-experiment
  failurePolicy: Ignore
  name: mexperiment.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    resources:
    - experiments
  sideEffects: None
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-measure-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-measure-webhook-service
      namespace: chaosmeta
      path: /mutate-chaosmeta-io-v1alpha1-commonmeasure
  failurePolicy: Fail
  name: mcommonmeasure.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    resources:
    - commonmeasures
  sideEffects: None
---
# Source: chaosmeta/templates/chaosmeta-flow.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-flow-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-flow-webhook-service
      namespace: chaosmeta
      path: /validate-chaosmeta-io-v1alpha1-loadtest
  failurePolicy: Fail
  name: vloadtest.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - loadtests
  sideEffects: None
---
# Source: chaosmeta/templates/chaosmeta-inject.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-inject-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-inject-webhook-service
      namespace: chaosmeta
      path: /validate-chaosmeta-io-v1alpha1-experiment
  failurePolicy: Ignore
  name: vexperiment.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - experiments
  sideEffects: None
---
# Source: chaosmeta/templates/chaosmeta-measure.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  name: chaosmeta-measure-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: chaosmeta-measure-webhook-service
      namespace: chaosmeta
      path: /validate-chaosmeta-io-v1alpha1-commonmeasure
  failurePolicy: Fail
  name: vcommonmeasure.kb.io
  rules:
  - apiGroups:
    - chaosmeta.io
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - commonmeasures
  sideEffects: None
