---
# Source: jaeger/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-jaeger
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: jaeger/templates/jaeger-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-jaeger
data:
  jaeger-ui.json: |
    {
      "monitor": {
        "menuEnabled": true
      },
      "dependencies": {
        "menuEnabled": true
      }
    }
---
# Source: jaeger/templates/otel-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-otel
data:
  otel-collector-config.yml: |
    receivers:
      jaeger:
        protocols:
          thrift_http:
            endpoint: "0.0.0.0:14278"
      # Dummy receiver that's never used, because a pipeline is required to have one.
      otlp/spanmetrics:
        protocols:
          grpc:
            endpoint: "localhost:65535"
    exporters:
      prometheus:
        endpoint: "0.0.0.0:8889"
      jaeger:
        endpoint: "jaeger:14250"
        tls:
          insecure: true
    processors:
      batch:
      spanmetrics:
        metrics_exporter: prometheus
    service:
      pipelines:
        traces:
          receivers: [jaeger]
          processors: [spanmetrics, batch]
          exporters: [jaeger]
        # The exporter name in this pipeline must match the spanmetrics.metrics_exporter name.
        # The receiver is just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.
        metrics/spanmetrics:
          receivers: [otlp/spanmetrics]
          exporters: [prometheus]
---
# Source: jaeger/templates/prometheus-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    scrape_configs:
      - job_name: aggregated-trace-metrics
        static_configs:
          - targets: [ 'my-release-otel.jaeger.svc.cluster.local:8889' ]
---
# Source: jaeger/templates/jaeger-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-jaeger
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: "14250"
      port: 14250
      targetPort: 14250
    - name: "14268"
      port: 14268
      targetPort: 14268
    - name: "6831"
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: "16686"
      port: 16686
      targetPort: 16686
    - name: "16685"
      port: 16685
      targetPort: 16685
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: my-release
---
# Source: jaeger/templates/otel-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-otel
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: "14278"
      port: 14278
      targetPort: 14278
    - name: "8889"
      port: 8889
      targetPort: 8889
  selector:
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
---
# Source: jaeger/templates/prometheus-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-prometheus
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
---
# Source: jaeger/templates/jaeger-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-jaeger
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-jaeger
      securityContext:
        {}
      containers:
        - name: jaeger
          securityContext:
            {}
          image: "jaegertracing/all-in-one:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 14250
            - containerPort: 14268
            - containerPort: 6831
              protocol: UDP
            - containerPort: 16686
            - containerPort: 16685
          resources:
            {}
          env:
            - name: METRICS_STORAGE_TYPE
              value: prometheus
            - name: PROMETHEUS_SERVER_URL
              value: http://jaeger-prometheus.jaeger.svc.cluster.local:9090
          args:
            - --query.ui-config
            - /etc/jaeger/ui/jaeger-ui.json
          volumeMounts:
            - mountPath: /etc/jaeger/ui
              name: jaeger-config-volume
      volumes:
      - name: jaeger-config-volume
        configMap:
          name: my-release-jaeger
---
# Source: jaeger/templates/otel-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-otel
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: otel
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: otel
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-jaeger
      securityContext:
        {}
      containers:
        - name: jaeger
          securityContext:
            {}
          image: "otel/opentelemetry-collector-contrib:latest"
          args: ["--config", "/etc/otelcol/otel-collector-config.yml"]
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 14278
            - containerPort: 8889








          resources:
            {}
          volumeMounts:
            - mountPath: /etc/otelcol
              name: otel-config-volume
      volumes:
        - name: otel-config-volume
          configMap:
            name: my-release-otel
---
# Source: jaeger/templates/prometheus-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-prometheus
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: otel
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: otel
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: otel
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-jaeger
      securityContext:
        {}
      containers:
        - name: jaeger
          securityContext:
            {}
          image: "prom/prometheus:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: prometheus
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 9090
          readinessProbe:
            httpGet:
              path: /
              port: 9090
          resources:
            {}
          volumeMounts:
            - mountPath: /etc/prometheus
              name: prometheus-config-volume
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: my-release-prometheus
---
# Source: jaeger/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-jaeger-test-connection"
  labels:
    helm.sh/chart: jaeger-0.1.0
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-jaeger:16686']
  restartPolicy: Never
