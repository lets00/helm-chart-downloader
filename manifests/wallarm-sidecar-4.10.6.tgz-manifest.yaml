---
# Source: wallarm-sidecar/templates/controller-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-wallarm-sidecar-controller
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: wallarm-sidecar
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  maxUnavailable: 1
---
# Source: wallarm-sidecar/templates/postanalytics-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-wallarm-sidecar-postanalytics
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: postanalytics
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: wallarm-sidecar
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: postanalytics
  maxUnavailable: 1
---
# Source: wallarm-sidecar/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-wallarm-sidecar-controller
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: controller
---
# Source: wallarm-sidecar/templates/postanalytics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-wallarm-sidecar-postanalytics
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: postanalytics
---
# Source: wallarm-sidecar/templates/shared-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-wallarm-sidecar-credentials
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
type: Opaque
data:
  WALLARM_API_TOKEN: ""
  WALLARM_API_HOST: "YXBpLndhbGxhcm0uY29t"
  WALLARM_API_PORT: "NDQz"
  WALLARM_API_USE_SSL: "dHJ1ZQ=="
  WALLARM_API_CA_VERIFY: "dHJ1ZQ=="
  WALLARM_LABELS: "Z3JvdXA9ZGVmYXVsdFNpZGVjYXJHcm91cA=="
---
# Source: wallarm-sidecar/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-wallarm-sidecar-controller
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: controller
data:
  config.yaml: |-
    settings:
      annotationPrefix: sidecar.wallarm.io
      injectionStrategy:
        iptablesEnable: true
        schema: single
      nginx:
        applicationPort: 80
        healthPath: /health
        listenPort: 26001
        realIpHeader: X-Forwarded-For
        setRealIpFrom:
        - 10.0.0.0/8
        - 192.168.0.0/16
        - 172.16.0.0/12
        - 127.0.0.0/8
        - fd00::/8
        statusPath: /status
        statusPort: 10246
        tarantoolUpstream:
          keepalive: 16
          keepaliveRequests: 100
          server:
            failTimeout: 0
            maxConns: 16
            maxFails: 0
        wallarmMetricsPath: /wallarm-metrics
        wallarmMetricsPort: 18080
        wallarmStatusPath: /wallarm-status
      profiles:
        example:
          nginx:
            servers:
            - include:
              - server_name example.io www.example.io
              - ssl_protocols TLSv1.2 TLSv1.3
              - ssl_certificate /etc/nginx/certs/example.io/tls.crt
              - ssl_certificate_key /etc/nginx/certs/example.io/tls.key
              listen: ssl
            - include:
              - server_name example.com www.example.com
              - ssl_protocols TLSv1.3
              - ssl_certificate /etc/nginx/certs/example.com/tls.crt
              - ssl_certificate_key /etc/nginx/certs/example.com/tls.key
              - ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384
              - ssl_conf_command Ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
              listen: ssl http2
          sidecar:
            volumeMounts:
            - mountPath: /etc/nginx/certs/example.com
              name: nginx-certs-example-com
              readOnly: true
            - mountPath: /etc/nginx/certs/example.io
              name: nginx-certs-example-io
              readOnly: true
            volumes:
            - name: nginx-certs-example-com
              secret:
                secretName: example-com-certs
            - name: nginx-certs-example-io
              secret:
                secretName: example-io-certs
      sidecar:
        containers:
          helper:
            resources: {}
          proxy:
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /healthz
                port: status
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            livenessProbeEnable: true
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /healthz
                port: status
              initialDelaySeconds: 60
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            readinessProbeEnable: true
            resources: {}
        image:
          image: wallarm/sidecar
          pullPolicy: IfNotPresent
          registry: docker.io
          tag: 4.10.6-1
        initContainers:
          helper:
            resources: {}
          iptables:
            resources: {}
            securityContext:
              capabilities:
                add:
                - NET_ADMIN
                drop:
                - ALL
              privileged: true
              runAsNonRoot: false
              runAsUser: 0
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
      wallarm:
        aclExportEnable: "on"
        api:
          caVerify: true
          existingSecret:
            enabled: false
            secretKey: token
            secretName: wallarm-api-token
          host: api.wallarm.com
          nodeGroup: defaultSidecarGroup
          port: 443
          token: ""
          useSSL: true
        apiFirewallMode: "on"
        enableLibDetection: "on"
        fallback: "on"
        mode: monitoring
        modeAllowOverride: "on"
        parseResponse: "on"
        parseWebsocket: "off"
        unpackResponse: "on"
        upstream:
          connectAttempts: 10
          reconnectInterval: 15s
      tarantool:
        host: my-release-wallarm-sidecar-postanalytics.default.svc
        port: 3313
      component:
        name: wallarm-sidecar-proxy
        version: 4.10.6
---
# Source: wallarm-sidecar/templates/postanalytics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-wallarm-sidecar-postanalytics
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: postanalytics
data:
  supervisord.conf: |-
    [supervisord]
    nodaemon=true
    loglevel=warn
    logfile=/dev/stdout
    logfile_maxbytes=0
    pidfile=/opt/wallarm/run/supervisor/pid
    # export-attacks
    [program:export-attacks]
    command=/opt/wallarm/usr/share/wallarm-common/export-attacks -r -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # export-counters
    [program:export-counters]
    command=/opt/wallarm/usr/share/wallarm-common/export-counters -l STDOUT -L ERROR
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # export-environment
    [program:export-environment]
    command=/opt/wallarm/usr/share/wallarm-common/export-environment -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # brute-detect
    [program:brute-detect]
    command=/opt/wallarm/usr/share/wallarm-common/brute-detect -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # sync-markers
    [program:sync-markers]
    command=/opt/wallarm/usr/share/wallarm-common/sync-markers -w -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # weak-jwt-detect
    [program:weak-jwt-detect]
    command=/opt/wallarm/usr/share/wallarm-common/weak-jwt-detect -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # sync-node
    [program:sync-node]
    command=/opt/wallarm/usr/share/wallarm-common/syncnode -f -p -r 120 -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # export-blocked-stats
    [program:export-blocked-stats]
    command=/opt/wallarm/usr/share/wallarm-common/export-blocked-stats -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout

    # detect-cred-stuffing
    [program:detect-cred-stuffing]
    command=/opt/wallarm/usr/share/wallarm-common/detect-cred-stuffing -l STDOUT -L INFO
    autorestart=true
    startretries=4294967295
    stdout_logfile_maxbytes=0
    stdout_logfile=/dev/stdout
    stderr_logfile_maxbytes=0
    stderr_logfile=/dev/stdout
---
# Source: wallarm-sidecar/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-wallarm-sidecar-controller
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: controller
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: controller
  ports:
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
    appProtocol: https
---
# Source: wallarm-sidecar/templates/postanalytics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-wallarm-sidecar-postanalytics
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: postanalytics
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: postanalytics
  ports:
  - name: tarantool
    port: 3313
    targetPort: tarantool
    protocol: TCP
---
# Source: wallarm-sidecar/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-wallarm-sidecar-controller
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: controller
spec:
  replicas: 1
  strategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: wallarm-sidecar
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  template:
    metadata:
      annotations:
        checksum/config: 5555a92e13643339dbcc92168b9e6b22b6fc37d0a59a46cf27f7cd7a7de1448f
        
      labels:
        app.kubernetes.io/name: wallarm-sidecar
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: my-release-wallarm-sidecar-controller
      terminationGracePeriodSeconds: 30
      containers:
        - name: controller
          image: docker.io/wallarm/sidecar-controller:1.3.7
          imagePullPolicy: "IfNotPresent"
          args:
          - --listen=:8443
          - --template=/etc/controller/template.yaml.tpl
          - --config=/etc/controller/config.yaml
          - --tls-cert-file=/etc/controller/tls/tls.crt
          - --tls-key-file=/etc/controller/tls/tls.key
          - --log-level=info
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            privileged: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - name: config
              mountPath: /etc/controller/config.yaml
              subPath: config.yaml
            - name: tls
              mountPath: /etc/controller/tls
              readOnly: true
      volumes:
        - name: tls
          secret:
            secretName: my-release-wallarm-sidecar-admission-tls
        - name: config
          configMap:
            name: my-release-wallarm-sidecar-controller
---
# Source: wallarm-sidecar/templates/postanalytics-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-wallarm-sidecar-postanalytics
  annotations:
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: postanalytics
spec:
  replicas: 1
  strategy: 
    rollingUpdate:
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: wallarm-sidecar
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: postanalytics
  template:
    metadata:
      annotations:
        checksum/config: 04738a7213465a5b1f8b13608c86cb9e492b2ccde3cd7f44afe2fac3eb9bd212
        checksum/secret: ebe6808559fa8ffa825d3bfcc40d120b5a7d699ac72bd6d9f600cef2026bc9c2
        
      labels:
        app.kubernetes.io/name: wallarm-sidecar
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: postanalytics
    spec:
      serviceAccountName: my-release-wallarm-sidecar-postanalytics
      terminationGracePeriodSeconds: 30
      initContainers:
        - name: init
          image: docker.io/wallarm/node-helpers:4.10.6-1
          imagePullPolicy: "IfNotPresent"
          args: [ "register", "fallback" ]
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_COMPONENT_NAME
            value: wallarm-sidecar-proxy
          - name: WALLARM_COMPONENT_VERSION
            value: "4.10.6"
          securityContext:
            privileged: false
            runAsUser: 101
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - mountPath: /opt/wallarm/etc/wallarm
            name: wallarm
          - mountPath: /opt/wallarm/var/lib/wallarm-acl
            name: wallarm-acl
      containers:
        - name: supervisord
          image: docker.io/wallarm/node-helpers:4.10.6-1
          imagePullPolicy: "IfNotPresent"
          args: ["supervisord"]
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_COMPONENT_NAME
            value: wallarm-sidecar-proxy
          - name: WALLARM_COMPONENT_VERSION
            value: "4.10.6"
          securityContext:
            privileged: false
            runAsUser: 101
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - mountPath: /opt/wallarm/etc/wallarm
            name: wallarm
          - mountPath: /opt/wallarm/var/lib/wallarm-acl
            name: wallarm-acl
          - mountPath: /opt/supervisord/supervisord.conf
            name: wallarm-supervisord
            subPath: supervisord.conf
            readOnly: true
        - name: tarantool
          image: docker.io/wallarm/node-helpers:4.10.6-1
          imagePullPolicy: "IfNotPresent"
          args: ["tarantool"]
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          - name: SLAB_ALLOC_ARENA
            value: "2.0"
          ports:
            - name: tarantool
              containerPort: 3313
              protocol: TCP
          livenessProbe: 
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3313
            timeoutSeconds: 1
          securityContext:
            privileged: false
            runAsUser: 101
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
              add:
              - NET_BIND_SERVICE
        - name: appstructure
          image: docker.io/wallarm/node-helpers:4.10.6-1
          imagePullPolicy: "IfNotPresent"
          args: ["appstructure"]
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          securityContext:
            privileged: false
            runAsUser: 101
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - mountPath: /opt/wallarm/etc/wallarm
            name: wallarm
        - name: antibot
          image: docker.io/wallarm/node-helpers:4.10.6-1
          imagePullPolicy: "IfNotPresent"
          args: ["antibot"]
          env:
          - name: WALLARM_API_HOST
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_HOST
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_PORT
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_PORT
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_USE_SSL
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_USE_SSL
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_CA_VERIFY
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_CA_VERIFY
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_LABELS
            valueFrom:
              secretKeyRef:
                key: WALLARM_LABELS
                name: my-release-wallarm-sidecar-credentials
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: WALLARM_API_TOKEN
                name: my-release-wallarm-sidecar-credentials
          securityContext:
            privileged: false
            runAsUser: 101
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - mountPath: /opt/wallarm/etc/wallarm
            name: wallarm
      volumes:
        - name: wallarm
          emptyDir: {}
        - name: wallarm-acl
          emptyDir: {}
        - name: wallarm-supervisord
          configMap:
            name: my-release-wallarm-sidecar-postanalytics
---
# Source: wallarm-sidecar/templates/controller-webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-wallarm-sidecar-admission-tls
  annotations:
    helm.sh/hook: pre-install
    helm.sh/resource-policy: keep
    helm.sh/hook-delete-policy: before-hook-creation
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: admission-webhook
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQyRENDQXNDZ0F3SUJBZ0lSQU5TTFpJZUVKUHVEOTdHcnZkeCsrbVl3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXd3TktpNWtaV1poZFd4MExuTjJZekFlRncweU5EQTJNVFV5TXpVMU5EbGFGdzB6TkRBMgpNVE15TXpVMU5EbGFNRHd4T2pBNEJnTlZCQU1UTVcxNUxYSmxiR1ZoYzJVdGQyRnNiR0Z5YlMxemFXUmxZMkZ5CkxXTnZiblJ5YjJ4c1pYSXVaR1ZtWVhWc2RDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURYdE9yRjhuSDZJM2NkQVhKSnpTa2dyRkdYeS9HemR1YTNqT1F6Q25vU0NDMEloTFp5UGJjQQpnMEZhWHBIR1Z2RGd5ZXFtZ3FrbWFJZytCUmpHYk8vZ0hWSzQxVEFIL0UycUZxMk1lOW1aTjZCMm8rQ21CMlVQCjdFaDAyL3piTFoxUXdIcXJTZjl6VUhZRS9VZjdPakVkZjA0MmVIL05QMGMvdElqVDUwZ3hXYWJsVWE4a2ZZeUsKeEVvUmlHd1d4b1EwczJwRVptY2srSGVMeTRoMTdGWlVCU1FKcTJtL2lER2FZSUhjUDIyUGt6aSthNzNpMTRjVwpwWCs2VjhwanBuQXdIN3hqUHNLUlFJSXBrQkdMRXk5YjVGazN5dDZ6bU5tQjVvNHdkekUxRk82Z09VUXRVU0dhCkIxWk9EZTZmRlBPWXZaa3RjVG82alFXQ0FGcnBmQ3RWQWdNQkFBR2pnZmd3Z2ZVd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQjhHQTFVZEl3UVlNQmFBRkk4emptbUhiMWR4WVhDY3NmV3BZOEwzVXRZdk1JR1VCZ05WSFJFRWdZd3dnWW1DCk1XMTVMWEpsYkdWaGMyVXRkMkZzYkdGeWJTMXphV1JsWTJGeUxXTnZiblJ5YjJ4c1pYSXVaR1ZtWVhWc2RDNXoKZG1PQ0xXMTVMWEpsYkdWaGMyVXRkMkZzYkdGeWJTMXphV1JsWTJGeUxXTnZiblJ5YjJ4c1pYSXVaR1ZtWVhWcwpkSUlsYlhrdGNtVnNaV0Z6WlMxM1lXeHNZWEp0TFhOcFpHVmpZWEl0WTI5dWRISnZiR3hsY2pBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFNTlM2d2U4ZXNxa3o4N2dpSjlvR1dQdWduTk9Id21NVnY0S2s0eitBc2RWOXA0QUEKeFA2R2UwekdWQWMzTnlJK3FrRDFDVWlTa0FReWdUeG9iUWRmQjdJWHJESk1IOUVCajl3Z0UyTkhSTEFCUjJlOApic0ZqRnM2K21GeTlsMVpQNlp6RUd3QjRVSUtiTHhUNmZxS2M2N0ZwWVNjUEd1ajlyeEMrWW5VNUEzMWlMQ0ZNCitDejJ1TE5naUo2Q3h6cXIvRGdpWUVadUgrbmhtc2lmWnFGRmlsY1h2a2RTejR3SmR6Yy9Sd2NRYVhxcDRvREkKUUlqcWhTMnJvdEYxT05aV090bktIQzJla05Hekk0bDE5am9ISUlNMGZRRjhXTEdrWVpHYkJ4dUJ6UUg4SnlrVwozUk5HTk5kUm8zSG9RZkF0blZZZlBJb3BqTmJuTENYYmhDZ1pNdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMTdUcXhmSngraU4zSFFGeVNjMHBJS3hSbDh2eHMzYm10NHprTXdwNkVnZ3RDSVMyCmNqMjNBSU5CV2w2UnhsYnc0TW5xcG9LcEptaUlQZ1VZeG16djRCMVN1TlV3Qi94TnFoYXRqSHZabVRlZ2RxUGcKcGdkbEQreElkTnY4MnkyZFVNQjZxMG4vYzFCMkJQMUgrem94SFg5T05uaC96VDlIUDdTSTArZElNVm1tNVZHdgpKSDJNaXNSS0VZaHNGc2FFTkxOcVJHWm5KUGgzaTh1SWRleFdWQVVrQ2F0cHY0Z3htbUNCM0Q5dGo1TTR2bXU5CjR0ZUhGcVYvdWxmS1k2WndNQis4WXo3Q2tVQ0NLWkFSaXhNdlcrUlpOOHJlczVqWmdlYU9NSGN4TlJUdW9EbEUKTFZFaG1nZFdUZzN1bnhUem1MMlpMWEU2T28wRmdnQmE2WHdyVlFJREFRQUJBb0lCQUI4enhHSXQxOTdmRW5QWApxYmlUUE1mRkpXaFh6L2F0MUdIb3QzbktvaTNKa1BvU2VIRytDNksvV2N6QXNVV0hmZ0NHTkxNeFkxWnkrSUpBCktuMUpkTWx1ZEhEWUpjS0I5Sm9OL2J5OGpaVmtQb25xMnF3cGxhemYrUHN1ZHowZE5BeGlTMXhMcisvMlM1d2QKSnpSb0RvSzl6NHFCazdzVTFER2E0OUFEUEtZbWxhakRLTW9ibXpBV3hBWTJLYStFV3JQazQ5VTZyMExaY1FSNApFeVc3RUFYU29YblIzRHRrS3pDRHA5amZoYjVZS2RreTNmRTZKWXE2MzBtdnR3YlgvRDNkTWF1QkxmdFVwV0Z4CmVLU1d4SStmSnp0U01jZXVENjB2MWxnaENleThtd3VqVXNUc016T1JnSlNVWHNXMkpRK1hhc1NzOTlIcHBPcUcKM2g1cTNnRUNnWUVBK2VoSEpKN0JlK0QwREFBZ1J4NzVrRkdPRTlMK3BoUDM2REx5Nnhpc3dYdnp1MGtqZUczYQowMTNpUGZuSksrNHUrdkEyTDJCVUY4OEp6ZFl3Y0tZaXZWNkM5UTExODdBRUZBSWRCVHJmU3pUZ3d1L3AvcmMwCjQySUd5TUY5NTZXaVAwNmliSndVYmIxL1h3bU5sUWs1WFZSWXlneFhiZ3Y3T1BxdzByWFhwWEVDZ1lFQTNQY3YKcURGYzNnTDdqZDIzTnkxdURjMzhUSEs5MUpOM3RNYitibFFCMno5Q3J3OFR4T1ByMXhhMzc3bW1DWVR1ZjNGbgpSSVFGODhyeURjeHF1OXZKTFpXRUtkUGZCUHVGYmpTb2tYRkZreTdvTG9TTG5yRnVXVEpBQnVTRFJ3Y3JuWmpzCnBvVmlFclRlc3cxK3YwZno3SWFZWUtBaXYrWHhVVWJVbDJXOFlpVUNnWUVBbmdvRGU2Z2VDZDQvMTVyNHpxRkwKQjdaYm1EUFZzR2R1WGx4aC9NVFU4Mk1VeHJyQkFMYlFMTnp4WjJvZ2kzU01KMHRqcU9CTkxlVlRlT1ZjS3RFVgpwUll3MFJIYkp1bUlHck1mY1NCQzk4ZVA0QmRpcmg5a0Jld0hDRXc4K0JKcUlZano5S1ZiMGU2RnJ5OVdad3EzClNVcysveitBeHVveXpGelZGOXZCYlRFQ2dZQTEwak9XZVNlUW9CTmJzOFI3dVNJVVZMYitlL2hHL2dCclZRa0cKSUlvdk9CSnJCM1llUUJIaTJ4TEVYbWpWNnI0WTVxdHJvZWk5UUJLRFQrWXppYzVQdnhwcEFjVlJ0bDRDd09ySwpPbGZqQ01yZkFjUHNUSFYvWG1FQURNcjVFd01KcVFVRGJudTc2TGhSenBpdnlMdmVRYzU5d3FPVU1GTCtKQTJHCkx1NmF6UUtCZ1FDSXBoMW4vdzRNc0pTOFYrQjRsRUZVOTNCMjEyRzhrZzk5ZDZhWTBnd25XWTluREFjWDFZa0sKRHRrMDlNWERYNDlvaU1IU1hHaFlrKzZiZ2FnQkpWNVBzcTgzNTFRN2ZIcXpEMGhsc0pCNU8yaUc3TXBYeTArOQp0NDcvcEk5NElLVnFrQWpwMnY5TDFIL2hVZUhFeWFVRHpkWnFjT09vdW96NUNDdUp0SUFLM3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUlNKeks2blEwTGxPcDBGdlh1VU95REFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFEREEwcUxtUmxabUYxYkhRdWMzWmpNQjRYRFRJME1EWXhOVEl6TlRVME9Gb1hEVE0wTURZeApNekl6TlRVME9Gb3dHREVXTUJRR0ExVUVBd3dOS2k1a1pXWmhkV3gwTG5OMll6Q0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMOGpwS0laanhhMWFpLzAxSFUrV3pzRDFtdytyZDJZZU9laGZUK3kKcXpEd0VXQW96ZXdnR3JlRW8rLzNqS3Z1RWx5K3VyVFR3anNsRnNpNzBnWFZoNEJMbnhvbGdZZDVDcEJMUEFpbApxd0RuOFdUTnhPODlsWHdqeWZqZU1SdUs0bTNHMjRrVk5MMXgrU3p6NytoMTdvTFhZcGtlSWg4TkRTUkZ4cENGCmVSeEpkYVFUWUtlSEhzdHkyU0RROXNwWEIwOFFvVWZKYjgxdjdGQ2N5R2JKU2theXQ5SjU3NmdTUjduRUFaWjIKOU1SQmxSdzRzUzRrOE1KRHdwbmVkSDEzK2cwZTFBR29CN25XcGRveG1wUFhoRXpKaC9EdWt6WTRldUYyQk9rNgozVEIrbmcrVjN2dWF3R0JvRjhac0ZxU0xvRlM4YkYrVGhPaHM4MUpseC93SVFhc0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU1BNNDVwaDI5WGNXRnduTEgxcVdQQzkxTFdMekFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVo5ejNzek1aQUkyUEppM0dPU284ZkJ5dXdZUDRxa2FEeFBiR3dXTnJlSDBsCk9sTmVkOUNrNEZXcFRXRWVJdzhFQ1lTSW1ESUNua2hTSFdSeGJhVWVXZitZNkhnS3NKTWZoM0pFQ2JxalVicG0KMHFTMVYrQjgzbHVFL0hab2diSmtodGRBSHZMUVl5YXBleDJOS252V2dTbVhZbkJRSFhwWkF2ek9yVC83d1NObgo2M1BGdWk3ZkdHT1pVYUZRRzlzWm9JakFDSHZTRzgwd2RWV0xyczgvUG1YcEdGT2J6RFR2MkY0OVlkb0paNVdVCkMxVGtyOFdzckJabE1vU0h1cmVpeGJGYVJ3U3lYd2tBMnJTMk5xbC90K3IySGYwTWdDTzdHSDRwYkh0TEVGT3kKaFBaeHpsbFhTbE11eFVYZlQ1MGdhOTEvWWQwa05mdHByOXZQa1FLcDdRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: wallarm-sidecar/templates/controller-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-release-wallarm-sidecar
  annotations:
    helm.sh/hook: pre-install
    helm.sh/resource-policy: keep
    helm.sh/hook-delete-policy: before-hook-creation
    
  labels:
    app.kubernetes.io/name: wallarm-sidecar
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/app: wallarm-sidecar
    app.kubernetes.io/version: "4.10.6-1"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: admission-webhook
webhooks:
  - name: injector.sidecar.wallarm.io
    admissionReviewVersions: ["v1"]
    matchPolicy: Equivalent
    rules:
      - apiGroups: ["*"]
        apiVersions: ["v1"]
        operations:
          - CREATE
        resources:
          - pods
    objectSelector:
      matchLabels:
        wallarm-sidecar: enabled
    failurePolicy: Fail
    clientConfig:
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUlNKeks2blEwTGxPcDBGdlh1VU95REFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFEREEwcUxtUmxabUYxYkhRdWMzWmpNQjRYRFRJME1EWXhOVEl6TlRVME9Gb1hEVE0wTURZeApNekl6TlRVME9Gb3dHREVXTUJRR0ExVUVBd3dOS2k1a1pXWmhkV3gwTG5OMll6Q0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMOGpwS0laanhhMWFpLzAxSFUrV3pzRDFtdytyZDJZZU9laGZUK3kKcXpEd0VXQW96ZXdnR3JlRW8rLzNqS3Z1RWx5K3VyVFR3anNsRnNpNzBnWFZoNEJMbnhvbGdZZDVDcEJMUEFpbApxd0RuOFdUTnhPODlsWHdqeWZqZU1SdUs0bTNHMjRrVk5MMXgrU3p6NytoMTdvTFhZcGtlSWg4TkRTUkZ4cENGCmVSeEpkYVFUWUtlSEhzdHkyU0RROXNwWEIwOFFvVWZKYjgxdjdGQ2N5R2JKU2theXQ5SjU3NmdTUjduRUFaWjIKOU1SQmxSdzRzUzRrOE1KRHdwbmVkSDEzK2cwZTFBR29CN25XcGRveG1wUFhoRXpKaC9EdWt6WTRldUYyQk9rNgozVEIrbmcrVjN2dWF3R0JvRjhac0ZxU0xvRlM4YkYrVGhPaHM4MUpseC93SVFhc0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU1BNNDVwaDI5WGNXRnduTEgxcVdQQzkxTFdMekFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVo5ejNzek1aQUkyUEppM0dPU284ZkJ5dXdZUDRxa2FEeFBiR3dXTnJlSDBsCk9sTmVkOUNrNEZXcFRXRWVJdzhFQ1lTSW1ESUNua2hTSFdSeGJhVWVXZitZNkhnS3NKTWZoM0pFQ2JxalVicG0KMHFTMVYrQjgzbHVFL0hab2diSmtodGRBSHZMUVl5YXBleDJOS252V2dTbVhZbkJRSFhwWkF2ek9yVC83d1NObgo2M1BGdWk3ZkdHT1pVYUZRRzlzWm9JakFDSHZTRzgwd2RWV0xyczgvUG1YcEdGT2J6RFR2MkY0OVlkb0paNVdVCkMxVGtyOFdzckJabE1vU0h1cmVpeGJGYVJ3U3lYd2tBMnJTMk5xbC90K3IySGYwTWdDTzdHSDRwYkh0TEVGT3kKaFBaeHpsbFhTbE11eFVYZlQ1MGdhOTEvWWQwa05mdHByOXZQa1FLcDdRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      service:
        namespace: "default"
        name: my-release-wallarm-sidecar-controller
        port: 443
        path: "/inject"
    sideEffects: None
