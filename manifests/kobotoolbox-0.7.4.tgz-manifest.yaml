---
# Source: kobotoolbox/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: kobotoolbox/charts/rediscache/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-rediscache
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: kobotoolbox/charts/redismain/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redismain
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: kobotoolbox/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "a29ibw=="
  mongodb-passwords: "a29ibw=="
---
# Source: kobotoolbox/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "YWRtaW4="
  password: "a29ibw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: kobotoolbox/charts/rediscache/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rediscache
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "YnJGZFM5YjdYcA=="
---
# Source: kobotoolbox/charts/redismain/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redismain
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "YnJGZFM5YjdYcA=="
---
# Source: kobotoolbox/templates/enketo-conf.yaml
# The Enketo conf needs to be a Secret because it includes passwords
apiVersion: v1
kind: Secret
metadata:
  name: my-release-enketo
  namespace: default
stringData:
  config.json: |-
    {
      "app name": "Enketo Express for KoBo Toolbox",
      "linked form and data server": {
        "name": "KoBo Toolbox",
        "server url": "",
        "api key": "WEHQJCXHJ2XOBXGOGMXCUJYXQP9ZZFVY4FHLCSKJIWAWPTCMGMECGNBCHXVBFCFT1H5TQTQCKB0J7DF2X23WC7EHOCCVQ7K8CY6QO9C8NMERACUM6S2QQEER"
      },
      "encryption key": "w0RkyuQSB33md8cZB5Xx",
      "less secure encryption key": "wUNQWPwA3bDVzckKKtS4",
      "widgets": [
        "note",
        "select-desktop",
        "select-mobile",
        "autocomplete",
        "geo",
        "textarea",
        "url",
        "table",
        "radio",
        "date",
        "time",
        "datetime",
        "select-media",
        "file",
        "draw",
        "rank",
        "likert",
        "range",
        "columns",
        "image-view",
        "comment",
        "image-map",
        "date-native",
        "date-native-ios",
        "date-mobile",
        "text-max",
        "text-print",
        "rating",
        "thousands-sep"
      ],
      "redis": {
        "cache": {
          "host": "my-release-rediscache-master",
          "password": "brFdS9b7Xp",
          "port": "6379"
        },
        "main": {
          "host": "my-release-redismain-master",
          "password": "brFdS9b7Xp",
          "port": "6379"
        }
      },
      "google": {
        "api key": "",
        "analytics": {
          "ua": "",
          "domain": "http://ee.example.com"
        }
      },
      "payload limit": "1mb",
      "text field character limit": 1000000,
      "maps": [
        {
          "name": "humanitarian",
          "tiles": [ "https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> & <a href=\"https://www.hotosm.org/updates/2013-09-29_a_new_window_on_openstreetmap_data\">Yohan Boniface & Humanitarian OpenStreetMap Team</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        },
        {
          "name": "satellite",
          "tiles": [ "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}" ],
          "attribution": "Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community"
        },
        {
          "name": "terrain",
          "tiles": [ "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        },
        {
          "name": "streets",
          "tiles": [ "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" ],
          "attribution": "&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> | <a href=\"https://www.openstreetmap.org/copyright\">Terms</a>"
        }
      ]
    }
---
# Source: kobotoolbox/templates/kobo-secrets.yaml
# The Enketo conf needs to be a Secret because it includes passwords
apiVersion: v1
kind: Secret
metadata:
  name: my-release-secrets
  namespace: default
data:
  # For now, you must set ENKETO_API_TOKEN, used by KPI and KoBoCAT, to the same
  # value as ENKETO_API_KEY. Eventually, KPI and KoBoCAT will also read
  # ENKETO_API_KEY and the duplication will no longer be necessary.
  #  For a description of this setting, see "api key" here:
  #  https://github.com/kobotoolbox/enketo-express/tree/master/config#linked-form-and-data-server.
  ENKETO_API_KEY: "V0VIUUpDWEhKMlhPQlhHT0dNWENVSllYUVA5WlpGVlk0RkhMQ1NLSklXQVdQVENNR01FQ0dOQkNIWFZCRkNGVDFINVRRVFFDS0IwSjdERjJYMjNXQzdFSE9DQ1ZRN0s4Q1k2UU85QzhOTUVSQUNVTTZTMlFRRUVS"
  ENKETO_API_TOKEN: "V0VIUUpDWEhKMlhPQlhHT0dNWENVSllYUVA5WlpGVlk0RkhMQ1NLSklXQVdQVENNR01FQ0dOQkNIWFZCRkNGVDFINVRRVFFDS0IwSjdERjJYMjNXQzdFSE9DQ1ZRN0s4Q1k2UU85QzhOTUVSQUNVTTZTMlFRRUVS"
  ENKETO_LINKED_FORM_AND_DATA_SERVER_API_KEY: "V0VIUUpDWEhKMlhPQlhHT0dNWENVSllYUVA5WlpGVlk0RkhMQ1NLSklXQVdQVENNR01FQ0dOQkNIWFZCRkNGVDFINVRRVFFDS0IwSjdERjJYMjNXQzdFSE9DQ1ZRN0s4Q1k2UU85QzhOTUVSQUNVTTZTMlFRRUVS"
  ENKETO_ENCRYPTION_KEY: "dzBSa3l1UVNCMzNtZDhjWkI1WHg="

  # Canonically a 50-character random string. For Django 1.8.13, see https://docs.djangoproject.com/en/1.8/ref/settings/#secret-key and https://github.com/django/django/blob/4022b2c306e88a4ab7f80507e736ce7ac7d01186/django/core/management/commands/startproject.py#L29-L31.
  # To generate a secret key in the same way as `django-admin startproject` you can run:
  # docker-compose run --rm kpi python -c 'from django.utils.crypto import get_random_string; print(get_random_string(50, "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)"))'
  DJANGO_SECRET_KEY: "RUtNdlJ0VDJSRkIzeER2RnR5NFNWQ3NUeWFRQUhTOWFBMm1rUnF0VHA5elFZejQ4ZnA="

  KOBO_SUPERUSER_PASSWORD: "a29ibw=="

  # Mongo Passwords
  MONGO_INITDB_ROOT_PASSWORD: "a29ibw=="
  KOBO_MONGO_PASSWORD: "a29ibw=="

  postgresPostgresPassword: "YWRtaW4="
  POSTGRES_PASSWORD: "YWRtaW4="

  KC_DATABASE_URL: "cG9zdGdpczovL3Bvc3RncmVzOmFkbWluQG15LXJlbGVhc2UtcG9zdGdyZXNxbDo1NDMyL2tvYm9jYXQ="

  KPI_DATABASE_URL: "cG9zdGdpczovL3Bvc3RncmVzOmFkbWluQG15LXJlbGVhc2UtcG9zdGdyZXNxbDo1NDMyL2tvYm9mb3Jt"
  KPI_URL: "cG9zdGdpczovL3Bvc3RncmVzOmFkbWluQG15LXJlbGVhc2UtcG9zdGdyZXNxbDo1NDMyL2tvYm9mb3Jt"

  EMAIL_HOST_PASSWORD: ""

  REDIS_PASSWORD: "YnJGZFM5YjdYcA=="
  REDIS_SESSION_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzY2FjaGUtbWFzdGVyOjYzNzkvMg=="
  REDIS_LOCK_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzY2FjaGUtbWFzdGVyOjYzNzkvMw=="
  CACHE_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzY2FjaGUtbWFzdGVyOjYzNzkvNQ=="
  KOBOCAT_BROKER_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzbWFpbi1tYXN0ZXI6NjM3OS8y"
  KPI_BROKER_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzbWFpbi1tYXN0ZXI6NjM3OS8x"
  MONGO_DB_URL: "bW9uZ29kYjovL2tvYm86a29ib0BteS1yZWxlYXNlLW1vbmdvZGI6MjcwMTcvZm9ybWh1Yg=="
  SERVICE_ACCOUNT_BACKEND_URL: "cmVkaXM6Ly86YnJGZFM5YjdYcEBteS1yZWxlYXNlLXJlZGlzY2FjaGUtbWFzdGVyOjYzNzkvNg=="
---
# Source: kobotoolbox/templates/kobo-secrets.yaml
# kobocat secrets
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kobocat-secrets
  namespace: default
data:
---
# Source: kobotoolbox/templates/kobo-secrets.yaml
# kpi secrets
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kpi-secrets
  namespace: default
data:
---
# Source: kobotoolbox/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: kobotoolbox/charts/mongodb/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  create-user.js: |
    db.createUser({
      user: "kobo",
      pwd: "kobo",
      roles: [ { role: 'readWrite', db: "formhub" } ]
    })
  index.js: |
    db.getSiblingDB('formhub').instances.createIndex( { _userform_id: 1 } )
---
# Source: kobotoolbox/charts/rediscache/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-rediscache-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: kobotoolbox/charts/rediscache/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-rediscache-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: kobotoolbox/charts/rediscache/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-rediscache-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: kobotoolbox/charts/redismain/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redismain-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: kobotoolbox/charts/redismain/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redismain-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: kobotoolbox/charts/redismain/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redismain-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: kobotoolbox/templates/kobo-assets.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-assets
  namespace: default
binaryData:
  favicon.ico: 
  icon_180x180.png: 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
---
# Source: kobotoolbox/templates/kobo-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kobo
  namespace: default
data:
  kpi_uwsgi.ini: |
    
     [uwsgi]
     # load apps in each worker instead of the master, this also increases
     # memory consumption
     lazy-apps = true
     
     # log requests with a 5xx response
     log-5xx = true
     
     # log requests with a 4xx response
     log-4xx = true
     
     # disable request logging
     disable-logging = false
     
     # exit if no app can be loaded
     need-app = true
     
     # desired to ensure all options are known
     strict = false
     
     # number of threads for each worker
     threads = 2
     
     # cleanup sockets on worker reload
     vacuum = true
     
     # directory structure
     chdir       = $(KPI_SRC_DIR)
     # logto       = $(KPI_LOGS_DIR)/uwsgi.log
     
     # Run the application at a non-root URL path, e.g. http://hostname/KPI_PREFIX.
     # See http://uwsgi-docs.readthedocs.org/en/latest/Nginx.html#hosting-multiple-apps-in-the-same-process-aka-managing-script-name-and-path-info
     # This supersedes `wsgi-file = $(KPI_SRC_DIR)/kobo/wsgi.py`.
     manage-script-name = true
     mount              = $(KPI_PREFIX)=$(KPI_SRC_DIR)/kobo/wsgi.py
     
     # process related settings
     master              = true
     harakiri            = $(KPI_UWSGI_HARAKIRI)
     worker-reload-mercy = $(KPI_UWSGI_WORKER_RELOAD_MERCY)
     
     # monitoring (use with `uwsgitop :1717`, for example)
     stats = :1818
     memory-report = true
     
     # Overrideable default of 2 uWSGI processes.
     if-env = KPI_UWSGI_WORKERS_COUNT
     workers = %(_)
     endif =
     if-not-env = KPI_UWSGI_WORKERS_COUNT
     workers = 2
     endif =
     
     # activate cheaper mode
     # if-env = KPI_UWSGI_CHEAPER_WORKERS_COUNT
     # cheaper-algo = busyness
     # cheaper = %(_)
     # cheaper-initial = %(_)
     # cheaper-step = 1
     # cheaper-overload = 30
     # cheaper-busyness-max = 50
     # cheaper-busyness-min = 25
     # cheaper-busyness-multiplier = 20
     # endif =
     
     # # stop spawning new workers if total memory consumption grows too large
     # if-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
     # cheaper-rss-limit-soft = %(_)
     # endif =
     # if-not-env = KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT
     # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
     # endif =
     
     # # respawn processes after serving KPI_UWSGI_MAX_REQUESTS requests (default 5000)
     # if-env = KPI_UWSGI_MAX_REQUESTS
     # max-requests = %(_)
     # max-requests-delta = 2
     # endif =
     
     # # respawn workers when their memory consumption grows too large
     # if-env = KPI_UWSGI_RELOAD_ON_RSS_MB
     # reload-on-rss = %(_)
     # endif =
     # if-not-env = KPI_UWSGI_RELOAD_ON_RSS_MB
     # reload-on-rss = 512
     # endif =
     
     # respawn workers only after they have run for at leat min-worker-lifetime
     if-env = KPI_UWSGI_MIN_WORKER_LIFTIME
     min-worker-lifetime = %(_)
     endif =
     if-not-env = KPI_UWSGI_MIN_WORKER_LIFTIME
     min-worker-lifetime = 120
     endif =
     
     # respawn workers only after they have run for at leat min-worker-lifetime
     if-env = KPI_UWSGI_MAX_WORKER_LIFTIME
     max-worker-lifetime = %(_)
     endif =
     
     socket          = [::]:8003
     buffer-size     = 32768
     listen          = @(/proc/sys/net/core/somaxconn)
     
     uid             = $(UWSGI_USER)
     gid             = $(UWSGI_GROUP)
     die-on-term      = false
     
     # uWSGI does not pass locale information to the application by default
     env = LC_ALL=en_US.UTF-8
     
     # Required for Raven/Sentry
     enable-threads  = true
     
     # Custom tweaks
     single-interpreter = true
     post-buffering = true
     ignore-sigpipe = true
     ignore-write-errors = true
     disable-write-exception = true
     vacuum = true
     
  kc_uwsgi.ini: |
    
     [uwsgi]
     
     # load apps in each worker instead of the master
     # This also increases memory consumption
     # lazy-apps = true
     
     # log requests with a 5xx response
     log-5xx = true
     
     # log requests with a 4xx response
     log-4xx = true
     
     # disable request logging
     disable-logging = false
     
     # exit if no app can be loaded
     need-app = true
     
     # desired to ensure all options are known
     strict = false
     
     # number of threads for each worker
     threads = 2
     
     # cleanup sockets on worker reload
     vacuum = true
     
     # directory structure
     chdir           = $(KOBOCAT_SRC_DIR)
     module          = onadata.apps.main.wsgi
     # logto           = $(KOBOCAT_LOGS_DIR)/uwsgi.log
     
     # process related settings
     master              = true
     harakiri            = $(KC_UWSGI_HARAKIRI)
     worker-reload-mercy = $(KC_UWSGI_WORKER_RELOAD_MERCY)
     
     # monitoring (use with `uwsgitop :1717`, for example)
     stats = :1717
     memory-report = false
     
     # Overrideable default of 2 uWSGI processes.
     if-env = KC_UWSGI_WORKERS_COUNT
     workers = %(_)
     endif =
     if-not-env = KC_UWSGI_WORKERS_COUNT
     workers = 2
     endif =
     
     # # activate cheaper mode
     # if-env = KC_UWSGI_CHEAPER_WORKERS_COUNT
     # cheaper-algo = spare
     # cheaper = %(_)
     # cheaper-initial = %(_)
     # cheaper-step = 2
     # cheaper-overload = 1
     # endif =
     
     # # stop spawning new workers if total memory consumption grows too large
     # if-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
     # cheaper-rss-limit-soft = %(_)
     # endif =
     # if-not-env = KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT
     # cheaper-rss-limit-soft = %(2 * 1024 * 1024 * 1024)
     # endif =
     
     # # respawn processes after serving KC_UWSGI_MAX_REQUESTS requests (default 5000)
     # if-env = KC_UWSGI_MAX_REQUESTS
     # max-requests = %(_)
     # max-requests-delta = 2
     # endif =
     
     # # respawn individual workers when their memory consumption grows too large
     # if-env = KC_UWSGI_RELOAD_ON_RSS_MB
     # reload-on-rss = %(_)
     # endif =
     # if-not-env = KC_UWSGI_RELOAD_ON_RSS_MB
     # reload-on-rss = 512
     # endif =
     
     # respawn workers only after they have run for at leat min-worker-lifetime
     if-env = KC_UWSGI_MIN_WORKER_LIFTIME
     min-worker-lifetime = %(_)
     endif =
     if-not-env = KC_UWSGI_MIN_WORKER_LIFTIME
     min-worker-lifetime = 120
     endif =
     
     # respawn workers only after they have run for at leat min-worker-lifetime
     if-env = KC_UWSGI_MAX_WORKER_LIFTIME
     max-worker-lifetime = %(_)
     endif =
     
     socket          = [::]:8001
     buffer-size     = 32768
     listen          = @(/proc/sys/net/core/somaxconn)
     
     uid             = $(UWSGI_USER)
     gid             = $(UWSGI_GROUP)
     die-on-term     = false
     
     # Required for Raven/Sentry
     enable-threads  = false
     
     # Custom tweaks
     single-interpreter = true
     post-buffering = true
     ignore-sigpipe = true
     ignore-write-errors = true
     disable-write-exception = true
     vacuum = true
     
  # Dummy script to drop in place of various init scripts to disable...
  empty_script: |
    #!/bin/bash
    echo "Skipping $0 $@"
---
# Source: kobotoolbox/templates/kobo-postgres-init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgres-init
  namespace: default
data:
  init.sql: |
    ALTER USER "postgres" WITH SUPERUSER;
    CREATE DATABASE "kobocat" OWNER "postgres";
    \c "kobocat"
    CREATE EXTENSION IF NOT EXISTS postgis;
    CREATE EXTENSION IF NOT EXISTS postgis_topology;
    CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
    CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
    CREATE DATABASE "koboform" OWNER "postgres";
    \c "koboform"
    CREATE EXTENSION IF NOT EXISTS postgis;
    CREATE EXTENSION IF NOT EXISTS postgis_topology;
    CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
    CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
---
# Source: kobotoolbox/templates/nginx-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nginx-confd
  namespace: default
data:
  default.conf: |
    charset     utf-8;
    gzip on;
    gzip_disable "msie6";
    
    # Default configuration
    server {
      listen 80 default_server;
      listen [::]:80 default_server;
      # Make sure we use the k8s resolver and not nginx custom logic
      # Disabling ipv6 due to https://stackoverflow.com/questions/66386139/nginx-forward-proxy-config-is-causing-upstream-server-temporarily-disabled-whil
      resolver 127.0.0.1 ipv6=off;
    
      root /var/www/html;
    
      # Add index.php to the list if you are using PHP
      index index.html index.htm index.nginx-debian.html;
    
      server_name $hostname;
    
      location / {
        # return empty response
        return 204;
      }
    
      # Proxy ELB status
      location ~ /elb/([^/]*)/(.*)$ {
        proxy_pass http://127.0.0.1/$2;
        proxy_set_header Host $1;
        proxy_intercept_errors on;
        access_log  off;
      }
    }
    
    # KoBoCAT HTTP.
    server {
      listen      80;
      server_name kc.kobo.local kc.docker.internal kc.example.com;
    
      # Allow 100M upload
      client_max_body_size 500M;
      # Support bigger headers. Useful for huge cookies
      large_client_header_buffers 8 16k;
    
      location / {
        uwsgi_read_timeout 130;
        uwsgi_send_timeout 130;
        uwsgi_pass 127.0.0.1:8001;
        # For setting HTTP headers, see http://stackoverflow.com/a/14133533/1877326.
        uwsgi_param HTTP_X_REAL_IP $remote_addr;
        uwsgi_param HTTP_X_FORWARDED_FOR $remote_addr;
        # uwsgi_param HTTP_X_FORWARDED_PROTO $scheme;
        include /etc/nginx/uwsgi_params;
    
        # Support longer query strings. See issue #147
        uwsgi_buffers 8 16k;
        uwsgi_buffer_size 16k;
      }
    
      location /static {
        alias /srv/www/kobocat;
      }
    
      # media files
      location /protected/ {
        internal;
        alias /media/;
      }
      location ~ ^/protected-s3/(.*)$ {
        # Allow internal requests only, i.e. return a 404 to any client who
        # tries to access this location directly
        internal;
        # Name resolution won't work at all without specifying a resolver here.
        # Configuring a validity period is useful for overriding Amazon's very
        # short (5-second?) TTLs.
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 10s;
        # Everything that S3 needs is in the URL; don't pass any headers or
        # body content that the client may have sent
        proxy_pass_request_body off;
        proxy_pass_request_headers off;
      
        # Stream the response to the client instead of trying to read it all at
        # once, which would potentially use disk space
        proxy_buffering off;
      
        # Don't leak S3 headers to the client. List retrieved from:
        # https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html
        proxy_hide_header x-amz-delete-marker;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-version-id;
      
        # S3 will complain if `$1` contains non-encoded special characters.
        # KoBoCAT must encode twice to make sure `$1` is still encoded after
        # NGINX's automatic URL decoding.
        proxy_pass $1;
      }
    }
    
    # KoBoForm HTTP.
    server {
      listen      80;
      server_name kobo.kobo.local kobo.docker.internal kobo.example.com;
    
      # Allow 100M upload
      client_max_body_size 500M;
      # Support bigger headers. Useful for huge cookies
      large_client_header_buffers 8 16k;
    
      location ~ ^/forms/(.*) {
        return 301 /$1;
      }
    
      location /static {
        alias /srv/www/kpi;
    
        # gzip configs from here
        # http://stackoverflow.com/a/12644530/3088435
        gzip on;
        gzip_disable "msie6";
        gzip_comp_level 6;
        gzip_min_length 1100;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_types
          text/plain
          text/css
          text/js
          text/xml
          text/javascript
          application/javascript
          application/x-javascript
          application/json
          application/xml
          application/xml+rss;
      }
    
      # public media, e.g. custom logos (KPI `ConfigurationFile`s)
      location /media/__public {
          alias /srv/kpi_media/__public;
      }
    
      error_page 418 = /static/html/Offline.html;
    
      location / {
        uwsgi_read_timeout 130;
        uwsgi_send_timeout 130;
        uwsgi_pass 127.0.0.1:8003;
        # For setting HTTP headers, see http://stackoverflow.com/a/14133533/1877326.
        uwsgi_param HTTP_X_REAL_IP $remote_addr;
        uwsgi_param HTTP_X_FORWARDED_FOR $remote_addr;
        # uwsgi_param HTTP_X_FORWARDED_PROTO $scheme;
        include /etc/nginx/uwsgi_params;
    
        # Support longer query strings. See issue #147
        uwsgi_buffers 8 16k;
        uwsgi_buffer_size 16k;
      }
      location ~ ^/protected-s3/(.*)$ {
        # Allow internal requests only, i.e. return a 404 to any client who
        # tries to access this location directly
        internal;
        # Name resolution won't work at all without specifying a resolver here.
        # Configuring a validity period is useful for overriding Amazon's very
        # short (5-second?) TTLs.
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 10s;
        # Everything that S3 needs is in the URL; don't pass any headers or
        # body content that the client may have sent
        proxy_pass_request_body off;
        proxy_pass_request_headers off;
      
        # Stream the response to the client instead of trying to read it all at
        # once, which would potentially use disk space
        proxy_buffering off;
      
        # Don't leak S3 headers to the client. List retrieved from:
        # https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html
        proxy_hide_header x-amz-delete-marker;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-version-id;
      
        # S3 will complain if `$1` contains non-encoded special characters.
        # KoBoCAT must encode twice to make sure `$1` is still encoded after
        # NGINX's automatic URL decoding.
        proxy_pass $1;
      }
    }
---
# Source: kobotoolbox/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
  storageClassName: standard
---
# Source: kobotoolbox/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: kobotoolbox/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: kobotoolbox/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: kobotoolbox/charts/rediscache/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rediscache-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: rediscache
    app.kubernetes.io/instance: my-release
---
# Source: kobotoolbox/charts/rediscache/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rediscache-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: rediscache
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: kobotoolbox/charts/redismain/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redismain-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redismain
    app.kubernetes.io/instance: my-release
---
# Source: kobotoolbox/charts/redismain/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redismain-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redismain
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: kobotoolbox/templates/enketo-svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-enketo
  namespace: default
spec:
  selector:
    org.kobotoolbox.instance: my-release-enketo
  ports:
    - targetPort: 8005
      port: 8005
      name: enketo
  type: ClusterIP
---
# Source: kobotoolbox/templates/kobo-svc.yaml
# Load-balancer for SGW
kind: Service
apiVersion: v1
metadata:
  name: my-release-kobo
  namespace: default
spec:
  selector:
    org.kobotoolbox.instance: my-release-kobo
  ports:
    - targetPort: 80
      port: 80
      name: www
    - targetPort: 8003
      port: 8003
      name: kpi
    - targetPort: 8001
      port: 8001
      name: kobocat
  type: ClusterIP
---
# Source: kobotoolbox/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-12.1.31
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:5.0.10-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "kobo"
            - name: MONGODB_EXTRA_DATABASES
              value: "formhub"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: custom-init-scripts
          configMap:
            name: my-release-mongodb-init-scripts
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: kobotoolbox/templates/enketo-deploy.yaml
# Sync gateway pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-enketo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      org.kobotoolbox.instance: my-release-enketo
  template:
    metadata:
      annotations:
        # Add a checksum to force the re-creation of the pods on every config update
        checksum/config: d18f8df542383df912f9d882663abd0b977febb0821487cce8f961de524ed036
      labels:
        org.kobotoolbox.instance: my-release-enketo
    spec:
      initContainers:
        # Copy settings from configmap to a volume, since it needs to be writable by the container, which ConfigMaps cannot be
        - name: copy-config
          image: busybox
          command:
            - sh
            - -c
            - |
              cp /config-init/config.json /srv/src/enketo_express/config/
          volumeMounts:
            - name: enketo-config
              mountPath: /config-init/config.json
              subPath: config.json
              readOnly: true
            - name: cache-volume
              subPath: config
              mountPath: /srv/src/enketo_express/config

      containers:
        # Enketo is the web-based form viewer
        - name: enketo
          image: "enketo/enketo-express:3.0.4"
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            # Config
            - name: cache-volume
              subPath: config/config.json
              mountPath: /srv/src/enketo_express/config/config.json
            # Custom icons
            - name: kobo-assets
              mountPath: /srv/src/enketo_express/public/images/favicon.ico
              subPath: favicon.ico
              readOnly: true
            - name: kobo-assets
              mountPath: /srv/src/enketo_express/public/images/icon_180x180.png
              subPath: icon_180x180.png
              readOnly: true
          ports:
            - containerPort: 8005
          env:
            - name: ENKETO_BUILD_IE11
              value: 'true'
            # This one is REALLY slow to come up since we rebuild the entire webapp at startup...
            # It's probably best to not have a readiness probe, as this would delay the termination of older pods
            # readinessProbe:
            #   tcpSocket:
            #     port: 8005
            #   initialDelaySeconds: 30
            #   periodSeconds: 30
            #   failureThreshold: 15
          livenessProbe:
            tcpSocket:
              port: 8005
            initialDelaySeconds: 600
            periodSeconds: 20

      volumes:
        - name: enketo-config
          secret:
            secretName: my-release-enketo
        - name: kobo-assets
          configMap:
            name: my-release-assets
        # Using an emptyDir to cache compiled statics... it will survive container crashes, but not pod restarts
        - name: cache-volume
          emptyDir: {}
---
# Source: kobotoolbox/templates/kobo-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kobo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      org.kobotoolbox.instance: my-release-kobo
  template:
    metadata:
      annotations:
        # Add a checksum to force the re-creation of the pods on every config update
        # TODO: better checksum?
        checksum/config: d5d5de909a107d703f080edea6ce900a0f347577ea0fe5115210544d41c91abe
        checksum/nginx_conf: b0a1b0b28f053e399e766562b1a7471b43c32941cd8f2fa6ae80d6ee500a40a4
        co.elastic.logs/enabled: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9117"
        prometheus.io/path: "/metrics"
      labels:
        org.kobotoolbox.instance: my-release-kobo
    spec:
      priorityClassName: system-cluster-critical
      # Define internal host names since we're doing host-based routing
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "kobo.kobo.local"
            - "kc.kobo.local"

      initContainers:
        # Wait for Mongo and Postgres
        - name: wait-db
          image: jwilder/dockerize
          # We don't care about having latest...
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - dockerize -timeout=120s -wait tcp://${KOBO_MONGO_HOST}:${KOBO_MONGO_PORT} -wait tcp://${POSTGRES_HOST}:${POSTGRES_PORT}
          env:
            - name: KOBO_MONGO_PORT
              value: '27017'
            - name: KOBO_MONGO_HOST
              value: my-release-mongodb
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_DATABASE
              value: "formhub"
            - name: MONGO_DB_NAME
              value: "formhub"
            - name: KOBO_MONGO_USERNAME
              value: "kobo"
            - name: POSTGRES_PORT
              value: '5432'
            - name: POSTGRES_HOST
              value: "my-release-postgresql"
            - name: POSTGRES_USER
              value: "postgres"
            - name: KC_POSTGRES_DB
              value: "kobocat"
            - name: KPI_POSTGRES_DB
              value: "koboform"
      # All containers need to be in the same pod since they share volumes!
      # This also means they probably can't be scaled up... (?)
      containers:
        # Nginx does the host-based routing for all containers
        - name: nginx
          image: "nginx:1.21"
          volumeMounts:
            # Config
            - name: nginx-confd
              mountPath: /etc/nginx/conf.d
            # empty init dir
            - name: nginx-init
              mountPath: /docker-entrypoint.d
            # Web files (generated by other containers)
            - name: cache-volume
              subPath: static
              mountPath: /srv/www
            - name: media
              subPath: kobocat_media_uploads
              mountPath: /media
            # expose kpi media
            - name: media
              subPath: kpi_media
              mountPath: /srv/kpi_media
          startupProbe:
            httpGet:
            tcpSocket:
              port: 80
            periodSeconds: 10
            failureThreshold: 30
          readinessProbe:
            tcpSocket:
              port: 80
            periodSeconds: 5
            failureThreshold: 5
          livenessProbe:
            tcpSocket:
              port: 80
            failureThreshold: 5
            periodSeconds: 5
        # Kobocat is the forms API server that Enketo / Collect will connect to
        - name: kobocat
          image: "kobotoolbox/kobocat:2.022.24a"
          terminationMessagePolicy: FallbackToLogsOnError
          ports:
            - containerPort: 8001
            - name: metrics
              containerPort: 1717
              protocol: TCP
          env:
            # Choose between http or https
            - name: PUBLIC_REQUEST_SCHEME
              value: "http"
            # The publicly-accessible domain where your KoBo Toolbox instance will be reached (e.g. example.com).
            - name: PUBLIC_DOMAIN_NAME
              value: example.com
            - name: SESSION_COOKIE_DOMAIN
              value: ".example.com"
            # The private domain used in docker network. Useful for communication between containers without passing through
            # a load balancer. No need to be resolved by a public DNS.
            - name: INTERNAL_DOMAIN_NAME
              value: kobo.local
            # The publicly-accessible subdomain for the KoBoForm form building and management interface (e.g. koboform).
            - name: KOBOFORM_PUBLIC_SUBDOMAIN
              value: kobo
            # The publicly-accessible subdomain for the KoBoCAT data collection and project management interface (e.g.kobocat).
            - name: KOBOCAT_PUBLIC_SUBDOMAIN
              value: kc
            # The publicly-accessible subdomain for the Enketo Express web forms (e.g. enketo).
            - name: ENKETO_EXPRESS_PUBLIC_SUBDOMAIN
              value: ee
            # The initial superuser's username.
            - name: KOBO_SUPERUSER_USERNAME
              value: "kobo"
            # The e-mail address where your users can contact you.
            - name: KOBO_SUPPORT_EMAIL
              value: "support@example.com"
            - name: DJANGO_ALLOWED_HOSTS
              value: ".example.com .kobo.local localhost"
            - name: SENTRY_ENVIRONMENT
              value: development
            - name: KOBO_MONGO_PORT
              value: '27017'
            - name: KOBO_MONGO_HOST
              value: my-release-mongodb
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_DATABASE
              value: "formhub"
            - name: MONGO_DB_NAME
              value: "formhub"
            - name: KOBO_MONGO_USERNAME
              value: "kobo"
            - name: POSTGRES_PORT
              value: '5432'
            - name: POSTGRES_HOST
              value: "my-release-postgresql"
            - name: POSTGRES_USER
              value: "postgres"
            - name: KC_POSTGRES_DB
              value: "kobocat"
            - name: KPI_POSTGRES_DB
              value: "koboform"
            - name: GOOGLE_ANALYTICS_TOKEN
              value: ""
            - name: KOBOCAT_RAVEN_DSN
              value: ""
            - name: KPI_RAVEN_DSN
              value: ""
            - name: KPI_RAVEN_JS_DSN
              value: ""
            - name: KOBOCAT_DJANGO_DEBUG
              value: "False"
            - name: TEMPLATE_DEBUG
              value: "False"
            - name: KOBOFORM_URL
              value: "http://kobo.example.com"
            - name: KOBOFORM_INTERNAL_URL
              value: "http://kobo.kobo.local"
            - name: KOBOCAT_URL
              value: "http://kc.example.com"
            - name: ENKETO_URL
              value: "http://ee.example.com"
            - name: POSTGRES_DB
              value: "kobocat"
            - name: KPI_INTERNAL_URL
              value: "http://kobo.kobo.local"
            - name: DJANGO_DEBUG
              value: "False"
            - name: RAVEN_DSN
              value: ""
            - name: EMAIL_BACKEND
              value: django.core.mail.backends.smtp.EmailBackend
            - name: EMAIL_HOST
              value: "smtp.gmail.com"
            - name: EMAIL_PORT
              value: "587"
            - name: EMAIL_HOST_USER
              value: ""
            - name: EMAIL_USE_TLS
              value: "True"
            - name: DEFAULT_FROM_EMAIL
              value: ""
            - name: KPI_PORT
              value: '8003'
            - name: "ENKETO_OFFLINE_SURVEYS"
              value: |-
                True
            - name: "ENKETO_PROTOCOL"
              value: |-
                http
            - name: "ENKETO_VERSION"
              value: |-
                Express
            - name: "KC_UWSGI_CHEAPER_RSS_LIMIT_SOFT"
              value: |-
                134217728
            - name: "KC_UWSGI_CHEAPER_WORKERS_COUNT"
              value: |-
                1
            - name: "KC_UWSGI_HARAKIRI"
              value: |-
                120
            - name: "KC_UWSGI_MAX_REQUESTS"
              value: |-
                512
            - name: "KC_UWSGI_MAX_WORKER_LIFTIME"
              value: |-
                
            - name: "KC_UWSGI_MIN_WORKER_LIFTIME"
              value: |-
                3600
            - name: "KC_UWSGI_PROCESS_COUNT"
              value: |-
                2
            - name: "KC_UWSGI_RELOAD_ON_RSS_MB"
              value: |-
                1024
            - name: "KC_UWSGI_WORKERS_COUNT"
              value: |-
                2
            - name: "KC_UWSGI_WORKER_RELOAD_MERCY"
              value: |-
                120
            - name: "KOBOCAT_CELERY_LOG_FILE"
              value: |-
                /srv/logs/celery.log
            - name: "USE_X_FORWARDED_HOST"
              value: |-
                False
            - name: "BACKUPS_DIR"
              value: |-
                /srv/backups
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: my-release-secrets
                  key: KC_DATABASE_URL
          envFrom:
          - secretRef:
              name: my-release-kobocat-secrets
          - secretRef:
              name: my-release-secrets
          volumeMounts:
            # Replace redundant init scripts with empty files
            - name: config
              mountPath: /srv/init/wait_for_mongo.bash
              subPath: empty_script
              readOnly: true
            - name: config
              mountPath: /srv/init/wait_for_postgres.bash
              subPath: empty_script
              readOnly: true
            # Config
            - name: config
              mountPath: /srv/src/kobocat/docker/uwsgi.ini
              subPath: kc_uwsgi.ini
              readOnly: true
            # Store uploaded media in PVC
            - name: media
              subPath: kobocat_media_uploads
              mountPath: /srv/src/kobocat/media
            - name: cache-volume
              subPath: static/kobocat
              mountPath: /srv/static
          startupProbe:
            tcpSocket:
              port: 8001
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8001
            failureThreshold: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 8001
            failureThreshold: 5
            periodSeconds: 5
        # KPI is the main User Interface and admin API
        - name: kpi
          image: "kobotoolbox/kpi:2.022.24d"
          terminationMessagePolicy: FallbackToLogsOnError
          env:
            # Choose between http or https
            - name: PUBLIC_REQUEST_SCHEME
              value: "http"
            # The publicly-accessible domain where your KoBo Toolbox instance will be reached (e.g. example.com).
            - name: PUBLIC_DOMAIN_NAME
              value: example.com
            - name: SESSION_COOKIE_DOMAIN
              value: ".example.com"
            # The private domain used in docker network. Useful for communication between containers without passing through
            # a load balancer. No need to be resolved by a public DNS.
            - name: INTERNAL_DOMAIN_NAME
              value: kobo.local
            # The publicly-accessible subdomain for the KoBoForm form building and management interface (e.g. koboform).
            - name: KOBOFORM_PUBLIC_SUBDOMAIN
              value: kobo
            # The publicly-accessible subdomain for the KoBoCAT data collection and project management interface (e.g.kobocat).
            - name: KOBOCAT_PUBLIC_SUBDOMAIN
              value: kc
            # The publicly-accessible subdomain for the Enketo Express web forms (e.g. enketo).
            - name: ENKETO_EXPRESS_PUBLIC_SUBDOMAIN
              value: ee
            # The initial superuser's username.
            - name: KOBO_SUPERUSER_USERNAME
              value: "kobo"
            # The e-mail address where your users can contact you.
            - name: KOBO_SUPPORT_EMAIL
              value: "support@example.com"
            - name: DJANGO_ALLOWED_HOSTS
              value: ".example.com .kobo.local localhost"
            - name: SENTRY_ENVIRONMENT
              value: development
            - name: KOBO_MONGO_PORT
              value: '27017'
            - name: KOBO_MONGO_HOST
              value: my-release-mongodb
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_DATABASE
              value: "formhub"
            - name: MONGO_DB_NAME
              value: "formhub"
            - name: KOBO_MONGO_USERNAME
              value: "kobo"
            - name: POSTGRES_PORT
              value: '5432'
            - name: POSTGRES_HOST
              value: "my-release-postgresql"
            - name: POSTGRES_USER
              value: "postgres"
            - name: KC_POSTGRES_DB
              value: "kobocat"
            - name: KPI_POSTGRES_DB
              value: "koboform"
            - name: GOOGLE_ANALYTICS_TOKEN
              value: ""
            - name: KOBOCAT_RAVEN_DSN
              value: ""
            - name: KPI_RAVEN_DSN
              value: ""
            - name: KPI_RAVEN_JS_DSN
              value: ""
            - name: KPI_DJANGO_DEBUG
              value: "False"
            - name: TEMPLATE_DEBUG
              value: "False"
            - name: KOBOFORM_URL
              value: "http://kobo.example.com"
            - name: ENKETO_URL
              value: "http://ee.example.com"
            - name: ENKETO_INTERNAL_URL
              value: "http://my-release-enketo:8005"
            - name: KOBOCAT_URL
              value: "http://kc.example.com"
            - name: KOBOCAT_INTERNAL_URL
              value: "http://kc.kobo.local"
            - name: POSTGRES_DB
              value: "koboform"
            # OTHER
            - name: DJANGO_DEBUG
              value: "False"
            - name: RAVEN_DSN
              value: ""
            - name: RAVEN_JS_DSN
              value: ""
            - name: KPI_URL
              value: "http://kobo.example.com"
            - name: EMAIL_BACKEND
              value: django.core.mail.backends.smtp.EmailBackend
            - name: EMAIL_HOST
              value: "smtp.gmail.com"
            - name: EMAIL_PORT
              value: "587"
            - name: EMAIL_HOST_USER
              value: ""
            - name: EMAIL_USE_TLS
              value: "True"
            - name: DEFAULT_FROM_EMAIL
              value: ""
            - name: "C_FORCE_ROOT"
              value: |-
                True
            - name: "DJANGO_LANGUAGE_CODES"
              value: |-
                ar cs de-DE en es fr hi ku pl pt tr zh-hans
            - name: "DKOBO_PREFIX"
              value: |-
                False
            - name: "EMAIL_FILE_PATH"
              value: |-
                ./emails
            - name: "ENKETO_VERSION"
              value: |-
                Express
            - name: "KOBO_SUPPORT_URL"
              value: |-
                http://support.kobotoolbox.org/
            - name: "KOBO_SURVEY_PREVIEW_EXPIRATION"
              value: |-
                24
            - name: "KPI_PREFIX"
              value: |-
                /
            - name: "KPI_UWSGI_CHEAPER_RSS_LIMIT_SOFT"
              value: |-
                134217728
            - name: "KPI_UWSGI_CHEAPER_WORKERS_COUNT"
              value: |-
                1
            - name: "KPI_UWSGI_HARAKIRI"
              value: |-
                120
            - name: "KPI_UWSGI_MAX_REQUESTS"
              value: |-
                512
            - name: "KPI_UWSGI_MAX_WORKER_LIFTIME"
              value: |-
                
            - name: "KPI_UWSGI_MIN_WORKER_LIFTIME"
              value: |-
                3600
            - name: "KPI_UWSGI_PROCESS_COUNT"
              value: |-
                2
            - name: "KPI_UWSGI_RELOAD_ON_RSS_MB"
              value: |-
                1024
            - name: "KPI_UWSGI_WORKERS_COUNT"
              value: |-
                2
            - name: "KPI_UWSGI_WORKER_RELOAD_MERCY"
              value: |-
                120
            - name: "SKIP_CELERY"
              value: |-
                False
            - name: "SYNC_KOBOCAT_XFORMS"
              value: |-
                True
            - name: "SYNC_KOBOCAT_XFORMS_PERIOD_MINUTES"
              value: |-
                30
            - name: "USE_X_FORWARDED_HOST"
              value: |-
                False
            - name: "BACKUPS_DIR"
              value: |-
                /srv/backups
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: my-release-secrets
                  key: KPI_DATABASE_URL
          envFrom:
          - secretRef:
              name: my-release-kpi-secrets
          - secretRef:
              name: my-release-secrets
          ports:
            - containerPort: 8003
            - name: metrics
              containerPort: 1818
              protocol: TCP
          volumeMounts:
            # Override init scripts with empty ones
            - name: config
              subPath: empty_script
              mountPath: /srv/init/wait_for_mongo.bash
              readOnly: true
            - name: config
              subPath: empty_script
              mountPath: /srv/init/wait_for_postgres.bash
              readOnly: true
            - name: config
              subPath: empty_script
              mountPath: /etc/profile.d/runtime_variables_kpi.source.bash.sh
              readOnly: true
            # Web server settings
            - name: config
              subPath: kpi_uwsgi.ini
              mountPath: /srv/src/kpi/docker/uwsgi.ini
              readOnly: true
            # www
            - name: cache-volume
              subPath: static/kpi
              mountPath: /srv/static
            # media
            - name: media
              subPath: kpi_media
              mountPath: /srv/src/kpi/media
            - name: media
              subPath: kobocat_media_uploads
              mountPath: /srv/src/kobocat/media
          startupProbe:
            tcpSocket:
              port: 8003
            failureThreshold: 40
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8003
            failureThreshold: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 8003
            failureThreshold: 5
            periodSeconds: 5
      volumes:
        - name: nginx-confd
          configMap:
            name: my-release-nginx-confd
        - name: config
          configMap:
            name: my-release-kobo
            # Grant exec permissions
            defaultMode: 0755
        - name: kobo-assets
          configMap:
            name: my-release-assets
        # This volume will host uploaded media. If the pod is scaled to more than 1 replica, it needs to be ReadWriteMany
        - name: media
          # using emptyDir since some hardcoded checks are still done on this media directory even if using online storage
          emptyDir: {}
        # Using an emptyDir to cache compiled statics... it will survive container crashes, but not pod restarts
        - name: cache-volume
          emptyDir: {}
        - name: nginx-init
          emptyDir: {}
---
# Source: kobotoolbox/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r35
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: my-release-postgres-init
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: standard
---
# Source: kobotoolbox/charts/rediscache/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rediscache-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: rediscache
    helm.sh/chart: rediscache-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rediscache
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-rediscache-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rediscache
        helm.sh/chart: rediscache-16.12.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: c4e2c05eee338b0cda7d9569f5baf08fc463a6bad14f633fad0dcb6daba5311d
        checksum/health: 304f32552166e9a8a92c3ef4db901bb4ba33a345d70c1e503e31b9fa80d9e7b4
        checksum/scripts: 493eb15db1bb891e93d6da2bb7bd9e5cb9fc43e8c5bbb469869e9ab745e4f182
        checksum/secret: a2f5e585c04cae63867f7252c64351259842733b63d28d1c8b8a018a70fc7ad0
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-rediscache
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rediscache
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-rediscache
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-rediscache-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-rediscache-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-rediscache-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: rediscache
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: standard
---
# Source: kobotoolbox/charts/redismain/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redismain-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redismain
    helm.sh/chart: redismain-16.12.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redismain
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redismain-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redismain
        helm.sh/chart: redismain-16.12.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: ddb61a3bdfe7d7b9033429dad1947e1047f5089bea07a5ae6ce5410e28687ceb
        checksum/health: d07e13d0f8ac26219d42469c80cf54f03fe963c2719fb5f2e968e2133771cd7c
        checksum/scripts: 27d50faadbb257f51d192593beccb4f1cb892cd0d5e58ebb5642541d32f51cc3
        checksum/secret: 7521cdd74d5cb934137dfef5ea999067fda0d36aff25d9213ede60bd7c730fdc
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redismain
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redismain
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redismain
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redismain-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redismain-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redismain-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redismain
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: standard
---
# Source: kobotoolbox/templates/tests/test-kobo-api.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-test-kobo-api
  namespace: default
  annotations:
    "helm.sh/hook": test-success
    # "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: test-http
      image: blacktop/httpie
      imagePullPolicy: IfNotPresent
      command:
      - sh
      - -ce
      - |
        http --ignore-stdin --check-status "http://my-release-kobo/api/v2/" Host:kobo.kobo.local
        http --ignore-stdin --check-status "http://my-release-kobo/api/v1/" Host:kc.kobo.local
---
# Source: kobotoolbox/templates/tests/test-kobo-connections.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-test-kobo-connections
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - image: jwilder/dockerize
      imagePullPolicy: IfNotPresent
      name: test-connections
      args:
        - -timeout=5m
        # Postgres
        - -wait=tcp://my-release-postgresql:5432
        # Mongodb
        - -wait=tcp://my-release-mongodb:27017
        # Nginx
        - -wait=http://my-release-kobo/
        # Enketo
        - -wait=http://my-release-enketo:8005/
  restartPolicy: Never
