---
# Source: accounts-ui/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-accounts-ui-data
  namespace: default
  labels:
    helm.sh/chart: accounts-ui-v2024.6.3
    app.kubernetes.io/name: accounts-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2024.6.3"
    app.kubernetes.io/managed-by: Helm
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: accounts-ui/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-accounts-ui-license-checker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
# Source: accounts-ui/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-accounts-ui-license-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
# Source: accounts-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-accounts-ui
  namespace: default
  labels:
    helm.sh/chart: accounts-ui-v2024.6.3
    app.kubernetes.io/name: accounts-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2024.6.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: accounts-ui
    app.kubernetes.io/instance: my-release
---
# Source: accounts-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-accounts-ui
  namespace: default
  labels:
    helm.sh/chart: accounts-ui-v2024.6.3
    app.kubernetes.io/name: accounts-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v2024.6.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: accounts-ui
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: accounts-ui
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: accounts-ui
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          image: "ghcr.io/appscode/b3:v2024.6.3"
          imagePullPolicy: Always
          args:
            - accounts
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          startupProbe:
            httpGet:
              path: /
              port: http
            # wait for cert and nats to be ready
            initialDelaySeconds: 60
            failureThreshold: 18
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
          env:
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /data
      volumes:
        - name: tmp
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: my-release-accounts-ui-data
---
# Source: accounts-ui/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: accounts-ui/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: accounts-ui/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
