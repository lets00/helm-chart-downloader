---
# Source: kubedb-provisioner/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubedb-provisioner
  namespace: default
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kubedb-provisioner/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubedb-provisioner
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs: ["*"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs: ["create", "delete", "list","watch", "get", "patch", "deletecollection"]
- apiGroups:
  - ""
  resources:
  - services
  - secrets
  verbs: ["create", "delete", "get", "patch", "update", "list", "watch"]
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs: ["update"]
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs: ["create", "delete", "get", "watch", "list", "patch", "deletecollection"]
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch", "deletecollection"]
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs: ["get"]
- apiGroups:
  - batch
  resources:
  - jobs
  verbs: ["create", "delete", "get", "list", "watch", "patch"]
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs: ["get"]
- apiGroups:
  - ""
  resources:
  - pods
  - pods/eviction
  verbs: ["*"]
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs: ["create", "delete", "get", "list", "patch", "watch"]
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs: ["create", "delete", "get", "list", "watch", "update", "patch"]
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["create"]
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs: ["get"]
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  verbs: ["get", "list", "watch"]
- apiGroups:
  - kubedb.com
  - apps.k8s.appscode.com
  - archiver.kubedb.com
  - catalog.kubedb.com
  - core.kubestash.com
  - elasticsearch.kubedb.com
  - kafka.kubedb.com
  - storage.kubestash.com
  resources:
  - "*"
  verbs: ["*"]
- apiGroups:
  - kubedb.com
  resources:
  - elasticsearches/finalizers
  - etcds/finalizers
  - mariadbs/finalizers
  - memcacheds/finalizers
  - mongodbs/finalizers
  - mysqls/finalizers
  - perconaxtradbs/finalizers
  - pgbouncers/finalizers
  - postgreses/finalizers
  - proxysqls/finalizers
  - redises/finalizers
  - redissentinels/finalizers
  - zookeepers/finalizers
  verbs: ["update"]
- apiGroups:
  - elasticsearch.kubedb.com
  resources:
  - elasticsearchdashboards/status
  verbs: ["get"]
- apiGroups:
  - elasticsearch.kubedb.com
  resources:
  - elasticsearchdashboards/finalizers
  verbs: ["update"]
- apiGroups:
  - apps
  resources:
  - statefulsets/finalizers
  verbs: ["update"]
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs: ["*"]
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs: ["create"]
- apiGroups:
  - ""
  resources:
  - "pods/status"
  verbs: ["update"]
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs: ["use"]
  resourceNames:
  - my-release-kubedb-provisioner
  - elasticsearch-db
  - etcd-db
  - memcached-db
  - mongodb-db
  - mysql-db
  - percona-xtradb-db
  - postgres-db
  - redis-db
  - proxysql-db
  - maria-db
  - kafka-db
  - kafkaconnector
  - zookeeper-db
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs: ["get", "list", "create", "delete", "patch", "deletecollection"]
- apiGroups:
  - stash.appscode.com
  - kubestash.appscode.com
  resources:
  - restoresessions
  - restorebatches
  verbs: ["get", "list", "watch"]
- apiGroups:
  - cert-manager.io
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterroles
  - clusterrolebindings
  verbs: [ "get","create", "list","watch", "patch","delete"]
- apiGroups:
  - apps.k8s.appscode.com
  resources:
  - sidekicks
  verbs: ["get", "list", "create", "delete", "patch", "deletecollection"]

- apiGroups:
  - stash.appscode.com
  resources:
  - backupsessions
  - backupconfigurations
  verbs: [ "get", "list", "watch" ]

- apiGroups:
  - core.kubestash.com
  resources:
  - backupsessions
  - backupconfigurations
  verbs: [ "get", "list", "watch" ]

- apiGroups:
  - cacerts.csi.cert-manager.io
  resources:
  - caproviderclasses
  verbs: [ "get", "list", "watch", "create" ]
---
# Source: kubedb-provisioner/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubedb-provisioner
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kubedb-provisioner
subjects:
- kind: ServiceAccount
  name: my-release-kubedb-provisioner
  namespace: default
---
# Source: kubedb-provisioner/templates/license-checker-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubedb-provisioner-license-checker
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-checker
subjects:
- kind: ServiceAccount
  name: my-release-kubedb-provisioner
  namespace: default
---
# Source: kubedb-provisioner/templates/license-reader-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubedb-provisioner-license-reader
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: appscode:license-reader
subjects:
- kind: ServiceAccount
  name: my-release-kubedb-provisioner
  namespace: default
---
# Source: kubedb-provisioner/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubedb-provisioner
  namespace: default
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
  selector:
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
---
# Source: kubedb-provisioner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubedb-provisioner
  namespace: default
  labels:
    helm.sh/chart: kubedb-provisioner-v0.46.0
    app.kubernetes.io/name: kubedb-provisioner
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.46.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubedb-provisioner
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubedb-provisioner
        app.kubernetes.io/instance: my-release
      annotations:
        reload: eZRdlbKZ
    spec:
      
      serviceAccountName: my-release-kubedb-provisioner
      containers:
      - name: operator
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
        image: ghcr.io/kubedb/kubedb-provisioner:v0.46.0
        imagePullPolicy: IfNotPresent
        args:
        - operator
        - --v=3
        - --use-kubeapiserver-fqdn-for-aks=true
        - --metrics-bind-address=:8080
        - --health-probe-bind-address=:8081
        
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        ports:
        - name: metrics
          containerPort: 8080
        - name: probes
          containerPort: 8081
        volumeMounts:
        - mountPath: /tmp
          name: tmpdir
        readinessProbe:
          httpGet:
            path: /readyz
            port: probes
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: probes
          initialDelaySeconds: 15
          periodSeconds: 20
        resources:
          {}
      volumes:
      - name: tmpdir
        emptyDir: {}
      securityContext:
        {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: kubedb-provisioner/templates/license.yaml
# if license file is provided, then create a secret for license
---
# Source: kubedb-provisioner/templates/appcatalog-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:appcatalog:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: kubedb-provisioner/templates/appcatalog-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:appcatalog:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: kubedb-provisioner/templates/garbage-collector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:garbage-collector:psp
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - policy
  verbs: ["use"]
  resources:
  - podsecuritypolicies
---
# Source: kubedb-provisioner/templates/license-checker-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-checker
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Get cluster id
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs: ["get"]
# Issue license
- apiGroups:
  - proxyserver.licenses.appscode.com
  resources:
  - licenserequests
  verbs: ["create"]
# Detect workload/owner of operator pod
- apiGroups:
  - ""
  resources:
  - pods
  verbs: ["get"]
- apiGroups:
  - apps
  resources:
  - deployments
  - replicasets
  verbs: ["get"]
# Write events in case of license verification failure
- apiGroups:
  - ""
  resources:
  - events
  verbs: ["get", "list", "create", "patch"]
---
# Source: kubedb-provisioner/templates/license-reader-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:license-reader
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
# Detect license server endpoint for kubedb addons
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs: ["get"]
- nonResourceURLs:
  - /appscode/license
  verbs: ["get"]
---
# Source: kubedb-provisioner/templates/user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:core:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - kubedb.com
  - catalog.kubedb.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: kubedb-provisioner/templates/user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedb:core:edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - kubedb.com
  resources:
  - "*"
  verbs: ["create", "get", "list", "watch", "update", "patch"]
- apiGroups:
  - catalog.kubedb.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: kubedb-provisioner/templates/user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubedb:core:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - kubedb.com
  - catalog.kubedb.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
---
# Source: kubedb-provisioner/templates/garbage-collector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedb:garbage-collector:psp
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubedb:garbage-collector:psp
subjects:
- kind: ServiceAccount
  name: generic-garbage-collector
  namespace: kubedb
