---
# Source: geonode-k8s/charts/memcached/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-memcached
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcached
      app.kubernetes.io/version: 1.6.24
      helm.sh/chart: memcached-6.14.0
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: geonode-k8s/charts/memcached/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
---
# Source: geonode-k8s/charts/postgres-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgres-operator
  namespace: default
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
---
# Source: geonode-k8s/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
automountServiceAccountToken: true
secrets:
  - name: my-release-rabbitmq
---
# Source: geonode-k8s/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IHJhYmJpdHVzZXIKZGVmYXVsdF9wYXNzID0gQ0hBTkdFTUUKIyMgQ2x1c3RlcmluZwojIwpjbHVzdGVyX2Zvcm1hdGlvbi5wZWVyX2Rpc2NvdmVyeV9iYWNrZW5kICA9IHJhYmJpdF9wZWVyX2Rpc2NvdmVyeV9rOHMKY2x1c3Rlcl9mb3JtYXRpb24uazhzLmhvc3QgPSBrdWJlcm5ldGVzLmRlZmF1bHQKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLmludGVydmFsID0gMTAKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLm9ubHlfbG9nX3dhcm5pbmcgPSB0cnVlCmNsdXN0ZXJfcGFydGl0aW9uX2hhbmRsaW5nID0gYXV0b2hlYWwKIyBxdWV1ZSBtYXN0ZXIgbG9jYXRvcgpxdWV1ZV9tYXN0ZXJfbG9jYXRvciA9IG1pbi1tYXN0ZXJzCiMgZW5hYmxlIGd1ZXN0IHVzZXIKbG9vcGJhY2tfdXNlcnMuZ3Vlc3QgPSBmYWxzZQojZGVmYXVsdF92aG9zdCA9IGRlZmF1bHQtdmhvc3QKI2Rpc2tfZnJlZV9saW1pdC5hYnNvbHV0ZSA9IDUwTUI=
---
# Source: geonode-k8s/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
type: Opaque
data:
  rabbitmq-password: "cmFiYml0cGFzc3dvcmQ="
  
  rabbitmq-erlang-cookie: "aml4WUJzaVo5Uml2YUxYQzAycFR3R2p2SW8wbkh0VnU="
---
# Source: geonode-k8s/templates/geonode/geonode-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-geonode-secret"
  namespace: default
type: Opaque
data:
  # superuser credentials
  ADMIN_USERNAME: YWRtaW4=
  ADMIN_PASSWORD: Z2Vvbm9kZQ==
  ADMIN_EMAIL: c3VwcG9ydEBleGFtcGxlLmNvbQ==

  # mail secrets
  DJANGO_EMAIL_HOST_USER: Y2hhbmdlbWU=
  DJANGO_EMAIL_HOST_PASSWORD: Y2hhbmdlbWU=
  DEFAULT_FROM_EMAIL: Y2hhbmdlbWVAd2ViLmRl

  # ldap secrets
  LDAP_BIND_PASSWORD: cGFzc3dvcmQ=

  # OAuth2
  OAUTH2_API_KEY: ""
  OAUTH2_CLIENT_ID: SnJjaHoyb1BZM2FrbXpuZG1nVVRZcnM5Z2N6bGdvVjIwWVBTdnFhVg==
  OAUTH2_CLIENT_SECRET: ckNucDV0eG9iVW84M0VwUUVibE04ZlZqM1FUNXpiNXFSZnhOc3VQekNxWmFpUnlJb3hNNGpkZ01pWktGZmVQQkhZWENMZDdCOE5sa2ZEQlk5SEtlSVFQY3k1Q3AwOEtRTnBSSFFianBMSXRESHYxMkd2a1NlWHA2T3hhVUVUdjM=
---
# Source: geonode-k8s/templates/geoserver/geoserver-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "my-release-geoserver-secret"
  namespace: default
type: Opaque
data:
  # geoserver admin credentials
  GEOSERVER_ADMIN_USER: YWRtaW4=
  GEOSERVER_ADMIN_PASSWORD: Z2Vvc2VydmVy
  GEOSERVER_FACTORY_PASSWORD: Z2Vvc2VydmVy
  # geonode oauth2
  OAUTH2_API_KEY: ""
  OAUTH2_CLIENT_ID: SnJjaHoyb1BZM2FrbXpuZG1nVVRZcnM5Z2N6bGdvVjIwWVBTdnFhVg==
  OAUTH2_CLIENT_SECRET: ckNucDV0eG9iVW84M0VwUUVibE04ZlZqM1FUNXpiNXFSZnhOc3VQekNxWmFpUnlJb3hNNGpkZ01pWktGZmVQQkhZWENMZDdCOE5sa2ZEQlk5SEtlSVFQY3k1Q3AwOEtRTnBSSFFianBMSXRESHYxMkd2a1NlWHA2T3hhVUVUdjM=
---
# Source: geonode-k8s/templates/geonode/geonode-entrypoint-sh-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-entrypoint-sh
data:
  entrypoint.sh: |
    #!/bin/bash
 
    # Exit script in case of error
    set -e

    INVOKE_LOG_STDOUT=${INVOKE_LOG_STDOUT:-FALSE}
    invoke () {
        if [ $INVOKE_LOG_STDOUT = 'true' ] || [ $INVOKE_LOG_STDOUT = 'True' ]
        then
            /usr/local/bin/invoke $@
        else
            /usr/local/bin/invoke $@ > /usr/src/geonode/invoke.log 2>&1
        fi
        echo "$@ tasks done"
    }

    # Start cron && memcached services
    service cron restart

    echo $"\n\n\n"
    echo "-----------------------------------------------------"
    echo "STARTING DJANGO ENTRYPOINT $(date)"
    echo "-----------------------------------------------------"

    invoke update

    source $HOME/.bashrc
    source $HOME/.override_env

    echo DOCKER_API_VERSION=$DOCKER_API_VERSION
    echo POSTGRES_USER=$POSTGRES_USER
    echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    echo DATABASE_URL=$DATABASE_URL
    echo GEODATABASE_URL=$GEODATABASE_URL
    echo SITEURL=$SITEURL
    echo ALLOWED_HOSTS=$ALLOWED_HOSTS
    echo GEOSERVER_PUBLIC_LOCATION=$GEOSERVER_PUBLIC_LOCATION
    echo MONITORING_ENABLED=$MONITORING_ENABLED
    echo MONITORING_HOST_NAME=$MONITORING_HOST_NAME
    echo MONITORING_SERVICE_NAME=$MONITORING_SERVICE_NAME
    echo MONITORING_DATA_TTL=$MONITORING_DATA_TTL
    # deactivated until https://github.com/GeoNode/geonode/pull/11340 is merged
    #invoke waitfordbs

    cmd="$@"

    if [ ${IS_CELERY} = "true" ]  || [ ${IS_CELERY} = "True" ]
    then
        echo "Executing Celery server $cmd for Production"
    else
        invoke prescript
        invoke migrations
        invoke prepare

        if [ ${FORCE_REINIT} = "true" ]  || [ ${FORCE_REINIT} = "True" ] || [ ! -e "/mnt/volumes/statics/geonode_init.lock" ]; then
            invoke updategeoip
            invoke fixtures
            # currently not implemented in geonode-k8s
            # invoke monitoringfixture
            invoke initialized
            invoke updateadmin
        fi

        invoke statics
        invoke waitforgeoserver
        invoke geoserverfixture
        invoke postscript
        echo "Executing UWSGI server $cmd for Production"
    fi

    echo "-----------------------------------------------------"
    echo "FINISHED DJANGO ENTRYPOINT --------------------------"
    echo "-----------------------------------------------------"

    # Run the CMD 
    echo "got command $cmd"
    exec $cmd
---
# Source: geonode-k8s/templates/geonode/geonode-env.yaml
# env vars for Django Geonode

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-env
  namespace: default
data:
  IS_CELERY: "False"
  CELERY_BEAT_SCHEDULER: "celery.beat:PersistentScheduler"

  DOCKERIZE_VERSION: "v0.6.1"
  DEBUG: "False"
  DEBUG_STATIC: "False"

  CLIENT_RESULTS_LIMIT: '25'
  C_FORCE_ROOT: '1'
  MAX_DOCUMENT_SIZE:  "10"
  API_LIMIT_PER_PAGE: "1000"
  # GeoNode APIs
  API_LOCKDOWN: 'False'
  TASTYPIE_APIKEY: ""
  FORCE_REINIT: "true"

  # set this to true breaks upload
  ASYNC_SIGNALS: 'True'
  CACHE_BUSTING_STATIC_ENABLED: 'False'
  CACHE_BUSTING_MEDIA_ENABLED: 'False'

  GEONODE_INSTANCE_NAME: my-release
  GEONODE_LB_HOST_IP: "geonode"
  GEONODE_DB_CONN_MAX_AGE: '0'
  GEONODE_DB_CONN_TOUT: '5'

  # Rabbitmq
  BROKER_URL: "amqp://rabbituser:rabbitpassword@my-release-rabbitmq:5672/"

  # DJANGO SITE CONF
  SITEURL: "http://geonode/"
  SITE_HOST_SCHEMA: "http"
  ALLOWED_HOSTS: "['django', '*', 'geonode']"
  PROXY_ALLOWED_HOSTS: 'localhost,django,geonode,geoserver,spatialreference.org,nominatim.openstreetmap.org,dev.openlayers.org'

  # General settings
  FREETEXT_KEYWORDS_READONLY: "False"
  FIXTURE_DIRS: "[ '/usr/src/geonode/geonode/fixtures' ]"
  # PUBLISHING
  RESOURCE_PUBLISHING: "False"
  ADMIN_MODERATE_UPLOADS: "False"

  # DISPLAY
  DISPLAY_RATINGS: "True"
  DISPLAY_COMMENTS: "True"
  DISPLAY_SOCIAL: "True"
  DISPLAY_WMS_LINKS: "True"
  DISPLAY_ORIGINAL_DATASET_LINK: "True"

  # EMAIL Notifications
  EMAIL_ENABLE:  "False"
  DJANGO_EMAIL_BACKEND: "django.core.mail.backends.smtp.EmailBackend"
  DJANGO_EMAIL_HOST: "smtp.gmail.com"
  DJANGO_EMAIL_PORT: "587"
  DJANGO_EMAIL_USE_TLS: "True"
  DJANGO_EMAIL_USE_SSL: "False"

  # PATH
  # TODO (mwall) allign with volumeMount locations
  STATIC_ROOT: /mnt/volumes/statics/static/
  MEDIA_ROOT: /mnt/volumes/statics/uploaded/
  GEOIP_PATH: /mnt/volumes/statics/geoip.db

  # Session/Access Control
  LOCKDOWN_GEONODE: "False"
  CORS_ORIGIN_ALLOW_ALL: 'True'
  X_FRAME_OPTIONS: ALLOW-FROM ALL
  SESSION_EXPIRED_CONTROL_ENABLED: 'True'
  DEFAULT_ANONYMOUS_VIEW_PERMISSION: 'True'
  DEFAULT_ANONYMOUS_DOWNLOAD_PERMISSION: 'True'
  DEFAULT_MAX_PARALLEL_UPLOADS_PER_USER: '100'
  DEFAULT_MAX_UPLOAD_SIZE: '5368709120'

  # Users Registration
  ACCOUNT_OPEN_SIGNUP: "True"
  ACCOUNT_EMAIL_REQUIRED: "True"
  ACCOUNT_APPROVAL_REQUIRED: "False"
  ACCOUNT_CONFIRM_EMAIL_ON_GET: "True"
  ACCOUNT_EMAIL_VERIFICATION: "mandatory"
  ACCOUNT_EMAIL_CONFIRMATION_REQUIRED: "True"
  ACCOUNT_AUTHENTICATION_METHOD: "username_email"
  
  AUTO_ASSIGN_REGISTERED_MEMBERS_TO_REGISTERED_MEMBERS_GROUP_NAME: "True"
  SHOW_PROFILE_EMAIL: "True"
  SOCIALACCOUNT_WITH_GEONODE_LOCAL_SINGUP: "True"

  # SOCIAL CONNECTOR
  # SOCIALACCOUNT_AUTO_SIGNUP: "False"

  # LDAP Configuration
  LDAP_ENABLED:  "False"
  LDAP_SERVER_URL: "ldap://example.com"
  LDAP_BIND_DN: "CN=Users,DC=ad,DC=example,DC=com"
  LDAP_USER_SEARCH_DN: "OU=User,DC=ad,DC=example,DC=com"
  LDAP_USER_SEARCH_FILTERSTR: "(sAMAccountName=%(user)s)"
  LDAP_ALWAYS_UPDATE_USER: "true"
  LDAP_MIRROR_GROUPS: "True"
  LDAP_GROUP_SEARCH_DN: "OU=Groups,DC=ad,DC=example,DC=com"
  LDAP_GROUP_SEARCH_FILTERSTR: "(objectClass=group)"
  
  LDAP_USER_ATTR_MAP_FIRST_NAME: "givenName"
  LDAP_USER_ATTR_MAP_LAST_NAME: "sn"
  LDAP_USER_ATTR_MAP_EMAIL_ADDR: "mailPrimaryAddress"

  # Configure PYCSW
  
  CATALOGUE_ENGINE: geonode.catalogue.backends.pycsw_http
  CATALOGUE_URL: "http://my-release-pycsw:8000"
  

  DJANGO_SETTINGS_MODULE: geonode.settings
  DEFAULT_BACKEND_DATASTORE: datastore
  DEFAULT_BACKEND_UPLOADER: geonode.importer

  TIME_ENABLED: 'True'
  MOSAIC_ENABLED: 'False'

  HAYSTACK_SEARCH: "False"
  HAYSTACK_ENGINE_URL: "http://elasticsearch:9200/"
  HAYSTACK_ENGINE_INDEX_NAME: "haystack"
  HAYSTACK_SEARCH_RESULTS_PER_PAGE: "200"

  MEMCACHED_ENABLED: "True"
  MEMCACHED_BACKEND: django.core.cache.backends.memcached.MemcachedCache
  MEMCACHED_LOCATION: my-release-memcached
  MEMCACHED_LOCK_EXPIRE: "3600"
  MEMCACHED_LOCK_TIMEOUT: "10"

  # Monitoring
  MONITORING_ENABLED: "False"
  MONITORING_DATA_TTL: "365"
  USER_ANALYTICS_ENABLED: "True"
  USER_ANALYTICS_GZIP: "True"
  CENTRALIZED_DASHBOARD_ENABLED: "False"
  MONITORING_SERVICE_NAME: my-release-monitoring
  MONITORING_HOST_NAME: my-release-monitoring

  # Other Options/Contribs
  MODIFY_TOPICCATEGORY: 'True'
  AVATAR_GRAVATAR_SSL: 'True'
  AVATAR_DEFAULT_URL: /geonode/img/avatar.png
  EXIF_ENABLED: 'True'
  CREATE_LAYER: 'True'
  FAVORITE_ENABLED: 'True'

  # GEOSERVER CONFIGURATION #
  GEOSERVER_WEB_UI_LOCATION: "http://geonode/geoserver/"
  GEOSERVER_PUBLIC_LOCATION: "http://geonode/geoserver/"
  GEOSERVER_PUBLIC_SCHEMA: "http"
  GEOSERVER_LOCATION: "http://my-release-geoserver:8080/geoserver/"

  OGC_REQUEST_TIMEOUT: "600"
  OGC_REQUEST_MAX_RETRIES: '1'
  OGC_REQUEST_BACKOFF_FACTOR: '0.3'
  OGC_REQUEST_POOL_MAXSIZE: '10'
  OGC_REQUEST_POOL_CONNECTIONS: '10'
  # GIS Client
  GEONODE_CLIENT_LAYER_PREVIEW_LIBRARY: mapstore

  # SENTRY SETTINGS
  SENTRY_ENABLED: "False"
  SENTRY_DSN:  ""
  BUILD_NUMBER: "0"
  SENTRY_ENVIRONMENT: "development"

  # Database Settings
  DATABASE_HOST: "my-release-postgres"
  DATABASE_PORT: "5432"

  # enables ssl encrypted psql connection (required by postgres-operator databases)
  PGSSLMODE: "require"
  POSTGRES_USER: "postgres"
  GEONODE_DATABASE: "geonode"
  GEONODE_GEODATABASE: "geodata"
  GEONODE_DATABASE_SCHEMA: public
  GEONODE_GEODATABASE_SCHEMA: public
---
# Source: geonode-k8s/templates/geonode/geonode-favicon.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-favicon
  namespace: default
binaryData:
  favicon.ico: 
---
# Source: geonode-k8s/templates/geonode/geonode-fixtures.yaml
# fixture data for Django Geonode

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-fixtures
  namespace: default
data:
  
  somefixture.json: |
    [
      {
        "pk": 0,
        "model": "myapp.sample"
        "description": "nice little content"
      }
    ]
---
# Source: geonode-k8s/templates/geonode/geonode-local-settings.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-k8s-settings-py
data:
  geonode-k8s-settings.py: |
    # add these import lines to the top of your geonode settings file
    
    

    THESAURUS_DEFAULT_LANG = os.environ.get("THESAURUS_DEFAULT_LANG", "en")
---
# Source: geonode-k8s/templates/geonode/geonode-settings-additions.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-k8s-settings-additions-py
data:
  geonode-k8s-settings-additions.py: ""
---
# Source: geonode-k8s/templates/geonode/geonode-tasks-py-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-tasks-py
data:
  tasks.py: |
    # -*- coding: utf-8 -*-
    #########################################################################
    #
    # Copyright (C) 2016 OSGeo
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, either version 3 of the License, or
    # (at your option) any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program. If not, see <http://www.gnu.org/licenses/>.
    #
    #########################################################################
    import os
    import re
    import ast
    import json
    import time
    import logging
    import datetime
    import requests

    from urllib.parse import urlparse, urlunparse
    from invoke import task

    logger = logging.getLogger(__name__)

    GEOSERVER_STORE_NAME = "geogeonode"
    GEOSERVER_WORKSPACE_NAME = "geonode"

    @task
    def waitfordbs(ctx):
        print("**************************databases*******************************")
        db_host = os.getenv('DATABASE_HOST', 'db')
        ctx.run(f"/usr/bin/wait-for-databases {db_host}", pty=True)


    @task
    def waitforgeoserver(ctx):
        print("****************************geoserver********************************")
        while not _gs_service_availability(f"{os.environ['GEOSERVER_LOCATION']}ows"):
            print("Wait for GeoServer API availability...")
        print("GeoServer is available for HTTP calls!")

    @task
    def update(ctx):
        print("***************************setting env*********************************")
        ctx.run("env", pty=True)
        db_url = _update_db_connstring()
        geodb_url = _update_geodb_connstring()

        override_env = "$HOME/.override_env"
        if os.path.exists(override_env):
            os.remove(override_env)

        envs = {
            "local_settings": str(_localsettings()),
            "siteurl": os.environ.get("SITEURL"),
            "public_fqdn":  os.environ.get("SITEURL"),
            "public_host":  os.environ.get("SITEURL"),
            "dburl": os.environ.get("DATABASE_URL", db_url),
            "geodburl": os.environ.get("GEODATABASE_URL", geodb_url),
            "static_root": os.environ.get("STATIC_ROOT", "/mnt/volumes/statics/static/"),
            "media_root": os.environ.get("MEDIA_ROOT", "/mnt/volumes/statics/uploaded/"),
            "geoip_path": os.environ.get("GEOIP_PATH", "/mnt/volumes/statics/geoip.db"),
            "monitoring": os.environ.get("MONITORING_ENABLED", True),
            "monitoring_host_name": os.environ.get("MONITORING_HOST_NAME", "geonode"),
            "monitoring_service_name": os.environ.get("MONITORING_SERVICE_NAME", "local-geonode"),
            "monitoring_data_ttl": os.environ.get("MONITORING_DATA_TTL", 7),
            "geonode_geodb_passwd": os.environ.get("GEONODE_GEODATABASE_PASSWORD"),
            "default_backend_datastore": os.environ.get("DEFAULT_BACKEND_DATASTORE"),
            "geonode_db_passwd": os.environ.get("GEONODE_DATABASE_PASSWORD"),
            "geonode_geodb": os.environ.get("GEONODE_GEODATABASE"),
            "db_url": os.environ.get("DATABASE_URL"),
            "geodb_url": os.environ.get("GEODATABASE_URL"),
            "geonode_db": os.environ.get("GEONODE_DATABASE"),
            "gs_loc": os.environ.get('GEOSERVER_LOCATION'),
            "gs_web_ui_loc": os.environ.get("GEOSERVER_WEB_UI_LOCATION"),
            "gs_pub_loc": os.environ.get("GEOSERVER_PUBLIC_LOCATION"),
            "gs_admin_pwd": os.environ.get("GEOSERVER_ADMIN_PASSWORD"),
            "override_fn": override_env,
        }

        try:
            current_allowed = ast.literal_eval(
                os.getenv('ALLOWED_HOSTS') or
                "['{public_fqdn}', '{public_host}', 'localhost', 'django', 'my-release-geonode',]".format(**envs))
        except ValueError:
            current_allowed = []
        allowed_hosts = [str(c) for c in current_allowed] + ['"my-release-geonode"', '"django"']

        ctx.run(
            "echo export DJANGO_SETTINGS_MODULE=\
    {local_settings} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_ENABLED=\
    {monitoring} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_HOST_NAME=\
    {monitoring_host_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_SERVICE_NAME=\
    {monitoring_service_name} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MONITORING_DATA_TTL=\
    {monitoring_data_ttl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE_PASSWORD=\
    {geonode_geodb_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DEFAULT_BACKEND_DATASTORE=\
    {default_backend_datastore} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE_PASSWORD=\
    {geonode_db_passwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_GEODATABASE=\
    {geonode_geodb} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {db_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodb_url} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEONODE_DATABASE=\
    {geonode_db} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_LOCATION=\
    {gs_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_WEB_UI_LOCATION=\
    {gs_web_ui_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_PUBLIC_LOCATION=\
    {gs_pub_loc} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOSERVER_ADMIN_PASSWORD=\
    {gs_admin_pwd} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export SITEURL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            'echo export ALLOWED_HOSTS=\
    "\\"{}\\"" >> {override_fn}'.format(
                allowed_hosts, **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export DATABASE_URL=\
    {dburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEODATABASE_URL=\
    {geodburl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export STATIC_ROOT=\
    {static_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export MEDIA_ROOT=\
    {media_root} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export GEOIP_PATH=\
    {geoip_path} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_URL=\
    {siteurl}account/login/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_URL=\
    {siteurl}account/logout/ >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGIN_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(
            "echo export LOGOUT_REDIRECT_URL=\
    {siteurl} >> {override_fn}".format(
                **envs
            ),
            pty=True,
        )
        ctx.run(f"source {override_env}", pty=True)
        print("****************************finalize env**********************************")
        ctx.run("env", pty=True)


    @task
    def migrations(ctx):
        print("**************************migrations*******************************")
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()}", pty=True)
        ctx.run(f"python manage.py migrate --noinput --settings={_localsettings()} --database=datastore", pty=True)
        try:
            ctx.run(f"python manage.py rebuild_index --noinput --settings={_localsettings()}", pty=True)
        except Exception:
            pass


    @task
    def statics(ctx):
        print("**************************statics*******************************")
        try:
            ctx.run("mkdir -p /mnt/volumes/statics/{static,uploads}")
            ctx.run(f"python manage.py collectstatic --noinput --settings={_localsettings()}", pty=True)
        except Exception:
            import traceback

            traceback.print_exc()


    @task
    def prepare(ctx):
        print("**********************prepare fixture***************************")
        ctx.run("rm -rf /tmp/default_oauth_apps_docker.json", pty=True)
        _prepare_oauth_fixture()
        ctx.run("rm -rf /tmp/default_site.json", pty=True)
        _prepare_site_fixture()


    @task
    def fixtures(ctx):
        print("**************************fixtures********************************")
        ctx.run(
            f"python manage.py loaddata sample_admin \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata /tmp/default_oauth_apps_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )
        ctx.run(
            f"python manage.py loaddata geonode/base/fixtures/initial_data.json \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectstatic(ctx):
        print("************************static artifacts******************************")
        ctx.run(
            f"django-admin.py collectstatic --noinput \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def geoserverfixture(ctx):
        print("********************geoserver fixture********************************")
        _set_geoserver_database_store()

    @task
    def monitoringfixture(ctx):
        print("*******************monitoring fixture********************************")
        ctx.run("rm -rf /tmp/default_monitoring_apps_docker.json", pty=True)
        _prepare_monitoring_fixture()
        try:
            ctx.run(
                f"django-admin.py loaddata /tmp/default_monitoring_apps_docker.json \
    --settings={_localsettings()}",
                pty=True,
            )
        except Exception as e:
            logger.error(f"ERROR installing monitoring fixture: {str(e)}")

    @task
    def updategeoip(ctx):
        print("**************************update geoip*******************************")
        if ast.literal_eval(os.environ.get("MONITORING_ENABLED", "False")):
            ctx.run(f"django-admin.py updategeoip --settings={_localsettings()}", pty=True)

    @task
    def updateadmin(ctx):
        print("***********************update admin details**************************")
        ctx.run("rm -rf /tmp/django_admin_docker.json", pty=True)
        _prepare_admin_fixture(
            os.environ.get("ADMIN_PASSWORD", "admin"), os.environ.get("ADMIN_EMAIL", "admin@example.org")
        )
        ctx.run(
            f"django-admin.py loaddata /tmp/django_admin_docker.json \
    --settings={_localsettings()}",
            pty=True,
        )

    @task
    def collectmetrics(ctx):
        print("************************collect metrics******************************")
        ctx.run(
            f"python -W ignore manage.py collect_metrics  \
    --settings={_localsettings()} -n -t xml",
            pty=True,
        )

    @task
    def initialized(ctx):
        print("**************************init file********************************")
        ctx.run("date > /mnt/volumes/statics/geonode_init.lock")

    @task
    def prescript(ctx):
        print("**********************geonode-k8s pre ***************************")
        print("tasks_pre_script not defined ...")


    @task
    def postscript(ctx):
        print("**********************geonode-k8s post ***************************")
        print("tasks_post_script not defined ...")



    def _update_db_connstring():
        user = os.getenv('GEONODE_DATABASE', 'geonode')
        pwd = os.getenv('GEONODE_DATABASE_PASSWORD', 'geonode')
        dbname = os.getenv('GEONODE_DATABASE', 'geonode')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        connstr = f'postgis://{user}:{pwd}@{dbhost}:{dbport}/{dbname}'
        return connstr


    def _update_geodb_connstring():
        geouser = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        geopwd = os.getenv('GEONODE_GEODATABASE_PASSWORD', 'geonode_data')
        geodbname = os.getenv('GEONODE_GEODATABASE', 'geonode_data')
        dbhost = os.getenv('DATABASE_HOST', 'db')
        dbport = os.getenv('DATABASE_PORT', 5432)
        geoconnstr = f'postgis://{geouser}:{geopwd}@{dbhost}:{dbport}/{geodbname}'
        return geoconnstr


    def _localsettings():
        settings = os.getenv('DJANGO_SETTINGS_MODULE', 'geonode.settings')
        return settings


    def _gs_service_availability(url):
        import requests
        try:
            r = requests.request("get", url, verify=False)
            r.raise_for_status()  # Raises a HTTPError if the status is 4xx, 5xxx
        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:
            logger.error(f"GeoServer connection error is {e}")
            return False
        except requests.exceptions.HTTPError as er:
            logger.error(f"GeoServer HTTP error is {er}")
            return False
        else:
            logger.info("GeoServer API are available!")
            return True


    def _prepare_oauth_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "oauth2_provider.application",
                "pk": 1001,
                "fields": {
                    "skip_authorization": True,
                    "created": "2018-05-31T10:00:31.661Z",
                    "updated": "2018-05-31T11:30:31.245Z",
                    "algorithm": "RS256",
                    "redirect_uris": f"{urlunparse(upurl)}geoserver/index.html",
                    "name": "GeoServer",
                    "authorization_grant_type": "authorization-code",
                    "client_type": "confidential",
                    "client_id": str(os.environ["OAUTH2_CLIENT_ID"]),
                    "client_secret": str(os.environ["OAUTH2_CLIENT_SECRET"]),
                    "user": ["admin"],
                },
            }
        ]
        with open("/tmp/default_oauth_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_site_fixture():
        upurl = urlparse(os.environ["SITEURL"])
        default_fixture = [
            {
                "model": "sites.site",
                "pk": 1,
                "fields": {"domain": str(upurl.hostname), "name": str(upurl.hostname)},
            }
        ]
        with open("/tmp/default_site.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_monitoring_fixture():
        pub_ip = os.getenv('GEONODE_LB_HOST_IP')
        print(f"Public Hostname or IP is {pub_ip}")
        pub_port = os.getenv('GEONODE_LB_PORT')
        print(f"Public PORT is {pub_port}")

        d = "1970-01-01 00:00:00"
        default_fixture = [
            {
                "fields": {"active": True, "ip": str(pub_ip), "name": str(os.environ["MONITORING_HOST_NAME"])},
                "model": "monitoring.host",
                "pk": 1,
            },
            {"fields": {"active": True, "ip": "my-release-geoserver", "name": "geoserver"}, "model": "monitoring.host", "pk": 2},
            {
                "fields": {
                    "name": str(os.environ["MONITORING_SERVICE_NAME"]),
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 1,
                },
                "model": "monitoring.service",
                "pk": 1,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeonode",
                    "url": str(os.environ["SITEURL"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 1,
                    "check_interval": "00:01:00",
                    "service_type": 3,
                },
                "model": "monitoring.service",
                "pk": 2,
            },
            {
                "fields": {
                    "name": "geoserver-hostgeoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 4,
                },
                "model": "monitoring.service",
                "pk": 3,
            },
            {
                "fields": {
                    "name": "default-geoserver",
                    "url": str(os.environ["GEOSERVER_PUBLIC_LOCATION"]),
                    "notes": "",
                    "last_check": d,
                    "active": True,
                    "host": 2,
                    "check_interval": "00:01:00",
                    "service_type": 2,
                },
                "model": "monitoring.service",
                "pk": 4,
            },
        ]
        with open("/tmp/default_monitoring_apps_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    def _prepare_admin_fixture(admin_password, admin_email):
        from django.contrib.auth.hashers import make_password

        d = datetime.datetime.now()
        mdext_date = f"{d.isoformat()[:23]}Z"
        default_fixture = [
            {
                "fields": {
                    "date_joined": mdext_date,
                    "email": admin_email,
                    "first_name": "",
                    "groups": [],
                    "is_active": True,
                    "is_staff": True,
                    "is_superuser": True,
                    "last_login": mdext_date,
                    "last_name": "",
                    "password": make_password(admin_password),
                    "user_permissions": [],
                    "username": "admin",
                },
                "model": "people.Profile",
                "pk": 1000,
            }
        ]
        with open("/tmp/django_admin_docker.json", "w") as fixturefile:
            json.dump(default_fixture, fixturefile)


    ##############################################################
    # added by mwall for https://github.com/zalf-rdm/geonode-k8s #
    ##############################################################
    def _set_geoserver_database_store():
        ''' checks if a db store is already created in geoserver, if not create one '''

        print("Check if geoserver store is already set up ...")
        url = '{}rest/workspaces/{}/datastores/'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        headers = {'Content-Type': 'text/xml'}
        auth = (os.environ.get("GEOSERVER_ADMIN_USER"), os.getenv('GEOSERVER_ADMIN_PASSWORD'))

        try:
            r = requests.get(url, headers=headers, auth=auth)
            data = r.json()
            for datastore in data["dataStores"]["dataStore"]:
                if datastore["name"] == GEOSERVER_STORE_NAME:
                    print("Found datastore \"{}\" on geoserver, skipping creation ... ".format(GEOSERVER_STORE_NAME))
                    return
        except:
            print("ERROR: Could not get datastore information from geoserver, trying to create ...")

        print("create new datastore \"{}\" on geoserver ...".format(GEOSERVER_STORE_NAME))
        db_user = database = os.getenv('GEONODE_GEODATABASE')
        db_password = os.getenv('GEONODE_GEODATABASE_PASSWORD')
        db_host = os.getenv('DATABASE_HOST')
        db_port = os.getenv('DATABASE_PORT')
        url = '{}rest/workspaces/{}/datastores'.format(os.getenv('GEOSERVER_LOCATION'), GEOSERVER_WORKSPACE_NAME)
        data = """
              <dataStore>
                <name>{}</name>
                <connectionParameters>
                  <host>{}</host>
                  <port>{}</port>
                  <database>{}</database>
                  <user>{}</user>
                  <passwd>{}</passwd>
                  <dbtype>postgis</dbtype>
                </connectionParameters>
              </dataStore>
            """.format(GEOSERVER_STORE_NAME, db_host, db_port, database, db_user, db_password)
        try:
            r = requests.post(url, headers=headers, auth=auth,data=data)
            print("Datastore created ...")
        except:
            print("ERROR: Something went wrong while creating datastore ...")
            return
---
# Source: geonode-k8s/templates/geonode/geonode-uwsgi-ini-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geonode-uwsgi-ini
data:
  uwsgi.ini: |
    [uwsgi]
    uwsgi-socket = 0.0.0.0:8000
    http-socket = 0.0.0.0:8001
    # pidfile = /tmp/geonode.pid

    chdir = /usr/src/geonode/
    module = geonode.wsgi:application

    strict = false
    master = true
    enable-threads = true
    vacuum = true                        ; Delete sockets during shutdown
    single-interpreter = true
    die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
    need-app = true

    # logging
    # path to where uwsgi logs will be saved
    logto = /var/log/geonode.log

    touch-reload = /usr/src/geonode/geonode/wsgi.py
    buffer-size = 32768

    harakiri = 800
    py-callos-afterfork = true

    max-requests = 1000
    max-worker-lifetime = 3600
    reload-on-rss = 2048
    worker-reload-mercy = 60

    cheaper-algo = busyness
    processes = 128
    cheaper = 8
    cheaper-initial = 16
    cheaper-overload = 1
    cheaper-step = 16

    cheaper-busyness-multiplier = 30
    cheaper-busyness-min = 20
    cheaper-busyness-max = 70
    cheaper-busyness-backlog-alert = 16
    cheaper-busyness-backlog-step = 2

    # daemonize = /var/log/uwsgi/geonode.log
    # cron = -1 -1 -1 -1 -1 /usr/local/bin/python /usr/src/geonode/manage.py collect_metrics -n
---
# Source: geonode-k8s/templates/geoserver/geoserver-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geoserver-env
  namespace: default
data:
  GEONODE_LB_HOST_IP: "geonode"
  SUBSTITUTION_URL: "http://geonode"
  GEONODE_HOST_IP: localhost

  DJANGO_URL: http://my-release-geonode/
  ENABLE_JSONP: 'true'
  outFormat: text/javascript
  # trimSuffix trims of suffix "i" coming from resources memory in Gi or Mi
  GEOSERVER_JAVA_OPTS: "-Xms1G -Xmx4G -Djava.awt.headless=true -Dgwc.context.suffix=gwc -XX:+UnlockDiagnosticVMOptions -XX:+LogVMOutput -XX:LogFile=/var/log/jvm.log -XX:PerfDataSamplingInterval=500 -XX:SoftRefLRUPolicyMSPerMB=36000 -XX:-UseGCOverheadLimit -XX:+UseConcMarkSweepGC -XX:ParallelGCThreads=4 -Dfile.encoding=UTF8 -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8 -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=false -DGS-SHAPEFILE-CHARSET=UTF-8 -DGEOSERVER_CSRF_DISABLED=true -DPRINT_BASE_URL=http://geonode/geoserver/pdf -DALLOW_ENV_PARAMETRIZATION=true -Xbootclasspath/a:/usr/local/tomcat/webapps/geoserver/WEB-INF/lib/marlin-0.9.3-Unsafe.jar -Dsun.java2d.renderer=org.marlin.pisces.MarlinRenderingEngine"
  NGINX_BASE_URL: "http://geonode"

  DATABASE_HOST: "my-release-postgres"
  DATABASE_PORT: "5432"
  GEONODE_GEODATABASE: "geodata"
  GEONODE_GEODATABASE_SCHEMA: "public"
  FORCE_REINIT: "true"
---
# Source: geonode-k8s/templates/geoserver/geoserver-notifier-xml.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geoserver-notifier-xml
  namespace: default
data:
  notifier.xml: |
    <notificationConfiguration>
      <queueSize>1000</queueSize>
      <notificator>
        <queueSize>1000</queueSize>
        <processorThreads>1</processorThreads>
        <messageFilter>type='Catalog'</messageFilter>
        <genericProcessor>
          <geonodeEncoder />
          <topicSender>
            <username>rabbituser</username>
            <password>rabbitpassword</password>
            <host>my-release-rabbitmq</host>
            <port>5672</port>
            <virtualHost>/</virtualHost>
            <exchangeName>geonode</exchangeName>
            <routingKey>geoserver.catalog</routingKey>
          </topicSender>
        </genericProcessor>
      </notificator>
      <notificator>
        <queueSize>1000</queueSize>
        <processorThreads>10</processorThreads>
        <messageFilter>type='Data'</messageFilter>
        <genericProcessor>
          <geonodeEncoder />
          <topicSender>
            <username>rabbituser</username>
            <password>rabbitpassword</password>
            <host>my-release-rabbitmq</host>
            <port>5672</port>
            <virtualHost>/</virtualHost>
            <exchangeName>geonode</exchangeName>
            <routingKey>geoserver.data</routingKey>
          </topicSender>
        </genericProcessor>
      </notificator>
    </notificationConfiguration>
---
# Source: geonode-k8s/templates/nginx/nginx-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nginx-confd
  namespace: default
data:
  geonode.conf: |
    server {
      listen 80 default_server;
      listen [::]:80 default_server;

      # resolver is required because we use variables as upstream
      # resolver kube-dns.kube-system.svc 8.8.8.8 8.8.4.4 valid=300s;

      include /etc/nginx/mime.types;

      # This is the main geonode conf
      charset     utf-8;

      # max upload size
      client_max_body_size 100G;
      client_body_buffer_size 256K;
      large_client_header_buffers 4 64k;
      proxy_read_timeout 600s;

      fastcgi_hide_header Set-Cookie;

      etag on;

      # compression
      gzip on;
      gzip_vary on;
      gzip_proxied any;
      gzip_http_version 1.1;
      gzip_disable "MSIE [1-6]\.";
      gzip_buffers 16 8k;
      gzip_min_length 1100;
      gzip_comp_level 6;
      gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        application/xml
        application/xml+rss
        application/javascript
        application/x-javascript
        application/json;

      location = /favicon.ico {
        alias /mnt/volumes/statics/static/img/favicon.ico;
      }

      # GeoServer
      location /geoserver {
        client_max_body_size 2G;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://my-release-geoserver:8080;
      }

      # GeoNode
      location /static/ {
        alias /mnt/volumes/statics/static/;
        client_max_body_size 2G;

        location ~* \.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
        }
      }

      # GeoNode Upload
      location /uploaded/ {
        client_max_body_size 2G;

        alias /mnt/volumes/statics/uploaded/;
        location ~* \.(?:html|js|jpg|jpeg|gif|png|css|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|txt|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
        }
      }

      location ~ ^/celery-monitor/? {
        # Using a variable is a trick to let Nginx start even if upstream host is not up yet
        # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
        set $upstream my-release-geonode:5555;

        rewrite ^/celery-monitor/?(.*)$ /$1 break;

        sub_filter '="/' '="/celery-monitor/';
        sub_filter_last_modified on;
        sub_filter_once off;

        # proxy_pass http://unix:/tmp/flower.sock:/;
        proxy_pass http://$upstream;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
      }

      
      # external PYCSW forward 
      location /catalogue/csw {
        client_max_body_size 2G;

        # compression
        gzip on;
        gzip_types
          text/xml
          text/plain
          application/xml
          application/xml+rss
          application/json;

        proxy_pass http://my-release-pycsw:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
      

      location / {
        client_max_body_size 2G;

        # FIXME: Work around /proxy sometimes using a mix of public/internal URL to geonode...
        rewrite_log on;
        #rewrite ^/proxy/(.*)url=http?://geonode(:\d+)?/geoserver(.*) /proxy/$1url=http://geoserver:8080$3 last;

        if ($request_method = OPTIONS) {
          add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";
          add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept";
          add_header Access-Control-Allow-Credentials true;
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          add_header Access-Control-Max-Age 1728000;
          return 200;
        }
        add_header Access-Control-Allow-Credentials false;
        add_header Access-Control-Allow-Headers "Content-Type, Accept, Authorization, Origin, User-Agent";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, OPTIONS";

        proxy_connect_timeout       600s;
        proxy_send_timeout          600s;
        proxy_read_timeout          600s;
        send_timeout                600s;
        proxy_redirect              off;
        proxy_set_header            Host $host;
        proxy_set_header            X-Real-IP $remote_addr;
        proxy_set_header            X-Forwarded-Host $server_name;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header            X-Forwarded-Proto $scheme;

        # uwsgi_params
        include /etc/nginx/uwsgi_params;

        # proxy_pass http://$upstream;
        uwsgi_pass my-release-geonode:8000;
        uwsgi_read_timeout 300s;
        # when a client closes the connection then keep the channel to uwsgi open. Otherwise uwsgi throws an IOError
        uwsgi_ignore_client_abort on;

        # uwsgi_params
        include /etc/nginx/uwsgi_params;

        location ~* \.(?:js|jpg|jpeg|gif|png|tgz|gz|rar|bz2|doc|pdf|ppt|tar|wav|bmp|ttf|rtf|swf|ico|flv|woff|woff2|svg|xml)$ {
          gzip_static always;
          expires 30d;
          access_log off;
          add_header Pragma "public";
          add_header Cache-Control "max-age=31536000, public";
        }
      }
    }
---
# Source: geonode-k8s/templates/pycsw/pycsw-cfg.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-pycsw-cfg
  namespace: default
data:
  pycsw.cfg: |-
   [server]
       home=/home/pycsw
       url=$(PYCSW_SERVER_URL)
       mimetype=application/xml; charset=UTF-8
       encoding=UTF-8
       language= en-US
       maxrecords=10
       # loglevel=
       # logfile=
       # ogc_schemas_base=
       # federatedcatalogues=
       # pretty_print=
       gzip_compresslevel=1
       # domainquerytype=
       # domaincounts=
       # spatial_ranking=
       profiles=apiso
       # workers=
       timeout=30
   [manager]
       transactions=false
       # allowed_ips=
       # csw_harvest_pagesize=
   [metadata:main]
       identification_title=GeoNode pycsw Geospatial Catalogue
       identification_abstract=GeoNode-k8s pycsw Geospatial Catalogue
       identification_keywords=catalogue,discovery,metadata, geonode
       identification_keywords_type=theme
       identification_fees=None
       identification_accessconstraints=None
       provider_name=GeoNode Kubernetes
       provider_url=https://pycsw.org/
       contact_name=Lastname, Firstname
       contact_position=Position Title
       contact_address=Mailing Address
       contact_city=City
       contact_stateorprovince=Administrative Area
       contact_postalcode=Zip or Postal Code
       contact_country=Country
       contact_phone=+xx-xxx-xxx-xxxx
       contact_fax=+xx-xxx-xxx-xxxx
       contact_email=Email Address
       contact_url=Contact URL
       contact_hours=Hours of Service
       contact_instructions=During hours of service.  Off on weekends.
       contact_role=pointOfContact
   [repository]
       database=${PYCSW_REPOSITORY_DATABASE_URI}
       mappings=/etc/pycsw/pycsw-mappings.py
       table=base_resourcebase
       # filter=
   [metadata:inspire]
       enabled="true"
       languages_supported=eng,gre
       default_language=eng
       date=YYYY-MM-DD
       gemet_keywords=Utility and governmental services
       conformity_service=notEvaluated
       contact_name=Organization Name
       contact_email=Email Address
       temp_extent=YYYY-MM-DD/YYYY-MM-DD
---
# Source: geonode-k8s/templates/pycsw/pycsw-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-pycsw-env
  namespace: default
data:
  # Database Settings
  DATABASE_HOST: "my-release-postgres"
  DATABASE_PORT: "5432"
  GEONODE_DATABASE: "geonode"
  GEONODE_DATABASE_SCHEMA: public
---
# Source: geonode-k8s/templates/pycsw/pycsw-mappings-py.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-pycsw-mappings-py
  namespace: default
data:
  pycsw-mappings.py: |-
   MD_CORE_MODEL = {
     "typename": "pycsw:CoreMetadata",
     "outputschema": "http://pycsw.org/metadata",
     "mappings": {
         "pycsw:Identifier": "uuid",
         "pycsw:Typename": "csw_typename",
         "pycsw:Schema": "csw_schema",
 
         "pycsw:MdSource": "csw_mdsource",
         "pycsw:InsertDate": "csw_insert_date",
         "pycsw:XML": "metadata_xml",
         "pycsw:AnyText": "csw_anytext",
         "pycsw:Language": "language",
         "pycsw:Title": "title",
         "pycsw:Abstract": "raw_abstract",
         "pycsw:Keywords": "keyword_csv",
         "pycsw:KeywordType": "keywordstype",
         "pycsw:Format": "spatial_representation_type_string",
         "pycsw:Source": "source",
         "pycsw:Date": "date",
         "pycsw:Modified": "date",
         "pycsw:Type": "csw_type",
         "pycsw:BoundingBox": "csw_wkt_geometry",
         "pycsw:CRS": "csw_crs",
         "pycsw:AlternateTitle": "alternate",
         "pycsw:RevisionDate": "date",
         "pycsw:CreationDate": "date",
         "pycsw:PublicationDate": "date",
         "pycsw:Organization": "organizationname",
         "pycsw:OrganizationName": "organizationname",
         "pycsw:SecurityConstraints": "securityconstraints",
         "pycsw:ParentIdentifier": "parentidentifier",
         "pycsw:TopicCategory": "topiccategory",
         "pycsw:ResourceLanguage": "language",
         "pycsw:GeographicDescriptionCode": "geodescode",
         "pycsw:Denominator": "denominator",
         "pycsw:DistanceValue": "distancevalue",
         "pycsw:DistanceUOM": "distanceuom",
         "pycsw:TempExtent_begin": "temporal_extent_start",
         "pycsw:TempExtent_end": "temporal_extent_end",
         "pycsw:ServiceType": "servicetype",
         "pycsw:ServiceTypeVersion": "servicetypeversion",
         "pycsw:Operation": "operation",
         "pycsw:CouplingType": "couplingtype",
         "pycsw:OperatesOn": "operateson",
         "pycsw:OperatesOnIdentifier": "operatesonidentifier",
         "pycsw:OperatesOnName": "operatesoname",
         "pycsw:Degree": "degree",
         "pycsw:AccessConstraints": "restriction_code",
         "pycsw:OtherConstraints": "raw_constraints_other",
         "pycsw:Classification": "classification",
         "pycsw:ConditionApplyingToAccessAndUse": "conditionapplyingtoaccessanduse",
         "pycsw:Lineage": "lineage",
         "pycsw:ResponsiblePartyRole": "responsiblepartyrole",
         "pycsw:SpecificationTitle": "specificationtitle",
         "pycsw:SpecificationDate": "specificationdate",
         "pycsw:SpecificationDateType": "specificationdatetype",
         "pycsw:Creator": "creator",
         "pycsw:Publisher": "publisher",
         "pycsw:Contributor": "contributor",
         "pycsw:Relation": "relation",
         "pycsw:Links": "download_links",
     },
   }
---
# Source: geonode-k8s/templates/geonode/geonode-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-my-release-geonode
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: 
  resources:
    requests:
      storage: 10Gi
---
# Source: geonode-k8s/charts/postgres-operator/templates/clusterrole-postgres-pod.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-postgres-operator-pod
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
rules:
# Patroni needs to watch and manage config maps or endpoints
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# Patroni needs to watch pods
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
# to let Patroni create a headless service
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
---
# Source: geonode-k8s/charts/postgres-operator/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-postgres-operator
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
rules:
# all verbs allowed for custom operator resources
- apiGroups:
  - acid.zalan.do
  resources:
  - postgresqls
  - postgresqls/status
  - operatorconfigurations
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# operator only reads PostgresTeams
- apiGroups:
  - acid.zalan.do
  resources:
  - postgresteams
  verbs:
  - get
  - list
  - watch
# all verbs allowed for event streams
# to create or get/update CRDs when starting up
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - create
  - patch
  - update
# to send events to the CRs
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
# to manage endpoints/configmaps which are also used by Patroni
# to read configuration from ConfigMaps
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
# to CRUD secrets for database access
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - update
# to check nodes for node readiness label
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
# to read or delete existing PVCs. Creation via StatefulSet
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - delete
  - get
  - list
  - patch
  - update
 # to read existing PVs. Creation should be done via dynamic provisioning
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
# to watch Spilo pods and do rolling updates. Creation via StatefulSet
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - patch
  - update
  - watch
# to resize the filesystem in Spilo pods when increasing volume size
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
# to CRUD services to point to Postgres cluster instances
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - patch
  - update
# to CRUD the StatefulSet which controls the Postgres cluster instances
- apiGroups:
  - apps
  resources:
  - statefulsets
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
# to CRUD cron jobs for logical backups
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
# to get namespaces operator resources can run in
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
# to define PDBs. Update happens via delete/create
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - get
# to create ServiceAccounts in each namespace the operator watches
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - create
# to create role bindings to the postgres-pod service account
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - get
  - create
---
# Source: geonode-k8s/charts/postgres-operator/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-postgres-operator
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-postgres-operator
subjects:
- kind: ServiceAccount
  name: my-release-postgres-operator
  namespace: default
---
# Source: geonode-k8s/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: geonode-k8s/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
subjects:
  - kind: ServiceAccount
    name: my-release-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-rabbitmq-endpoint-reader
---
# Source: geonode-k8s/charts/memcached/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcached
---
# Source: geonode-k8s/charts/postgres-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
  name: my-release-postgres-operator
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgres-operator
---
# Source: geonode-k8s/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
  publishNotReadyAddresses: true
---
# Source: geonode-k8s/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: geonode-k8s/templates/geonode/geonode-svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: "my-release-geonode"
  namespace: default
spec:
  selector:
    org.geonode.instance: "my-release-geonode"
  ports:
  - targetPort: 8000
    port: 8000
    name: geonode
  - targetPort: 8001
    port: 8001
    name: geonode-liveprobe
  - targetPort: 5555
    port: 5555
    name: celery
---
# Source: geonode-k8s/templates/geoserver/geoserver-svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: "my-release-geoserver"
  namespace: default
spec:
  selector:
    org.geonode.instance: "my-release-geoserver"
  ports:
  - targetPort: 8080
    port: 8080
    name: http
  type: ClusterIP
---
# Source: geonode-k8s/templates/nginx/nginx-svc.yaml
# Load-balancer
kind: Service
apiVersion: v1
metadata:
  name: "my-release-nginx"
  namespace: default
spec:
  selector:
    org.geonode.instance: "my-release-nginx"
  ports:
  - targetPort: 80
    port: 80
  type: ClusterIP
---
# Source: geonode-k8s/templates/pycsw/pycsw-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-pycsw"
  namespace: default
spec:
  selector:
    org.geonode.instance: "my-release-pycsw"
  ports:
  - targetPort: 8000
    port: 8000
    name: pycsw
---
# Source: geonode-k8s/charts/postgres-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
  name: my-release-postgres-operator
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-operator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: fc9d4ce9de19fab3f957a694ac1fb0f44bc08804bfaa1fe682614c5ca1f56e9f
      labels:
        app.kubernetes.io/name: postgres-operator
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-postgres-operator
      containers:
      - name: postgres-operator
        image: "registry.opensource.zalan.do/acid/postgres-operator:v1.9.0"
        imagePullPolicy: IfNotPresent
        env:
        - name: POSTGRES_OPERATOR_CONFIGURATION_OBJECT
          value: my-release-postgres-operator
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 250Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
      affinity:
        {}
      nodeSelector:
        {}
      tolerations:
        []
---
# Source: geonode-k8s/templates/nginx/nginx-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-nginx"
  namespace: default
spec:
  selector:
    matchLabels:
      org.geonode.instance: "my-release-nginx"
  replicas: 1
  template:
    metadata:
      labels:
        org.geonode.instance: "my-release-nginx"
      annotations:
        checksum/config: 7e39cc30b002526de41b28bfc81571c7c8e508568168f7e4ff78313499656c84
    spec:
      terminationGracePeriodSeconds: 3

      containers:
      - name: nginx
        image: "nginx:1.25"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http

        volumeMounts:
        - name: "persistence"
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: geonode-favicon
          mountPath: /mnt/volumes/statics/static/geonode/img/favicon.ico
          subPath: favicon.ico
        - name: nginx-confd
          mountPath: /etc/nginx/conf.d

        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 800m

      volumes:
      - name: nginx-confd
        configMap:
          name: my-release-nginx-confd
      - name: geonode-favicon
        configMap:
          name: my-release-geonode-favicon
      - name: "persistence"
        persistentVolumeClaim:
          claimName: pvc-my-release-geonode
---
# Source: geonode-k8s/charts/memcached/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.24
    helm.sh/chart: memcached-6.14.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcached
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: my-release-memcached
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcached
        app.kubernetes.io/version: 1.6.24
        helm.sh/chart: memcached-6.14.0
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcached
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-memcached
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.24-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: memcache
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: geonode-k8s/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.1.19
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.7"
spec:
  serviceName: my-release-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-10.1.19
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.10.7"
      annotations:
        checksum/config: ad48a93af51a9bcc4a75b3ef55d16a3ef5f1b00572d00734be75ede7b4a5fd14
        checksum/secret: 825ccc758be33662921dd9d0f82becda2d462ccbbe431138e24b92ce79cb1954
    spec:
      
      serviceAccountName: my-release-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: rabbitmq
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.10.7-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: my-release-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "rabbituser"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - test "$(curl -f --user rabbituser:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/healthchecks/node)" = '{"status":"ok"}'
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - curl -f --user rabbituser:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/local-alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          secret:
            secretName: my-release-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
# Source: geonode-k8s/templates/geonode/geonode-deploy.yaml
# check if postgres.type is set to external operator




# geonode stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-release-geonode"
  namespace: default
spec:
  selector:
    matchLabels:
      org.geonode.instance: "my-release-geonode"
  serviceName: "my-release-geonode"
  replicas: 1
  template:
    metadata:
      labels:
        org.geonode.instance: "my-release-geonode"
      annotations:
        checksum/geonode-env: 3217f86f03100b44c5ce00a1ab4db02729025da934cac43ab6e1e87bbdd62758
        checksum/geonode-secret: 068d1834e82d9980636a0f0d5b88bde698cee72660c8c8fcebd95022cdd8c3ed
        checksum/geonode-tasks-py: 93700cbd016bc52eec5d3d793f8dc4b7f70584e2c2d665c13badf0d2ecc97552
        checksum/geonode-local-settings: 867da544de39c7a1dd3c8da87522115a85bdf7dc8907ca1f9be78dae44547736
        checksum/geonode-settings-additions: bb8e5a0fbd8e3d12de4d4a6e882f7a8a5f3a04f2427f8833022a88f48f298ceb
        checksum/geonode-uwsig: 7433ed0452010fb8686c0eec36cc4f8435c1b61c3f3b1304d370a8c5c776ebc4
    spec:
      terminationGracePeriodSeconds: 3

      initContainers:
      # Wait for Postgres and rabbit
      - name: geonode-wait-for-db-and-rabbit
        image: "jwilder/dockerize:0.6.1"
        imagePullPolicy: IfNotPresent
        args:
        - -timeout=60s
        - -wait
        - tcp://my-release-postgres:5432
        - -wait
        - tcp://my-release-rabbitmq:5672

      containers:
      # This is the django app server
      - name: geonode
        image: "geonode/geonode:4.2.2"
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          # install dockerize...
          wget -q https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

          

          # Add config overrides
          cat /usr/src/geonode/geonode/geonode-k8s-settings.py >> /usr/src/geonode/geonode/settings.py
          cat /usr/src/geonode/geonode/geonode-k8s-settings-additions.py >> /usr/src/geonode/geonode/settings.py

          # Setup
          touch /usr/src/geonode/invoke.log
          dockerize -stdout /usr/src/geonode/invoke.log /usr/src/geonode/entrypoint.sh

          # Run web server
          touch /var/log/geonode.log
          dockerize -stdout /var/log/geonode.log /usr/local/bin/uwsgi --ini /usr/src/geonode/uwsgi.ini

        ports:
        - containerPort: 8000
        - containerPort: 8001

        envFrom:
        - configMapRef:
            name: my-release-geonode-env
        - secretRef:
            name: "my-release-geonode-secret"
        - secretRef:
            name: "my-release-geoserver-secret"

        env:
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "geonode.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "geodata.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "postgres.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: GEODATABASE_URL
          value: "postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)"
        - name: DATABASE_URL
          value: "postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)"

        volumeMounts:
        - name: "persistence"
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: "persistence"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: "persistence"
          mountPath: /backup_restore
          subPath: backup-restore
        - name: "persistence"
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        - name: tasks-py
          mountPath: "/usr/src/geonode/tasks.py"
          subPath: tasks.py
          readOnly: true
        - name: entrypoint-sh
          mountPath: "/usr/src/geonode/entrypoint.sh"
          subPath: entrypoint.sh
        - name: uwsgi-ini
          mountPath: "/usr/src/geonode/uwsgi.ini"
          subPath: uwsgi.ini
          readOnly: true
        - name: geonode-k8s-settings-py
          mountPath: "/usr/src/geonode/geonode/geonode-k8s-settings.py"
          subPath: geonode-k8s-settings.py
        - name: geonode-k8s-settings-additions-py
          mountPath: "/usr/src/geonode/geonode/geonode-k8s-settings-additions.py"
          subPath: geonode-k8s-settings-additions.py
          readOnly: true
        
        - name: geonode-fixtures
          mountPath: "/usr/src/geonode/geonode/fixtures"
          readOnly: true
        

        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 2Gi
            cpu: 2

      # Celery is the task worker
      - name: celery
        image: "geonode/geonode:4.2.2"
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          # install dockerize...
          wget -q https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

          

          

          # Add config overrides
          cat /usr/src/geonode/geonode/geonode-k8s-settings.py >> /usr/src/geonode/geonode/settings.py
          cat /usr/src/geonode/geonode/geonode-k8s-settings-additions.py >> /usr/src/geonode/geonode/settings.py
          # Setup
          touch /var/log/celery.log
          dockerize -stdout /var/log/celery.log /usr/src/geonode/entrypoint.sh celery-cmd

        envFrom:
        - configMapRef:
            name: my-release-geonode-env
        - secretRef:
            name: "my-release-geonode-secret"
        - secretRef:
            name: "my-release-geoserver-secret"

        env:
        - name: IS_CELERY
          value: 'True'
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "geonode.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: GEONODE_GEODATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "geodata.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "postgres.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: GEODATABASE_URL
          value: "postgis://$(GEONODE_GEODATABASE):$(GEONODE_GEODATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_GEODATABASE)"
        - name: DATABASE_URL
          value: "postgis://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)"

        ports:
        - containerPort: 5555

        volumeMounts:
        - name: "persistence"
          mountPath: /mnt/volumes/statics
          subPath: statics
        - name: "persistence"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: "persistence"
          mountPath: /backup_restore
          subPath: backup-restore
        - name: "persistence"
          mountPath: /data
          subPath: data
        - name: cache-volume
          mountPath: /tmp
        - name: entrypoint-sh
          mountPath: "/usr/src/geonode/entrypoint.sh"
          subPath: entrypoint.sh
        - name: tasks-py
          mountPath: "/usr/src/geonode/tasks.py"
          subPath: tasks.py
          readOnly: true
        - name: geonode-k8s-settings-py
          mountPath: "/usr/src/geonode/geonode/geonode-k8s-settings.py"
          subPath: geonode-k8s-settings.py
        - name: geonode-k8s-settings-additions-py
          mountPath: "/usr/src/geonode/geonode/geonode-k8s-settings-additions.py"
          subPath: geonode-k8s-settings-additions.py
          readOnly: true
        
        - name: geonode-fixtures
          mountPath: "/usr/src/geonode/geonode/fixtures"
          readOnly: true
        

        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 2Gi
            cpu: 2

      volumes:
        - name: "persistence"
          persistentVolumeClaim:
            claimName: pvc-my-release-geonode
        - name: tasks-py
          configMap:
            name: my-release-geonode-tasks-py
            items:
            - key: tasks.py
              path: "tasks.py"
        - name: entrypoint-sh
          configMap:
            name: my-release-geonode-entrypoint-sh
            defaultMode: 0744
            items:
            - key: entrypoint.sh
              path: "entrypoint.sh"
        - name: uwsgi-ini
          configMap:
            name: my-release-geonode-uwsgi-ini
            defaultMode: 0744
            items:
            - key: uwsgi.ini
              path: "uwsgi.ini"
        - name: geonode-k8s-settings-py
          configMap:
            name: my-release-geonode-k8s-settings-py
            defaultMode: 0744
            items:
            - key: geonode-k8s-settings.py
              path: "geonode-k8s-settings.py"
        - name: geonode-k8s-settings-additions-py
          configMap:
            name: my-release-geonode-k8s-settings-additions-py
            defaultMode: 0744
            items:
            - key: geonode-k8s-settings-additions.py
              path: "geonode-k8s-settings-additions.py"
        - name: geonode-fixtures
          configMap:
            name: my-release-geonode-fixtures
            defaultMode: 0744
            items:
            - key: "somefixture.json"
              path: "somefixture.json"
        # Using an emptyDir to cache compiled statics... it will survive container crashes, but not pod restarts
        - name: cache-volume
          emptyDir: {}
---
# Source: geonode-k8s/templates/geoserver/geoserver-deploy.yaml
# geoserver stateful set
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-release-geoserver"
  namespace: default
spec:
  selector:
    matchLabels:
      org.geonode.instance: "my-release-geoserver"
  serviceName: "my-release-geoserver"
  replicas: 1
  template:
    metadata:
      labels:
        org.geonode.instance: "my-release-geoserver"
      annotations:
        checksum/geoserver-env: 18755ac6c8775a8c0e847851c38434df257456c50ec40cbf19b3e633c5fa3c03
        checksum/geoserver-secret: 59ecc438f4b29f7ca9a83b08b23ac2e25b2c58bc8cdff66de8fe31a4a3eed723

    spec:
      terminationGracePeriodSeconds: 3
      initContainers:
      - name: geoserver-data-dir
        image: "geonode/geoserver_data:2.23.3-v1"
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          if [ ! -f /geoserver_data/data/.geoserver_data_copied ] ; then
            # Copy defaults from data container
            echo "copying geoserver_data files into volume ..."
            cp -r /tmp/geonode/downloaded/data/* /geoserver_data/data/
            touch /geoserver_data/data/.geoserver_data_copied
          else
            echo "geoserver_data files already exists, skipping copy ..."
          fi
        envFrom:
        - configMapRef:
            name:  my-release-geoserver-env
        - secretRef:
            name: "my-release-geoserver-secret"
        volumeMounts:
        - name: "persistence"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir
        - name: geoserver-notifier-xml
          mountPath: /overrides

      containers:
      - name: geoserver
        image: "geonode/geoserver:2.23.3-v2"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080

        envFrom:
        - configMapRef:
            name:  my-release-geoserver-env
        - secretRef:
            name: "my-release-geoserver-secret"

        env:
          # read auto generated password from secret
          - name: GEONODE_GEODATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "geodata.my-release-postgres.credentials.postgresql.acid.zalan.do"
                key: password

        volumeMounts:
        - name: "persistence"
          mountPath: /geoserver_data/data
          subPath: geoserver-data-dir

        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 15

        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 180
          periodSeconds: 5
          failureThreshold: 15

        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 4Gi
            cpu: 2

      volumes:
      - name: geoserver-notifier-xml
        configMap:
          name: my-release-geoserver-notifier-xml
      - name: "persistence"
        persistentVolumeClaim:
          claimName: pvc-my-release-geonode
---
# Source: geonode-k8s/templates/pycsw/pycsw-deploy.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "my-release-pycsw"
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      org.geonode.instance: "my-release-pycsw"
  serviceName: "my-release-pycsw"
  template:
    metadata:
      labels:
        org.geonode.instance: "my-release-pycsw"
      annotations:
        checksum/pycsw-env: e6d32bcf6b73725dac4d2625667baf8970335793dc6a0693b21c9972076419a5
        checksum/pycsw-cfg: 013d7510c33f3d61160bee553d4e4554669b912a1fe8830b01a095431fe36ad0
        checksum/pycsw-mappings-py: 0938fb070c83210a1a4c155b053057643cdebaecdb192d22eec35df9c18d5532
    spec:
      terminationGracePeriodSeconds: 3

      initContainers:
      # Wait for GeoNode to be up and running, else there can be a race conddition where pycsw creates the database table,
      # and lets crash init process of geonode
      - name: pycsw-wait-for-geonode
        image: "alpine/curl:8.5.0"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh","-c"]
        args: ['while [ $(curl -ksw "%{http_code}" "$GEONODE_ENDPOINT:8001" -o /dev/null) -ne 200 ]; do sleep 5; echo "health check failed . Waiting for GeoNode ($GEONODE_ENDPOINT:8001) ..."; done']
        env:
        - name: GEONODE_ENDPOINT
          value: "my-release-geonode"

      containers:
      - name: pycsw
        image: "geopython/pycsw:2.6.1"
        imagePullPolicy: IfNotPresent
        envFrom:
          - configMapRef:
              name: my-release-pycsw-env
        env: 
        - name: PYCSW_SERVER_URL
          value: ":///catalogue/csw"
        - name: GEONODE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "geonode.my-release-postgres.credentials.postgresql.acid.zalan.do"
              key: password
        - name: PYCSW_REPOSITORY_DATABASE_URI
          value: "postgresql://$(GEONODE_DATABASE):$(GEONODE_DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(GEONODE_DATABASE)"

        ports:
        - containerPort: 8000
        volumeMounts:
        - name: pycsw-cfg
          mountPath: "/etc/pycsw/pycsw.cfg"
          subPath: pycsw.cfg
          readOnly: true
        - name: pycsw-mappings-py
          mountPath: /etc/pycsw/pycsw-mappings.py
          subPath: pycsw-mappings.py
          readOnly: true
        resources:
          requests:
            memory: 1Gi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 500m
        # livenessProbe:
        #   httpGet:
        #     path: /
        #     port: 8000
        #   initialDelaySeconds: 3
        #   periodSeconds: 10

      volumes:
      - name: pycsw-cfg
        configMap:
          name: my-release-pycsw-cfg
          defaultMode: 0744
          items:
          - key: pycsw.cfg
            path: "pycsw.cfg"
      - name: pycsw-mappings-py
        configMap:
          name: my-release-pycsw-mappings-py
          defaultMode: 0744
          items:
          - key: pycsw-mappings.py
            path: "pycsw-mappings.py"
---
# Source: geonode-k8s/templates/nginx/nginx-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name:  "my-release-nginx-ingress"
  annotations:
    description: Configures routes for external access
spec:
  ingressClassName: 
  
  rules:
  - host: geonode
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name:  "my-release-nginx"
            port:
              number: 80
---
# Source: geonode-k8s/charts/postgres-operator/templates/operatorconfiguration.yaml
apiVersion: "acid.zalan.do/v1"
kind: OperatorConfiguration
metadata:
  name: my-release-postgres-operator
  namespace: default
  labels:
    app.kubernetes.io/name: postgres-operator
    helm.sh/chart: postgres-operator-1.9.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
configuration:
  crd_categories:
  - all
  docker_image: ghcr.io/zalando/spilo-15:2.1-p9
  enable_crd_registration: true
  enable_lazy_spilo_upgrade: false
  enable_pgversion_env_var: true
  enable_shm_volume: true
  enable_spilo_wal_path_compat: false
  enable_team_id_clustername_prefix: false
  etcd_host: ""
  max_instances: -1
  min_instances: -1
  repair_period: 5m
  resync_period: 30m
  workers: 8
  users:
    enable_password_rotation: false
    password_rotation_interval: 90
    password_rotation_user_retention: 180
    replication_username: standby
    super_username: postgres
  major_version_upgrade:
    major_version_upgrade_mode: "off"
    minimal_major_version: "11"
    target_major_version: "15"
  kubernetes:
    pod_service_account_name: my-release-postgres-operator-pod
    oauth_token_secret_name: my-release-postgres-operator
    cluster_domain: cluster.local
    cluster_labels:
      application: spilo
    cluster_name_label: cluster-name
    enable_cross_namespace_secret: false
    enable_init_containers: true
    enable_pod_antiaffinity: false
    enable_pod_disruption_budget: true
    enable_readiness_probe: false
    enable_sidecars: true
    pdb_name_format: postgres-{cluster}-pdb
    pod_antiaffinity_preferred_during_scheduling: false
    pod_antiaffinity_topology_key: kubernetes.io/hostname
    pod_management_policy: ordered_ready
    pod_role_label: spilo-role
    pod_terminate_grace_period: 5m
    secret_name_template: '{username}.{cluster}.credentials.{tprkind}.{tprgroup}'
    share_pgsocket_with_sidecars: false
    spilo_allow_privilege_escalation: true
    spilo_privileged: false
    storage_resize_mode: pvc
    watched_namespace: '*'
  postgres_pod_resources:
    default_cpu_limit: "1"
    default_cpu_request: 100m
    default_memory_limit: 500Mi
    default_memory_request: 100Mi
    min_cpu_limit: 250m
    min_memory_limit: 250Mi
  timeouts:
    patroni_api_check_interval: 1s
    patroni_api_check_timeout: 5s
    pod_deletion_wait_timeout: 10m
    pod_label_wait_timeout: 10m
    ready_wait_interval: 3s
    ready_wait_timeout: 30s
    resource_check_interval: 3s
    resource_check_timeout: 10m
  load_balancer:
    db_hosted_zone: db.example.com
    enable_master_load_balancer: false
    enable_master_pooler_load_balancer: false
    enable_replica_load_balancer: false
    enable_replica_pooler_load_balancer: false
    external_traffic_policy: Cluster
    master_dns_name_format: '{cluster}.{namespace}.{hostedzone}'
    master_legacy_dns_name_format: '{cluster}.{team}.{hostedzone}'
    replica_dns_name_format: '{cluster}-repl.{namespace}.{hostedzone}'
    replica_legacy_dns_name_format: '{cluster}-repl.{team}.{hostedzone}'
  aws_or_gcp:
    aws_region: eu-central-1
    enable_ebs_gp3_migration: false
  logical_backup:
    logical_backup_docker_image: registry.opensource.zalan.do/acid/logical-backup:v1.8.0
    logical_backup_job_prefix: logical-backup-
    logical_backup_provider: s3
    logical_backup_s3_access_key_id: ""
    logical_backup_s3_bucket: my-bucket-url
    logical_backup_s3_endpoint: ""
    logical_backup_s3_region: ""
    logical_backup_s3_retention_time: ""
    logical_backup_s3_secret_access_key: ""
    logical_backup_s3_sse: AES256
    logical_backup_schedule: 30 00 * * *
  debug:
    debug_logging: true
    enable_database_access: true
  teams_api:
    enable_admin_role_for_users: true
    enable_postgres_team_crd: false
    enable_postgres_team_crd_superusers: false
    enable_team_member_deprecation: false
    enable_team_superuser: false
    enable_teams_api: false
    pam_role_name: zalandos
    postgres_superuser_teams:
    - postgres_superusers
    protected_role_names:
    - admin
    - cron_admin
    role_deletion_suffix: _deleted
    team_admin_role: admin
    team_api_role_configuration:
      log_statement: all
  logging_rest_api:
    api_port: 8080
    cluster_history_entries: 1000
    ring_log_lines: 100
  connection_pooler:
    connection_pooler_default_cpu_limit: "1"
    connection_pooler_default_cpu_request: 500m
    connection_pooler_default_memory_limit: 100Mi
    connection_pooler_default_memory_request: 100Mi
    connection_pooler_image: registry.opensource.zalan.do/acid/pgbouncer:master-26
    connection_pooler_max_db_connections: 60
    connection_pooler_mode: transaction
    connection_pooler_number_of_instances: 2
    connection_pooler_schema: pooler
    connection_pooler_user: pooler
---
# Source: geonode-k8s/templates/postgres/postgresql-operator.yaml
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: "my-release-postgres"
spec:
  teamId: "my-release"
  volume:
    size: 3Gi
  numberOfInstances: 1
  users:
    postgres:
    - superuser
    geonode:
    - superuser
    - createdb
    - login
    geodata:
    - superuser
    - createdb
    - login
  databases:
    geonode: geonode
    geodata: geodata
  preparedDatabases:
    geodata:
      schemas:
        public: {}
      extensions:
        pg_partman: public
        postgis: public
    geodata:
      schemas:
        public: {}
      extensions:
        pg_partman: public
        postgis: public
  postgresql:
    version: "15"
