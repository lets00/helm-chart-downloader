---
# Source: hazelcast-jet/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-hazelcast-jet
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: hazelcast-jet/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-hazelcast-jet-configuration
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
data:
  hazelcast.yaml: |-
    hazelcast:
     cluster-name: jet
     management-center:
       enabled: ${hazelcast.mancenter.enabled}
       url: ${hazelcast.mancenter.url}
     network:
       join:
         kubernetes:
           enabled: true
           namespace: ${namespace}
           resolve-not-ready-addresses: true
           service-name: ${serviceName}
         multicast:
           enabled: false
       rest-api:
         enabled: true
         endpoint-groups:
           HEALTH_CHECK:
             enabled: true

  hazelcast-jet.yaml: |-
    hazelcast-jet:
     edge-defaults:
       packet-size-limit: 16384
       queue-size: 1024
       receive-window-multiplier: 3
     instance:
       backup-count: 1
       flow-control-period: 100
       lossless-restart-enabled: false
       scale-up-delay-millis: 10000
     metrics:
       collection-interval-seconds: 5
       enabled: true
       jmx-enabled: true
       metrics-for-data-structures: false
       retention-seconds: 120
---
# Source: hazelcast-jet/templates/management-center-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-hazelcast-jet-management-center-configuration
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
data:
  hazelcast-client.yaml: |-
    hazelcast-client:
      cluster-name: jet
      network:
        kubernetes:
          enabled: true
          namespace: ${namespace}
          service-name: ${serviceName}
---
# Source: hazelcast-jet/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-hazelcast-jet-default
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - pods
  - nodes
  verbs:
  - get
  - list
---
# Source: hazelcast-jet/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-hazelcast-jet-default
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-hazelcast-jet-default
subjects:
- kind: ServiceAccount
  name: my-release-hazelcast-jet
  namespace: default
---
# Source: hazelcast-jet/templates/management-center-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-hazelcast-jet-management-center
  labels:
    app.kubernetes.io/name: hazelcast-jet-management-center
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: hazelcast-jet-management-center
    app.kubernetes.io/instance: "my-release"
    role: managementcenter
  ports:
  - protocol: TCP
    port: 8080
    targetPort: mc-port
    name: mc-port
  - protocol: TCP
    port: 443
    targetPort: mc-port
    name: mc-https-port
---
# Source: hazelcast-jet/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-hazelcast-jet
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/name: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
  ports:
  - protocol: TCP
    port: 5701
    targetPort: hazelcast-jet
    name: hzport
---
# Source: hazelcast-jet/templates/management-center-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-hazelcast-jet-management-center
  labels:
    app.kubernetes.io/name: hazelcast-jet-management-center
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
spec:
  serviceName: my-release-hazelcast-jet-management-center
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hazelcast-jet-management-center
      app.kubernetes.io/instance: "my-release"
      role: managementcenter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hazelcast-jet-management-center
        helm.sh/chart: hazelcast-jet
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        role: managementcenter
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: my-release-hazelcast-jet-management-center
        image: "hazelcast/management-center:4.2021.12-1"
        imagePullPolicy: "IfNotPresent"
        resources:
          null
        ports:
        - name: mc-port
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /config
        - name: managementcenter-storage
          mountPath: /data
        env:
        - name: MC_INIT_CMD
          value: "./bin/mc-conf.sh cluster add --lenient=true -H /data -cc /config/hazelcast-client.yaml"
        - name: JAVA_OPTS
          value: " -Dhazelcast.mc.healthCheck.enable=true -DserviceName=my-release-hazelcast-jet -Dnamespace=default -Dhazelcast.mc.tls.enabled=false "
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 65534
      serviceAccountName: my-release-hazelcast-jet
      automountServiceAccountToken: 
      volumes:
      - name: config
        configMap:
           name: my-release-hazelcast-jet-management-center-configuration
      - name: managementcenter-storage
    
  volumeClaimTemplates:
  - metadata:
      name: managementcenter-storage
      labels:
        app.kubernetes.io/name: hazelcast-jet-management-center
        helm.sh/chart: "hazelcast-jet-1.17.1"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
---
# Source: hazelcast-jet/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-hazelcast-jet
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
spec:
  serviceName: my-release-hazelcast-jet
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: hazelcast-jet
      helm.sh/chart: hazelcast-jet
      app.kubernetes.io/instance: "my-release"
      app.kubernetes.io/managed-by: "Helm"
      role: hazelcast-jet
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hazelcast-jet
        helm.sh/chart: hazelcast-jet
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        role: hazelcast-jet
    spec:
      terminationGracePeriodSeconds: 600
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: my-release-hazelcast-jet
        image: "hazelcast/hazelcast-jet:4.5.3"
        imagePullPolicy: "IfNotPresent"
        resources:
          null
        ports:
        - name: hazelcast-jet
          containerPort: 5701
          hostPort: 
        livenessProbe:
          httpGet:
            path: /hazelcast/health/node-state
            port: 5701
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /hazelcast/health/node-state
            port: 5701
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: hazelcast-jet-storage
          mountPath: /data/hazelcast-jet
        env:
        - name: JAVA_OPTS
          value: "-Dhazelcast.config=/data/hazelcast-jet/hazelcast.yaml -Dhazelcast.jet.config=/data/hazelcast-jet/hazelcast-jet.yaml -DserviceName=my-release-hazelcast-jet -Dnamespace=default  -Dhazelcast.shutdownhook.policy=GRACEFUL -Dhazelcast.shutdownhook.enabled=true -Dhazelcast.graceful.shutdown.max.wait=600    "
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      serviceAccountName: my-release-hazelcast-jet
      volumes:
      - name: hazelcast-jet-storage
        configMap:
          name: my-release-hazelcast-jet-configuration
---
# Source: hazelcast-jet/templates/tests/test-hazelcast-jet.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-hazelcast-jet-test-df3ir"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded, hook-failed
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: "test"
    role: test
spec:
  containers:
  - name: "my-release-hazelcast-jet-test"
    image: "alpine"
    command:
    - "sh"
    - "-c"
    - |
      # set -ex
      # Install required test tools
      apk add -q curl
      # Get the number of Hazelcast members in the cluster
      CLUSTER_SIZE=$(curl my-release-hazelcast-jet:5701/hazelcast/health/cluster-size)
      # Test the correct number of Hazelcast members
      test ${CLUSTER_SIZE} -eq 2
  restartPolicy: Never
---
# Source: hazelcast-jet/templates/tests/test-management-center.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-hazelcast-jet-management-center-test-ajorw"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded, hook-failed
  labels:
    app.kubernetes.io/name: hazelcast-jet
    helm.sh/chart: hazelcast-jet
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/component: "test"
    role: test
spec:
  containers:
  - name: "my-release-hazelcast-jet-management-center-test"
    image: "alpine"
    command:
    - "sh"
    - "-c"
    - |
      set -ex
      # Install required test tools
      apk add -q jq curl
      echo my-release-hazelcast-jet-management-center:8080/health
      # Get the HTTP Response Code of the Health Check
      HEALTH_CHECK_HTTP_RESPONSE_CODE=$(curl --write-out %{http_code} --silent --output /dev/null my-release-hazelcast-jet-management-center:8080/health)
      # Test the MC HTTP RESPONSE CODE
      test ${HEALTH_CHECK_HTTP_RESPONSE_CODE} -eq 200
  restartPolicy: Never
