---
# Source: firehose/charts/kafka/templates/provisioning/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kafka-provisioning
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
automountServiceAccountToken: false
---
# Source: firehose/charts/kafka/templates/rbac/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
    app.kubernetes.io/component: kafka
automountServiceAccountToken: false
---
# Source: firehose/charts/keycloak/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.3
automountServiceAccountToken: false
---
# Source: firehose/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: false
---
# Source: firehose/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: firehose/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
---
# Source: firehose/charts/vault/templates/injector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: firehose/charts/vault/templates/server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: firehose/charts/kafka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kafka-user-passwords
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
type: Opaque
data:
  inter-broker-password: "S0RNeE12UmJENw=="
  controller-password: "Y2Q3a0MzS1dPWA=="
---
# Source: firehose/charts/kafka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kafka-kraft-cluster-id
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
type: Opaque
data:
  kraft-cluster-id: "ZkN4YlJIWHR0TkM4Y2tkeWhTalR4cw=="
---
# Source: firehose/charts/keycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "YWRtaW4="
---
# Source: firehose/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "ZmlyZWhvc2U="
---
# Source: firehose/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
type: Opaque
data:
  redis-password: "ZmlyZWhvc2U="
---
# Source: firehose/templates/kafka/kafka-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-firehose-kafka-secret
type: Opaque
data:
  ADDRESS: bXktcmVsZWFzZS1maXJlaG9zZS1rYWZrYS5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsLjo5MDky
  USERNAME: dXNlcjE=
  
  # Kafka is currently using PLAINTEXT, this password is not used
  # TODO: Create the secret on the sasl.existingSecret kafka's configuration and use it here
  
  PASSWORD: R3hheW1hakVVaGlHTmVIZEZYaWNJT0JYWFJvVHdjWlhFR0t6dFlGaQ==
---
# Source: firehose/templates/keycloak/keycloak-postgresql-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  # Fixed name for the secret, making impossible to have multiple firehose helm installations in the same namespace
  # This is used to be able to reference the secret in the deckard deployment
  name: firehose-keycloak-postgresql
type: Opaque
data:
  
  username: a2V5Y2xvYWs=
  password: elNXbXdLUnBEeFNsWnBqU2FYTWo=
  admin-password: Y1lVRGxXZ05nVWpHTTNoanpzR2M=
---
# Source: firehose/templates/keycloak/keycloak-realm-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: firehose-keycloak-realm
type: Opaque
data:
  
  
  sindicator-manager.secret: SHJOSU55UlZZSHNQcmN5bFJHVkxqUHB5c1dYTGtHWU91V1hjSHNacQ==
  grafana.secret: cWxDR0tKd21OZmdNWFVKeXFxcWtsTnR3bXF3WkhNbnFJZ1lsU0FIVg==
  
  
  
  keycloak-realm.json: 
---
# Source: firehose/templates/mongodb/mongodb-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  # Fixed name for the secret. This is used to be able to reference the secret in the deckard deployment
  # This makes impossible to have multiple firehose helm installations in the same namespace, review this in the future
  name: firehose-storage-secret
type: Opaque
data:
  uri: "bW9uZ29kYjovL2ZpcmVob3NlOmZpcmVob3NlQG15LXJlbGVhc2UtZmlyZWhvc2UtbW9uZ29kYi5kZWZhdWx0LnN2YzoyNzAxNy9hZG1pbj9zc2w9ZmFsc2U="
---
# Source: firehose/templates/redis/redis-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  # Fixed name for the secret. This is used to be able to reference the secret in the deckard deployment
  # This makes impossible to have multiple firehose helm installations in the same namespace, review this in the future
  name: firehose-cache-secret
type: Opaque
data:
  uri: "cmVkaXM6Ly86ZmlyZWhvc2VAbXktcmVsZWFzZS1maXJlaG9zZS1yZWRpcy1tYXN0ZXIuZGVmYXVsdC5zdmM6NjM3OS8w"
---
# Source: firehose/templates/sindicator/firehose-aes-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-firehose-aes
type: Opaque
data:
  KEY: "MzQ1ZGMxNDFiYTVlOWFjOGJkZmQ5MzY0MDlkOWUwOTc="
  VECTOR: "MGI3MDM0YzlmOWRkNThlOWIwZWU3OTk3MTJhYmExNzY="
---
# Source: firehose/charts/kafka/templates/controller-eligible/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kafka-controller-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
data:
  server.properties: |-
    # Listeners configuration
    listeners=CLIENT://:9092,INTERNAL://:9094,CONTROLLER://:9093
    advertised.listeners=CLIENT://advertised-address-placeholder:9092,INTERNAL://advertised-address-placeholder:9094
    listener.security.protocol.map=CLIENT:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,CONTROLLER:SASL_PLAINTEXT
    # KRaft process roles
    process.roles=controller,broker
    #node.id=
    controller.listener.names=CONTROLLER
    controller.quorum.voters=0@my-release-kafka-controller-0.my-release-kafka-controller-headless.default.svc.cluster.local:9093,1@my-release-kafka-controller-1.my-release-kafka-controller-headless.default.svc.cluster.local:9093,2@my-release-kafka-controller-2.my-release-kafka-controller-headless.default.svc.cluster.local:9093,3@my-release-kafka-controller-3.my-release-kafka-controller-headless.default.svc.cluster.local:9093
    # Kraft Controller listener SASL settings
    sasl.mechanism.controller.protocol=PLAIN
    listener.name.controller.sasl.enabled.mechanisms=PLAIN
    listener.name.controller.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="controller_user" password="controller-password-placeholder" user_controller_user="controller-password-placeholder";
    # Kafka data logs directory
    log.dir=/bitnami/kafka/data
    # Kafka application logs directory
    logs.dir=/opt/bitnami/kafka/logs
    
    sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
    # Interbroker configuration
    inter.broker.listener.name=INTERNAL
    sasl.mechanism.inter.broker.protocol=PLAIN
    # Listeners SASL JAAS configuration
    listener.name.internal.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="inter_broker_user" password="interbroker-password-placeholder" user_inter_broker_user="interbroker-password-placeholder" user_user1="password-placeholder-0";
    listener.name.internal.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.name.internal.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    # End of SASL JAAS configuration
---
# Source: firehose/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kafka-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
data:
  kafka-init.sh: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    error(){
      local message="${1:?missing message}"
      echo "ERROR: ${message}"
      exit 1
    }

    retry_while() {
        local -r cmd="${1:?cmd is missing}"
        local -r retries="${2:-12}"
        local -r sleep_time="${3:-5}"
        local return_value=1

        read -r -a command <<< "$cmd"
        for ((i = 1 ; i <= retries ; i+=1 )); do
            "${command[@]}" && return_value=0 && break
            sleep "$sleep_time"
        done
        return $return_value
    }

    replace_in_file() {
        local filename="${1:?filename is required}"
        local match_regex="${2:?match regex is required}"
        local substitute_regex="${3:?substitute regex is required}"
        local posix_regex=${4:-true}

        local result

        # We should avoid using 'sed in-place' substitutions
        # 1) They are not compatible with files mounted from ConfigMap(s)
        # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
        local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
        if [[ $posix_regex = true ]]; then
            result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        else
            result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
        fi
        echo "$result" > "$filename"
    }

    kafka_conf_set() {
        local file="${1:?missing file}"
        local key="${2:?missing key}"
        local value="${3:?missing value}"

        # Check if the value was set before
        if grep -q "^[#\\s]*$key\s*=.*" "$file"; then
            # Update the existing key
            replace_in_file "$file" "^[#\\s]*${key}\s*=.*" "${key}=${value}" false
        else
            # Add a new key
            printf '\n%s=%s' "$key" "$value" >>"$file"
        fi
    }

    replace_placeholder() {
      local placeholder="${1:?missing placeholder value}"
      local password="${2:?missing password value}"
      sed -i "s/$placeholder/$password/g" "$KAFKA_CONFIG_FILE"
    }

    append_file_to_kafka_conf() {
        local file="${1:?missing source file}"
        local conf="${2:?missing kafka conf file}"

        cat "$1" >> "$2"
    }

    configure_external_access() {
      # Configure external hostname
      if [[ -f "/shared/external-host.txt" ]]; then
        host=$(cat "/shared/external-host.txt")
      elif [[ -n "${EXTERNAL_ACCESS_HOST:-}" ]]; then
        host="$EXTERNAL_ACCESS_HOST"
      elif [[ -n "${EXTERNAL_ACCESS_HOSTS_LIST:-}" ]]; then
        read -r -a hosts <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_HOSTS_LIST}")"
        host="${hosts[$POD_ID]}"
      elif [[ "$EXTERNAL_ACCESS_HOST_USE_PUBLIC_IP" =~ ^(yes|true)$ ]]; then
        host=$(curl -s https://ipinfo.io/ip)
      else
        error "External access hostname not provided"
      fi

      # Configure external port
      if [[ -f "/shared/external-port.txt" ]]; then
        port=$(cat "/shared/external-port.txt")
      elif [[ -n "${EXTERNAL_ACCESS_PORT:-}" ]]; then
        if [[ "${EXTERNAL_ACCESS_PORT_AUTOINCREMENT:-}" =~ ^(yes|true)$ ]]; then
          port="$((EXTERNAL_ACCESS_PORT + POD_ID))"
        else
          port="$EXTERNAL_ACCESS_PORT"
        fi
      elif [[ -n "${EXTERNAL_ACCESS_PORTS_LIST:-}" ]]; then
        read -r -a ports <<<"$(tr ',' ' ' <<<"${EXTERNAL_ACCESS_PORTS_LIST}")"
        port="${ports[$POD_ID]}"
      else
        error "External access port not provided"
      fi
      # Configure Kafka advertised listeners
      sed -i -E "s|^(advertised\.listeners=\S+)$|\1,EXTERNAL://${host}:${port}|" "$KAFKA_CONFIG_FILE"
    }
    configure_kafka_sasl() {

      # Replace placeholders with passwords
      replace_placeholder "interbroker-password-placeholder" "$KAFKA_INTER_BROKER_PASSWORD"
      replace_placeholder "controller-password-placeholder" "$KAFKA_CONTROLLER_PASSWORD"
    }

    export KAFKA_CONFIG_FILE=/config/server.properties
    cp /configmaps/server.properties $KAFKA_CONFIG_FILE

    # Get pod ID and role, last and second last fields in the pod name respectively
    POD_ID=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 1 | rev)
    POD_ROLE=$(echo "$MY_POD_NAME" | rev | cut -d'-' -f 2 | rev)

    # Configure node.id and/or broker.id
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        if grep -q "broker.id" /bitnami/kafka/data/meta.properties; then
          ID="$(grep "broker.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        else
          ID="$(grep "node.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
          kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
        fi
    else
        ID=$((POD_ID + KAFKA_MIN_ID))
        kafka_conf_set "$KAFKA_CONFIG_FILE" "node.id" "$ID"
    fi
    replace_placeholder "advertised-address-placeholder" "${MY_POD_NAME}.my-release-kafka-${POD_ROLE}-headless.default.svc.cluster.local"
    if [[ "${EXTERNAL_ACCESS_ENABLED:-false}" =~ ^(yes|true)$ ]]; then
      configure_external_access
    fi
    configure_kafka_sasl
    if [ -f /secret-config/server-secret.properties ]; then
      append_file_to_kafka_conf /secret-config/server-secret.properties $KAFKA_CONFIG_FILE
    fi
---
# Source: firehose/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-keycloak-env-vars
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "edge"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "my-release-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "keycloak"
  KEYCLOAK_DATABASE_USER: "keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KEYCLOAK_LOG_LEVEL: "INFO"
---
# Source: firehose/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    readiness_test='db.isMaster().ismaster || db.isMaster().secondary'
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        readiness_test='db.hello().isWritablePrimary || db.hello().secondary'
    fi
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "${readiness_test}" | grep 'true'
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: firehose/charts/mongodb/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
data:
  init_database.js: |
    db = db.getSiblingDB("deckard");
  
    db.queue.createIndex({ "expiry_date": 1 });
    db.queue.createIndex({ "queue": 1, "expiry_date": 1 });
    db.queue.createIndex({ "id": 1, "queue": 1, "score": 1 });
    db.queue.createIndex({ "queue_prefix": 1, "last_usage": 1 });
    db.queue.createIndex({ "id": 1, "queue": 1 }, { unique: true });
---
# Source: firehose/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: firehose/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: firehose/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-billing-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-batching-input-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-http-input-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-streaming-input-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-exporter-output-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-adapting-pipeline-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-filtering-pipeline-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-syndicating-pipeline-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/firehose-modules-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-syndicating-pipeline-dead-letter-config
data:
  benthos.yaml: |
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: false
    input:
      label: "no_config_in"
      generate:
        mapping: root = "This Benthos instance is unconfigured!"
        interval: 1m
    output:
      label: "no_config_out"
      stdout:
        codec: lines
---
# Source: firehose/templates/benthos_modules/message-proto-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-message-proto
data:
  message.proto: |-
    syntax = "proto3";
    
    package takenet;
    
    message Message {
      bytes raw_data = 1;
      string content_type = 2;
    }
---
# Source: firehose/templates/kafka/kafka-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-firehose-kafka-config
data:
  TLS_ENABLED: "false"
  SASL_MECHANISM: none
---
# Source: firehose/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: firehose/templates/benthos_modules/firehose-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: firehose-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
# Source: firehose/charts/vault/templates/injector-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-vault-agent-injector-clusterrole
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs:
    - "get"
    - "list"
    - "watch"
    - "patch"
---
# Source: firehose/charts/vault/templates/injector-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-vault-agent-injector-binding
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-vault-agent-injector-clusterrole
subjects:
- kind: ServiceAccount
  name: my-release-vault-agent-injector
  namespace: default
---
# Source: firehose/charts/vault/templates/server-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-vault-server-binding
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: my-release-vault
  namespace: default
---
# Source: firehose/charts/deckard/templates/housekeeper-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-deckard-housekeeper
  labels:
    helm.sh/chart: deckard-0.0.28
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release-housekeeper
    app.kubernetes.io/version: "0.0.28"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release-housekeeper
---
# Source: firehose/charts/deckard/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-deckard
  labels:
    helm.sh/chart: deckard-0.0.28
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.28"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release
---
# Source: firehose/charts/kafdrop/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kafdrop
  labels:
    app.kubernetes.io/name: kafdrop
    helm.sh/chart: kafdrop-0.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http

      nodePort: 30900

  selector:
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: my-release
---
# Source: firehose/charts/kafka/templates/controller-eligible/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kafka-controller-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-interbroker
      port: 9094
      protocol: TCP
      targetPort: interbroker
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
    - name: tcp-controller
      protocol: TCP
      port: 9093
      targetPort: controller
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
---
# Source: firehose/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kafka
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka
---
# Source: firehose/charts/keycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: firehose/charts/keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: firehose/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-keycloak-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: firehose/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: keycloak
---
# Source: firehose/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: firehose/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: firehose/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: firehose/charts/vault/templates/injector-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-vault-agent-injector-svc
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  
spec:
  ports:
  - name: https
    port: 443
    targetPort: 8080
  selector:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    component: webhook
---
# Source: firehose/charts/vault/templates/server-headless-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: my-release-vault-internal
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    vault-internal: "true"
  annotations:

spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "http"
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    component: server
---
# Source: firehose/charts/vault/templates/server-service.yaml
# Service for Vault cluster
apiVersion: v1
kind: Service
metadata:
  name: my-release-vault
  namespace: default
  labels:
    helm.sh/chart: vault-0.27.0
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:

spec:
  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8200
      targetPort: 8200
    - name: https-internal
      port: 8201
      targetPort: 8201
  selector:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    component: server
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-billing
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-billing
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-batching-input
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-batching-input
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-http-input
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-http-input
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-streaming-input
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-streaming-input
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-exporter-output
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-exporter-output
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-adapting-pipeline
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-adapting-pipeline
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-filtering-pipeline
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-filtering-pipeline
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-syndicating-pipeline
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/benthos_modules/firehose-modules-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-syndicating-pipeline-dead-letter
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline-dead-letter
  ports:
    -
      name: http
      port: 80
      protocol: TCP
      targetPort: http
---
# Source: firehose/templates/sindicator/sindicator-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-firehose-sindicator-manager
  labels:
    helm.sh/chart: firehose-0.0.18
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-sindicator-manager
    app.kubernetes.io/version: "0.0.26"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 50051
      targetPort: 50051
      protocol: TCP
      name: grpc
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-sindicator-manager
---
# Source: firehose/charts/deckard/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-deckard
  labels:
    helm.sh/chart: deckard-0.0.28
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.28"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: deckard
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deckard
        app.kubernetes.io/instance: my-release
    spec:
      securityContext:
        {}
      containers:
        - name: deckard
          securityContext:
            {}
          image: "blipai/deckard:0.0.28"
          imagePullPolicy: IfNotPresent
          env:
            - name: DECKARD_CACHE_URI
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: firehose-cache-secret
            - name: DECKARD_STORAGE_URI
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: firehose-storage-secret
            - name: DECKARD_METRICS_ENABLED
              value: "true"
            - name: DECKARD_METRICS_PORT
              value: "9090"
            - name: DECKARD_METRICS_PATH
              value: "/metrics"
            - name: DECKARD_GRPC_PORT
              value: "8081"
            - name: DECKARD_CACHE_TYPE
              value: REDIS
            - name: DECKARD_STORAGE_TYPE
              value: MONGODB
            - name: DECKARD_AUDIT_ENABLED
              value: "false"
            - name: DECKARD_HOUSEKEEPER_ENABLED
              value: "false"
            - name: DECKARD_REDIS_DB
              value: "0"
          ports:
            - name: grpc
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            grpc:
              port: 8081
          readinessProbe:
            grpc:
              port: 8081
          startupProbe:
            grpc:
              port: 8081
            failureThreshold: 30
            periodSeconds: 2
            initialDelaySeconds: 1
            timeoutSeconds: 1
          resources:
            {}
---
# Source: firehose/charts/deckard/templates/housekeeper-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-deckard-housekeeper
  labels:
    helm.sh/chart: deckard-0.0.28
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release-housekeeper
    app.kubernetes.io/version: "0.0.28"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: deckard
      app.kubernetes.io/instance: my-release-housekeeper
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deckard
        app.kubernetes.io/instance: my-release-housekeeper
    spec:
      securityContext:
        {}
      containers:
        - name: deckard-housekeeper
          securityContext:
            {}
          image: "blipai/deckard:0.0.28"
          imagePullPolicy: IfNotPresent
          env:
            - name: DECKARD_CACHE_URI
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: firehose-cache-secret
            - name: DECKARD_STORAGE_URI
              valueFrom:
                secretKeyRef:
                  key: uri
                  name: firehose-storage-secret
            - name: DECKARD_METRICS_ENABLED
              value: "true"
            - name: DECKARD_METRICS_PORT
              value: "9090"
            - name: DECKARD_METRICS_PATH
              value: "/metrics"
            - name: DECKARD_GRPC_PORT
              value: "8081"
            - name: DECKARD_CACHE_TYPE
              value: REDIS
            - name: DECKARD_STORAGE_TYPE
              value: MONGODB
            - name: DECKARD_AUDIT_ENABLED
              value: "false"
            - name: DECKARD_HOUSEKEEPER_ENABLED
              value: "true"
            - name: DECKARD_REDIS_DB
              value: "0"
          ports:
            - name: grpc
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          # TODO: Improve housekeeper liveness/readiness/startup probes
          # Currently it is using the same as the Deckard gRPC service but we could disable gRPC service for the housekeeper deployment
          livenessProbe:
            grpc:
              port: 8081
          readinessProbe:
            grpc:
              port: 8081
          startupProbe:
            grpc:
              port: 8081
            failureThreshold: 30
            periodSeconds: 2
            initialDelaySeconds: 1
            timeoutSeconds: 1
          resources:
            {}
---
# Source: firehose/charts/kafdrop/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kafdrop
  labels:
    app.kubernetes.io/name: kafdrop
    helm.sh/chart: kafdrop-0.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafdrop
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafdrop
        app.kubernetes.io/instance: my-release
      annotations:        
    spec:
      containers:
        - name: kafdrop
          image: "obsidiandynamics/kafdrop:3.30.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: KAFKA_BROKERCONNECT
            value: "firehose-kafka.firehose.svc.cluster.local.:9092"
          - name: KAFKA_PROPERTIES
            value: ""
          - name: KAFKA_TRUSTSTORE
            value: ""
          - name: KAFKA_KEYSTORE
            value: ""
          - name: JVM_OPTS
            value: ""
          - name: JMX_PORT
            value: "8686"
          - name: HOST
            value: ""
          - name: SERVER_SERVLET_CONTEXTPATH
            value: ""
          - name: KAFKA_PROPERTIES_FILE
            value: "kafka.properties"
          - name: KAFKA_TRUSTSTORE_FILE
            value: "kafka.truststore.jks"
          - name: KAFKA_KEYSTORE_FILE
            value: "kafka.keystore.jks"
          - name: SERVER_PORT
            value: "9000"
          - name: CMD_ARGS
            value: ""

          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "/actuator/health"
              port: http
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: "/actuator/health"
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 1m
              memory: 128Mi
---
# Source: firehose/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.15.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "6.0.6"
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.15.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "6.0.6"
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.6-debian-11-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_USER
              value: "firehose"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: custom-init-scripts
          configMap:
            name: my-release-mongodb-init-scripts
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: firehose/charts/vault/templates/injector-deployment.yaml
# Deployment for the injector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-vault-agent-injector
  namespace: default
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    component: webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-agent-injector
      app.kubernetes.io/instance: my-release
      component: webhook
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-agent-injector
        app.kubernetes.io/instance: my-release
        component: webhook
    spec:
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: vault-agent-injector
                  app.kubernetes.io/instance: "my-release"
                  component: webhook
              topologyKey: kubernetes.io/hostname
  
      
      
      
      serviceAccountName: "my-release-vault-agent-injector"
      
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      hostNetwork: false
      containers:
        - name: sidecar-injector
          
          image: "hashicorp/vault-k8s:1.3.1"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          env:
            - name: AGENT_INJECT_LISTEN
              value: :8080
            - name: AGENT_INJECT_LOG_LEVEL
              value: info
            - name: AGENT_INJECT_VAULT_ADDR
              value: http://my-release-vault.default.svc:8200
            - name: AGENT_INJECT_VAULT_AUTH_PATH
              value: auth/kubernetes
            - name: AGENT_INJECT_VAULT_IMAGE
              value: "hashicorp/vault:1.15.2"
            - name: AGENT_INJECT_TLS_AUTO
              value: my-release-vault-agent-injector-cfg
            - name: AGENT_INJECT_TLS_AUTO_HOSTS
              value: my-release-vault-agent-injector-svc,my-release-vault-agent-injector-svc.default,my-release-vault-agent-injector-svc.default.svc
            - name: AGENT_INJECT_LOG_FORMAT
              value: standard
            - name: AGENT_INJECT_REVOKE_ON_SHUTDOWN
              value: "false"
            - name: AGENT_INJECT_CPU_REQUEST
              value: "250m"
            - name: AGENT_INJECT_CPU_LIMIT
              value: "500m"
            - name: AGENT_INJECT_MEM_REQUEST
              value: "64Mi"
            - name: AGENT_INJECT_MEM_LIMIT
              value: "128Mi"
            - name: AGENT_INJECT_DEFAULT_TEMPLATE
              value: "map"
            - name: AGENT_INJECT_TEMPLATE_CONFIG_EXIT_ON_RETRY_FAILURE
              value: "true"
            
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          args:
            - agent-inject
            - 2>&1
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTPS
            failureThreshold: 12
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-billing
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-billing
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-billing
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-billing-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-billing
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-billing
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_BILLING_SUCCESS
              value: firehose_billing_success
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "billing"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-batching-input
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-batching-input
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-batching-input
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-batching-input-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-batching-input
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-batching-input
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: BATCH_PROCESS_TIMEOUT_SECONDS
              value: "290"
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_input
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "batching-input"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-http-input
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-http-input
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-http-input
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-http-input-config
        - name: iris-sanitization-files
          projected:
            sources:
            - configMap:
                name: iris-default-allowed-exception-fields
                optional: true
            - configMap:
                name: iris-default-allowed-fields
                optional: true
            - configMap:
                name: iris-allowed-exceptions
                optional: true
            - configMap:
                name: iris-allowed-logs
                optional: true
            - configMap:
                name: iris-not-allowed-log-fields
                optional: true
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-http-input
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-http-input
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_input
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "http-input"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: iris-sanitization-files
              mountPath: /tmp/iris-sanitization-files
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-streaming-input
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-streaming-input
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-streaming-input
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-streaming-input-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-streaming-input
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-streaming-input
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_input
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "streaming-input"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-exporter-output
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-exporter-output
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-exporter-output
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-exporter-output-config
        - name: volume
          persistentVolumeClaim:
            claimName: firehose-pvc
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-exporter-output
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-exporter-output
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OUTPUT_RETRY_INITIAL_INTERVAL
              value: 500ms
            - name: OUTPUT_RETRY_MAX_ELAPSED_TIME
              value: 5s
            - name: OUTPUT_RETRY_MAX_INTERVAL
              value: 2s
            - name: OUTPUT_RETRY_MAX_RETRIES
              value: "3"
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "exporter-output"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: volume
              mountPath: /mnt/firehose
              readOnly: false
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-adapting-pipeline
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-adapting-pipeline
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-adapting-pipeline
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-adapting-pipeline-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-adapting-pipeline
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-adapting-pipeline
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_DEAD_LETTER_TOPIC
              value: firehose_adapted_dead_letter
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_input
            - name: FIREHOSE_KAFKA_OUTPUT_TOPIC
              value: firehose_adapted
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "adapting-pipeline"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-filtering-pipeline
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-filtering-pipeline
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-filtering-pipeline
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-filtering-pipeline-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-filtering-pipeline
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-filtering-pipeline
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_DEAD_LETTER_TOPIC
              value: firehose_filter_dead_letter
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_filter
            - name: FIREHOSE_KAFKA_OUTPUT_TOPIC
              value: firehose_input
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "filtering-pipeline"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-syndicating-pipeline
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-syndicating-pipeline-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-syndicating-pipeline
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-syndicating-pipeline
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_KAFKA_BILLING_SUCCESS
              value: firehose_billing_success
            - name: FIREHOSE_KAFKA_DEAD_LETTER_TOPIC
              value: firehose_dead_letter
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_adapted
            - name: OUTPUT_RETRY_INITIAL_INTERVAL
              value: 1s
            - name: OUTPUT_RETRY_MAX_ELAPSED_TIME
              value: 168h
            - name: OUTPUT_RETRY_MAX_INTERVAL
              value: 15m
            - name: OUTPUT_RETRY_MAX_RETRIES
              value: "0"
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "syndicating-pipeline"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/benthos_modules/firehose-modules-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-syndicating-pipeline-dead-letter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline-dead-letter
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4195"
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-firehose-syndicating-pipeline-dead-letter
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: my-release-firehose-syndicating-pipeline-dead-letter-config
        - name: message-proto
          configMap:
            name: my-release-firehose-message-proto
      containers:
        - name: firehose-syndicating-pipeline-dead-letter
          securityContext:
            {}
          image: "ko.local/sbenthos:latest"
          imagePullPolicy: IfNotPresent
          # command: ["/bin/sh","-c","sleep 300"]
          args:
            - "-c"
            - "/benthos.yaml"
#            - "--chilled"
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-syndicating-pipeline-dead-letter
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: DEAD_LETTER
              value: "true"
            - name: FIREHOSE_KAFKA_BILLING_SUCCESS
              value: firehose_billing_success
            - name: FIREHOSE_KAFKA_DEAD_LETTER_TOPIC
              value: firehose_dead_letter
            - name: FIREHOSE_KAFKA_INPUT_TOPIC
              value: firehose_dead_letter
            - name: OUTPUT_RETRY_INITIAL_INTERVAL
              value: 1s
            - name: OUTPUT_RETRY_MAX_ELAPSED_TIME
              value: 168h
            - name: OUTPUT_RETRY_MAX_INTERVAL
              value: 15m
            - name: OUTPUT_RETRY_MAX_RETRIES
              value: "0"
            - name: BENTHOS_PUSH_JOB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SELF_ID
              value: "syndicating-pipeline-dead-letter"
            
              
            - name: FIREHOSE_KAFKA_ADDRESS
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: ADDRESS
            - name: FIREHOSE_KAFKA_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: USERNAME
            - name: FIREHOSE_KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-kafka-secret
                  key: PASSWORD
            
              
            - name: FIREHOSE_KAFKA_TLS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: TLS_ENABLED
            - name: FIREHOSE_KAFKA_SASL_MECHANISM
              valueFrom:
                configMapKeyRef:
                  name: my-release-firehose-kafka-config
                  key: SASL_MECHANISM
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: FIREHOSE_SINDICATOR_GRPC_HOST
              value: my-release-firehose-sindicator-manager.default.svc.cluster.local.:50051
            - name: FIREHOSE_SINDICATOR_HTTP_HOST
              value: http://my-release-firehose-sindicator-manager.default.svc.cluster.local.:8080
            - name: EXPORT_TYPES
              value: sftp|email|aws_s3|azure_blob|google_cloud_storage
            
            - name: FIREHOSE_CONFIG_REDIS_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: FIREHOSE_REDIS_TLS_ENABLED
              value: "false"
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: FIREHOSE_MONGO_DATA_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
          ports:
            - name: http
              containerPort: 4195
              protocol: TCP
          startupProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
            - name: config
              mountPath: "/benthos.yaml"
              subPath: "benthos.yaml"
              readOnly: true
            - name: message-proto
              mountPath: /mnt/files
              readOnly: true
---
# Source: firehose/templates/sindicator/sindicator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-firehose-sindicator-manager
  labels:
    helm.sh/chart: firehose-0.0.18
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-sindicator-manager
    app.kubernetes.io/version: "0.0.26"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: firehose
      app.kubernetes.io/instance: my-release-sindicator-manager
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: firehose
        app.kubernetes.io/instance: my-release-sindicator-manager
        grafana.com/loki: "true"
    spec:
      securityContext:
        {}
      containers:
        - name: firehose-sindicator-manager
          securityContext:
            {}
          image: "ko.local/firehose_sindicator_manager:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_EXPERIMENTAL_EXPORTER_OTLP_RETRY_ENABLED
              value: "true"
            - name: OTEL_EXPORTER_OTLP_COMPRESSION
              value: gzip
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: OTEL_EXPORTER_OTLP_HEADERS
              value: x-scope-orgid=firehose
            - name: OTEL_EXPORTER_OTLP_INSECURE
              value: "true"
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.version=latest,service.namespace=default,k8s.cluster.name=firehose,pod=$(POD_NAME)
            - name: OTEL_SERVICE_NAME
              value: my-release-firehose-sindicator-manager
            - name: OTEL_TRACES_SAMPLER
              value: always_on
            - name: OTEL_TRACES_SAMPLER_ARG
              value: "1.0"
            - name: OTEL_URL
              value: lgtm-tempo-distributor.lgtm-system.svc.cluster.local.:4317
            - name: FIREHOSE_MONGO_CONFIG_URI
              valueFrom:
                secretKeyRef:
                  name: firehose-storage-secret
                  key: uri
            - name: FIREHOSE_REDIS_CONFIG_URI
              
              valueFrom:
                secretKeyRef:
                  name: firehose-cache-secret
                  key: uri
            - name: DECKARD_HOST
              value: my-release-firehose-deckard.default.svc.cluster.local.:8081
            - name: TLS_ENABLED
              value: "false"
            - name: KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: firehose-keycloak-realm
                  key: sindicator-manager.secret
            - name: KEYCLOAK_CLIENT_ID
              value: firehose-sindicator-manager
            - name: KEYCLOAK_REALM
              value: firehose
            - name: KEYCLOAK_HOST
              value: http://my-release-firehose-keycloak-headless.default.svc.cluster.local.:8080
            - name: IDENTITY_SERVER
              value: "keycloak"
            - name: VAULT_TOKEN
              value: root
            - name: VAULT_MOUNT_PATH
              value: secret
            - name: FIREHOSE_AES_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: KEY
            - name: FIREHOSE_AES_VECTOR
              valueFrom:
                secretKeyRef:
                  name: my-release-firehose-aes
                  key: VECTOR
            - name: S_VAULT_URL
              value: "http://my-release-firehose-vault.default.svc.cluster.local.:8200"
          ports:
            - name: metrics
              containerPort: 9090
              protocol: TCP
            - name: grpc
              containerPort: 50051
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            failureThreshold: 10
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 2
            timeoutSeconds: 1
          resources:
            null
          volumeMounts:
      volumes:
---
# Source: firehose/charts/deckard/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-deckard
  labels:
    helm.sh/chart: deckard-0.0.28
    app.kubernetes.io/name: deckard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.28"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-deckard
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: firehose/templates/sindicator/sindicator-hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-firehose-sindicator-manager
  labels:
    helm.sh/chart: firehose-0.0.18
    app.kubernetes.io/name: firehose
    app.kubernetes.io/instance: my-release-sindicator-manager
    app.kubernetes.io/version: "0.0.26"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-firehose-sindicator-manager
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
---
# Source: firehose/charts/kafka/templates/controller-eligible/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-kafka-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 3.6.1
    helm.sh/chart: kafka-26.8.5
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 4
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: my-release-kafka-controller-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 3.6.1
        helm.sh/chart: kafka-26.8.5
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: 2b716bae940ba1cd7a03566242de0f605f6cef232461f01fc307647f7909e156
        checksum/passwords-secret: 799bef3bce32a1928617a6ab744c177556a6fca45de28e68c301c0b4cc37fac8
    spec:
      
      automountServiceAccountToken: false
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: controller-eligible
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-kafka
      enableServiceLinks: true
      initContainers:
        - name: kafka-init
          image: docker.io/bitnami/kafka:3.6.1-debian-11-r6
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          resources:
            limits: {}
            requests: {} 
          command:
            - /bin/bash
          args:
            - -ec
            - |
              /scripts/kafka-init.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                    fieldPath: metadata.name
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_MIN_ID
              value: "0"
            - name: KAFKA_INTER_BROKER_USER
              value: "inter_broker_user"
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-kafka-user-passwords
                  key: inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: "controller_user"
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-kafka-user-passwords
                  key: controller-password
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /config
            - name: kafka-configmaps
              mountPath: /configmaps
            - name: kafka-secret-config
              mountPath: /secret-config
            - name: scripts
              mountPath: /scripts
            - name: tmp
              mountPath: /tmp
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.6.1-debian-11-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-kafka-kraft-cluster-id
                  key: kraft-cluster-id
            - name: KAFKA_KRAFT_BOOTSTRAP_SCRAM_USERS
              value: "true"
            - name: KAFKA_INTER_BROKER_USER
              value: "inter_broker_user"
            - name: KAFKA_INTER_BROKER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-kafka-user-passwords
                  key: inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: "controller_user"
            - name: KAFKA_CONTROLLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-kafka-user-passwords
                  key: controller-password
          ports:
            - name: controller
              containerPort: 9093
            - name: client
              containerPort: 9092
            - name: interbroker
              containerPort: 9094
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "controller"
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: "controller"
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: kafka-configmaps
          configMap:
            name: my-release-kafka-controller-configuration
        - name: kafka-secret-config
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: scripts
          configMap:
            name: my-release-kafka-scripts
            defaultMode: 493
        - name: data
          emptyDir: {}
        - name: logs
          emptyDir: {}
---
# Source: firehose/charts/keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.4.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: firehose-keycloak-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: firehose-keycloak-postgresql
                  key: admin-password
            - name: POSTGRES_DATABASE
              value: "keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: firehose/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: my-release-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 28e8e9c8baa9afea15524d31acbf4ce0f5d591087792eb1c8936a37334215762
        checksum/secrets: 43059fbeff47c45f4024ed724d8ccf80cdbb946389c1d7d086b3b81f6911a94e
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/version: 23.0.5
        helm.sh/chart: keycloak-18.3.3
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: my-release-keycloak
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      enableServiceLinks: true
      initContainers:
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:23.0.5-debian-11-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: firehose-keycloak-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            - name: KEYCLOAK_EXTRA_ARGS
              value: --import-realm
          envFrom:
            - configMapRef:
                name: my-release-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - mountPath: /opt/bitnami/keycloak/data/import
              name: keycloak-realm
      volumes:
        - name: keycloak-realm
          secret:
            secretName: firehose-keycloak-realm
---
# Source: firehose/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.0.11"
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.11.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "7.0.11"
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 3ffeb196167ac957ee4b56f5c5a3fed7a9a692ca91d094e4577be3aed893482d
        checksum/health: 4386584de1c57ebe1f3912773ff5c0a8bbfccf6121b9e356c20963cc604374b3
        checksum/scripts: f6801f5ea9bea577be92b51f3d153d1bd9ab7459526e055413ec6b1980829062
        checksum/secret: b5fc208f4114c5923c229a6ca9ddc680c70cf70927bd31724e6744807234aad5
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r20
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: firehose/charts/vault/templates/server-statefulset.yaml
# StatefulSet to run the actual vault server cluster.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-vault
  namespace: default
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-release-vault-internal
  podManagementPolicy: Parallel
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app.kubernetes.io/name: vault
      app.kubernetes.io/instance: my-release
      component: server
  template:
    metadata:
      labels:
        helm.sh/chart: vault-0.27.0
        app.kubernetes.io/name: vault
        app.kubernetes.io/instance: my-release
        component: server
    spec:
      
      
      
      
      terminationGracePeriodSeconds: 10
      serviceAccountName: my-release-vault
      
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      hostNetwork: false
      volumes:
        
        - name: home
          emptyDir: {}
      containers:
        - name: vault
          
          image: hashicorp/vault:1.15.2
          imagePullPolicy: IfNotPresent
          command:
          - "/bin/sh"
          - "-ec"
          args: 
          - |
            /usr/local/bin/docker-entrypoint.sh vault server -dev 
  
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VAULT_K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: VAULT_ADDR
              value: "http://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VAULT_CLUSTER_ADDR
              value: "https://$(HOSTNAME).my-release-vault-internal:8201"
            - name: HOME
              value: "/home/vault"
            
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: root
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "[::]:8200"
  
            
            
          volumeMounts:
          
  
  
            - name: home
              mountPath: /home/vault
          ports:
            - containerPort: 8200
              name: http
            - containerPort: 8201
              name: https-internal
            - containerPort: 8202
              name: http-rep
          readinessProbe:
            # Check status; unsealed vault servers return 0
            # The exit code reflects the seal status:
            #   0 - unsealed
            #   1 - error
            #   2 - sealed
            exec:
              command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
          lifecycle:
            # Vault container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.  This
            # causes issues with graceful shutdowns such as deregistering itself
            # from Consul (zombie services).
            preStop:
              exec:
                command: [
                  "/bin/sh", "-c",
                  # Adding a sleep here to give the pod eviction a
                  # chance to propagate, so requests will not be made
                  # to this pod while it's terminating
                  "sleep 5 && kill -SIGTERM $(pidof vault)",
                ]
---
# Source: firehose/charts/keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/version: 23.0.5
    helm.sh/chart: keycloak-18.3.3
    app.kubernetes.io/component: keycloak
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: "nginx"
  rules:
    - host: "keycloak.firehose.test"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-keycloak
                port:
                  name: http
---
# Source: firehose/templates/api/api-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  name: my-release-firehose-api
spec:
  ingressClassName: nginx
  rules:       
  - host: api.firehose.test
    http:
      paths:
      - backend:
          service:
            name: my-release-firehose-sindicator-manager
            port:
              name: http
        path: /v1/auth
        pathType: ImplementationSpecific
      - backend:
          service:
            name: my-release-firehose-sindicator-manager
            port:
              name: http
        path: /v1/api
        pathType: ImplementationSpecific
      - backend:
          service:
            name: my-release-firehose-sindicator-manager
            port:
              name: http
        path: /v1/configs
        pathType: ImplementationSpecific
      - backend:
          service:
            name: my-release-firehose-http-input
            port:
              name: http
        path: /v1/webhook
        pathType: ImplementationSpecific
---
# Source: firehose/charts/vault/templates/injector-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-release-vault-agent-injector-cfg
  labels:
    app.kubernetes.io/name: vault-agent-injector
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: vault.hashicorp.com
    failurePolicy: Ignore
    matchPolicy: Exact
    sideEffects: None
    timeoutSeconds: 30
    admissionReviewVersions: ["v1", "v1beta1"]
    clientConfig:
      service:
        name: my-release-vault-agent-injector-svc
        namespace: default
        path: "/mutate"
      caBundle: ""
    rules:
      - operations: ["CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    objectSelector:
      matchExpressions:
      - key: app.kubernetes.io/name
        operator: NotIn
        values:
        - vault-agent-injector
---
# Source: firehose/charts/vault/templates/tests/server-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-vault-server-test
  namespace: default
  annotations:
    "helm.sh/hook": test
spec:
  
  containers:
    - name: my-release-server-test
      image: hashicorp/vault:1.15.2
      imagePullPolicy: IfNotPresent
      env:
        - name: VAULT_ADDR
          value: http://my-release-vault.default.svc:8200
        
      command:
        - /bin/sh
        - -c
        - |
          echo "Checking for sealed info in 'vault status' output"
          ATTEMPTS=10
          n=0
          until [ "$n" -ge $ATTEMPTS ]
          do
            echo "Attempt" $n...
            vault status -format yaml | grep -E '^sealed: (true|false)' && break
            n=$((n+1))
            sleep 5
          done
          if [ $n -ge $ATTEMPTS ]; then
            echo "timed out looking for sealed info in 'vault status' output"
            exit 1
          fi

          exit 0
      volumeMounts:
  volumes:
  restartPolicy: Never
