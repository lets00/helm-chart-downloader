---
# Source: node-policy-webhook/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-node-policy-webhook
  labels:
    helm.sh/chart: node-policy-webhook-0.1.10
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: node-policy-webhook/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-node-policy-webhook
  labels:
    helm.sh/chart: node-policy-webhook-0.1.10
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
data:
  cert.pem: 
  key.pem: 
type: Opaque
---
# Source: node-policy-webhook/templates/noodepolicies.softonic.io_nodepolicyprofiles.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: nodepolicyprofiles.noodepolicies.softonic.io
spec:
  group: noodepolicies.softonic.io
  names:
    kind: NodePolicyProfile
    listKind: NodePolicyProfileList
    plural: nodepolicyprofiles
    singular: nodepolicyprofile
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NodePolicyProfile is the Schema for the nodepolicyprofiles API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NodePolicyProfileSpec defines the desired state of NodePolicyProfile
            properties:
              nodeAffinity:
                description: Node affinity is a group of node affinity scheduling
                  rules.
                properties:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    description: The scheduler will prefer to schedule pods to nodes
                      that satisfy the affinity expressions specified by this field,
                      but it may choose a node that violates one or more of the expressions.
                      The node that is most preferred is the one with the greatest
                      sum of weights, i.e. for each node that meets all of the scheduling
                      requirements (resource request, requiredDuringScheduling affinity
                      expressions, etc.), compute a sum by iterating through the elements
                      of this field and adding "weight" to the sum if the node matches
                      the corresponding matchExpressions; the node(s) with the highest
                      sum are the most preferred.
                    items:
                      description: An empty preferred scheduling term matches all
                        objects with implicit weight 0 (i.e. it's a no-op). A null
                        preferred scheduling term matches no objects (i.e. is also
                        a no-op).
                      properties:
                        preference:
                          description: A node selector term, associated with the corresponding
                            weight.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                          type: object
                        weight:
                          description: Weight associated with matching the corresponding
                            nodeSelectorTerm, in the range 1-100.
                          format: int32
                          type: integer
                      required:
                      - preference
                      - weight
                      type: object
                    type: array
                  requiredDuringSchedulingIgnoredDuringExecution:
                    description: If the affinity requirements specified by this field
                      are not met at scheduling time, the pod will not be scheduled
                      onto the node. If the affinity requirements specified by this
                      field cease to be met at some point during pod execution (e.g.
                      due to an update), the system may or may not try to eventually
                      evict the pod from its node.
                    properties:
                      nodeSelectorTerms:
                        description: Required. A list of node selector terms. The
                          terms are ORed.
                        items:
                          description: A null or empty node selector term matches
                            no objects. The requirements of them are ANDed. The TopologySelectorTerm
                            type implements a subset of the NodeSelectorTerm.
                          properties:
                            matchExpressions:
                              description: A list of node selector requirements by
                                node's labels.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchFields:
                              description: A list of node selector requirements by
                                node's fields.
                              items:
                                description: A node selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: The label key that the selector applies
                                      to.
                                    type: string
                                  operator:
                                    description: Represents a key's relationship to
                                      a set of values. Valid operators are In, NotIn,
                                      Exists, DoesNotExist. Gt, and Lt.
                                    type: string
                                  values:
                                    description: An array of string values. If the
                                      operator is In or NotIn, the values array must
                                      be non-empty. If the operator is Exists or DoesNotExist,
                                      the values array must be empty. If the operator
                                      is Gt or Lt, the values array must have a single
                                      element, which will be interpreted as an integer.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                          type: object
                        type: array
                    required:
                    - nodeSelectorTerms
                    type: object
                type: object
              nodeSelector:
                additionalProperties:
                  type: string
                type: object
              tolerations:
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: NodePolicyProfileStatus defines the observed state of NodePolicyProfile
            type: object
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: node-policy-webhook/templates/nodepolicyprofile_viewer_role.yaml
# permissions for end users to view nodepolicyprofiles.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nodepolicyprofile-viewer-role
rules:
- apiGroups:
  - noodepolicies.softonic.io
  resources:
  - nodepolicyprofiles
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - noodepolicies.softonic.io
  resources:
  - nodepolicyprofiles/status
  verbs:
  - get
---
# Source: node-policy-webhook/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nodepolicyprofile-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nodepolicyprofile-viewer-role
subjects:
- kind: ServiceAccount
  name: my-release-node-policy-webhook
  namespace: default
---
# Source: node-policy-webhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-node-policy-webhook
  labels:
    helm.sh/chart: node-policy-webhook-0.1.10
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
---
# Source: node-policy-webhook/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-node-policy-webhook
  labels:
    helm.sh/chart: node-policy-webhook-0.1.10
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-policy-webhook
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app: node-policy-webhook
        app.kubernetes.io/name: node-policy-webhook
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-node-policy-webhook
      securityContext:
        {}
      containers:
        - name: node-policy-webhook
          args:
            - --tls-cert=/etc/webhook/certs/cert.pem
            - --tls-key=/etc/webhook/certs/key.pem
            - -v=2
          securityContext:
            {}
          image: "softonic/node-policy-webhook:0.1.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: BIND_ADDRESS
              value: "0.0.0.0:8443"
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: https
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: https
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
          resources:
            {}
      volumes:
        - name: webhook-certs
          secret:
            secretName: my-release-node-policy-webhook
---
# Source: node-policy-webhook/templates/mutatingwebhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-release-node-policy-webhook
  labels:
    helm.sh/chart: node-policy-webhook-0.1.10
    app.kubernetes.io/name: node-policy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.3"
    app.kubernetes.io/managed-by: Helm
webhooks:
  - name: my-release-node-policy-webhook.default.svc.cluster.local
    objectSelector:
      matchExpressions:
        - key: app
          operator: NotIn
          values: ["node-policy-webhook"]
    clientConfig:
      caBundle: 
      service:
        name: my-release-node-policy-webhook
        namespace: default
        path: "/mutate"
        port: 443
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    sideEffects: None
    timeoutSeconds: 5
    reinvocationPolicy: Never
    failurePolicy: Ignore
    admissionReviewVersions:
    - "v1beta1"
    - "v1"
