---
# Source: shinyproxy/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shinyproxy
---
# Source: shinyproxy/templates/secrets.yaml
kind: Secret
apiVersion: v1
metadata:
  name: shinyproxy
  labels:
    helm.sh/chart: shinyproxy-0.6.6
    app.kubernetes.io/name: shinyproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  secrets.json: "eyJwcm94eSI6e319"
---
# Source: shinyproxy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: shinyproxy
  labels:
    helm.sh/chart: shinyproxy-0.6.6
    app.kubernetes.io/name: shinyproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |
    proxy:
      authentication: none
      container-backend: kubernetes
      heartbeat-rate: 10000
      heartbeat-timeout: 60000
      kubernetes:
        internal-networking: true
        namespace: default
      landing-page: /
      livenessProbe: {}
      logo-url: http://www.openanalytics.eu/sites/www.openanalytics.eu/themes/oa/logo.png
      port: 8080
      readinessProbe: {}
      title: Open Analytics Shiny Proxy
---
# Source: shinyproxy/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: shinyproxy
  namespace: default
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods","persistentvolumeclaims"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods/log"]
    verbs: ["get"]
---
# Source: shinyproxy/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: shinyproxy
  namespace: default
subjects:
  - kind: ServiceAccount
    name: shinyproxy
    namespace: default
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: shinyproxy
---
# Source: shinyproxy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: shinyproxy
  labels:
    helm.sh/chart: shinyproxy-0.6.6
    app.kubernetes.io/name: shinyproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
      app.kubernetes.io/name: shinyproxy
      app.kubernetes.io/instance: my-release
  ports:
    - port: 8080
      targetPort: 8080
---
# Source: shinyproxy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: shinyproxy-0.6.6
    app.kubernetes.io/name: shinyproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
  name: shinyproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: shinyproxy
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: shinyproxy
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/config-map: 96f750a8644cf7895f5d7dc5cfaad47a151088f0aaf154a3f7fa142ccd49b8eb
        checksum/secrets: 0a61e5d7c1f8d7099d8fc2a26dfcc860b60457aacf79a2857ecccb431c8aeb52
    spec:
      nodeSelector: {}
      containers:
        - name: shinyproxy
          image: remche/shinyproxy:2.6.1
          env:
            - name: SPRING_APPLICATION_JSON
              valueFrom:
                secretKeyRef:
                  name: shinyproxy
                  key: secrets.json 
          volumeMounts:
          - name: application-conf
            mountPath: /opt/shinyproxy/application.yml
            subPath: application.yml
          resources:
            limits:
              cpu: 300m
              memory: 800Mi
            requests:
              cpu: 200m
              memory: 512Mi
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9090
            periodSeconds: 20
            initialDelaySeconds: 40
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 9090
            periodSeconds: 20
            initialDelaySeconds: 40
            timeoutSeconds: 5
      serviceAccountName: shinyproxy
      volumes:
      - name: application-conf
        configMap:
          name: shinyproxy
---
# Source: shinyproxy/templates/hooks.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "delete-user-pods-my-release"
  labels:
    helm.sh/chart: shinyproxy-0.6.6
    app.kubernetes.io/name: shinyproxy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.6.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "delete-user-pods-my-release"
      labels:
        helm.sh/chart: shinyproxy-0.6.6
        app.kubernetes.io/name: shinyproxy
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.6.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      serviceAccountName: shinyproxy
      containers:
      - name: delete-user-pods
        image: bitnami/kubectl:1.30
        args:
          - "delete"
          - "pods"
          - "-l"
          - "z2sp.instance=my-release"
