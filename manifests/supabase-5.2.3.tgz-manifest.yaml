---
# Source: supabase/charts/kong/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kong
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 3.7.0
    helm.sh/chart: kong-12.2.0
    app.kubernetes.io/component: server
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: server
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8000
        - port: 8443
        - port: 8001
        - port: 8444
---
# Source: supabase/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: supabase/templates/auth/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-auth
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: auth
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: auth
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9999
        - port: 80
---
# Source: supabase/templates/jwt-job-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-jwt-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: init
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: supabase/templates/meta/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-meta
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: meta
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: meta
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 80
---
# Source: supabase/templates/realtime/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-realtime
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: realtime
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9999
        - port: 80
---
# Source: supabase/templates/rest/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-rest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: rest
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: rest
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 3000
        - port: 80
---
# Source: supabase/templates/storage/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-storage
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: storage
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5000
        - port: 80
---
# Source: supabase/templates/studio/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-supabase-studio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: studio
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/part-of: supabase
      app.kubernetes.io/component: studio
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 3000
        - port: 80
---
# Source: supabase/charts/kong/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kong
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 3.7.0
    helm.sh/chart: kong-12.2.0
    app.kubernetes.io/component: server
spec:
  maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: server
---
# Source: supabase/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: supabase/templates/auth/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-auth
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.152.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: auth
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: auth
---
# Source: supabase/templates/meta/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-meta
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 0.81.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: meta
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: meta
---
# Source: supabase/templates/realtime/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-realtime
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.29.5
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: realtime
---
# Source: supabase/templates/rest/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-rest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 11.2.2
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: rest
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: rest
---
# Source: supabase/templates/storage/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-storage
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.3.3
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: storage
---
# Source: supabase/templates/studio/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-supabase-studio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: studio
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: studio
---
# Source: supabase/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
automountServiceAccountToken: false
---
# Source: supabase/templates/jwt-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-supabase-jwt-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
automountServiceAccountToken: false
---
# Source: supabase/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-supabase
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
automountServiceAccountToken: false
---
# Source: supabase/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
type: Opaque
data:
  postgres-password: "c1g2Q3VObnJTWQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: supabase/templates/jwt-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-jwt
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
type: Opaque
data:
  secret: "OXp1VDE2akVlbEs0YzJLemF3bXZFbTJWbzR5SFoyeUk1dW9yRTNjdnNK"
---
# Source: supabase/templates/realtime/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-supabase-realtime
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.29.5
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
type: Opaque
data:
  key-base: "eUhxUFd1a0ROaHQ3VXM2dEE4YlZyODRwdzdQYkZYUXYzcmtKNWV2Wm80SUtDemxZWE44NVRTc2xiQmxSSXBiQw=="
---
# Source: supabase/charts/kong/templates/kong-script-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kong-scripts
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 3.7.0
    helm.sh/chart: kong-12.2.0
    app.kubernetes.io/component: server
data:
  kong-container-health.sh: |-
    #!/bin/bash

    set -o errexit
    set -o nounset
    set -o pipefail

    # Load libraries
    . /opt/bitnami/scripts/libos.sh
    . /opt/bitnami/scripts/libkong.sh

    # Load Kong environment variables
    . /opt/bitnami/scripts/kong-env.sh

    is_kong_running

  ingress-container-wait-for-kong.sh: |-
    #!/bin/bash

    echo "Waiting for the Kong container to be ready"
    if wait-for-port --timeout=300 --host=127.0.0.1 --state=inuse 8000; then
      echo "Kong container ready"
    else
      echo "Kong not ready after 300 seconds"
      exit 1
    fi

  ingress-container-start.sh: |-
    #!/bin/bash

    . /health/ingress-container-wait-for-kong.sh

    kong-ingress-controller
---
# Source: supabase/templates/auth/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-auth-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.152.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: auth
data:
  GOTRUE_API_HOST: "0.0.0.0"
  GOTRUE_API_PORT: "9999"
  API_EXTERNAL_URL: "http:/my-release-supabase-auth:80"
  GOTRUE_SITE_URL: "http://localhost:80"
  GOTRUE_URI_ALLOW_LIST: "*"
  GOTRUE_DISABLE_SIGNUP: "false"
  GOTRUE_DB_DRIVER: "postgres"
  GOTRUE_DB_MIGRATIONS_PATH: "/opt/bitnami/gotrue/"
  GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated"
  GOTRUE_JWT_ADMIN_ROLES: "service_role"
  GOTRUE_JWT_AUD: "authenticated"
  GOTRUE_JWT_EXP: "3600"
  GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
  GOTRUE_MAILER_AUTOCONFIRM: "true"
  GOTRUE_SMTP_ADMIN_EMAIL: "your-mail@example.com"
  GOTRUE_SMTP_HOST: "smtp.example.com"
  GOTRUE_SMTP_PORT: "587"
  GOTRUE_SMTP_SENDER_NAME: "your-mail@example.com"
  GOTRUE_EXTERNAL_PHONE_ENABLED: "false"
  GOTRUE_SMS_AUTOCONFIRM: "false"
  GOTRUE_MAILER_URLPATHS_INVITE: "http://localhost:80/auth/v1/verify"
  GOTRUE_MAILER_URLPATHS_CONFIRMATION: "http://localhost:80/auth/v1/verify"
  GOTRUE_MAILER_URLPATHS_RECOVERY: "http://localhost:80/auth/v1/verify"
  GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: "http://localhost:80/auth/v1/verify"
---
# Source: supabase/templates/kong/declarative-conf-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  
  name: my-release-kong-declarative-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: kong
data:
  kong.yml.tpl: |
    _format_version: "1.1"

    consumers:
      - username: anon
        keyauth_credentials:
            - key: {{SUPABASE_ANON_KEY}}
      - username: service_role
        keyauth_credentials:
            - key: {{SUPABASE_SERVICE_KEY}}

    acls:
      - consumer: anon
        group: anon
      - consumer: service_role
        group: admin

    services:
      - name: auth-v1-open
        url: http://my-release-supabase-auth:80/verify
        routes:
          - name: auth-v1-open
            strip_path: true
            paths:
              - /auth/v1/verify
        plugins:
          - name: cors
      - name: auth-v1-open-callback
        url: http://my-release-supabase-auth:80/callback
        routes:
          - name: auth-v1-open-callback
            strip_path: true
            paths:
              - /auth/v1/callback
        plugins:
          - name: cors
      - name: auth-v1-open-authorize
        url: http://my-release-supabase-auth:80/authorize
        routes:
          - name: auth-v1-open-authorize
            strip_path: true
            paths:
              - /auth/v1/authorize
        plugins:
          - name: cors

      - name: auth-v1
        _comment: "GoTrue: /auth/v1/* -> http://my-release-supabase-auth:80/*"
        url: http://my-release-supabase-auth:80
        routes:
          - name: auth-v1-all
            strip_path: true
            paths:
              - /auth/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon

      - name: rest-v1
        _comment: "PostgREST: /rest/v1/* -> http://my-release-supabase-rest:80/*"
        url: http://my-release-supabase-rest:80/
        routes:
          - name: rest-v1-all
            strip_path: true
            paths:
              - /rest/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: true
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon

      - name: realtime-v1
        _comment: "Realtime: /realtime/v1/* -> ws://my-release-supabase-realtime:80/socket/*"
        url: http://my-release-supabase-realtime:80/socket
        routes:
          - name: realtime-v1-all
            strip_path: true
            paths:
              - /realtime/v1/
        plugins:
          - name: cors
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
                - anon

      - name: storage-v1
        _comment: "Storage: /storage/v1/* -> http://my-release-supabase-storage:80/*"
        url: http://my-release-supabase-storage:80/
        routes:
          - name: storage-v1-all
            strip_path: true
            paths:
              - /storage/v1/
        plugins:
          - name: cors

      - name: meta
        _comment: "pg-meta: /pg/* -> http://my-release-supabase-meta:80/*"
        url: http://my-release-supabase-meta:80/
        routes:
          - name: meta-all
            strip_path: true
            paths:
              - /pg/
        plugins:
          - name: key-auth
            config:
              hide_credentials: false
          - name: acl
            config:
              hide_groups_header: true
              allow:
                - admin
---
# Source: supabase/templates/meta/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-meta-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 0.81.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: meta
data:
  PG_META_DB_USER: "supabase_admin"
  PG_META_DB_HOST: "my-release-postgresql"
  PG_META_DB_PORT: "5432"
  PG_META_DB_NAME: "postgres"
  PG_META_DB_SSL_MODE: "disable"
  PG_META_PORT: "8080"
---
# Source: supabase/templates/realtime/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-realtime-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.29.5
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
data:
  DB_HOST: "my-release-postgresql"
  DB_PORT: "5432"
  DB_NAME: "postgres"
  DB_SSL: "disable"
  PORT: "9999"
  FLY_ALLOC_ID: "realtime"
  FLY_APP_NAME: "realtime"
  ERL_AFLAGS: "-proto_dist inet_tcp"
  REPLICATION_MODE: "RLS"
  REPLICATION_POLL_INTERVAL: "100"
  SECURE_CHANNELS: "true"
  SLOT_NAME: "supabase_realtime_rls"
  TEMPORARY_SLOT: "true"
---
# Source: supabase/templates/rest/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-rest-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 11.2.2
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: rest
data:
  PGRST_DB_SCHEMA: "public,storage"
  PGRST_DB_ANON_ROLE: "anon"
  PGRST_DB_USE_LEGACY_GUCS: "false"
  PGRST_SERVER_PORT: "3000"
---
# Source: supabase/templates/storage/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-storage-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.3.3
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
data:
  POSTGREST_URL: "http://my-release-supabase-rest:80"
  PGOPTIONS: "-c search_path=storage,public"
  FILE_SIZE_LIMIT: "52428800"
  STORAGE_BACKEND: "file"
  FILE_STORAGE_BACKEND_PATH: "/bitnami/supabase-storage"
  TENANT_ID: "stub"
  REGION: "stub"
  GLOBAL_S3_BUCKET: "stub"
  DB_INSTALL_ROLES: "false"
  PORT: "5000"
---
# Source: supabase/templates/studio/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-supabase-studio-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: studio
data:
  SUPABASE_URL: "http://my-release-kong.default.svc.cluster.local:80"
  STUDIO_PG_META_URL: "http://my-release-kong.default.svc.cluster.local:80/pg"
  SUPABASE_PUBLIC_URL: "http://localhost:80"
  PORT: "3000"
---
# Source: supabase/templates/storage/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-supabase-storage
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.3.3
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: supabase/templates/jwt-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-supabase-jwt-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    resourceNames:
      - "my-release-jwt"
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
# Source: supabase/templates/jwt-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-supabase-jwt-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
subjects:
  - kind: ServiceAccount
    name: my-release-supabase-jwt-init
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-supabase-jwt-init
---
# Source: supabase/charts/kong/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kong
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 3.7.0
    helm.sh/chart: kong-12.2.0
    app.kubernetes.io/component: server
spec:
  type: LoadBalancer
  externalTrafficPolicy: ""
  sessionAffinity: None
  ports:
    - port: 80
      targetPort: http-proxy
      protocol: TCP
      name: http-proxy
    - port: 443
      targetPort: https-proxy
      protocol: TCP
      name: https-proxy
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kong
    app.kubernetes.io/component: server
---
# Source: supabase/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: supabase/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: supabase/templates/auth/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-auth
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.152.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: auth
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: 9999
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: auth
---
# Source: supabase/templates/meta/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-meta
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 0.81.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: meta
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: 8080
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: meta
---
# Source: supabase/templates/realtime/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-realtime
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.29.5
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: 9999
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: realtime
---
# Source: supabase/templates/rest/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-rest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 11.2.2
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: rest
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: 3000
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: rest
---
# Source: supabase/templates/storage/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-storage
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.3.3
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: 5000
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: storage
---
# Source: supabase/templates/studio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-supabase-studio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: studio
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-studio
      port: 80
      protocol: TCP
      targetPort: http-studio
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: supabase
    app.kubernetes.io/component: studio
---
# Source: supabase/charts/kong/templates/dep-ds.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kong
  namespace: default
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kong
    app.kubernetes.io/version: 3.7.0
    helm.sh/chart: kong-12.2.0
    app.kubernetes.io/component: server
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kong
      app.kubernetes.io/component: server
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kong
        app.kubernetes.io/version: 3.7.0
        helm.sh/chart: kong-12.2.0
        app.kubernetes.io/component: server
      annotations:
        checksum/configmap-kong: b34fa96a3530d7f79029d6a87d3c122387d6e871d568a30ac4b7d870d3a29481
    spec:
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kong
                    app.kubernetes.io/component: server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: render-kong-declarative-conf
          image: 'docker.io/bitnami/kong:3.7.0-debian-12-r1'
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
        
              . /opt/bitnami/scripts/liblog.sh
        
              # We need to generate it in the tmp folder to ensure that we have write permissions
              info "Rendering Supabase declarative config template"
              render-template /bitnami/kong/declarative-template/kong.yml.tpl > "/bitnami/kong/declarative-conf/kong.yml"
          volumeMounts:
            - name: declarative-conf-template
              mountPath: /bitnami/kong/declarative-template/
            - name: rendered-declarative-conf
              mountPath: /bitnami/kong/declarative-conf/
          securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              readOnlyRootFilesystem: true
              runAsGroup: 1001
              runAsNonRoot: true
              runAsUser: 1001
              seLinuxOptions: {}
              seccompProfile:
                type: RuntimeDefault
          env:
            - name: SUPABASE_ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: 'my-release-jwt'
                  key: 'anon-key'
            - name: SUPABASE_SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  name: 'my-release-jwt'
                  key: 'service-key'
        
      containers:
        - name: kong
          image: docker.io/bitnami/kong:3.7.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: KONG_PREFIX
              value: /opt/bitnami/kong/server
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KONG_DATABASE
              value: "off"
            - name: KONG_DECLARATIVE_CONFIG
              value: /bitnami/kong/declarative-conf/kong.yml
            - name: KONG_DNS_ORDER
              value: LAST,A,CNAME
            - name: KONG_PLUGINS
              value: request-transformer,cors,key-auth,acl
          ports:
            - name: http-proxy
              containerPort: 8000
              protocol: TCP
            - name: https-proxy
              containerPort: 8443
              protocol: TCP
            - name: http-admin
              containerPort: 8001
              protocol: TCP
            - name: https-admin
              containerPort: 8444
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - 'kong start'
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/bash
                - -ec
                - /health/kong-container-health.sh
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - kong quit
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/kong/server
              subPath: app-server-dir
            - name: health
              mountPath: /health
            - mountPath: /bitnami/kong/declarative-conf/
              name: rendered-declarative-conf
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: health
          configMap:
            name: my-release-kong-scripts
            defaultMode: 0755
        - configMap:
            name: 'my-release-kong-declarative-config'
          name: declarative-conf-template
        - emptyDir: {}
          name: rendered-declarative-conf
---
# Source: supabase/templates/auth/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-auth
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.152.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: auth
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: auth
  template:
    metadata:
      annotations:
        checksum/default-configmap: 9bf10484fec4efc8dcac765f01d2571dd69a793ddae1ab97be777c6b6cac3773
        checksum/jwt-secret: af78b454d92e52308d13e346c78df8e24d41b9f1d5502ef622529b669f1f22ca
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 2.152.1
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: auth
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: auth
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: gotrue
          image: docker.io/bitnami/gotrue:2.152.1-debian-12-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: DB_USER
              value: "supabase_admin"
            - name: DB_HOST
              value: "my-release-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "postgres"
            - name: DB_SSL
              value: "disable"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: "postgres-password"
            - name: GOTRUE_DB_DATABASE_URL
              value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?search_path=auth&sslmode=$(DB_SSL)"
            - name: GOTRUE_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: secret
            - name: GOTRUE_OPERATOR_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: secret
          envFrom:
            - configMapRef:
                name: my-release-supabase-auth-default
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          ports:
            - name: http
              containerPort: 9999
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: supabase/templates/meta/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-meta
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 0.81.1
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: meta
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: meta
  template:
    metadata:
      annotations:
        checksum/default-configmap: f255fd52cf3329007b61f235047b0590804f16ed6df8b98a4fbb3ff3bcee2700
        checksum/jwt-secret: cbef1812c3b75ca499c0945758017b2616186a6125fcd61513963be94a114c0e
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 0.81.1
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: meta
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: meta
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: supabase-postgres-meta
          image: docker.io/bitnami/supabase-postgres-meta:0.81.1-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PG_META_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: "postgres-password"
          envFrom:
            - configMapRef:
                name: my-release-supabase-meta-default
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /health
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /.npm/_logs
              subPath: npm-logs-dir
            - name: empty-dir
              mountPath: /.npm/_cacache
              subPath: npm-cache-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: supabase/templates/realtime/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-realtime
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 2.29.5
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: realtime
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: realtime
  template:
    metadata:
      annotations:
        checksum/default-configmap: 315728f1a7753be44b0de809102ca022f206bfe3ee02bcdb05b141bdb7455e49
        checksum/jwt-secret: 72365fdf6ea971888cb24181729c1f58d0bc117e8f4f1610067db7dd3a3e7abf
        checksum/secret: 0fb5b97449e0d63e3216eb050cfc41e45ffde12aad4569c58fd6f4162a1dff52
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 2.29.5
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: realtime
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: realtime
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
        - name: create-tzdata-priv
          image: docker.io/bitnami/supabase-realtime:2.29.5-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              cp -r /opt/bitnami/supabase-realtime/lib/tzdata-*/priv/* /priv
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /priv
              subPath: app-tzdata-dir
      containers:
        - name: supabase-realtime
          image: docker.io/bitnami/supabase-realtime:2.29.5-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              realtime eval Realtime.Release.migrate && realtime start
          env:
            - name: DB_USER
              value: "supabase_admin"
            - name: DB_HOST
              value: "my-release-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "postgres"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "postgres-password"
            - name: API_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: "my-release-jwt"
                  key: "secret"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: "my-release-supabase-realtime"
                  key: "key-base"
          envFrom:
            - configMapRef:
                name: my-release-supabase-realtime-default
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          ports:
            - name: http
              containerPort: 9999
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /.tzdata-priv
              subPath: app-tzdata-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: supabase/templates/rest/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-rest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 11.2.2
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: rest
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: rest
  template:
    metadata:
      annotations:
        checksum/default-configmap: d2ebc34468d888ccbd5559608ad978e5f4d8edc4448b4cc5a4f859aa6393dc38
        checksum/jwt-secret: 9293e24c231d80c36892b025357cb7b31e65912dca8b2ba1011df1c11b6e972f
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 11.2.2
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: rest
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: rest
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: postgrest
          image: docker.io/bitnami/postgrest:11.2.2-debian-12-r27
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: DB_USER
              value: "supabase_admin"
            - name: DB_HOST
              value: "my-release-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "postgres"
            - name: DB_SSL
              value: "disable"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: "postgres-password"
            - name: PGRST_DB_URI
              value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_SSL)"
            - name: PGRST_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: secret
          envFrom:
            - configMapRef:
                name: my-release-supabase-rest-default
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          ports:
            - name: http
              containerPort: 3000
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: supabase/templates/storage/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-storage
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.3.3
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: storage
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: storage
  template:
    metadata:
      annotations:
        checksum/default-configmap: b21731874f9c36c62072d0ba34497e95bfc692f656a2eb415fc8504b403a2879
        checksum/jwt-secret: 8ca2096eadc57bf5aa528417656d3dafb37701bd66ac60e3c7a12a0c36c95535
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 1.3.3
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: storage
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: storage
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: supabase-storage
          image: docker.io/bitnami/supabase-storage:1.3.3-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              cd /opt/bitnami/supabase-storage
              node dist/server.js
          env:
            - name: DB_USER
              value: "supabase_admin"
            - name: DB_HOST
              value: "my-release-postgresql"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "postgres"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: "postgres-password"
            - name: DATABASE_URL
              value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)"
            - name: PGRST_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: secret
            - name: ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: anon-key
            - name: SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: service-key
          envFrom:
            - configMapRef:
                name: my-release-supabase-storage-default
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 1536Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 1024Mi
          ports:
            - name: http
              containerPort: 5000
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /status
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /.pm2
              subPath: app-pm2-dir
            - name: data
              mountPath: /bitnami/supabase-storage
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: my-release-supabase-storage
---
# Source: supabase/templates/studio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-supabase-studio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: studio
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: supabase
      app.kubernetes.io/component: studio
  template:
    metadata:
      annotations:
        checksum/default-configmap: fc614a906e0c99a71873c3f47862892e960f63ea2681eac297ce778cf386f99c
        checksum/jwt-secret: 75bc1149c6def1e86293a38077082601804e18ca4b4629df5fd8620b2a4d755a
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 1.24.4
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: studio
    spec:
      serviceAccountName: my-release-supabase
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: supabase
                    app.kubernetes.io/component: studio
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        # We need to wait for the postgresql database to be ready in order to start with Supabase.
        # As it is a ReplicaSet, we need that all nodes are configured in order to start with
        # the application or race conditions can occur
        - name: wait-for-db
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libvalidations.sh
              . /opt/bitnami/scripts/libpostgresql.sh
              . /opt/bitnami/scripts/postgresql-env.sh
        
              info "Waiting for host $DATABASE_HOST"
              psql_is_ready() {
                  if ! PGCONNECT_TIMEOUT="5" PGPASSWORD="$DATABASE_PASSWORD" psql -U "$DATABASE_USER" -d "$DATABASE_NAME" -h "$DATABASE_HOST" -p "$DATABASE_PORT_NUMBER" -c "SELECT 1"; then
                     return 1
                  fi
                  return 0
              }
              if ! retry_while "debug_execute psql_is_ready"; then
                  error "Database not ready"
                  exit 1
              fi
              info "Database is ready"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: DATABASE_HOST
              value: "my-release-postgresql"
            - name: DATABASE_PORT_NUMBER
              value: "5432"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: DATABASE_USER
              value: "supabase_admin"
            - name: DATABASE_NAME
              value: "postgres"
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: supabase-studio
          image: docker.io/bitnami/supabase-studio:1.24.4-debian-12-r0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPABASE_ANON_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: anon-key
            - name: SUPABASE_SERVICE_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: service-key
            - name: SUPABASE_KEY_ADMIN
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: service-key
          envFrom:
            - configMapRef:
                name: my-release-supabase-studio-default
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          ports:
            - name: http-studio
              containerPort: 3000
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-studio
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-studio
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: supabase/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/supabase-postgres:15.1.1-debian-12-r65
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pg_stat_statements, pg_stat_monitor, pgaudit, plpgsql, plpgsql_check, pg_cron, pg_net, pgsodium, timescaledb, auto_explain"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: supabase/templates/jwt-init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-supabase-jwt-init
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: supabase
    app.kubernetes.io/version: 1.24.4
    helm.sh/chart: supabase-5.2.3
    app.kubernetes.io/part-of: supabase
    app.kubernetes.io/component: init
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "10"
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: supabase
        app.kubernetes.io/version: 1.24.4
        helm.sh/chart: supabase-5.2.3
        app.kubernetes.io/part-of: supabase
        app.kubernetes.io/component: init
    spec:
      
      serviceAccountName: my-release-supabase-jwt-init
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      automountServiceAccountToken: true
      initContainers:
        - name: create-jwt-token
          image: docker.io/bitnami/jwt-cli:6.1.0-debian-12-r0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -ec
          args:
            - |
              #!/bin/bash
              echo "Generating JWT token"
              # Taken from https://supabase.com/docs/guides/self-hosting#api-keys
              ANON_KEY="$(jwt encode --secret=$SECRET '{"role":"anon","iss":"supabase","iat":1676934000,"exp":1834700400}')"
              SERVICE_KEY="$(jwt encode --secret=$SECRET '{"role":"service_role","iss":"supabase","iat":1676934000,"exp":1834700400}')"
              echo "Writing JWT token to file"
              echo -n "$SECRET" > /bitnami/supabase/secrets/secret
              echo -n "$ANON_KEY" > /bitnami/supabase/secrets/anon-key
              echo -n "$SERVICE_KEY" > /bitnami/supabase/secrets/service-key
          env:
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-jwt
                  key: secret
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: secret-files
              mountPath: /bitnami/supabase/secrets
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
      containers:
        - name: create-update-secret
          image: docker.io/bitnami/kubectl:1.30.1-debian-12-r1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -ec
          args:
            - |
              #!/bin/bash
              set -o errexit
              set -o nounset
              set -o pipefail
              echo "Creating secret"
              kubectl create secret --namespace=default generic my-release-jwt --from-file=/bitnami/supabase/secrets/secret --from-file=/bitnami/supabase/secrets/anon-key --from-file=/bitnami/supabase/secrets/service-key --dry-run -o yaml | kubectl apply -f -
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: secret-files
              mountPath: /bitnami/supabase/secrets
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - kubectl
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - kubectl
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: secret-files
          emptyDir: {}
