---
# Source: kafka-dev/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  type: NodePort
  ports:
  - name: zookeeper
    port: 2181
    targetPort: 2181
  selector:
    app: zookeeper
---
# Source: kafka-dev/templates/service.yaml
# Kafka is configured with internal and external listeners.
# We need Kafka to know how to map from each cluster port to a port it actually exposes.
# It does this by mapping the incoming port number to an advertised.listener.
# This means that even though we can use different advertised hostnames
# in advertised listeners, the ports must be the same all the way through
# from client to pod to container/kafka.
#
# Note that we don't technically need this Service for Kafka to work.
# This service exists so that Kafka clients in k8s can address the Kafka Pod
# by a name: 'kafka.<namespace>.svc.cluster.local:<kafka_internal_port>'.
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  type: ClusterIP
  # This is a 'headless' service; no Cluster IP for the service is created.
  # Inside the k8s cluster, we want to use the pod IPs
  # because Kafka does its own load balancing.
  clusterIP: None
  selector:
    app: kafka
  ports:
    - name: kafka-internal
      protocol: TCP
      targetPort: 9092 # container (broker) port
      port: 9092       # cluster (pod) port
---
# Source: kafka-dev/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-external
spec:
  # The external port is a NodePort because we want to
  # expose the kafka_advertised_host (EXTERNAL listener) to
  # requests from outside of the node.
  type: NodePort
  selector:
    app: kafka
  ports:
    - name: kafka-external
      protocol: TCP
      targetPort: 30092 # container (broker) port
      port: 30092       # cluster (pod) port
      nodePort: 30092       # cluster (pod) port
---
# Source: kafka-dev/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - image: wurstmeister/zookeeper
        imagePullPolicy: IfNotPresent
        name: zookeeper
        ports:
        - containerPort: 2181
---
# Source: kafka-dev/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - image: wurstmeister/kafka
          imagePullPolicy: IfNotPresent
          name: kafka

          env:
            - name: KAFKA_BROKER_ID
              value: "1"

            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper.default.svc.cluster.local:2181

            - name: HOSTNAME_COMMAND
              # Use the value of the Pod's IP address as the hostname.
              # This will be used as the internal 'advertised' hostname.
              value: /bin/hostname -i

            # k8s will create <service_name>_PORT as an env var,
            # which start-kafka.sh will also use if it is set.
            # To keep these from conflicting, we manually
            # set KAFKA_PORT to what we expect (alternatively we could
            # rename the kafka service name in service.yaml as a workaround).
            # See: https://github.com/wurstmeister/kafka-docker/issues/122#issuecomment-253184494
            - name: KAFKA_PORT
              value: "9092"

            # Listen on two ports:
            # - kafka_internal_port (default 9092) for internal cluster traffic
            # - kafka_external_port (default 30092) for external clients.
            - name: KAFKA_LISTENERS
              value: "INTERNAL://:9092,EXTERNAL://:30092"

            # - Internal cluster clients should connect to Pod's IP:<kafka_internal_port>
            # - External clients should connect to kafka_advertised_host:<kafka_external_port>
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://_{HOSTNAME_COMMAND}:9092,EXTERNAL://127.0.0.1:30092"

            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

            # Inter-broker traffic should use the internal cluster (Pod IP:port) advertised listener.
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL

          image: wurstmeister/kafka
          imagePullPolicy: IfNotPresent
          name: kafka
          ports:
            # NOTE: container port needs to be the same as nodePort so '127.0.0.1' as advertised.host
            # will work from both external and from the container.
            - containerPort: 9092
              name: kafka-internal
            - containerPort: 30092
              name: kafka-external
