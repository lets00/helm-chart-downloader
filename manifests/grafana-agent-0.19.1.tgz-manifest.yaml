---
# Source: grafana-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.1
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.20.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: grafana-agent/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: my-release-grafana-agent
data:
  agent.yml: |
    server:
      log_level: info
    prometheus:
      global:
        scrape_interval: 15s
      wal_directory: /var/lib/agent/data
      configs:
        - name: agent
          remote_write:
            - url: http://cortex.default.svc.cluster.local
              headers:
                X-Scope-OrgID: fake
          scrape_configs:
            - job_name: local_scrape
              static_configs:
                - targets: ['127.0.0.1:12345']
                  labels:
                    cluster: 'docker_compose'
                    container: 'agent'
                    pod: 'grafana-agent-local'
        
    tempo:
      configs:
        - name: default
          receivers:
            jaeger:
              protocols:
                thrift_http:
          attributes:
            actions:
            - action: upsert
              key: env
              value: prod
          remote_write:
            - endpoint: tempo:55680
              insecure: true
          batch:
            timeout: 5s
            send_batch_size: 100
          automatic_logging:
            backend: loki
            loki_name: default
            spans: true
            processes: true
            roots: true
        
    loki:
      positions_directory: /tmp/loki-positions
      configs:
      - name: default
        clients:
          - url: http://localhost:3100/loki/api/v1/push
        scrape_configs:
        - job_name: system
          static_configs:
          - targets: ['localhost']
            labels:
              job: varlogs
              __path__: /var/log/*log
---
# Source: grafana-agent/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: grafana-agent/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: default
---
# Source: grafana-agent/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.1
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.20.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: my-release
---
# Source: grafana-agent/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-grafana-agent
  labels:
    helm.sh/chart: grafana-agent-0.19.1
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.20.0"
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: d58bb11441615569204b46330d74deab907fb530910600643120f73a9b4515c3
      labels:
        app.kubernetes.io/name: grafana-agent
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: grafana-agent
      securityContext:
        {}
      containers:
        - name: grafana-agent
          args:
            - -config.file=/etc/agent/agent.yml
            - -prometheus.wal-directory=/tmp/agent/data
          command:
            - /bin/agent
          securityContext:
            privileged: true
            runAsUser: 0
          image: "grafana/agent:v0.20.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 60
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 60
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/agent
            - name: wal-dir
              mountPath: /var/lib/agent/data
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - configMap:
            name: my-release-grafana-agent
          name: config
        - name: wal-dir
          emptyDir: {}
---
# Source: grafana-agent/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-grafana-agent-test-connection"
  labels:
    helm.sh/chart: grafana-agent-0.19.1
    app.kubernetes.io/name: grafana-agent
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.20.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-grafana-agent:80']
  restartPolicy: Never
