---
# Source: dave/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: dave/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.0
    helm.sh/chart: elasticsearch-19.17.0
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: dave/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
automountServiceAccountToken: false
---
# Source: dave/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dave
  labels:
    helm.sh/chart: dave-0.0.3
    app.kubernetes.io/name: dave
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: dave/charts/backend/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dave-backend-service-secret
  labels:
    helm.sh/chart: backend-0.0.1
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
stringData:
            DAVE_EMAIL_PASSWORD: <Email-Password>
            ELASTICSEARCH_HOST: dave-elasticsearch
            ELASTICSEARCH_PASSWORD: ""
            SPRING_DATASOURCE_PASSWORD: dave_pwd
            existingSecret: ""
---
# Source: dave/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
type: Opaque
data:
  postgres-password: "RUc3RUh5c0d4NQ=="
  password: "ZGF2ZV9wd2Q="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: dave/templates/frontend-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: dave-frontend-client-secret
  labels:
    helm.sh/chart: dave-0.0.3
    app.kubernetes.io/name: dave
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: dave/charts/admin-portal/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-adminportal-apigateway-service
  labels:
    helm.sh/chart: admin-portal-0.0.1
    app.kubernetes.io/name: admin-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            HAZELCAST_GROUP_NAME: dave-adminportal-apigateway-service-session_replication_group
            HAZELCAST_INSTANCE: dave-adminportal-apigateway-service-hazl_instance
            HAZELCAST_OPENSHIFT_SERVICE_NAME: dave-adminportal-apigateway-service
            JAVA_OPTIONS: <Java Options>
            JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8 -Dhz.integritychecker.enabled=false
            SERVER_PORT: "8080"
            SPRING_CLOUD_GATEWAY_ACTUATOR_VERBOSE_ENABLED: "false"
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_0: RemoveResponseHeader=Expires
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_1: RemoveRequestHeader=cookie
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_2: RemoveRequestHeader=x-xsrf-token
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_3: TokenRelay=
            SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0: RewritePath=/api/sso/userinfo, /auth/realms/${spring.realm}/protocol/openid-connect/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_ID: sso
            SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0: Path=/api/sso/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_URI: <SSO URI>
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_BASEDONPREVIOUSVALUE: "false"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FACTOR: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FIRSTBACKOFF: 10ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_MAXBACKOFF: 50ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_METHODS: GET
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_RETRIES: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_NAME: Retry
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_1: RewritePath=/api/dave-backend-service/(?<urlsegments>.*),
              /$\{urlsegments}
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_2: RemoveResponseHeader=WWW-Authenticate
            SPRING_CLOUD_GATEWAY_ROUTES_1_ID: backend
            SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0: Path=/api/dave-backend-service/**
            SPRING_CLOUD_GATEWAY_ROUTES_1_URI: http://dave-backend-service:8080/
            SPRING_MVC_LOG-REQUEST-DETAILS: "on"
            SPRING_PROFILES_ACTIVE: dev
            SPRING_REALM: Dave
            SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: <ISSUER-URI>
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-ID: dave
---
# Source: dave/charts/backend/templates/configmap-email.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-backend-service-email
  labels:
    helm.sh/chart: backend-0.0.1
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            DAVE_EMAIL_ADDRESS: <Email-Adress>
            DAVE_EMAIL_RECEIVER_CUT_EMAIL_BODY_LINE_BEGINS_WITH_STRINGS: 'Von:;Gesendet:'
            DAVE_EMAIL_RECEIVER_CUT_EMAIL_BODY_LINE_CONTAINS_STRINGS: <Email Body Strings>
            DAVE_EMAIL_RECEIVER_HOSTNAME: <Hostname>
            DAVE_EMAIL_RECEIVER_UPDATE-INTERVAL: "5000"
            DAVE_EMAIL_RECEIVER_UPDATE_INTERVAL: "30000"
            DAVE_EMAIL_URL_ADMINPORTAL: http://localhost:8085
            DAVE_EMAIL_URL_SELFSERVICEPORTAL: http://localhost:8086
---
# Source: dave/charts/backend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-backend-service
  labels:
    helm.sh/chart: backend-0.0.1
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            DAVE_MESSSTELLE_CRON: 0 0/5 * 1/1 * ?
            DAVE_MESSSTELLE_SHEDLOCK: 4M
            DAVE_ZAEHLUNG_STATUS_UPDATER: 0 0/10 * 1/1 * ?
            ELASTICSEARCH_CONNECTTIMEOUT: "10"
            ELASTICSEARCH_PORT: "9200"
            ELASTICSEARCH_REINDEX: "true"
            ELASTICSEARCH_SCHEME: http
            ELASTICSEARCH_SOCKETTIMEOUT: "30"
            ELASTICSEARCH_USER: elastic
            GC_MAX_METASPACE_SIZE: "256"
            GEODATEN_EAI_URL: http://localhost:8088
            HAZELCAST_GROUP_NAME: dave-backend-service-hazl_group
            HAZELCAST_INSTANCE: dave-backend-service-hazl_instance
            HAZELCAST_OPENSHIFT_SERVICE_NAME: dave-backend-service
            JAVA_OPTIONS: <Java Options>
            JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8 -Dhz.integritychecker.enabled=false
            KEYCLOAK_AUTH-SERVER-URL: <Auth-Server URL>
            REALM: Dave
            SERVER_PORT: "8080"
            SPRING_DATA_REST_DEFAULT-PAGE-SIZE: "0x7fffffff"
            SPRING_DATA_REST_MAX-PAGE-SIZE: "0x7fffffff"
            SPRING_DATA_REST_RETURN-ON-BODY-CREATE: "true"
            SPRING_DATA_REST_RETURN-ON-BODY-UPDATE: "true"
            SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
            SPRING_DATASOURCE_URL: jdbc:postgresql://dave-postgresql:5432/dave_db
            SPRING_DATASOURCE_USERNAME: dave
            SPRING_JPA_DATABASE: postgresql
            SPRING_JPA_HIBERNATE_DDL-AUTO: update
            SPRING_JPA_HIBERNATE_NAMING.PHYSICAL-STRATEGY: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
            SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: "true"
            SPRING_JPA_SHOW-SQL: "false"
            SPRING_PROFILES_ACTIVE: dev
            SPRING_SECURITY_LOGGING.REQUESTS: all
            SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_TOKEN_URI: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/token
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_AUTHORIZATION-GRANT-TYPE: client_credentials
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-AUTHENTICATION-METHOD: client_secret_post
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-ID: dave
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-SECRET: TBD
            SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: ${keycloak.auth-server-url}/realms/${realm}
            SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: ${keycloak.auth-server-url}/realms/${realm}/protocol/openid-connect/certs
            TOMCAT_GRACEFULSHUTDOWN_PRE_WAIT_SECONDS: "40"
---
# Source: dave/charts/eai/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-eai-service
  labels:
    helm.sh/chart: eai-0.0.1
    app.kubernetes.io/name: eai
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            BACKEND_URI: dave-backend-service:8080
            GC_MAX_METASPACE_SIZE: "256"
            JAVA_OPTIONS: <Java Options>
            JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
            MANAGEMENT_SERVER_PORT: "8079"
            SERVER_PORT: "8080"
            SPRING_PROFILES_ACTIVE: dev
---
# Source: dave/charts/frontend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-frontend-apigateway-service
  labels:
    helm.sh/chart: frontend-0.0.1
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            HAZELCAST_GROUP_NAME: dave-frontend-apigateway-service-session_replication_group
            HAZELCAST_INSTANCE: dave-frontend-apigateway-service-hazl_instance
            HAZELCAST_OPENSHIFT_SERVICE_NAME: dave-frontend-apigateway-service
            JAVA_OPTIONS: <Java Options>
            JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
            SERVER_PORT: "8080"
            SPRING_CLOUD_GATEWAY_ACTUATOR_VERBOSE_ENABLED: "false"
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_0: RemoveResponseHeader=Expires
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_1: RemoveRequestHeader=cookie
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_2: RemoveRequestHeader=x-xsrf-token
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_3: TokenRelay=
            SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0: RewritePath=/api/sso/userinfo, /auth/realms/${spring.realm}/protocol/openid-connect/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_ID: sso
            SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0: Path=/api/sso/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_URI: <SSO URI>
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_BASEDONPREVIOUSVALUE: "false"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FACTOR: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FIRSTBACKOFF: 10ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_MAXBACKOFF: 50ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_METHODS: GET,POST
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_RETRIES: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_NAME: Retry
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_1: RewritePath=/api/dave-backend-service/(?<urlsegments>.*),
              /$\{urlsegments}
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_2: RemoveResponseHeader=WWW-Authenticate
            SPRING_CLOUD_GATEWAY_ROUTES_1_ID: backend
            SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0: Path=/api/dave-backend-service/**
            SPRING_CLOUD_GATEWAY_ROUTES_1_URI: http://dave-backend-service:8080/
            SPRING_CLOUD_GATEWAY_ROUTES_2_FILTERS_0: RewritePath=/api/dave-eai-service/(?<urlsegments>.*),
              /$\{urlsegments}
            SPRING_CLOUD_GATEWAY_ROUTES_2_FILTERS_1: RemoveResponseHeader=WWW-Authenticate
            SPRING_CLOUD_GATEWAY_ROUTES_2_ID: eai
            SPRING_CLOUD_GATEWAY_ROUTES_2_METADATA_RESPONSE-TIMEOUT: "1800000"
            SPRING_CLOUD_GATEWAY_ROUTES_2_PREDICATES_0: Path=/api/dave-eai-service/**
            SPRING_CLOUD_GATEWAY_ROUTES_2_URI: http://dave-eai-service:8080/
            SPRING_MVC_LOG-REQUEST-DETAILS: "on"
            SPRING_PROFILES_ACTIVE: dev
            SPRING_REALM: Dave
            SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: <ISSUER-URI>
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-ID: dave
---
# Source: dave/charts/selfservice-portal/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dave-selfserviceportal-apigateway-service
  labels:
    helm.sh/chart: selfservice-portal-0.0.1
    app.kubernetes.io/name: selfservice-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
data:
            HAZELCAST_GROUP_NAME: dave-selfserviceportal-apigateway-service-session_replication_group
            HAZELCAST_INSTANCE: dave-selfserviceportal-apigateway-service-hazl_instance
            HAZELCAST_OPENSHIFT_SERVICE_NAME: dave-selfserviceportal-apigateway-service
            JAVA_OPTIONS: <Java Options>
            JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
            SERVER_PORT: "8080"
            SPRING_CLOUD_GATEWAY_ACTUATOR_VERBOSE_ENABLED: "false"
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_0: RemoveResponseHeader=Expires
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_1: RemoveRequestHeader=cookie
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_2: RemoveRequestHeader=x-xsrf-token
            SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS_3: TokenRelay=
            SPRING_CLOUD_GATEWAY_ROUTES_0_FILTERS_0: RewritePath=/api/sso/userinfo, /auth/realms/${spring.realm}/protocol/openid-connect/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_ID: sso
            SPRING_CLOUD_GATEWAY_ROUTES_0_PREDICATES_0: Path=/api/sso/userinfo
            SPRING_CLOUD_GATEWAY_ROUTES_0_URI: <SSO URI>
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_BASEDONPREVIOUSVALUE: "false"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FACTOR: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_FIRSTBACKOFF: 10ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_BACKOFF_MAXBACKOFF: 50ms
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_METHODS: GET
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_ARGS_RETRIES: "2"
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_0_NAME: Retry
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_1: RewritePath=/api/dave-backend-service/(?<urlsegments>.*),
              /$\{urlsegments}
            SPRING_CLOUD_GATEWAY_ROUTES_1_FILTERS_2: RemoveResponseHeader=WWW-Authenticate
            SPRING_CLOUD_GATEWAY_ROUTES_1_ID: backend
            SPRING_CLOUD_GATEWAY_ROUTES_1_PREDICATES_0: Path=/api/dave-backend-service/**
            SPRING_CLOUD_GATEWAY_ROUTES_1_URI: http://dave-backend-service:8080/
            SPRING_MVC_LOG-REQUEST-DETAILS: "on"
            SPRING_PROFILES_ACTIVE: dev
            SPRING_REALM: Dave
            SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI: <ISSUER-URI>
            SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT-ID: dave
---
# Source: dave/charts/admin-portal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dave-adminportal-apigateway-service
  labels:
    helm.sh/chart: admin-portal-0.0.1
    app.kubernetes.io/name: admin-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: service
    - port: 5701
      targetPort: 5701
      protocol: TCP
      name: hazelcast

  selector:
    app.kubernetes.io/name: admin-portal
    app.kubernetes.io/instance: my-release
---
# Source: dave/charts/backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dave-backend-service
  labels:
    helm.sh/chart: backend-0.0.1
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 
      targetPort: http
      protocol: TCP
      name: http
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: service
    - port: 5701
      targetPort: 5701
      protocol: TCP
      name: hazelcast

  selector:
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
---
# Source: dave/charts/eai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dave-eai-service
  labels:
    helm.sh/chart: eai-0.0.1
    app.kubernetes.io/name: eai
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 
      targetPort: http
      protocol: TCP
      name: http
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: service

  selector:
    app.kubernetes.io/name: eai
    app.kubernetes.io/instance: my-release
---
# Source: dave/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.0
    helm.sh/chart: elasticsearch-19.17.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: dave/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.0
    helm.sh/chart: elasticsearch-19.17.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: dave/charts/frontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dave-frontend-apigateway-service
  labels:
    helm.sh/chart: frontend-0.0.1
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: service
    - port: 5701
      targetPort: 5701
      protocol: TCP
      name: hazelcast

  selector:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: my-release
---
# Source: dave/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dave/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dave/charts/selfservice-portal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: dave-selfserviceportal-apigateway-service
  labels:
    helm.sh/chart: selfservice-portal-0.0.1
    app.kubernetes.io/name: selfservice-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: service
    - port: 5701
      targetPort: 5701
      protocol: TCP
      name: hazelcast

  selector:
    app.kubernetes.io/name: selfservice-portal
    app.kubernetes.io/instance: my-release
---
# Source: dave/charts/admin-portal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dave-adminportal-apigateway-service
  labels:
    helm.sh/chart: admin-portal-0.0.1
    app.kubernetes.io/name: admin-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: admin-portal
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 28a9de92e8a8d6dcfccbf20be86278ca2b2f8bf2a5461f25cf1aab6e8bf16a46
      labels:
        app.kubernetes.io/name: admin-portal
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: dave
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: dave-adminportal-apigateway-service
            defaultMode: 420
      initContainers:
      containers:
        - name: admin-portal
          securityContext:
            {}
          image: "ghcr.io/it-at-m/dave-admin-portal:main-ls1"
          imagePullPolicy: IfNotPresent
          env:
          #  - name: LC_ALL
          #    value: C.utf8
            - name: SPRING_SESSION_TIMEOUT
              value: "3600"
          envFrom:
            - configMapRef:
                name: dave-adminportal-apigateway-service
            - secretRef:
                name: dave-frontend-client-secret
          ports:
            - name: service
              containerPort: 8080
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /deployments/config
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: http
#            initialDelaySeconds: 60
#            timeoutSeconds: 15
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: http
#            initialDelaySeconds: 10
#            timeoutSeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            failureThreshold: 20
          resources:
            {}
---
# Source: dave/charts/backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dave-backend-service
  labels:
    helm.sh/chart: backend-0.0.1
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: d1b1abea45e59f8cf4d6d357885a08280d5af8bd3abf9651a213da812bc21afc
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: dave
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: dave-backend-service
            defaultMode: 420
      initContainers:
      containers:
        - name: backend
          securityContext:
            {}
          image: "ghcr.io/it-at-m/dave-backend-postgres:main-ls1"
          imagePullPolicy: Always
          env:
          #  - name: LC_ALL
          #    value: C.utf8
            - name: SPRING_SESSION_TIMEOUT
              value: "3600"
          envFrom:
            - configMapRef:
                name: dave-backend-service
            - configMapRef:
                name: dave-backend-service-email
            - secretRef:
                name: dave-backend-service-secret
          ports:
            - name: service
              containerPort: 8080
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /deployments/config
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: http
#            initialDelaySeconds: 60
#            timeoutSeconds: 15
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: http
#            initialDelaySeconds: 10
#            timeoutSeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            failureThreshold: 20
          resources:
            limits:
              cpu: 1500m
              memory: 3512Mi
            requests:
              cpu: 1500m
              memory: 3512Mi
---
# Source: dave/charts/eai/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dave-eai-service
  labels:
    helm.sh/chart: eai-0.0.1
    app.kubernetes.io/name: eai
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: eai
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 2e18501c01c1bd4e534c7e31a664300d87a559d960987f163c5a50a0f79ed78e
      labels:
        app.kubernetes.io/name: eai
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: dave
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: dave-eai-service
            defaultMode: 420
      initContainers:
      containers:
        - name: eai
          securityContext:
            {}
          image: "ghcr.io/it-at-m/dave-eai:main-ls1"
          imagePullPolicy: IfNotPresent
          env:
          #  - name: LC_ALL
          #    value: C.utf8
            - name: SPRING_SESSION_TIMEOUT
              value: "3600"
          envFrom:
            - configMapRef:
                name: dave-eai-service
          ports:
            - name: service
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /deployments/config
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: http
#            initialDelaySeconds: 60
#            timeoutSeconds: 15
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: http
#            initialDelaySeconds: 10
#            timeoutSeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            failureThreshold: 20
          resources:
            {}
---
# Source: dave/charts/frontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dave-frontend-apigateway-service
  labels:
    helm.sh/chart: frontend-0.0.1
    app.kubernetes.io/name: frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 81692c766d0d25a9a8220f88c0663831c3e423f0d9cea2909c5baf9aabf80927
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: dave
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: dave-frontend-apigateway-service
            defaultMode: 420
      initContainers:
      containers:
        - name: frontend
          securityContext:
            {}
          image: "ghcr.io/it-at-m/dave-frontend:main-ls1"
          imagePullPolicy: IfNotPresent
          env:
          #  - name: LC_ALL
          #    value: C.utf8
            - name: SPRING_SESSION_TIMEOUT
              value: "3600"
          envFrom:
            - configMapRef:
                name: dave-frontend-apigateway-service
            - secretRef:
                name: dave-frontend-client-secret
          ports:
            - name: service
              containerPort: 8080
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /deployments/config
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: http
#            initialDelaySeconds: 60
#            timeoutSeconds: 15
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: http
#            initialDelaySeconds: 10
#            timeoutSeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            failureThreshold: 20
          resources:
            {}
---
# Source: dave/charts/selfservice-portal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dave-selfserviceportal-apigateway-service
  labels:
    helm.sh/chart: selfservice-portal-0.0.1
    app.kubernetes.io/name: selfservice-portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: selfservice-portal
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 689c944c9367f629be67569b9abb14e5ad1f3cff9889036127db19f02cc6aa73
      labels:
        app.kubernetes.io/name: selfservice-portal
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: dave
      securityContext:
        {}
      volumes:
        - name: config
          configMap:
            name: dave-selfserviceportal-apigateway-service
            defaultMode: 420
      initContainers:
      containers:
        - name: selfservice-portal
          securityContext:
            {}
          image: "ghcr.io/it-at-m/dave-selfservice-portal:main-ls1"
          imagePullPolicy: IfNotPresent
          env:
          #  - name: LC_ALL
          #    value: C.utf8
            - name: SPRING_SESSION_TIMEOUT
              value: "3600"
          envFrom:
            - configMapRef:
                name: dave-selfserviceportal-apigateway-service
            - secretRef:
                name: dave-frontend-client-secret
          ports:
            - name: service
              containerPort: 8080
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /deployments/config
#          livenessProbe:
#            httpGet:
#              path: /actuator/health/liveness
#              port: http
#            initialDelaySeconds: 60
#            timeoutSeconds: 15
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5
#          readinessProbe:
#            httpGet:
#              path: /actuator/health/readiness
#              port: http
#            initialDelaySeconds: 10
#            timeoutSeconds: 5
#            periodSeconds: 5
#            successThreshold: 1
#            failureThreshold: 20
          resources:
            {}
---
# Source: dave/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.0
    helm.sh/chart: elasticsearch-19.17.0
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: my-release-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.0
        helm.sh/chart: elasticsearch-19.17.0
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: my-release-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.0-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "dave"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "512m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits:
              cpu: 2
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 1Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dave/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.3.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "dave"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "dave_db"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "dave" -d "dbname=dave_db" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "dave" -d "dbname=dave_db" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
