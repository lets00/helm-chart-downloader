---
# Source: kong-preview/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kong-preview
  namespace: default
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
---
# Source: kong-preview/templates/controller-wallarm-secret.yaml
apiVersion: v1
data:
  token: ""
kind: Secret
metadata:
  name: my-release-kong-preview-secret
type: Opaque
---
# Source: kong-preview/templates/controller-configmap-cron.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/component: controller
  name: my-release-kong-preview-cron
  namespace: default
data:
  crontab: |
    # export-environment
    0 */1 * * * timeout 10m /opt/wallarm/ruby/usr/share/wallarm-common/export-environment -l STDOUT
    # sync-ip-lists
    * * * * * timeout 3h /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists -l STDOUT
    # export-metrics
    * * * * * timeout 3h /opt/wallarm/ruby/usr/share/wallarm-common/export-metrics -l STDOUT
    # sync-ip-lists-source
    */5 * * * * timeout 3h /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists-source -l STDOUT
---
# Source: kong-preview/templates/tarantool-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/component: my-release-kong-preview-wallarm-tarantool
  name: my-release-kong-preview-wallarm-tarantool-cron
  namespace: default
data:
  crontab: |
    # export-attacks
    * * * * * timeout 3h /opt/wallarm/ruby/usr/share/wallarm-common/export-attacks -l STDOUT
    # export-counters
    * * * * * timeout 11m /opt/wallarm/ruby/usr/share/wallarm-common/export-counters -l STDOUT
    # export-environment
    0 */1 * * * timeout 10m /opt/wallarm/ruby/usr/share/wallarm-common/export-environment -l STDOUT
    # brute-detect
    * * * * * timeout 6m /opt/wallarm/ruby/usr/share/wallarm-common/brute-detect -l STDOUT
    # sync-markers
    * * * * * timeout 1h /opt/wallarm/ruby/usr/share/wallarm-common/sync-markers -l STDOUT
---
# Source: kong-preview/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
  name: my-release-kong-preview
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.internal.knative.dev
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
---
# Source: kong-preview/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kong-preview
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kong-preview
subjects:
  - kind: ServiceAccount
    name: my-release-kong-preview
    namespace: default
---
# Source: kong-preview/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-kong-preview
  namespace: default
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<kong-ingress-controller-leader-nginx>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "kong-ingress-controller-leader-kong-kong"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  # Begin KIC 2.x leader permissions
  - apiGroups:
      - ""
      - coordination.k8s.io
    resources:
      - configmaps
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
    verbs:
      - get
---
# Source: kong-preview/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-kong-preview
  namespace: default
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-kong-preview
subjects:
  - kind: ServiceAccount
    name: my-release-kong-preview
    namespace: default
---
# Source: kong-preview/templates/service-kong-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kong-preview-proxy
  namespace: default
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    enable-metrics: "true"
spec:
  type: LoadBalancer
  ports:
  - name: kong-proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-tls
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong-preview
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "my-release"
---
# Source: kong-preview/templates/tarantool-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/component: controller
  name: my-release-kong-preview-wallarm-tarantool
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tarantool
      port: 3313
      protocol: TCP
  selector:
    app.kubernetes.io/name: kong-preview
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/component: my-release-kong-preview-wallarm-tarantool
---
# Source: kong-preview/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kong-preview
  namespace:  default
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kong-preview
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "my-release"

  template:
    metadata:
      annotations:
        kuma.io/gateway: "enabled"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app.kubernetes.io/name: kong-preview
        helm.sh/chart: kong-preview-4.2.3
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.7"
        app.kubernetes.io/component: app
        app: my-release-kong-preview
        version: "2.7"
    spec:
      serviceAccountName: my-release-kong-preview
      automountServiceAccountToken: true
      initContainers:
      - name: clear-stale-pid
        image: wallarm/kong-oss-preview:2.7-ubuntu-4.2
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {}
        resources:
          {}
        command:
        - "rm"
        - "-vrf"
        - "$KONG_PREFIX/pids"
        env:
         
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "127.0.0.1:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        volumeMounts:
        - name: my-release-kong-preview-prefix-dir
          mountPath: /kong_prefix/
        - name: my-release-kong-preview-tmp
          mountPath: /tmp
      
      - name: addnode
        image: "wallarm/ingress-ruby:4.2.1-1"
        imagePullPolicy: "IfNotPresent"
        command:
        - sh
        - -c
        - /opt/wallarm/ruby/usr/share/wallarm-common/synccloud --one-time && /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists --one-time -l STDOUT && /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists-source --one-time -l STDOUT || true
        env:
        - name: WALLARM_API_HOST
          value: api.wallarm.com
        - name: WALLARM_API_PORT
          value: "443"
        - name: WALLARM_API_USE_SSL
          value: "true"
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: my-release-kong-preview-secret
        - name: WALLARM_SYNCNODE_OWNER
          value: kong
        - name: WALLARM_SYNCNODE_GROUP
          value: kong
        volumeMounts:
        - mountPath: /etc/wallarm
          name: wallarm
        - mountPath: /var/lib/wallarm-acl
          name: wallarm-acl
        securityContext:
        
          {}
        resources:
          {}
      
      - name: exportenv
        image: "wallarm/ingress-ruby:4.2.1-1"
        imagePullPolicy: "IfNotPresent"
        command: ["sh", "-c", "timeout 10m /opt/wallarm/ruby/usr/share/wallarm-common/export-environment -l STDOUT || true"]
        env:
        - name: WALLARM_COMPONENT_NAME
          value: "wallarm-kong-ingress-controller-2.7"
        - name: WALLARM_COMPONENT_VERSION
          value: "4.2.3"
        volumeMounts:
        - mountPath: /etc/wallarm
          name: wallarm
        securityContext:
        
          {}
        resources:
          {}
      - name: chmod
        image: busybox:1.34.1
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {}
        command:
        - "chmod"
        - "-R"
        - "0777"
        - "/var/lib/wallarm-acl"
        volumeMounts:
        - mountPath: /var/lib/wallarm-acl
          name: wallarm-acl
      containers:
      - name: ingress-controller
        securityContext:
      
          {}
        args:
        
        ports:
        - name: cmetrics
          containerPort: 10255
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace  
        
        
        - name: CONTROLLER_ELECTION_ID
          value: "kong-ingress-controller-leader-kong"
        - name: CONTROLLER_INGRESS_CLASS
          value: "kong"
        - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
          value: "true"
        - name: CONTROLLER_KONG_ADMIN_URL
          value: "https://localhost:8444"
        - name: CONTROLLER_PUBLISH_SERVICE
          value: "default/my-release-kong-preview-proxy"
        image: kong/kubernetes-ingress-controller:2.1.1
        imagePullPolicy: IfNotPresent
      
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
      
      - name: "proxy"
        image: wallarm/kong-oss-preview:2.7-ubuntu-4.2
        imagePullPolicy: IfNotPresent
        securityContext:
        
          {}
        env:
        - name: KONG_NGINX_HTTP_UPSTREAM
          value: >-
            wallarm_tarantool {
                server my-release-kong-preview-wallarm-tarantool:3313 max_fails=0 fail_timeout=0 max_conns=16;
                keepalive 16;
                keepalive_requests 100;
            }
            wallarm_tarantool_upstream wallarm_tarantool
        - name: KONG_NGINX_PROXY_WALLARM_MODE
          value: "monitoring" 
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "127.0.0.1:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_KIC
          value: "on"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        lifecycle:
          preStop:
            exec:
              command:
              - kong
              - quit
              - --wait=15
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-tls
          containerPort: 8443
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        volumeMounts:
          - name: my-release-kong-preview-prefix-dir
            mountPath: /kong_prefix/
          - name: my-release-kong-preview-tmp
            mountPath: /tmp
          
          - name: wallarm
            mountPath: "/etc/wallarm"
          - name: wallarm-acl
            mountPath: "/var/lib/wallarm-acl"
          - name: wallarm-cache
            mountPath: "/var/lib/nginx/wallarm"
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
        
      - name: cron
        image: "wallarm/ingress-ruby:4.2.1-1"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/dumb-init", "--"]
        args: ["/bin/supercronic", "-json", "/opt/cron/crontab"]
        env:
        - name: WALLARM_COMPONENT_NAME
          value: "wallarm-kong-ingress-controller-2.7"
        - name: WALLARM_COMPONENT_VERSION
          value: "4.2.3"
        volumeMounts:
        - mountPath: /etc/wallarm
          name: wallarm
        - mountPath: /var/lib/wallarm-acl
          name: wallarm-acl
        - mountPath: /opt/cron/crontab
          name: wallarm-cron
          subPath: crontab
          readOnly: true
        securityContext:
        
          {}
        resources:
          {}
        
      - name: collectd
        image: "wallarm/ingress-collectd:4.2.1-1"
        imagePullPolicy: "IfNotPresent"
        volumeMounts:
          - name: wallarm
            mountPath: /etc/wallarm
        securityContext:
        
          {}
        resources:
          {}
        
      - name: synccloud
        image: "wallarm/ingress-ruby:4.2.1-1"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/dumb-init", "--"]
        args: ["/opt/wallarm/ruby/usr/share/wallarm-common/syncnode", "-p", "-r", "120", "-l", "STDOUT", "-L", "DEBUG"]
        env:
        - name: WALLARM_API_HOST
          value: api.wallarm.com
        - name: WALLARM_API_PORT
          value: "443"
        - name: WALLARM_API_USE_SSL
          value: "true"
        - name: WALLARM_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: my-release-kong-preview-secret
        - name: WALLARM_SYNCNODE_OWNER
          value: kong
        - name: WALLARM_SYNCNODE_GROUP
          value: kong
        - name: WALLARM_SYNCNODE_INTERVAL
          value: "120"
        volumeMounts:
        - mountPath: /etc/wallarm
          name: wallarm
        securityContext:
        
          {}
        resources:
          {} 
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      tolerations:
        []
      volumes:
        - name: my-release-kong-preview-prefix-dir
          emptyDir: {}
        - name: my-release-kong-preview-tmp
          emptyDir: {}
        
        - name: wallarm
          emptyDir: {}
        - name: wallarm-acl
          emptyDir: {}
        - name: wallarm-cache
          emptyDir: {}
        - name: wallarm-cron
          configMap:
            name: my-release-kong-preview-cron
---
# Source: kong-preview/templates/tarantool-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kong-preview
    helm.sh/chart: kong-preview-4.2.3
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.7"
    app.kubernetes.io/component: my-release-kong-preview-wallarm-tarantool
  name: my-release-kong-preview-wallarm-tarantool
  namespace: default
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kong-preview
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "my-release"
      app.kubernetes.io/component: my-release-kong-preview-wallarm-tarantool
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kong-preview
        helm.sh/chart: kong-preview-4.2.3
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "2.7"
        app.kubernetes.io/component: my-release-kong-preview-wallarm-tarantool
    spec:
      initContainers:
        - name: addnode
          image: "wallarm/ingress-ruby:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          command:
          - sh
          - -c
          - /opt/wallarm/ruby/usr/share/wallarm-common/synccloud --one-time && /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists --one-time -l STDOUT && /opt/wallarm/ruby/usr/share/wallarm-common/sync-ip-lists-source --one-time -l STDOUT || true
          env:
          - name: WALLARM_API_HOST
            value: api.wallarm.com
          - name: WALLARM_API_PORT
            value: "443"
          - name: WALLARM_API_USE_SSL
            value: "true"
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: my-release-kong-preview-secret
          - name: WALLARM_SYNCNODE_OWNER
            value: kong
          - name: WALLARM_SYNCNODE_GROUP
            value: kong
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          - mountPath: /var/lib/wallarm-acl
            name: wallarm-acl
          securityContext:
          
            {}
          resources:
            {}
        - name: exportenv
          image: "wallarm/ingress-ruby:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          command: ["sh", "-c", "timeout 10m /opt/wallarm/ruby/usr/share/wallarm-common/export-environment -l STDOUT || true"]
          env:
          - name: WALLARM_COMPONENT_NAME
            value: "wallarm-kong-ingress-controller-2.7"
          - name: WALLARM_COMPONENT_VERSION
            value: "4.2.3"
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          securityContext:
          
            {}
          resources:
            {}
      containers:
        - name: cron
          image: "wallarm/ingress-ruby:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          command: ["/bin/dumb-init", "--"]
          args: ["/bin/supercronic", "-json", "/opt/cron/crontab"]
          env:
          - name: WALLARM_COMPONENT_NAME
            value: "wallarm-kong-ingress-controller-2.7"
          - name: WALLARM_COMPONENT_VERSION
            value: "4.2.3"
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          - mountPath: /var/lib/wallarm-acl
            name: wallarm-acl
          - mountPath: /opt/cron/crontab
            name: wallarm-cron
            subPath: crontab
            readOnly: true
          securityContext:
          
            {}
          resources:
            {}
        - name: tarantool
          image: "wallarm/ingress-tarantool:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: SLAB_ALLOC_ARENA
              value: "0.2"
          securityContext:
            
            {}
          livenessProbe:
            tcpSocket:
              port: 3313
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: tarantool
              containerPort: 3313
              protocol: TCP
          resources:
            {}
        - name: heartbeat
          image: "wallarm/ingress-ruby:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          command: ["/opt/wallarm/ruby/usr/share/wallarm-common/synccloud"]
          env:
          - name: WALLARM_API_HOST
            value: api.wallarm.com
          - name: WALLARM_API_PORT
            value: "443"
          - name: WALLARM_API_USE_SSL
            value: "true"
          - name: WALLARM_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: token
                name: my-release-kong-preview-secret
          - name: WALLARM_SYNCNODE
            value: "no"
          securityContext:
          
            {}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
            {}
        - name: wallarm-appstructure
          image: "wallarm/ingress-python:4.2.1-1"
          imagePullPolicy: "IfNotPresent"
          securityContext:
          
            {}
          volumeMounts:
          - mountPath: /etc/wallarm
            name: wallarm
          resources:
            {}
      securityContext:
        {}
      volumes:
        - name: wallarm
          emptyDir: {}
        - name: wallarm-acl
          emptyDir: {}
        - name: wallarm-cron
          configMap:
            name: my-release-kong-preview-wallarm-tarantool-cron
---
# Source: kong-preview/templates/tests/test-jobs.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-test-ingress"
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: OnFailure
  containers:
    - name: "my-release-curl"
      image: curlimages/curl
      command:
        - curl
        - "http://my-release-kong-proxy.default.svc.cluster.local/httpbin"
---
# Source: kong-preview/templates/tests/test-jobs.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-test-ingress-v1beta1"
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: OnFailure
  containers:
    - name: "my-release-curl"
      image: curlimages/curl
      command:
        - curl
        - "http://my-release-kong-proxy.default.svc.cluster.local/httpbin-v1beta1"
---
# Source: kong-preview/templates/tests/test-jobs.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-test-httproute"
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: OnFailure
  containers:
    - name: "my-release-curl"
      image: curlimages/curl
      command:
        - curl
        - "http://my-release-kong-proxy.default.svc.cluster.local/httpbin-httproute"
