---
# Source: example-fruitapp-shared/templates/secret.yaml
kind: Secret
apiVersion: v1
stringData:
  database-name: "fruitapp"
  database-password: "fruitapp-preprod-password"
  database-user: "fruitapp-preprod"
metadata:
  labels:
    app.kubernetes.io/name: "fruitapp-0.0.1"
    app.startx.fr/scope: "startx"
    app.startx.fr/cluster: "localhost"
    app.startx.fr/environment: "preprod"
    app.startx.fr/component: "fruitapp"
    app.startx.fr/app: "fruitapp"
    app.startx.fr/version: "0.0.1"
    helm.sh/chart: "example-fruitapp-shared"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "fruitapp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "0.0.1"
    app.startx.fr/component: "fruitapp"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "localhost"
    app.kubernetes.io/instance: "startx-preprod-fruitapp-0.0.1"
    app: fruitapp
  annotations:
    openshift.io/generated-by: startx-helm-example-fruitapp-shared
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  namespace: "fruitapp-preprod"
  name: db
type: Opaque
---
# Source: example-fruitapp-shared/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "postgresql-preprod"
  labels:
    app.kubernetes.io/name: "fruitapp-0.0.1"
    app.startx.fr/scope: "startx"
    app.startx.fr/cluster: "localhost"
    app.startx.fr/environment: "preprod"
    app.startx.fr/component: "fruitapp"
    app.startx.fr/app: "fruitapp"
    app.startx.fr/version: "0.0.1"
    helm.sh/chart: "example-fruitapp-shared"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "fruitapp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "0.0.1"
    app.startx.fr/component: "fruitapp"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "localhost"
    app.kubernetes.io/instance: "startx-preprod-fruitapp-0.0.1"
    app: fruitapp
  namespace: "fruitapp-preprod"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
  storageClassName: "gp3-csi"
  volumeMode: Filesystem
---
# Source: example-fruitapp-shared/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  labels:
    app.kubernetes.io/name: "fruitapp"
    app.startx.fr/scope: "startx"
    app.startx.fr/cluster: "localhost"
    app.startx.fr/environment: "preprod"
    app.startx.fr/component: "fruitapp"
    app.startx.fr/app: "fruitapp"
    app.startx.fr/version: "0.0.1"
    helm.sh/chart: "example-fruitapp-shared"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "fruitapp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "0.0.1"
    app.startx.fr/component: "fruitapp"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "localhost"
    app.kubernetes.io/instance: "startx-preprod-fruitapp-0.0.1"
    app: fruitapp
  annotations:
    template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    openshift.io/generated-by: startx-helm-example-fruitapp-shared
  namespace: "fruitapp-preprod"
  name: db
spec:
  internalTrafficPolicy: Cluster
  ports:
  - name: postgresql
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: db
  sessionAffinity: None
  type: ClusterIP
---
# Source: example-fruitapp-shared/templates/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    app.kubernetes.io/name: "fruitapp"
    app.startx.fr/scope: "startx"
    app.startx.fr/cluster: "localhost"
    app.startx.fr/environment: "preprod"
    app.startx.fr/component: "fruitapp"
    app.startx.fr/app: "fruitapp"
    app.startx.fr/version: "0.0.1"
    helm.sh/chart: "example-fruitapp-shared"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "fruitapp"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "0.0.1"
    app.startx.fr/component: "fruitapp"
    app.kubernetes.io/component: "fruitapp"
    app.kubernetes.io/part-of: "localhost"
    app.kubernetes.io/instance: "startx-preprod-fruitapp-0.0.1"
    app.kubernetes.io/part-of: 'fruitapp'
    app.openshift.io/runtime: postgresql
    app.openshift.io/runtime-version: "latest"
    app: db
    kube-monkey/enabled: enabled
    kube-monkey/identifier: "fruitapp"
  annotations:
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"postgresql:latest","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image","pause":"false"}]'
    openshift.io/generated-by: startx-helm-example-fruitapp-shared
  namespace: "fruitapp-preprod"
  name: db
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: db
        startx.fr/app: "fruitapp"
        kube-monkey/enabled: enabled
        kube-monkey/identifier: "fruitapp"
    spec:
      containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: db
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: db
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: db
          image: openshift/postgresql:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/pgsql/data
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: "256Mi"
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: "postgresql-preprod"
