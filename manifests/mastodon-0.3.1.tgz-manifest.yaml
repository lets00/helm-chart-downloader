---
# Source: mastodon/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: my-release-minio
---
# Source: mastodon/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: mastodon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mastodon
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: mastodon/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  root-user: "YWRtaW4="
  root-password: "YnRVOGp0T3pveQ=="
---
# Source: mastodon/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "bHluMGN0empZUg=="
---
# Source: mastodon/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: mastodon/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: mastodon/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: mastodon/templates/environment-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mastodon-environment
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
data:
  LOCAL_DOMAIN: "example.social"
  DB_HOST: 
  DB_PORT: "5432"
  DB_NAME: mastodon
  DB_USER: mastodon
  DB_PASS: 
  LOCAL_HTTPS: "true"
  REDIS_HOST: my-release-redis-master
  REDIS_PORT: "6379"
  SMTP_SERVER: "smtp.eu.mailgun.org"
  SMTP_PORT: "587"
  SMTP_LOGIN: "postmaster@localhost"
  SMTP_PASSWORD: "xxxxxxxxxxxxxxxxxxx-yyyyyyyy-zzzzzzz"
  SMTP_FROM_ADDRESS: "noreply@localhost"
  SMTP_DELIVERY_METHOD: "smtp"
  SMTP_AUTH_METHOD: "plain"
  SMTP_OPENSSL_VERIFY_MODE: "peer"
  SMTP_ENABLE_STARTTLS: "auto"
  STREAMING_CLUSTER_NUM: "1"
  NODE_ENV: "production"
  S3_BUCKET: mastodon
  S3_ENABLED: "true"
  S3_ENDPOINT: http://mastodon-minio:9000
  S3_HOSTNAME: 
  S3_PROTOCOL: https
  S3_ALIAS_HOST: example.social/s3/mastodon
  AWS_ACCESS_KEY_ID: "xxxxx"
  AWS_SECRET_ACCESS_KEY: "yyyyyyyyyyy"
---
# Source: mastodon/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: mastodon/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-release
---
# Source: mastodon/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: mastodon/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: mastodon/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: replica
---
# Source: mastodon/templates/service-streaming.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mastodon-streaming
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: streaming
      protocol: TCP
      name: streaming
  selector:
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: streaming
---
# Source: mastodon/templates/service-web.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mastodon-web
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: web
---
# Source: mastodon/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-12.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-12.4.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: e95bdabd5962e0f956243b2ebd5969aff617eb6b973db92575e78c1cfa5b982c
    spec:
      
      serviceAccountName: my-release-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: my-release
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.5.4-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: my-release-minio
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-sidekiq-default
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: sidekiq-default
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: sidekiq-default
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "1"
            - -q
            - "default"
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-sidekiq-push-pull
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: sidekiq-push-pull
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: sidekiq-push-pull
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "2"
            - -q
            - "push"
            - -q
            - "pull"
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-sidekiq-mailers
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: sidekiq-mailers
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: sidekiq-mailers
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "1"
            - -q
            - "mailers"
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-sidekiq-scheduler
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: sidekiq-scheduler
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: sidekiq-scheduler
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "1"
            - -q
            - "scheduler"
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/templates/deployment-sidekiq.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-sidekiq-ingress
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: sidekiq-ingress
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: sidekiq-ingress
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command:
            - bundle
            - exec
            - sidekiq
            - -c
            - "1"
            - -q
            - "ingress"
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/templates/deployment-streaming.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-streaming
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: streaming
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: streaming
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command: [node, ./streaming]
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: "PORT"
              value: "4000"
          ports:
            - name: streaming
              containerPort: 4000
              protocol: TCP
---
# Source: mastodon/templates/deployment-web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mastodon-web
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mastodon
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: web
      app.kubernetes.io/part-of: rails
  template:
    metadata:
      annotations:
        checksum/environment: a8e51e8f3c4f55209b3f248707c158dcb7d13436fd6a0cd93671851d1668b5e6
      labels:
        app.kubernetes.io/name: mastodon
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: rails
    spec:
      serviceAccountName: my-release-mastodon
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - kube-apiserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      containers:
        - name: mastodon
          securityContext:
            {}
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command: [bundle, exec, puma, -C, config/puma.rb]
          resources:
            {}
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
---
# Source: mastodon/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 932a13a309b1e514af71d3ca18914bb16241e256fddd9588c3e47db5056650df
        checksum/health: d1753ed3264869d54283e5068e1ff1c55e06b8fc99f051daf1fd74dd69c02d8d
        checksum/scripts: a3acb9794a0b7d1c1ddb08ad702724cec2167dca810aed76448257c7fa82d407
        checksum/secret: 048587b8150afff4fa101b0c349505f9a4572fd4fa40a250bd00e8d8ac4cbd93
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: mastodon/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-replicas
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: replica
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 932a13a309b1e514af71d3ca18914bb16241e256fddd9588c3e47db5056650df
        checksum/health: d1753ed3264869d54283e5068e1ff1c55e06b8fc99f051daf1fd74dd69c02d8d
        checksum/scripts: a3acb9794a0b7d1c1ddb08ad702724cec2167dca810aed76448257c7fa82d407
        checksum/secret: 9b231af438d6a9a74ec3afa131d22fa124c616b8b2e9044d11a3664c49d03a29
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: my-release-redis-master-0.my-release-redis-headless.default.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: mastodon/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-mastodon-media-remove
spec:
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: my-release-mastodon-media-remove
              image: "ghcr.io/mastodon/mastodon:v4.1.2"
              imagePullPolicy: IfNotPresent
              command:
                - tootctl
                - media
                - remove
              envFrom:
                - configMapRef:
                    name: my-release-mastodon-environment
              env:
                - name: "REDIS_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: my-release-redis
                      key: redis-password
          restartPolicy: OnFailure
---
# Source: mastodon/templates/cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-mastodon-preview-card-remove
spec:
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: my-release-mastodon-preview-card-remove
              image: "ghcr.io/mastodon/mastodon:v4.1.2"
              imagePullPolicy: IfNotPresent
              command:
                - tootctl
                - preview_cards
                - remove
              envFrom:
                - configMapRef:
                    name: my-release-mastodon-environment
              env:
                - name: "REDIS_PASSWORD"
                  valueFrom:
                    secretKeyRef:
                      name: my-release-redis
                      key: redis-password
          restartPolicy: OnFailure
---
# Source: mastodon/templates/ingress-s3.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-mastodon-s3
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    
    - host: "example.social"
      http:
        paths:
          - path: /s3/(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-mastodon-minio
                port:
                  number: 9000
---
# Source: mastodon/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-mastodon-test-connection"
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-mastodon:3000']
  restartPolicy: Never
---
# Source: mastodon/templates/job-db-migrations.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-mastodon-db-migrate
  labels:
    helm.sh/chart: mastodon-0.3.1
    app.kubernetes.io/name: mastodon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.1.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
spec:
  template:
    metadata:
      name: my-release-mastodon-db-migrate
    spec:
      restartPolicy: Never
      containers:
        - name: my-release-mastodon-db-migrate
          image: "ghcr.io/mastodon/mastodon:v4.1.2"
          imagePullPolicy: IfNotPresent
          command: [bundle, exec, rake, db:migrate]
          envFrom:
            - configMapRef:
                name: my-release-mastodon-environment
          env:
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
