---
# Source: csi-vault/templates/controller.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: my-release-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
---
# Source: csi-vault/templates/node.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
---
# Source: csi-vault/templates/apiserver-cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-csi-vault-apiserver-cert
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR5RENDQXJDZ0F3SUJBZ0lRYXZnZVlYNWZNSDIySkltbG5nRFk0ekFOQmdrcWhraUc5dzBCQVFzRkFEQU4KTVFzd0NRWURWUVFERXdKallUQWVGdzB5TkRBMk1UWXdNREV3TUROYUZ3MHpOREEyTVRRd01ERXdNRE5hTUI4eApIVEFiQmdOVkJBTVRGRzE1TFhKbGJHVmhjMlV0WTNOcExYWmhkV3gwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBekpPdkV2dlYzd0dUdVhCM010QWNRNDVHQWdBQmtZL0tYc0wvMFphUUM4OVkKMjZVbks2eHVYaVl0TnFNQThMVEdMK0FZVUtoMzhpaGd5NldBcGVXczR3Um5pRU03SWthUVd3UDQ5Q2UxOHVZZwo3VmUzcDZqa29KaTFESlcrTmkvZzVjTXVleldzRktraEZWUCsvYitMMlZFL1pCMTdYZ0hpY3F5eUtmd1lQQ0JnCndWakpLaHFWZGY0NHM0MTdsQm1PTUF4QzRvR2xTSnNGbFBodEMyTitlaUNCRk94NUFGay9NQ09nZmxnRDFLTE4KYVRKLzNMeHhQZVR3RFVzOTZqdE5QblF5dWdIT1d4YnliUmt1b1ExRlpSMTNiOVBlS1BBQ2l4Wm1KQVdPZXpvagpER2JxQXZibnNLQ3l2L1RweThvVmRhdERaRzN0S3BkczVRbDJucUZFT1FJREFRQUJvNElCRURDQ0FRd3dEZ1lEClZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlYKSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZOaC9kNGFHZVhkQ0h0Uy9EZzJQdWRpcUxyOXdNSUdyQmdOVgpIUkVFZ2FNd2dhQ0NKMjE1TFhKbGJHVmhjMlV0WTNOcExYWmhkV3gwTFdOdmJuUnliMnhzWlhJdVpHVm1ZWFZzCmRJSXJiWGt0Y21Wc1pXRnpaUzFqYzJrdGRtRjFiSFF0WTI5dWRISnZiR3hsY2k1a1pXWmhkV3gwTG5OMlk0SWgKYlhrdGNtVnNaV0Z6WlMxamMya3RkbUYxYkhRdGJtOWtaUzVrWldaaGRXeDBnaVZ0ZVMxeVpXeGxZWE5sTFdOegphUzEyWVhWc2RDMXViMlJsTG1SbFptRjFiSFF1YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2F4ajBpCmxBVk5GU2lRc1IxZ1pSYTVBV0lzZHh1UFk3UGR2T3NZbDdZdThrWGlnRmFtVWtkTU4wSEVydGZ4YXc4ZFhBSncKM1Y1UnZweEpGeTM2ZlFJYzIvZTB5UzYzWVBmZEJ0SzZ2R2dPS3N5VElXczVMOVNFekxvdDN5MVpvQ0MxK1RnMApuZHd4b2tqTGtDV3d0K1lmUU5raGY3SktQa2NNcklBZ2Q4Q3oyV3o0YnpTYnR1SExJQmxNU3dTMzJQdkVWZ0kwCmFFdm1KaTlXbEFHckZoNWVOVERvWTRTdnNPSlgxbmRRaHpPc2h4NHA1czNEdU14TmE4U24va3BvNFBZb1VQeXUKN3VkeC9MM21JN0hUSUlpaDFJS3R0Ui9VT1pOSnNMcnNvV3R3MGFSU1dWRTdXQ3NlZ3FRZDBQZFlUSnJVOWFhNQpCaDZrY3krRm01aGlmN3Y5Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBekpPdkV2dlYzd0dUdVhCM010QWNRNDVHQWdBQmtZL0tYc0wvMFphUUM4OVkyNlVuCks2eHVYaVl0TnFNQThMVEdMK0FZVUtoMzhpaGd5NldBcGVXczR3Um5pRU03SWthUVd3UDQ5Q2UxOHVZZzdWZTMKcDZqa29KaTFESlcrTmkvZzVjTXVleldzRktraEZWUCsvYitMMlZFL1pCMTdYZ0hpY3F5eUtmd1lQQ0Jnd1ZqSgpLaHFWZGY0NHM0MTdsQm1PTUF4QzRvR2xTSnNGbFBodEMyTitlaUNCRk94NUFGay9NQ09nZmxnRDFLTE5hVEovCjNMeHhQZVR3RFVzOTZqdE5QblF5dWdIT1d4YnliUmt1b1ExRlpSMTNiOVBlS1BBQ2l4Wm1KQVdPZXpvakRHYnEKQXZibnNLQ3l2L1RweThvVmRhdERaRzN0S3BkczVRbDJucUZFT1FJREFRQUJBb0lCQVFERlRiNHhlZTlJV0hZSQpDRjcrQTlidWxMNFNXYjBwalZ1cFR6cDVBbFJFLzZKOG5Ha041d3kvQXVUaWFBMlZHVlIzZ2hNUlg1bm5WR2dlCm9LMVYweENPRm9aZjFpK25IQlZIb3FvdG1Fc1VURHovaTNVV1gzNjVJTzZraDV0ZkdZZzNNS3FZckNnZCtReHUKVEllR1pZSFVnMWEzRVBRVnM0MlorZE1QU1JKNmtTbm9ScXNsTUdiVHJsTjhNS1kvOFRqT3VXcVM5WmI5UjdkTgpsWklvNHZKQ2tFcnFjTU5ZRC9tVUZzendQb1YvOHU2WlBXM0hMeDZ0TWV5cVpGR3diVnplZkRkSjk4a0lZT1dLCkxnM0VqU3VOUVpUWGFVeXhmSlJWZkZvalFicUJGc1dvVmpoeFNLOWs3YmlTWUFlOVNVVHJ1TFR6SmlRU05RdEcKbTExWVFrVzlBb0dCQU8wN2FEdUNOcTNIYWZpSHJkTmRRTjh5MHVEUngwT0RHYlgrY1kwb1hUL1UrZTU2TjlncgovbmIvYkN5dzIyaDVSczRqY2FaK2JpeG14cFlVb2tBRUg1VTAvQ3VqZ09lZmlwMjN3NXBqT1JuKzNHYXR4RnhMCmRUaEIvQWFGNWVxL2IxaHJoVGxkMDBpT1ZnRUllYTVRVXRvcFRoZC85MStSTDdWV1MzZ21DNDBMQW9HQkFOekMKNjhPcVpTVjFoZ2FYaE5lU0ZrbXh1MXM0RVJ2VlhOK0JpeG1WZVo4b3NMajI5a1F5emJwSkoyVXhpRlJDRGwxMAphMSs2Q2UwNXRyeDBUdXBWWE5JQzdXNXBVa2FNRW5zKzJ4d2NVRkxPVmRPSkZnZ2VFeTdpUHUyTnpVaTdEOTliCldrTEhHWFB4d1ArQkVacGprK1hqVnhLOXlxUmthNUFQeFRVbFlCWkxBb0dCQUlTVVdOSTVHWG5SSW1ZazNYNXMKZFY3SHRwYXlabHhTbmtIWnEzZ3FBTU0xc1dBWHFiSUVGRGhJMHhtKzFUL3oxeUJKS3JEVG81cm83VDdlMVRaVgpsNWo1Zlp5ZHllS29oUDFUdjlzK2JLRWNqK3hLWEowQUJzaWtCOGRWZVlMUjdkWktjSy80d2FXZzltdXBZdWVLCk9HTjRCZzZZRTVXelBDaHB5OCtmNDRDMUFvR0FPYzJ2L2VPMzZEOEZnT1JibkRaY0w1K2g5eGlQSWtLVHR0SXMKb2Q1Sm9pcjlXdkVQT253eThmd0ZuTEdEaU14akJvVmRPQXQyWGU4bXNlR2lhQ2xCekp1SG44bGtDYVRUa2dHNwpUWGo4YnpJbnR1UEdLUW4yNitmQm9tSG14b3gwYzM5dit0dzNCZXpmSkFlZm5GVkdmSU15WVczZ2lYcmh6eTdSCjdFQ0ZFRkVDZ1lBZzRWeERmRHRpV2t3S21WeHZ1elJSUm5MSWV3VXNHdkJEVEc4dStLVWJBdEJmVjRZdUU5R2wKc3pVZFBaKzFKYk9vZHB4NjhBNWxSQW1aU2Iyd1FoeVdNQ3dkZmExWW1UZ1NoUGtNb01RS0lFTm9YT3NwWHJxQQp6S20zL3M2cDg1Vy95dGtBbGMwbVViVTNYZTRvcWppejY5TjRhZmZ2dlhiVzh6YWhsR3N6WkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["get", "list"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csidrivers", "csinodes"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
# Source: csi-vault/templates/controller.yaml
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
---
# Source: csi-vault/templates/controller.yaml
# Provisioner must be able to work with PVCs, storageClasses, nodes and csiNodes
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["create", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "patch", "update", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["get", "list", "watch"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-controller
  namespace: default
roleRef:
    kind: ClusterRole
    name: my-release-csi-vault-controller
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-controller
  namespace: default
roleRef:
    kind: ClusterRole
    name: my-release-csi-vault-attacher
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
  - kind: ServiceAccount
    name: my-release-csi-vault-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-node
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-node
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-node
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-node-registrar
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-release-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: controller
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-release-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: node
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: my-release-csi-vault-node
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: node
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: node
      annotations:
        checksum/apiserver-cert.yaml: ae22ba04187241d0e068ff5bfe3a2c381527f08916b90eab8a75e4b47c9d2658
    spec:
      serviceAccount: my-release-csi-vault-node
      containers:
      - name: node-driver-registrar
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.1.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/secrets.csi.kubevault.com/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.4.0-rc.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - "--node=$(NODE_NAME)"
        - "--v=3"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: kubelet-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: kubelet-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/secrets.csi.kubevault.com/
          type: DirectoryOrCreate
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-release-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/controller.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: my-release-csi-vault-controller
  namespace: default
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  serviceName: my-release-csi-vault-controller
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: controller
      annotations:
        checksum/apiserver-cert.yaml: 6d842d622ae2626adf051ee6e573c3bea183db288be352f0b9e176bc24c27180
    spec:
      serviceAccount: my-release-csi-vault-controller
      containers:
      - name: csi-provisioner
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-provisioner:v2.2.0
        args:
        - --csi-address=/csi/csi.sock
        - --v=3
        imagePullPolicy: IfNotPresent
        resources:
                        null
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-attacher
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-attacher:v3.1.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.4.0-rc.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - --node=$(NODE_NAME)
        - --v=3
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            port: 8443
            path: /healthz
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: serving-cert
          mountPath: /var/serving-cert
      volumes:
      - name: socket-dir
        emptyDir: {}
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-release-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: secrets.csi.kubevault.com
spec:
  attachRequired: false
  podInfoOnMount: true
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:appcatalog:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:appcatalog:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
