---
# Source: polaris/templates/dashboard.pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-polaris-dashboard
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
    component: dashboard
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: polaris
      app.kubernetes.io/name: polaris
      app.kubernetes.io/instance: my-release
      component: dashboard
---
# Source: polaris/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-polaris
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
---
# Source: polaris/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-polaris
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
rules:
  # required by controller-runtime code doing a cluster wide lookup
  # when it seems namespace would suffice
  - apiGroups:
      - ''
    resources:
      - 'nodes'
    verbs:
      - 'get'
      - 'list'
  - apiGroups:
      - 'monitoring.coreos.com'
    resources:
      - 'prometheuses'
      - 'alertmanagers'
    verbs:
      - 'get'
      - 'list'
  - apiGroups:
      - 'rbac.authorization.k8s.io'
    resources:
      - 'clusterroles'
      - 'clusterrolebindings'
      - 'roles'
      - 'rolebindings'
    verbs:
      - 'get'
      - 'list'
---
# Source: polaris/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-polaris-view
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
  - kind: ServiceAccount
    name: my-release-polaris
    namespace: default
---
# Source: polaris/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-polaris
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-polaris
subjects:
  - kind: ServiceAccount
    name: my-release-polaris
    namespace: default
---
# Source: polaris/templates/dashboard.service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-polaris-dashboard
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
  annotations:
spec:
  ports:
  - name: http-dashboard
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: polaris
    app.kubernetes.io/name: polaris
    app.kubernetes.io/instance: my-release
    component: dashboard
  type: ClusterIP
---
# Source: polaris/templates/dashboard.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-polaris-dashboard
  labels:
    app: polaris
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: polaris
    app.kubernetes.io/part-of: polaris 
    app.kubernetes.io/version: "5.17.1"
    helm.sh/chart: polaris-5.17.1
    component: dashboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: polaris
      app.kubernetes.io/name: polaris
      app.kubernetes.io/instance: my-release
      component: dashboard
  template:
    metadata:
      labels:
        app: polaris
        app.kubernetes.io/name: polaris
        app.kubernetes.io/instance: my-release
        component: dashboard
    spec:
      containers:
      - command:
        - polaris
        - dashboard
        - --port
        - "8080"
        - --log-level
        - "Info"
        image: 'quay.io/fairwinds/polaris:8.5'
        imagePullPolicy: 'Always'
        name: dashboard
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 20
        resources:
          limits: {}
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
      serviceAccountName: my-release-polaris
      nodeSelector:
      tolerations:
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            component: dashboard
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            component: dashboard
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
