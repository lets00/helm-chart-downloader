---
# Source: netchecks/templates/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-release-netchecks
  labels:
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: netchecks
      app.kubernetes.io/instance: my-release
  policyTypes:
    - Egress

  egress:
    # Allow operator to talk to anything. Would be better to restrict to K8s API
    - {}
---
# Source: netchecks/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netcheck-operator
  labels:
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
---
# Source: netchecks/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-netchecks
  labels: 
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
data:
  config.json: |-
    {
      "probe": {
        "image": {
          "pullPolicy":"IfNotPresent",
          "repository":"ghcr.io/hardbyte/netchecks",
          "tag":"0.5.4"
        },
        "imagePullSecrets": [],
        "podAnnotations": {}
        }
    }
---
# Source: netchecks/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-netchecks
rules:
  # Kopf Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Kopf Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Kopf Framework: admission webhook configuration management.
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]

  # This could be restricted to our operator namespace
  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: Access to our NetworkAssertions cluster-wide
  # Note we don't create or delete them - that's up to the user.
  - apiGroups: [netchecks.io]
    resources: [networkassertions]
    verbs: [list, get, watch, patch, update]

  - apiGroups: [wgpolicyk8s.io]
    resources: [policyreports]
    verbs: [list, get, patch, create, update, watch]

  # Application: other resources we produce and manipulate
  # The operator can create and delete CronJobs & Jobs
  - apiGroups: [batch, extensions]
    resources: [jobs, cronjobs]
    verbs: [create, list, get, update, delete]

  # We directly create, update and delete config maps for probes.
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [list, get, patch, create, update, delete]

  # TODO: see if we can restrict this to our operator namespace
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "patch"]

  # We need to watch our probe Pod's logs
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]

  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["get", "patch"]
---
# Source: netchecks/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-netchecks
  labels:
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-netchecks
subjects:
  - kind: ServiceAccount
    name: netcheck-operator
    namespace: 'default'
---
# Source: netchecks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-netchecks
  labels:
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
---
# Source: netchecks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-netchecks
  labels:
    helm.sh/chart: netchecks-0.1.17
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.4"
    app.kubernetes.io/managed-by: Helm
spec:
  # Please note that only one replica is required for the operator
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: netchecks
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: netchecks
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: netcheck-operator
      securityContext:
        {}
      containers:
        - name: netchecks
          securityContext:
            {}
          image: "ghcr.io/hardbyte/netchecks-operator:0.5.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          resources:
            {}
          env:
            - name: JSON_CONFIG
              value: /var/config/config.json
          volumeMounts:
            - mountPath: /var/config
              name: config-file
              readOnly: true
      volumes:
        - name: config-file
          configMap:
            name: my-release-netchecks
