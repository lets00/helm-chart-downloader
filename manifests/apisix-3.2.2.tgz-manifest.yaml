---
# Source: apisix/charts/etcd/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 2379
        - port: 2380
---
# Source: apisix/templates/control-plane/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-control-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9180
        - port: 9280
        - port: 9090
        - port: 9099
---
# Source: apisix/templates/dashboard/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: apisix/templates/data-plane/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-data-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9080
        - port: 9443
        - port: 9090
        - port: 9099
---
# Source: apisix/templates/ingress-controller/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: apisix/charts/etcd/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  minAvailable: 51%
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
---
# Source: apisix/templates/control-plane/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-control-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
---
# Source: apisix/templates/dashboard/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
---
# Source: apisix/templates/data-plane/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-data-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
---
# Source: apisix/templates/ingress-controller/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
---
# Source: apisix/charts/etcd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
---
# Source: apisix/templates/control-plane/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-control-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/dashboard/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/data-plane/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-data-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/ingress-controller/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/charts/etcd/templates/token-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-etcd-jwt-token
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
type: Opaque
data:
  jwt-token.pem: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM1h2eFpNV2pDRlUwRFRsZFk1bDdzeHIrUXRKSThEdnVzQ0xhZHpjVUtBNzBqVzNyCjVMYnJmSHFpNkhhL3NQZU02MkR0UkptakRMR1lsNXNZZFZiMVhNUTRBcndic0Q0NFhkVk4vQ0VkRDhldWtoZXUKcXZlT2NlYkhVYTYwMXRrMHZPdkhxVEJHWTNJQ3JUS1FUM0RMejMvazIrczJFRGNkZWpYZW9TSG1FVmZJZGk0NApwUHhSbjJHdlk5MnJNekxsRU9rZ290WkFYUTcxb09rYVZCSjdCU2dHYVBwMTZvMmNlQkRVMkU5c29lS3I0RllYCjgrTFRFQ0poWndVUU9RZEl1MzNSdmkzalkxN3Bqci9HdDhZR0dWVnlGYWYzOVRkSFZYTEhFMUxnVlZIWFQ3VngKWFJza3lrQUFBUktYWkJPWGlFTU8zeG1WaVZidnpENEhDRkVtb2p3OGNIZ3JkalRNcEoweUFsdlNzN1dIOWFWaQo4ZTVvM296V3ZxMkRqb2tqZFhRU08xa0FCYmliMXhzdzJuL2Urc0VabFBGR1A4dURheWoxTXowY3FZRDlLVURZCkQ0Yzh6SjVHa3M3Yzg1VWQ4MEdOQ3Z4bmVqMktHajdpR2wrM1FDQjZDRmpuWG5mRnBha21UNU1WbUE2dEVIUWQKSlJDRko1RmVuRVV1Sy95MGh1SHhDMFE0aFdCTzRMK2ROR2pxdG9XekNYaExZOThxeVVEQmRGVTNrcDB0QTBJawpRQm9USDM2TmlxK0M5SDBUNXkwbkx6SitoSTRCQ2NKejl2TE1ldmdSSnR5UmRLb3dxRERZK01VTCs5VWx1YnJvCnEwMmpYcnlxYyt4bFIwNklabUtNZGNqVC83WVNTRHhkU3luS21PS3NJYVR5cnZDQVJJcllYTEZBSU8wQ0F3RUEKQVFLQ0FnRUFqeDNEd2dZamJ3TC9lM3dSNklZSTlKY0FyVlVNWkkrVmtLTTAzOHZyYm1jYmh6ZjhNZkl4QUdLTwpXZ0JCcGF5UWxwZ3ZPU0M5eHpvTERBdmdKaEptd2ViWStvdHFxTnZMdUhaWXlnN3JwSUszUHhlbWVqczFCRXpICmh2U0pUanRVWks5R2VRRUV1c1cxRFEyYlNubnNlTXgvcWN1M1I0c1Z0UjZTR1RTNllZS0R1am5yeUZCeXZiWjEKaXVaMTljTnhXUmdMU3ExL01hSzAvYUVpcmlpeTdZWUxmbEk1VjdMaDVJT2J4WnFzNjM1NDZhRTRJUlAwcG54UQp6Q3p0YXF4V1J6RHFFeVc3eFQ1VFZUWit4Y2xqcjRNVEVRTlVxbE5wK01FTittS1hLd3FUUXFKUCtvWExwQlR1CjY4S0RxTnN3RTVDaFQzQk12RTQ4N1pFM0loeXVCUHVBc3ZBdWtHakZiQURybU0yUExkaFZXSXJUVEExVGRKdjIKWUVCWTM1cXhobE00N2JPZ2F1WVBLRGZsNG93bEZBb1Q4ZnpzbTVVV1pKd2dGMFNvZDE0QkU1bkVnZHZFeHRpRwppMEJuS0w4NzdlQU8xcm5saU1pWnZwNkZhYmxCTXIrWE5oL1R3SkZMY1V0RTdSQk5WTnZaMzh2UjR6Tllkb0VJClNBMXUrQVdmTXNtYllFbzdrVnV6L2U0Yld5cTFBN2s0aE5SSWJ2SFVsSS8zYVZPZC81NWl5QWhWRWpJZHZBN0UKTk5rMDVTaVFETDdTQmgwWFFhN0ZjWjAzUEE0ajVGQ1ovdGZYZG92SHBZU3o1OGQvVW5TTmtpQmU4bm0wUWJWMApuejFWcWpOVFluM2xnRjMvSlpEWk5OQ2JDU0Z6K3hiRnh2ejJpc0llRGVYeXgvc2hCQUVDZ2dFQkFPd01jQXhRCnpMWXJJTkxPMjVnaTF4aXRWR2lvYnBJT0RIRXg4SWUrUDZ0TmFKajBXWmJsS2UxRGNhc0RVdHpkVmVqbVhHTTkKZ2dmN1hBbFB0ZDFGZjdUSkpEdUc3dGowZUhhTVdUeVFyVnZETSt3aWZuZnl0dUFFWXlqTHFnWUQvMExZYnZ0SApObHR2cG1nQXN4ODZDNm5zUW51Y25MVE91RlhSeFQ1RTIrT3pZVjA1bTY3WlVkbUhLaG5lU2lwbSt2Zy9IOXdZClRvbjNyNVNVMHBrRnBwTkRoaDBYdE5kQXVJdUx1aUkyL21LUWduV3lBSUFEMFNuKzVkc0V0cGp2OTJrRzV3b1YKNW1zU21vYlo4THZQTTFZaDhNdzdxY0JHY3ZlYTZ3anRRQ1QwK1d2Nzk2Q0pnNWRLcUdYWFcvTmZIdkgvZlQrRgpiK0hIS0hxTzNEc1QvNjBDZ2dFQkFQQTBYUk4zQ05HUExtVU1nSDNhZnVwMFZ6SDRHNTlLSmdyWUtkOU5PajQ4CncyUUlJMDczNE04VXMzTlZNZ1p3ZG1ZUlYrK2NnWDdZdlU0d21ybWY2Uk5RenhyaXBoVmZaOGd1ZGw0c2x6MGYKWUpnYUczNHE1ajY1b3JsLy9GY0Z6bEZHYzdqcmt0Wm4wNlAxcUxSbnc4S09yaW01UGZpbGtjY1VYWnNZazhCYwo5VE5pVlRlSElEd2FMd0Y2cTI5Skp3dkZVUFFFRG9ZOW9PbE5sUVdpdEhncFBRd2N0SjFnN3dLc3JWWWhWMENkClZOQUlYVE9xL3k5QVp5aU1QSGxMNWlvTVFuaVFzd0Z4a0xpRktJT2xJb1Z5V0xqOUJ0SFRid0wvVGlxTjZnc0EKaEh1dHZOWW5BN21kbHFOdU0rZ2R4K0c1dk1jaG5IQmlORmRHK2JFTHprRUNnZ0VCQUxSbDFRUTBoQjc4MnZzQgpTR1greW5CN2x6VGM5SlArMUpkMTJTT0V6RmY0c3VXaWFRMmZXZW1RVDhDb3E1MU1NcW5wMDlXc1hrSUhZaEZqCnI5UEpsNDNzNHhuelIzcmJhMnorV2Z5bGZUZlIrVTZRRmlOSmhXV3pOSzBxNldmcmlodm1HUHRGTTAreUJuVVoKZzh0cnF4cFVDNE00NzdKbkFnM2tZVi96ZERHVEYrZ05iT08yQm8yK2RQaU1JQlpEMmEzN1lEZnZBNmNCZWxpTgpYRjNDS2NvR0l1cjlBU0k0dmxFM21pc242RVlmdHZTSDgwWGlwT241ZW1WbU5yNnZObUEzL0Q2QytqUCtaY2FGCnJTdDdjUHAwdWZqNzZBR2dWYURSN3FwRjEyM25JdS9hQXlmWHNJL2hhTTFjUjFPNThJWjJBWnlZT0NkTzg2cW0KbjcwdXpZa0NnZ0VBSGhPUWEvV0ZweWUwZVhhZFNDVHBxMVd4N1ZIUnM1cEhOU2huNWN2M3RQOUt2K1c4OWhCWApsOVpSdWVrN0FFOW9vOU1jSGFhTkdHTHZJVEU0em5GVmI5TzRldmRTTUc3bndjci9pejh1R0xzckR5Q0Z2TUNHClgraENsZE9PdHg3RS9LeERwUzNxRHVxbE4yeDFHVkc4MDBtbVNSY215VkdCOVZsNWR3Z1d5QWxic25sbmpqSmYKT09kV1oyc0N1RWFDbXhpejBEb0p6NGs3OHJxQ0pGaUJIR0tkZ0R5LzZNelFZSmRhaE9SYjFuMWN0MGUwMDlsZgpabjA3N1huUndLWmVSWG1QZ1NVdEpNc2hnZGs2ZjNGWDV6bXdIa21nWnZtQWR2R2N5ZnRIQ09XaHNSTEtDRTZPClN0bU9tUndkWjcwQzRDS3Zub2Q0M1NHT3lEYmM0T3hIZ1FLQ0FRQWxlZVY4OGdydjcxdmd5a2ZERmx2dXBtRnIKUDNKSGFwaEhJeVZVUTRZSHlaYUc1ejJpV0VmM3pBNk1SSnNOQ3lMT2owWjliTGRmRStWWi9XbitTTFFlb0RKSwpaUFFuRjFTbTJ3MWNrSm5RN1plVm5QbjBwU3JLdjU1YTBEZllRTXk3T0NWUGt1YWVVWmFVdHUrNUlkK2RkOHU0Cm00Q3JDekJZRi9EVmFKTE1rT3JBVWRtWktER0p6ZHZqRjZjQmFycjNyZTBJeFpwL0RXTk9JUG8vc1VYeDZBNlcKSDFwZnhtNTZsclhjMFhFZ09qUTdVWGx6eTZjMHRHQzBlWTVtQVQ5VVdlUFdISDN1SDdhMkU2Y1ZVT0tYQ0oxeQo1WmlEcVNlYW9tb0tseUlSbXEyaDdiU0RhUHZXMCtoUlhwYjNjZEF2OE4yeFRLRmQ0QVhyd0xEdlB2VEoKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: apisix/templates/control-plane/api-token-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-control-plane-api-token
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
type: Opaque
data:
  admin-token: "OEp4bFhHeTd1MVVkZGs3WmRqMWpZT2V0eG9wWnVibDc="
  viewer-token: "Snl6b0VnVW1VZEltZno2NU1GZDZ0NFM5WHdkeDFqWEE="
---
# Source: apisix/templates/dashboard/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
type: Opaque
data:
  password: "bHVNS3dscUsxOQ=="
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-control-plane-tls
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ3RENDQXRTZ0F3SUJBZ0lRVXpQZGxWUUgyUDQrMFhjYmtpZXdSakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalF3TmpFMU1qTTBOVFF6V2hjTk1qVXdOakUxTWpNMApOVFF6V2pBcU1TZ3dKZ1lEVlFRREV4OXRlUzF5Wld4bFlYTmxMV0Z3YVhOcGVDMWpiMjUwY205c0xYQnNZVzVsCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeWRoTHVoTkZrU2xscGNJbmM3ajEKTTFyZDF5d3AxMXJzalNFYWJ4QXdhUnNXZmpwSGdLYTM3b04wNGVzTEoyUFRKclJLS3gzaDRvV04zM1FRSmRWNApNV1Q3eEJNOUlCbFpkVjhwVXYrYS9HZ0RhdkczeVNnVFlNZkx6aHlya0ExUEVsekpnWWRiZnBQV3U2YzJ6a1RIClFlWTg0VE5PSDhRZHQyZkZnZDlPR2hEbEJEdWw5WVpweEFqTHFCZUJTUTlZcmJFZjdBSlYxeGQ4S0YzL3UydWwKQWFVZDU3UU9NTkQ0V2xTclg2akwvQUI0NjBHUzQ1VGg0OHE1bExyYjhyOGxQQUYvTDA0Y3FERDlIa3RYOFUxLwpGeDFLWCttbGdCMTF3NFNVQzczTGo1Q1h4STIyU3I1UG5RTmFRTll0dTVmYmphTzhwdGhaeTE5a3NrS1hMaTd1CnNRSURBUUFCbzRJQklqQ0NBUjR3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZLZ0hiS2V2M0hLOQo3ekdIa2kra1g3Tk04L0N3TUlHOUJnTlZIUkVFZ2JVd2diS0NIMjE1TFhKbGJHVmhjMlV0WVhCcGMybDRMV052CmJuUnliMnd0Y0d4aGJtV0NKMjE1TFhKbGJHVmhjMlV0WVhCcGMybDRMV052Ym5SeWIyd3RjR3hoYm1VdVpHVm0KWVhWc2RJSXJiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RZMjl1ZEhKdmJDMXdiR0Z1WlM1a1pXWmhkV3gwTG5OMgpZNEk1YlhrdGNtVnNaV0Z6WlMxaGNHbHphWGd0WTI5dWRISnZiQzF3YkdGdVpTNWtaV1poZFd4MExuTjJZeTVqCmJIVnpkR1Z5TG14dlkyRnNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJxc2QxT2pvdU5iamx0MHp0TVY2RkoKZFJ0RW1SSFBQNWhrU1lKVVlxRDhLcDRjV25ya1RKVGx3OVFyMGFHbnh6NG5janpMOG9FL0ZZS2xGa0VQNnFINAoySU83NVpWUHg2V0U1YnE5dFJFck0yVDhmMDY4NDVGOG9nNU9iUTVYK2lpWXJrK2ZkU3hPYVVjVDhacTNEZDJWCk9NRnZ0Nkp2bVM5UnhRbUY2anI5N295ekNOU2xEQjNqRkxSOEJzd0I5UmVlR3ZkVTI1NldWVVVWQjV3VFNtYUwKUTJoNklURjhDRFBtSXZIeDhOTHk0ekY3enhlRmdVcGNUQW5kRnpEYktZbEJlakpLMGl3T1ZEc203by9FOGN0UQp0TVFBdFRVMTduZ3RkL1h0eG5IWVN6NEs5UVFENjV0QzlhamRZa3F0Z200UFNxMnpQMXFscER1WjgxeU5HbVU0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeWRoTHVoTkZrU2xscGNJbmM3ajFNMXJkMXl3cDExcnNqU0VhYnhBd2FSc1dmanBICmdLYTM3b04wNGVzTEoyUFRKclJLS3gzaDRvV04zM1FRSmRWNE1XVDd4Qk05SUJsWmRWOHBVdithL0dnRGF2RzMKeVNnVFlNZkx6aHlya0ExUEVsekpnWWRiZnBQV3U2YzJ6a1RIUWVZODRUTk9IOFFkdDJmRmdkOU9HaERsQkR1bAo5WVpweEFqTHFCZUJTUTlZcmJFZjdBSlYxeGQ4S0YzL3UydWxBYVVkNTdRT01ORDRXbFNyWDZqTC9BQjQ2MEdTCjQ1VGg0OHE1bExyYjhyOGxQQUYvTDA0Y3FERDlIa3RYOFUxL0Z4MUtYK21sZ0IxMXc0U1VDNzNMajVDWHhJMjIKU3I1UG5RTmFRTll0dTVmYmphTzhwdGhaeTE5a3NrS1hMaTd1c1FJREFRQUJBb0lCQUZPMFdTTWZYdGdtSExzeQoydjJJbEZicHRkbkh2TXBNTUpFT1MxSUhtcXZieWVZcThRQVBJM1BNSENxY09KSHJPZU54SE5qb21ZWkE4R2JjClVOMy91c3B4SUY5ZHd4bU9xYVNkQkJ3aFYvcVlmK0pYdjJteUx1Y1J0QmtUbHFvMGVyZ1l0by82dkJ5djNuc1AKaXhEYlFPNjVOa0lGN3I0SnJIRWtuYW1RRzJsL0h5aFoxalpBVUl3Ry9ycEJmMC9sRTNmT1FZbW1seTVsdlJuTgo4a2hiSGZTakFVMU9reEZUUE9PNERHaFZzekZ3emdkWi9FT2dLS0NPVWJXN0R5K2JxNFNYdHk5RjcwaC9vY0xiCmdDRzNSanVsSkd6TmpwWm94Mko2b2M4RllhNDVpSUZ5bHpYQ1IxSExrdUlrSUZ4RXFLM3J6SEk1SVkyRkMvL2YKZ0VJRVpBRUNnWUVBMU5rU3NlVUNOTWRPeG9XbUFwYmJxMGNnTEJkcHNoR01VcXRlSDR0TGkxeFhOYThvS2V1VAowQ0crRTY1TGZ0RHlERCtsNllNTVdwYjNTbVJMOUo3bHVxYjZDSWJlU1lSZzJ0eG94dnBFeENzVnBpWDlCbHNJClJxZFRZaE9QcUpEbE1FSGYwK2UrRlp4MU9UMXFtWlVQdmV3NkJyQkVXV0VXa2h6bGNHUlFVcUVDZ1lFQThzUW8KdU5Xb3Z5WERCSk9SYVc3UDIxSTk1Z1hEcEF1QWlxNkpIWVl2d0pRT3pENE1iTkNXSEp0N29oSEM3QlRPeXNtUAp3bGVVdHY0OWtjYlZyZWFUalRTUUpBODZ1MXg5Z1NtWENFYzhmK1EzdDZaSStadml6NlJxUmlGVTYwclN3R3VTCmxLeHJuY0N6d3k0ZVFuc1NDMVVtSzV4d1NSSDJjZmczTUs3Mk1oRUNnWUFUNi9WWi9TdEZzVm5vTHQ0bzQrSFAKbUNxa3RkUkl2R2U3M1JwRUxZOTJqY0FENEU4TURXYWFWbTRwL1doSGlGci9WbjI2NjI4ZWszNjEwY2xpTGZVbQprVFpaMGZYQVA4bW84blJFRzJ5UVI5QVE2d0ZSdFBlRFZXbnloZzR1SXRHd3dKbW9oY28rejVRUk5YUml4NWJmCm1kcWNnYWNFRHBoRU9Md28xdHJGd1FLQmdDeU1KbFRVa0NTVFQxZjFwRWRPbUVITXM2TVVCN1NBajlQaTl6STkKdjJGOVNjSGMyUGJXeDlUMEN4blFYSTVwdXhDbk1BUWZnaUNhUXI0UFdJS1N2eHk0T29NRGNHbVZMVXFZVVNpcAp1Y1pXSUl0SXJqZHZqWTFBeEdlZUVqRWpCODFiY0Foc0kwdE5ZeTg3dFQzSnk2UGN1aVppakpBOEJaY2dUekJWCnlzT2hBb0dCQUtCb1FJQUN2QW1Jc0JQYjFnMmlWcGhlV0lkQ0plV2dtcXZzei9wa3FsQ3dxcFJURVZSbWEwbjUKSzBTUC80aUZnVWdFTXNUNXZWUk5hNGxYUHpLRy9RT2c4WmRXSWdpUEFpR0I3Si9jSmYwNXdubnBoQ3QyMjNycApER2pLYThpKzhCYzhVa2t0eVIxMXlaekV1WjkvQjQ1U2hJanRaVWVuS0I5M0pvZ0IwWlBDCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5xS29ZQkFZRnZKbGMvRktXWTVwcHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTWxvWERUSTFNRFl4TlRJegpORFUwTWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExaW5TeVVPTm4vM2dsRTZNWmlNL2NtdTBOR01xUzJUU2czUjlXZEN3UUpkTVVPbVcKa1BPM0d4U1k5dEZhc011aHVWNDNsdzJKNzdsTFhBVTdpWDlhUG5OMWxLMm9NbzJ6ZnRIWFRYMDh5OHREMEZZbgo1bWFLMFpmck8xLy9WMEZQU215WEhCTGJJVDNvTXNUQkc5TVlmV0FMcXJ3Y2Q3ZHQ0SE1pdGhKZzdsWno1V1UxCkhHVS9uaGU2d0pVdkFPd04zb1N6RTM0SmFmQ2FIc2VXMVJLbkF5Vmd0cHBxZUwySE9FV0dGMkduc3BQZXJPVkoKN1pOM2xmOXlvdlZ3WklYQzBXM2Ura0t2R2QwNXF4enJkQyt2dlA3NmZQSHVSSTMrUks5ejFqVmhaS1V1SmtCQgpwR3k0dVN0WXJRNjNseEwzTE1tS3NOU0xFZktHUWNiQ0hRL2c3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS2dIYktldjNISzk3ekdIa2kra1g3Tk04L0N3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQkx5RjlSSHFNVlcxbC9lcjUya3pFWkVtcTR6WFRkZVNHRlVkWE9saTNIMWRDdGlPVG5hcG9aCnNQd0tuZU1VVm1ucW0wVHdFRFpwVk9mZjJSQWRXQ3hrc1pHd1dYUW4vQk04cU5jbXQ5dElKRDVQTmxPQnpqUzYKZWpMcmpuQUxHTkljTHJzc1Q1RGxqWEtNR1kxK1cwQUJHUHNrTzJ0dDBYVnpVUVhmbmJvYU1jcitkcm5uNkJjOQprdTYzQ3pKbis3cE5NV0RBSW9uNDVZajFtY3FPSkFJc1k5MmpOSzhtSXpDZTlhdERlSFZzR2hpNE8xUUY4M0tYCks5bEt6dmEraHhJdU9wRUV1cXRTSis1L0VYa3Bwa2d1b05tYmJ5SDl2a1ZDbFFueWlOc0FWeTVJbVRCbkdId3oKS0FKd3h1bTl1SjhnUXZEWDJpeTNiaE9ZNERQTElMQkMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-data-plane-tls
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQzakNDQXNhZ0F3SUJBZ0lSQU44aGpxQWJITHY2R1IvQ2FKd05pMm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTTFvWERUSTFNRFl4TlRJegpORFUwTTFvd0p6RWxNQ01HQTFVRUF4TWNiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RaR0YwWVMxd2JHRnVaVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUGQ0a0xvdENRMS9EYmQyT1pjc04rR2MKU3dxU2dCM0FCMHNHTWRNVkJ1NEtnQlVWbWVXdFJ5MS83czZKem9sbTIwVENqOC91N29FZ25LaTJLdTJYbzVqZQpFSHJzcEtNaGlpZFBMejVtUGJxMVo1THcxZVA2MDArUjZqSDREZXN4OHNGejNKVXZwRkR3dlNtN3pWSjNyaEg5CmVYNlIxbkJzNWU3TlRwWllvZGYyMFFOTlg1ZFV5aEIrdW5rNHJINVBxQUVJQm92WUF3bUJTbUJJQ2gvOG05UHQKMTcvUytXaHB1Ums3bkpmd2Q3N1Q2R3l1ZnNMZUZpU1BhVTZmWGs2SStPUHZBVTdJUktsTUVub0VYTlNhZ2dPYgpVWDFYYlo4Q2pJM0dCOUVlNlV0SGkwbW9NbUxPa2dBYkJxQkRtUmJYSnViaGk5RUtmOGV4dEEwSTM4ZnM5MDBDCkF3RUFBYU9DQVJZd2dnRVNNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTb0IyeW5yOXh5dmU4eApoNUl2cEYrelRQUHdzRENCc1FZRFZSMFJCSUdwTUlHbWdoeHRlUzF5Wld4bFlYTmxMV0Z3YVhOcGVDMWtZWFJoCkxYQnNZVzVsZ2lSdGVTMXlaV3hsWVhObExXRndhWE5wZUMxa1lYUmhMWEJzWVc1bExtUmxabUYxYkhTQ0tHMTUKTFhKbGJHVmhjMlV0WVhCcGMybDRMV1JoZEdFdGNHeGhibVV1WkdWbVlYVnNkQzV6ZG1PQ05tMTVMWEpsYkdWaApjMlV0WVhCcGMybDRMV1JoZEdFdGNHeGhibVV1WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXRkTWplQnQ5VHpHYk1MTlYybGNac2ZEL3NsNGc1Q09Pd08zNDQ2MUkKa05GRUpVdklkY29ucDcwRHByNFJ5bFZGVm5RNEV3Qk5uREg1ZytIdk5oNGFwVk9tY2R1MmdseklLTzZ4NTQ4UwpCVGpZNVZEWk11Q0Fvb1NiL0M2eE9meHdUOGwrblRVUmhhYTArQW81K3BoSDVITEM0Z2hybkoxaUY5M1E5eVVpCnkySFp6U1pySTZSWlpNWXN5aWM1eVYxdFB3WVdmUEtBRlg4cXpFbUxOZDNFcmhPMnJVTXNsb2VTRWh2ZTRHd1YKYzFoV3h6bC9GV0xWR2dnSnlmNE5vc1VZYjE3a1dGNm9LQ3hnc0djYXlmdjRSYjhWd0NOZlN3OFQ1SGd0cW04dQplcGwvcW1VRW0xc1Q2RzdvbWk2SHdwWENGTnJOVmJBUTNyRE9BY2RZMUplRE9BPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOTNpUXVpMEpEWDhOdDNZNWx5dzM0WnhMQ3BLQUhjQUhTd1l4MHhVRzdncUFGUldaCjVhMUhMWC91em9uT2lXYmJSTUtQeis3dWdTQ2NxTFlxN1plam1ONFFldXlrb3lHS0owOHZQbVk5dXJWbmt2RFYKNC9yVFQ1SHFNZmdONnpIeXdYUGNsUytrVVBDOUtidk5VbmV1RWYxNWZwSFdjR3psN3MxT2xsaWgxL2JSQTAxZgpsMVRLRUg2NmVUaXNmaytvQVFnR2k5Z0RDWUZLWUVnS0gveWIwKzNYdjlMNWFHbTVHVHVjbC9CM3Z0UG9iSzUrCnd0NFdKSTlwVHA5ZVRvajQ0KzhCVHNoRXFVd1NlZ1JjMUpxQ0E1dFJmVmR0bndLTWpjWUgwUjdwUzBlTFNhZ3kKWXM2U0FCc0dvRU9aRnRjbTV1R0wwUXAveDdHMERRamZ4K3ozVFFJREFRQUJBb0lCQVFDTy9zYTZIWDNHbzZ6YwpYdDhtUURIR0Z0YXh0RGQ5ZVZGOWc0WFV6NmlpY2NUUzZobDBRcTBIV0k0NElCOE0vRGNsUXp0d1RrTFlzR3gxCmZGWFAxamg5QTR3SVM2ZFNiL1h4Z3Vyc3BvMXl6cEdic2JnV05RQlhVUncvWlhNOWZTNGxwSHBJWmpBUGFSd1UKK21USkMwaTFNbjg2cUxCOVpCOTAzb05Ua3NGcUZSeU5rcWJtWmppTWRIZmMveUJldUw3cUNCaldhalN3YTM5dQpXK2ltb2I1K3Y3YkxiV3hGSnJJK2Z0S0xQZ09GTjUvRGQvc0Q4KzRQRGxibkV2RytEa2hveDNCcGxPTWZNRHA0CkNveEhZSVlodW9LMzI2Wk4wK0VRV3pIY3I1OGFqNEluLzRDekpCNjdBVzA3RzJUN0NoZ1pHOFBXcjVMY21NR3MKKzZNTGRiM3RBb0dCQVB0ZVBpT25TZ25SOEdiY29DMmt5Sjl3RGd0THM2M2dDRXk0NS8xcjBSRDU5N1BxejNlZwo1QldBd1hOOEVNZHJKQVNNLzlIcnFabFZFN3JIOStVcThNZURDMkE4QzJsdGxQVFJEaHBmb2RtK01vcm1IZkdYCllyZXRVMWVZak5BeHd6UjJjS21acHQvbXJFR1l3dm9DYkp5T0lFelF6QXloTU1JcVErMiszM3NmQW9HQkFQd0gKOEZTT3lpbzBnT1lZSEVNR0FHOUVtYXVuTXpmQ0JWVWVHRGRiVGlkS21QNjN5Y0hPdjdTK3ErdjRQTDVwMmtVRgo4SkhlUEdkUjhCQ1F5NkpzV3BJdE5Ya1dONWg1N3U0UkZxQUJIRWxlMStjY2ZkbElaRjY2WXZudk5vdjYraXVoCmpXeU5FTG5BUUhSTHlFNHZWYWFQNnlqTUxtZCtxSmtaalNyVG9xd1RBb0dCQUtzSmdEeWdTcmVOMndjU25nY1EKdGRZTzErK0ZyaGZrZGFGR3U4dnEvZEdRVktSZVpKYWdxakdiYjRZVjZCRFk3U1FQa000VWpVMGczNURiR2VrYwpJOE9OZmtNWCtDZmZnVmhubXpJRTJrc2ZxS0pzVy9tVUtYNlRlRDhGTk9OQXlQTThtQUkrNDVZOERmK0FZMExjClBXejFKRE5BYTJjNGtzVzdIb2Q1dGZTL0FvR0JBTGpnN2ZocFluM0JWQWoyQ00xVnVyM2ttY0drZmxyWmxlWFIKbEx3TzIyN1JOeGdySS9KcXdwQkpDbjZuODQ5T3dSRy9BTEZRVUFrT3YwYTNvTmwrR0phQVdXaUExcm1nUUpnYwpxdmNtdVdSTkVaMzBkWkVObktzc21PeDFBUk9BUVVIK1dXc1dzLzArdlVsU1NoYW9mSEVadzh5Q3MwdXlTdVU4CkxDVU5hSmhIQW9HQVdGL0srWEN1L3NncGxGWTBLNk1rMFFjS041ZkRvaEI1UXJLaUdXckhiUDVGMWxra3FOTlMKdG9HZXdMZVBBamp4QlRHOENnNDVUUGlDd01LYkRlWUtoU2hzVWIvN1NrQTUrVFh2QTZJcUlYUzJtbTJXZjdVUgp0bkp0QzFrakN5b3VycjQ5SHV6LzlvTHZJcDBIYTA3Szl2TFJVNDgwNTJEdkU1b3BhbHlRZURrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5xS29ZQkFZRnZKbGMvRktXWTVwcHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTWxvWERUSTFNRFl4TlRJegpORFUwTWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExaW5TeVVPTm4vM2dsRTZNWmlNL2NtdTBOR01xUzJUU2czUjlXZEN3UUpkTVVPbVcKa1BPM0d4U1k5dEZhc011aHVWNDNsdzJKNzdsTFhBVTdpWDlhUG5OMWxLMm9NbzJ6ZnRIWFRYMDh5OHREMEZZbgo1bWFLMFpmck8xLy9WMEZQU215WEhCTGJJVDNvTXNUQkc5TVlmV0FMcXJ3Y2Q3ZHQ0SE1pdGhKZzdsWno1V1UxCkhHVS9uaGU2d0pVdkFPd04zb1N6RTM0SmFmQ2FIc2VXMVJLbkF5Vmd0cHBxZUwySE9FV0dGMkduc3BQZXJPVkoKN1pOM2xmOXlvdlZ3WklYQzBXM2Ura0t2R2QwNXF4enJkQyt2dlA3NmZQSHVSSTMrUks5ejFqVmhaS1V1SmtCQgpwR3k0dVN0WXJRNjNseEwzTE1tS3NOU0xFZktHUWNiQ0hRL2c3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS2dIYktldjNISzk3ekdIa2kra1g3Tk04L0N3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQkx5RjlSSHFNVlcxbC9lcjUya3pFWkVtcTR6WFRkZVNHRlVkWE9saTNIMWRDdGlPVG5hcG9aCnNQd0tuZU1VVm1ucW0wVHdFRFpwVk9mZjJSQWRXQ3hrc1pHd1dYUW4vQk04cU5jbXQ5dElKRDVQTmxPQnpqUzYKZWpMcmpuQUxHTkljTHJzc1Q1RGxqWEtNR1kxK1cwQUJHUHNrTzJ0dDBYVnpVUVhmbmJvYU1jcitkcm5uNkJjOQprdTYzQ3pKbis3cE5NV0RBSW9uNDVZajFtY3FPSkFJc1k5MmpOSzhtSXpDZTlhdERlSFZzR2hpNE8xUUY4M0tYCks5bEt6dmEraHhJdU9wRUV1cXRTSis1L0VYa3Bwa2d1b05tYmJ5SDl2a1ZDbFFueWlOc0FWeTVJbVRCbkdId3oKS0FKd3h1bTl1SjhnUXZEWDJpeTNiaE9ZNERQTElMQkMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-ingress-controller-tls
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCVENDQXUyZ0F3SUJBZ0lRUkRRV1daT1RKSUdUTDlPdVA5K1FoakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsaGNHbHphWGd0WTJFd0hoY05NalF3TmpFMU1qTTBOVFF6V2hjTk1qVXdOakUxTWpNMApOVFF6V2pBdk1TMHdLd1lEVlFRREV5UnRlUzF5Wld4bFlYTmxMV0Z3YVhOcGVDMXBibWR5WlhOekxXTnZiblJ5CmIyeHNaWEl3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzlnMGRDU0lmcWVWdTkKWFJVMHVFbStQaWE1Z0s4MkE3M2pOdWdKUWZVcDJEcGl1ZCszQW5ycDl1aGtFZFovSzU1UDNvekg1S1ltK0VEbApuL3d3RHBJbTNxWnpjQVhQSmZkbFJQcTRoMDRNNDNYeGIveDJSS2ZrMUh5Z1hrYnB4dUlCbEh3ODVqNEpZeVA5ClVCSkNQMjhFdVBaUVRpOEJVNEZEZ2FyMlBpbGFSWjdsZXdOdGcvZDI2TGp3dEE0V1loZkg5aENFbW42QWVEK1MKS3AwZ1pwRk4xcTNSd1NTb2IzbHh1UEtteW5UaHNpek1KVlNpODA0Szc4Wk5SNDBEemJzUXVycXowU2RGTmtWVgpRL0htLzhFUklJWldnZjhFb3VGaDRndXlJdVRGMFNrdHVzRmwyZjhUOENuaWRJT25lSkd6aWFuNVozWlRhcTJiCmNzTlRrRE1yQWdNQkFBR2pnZ0UyTUlJQk1qQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0hRWURWUjBsQkJZd0ZBWUkKS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVcUFkcwpwNi9jY3Izdk1ZZVNMNlJmczB6ejhMQXdnZEVHQTFVZEVRU0J5VENCeG9Ja2JYa3RjbVZzWldGelpTMWhjR2x6CmFYZ3RhVzVuY21WemN5MWpiMjUwY205c2JHVnlnaXh0ZVMxeVpXeGxZWE5sTFdGd2FYTnBlQzFwYm1keVpYTnoKTFdOdmJuUnliMnhzWlhJdVpHVm1ZWFZzZElJd2JYa3RjbVZzWldGelpTMWhjR2x6YVhndGFXNW5jbVZ6Y3kxagpiMjUwY205c2JHVnlMbVJsWm1GMWJIUXVjM1pqZ2o1dGVTMXlaV3hsWVhObExXRndhWE5wZUMxcGJtZHlaWE56CkxXTnZiblJ5YjJ4c1pYSXVaR1ZtWVhWc2RDNXpkbU11WTJ4MWMzUmxjaTVzYjJOaGJEQU5CZ2txaGtpRzl3MEIKQVFzRkFBT0NBUUVBS2UwMXRPT0xXK1dwVitvamMyNytVcmlsaEZiZUo2ZitPUHh4RmNVMTFRdmFFcDAzdDV6cwpKMXFRcEFmeSs2Kzk1N0VWWGZOSkVPVUcxZitiZjJmQlBmQ1FRSGdwc3hQbzNJcnluUzVVeDlnaThjdlBTNEp4CjEycEIvcGxMbmtsQ0ZjZk5hK1dhK2tzNUI5elc4S29mNTV5RktnN1lTbHk2THFBZGZ5NzlIRERCc2wyYVRGOWwKaUZkSitUNU9sdS8vbFZlUjIvT3g2NlEzeThaS1UxKzZSUDhkOXo3L045T081SDZSMXJwbTFoMVhrQittYUp5VgpjS1EzdnY3di9aS29ZUFZBbnRjTXZ2YkF0RlI4c28wVEVWMjJ3NHh5TGdYOXVRdVYrbUxwL1JBR1p2SUVvZEd6CjUyRFFwYk1SWGxJVkt1dzZQaDdlV1ZlemJpK0JjQXNxMWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdllOSFFraUg2bmxidlYwVk5MaEp2ajRtdVlDdk5nTzk0emJvQ1VIMUtkZzZZcm5mCnR3SjY2ZmJvWkJIV2Z5dWVUOTZNeCtTbUp2aEE1Wi84TUE2U0p0Nm1jM0FGenlYM1pVVDZ1SWRPRE9OMThXLzgKZGtTbjVOUjhvRjVHNmNiaUFaUjhQT1krQ1dNai9WQVNRajl2QkxqMlVFNHZBVk9CUTRHcTlqNHBXa1dlNVhzRApiWVAzZHVpNDhMUU9GbUlYeC9ZUWhKcCtnSGcva2lxZElHYVJUZGF0MGNFa3FHOTVjYmp5cHNwMDRiSXN6Q1ZVCm92Tk9DdS9HVFVlTkE4MjdFTHE2czlFblJUWkZWVVB4NXYvQkVTQ0dWb0gvQktMaFllSUxzaUxreGRFcExickIKWmRuL0UvQXA0blNEcDNpUnM0bXArV2QyVTJxdG0zTERVNUF6S3dJREFRQUJBb0lCQVFDZGowSzBlZ2IrUzIyWgpiNFZNOHBiazQxbGd5dnRnNWhWK2pjeTJ2YTZ0M29jVVE4TWFyYVl4Vk1WN1JWVlhINVdjZzhQNkFVQ2VqN0dzCjk2azg3ekJWdnJFV3NxRXh5emYzYXpVa0srSVpWeGRjNXlVMzB2YmZpa1lmTXFLMGhGU3N5WjNOS0FPVjNHWTAKbWRqRVdXYmN2MGFTRjU1KzlNVTRzZHJJcFgvTit6dUdFK1I1NTB0bUl5SG5Ga0lPLy8rcGs1MVlWaDY1TUNjbAowb1dUMDNCcE44akZzUDNSWDRjRXNxQ1JvY29nY1FvSFMwMHM3L2JSVGhwZVZPcHZHSG5qRUNMYktuc0xBenF0ClJ1c0V0NmdleDZMREUyMTJFTmNkQkh0Z2xqLzg3Ryt2RWZxNkNrRVd6ZVVUcXArVGFtWWdLQ2hDL1VxUktwQWgKdTVZWHg0Y0pBb0dCQU5PUFNld0Z4cEtKSVlpNGpIZnRnZndxeGRTTy9leHY4OVlEZFZHUGdXVm5NMkd2WW01Tgo0cHBiMTE4NXo2Y3dJNDVnbnlJNzM5S1hCQXM3TVV2RitvZzJubGpGWjUrcGF4Qnp4S0JsTTI5UXlsNEhtejlKClJkdU82YnVjbzU2K2JxNTRjQXM5SmVKelJaSWJHWUt5bDdZRVk5T0ZTQVlxUm5xVVE3UmwzUFZGQW9HQkFPVlMKYUZuZFYwKzJzbFVGU041K21nRk9Ia2NGQlNNZHBTS0lSeFZyblJMcjIxcUt1ektDMWxDQittbzNFSEgveDRyRAo0b2JxYitldHNBanBRdS83c1BGakdLMEloakJVVVBPbjNVWmtkQ0c0K0h6OC9tcTBCTFljdkh0aERhb1BuVDVnCjlTeU1ZNUVzMEdmcDc5ZWJKUEwxRUJuaEUwdUFlOFFnV3JQSWZIV3ZBb0dBVHUxTVJOTzZ5M3lCbUVKUmxZUjAKVkNHWkFMNEFHYStDcHJ0UGo0Z2NYRHB1UHVseHJYazlLeDFNY21oZEFpREJneUtrKzk2ZW1EQmkvOVdyaEh0dQpCbGRxSi9BdHdyRXdFa2srZUNDSldlUW9PNEJXK1B0YkpwaGd0dSt2VTAvMGR2N1R2ajJuM3AzbXZLV0RsUEVRCkRJWUN3QzBmTzcyVjRiRml1UEN2eUlrQ2dZRUFzalR0Rk5DMkZpTkN5R0ZYOUZkcjlKR3hZNzFaOWFVRy9DUHQKSVk5RVBEei9kSWdVMnpianR5S2E2RW1zUlByaEpVditVSndFcElUTUpOQ29qUGdKMUR3UEpBQll6MXZtb01LVgphU3VOTjl1WGR3SGY4Q20rODRxM1NpWHN5WGhpMk9QZUEyV0J4b0tOM2dMa3VLYysrbk5JdE9PODY5S0gyNnpNCjc2TmdYTThDZ1lFQXZuK2I3cml2cGRzVUdDZFZQVmNUTXNGWjJzMjF6ZnZQOWJIUWFGak9yM0JsRXhLWG44ejgKUk1SdGE5QXJPUDBMR0RpVGhlcVFrU1BRdmllQ2ljRzVQYThNem42aVVVVnNEbnU2bUhXU0V6dWFlL0dVV0I1cQpHYzM5TnZYakppS1Y2SnVQN1pKM3h2azN6Wnl5VUU5T2FWTXZmS1dUajlyVEpSTXpDa2lFREhnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5xS29ZQkFZRnZKbGMvRktXWTVwcHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTWxvWERUSTFNRFl4TlRJegpORFUwTWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExaW5TeVVPTm4vM2dsRTZNWmlNL2NtdTBOR01xUzJUU2czUjlXZEN3UUpkTVVPbVcKa1BPM0d4U1k5dEZhc011aHVWNDNsdzJKNzdsTFhBVTdpWDlhUG5OMWxLMm9NbzJ6ZnRIWFRYMDh5OHREMEZZbgo1bWFLMFpmck8xLy9WMEZQU215WEhCTGJJVDNvTXNUQkc5TVlmV0FMcXJ3Y2Q3ZHQ0SE1pdGhKZzdsWno1V1UxCkhHVS9uaGU2d0pVdkFPd04zb1N6RTM0SmFmQ2FIc2VXMVJLbkF5Vmd0cHBxZUwySE9FV0dGMkduc3BQZXJPVkoKN1pOM2xmOXlvdlZ3WklYQzBXM2Ura0t2R2QwNXF4enJkQyt2dlA3NmZQSHVSSTMrUks5ejFqVmhaS1V1SmtCQgpwR3k0dVN0WXJRNjNseEwzTE1tS3NOU0xFZktHUWNiQ0hRL2c3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS2dIYktldjNISzk3ekdIa2kra1g3Tk04L0N3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQkx5RjlSSHFNVlcxbC9lcjUya3pFWkVtcTR6WFRkZVNHRlVkWE9saTNIMWRDdGlPVG5hcG9aCnNQd0tuZU1VVm1ucW0wVHdFRFpwVk9mZjJSQWRXQ3hrc1pHd1dYUW4vQk04cU5jbXQ5dElKRDVQTmxPQnpqUzYKZWpMcmpuQUxHTkljTHJzc1Q1RGxqWEtNR1kxK1cwQUJHUHNrTzJ0dDBYVnpVUVhmbmJvYU1jcitkcm5uNkJjOQprdTYzQ3pKbis3cE5NV0RBSW9uNDVZajFtY3FPSkFJc1k5MmpOSzhtSXpDZTlhdERlSFZzR2hpNE8xUUY4M0tYCks5bEt6dmEraHhJdU9wRUV1cXRTSis1L0VYa3Bwa2d1b05tYmJ5SDl2a1ZDbFFueWlOc0FWeTVJbVRCbkdId3oKS0FKd3h1bTl1SjhnUXZEWDJpeTNiaE9ZNERQTElMQkMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-dashboard-tls
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQyVENDQXNHZ0F3SUJBZ0lSQVBiSGgyaWxTRjBwVGNOOUYvYVNLVFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTTFvWERUSTFNRFl4TlRJegpORFUwTTFvd0pqRWtNQ0lHQTFVRUF4TWJiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RaR0Z6YUdKdllYSmtNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0NzFYY1h6cHptR2dORkRqaFNKT1VMVnIKNzQ4NHoyOFdVd3R4UERsY2x0Nzl6aXBCWHhOSDZCcythOXVvam01dEt3UFBkQlNFc0JPZjVSaWpQMXZQUmI5cgpkU1ozVlA5N3NJQUg0alY0VlBrQUVZeU51VjEybDg4clBSbE5VMGFvUy9reDJ4TTVGMXRUR1Q4aCtrM2JWQnBlClNqNVdKbGdjRXJDN0pyS0VEZHFMQlN6cDJvZnppWmw5QU1RbDE0Wmt1ZEFLSGVoNnVoNDl6TTRlRDJjbm5qUHEKTXhxQ3VaODRkR1puSDREVVVnODNBcFFlcXlabGdoMXc5Q0tXV25vRFdaTHNPL2NFaXpRUUR0am92TFVUVmpIZAowQ3c2VmhBRmd1eVAvM0lGK3hGMDlPNzlNSThqendFN2NMeGFmd1UxSUZaQldFUUVpZWNkc0xMTlpOcENJd0lECkFRQUJvNElCRWpDQ0FRNHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRktnSGJLZXYzSEs5N3pHSApraStrWDdOTTgvQ3dNSUd0QmdOVkhSRUVnYVV3Z2FLQ0cyMTVMWEpsYkdWaGMyVXRZWEJwYzJsNExXUmhjMmhpCmIyRnlaSUlqYlhrdGNtVnNaV0Z6WlMxaGNHbHphWGd0WkdGemFHSnZZWEprTG1SbFptRjFiSFNDSjIxNUxYSmwKYkdWaGMyVXRZWEJwYzJsNExXUmhjMmhpYjJGeVpDNWtaV1poZFd4MExuTjJZNEkxYlhrdGNtVnNaV0Z6WlMxaApjR2x6YVhndFpHRnphR0p2WVhKa0xtUmxabUYxYkhRdWMzWmpMbU5zZFhOMFpYSXViRzlqWVd3d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSXcwbjc3Nk42RWxZcktsaGZjWDMrZEgwazl5TExsK29Qa2FySDlibzlLeDB3VzgKYzdhelJLR0JpSjE1T3AvK0Z2clhLaU9RdzZzMFllSzBqZDBMdTdFSXBVTkpvSnBreWxJZ3ZNZnBYUlNmRmp4VwpubG44K3NwOU1LNHpiVEZ3dzd3VUpvMytObnJtQmJRV1Zzam04R0NHQjZtdG1tRU05ZlhVV2lCTUVON29WZGp3CkRBVGRQMW9ZYWhQNFIxbEw4bll2eU1PR091cVRVaXBXK3kzZ3BiaGRTM1hoUXcxNlRJRWZKMVpUZFI0Q05zRloKWWhjaG9PWUk2MUYvYWFQbkFIUnJiay9wNnlrQ2hMY09aV1JiL2VmNUlKUWM5VklYRkRlb3R0R0ZBQVNJbEd0TApxdGN6VXpMaTJ3cXA1QkxvYXJxVUpGcVFOcHlxZVZQYVdTbG8wM289Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDcxWGNYenB6bUdnTkZEamhTSk9VTFZyNzQ4NHoyOFdVd3R4UERsY2x0Nzl6aXBCClh4Tkg2QnMrYTl1b2ptNXRLd1BQZEJTRXNCT2Y1UmlqUDF2UFJiOXJkU1ozVlA5N3NJQUg0alY0VlBrQUVZeU4KdVYxMmw4OHJQUmxOVTBhb1Mva3gyeE01RjF0VEdUOGgrazNiVkJwZVNqNVdKbGdjRXJDN0pyS0VEZHFMQlN6cAoyb2Z6aVpsOUFNUWwxNFprdWRBS0hlaDZ1aDQ5ek00ZUQyY25ualBxTXhxQ3VaODRkR1puSDREVVVnODNBcFFlCnF5WmxnaDF3OUNLV1dub0RXWkxzTy9jRWl6UVFEdGpvdkxVVFZqSGQwQ3c2VmhBRmd1eVAvM0lGK3hGMDlPNzkKTUk4anp3RTdjTHhhZndVMUlGWkJXRVFFaWVjZHNMTE5aTnBDSXdJREFRQUJBb0lCQUJvQmxxcmRmMHBTenhZWQpqTnQvSzQ2STN5b2RIM0ZjeTlBZFFuMi9zTGM2QUxwNWlKOG9YM2tld2dzS0lDVm93OUxleXpJbTVWRDJ0aDc3CkNjQWlBb2hndTVqdFJONm0rcDdVd0Vqb1FJdm1ZbmdaYU1YZjBMVlVBVTY0a2hWRFh2YkI0cWliWSsxR1k5Q2kKK3ZBdXJPaU9ndUlIU0xKTXJreUc3elplOWdudnMwZ3hlVnpnYkJnSnN1VWcxOVBLK3k5dXV3TlhrdzJTNU9GdQppQzUwVXBWblNTNFh1ZmdRdXBWWG5FZzNreGNzWTdtMjd6RldjelNXY3N4RStBak5pWWl4MXNwMVdqVGRUMlRXCkhjSEVnZitGVWZsN1EwRkRTaVFDK3pxdlErTDNoL1lYSzhSRy9STnI0UWtHMnJaYjJUdWJ5T0N5QkNJejlKZlAKdFZhT2xpRUNnWUVBNlB2TnIzYmNjVStoUFh3bFlkK1NjT3lSVG5iS2VFUEMwbnEyaWxpRDdFaktXL3ltWEdhZwpKUVo2enlVTTU0Q3hidU5qNDVsWkozVWNMaENwVG82TzZpMEtYSjBWT3c0TFg2cjI0ZVBDVzFRdHhYUG5UeTJICmlqM3lwL1B4MHhsaTdiNTBVeDhXbkE2L0srME96M2xYTjEvZTE2dmVtdUFCVnZCYWF2RmRtalVDZ1lFQXllUW0KSEwxQ1kyb05KRWlTN1ZraGtwYjlVQzhNbktZYWNOVFFHODBRQmI3bFdERlp3Nk9lYU5EaHVWSlVRdlZlWFRRegpMN0VOZWN5MS9aajNIcEpBQ1RkQ1FWZ2QwbnJhb212bVh2R2RENHhiUTQ2UzhoazZqNW5XUlVmUkM2RnpEbVlWCkRWT0ZFK0lEQTVFbUdValdoRG1KOGY2clJLMFlzMVFuQWVmWHRmY0NnWUFwbFMrcjNvb1B5MGViQXJwbFVwTC8KaHFtVW1JMGdrKytFdzVRcTh3dHdzN2t5VzlDUmMxdW40QlV4UFlxbEV3b1lJWXVsaHF3cjU3SUU0c0psRy9xVAovei8zTWE0bFlTZFVodDRUaVNRYVN0YjBnL0JINkhkbGpCTHdPUkR6UFhlenVTZG40b2VWaU9oRC9jYUQ3ME5LCnhkaXZJNlRTZmFLZmtyeUFrOTNCOVFLQmdRQ1VGczM5OXJWanhyNnRCcTcvZW9tdHhTTTZWY2lpZnhTVi93UkgKNERzSWUrWXVzc1J0Uk85Rll6S3ZoVHhaZ1RJZW05T1FBQWNxZUlabDVuWWQ3cGthS1hab0NBS1lDWldsM2crMQpSUFU0R25RM01iV0g4QW1NbkFNWC9uM1FValRiTXZYdU9IMDlBR1BGa2dxb01VMW8zK3ZYbmo1eXVhV01wUVdYCjJEL2FNUUtCZ0JkejBjK0tEazA0UkhVQUZyNTdiV3U5VjBWeEFPOW5TYWhWM0dRZnl1aitZVnZ1Q2JJWlJ6UmoKNTJiWDU4NUk1amh6RGdEWUpRMndiUWRYc2J0R1BxR3lWVW94V1NlS3JVdzR3eStYUDZKYm1zemdoTXZVL05COApLdmxUMDJ0Znd2M0FtZ0JLT2dHRXpyUVgwVFEzU0krSFFCWUt3WFBmZkVrbTFVNHBwVzZkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU5xS29ZQkFZRnZKbGMvRktXWTVwcHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeE5USXpORFUwTWxvWERUSTFNRFl4TlRJegpORFUwTWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExaW5TeVVPTm4vM2dsRTZNWmlNL2NtdTBOR01xUzJUU2czUjlXZEN3UUpkTVVPbVcKa1BPM0d4U1k5dEZhc011aHVWNDNsdzJKNzdsTFhBVTdpWDlhUG5OMWxLMm9NbzJ6ZnRIWFRYMDh5OHREMEZZbgo1bWFLMFpmck8xLy9WMEZQU215WEhCTGJJVDNvTXNUQkc5TVlmV0FMcXJ3Y2Q3ZHQ0SE1pdGhKZzdsWno1V1UxCkhHVS9uaGU2d0pVdkFPd04zb1N6RTM0SmFmQ2FIc2VXMVJLbkF5Vmd0cHBxZUwySE9FV0dGMkduc3BQZXJPVkoKN1pOM2xmOXlvdlZ3WklYQzBXM2Ura0t2R2QwNXF4enJkQyt2dlA3NmZQSHVSSTMrUks5ejFqVmhaS1V1SmtCQgpwR3k0dVN0WXJRNjNseEwzTE1tS3NOU0xFZktHUWNiQ0hRL2c3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS2dIYktldjNISzk3ekdIa2kra1g3Tk04L0N3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQkx5RjlSSHFNVlcxbC9lcjUya3pFWkVtcTR6WFRkZVNHRlVkWE9saTNIMWRDdGlPVG5hcG9aCnNQd0tuZU1VVm1ucW0wVHdFRFpwVk9mZjJSQWRXQ3hrc1pHd1dYUW4vQk04cU5jbXQ5dElKRDVQTmxPQnpqUzYKZWpMcmpuQUxHTkljTHJzc1Q1RGxqWEtNR1kxK1cwQUJHUHNrTzJ0dDBYVnpVUVhmbmJvYU1jcitkcm5uNkJjOQprdTYzQ3pKbis3cE5NV0RBSW9uNDVZajFtY3FPSkFJc1k5MmpOSzhtSXpDZTlhdERlSFZzR2hpNE8xUUY4M0tYCks5bEt6dmEraHhJdU9wRUV1cXRTSis1L0VYa3Bwa2d1b05tYmJ5SDl2a1ZDbFFueWlOc0FWeTVJbVRCbkdId3oKS0FKd3h1bTl1SjhnUXZEWDJpeTNiaE9ZNERQTElMQkMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/control-plane/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-control-plane-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
data:
  config.yaml: |
    
    nginx_config:
      error_log: /dev/stderr
      stream:
        access_log: /dev/stdout
      http:
        access_log: /dev/stdout
      http_configuration_snippet: |
        proxy_buffering off;
    apisix:
      control:
        ip: 0.0.0.0
        port: 9090
    deployment:
      role: control_plane
      role_control_plane:
          config_provider: etcd
          conf_server:
            listen: 0.0.0.0:9280
            cert: /bitnami/certs/tls.crt
            cert_key: /bitnami/certs/tls.key
      etcd:
        host:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
        prefix: /apisix
        timeout: 30
        use_grpc: false
        startup_retry: 60
      certs:
        cert: /bitnami/certs/tls.crt
        cert_key: /bitnami/certs/tls.key
        client_ca_cert: /bitnami/certs/ca.crt
      admin:
        https_admin: true
        admin_api_mtls:
          admin_ssl_cert: /bitnami/certs/tls.crt
          admin_ssl_cert_key: /bitnami/certs/tls.key
    
        allow_admin:
          - 0.0.0.0/0
    
        admin_key:
          - name: admin
            key: "{{APISIX_ADMIN_API_TOKEN}}"
            role: admin
          - name: viewer
            key: "{{APISIX_VIEWER_API_TOKEN}}"
            role: viewer
        admin_listen:
            port: 9180
        enable_admin_cors: true         # Admin API support CORS response headers.
    discovery:
      kubernetes:
        service:
          schema: https #default https
    
          # apiserver host, options [ipv4, ipv6, domain, environment variable]
          host: ${KUBERNETES_SERVICE_HOST}
    
          # apiserver port, options [port number, environment variable]
          port: ${KUBERNETES_SERVICE_PORT}
    
        client:
          # serviceaccount token or token_file
          token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
        default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0
---
# Source: apisix/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-dashboard-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
data:
  config.yaml: |
    conf:
      listen:
        host: 0.0.0.0
        port: 8080
      ssl:
        host: 0.0.0.0
        port: 8443
        cert: /bitnami/certs/tls.crt
        key: /bitnami/certs/tls.key
      etcd:
        prefix: "/apisix"
        endpoints:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
      log:
        error_log:
          level: warn
          file_path: /dev/stderr
        access_log:
          file_path: /dev/stdout
    authentication:
      secret: secret
      expire_time: 3600
      users:
        - username: "{{ APISIX_DASHBOARD_USER }}"
          password: "{{ APISIX_DASHBOARD_PASSWORD }}"
    plugins:
      - api-breaker
      - authz-casbin
      - authz-casdoor
      - authz-keycloak
      - aws-lambda
      - azure-functions
      - basic-auth
      # - batch-requests
      - clickhouse-logger
      - client-control
      - consumer-restriction
      - cors
      - csrf
      - datadog
      # - dubbo-proxy
      - echo
      - error-log-logger
      # - example-plugin
      - ext-plugin-post-req
      - ext-plugin-post-resp
      - ext-plugin-pre-req
      - fault-injection
      - file-logger
      - forward-auth
      - google-cloud-logging
      - grpc-transcode
      - grpc-web
      - gzip
      - hmac-auth
      - http-logger
      - ip-restriction
      - jwt-auth
      - kafka-logger
      - kafka-proxy
      - key-auth
      - ldap-auth
      - limit-conn
      - limit-count
      - limit-req
      - loggly
      # - log-rotate
      - mocking
      # - node-status
      - opa
      - openid-connect
      - opentelemetry
      - openwhisk
      - prometheus
      - proxy-cache
      - proxy-control
      - proxy-mirror
      - proxy-rewrite
      - public-api
      - real-ip
      - redirect
      - referer-restriction
      - request-id
      - request-validation
      - response-rewrite
      - rocketmq-logger
      - server-info
      - serverless-post-function
      - serverless-pre-function
      - skywalking
      - skywalking-logger
      - sls-logger
      - splunk-hec-logging
      - syslog
      - tcp-logger
      - traffic-split
      - ua-restriction
      - udp-logger
      - uri-blocker
      - wolf-rbac
      - zipkin
      - elasticsearch-logge
      - openfunction
      - tencent-cloud-cls
      - ai
      - cas-auth
---
# Source: apisix/templates/data-plane/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-data-plane-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
data:
  00_default_config.yaml: |
    
    apisix:
      node_listen: 9080
      enable_admin: false
      ssl:
        enable: true
        listen:
          - port: 9443
        ssl_trusted_certificate: /bitnami/certs/ca.crt
      enable_http2: true
      control:
        ip: 0.0.0.0
        port: 9090
    nginx_config:
      error_log: /dev/stderr
      stream:
        access_log: /dev/stdout
      http:
        access_log: /dev/stdout
      http_configuration_snippet: |
        proxy_buffering off;
    deployment:
      role: data_plane
      role_data_plane:
        config_provider: etcd
        control_plane:
          host:
            - https://my-release-apisix-control-plane:9280
          prefix: /apisix
          timeout: 30
      etcd:
        host:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
        prefix: /apisix
        timeout: 30
        use_grpc: false
        startup_retry: 60
      certs:
        cert: /bitnami/certs/tls.crt
        cert_key: /bitnami/certs/tls.key
        client_ca_cert: /bitnami/certs/ca.crt
    discovery:
      kubernetes:
        service:
          # apiserver schema, options [http, https]
          schema: https #default https
    
          # apiserver host, options [ipv4, ipv6, domain, environment variable]
          host: ${KUBERNETES_SERVICE_HOST} #default ${KUBERNETES_SERVICE_HOST}
    
          # apiserver port, options [port number, environment variable]
          port: ${KUBERNETES_SERVICE_PORT}  #default ${KUBERNETES_SERVICE_PORT}
    
        client:
          # serviceaccount token or token_file
          token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
        default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0
---
# Source: apisix/templates/ingress-controller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-ingress-controller-default
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
data:
  config.yaml: |
    # log options
    log_level: "info"
    log_output: "stderr"
    https_listen: ":8443"
    cert_file: "/bitnami/certs/tls.crt"
    key_file: "/bitnami/certs/tls.key"
    http_listen: ":8080"
    ingress_publish_service: "default/my-release-apisix-data-plane"
    enable_profiling: true
    apisix-resource-sync-interval: 1h
    kubernetes:
      kubeconfig: ""
      resync_interval: "6h"
      election_id: "my-release-apisix-ingress-controller-leader"
      ingress_class: "apisix"
      ingress_version: "networking/v1"
      watch_endpointslices: false
      apisix_route_version: "apisix.apache.org/v2"
      enable_gateway_api: false
      apisix_version: "apisix.apache.org/v2"
      plugin_metadata_cm: ""
    apisix:
      admin_api_version: "v3"
      default_cluster_base_url: https://my-release-apisix-control-plane:9180/apisix/admin
      default_cluster_admin_key: "{{APISIX_ADMIN_API_TOKEN}}"
      default_cluster_name: "default"
---
# Source: apisix/templates/control-plane/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-control-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: apisix/templates/data-plane/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-data-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: apisix/templates/ingress-controller/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-ingress-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - pods
      - services
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - apisix.apache.org
    resources:
      - apisixroutes
      - apisixroutes/status
      - apisixupstreams
      - apisixupstreams/status
      - apisixtlses
      - apisixtlses/status
      - apisixclusterconfigs
      - apisixclusterconfigs/status
      - apisixconsumers
      - apisixconsumers/status
      - apisixpluginconfigs
      - apisixpluginconfigs/status
      - apisixglobalrules
      - apisixglobalrules/status
    verbs:
      - '*'
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - '*'
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes
      - tlsroutes
      - gateways
      - gatewayclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes/status
      - tlsroutes/status
      - gateways/status
      - gatewayclasses/status
    verbs:
      - update
---
# Source: apisix/templates/control-plane/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-control-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-default-control-plane
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-control-plane
    namespace: "default"
---
# Source: apisix/templates/data-plane/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-data-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-default-data-plane
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-data-plane
    namespace: "default"
---
# Source: apisix/templates/ingress-controller/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-default-ingress-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-default-ingress-controller
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-ingress-controller
    namespace: "default"
---
# Source: apisix/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-etcd-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: client
    - name: peer
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: apisix/charts/etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: apisix/templates/control-plane/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-control-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: https-admin-api
      port: 9180
      protocol: TCP
      nodePort: null
      targetPort: https-admin-api
    - name: https-cfg-srv
      port: 9280
      protocol: TCP
      nodePort: null
      targetPort: https-cfg-srv
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
---
# Source: apisix/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
---
# Source: apisix/templates/data-plane/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-data-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
---
# Source: apisix/templates/ingress-controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      nodePort: null
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
---
# Source: apisix/templates/control-plane/dep-ds.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-control-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
  template:
    metadata:
      annotations:
        checksum/config: 03701bb37ecb751c74089e7ef7616e3f744c36091927d2b95fd7589a1da6497d
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 6f9065bbbb2ad5787035383b8bc7361bcdef54a5420a5d3bab121473365b0064
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.9.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: control-plane
    spec:
      serviceAccountName: my-release-apisix-control-plane
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: control-plane
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-etcd
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              etcd_hosts=(
                "http://my-release-etcd:2379"
              )
        
              check_etcd() {
                  local -r etcd_host="${1:-?missing etcd}"
                  if curl --max-time 5 "${etcd_host}/version" | grep etcdcluster; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${etcd_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_etcd $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: prepare-apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              cp -R /opt/bitnami/apisix/conf /usr/local/apisix
              ln -sf /opt/bitnami/apisix/deps /usr/local/apisix
              ln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix
              mkdir -p /usr/local/apisix/logs
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /usr/local/apisix/conf/pre-render-config.yaml
              render-template /usr/local/apisix/conf/pre-render-config.yaml > /usr/local/apisix/conf/config.yaml
              rm /usr/local/apisix/conf/pre-render-config.yaml
              chmod 644 /usr/local/apisix/conf/config.yaml
              apisix init
              apisix init_etcd
              # The path is hardcoded in the conf so we need to copy them to the server folder
              cp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt
              cp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - openresty
          args:
            - -p
            - /usr/local/apisix
            - -g
            - "daemon off;"
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: https-admin-api
              containerPort: 9180
            - name: https-cfg-srv
              containerPort: 9280
            - name: http-control
              containerPort: 9090
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-control
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /v1/healthcheck
              port: http-control
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-control-plane-default
        - name: certs
          secret:
            secretName: my-release-apisix-control-plane-tls
        - name: empty-dir
          emptyDir: {}
---
# Source: apisix/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  strategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      annotations:
        checksum/config: 61142c40ac97fb01eb7fc50ff2a950a2c7cdb436cbf3cba539d4731733a6e37e
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 29e71330b69f434cf7a89a992b2d6ac3e5d365af4c130f78db933f753ee6d190
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.0.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: dashboard
    spec:
      serviceAccountName: my-release-apisix-dashboard
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: csi-provider
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-etcd
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              etcd_hosts=(
                "http://my-release-etcd:2379"
              )
        
              check_etcd() {
                  local -r etcd_host="${1:-?missing etcd}"
                  if curl --max-time 5 "${etcd_host}/version" | grep etcdcluster; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${etcd_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_etcd $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: render-conf
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /bitnami/apisix/rendered-conf/pre-render-config.yaml
              render-template /bitnami/apisix/rendered-conf/pre-render-config.yaml > /bitnami/apisix/rendered-conf/config.yaml
              chmod 644 /bitnami/apisix/rendered-conf/config.yaml
              rm /bitnami/apisix/rendered-conf/pre-render-config.yaml
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
            - name: APISIX_DASHBOARD_USER
              value: "user"
            - name: APISIX_DASHBOARD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-dashboard
                  key: password
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/rendered-conf
              subPath: app-conf-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix-dashboard
          image: docker.io/bitnami/apisix-dashboard:3.0.1-debian-12-r34
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -c
            - /bitnami/apisix/conf/config.yaml
            - -p
            - /opt/bitnami/apisix-dashboard
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/apisix-dashboard/logs
              subPath: app-logs-dir
            - name: certs
              mountPath: /bitnami/certs
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-dashboard-default
        - name: certs
          secret:
            secretName: my-release-apisix-dashboard-tls
        - name: empty-dir
          emptyDir: {}
---
# Source: apisix/templates/data-plane/dep-ds.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-data-plane
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
  template:
    metadata:
      annotations:
        checksum/config: 619b992e02bea2dfcf564e9f36ca33d2d4626b61f1615e6090078218aed165e3
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 57a6ae54287b6df0e93db3a18b26714d6cb30ba4116600346407bd27383ffb90
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.9.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: data-plane
    spec:
      serviceAccountName: my-release-apisix-data-plane
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: data-plane
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-control-plane
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              host="https://my-release-apisix-control-plane:9180"
        
              check_control_plane() {
                  if curl --max-time 5 -k -I "$host"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              echo "Checking connection to $host"
              if retry_while "check_control_plane"; then
                  echo "Connected to $host"
              else
                  echo "Error connecting to $host"
                  exit 1
              fi
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: prepare-apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              cp -R /opt/bitnami/apisix/conf /usr/local/apisix
              ln -sf /opt/bitnami/apisix/deps /usr/local/apisix
              ln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix
              mkdir -p /usr/local/apisix/logs
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /usr/local/apisix/conf/pre-render-config.yaml
              render-template /usr/local/apisix/conf/pre-render-config.yaml > /usr/local/apisix/conf/config.yaml
              rm /usr/local/apisix/conf/pre-render-config.yaml
              chmod 644 /usr/local/apisix/conf/config.yaml
              apisix init
              # The path is hardcoded in the conf so we need to copy them to the server folder
              cp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt
              cp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - openresty
          args:
            - -p
            - /usr/local/apisix
            - -g
            - "daemon off;"
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 9080
            - name: https
              containerPort: 9443
            - name: http-control
              containerPort: 9090
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-control
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /v1/healthcheck
              port: http-control
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
            - name: control-plane-certs
              mountPath: /etc/ssl/certs/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-data-plane-default
        - name: certs
          secret:
            secretName: my-release-apisix-data-plane-tls
        - name: empty-dir
          emptyDir: {}
        - name: control-plane-certs
          secret:
            secretName: my-release-apisix-control-plane-tls
---
# Source: apisix/templates/ingress-controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
  template:
    metadata:
      annotations:
        checksum/config: 2a7ca83ecf729566f63a52280d6515cc24b58e3a91ee069081c3f673904d70d3
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 21548da8a79e0289c173854d08495868d3dd91dac30d32c34dfca0f3e8a240e7
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 1.8.2
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: ingress-controller
    spec:
      serviceAccountName: my-release-apisix-ingress-controller
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-control-plane
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              host="https://my-release-apisix-control-plane:9180"
        
              check_control_plane() {
                  if curl --max-time 5 -k -I "$host"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              echo "Checking connection to $host"
              if retry_while "check_control_plane"; then
                  echo "Connected to $host"
              else
                  echo "Error connecting to $host"
                  exit 1
              fi
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: render-conf
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /bitnami/apisix/rendered-conf/pre-render-config.yaml
              render-template /bitnami/apisix/rendered-conf/pre-render-config.yaml > /bitnami/apisix/rendered-conf/config.yaml
              chmod 644 /bitnami/apisix/rendered-conf/config.yaml
              rm /bitnami/apisix/rendered-conf/pre-render-config.yaml
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/rendered-conf
              subPath: app-conf-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix-ingress-controller
          image: docker.io/bitnami/apisix-ingress-controller:1.8.2-debian-12-r6
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - ingress
            - --config-path
            - /bitnami/apisix-ingress-controller/conf/config.yaml
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix-ingress-controller/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
            - name: control-plane-certs
              mountPath: /etc/ssl/certs/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-ingress-controller-default
        - name: empty-dir
          emptyDir: {}
        - name: certs
          secret:
            secretName: my-release-apisix-ingress-controller-tls
        - name: control-plane-certs
          secret:
            secretName: my-release-apisix-control-plane-tls
---
# Source: apisix/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-etcd
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  serviceName: my-release-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: etcd
        app.kubernetes.io/version: 3.5.14
        helm.sh/chart: etcd-10.2.1
        app.kubernetes.io/component: etcd
      annotations:
        checksum/token-secret: b83d25645fd7cee248a2c3a799646ab61aaddf01eb0940bec4e1fb8110925b55
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: etcd
                    app.kubernetes.io/component: etcd
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: "my-release-etcd"
      containers:
        - name: etcd
          image: docker.io/bitnami/etcd:3.5.14-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_STS_NAME
              value: "my-release-etcd"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_AUTH_TOKEN
              value: "jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=10m"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).my-release-etcd-headless.default.svc.cluster.local:2379,http://my-release-etcd.default.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).my-release-etcd-headless.default.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster-k8s"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER
              value: "my-release-etcd-0=http://my-release-etcd-0.my-release-etcd-headless.default.svc.cluster.local:2380,my-release-etcd-1=http://my-release-etcd-1.my-release-etcd-headless.default.svc.cluster.local:2380,my-release-etcd-2=http://my-release-etcd-2.my-release-etcd-headless.default.svc.cluster.local:2380"
            - name: ETCD_CLUSTER_DOMAIN
              value: "my-release-etcd-headless.default.svc.cluster.local"
          envFrom:
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            httpGet:
              port: 2379 
              path: /livez
              scheme: "HTTP"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - /opt/bitnami/scripts/etcd/prestop.sh
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/etcd/conf/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: data
              mountPath: /bitnami/etcd
            - name: etcd-jwt-token
              mountPath: /opt/bitnami/etcd/certs/token/
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: etcd-jwt-token
          secret:
            secretName: my-release-etcd-jwt-token
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
