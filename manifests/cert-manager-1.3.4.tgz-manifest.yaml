---
# Source: cert-manager/templates/cainjector/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-cert-manager-cainjector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: cainjector
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: cert-manager/templates/controller/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-cert-manager-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: controller
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9402
---
# Source: cert-manager/templates/webhook/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: webhook
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10250
---
# Source: cert-manager/templates/cainjector/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-cert-manager-cainjector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: cainjector
---
# Source: cert-manager/templates/controller/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-cert-manager-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: controller
---
# Source: cert-manager/templates/webhook/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: webhook
---
# Source: cert-manager/templates/cainjector/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-cert-manager-cainjector
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
  annotations:
    {}
  namespace: "default"
---
# Source: cert-manager/templates/controller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-cert-manager-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
  annotations:
    {}
  namespace: "default"
---
# Source: cert-manager/templates/webhook/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-cert-manager-webhook
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
  annotations:
    {}
  namespace: "default"
---
# Source: cert-manager/templates/cainjector/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-cainjector
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "create", "update", "patch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["auditregistration.k8s.io"]
    resources: ["auditsinks"]
    verbs: ["get", "list", "watch", "update"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-issuers
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "issuers/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-clusterissuers
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "clusterissuers/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-certificates
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/finalizers", "certificaterequests/finalizers"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-orders
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "orders/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["create", "delete"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-challenges
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  # Use to update challenge resource status
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "challenges/status"]
    verbs: ["update"]
  # Used to watch challenge resources
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["get", "list", "watch"]
  # Used to watch challenges, issuer and clusterissuer resources
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  # Need to be able to retrieve ACME account private key to complete challenges
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  # Used to create events
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # HTTP01 rules
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes/custom-host"]
    verbs: ["create"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges/finalizers"]
    verbs: ["update"]
  # DNS01 rules (duplicated above)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "gateway.networking.k8s.io" ]
    resources: [ "httproutes" ]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-ingress-shim
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gateways", "httproutes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gateways/finalizers", "httproutes/finalizers"]
    verbs: ["update"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-view
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "orders"]
    verbs: ["get", "list", "watch"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-edit
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "orders"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-controller-controller-approve
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cert-manager
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["signers"]
    verbs: ["approve"]
    resourceNames: ["issuers.cert-manager.io/*", "clusterissuers.cert-manager.io/*"]
---
# Source: cert-manager/templates/webhook/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-webhook-subjectaccessreviews
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
rules:
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
---
# Source: cert-manager/templates/cainjector/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-cainjector
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-cainjector
subjects:
  - name: my-release-cert-manager-cainjector
    namespace: "default"
    kind: ServiceAccount
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-issuers
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-issuers
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-clusterissuers
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-clusterissuers
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-certificates
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-certificates
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-orders
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-orders
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-challenges
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-challenges
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-ingress-shim
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-ingress-shim
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-controller-controller-approve
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-controller-controller-approve
subjects:
  - kind: ServiceAccount
    namespace: "default"
    name: my-release-cert-manager-controller
---
# Source: cert-manager/templates/webhook/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-webhook-subjectaccessreviews
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-webhook-subjectaccessreviews
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: my-release-cert-manager-webhook
  namespace: "default"
---
# Source: cert-manager/templates/cainjector/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cert-manager-cainjector-leader-election
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cert-manager-cainjector-leader-election", "cert-manager-cainjector-leader-election-core"]
    verbs: ["get", "update", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create"]
  - apiGroups: [ "coordination.k8s.io" ]
    resources: [ "leases" ]
    resourceNames: [ "cert-manager-controller" ]
    verbs: [ "get", "update", "patch" ]
  - apiGroups: [ "coordination.k8s.io" ]
    resources: [ "leases" ]
    verbs: [ "create", "get", "update" ]
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cert-manager-controller-leader-election
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cert-manager-controller"]
    verbs: ["get", "update", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    resourceNames: ["cert-manager-controller"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
---
# Source: cert-manager/templates/webhook/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cert-manager-webhook-dynamic-serving
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames:
  - 'my-release-cert-manager-webhook-ca'
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
# Source: cert-manager/templates/cainjector/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cert-manager-cainjector-leader-election
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-cert-manager-cainjector-leader-election
subjects:
  - kind: ServiceAccount
    name: my-release-cert-manager-cainjector
    namespace: "default"
---
# Source: cert-manager/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cert-manager-controller-leader-election
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-cert-manager-controller-leader-election
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-cert-manager-controller
    namespace: "default"
---
# Source: cert-manager/templates/webhook/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cert-manager-webhook-dynamic-serving
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-cert-manager-webhook-dynamic-serving
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: my-release-cert-manager-webhook
  namespace: "default"
---
# Source: cert-manager/templates/controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cert-manager-controller-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
spec:
  type: ClusterIP
  ports:
    - name: controller
      port: 9402
      protocol: TCP
      targetPort: 9402
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: controller
---
# Source: cert-manager/templates/webhook/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
spec:
  type: ClusterIP
  ports:
    - name: https
      port: 443
      targetPort: 10250
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/component: webhook
---
# Source: cert-manager/templates/cainjector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cert-manager-cainjector
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: cainjector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: cainjector
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/version: 1.15.0
        helm.sh/chart: cert-manager-1.3.4
        app.kubernetes.io/component: cainjector
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: cert-manager
                    app.kubernetes.io/component: cainjector
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: true
      initContainers:
      serviceAccountName: my-release-cert-manager-cainjector
      containers:
        - name: cainjector
          image: docker.io/bitnami/cainjector:1.15.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          args:
            - --v=2
            - --leader-election-namespace=kube-system
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          livenessProbe:
            # Using exec instead of tcpSocket to avoid noise in te logs
            exec:
              command:
                - pgrep
                - cainjector
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            # Using exec instead of tcpSocket to avoid noise in te logs
            exec:
              command:
                - pgrep
                - cainjector
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
      volumes:
---
# Source: cert-manager/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cert-manager-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: controller
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/version: 1.15.0
        helm.sh/chart: cert-manager-1.3.4
        app.kubernetes.io/component: controller
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '9402'
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: cert-manager
                    app.kubernetes.io/component: controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: true
      initContainers:
      serviceAccountName: my-release-cert-manager-controller
      containers:
        - name: cert-manager
          image: docker.io/bitnami/cert-manager:1.15.0-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          args:
            - --v=2
            - --metrics-listen-address=0.0.0.0:9402
            - --internal-healthz-listen-address=0.0.0.0:9403
            - --cluster-resource-namespace=$(POD_NAMESPACE)
            - --leader-election-namespace=kube-system
            - --acme-http01-solver-image=docker.io/bitnami/acmesolver:1.15.0-debian-12-r0
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          ports:
            - name: http
              protocol: TCP
              containerPort: 9402
            - name: health
              protocol: TCP
              containerPort: 9403
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              port: http
              path: /metrics
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
      volumes:
---
# Source: cert-manager/templates/webhook/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/component: webhook
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/version: 1.15.0
        helm.sh/chart: cert-manager-1.3.4
        app.kubernetes.io/component: webhook
      annotations:
    spec:
      hostNetwork: false
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: cert-manager
                    app.kubernetes.io/component: webhook
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: true
      initContainers:
      serviceAccountName: my-release-cert-manager-webhook
      containers:
        - name: cert-manager-webhook
          image: docker.io/bitnami/cert-manager-webhook:1.15.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          args:
            - --v=2
            - --secure-port=10250
            - --healthz-port=6080
            - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
            - --dynamic-serving-ca-secret-name=my-release-cert-manager-webhook-ca
            - --dynamic-serving-dns-names=my-release-cert-manager-webhook,my-release-cert-manager-webhook.default,my-release-cert-manager-webhook.default.svc
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          ports:
            - name: https
              containerPort: 10250
            - name: health
              containerPort: 6080
          livenessProbe:
             httpGet:
               path: /livez
               port: 6080
               scheme: HTTP
             initialDelaySeconds: 60
             periodSeconds: 10
             timeoutSeconds: 1
             successThreshold: 1
             failureThreshold: 3
          readinessProbe:
             httpGet:
               path: /healthz
               port: 6080
               scheme: HTTP
             initialDelaySeconds: 5
             periodSeconds: 5
             timeoutSeconds: 1
             successThreshold: 1
             failureThreshold: 3
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
      volumes:
---
# Source: cert-manager/templates/crds/crd-certificaterequests.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-certificaterequests.yaml
---
# Source: cert-manager/templates/crds/crd-certificates.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-certificates.yaml
---
# Source: cert-manager/templates/crds/crd-challenges.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-challenges.yaml
---
# Source: cert-manager/templates/crds/crd-clusterissuers.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-clusterissuers.yaml
---
# Source: cert-manager/templates/crds/crd-issuers.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-issuers.yaml
---
# Source: cert-manager/templates/crds/crd-orders.yaml
# Taken from https://raw.githubusercontent.com/cert-manager/cert-manager/v1.13.3/deploy/crds/crd-orders.yaml
---
# Source: cert-manager/templates/webhook/mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
  annotations:
    cert-manager.io/inject-ca-from-secret: "default/my-release-cert-manager-webhook-ca"
webhooks:
  - name: webhook.cert-manager.io
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - "v1"
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    admissionReviewVersions: ["v1"]
    # This webhook only accepts v1 cert-manager resources.
    # Equivalent matchPolicy ensures that non-v1 resource requests are sent to
    # this webhook (after the resources have been converted to v1).
    matchPolicy: Equivalent
    timeoutSeconds: 10
    failurePolicy: Fail
    # Only include 'sideEffects' field in Kubernetes 1.12+
    sideEffects: None
    clientConfig:
      service:
        name: my-release-cert-manager-webhook
        namespace: default
        path: /mutate
---
# Source: cert-manager/templates/webhook/validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: my-release-cert-manager-webhook
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: cert-manager-1.3.4
    app.kubernetes.io/component: webhook
  annotations:
    cert-manager.io/inject-ca-from-secret: "default/my-release-cert-manager-webhook-ca"
webhooks:
  - name: webhook.cert-manager.io
    namespaceSelector:
      matchExpressions:
      - key: "cert-manager.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - default
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - "v1"
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    admissionReviewVersions: ["v1"]
    # This webhook only accepts v1 cert-manager resources.
    # Equivalent matchPolicy ensures that non-v1 resource requests are sent to
    # this webhook (after the resources have been converted to v1).
    matchPolicy: Equivalent
    timeoutSeconds: 10
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: my-release-cert-manager-webhook
        namespace: default
        path: /validate
