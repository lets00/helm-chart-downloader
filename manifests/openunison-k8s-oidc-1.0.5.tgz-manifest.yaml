---
# Source: openunison-k8s-oidc/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
# Source: openunison-k8s-oidc/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: openunison-to-activemq
  namespace: default
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: default
  podSelector:
    matchLabels:
      app: amq-my-release
  policyTypes:
  - Ingress
---
# Source: openunison-k8s-oidc/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-ingress
  namespace: default
spec:
  podSelector:
    matchLabels:
      application: openunison-my-release
  ingress:
  - from:
    - namespaceSelector:
        matchLabels: 
            app.kubernetes.io/name: ingress-nginx
        
  policyTypes:
  - Ingress
---
# Source: openunison-k8s-oidc/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-prometheus
  namespace: default
spec:
  podSelector:
    matchLabels:
      application: openunison-my-release
  ingress:
  - from:
    - namespaceSelector:
        matchLabels: 
            app.kubernetes.io/name: monitoring
        
  policyTypes:
  - Ingress
---
# Source: openunison-k8s-oidc/templates/network-policies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-apiserver
  namespace: default
spec:
  podSelector:
    matchLabels:
      application: openunison-my-release
  ingress:
  - from:
    - namespaceSelector:
        matchLabels: 
            app.kubernetes.io/name: kube-system
        
  policyTypes:
  - Ingress
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-server-config
  namespace: openunison
data:
  oidc-api-server-flags: |-
                           --oidc-issuer-url=https://k8sou.apps.domain.int/auth/idp/k8sIdp
                           --oidc-client-id=kubernetes
                           --oidc-username-claim=sub
                           --oidc-groups-claim=groups
                           --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: list-namespaces
rules:
- apiGroups:
  - ''
  resources:
  - namespaces
  verbs:
  - list
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orchestra-certs
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  - certificatesigningrequests/approval
  verbs:
  - "*"
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-operator-update-validatingwebhooks
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  resourceNames: ["openunison-workflow-validation"]
  verbs:
  - get
  - list
  - watch
  - update
  - patch
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    audit2rbac.liggitt.net/version: v0.7.0
  labels:
    audit2rbac.liggitt.net/generated: "true"
    audit2rbac.liggitt.net/user: system-serviceaccount-openunison-openunison-orchestra
  name: audit2rbac:system:serviceaccount:openunison:openunison-orchestra
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-orchestra-cluster-administrators
subjects:
- kind: Group
  name: k8s-cluster-administrators
  apiGroup: rbac.authorization.k8s.io
- kind: ServiceAccount
  name: openunison-orchestra
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-cluster-list-namespaces
subjects:
- kind: Group
  name: users
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: list-namespaces
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orchestra-certs
subjects:
- kind: ServiceAccount
  name: openunison-operator
  namespace: default
roleRef:
  kind: ClusterRole
  name: orchestra-certs
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-operator-webhooks
subjects:
- kind: ServiceAccount
  name: openunison-operator
  namespace: openunison
roleRef:
  kind: ClusterRole
  name: openunison-operator-update-validatingwebhooks
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    audit2rbac.liggitt.net/version: v0.7.0
  labels:
    audit2rbac.liggitt.net/generated: "true"
    audit2rbac.liggitt.net/user: system-serviceaccount-openunison-openunison-orchestra
  name: audit2rbac:system:serviceaccount:openunison:openunison-orchestra
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: audit2rbac:system:serviceaccount:openunison:openunison-orchestra
subjects:
- kind: ServiceAccount
  name: openunison-orchestra
  namespace: openunison
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kubernetes-dashboard
  name: orchestra-dashboard
rules:
- apiGroups:
  - ''
  resources:
  - secrets
  - pods
  verbs:
  - "*"
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: openunison-secrets
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs:
  - get
  - list
  - watch
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: openunison-trusts-get
rules:
- apiGroups: ["openunison.tremolo.io"]
  resources: ["trusts","portalurls","orgs"]
  verbs:
  - get
  - list
  - watch
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: orchestra-dashboard
  namespace: kubernetes-dashboard
subjects:
- kind: ServiceAccount
  name: openunison-operator
  namespace: default
roleRef:
  kind: Role
  name: orchestra-dashboard
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-secrets
  namespace: default
subjects:
- kind: ServiceAccount
  name: openunison-orchestra
  namespace: default
roleRef:
  kind: Role
  name: openunison-secrets
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openunison-trusts-get
  namespace: default
subjects:
- kind: ServiceAccount
  name: openunison-orchestra
  namespace: default
roleRef:
  kind: Role
  name: openunison-trusts-get
  apiGroup: rbac.authorization.k8s.io
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
apiVersion: openunison.tremolo.io/v4
kind: OpenUnison
metadata:
  name: orchestra
  namespace: default
spec:
  dest_secret: orchestra
  enable_activemq: true
  activemq_image: docker.io/tremolosecurity/activemq-docker:latest
  hosts:
  - ingress_name: openunison
    names:
    - env_var: OU_HOST
      name: k8sou.apps.domain.int
    - env_var: K8S_DASHBOARD_HOST
      name: k8sdb.apps.domain.int
    
    secret_name: ou-tls-certificate
    ingress_type: nginx
    
    
    
    annotations: 
    - name: kubernetes.io/ingress.class
      value: "nginx"
      
    
  key_store:
    update_controller:
      image: docker.io/tremolosecurity/kubernetes-artifact-deployment:1.1.0
      schedule: 0 2 * * *
      days_to_expire: 10
    key_pairs:
      create_keypair_template:
      - name: ou
        value: Kubernetes
      - name: o
        value: MyOrg
      - name: l
        value: My Cluster
      - name: st
        value: State of Cluster
      - name: c
        value: MyCountry
      keys: 
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: openunison-my-release.openunison.svc
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: unison-tls
        
        
        - create_data:
            ca_cert: false
            key_size: 2048
            server_name: k8sou.apps.domain.int
            sign_by_k8s_ca: false
            subject_alternative_names:
              - k8sdb.apps.domain.int 
               
          import_into_ks: certificate
          name: unison-ca
          tls_secret_name: ou-tls-certificate
        
        - create_data:
            
            ca_cert: true
            
            key_size: 2048
            server_name: kubernetes-dashboard.kubernetes-dashboard.svc
            sign_by_k8s_ca: false
            subject_alternative_names: []
            target_namespace: kubernetes-dashboard
            secret_info:
              type_of_secret: Opaque
              cert_name: dashboard.crt
              key_name: dashboard.key
            delete_pods_labels:
              - k8s-app=kubernetes-dashboard
          
          import_into_ks: "certificate"
          
          name: kubernetes-dashboard
          tls_secret_name: kubernetes-dashboard-certs
          replace_if_exists: true
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: unison-saml2-rp-sig
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: unison-saml2-rp-sig
        - create_data:
            ca_cert: false
            key_size: 2048
            server_name: remote-k8s-idp-sig
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: remote-k8s-idp-sig
        - create_data:
            
            ca_cert: true
            
            key_size: 2048
            server_name: amq.openunison.svc
            sign_by_k8s_ca: false
            subject_alternative_names: []
          
          import_into_ks: "certificate"
          
          name: amq-server
          replace_if_exists: true
          tls_secret_name: orchestra-amq-server
        - create_data:
            ca_cert: true
            key_size: 2048
            server_name: amq-client
            sign_by_k8s_ca: false
            subject_alternative_names: []
          import_into_ks: keypair
          name: amq-client
          tls_secret_name: orchestra-amq-client
    static_keys: 
    - name: session-unison
      version: 1
    - name: lastmile-oidc
      version: 1
    
    
    
    trusted_certificates: 
      - name: idp-tls
        pem_data: SDFGSDFGHDFHSDFGSDGSDFGDS 
    
  non_secret_data: 
    - name: K8S_URL
      
      value: https://k8s-installer-master.tremolo.lan:6443
      
    - name: SESSION_INACTIVITY_TIMEOUT_SECONDS
      value: "900"
    - name: MYVD_CONFIG_PATH
      value: WEB-INF/myvd.conf
    - name: K8S_DASHBOARD_NAMESPACE
      value: kubernetes-dashboard
    - name: K8S_DASHBOARD_SERVICE
      value: kubernetes-dashboard
    - name: K8S_CLUSTER_NAME
      value: kubernetes
    - name: OU_HIBERNATE_DIALECT
      value: org.hibernate.dialect.MySQL5InnoDBDialect
    - name: OU_QUARTZ_DIALECT
      value: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
    - name: OU_JDBC_DRIVER
      value: com.mysql.jdbc.Driver
    - name: OU_JDBC_URL
      value: jdbc:mysql://dbs.tremolo.lan:3308/unison
    - name: OU_JDBC_USER
      value: root
    - name: OU_JDBC_VALIDATION
      value: SELECT 1
    - name: SMTP_HOST
      value: smtp.gmail.com
    - name: SMTP_PORT
      value: "587"
    - name: SMTP_USER
      value: donotreply@domain.com
    - name: SMTP_FROM
      value: donotreply@domain.com
    - name: SMTP_TLS
      value: "true"
    - name: K8S_IMPERSONATION
      value: "false"
    - name: PROMETHEUS_SERVICE_ACCOUNT
      value: system:serviceaccount:monitoring:prometheus-k8s
    - name: OU_SVC_NAME
      value: openunison-my-release.default.svc
    
    - name: K8S_TOKEN_TYPE
      value: legacy
    
    
    - name: OIDC_CLIENT_ID
      value: myid
    - name: OIDC_IDP_AUTH_URL
      value: https://www.myoidc.com/auth
    - name: OIDC_IDP_TOKEN_URL
      value: https://www.myoidc.com/token
    - name: OIDC_IDP_LIMIT_DOMAIN
      value: ""
    - name: SUB_CLAIM
      value: sub
    - name: EMAIL_CLAIM
      value: email
    - name: GIVEN_NAME_CLAIM
      value: given_name
    - name: FAMILY_NAME_CLAIM
      value: family_name
    - name: DISPLAY_NAME_CLAIM
      value: name
    - name: GROUPS_CLAIM
      value: groups
    - name: OIDC_USER_IN_IDTOKEN
      value: "false"
    - name: OIDC_IDP_USER_URL
      value: "https://www.myoidc.com/token/userinfo"
    - name: OIDC_SCOPES
      value: openid email profile groups
  openunison_network_configuration:
    activemq_dir: "/tmp/amq"
    allowed_client_names: []
    ciphers:
    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    client_auth: none
    force_to_secure: true
    open_external_port: 80
    open_port: 8080
    path_to_deployment: "/usr/local/openunison/work"
    path_to_env_file: "/etc/openunison/ou.env"
    quartz_dir: "/tmp/quartz"
    secure_external_port: 443
    secure_key_alias: unison-tls
    secure_port: 8443
  replicas: 1
  secret_data:
    - OIDC_CLIENT_SECRET
    - K8S_DB_SECRET
    - unisonKeystorePassword
    - SMTP_PASSWORD
    - OU_JDBC_PASSWORD
    
  source_secret: orchestra-secrets-source
  image: docker.io/tremolosecurity/openunison-k8s-idm-oidc:latest
  deployment_data:
    tokenrequest_api:
      enabled: false
      audience: api
      expirationSeconds: 600
    liveness_probe_command:
    - /usr/local/openunison/bin/check_alive.py
    readiness_probe_command:
    - /usr/local/openunison/bin/check_alive.py
    - "https://127.0.0.1:8443/auth/idp/k8sIdp/.well-known/openid-configuration"
    - "issuer"
    pull_secret: ""
    
    
    
    node_selectors: []
    
    
    
  run_sql: |-
              # By: Ron Cordell - roncordell
              #  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.


              # make sure you have UTF-8 collaction for best .NET interoperability
              # CREATE DATABASE quartznet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

              DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
              DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
              DROP TABLE IF EXISTS QRTZ_LOCKS;
              DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_TRIGGERS;
              DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
              DROP TABLE IF EXISTS QRTZ_CALENDARS;

              CREATE TABLE QRTZ_JOB_DETAILS(
              SCHED_NAME VARCHAR(120) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              JOB_CLASS_NAME VARCHAR(250) NOT NULL,
              IS_DURABLE BOOLEAN NOT NULL,
              IS_NONCONCURRENT BOOLEAN NOT NULL,
              IS_UPDATE_DATA BOOLEAN NOT NULL,
              REQUESTS_RECOVERY BOOLEAN NOT NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              JOB_NAME VARCHAR(200) NOT NULL,
              JOB_GROUP VARCHAR(200) NOT NULL,
              DESCRIPTION VARCHAR(250) NULL,
              NEXT_FIRE_TIME BIGINT(19) NULL,
              PREV_FIRE_TIME BIGINT(19) NULL,
              PRIORITY INTEGER NULL,
              TRIGGER_STATE VARCHAR(16) NOT NULL,
              TRIGGER_TYPE VARCHAR(8) NOT NULL,
              START_TIME BIGINT(19) NOT NULL,
              END_TIME BIGINT(19) NULL,
              CALENDAR_NAME VARCHAR(200) NULL,
              MISFIRE_INSTR SMALLINT(2) NULL,
              JOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
              REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              REPEAT_COUNT BIGINT(7) NOT NULL,
              REPEAT_INTERVAL BIGINT(12) NOT NULL,
              TIMES_TRIGGERED BIGINT(10) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CRON_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              CRON_EXPRESSION VARCHAR(120) NOT NULL,
              TIME_ZONE_ID VARCHAR(80),
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SIMPROP_TRIGGERS
                (          
                  SCHED_NAME VARCHAR(120) NOT NULL,
                  TRIGGER_NAME VARCHAR(200) NOT NULL,
                  TRIGGER_GROUP VARCHAR(200) NOT NULL,
                  STR_PROP_1 VARCHAR(512) NULL,
                  STR_PROP_2 VARCHAR(512) NULL,
                  STR_PROP_3 VARCHAR(512) NULL,
                  INT_PROP_1 INT NULL,
                  INT_PROP_2 INT NULL,
                  LONG_PROP_1 BIGINT NULL,
                  LONG_PROP_2 BIGINT NULL,
                  DEC_PROP_1 NUMERIC(13,4) NULL,
                  DEC_PROP_2 NUMERIC(13,4) NULL,
                  BOOL_PROP_1 BOOLEAN NULL,
                  BOOL_PROP_2 BOOLEAN NULL,
                  TIME_ZONE_ID VARCHAR(80) NULL,
                  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
                  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP) 
                  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_BLOB_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              BLOB_DATA BLOB NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
              INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),
              FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
              REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_CALENDARS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              CALENDAR_NAME VARCHAR(200) NOT NULL,
              CALENDAR BLOB NOT NULL,
              PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_FIRED_TRIGGERS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              ENTRY_ID VARCHAR(140) NOT NULL,
              TRIGGER_NAME VARCHAR(200) NOT NULL,
              TRIGGER_GROUP VARCHAR(200) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              FIRED_TIME BIGINT(19) NOT NULL,
              SCHED_TIME BIGINT(19) NOT NULL,
              PRIORITY INTEGER NOT NULL,
              STATE VARCHAR(16) NOT NULL,
              JOB_NAME VARCHAR(200) NULL,
              JOB_GROUP VARCHAR(200) NULL,
              IS_NONCONCURRENT BOOLEAN NULL,
              REQUESTS_RECOVERY BOOLEAN NULL,
              PRIMARY KEY (SCHED_NAME,ENTRY_ID))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_SCHEDULER_STATE (
              SCHED_NAME VARCHAR(120) NOT NULL,
              INSTANCE_NAME VARCHAR(200) NOT NULL,
              LAST_CHECKIN_TIME BIGINT(19) NOT NULL,
              CHECKIN_INTERVAL BIGINT(19) NOT NULL,
              PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
              ENGINE=InnoDB;

              CREATE TABLE QRTZ_LOCKS (
              SCHED_NAME VARCHAR(120) NOT NULL,
              LOCK_NAME VARCHAR(40) NOT NULL,
              PRIMARY KEY (SCHED_NAME,LOCK_NAME))
              ENGINE=InnoDB;

              CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);

              CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
              CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
              CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

              CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
              CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
              CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
              CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
              CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);

              DROP TABLE IF EXISTS ACTIVEMQ_ACKS;
              DROP TABLE IF EXISTS ACTIVEMQ_LOCK;
              DROP TABLE IF EXISTS ACTIVEMQ_MSGS;


              CREATE TABLE `ACTIVEMQ_ACKS` (
                `CONTAINER` varchar(250) NOT NULL,
                `SUB_DEST` varchar(250) DEFAULT NULL,
                `CLIENT_ID` varchar(250) NOT NULL,
                `SUB_NAME` varchar(250) NOT NULL,
                `SELECTOR` varchar(250) DEFAULT NULL,
                `LAST_ACKED_ID` bigint(20) DEFAULT NULL,
                `PRIORITY` bigint(20) NOT NULL DEFAULT '5',
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`CONTAINER`,`CLIENT_ID`,`SUB_NAME`,`PRIORITY`),
                KEY `ACTIVEMQ_ACKS_XIDX` (`XID`)
              );

              CREATE TABLE `ACTIVEMQ_LOCK` (
                `ID` bigint(20) NOT NULL,
                `TIME` bigint(20) DEFAULT NULL,
                `BROKER_NAME` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`)
              );

              CREATE TABLE `ACTIVEMQ_MSGS` (
                `ID` bigint(20) NOT NULL,
                `CONTAINER` varchar(250) NOT NULL,
                `MSGID_PROD` varchar(250) DEFAULT NULL,
                `MSGID_SEQ` bigint(20) DEFAULT NULL,
                `EXPIRATION` bigint(20) DEFAULT NULL,
                `MSG` mediumblob,
                `PRIORITY` bigint(20) DEFAULT NULL,
                `XID` varchar(250) DEFAULT NULL,
                PRIMARY KEY (`ID`),
                KEY `ACTIVEMQ_MSGS_MIDX` (`MSGID_PROD`,`MSGID_SEQ`),
                KEY `ACTIVEMQ_MSGS_CIDX` (`CONTAINER`),
                KEY `ACTIVEMQ_MSGS_EIDX` (`EXPIRATION`),
                KEY `ACTIVEMQ_MSGS_PIDX` (`PRIORITY`),
                KEY `ACTIVEMQ_MSGS_XIDX` (`XID`)
              );
              commit;
---
# Source: openunison-k8s-oidc/templates/openunison.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "openunison-workflow-validation"
webhooks:
- name: "workflows-openunison.tremolo.io"
  rules:
  - apiGroups:   ["openunison.tremolo.io"]
    apiVersions: ["v1"]
    operations:  ["CREATE","UPDATE"]
    resources:   ["workflows"]
    scope:       "Namespaced"
  clientConfig:
    service:
      namespace: default
      name: "openunison-my-release"
      path: /k8s/webhooks/v1/workflows
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVGekNDQXYrZ0F3SUJBZ0lHQVhWWU5KTXhNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JR1hNUkl3RUFZRFZRUUcNCkV3bE5lVU52ZFc1MGNua3hHVEFYQmdOVkJBZ1RFRk4wWVhSbElHOW1JRU5zZFhOMFpYSXhFekFSQmdOVkJBY1QNCkNrMTVJRU5zZFhOMFpYSXhEakFNQmdOVkJBb1RCVTE1VDNKbk1STXdFUVlEVlFRTEV3cExkV0psY201bGRHVnoNCk1Td3dLZ1lEVlFRREV5TnZjR1Z1ZFc1cGMyOXVMVzl5WTJobGMzUnlZUzV2Y0dWdWRXNXBjMjl1TG5OMll6QWUNCkZ3MHlNREV3TWpRd01USTBNREZhRncweU1URXdNalF3TVRJME1ERmFNSUdYTVJJd0VBWURWUVFHRXdsTmVVTnYNCmRXNTBjbmt4R1RBWEJnTlZCQWdURUZOMFlYUmxJRzltSUVOc2RYTjBaWEl4RXpBUkJnTlZCQWNUQ2sxNUlFTnMNCmRYTjBaWEl4RGpBTUJnTlZCQW9UQlUxNVQzSm5NUk13RVFZRFZRUUxFd3BMZFdKbGNtNWxkR1Z6TVN3d0tnWUQNClZRUURFeU52Y0dWdWRXNXBjMjl1TFc5eVkyaGxjM1J5WVM1dmNHVnVkVzVwYzI5dUxuTjJZekNDQVNJd0RRWUoNCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt0WW5Pd05wejhyNXNBQWVDRVcwaUM1WmcyNGoxMDINCjlvcFRMSFE2S3RzK0xVZlI4ekV4VFJncG54V1hIbjRTbitKcHl5d01tdktRU3hmT3lCak1nNmlvcDlNZXQ2b1QNCkhWNTlLb0lzM2t6bitFeHFvd0JoeVRyOGFmL3NZb1pXdTlrcXkxWmErcEgzQXpiSWdIM2JjNllGQkQrak8yWDENCmNtSXdCOXFFbytRU2IvOURQVE1tU0tvbGZCdndha1ZVME1lYUwwbGlYUVNlZG5yNHZvZ20xRWR3Y1hRWkxheXANCkVadUVmTDBySVY1bTJiMzhncWYrcnNTSU9QT0RNVWN2VFpmSnQxczZWK2xTTXA2ZVp6TG9GMlF5MVViOHhBQUkNCldYb3hWOXVMdXFFb1FxZEpKTWI3b0ZGVUUvTmpodkVoV0E0c3ljQ3A5Yk1qVi9YMUp2QXlzQTBDQXdFQUFhTm4NCk1HVXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWdRd0VnWURWUjBsQVFIL0JBZ3cNCkJnWUVWUjBsQURBdUJnTlZIUkVFSnpBbGdpTnZjR1Z1ZFc1cGMyOXVMVzl5WTJobGMzUnlZUzV2Y0dWdWRXNXANCmMyOXVMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWJ6dzlqV09tci9LMmdJdGdpVkd3UGFYRmNJZHMNCjNiamdvVkxYREJkVTFKK3lidm5EVnJEa2owNTlPRzVBOXhRTzEzWVEvbGIreVJNckEwZTdCWEVSR3oxZVlwZmsNCkZoczhCb3QrcENSRVlNMTU3cEtvOUpiN09FTVA4S0FET2xxMFpHYitqN2Zac0NSWlhSbzk5QUpmMms4R0s2WVoNCnFGZE43c1BXUnZXcDRBK2RRbVdPa1RKUVFhdVp5N1lvU1JROUFnSkxvdUxqbzd4QjdLM1hwTXBkNFl0UzBYd1kNClJxV0dreGh6eGtDaWJTZFhrSUFGSkZxc0pZVHFTdHQ4ZXdZaUQyL1Zob3ozcjJjZC8vcXZIWXljL1U5Zm9zM3UNCmR5R1NPWGhnS2pJSTRQblovOS9kemJDWFc0dlFFUVJEaENTTHpmSk5KS3NmMkt2aUNmM3BHa2tHNmc9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  admissionReviewVersions: ["v1"]
  sideEffects: None
  timeoutSeconds: 5
