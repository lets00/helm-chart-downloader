---
# Source: local-ai/templates/pvcs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-local-ai-models
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: local-ai
    app.kubernetes.io/version: "1.4"
    helm.sh/chart: local-ai-3.2.0
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "10Gi"
  storageClassName: "hostPath"
---
# Source: local-ai/templates/pvcs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-local-ai-output
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: local-ai
    app.kubernetes.io/version: "1.4"
    helm.sh/chart: local-ai-3.2.0
spec:
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: "5Gi"
  storageClassName: "hostPath"
---
# Source: local-ai/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-local-ai
  namespace: "default"
  labels:
    helm.sh/chart: local-ai-3.2.0
    app.kubernetes.io/name: local-ai
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.4"
spec:
  selector:
    app.kubernetes.io/name: local-ai
  type: "ClusterIP"
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      name: http
---
# Source: local-ai/templates/deployment.yaml
# yamllint disable rule:line-length

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-local-ai
  namespace: "default"
  labels:
    helm.sh/chart: local-ai-3.2.0
    app.kubernetes.io/name: local-ai
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.4"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: local-ai
      app.kubernetes.io/instance: my-release
  replicas: 1
  template:
    metadata:
      name: my-release-local-ai
      labels:
        app.kubernetes.io/name: local-ai
        app.kubernetes.io/instance: my-release
      annotations:
    spec:
      initContainers:
        # Additional initContainers from values.yaml
        - name: download-model
          image: busybox
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              MODEL_DIR=/models
              FORCE_DOWNLOAD=false
              URLS=""
              LOCK_DIR=/tmp/model-download-locks

              mkdir -p "$MODEL_DIR"
              mkdir -p "$LOCK_DIR"
              mkdir -p "/tmp/generated/images"
              mkdir -p "/tmp/generated/audio"
              rm -rf "/models/lost+found"

              validate_url() {
                  local url=$1
                  local regex='^(https?|ftp)://[a-zA-Z0-9.-]+(:[a-zA-Z0-9.-]+)?(/[a-zA-Z0-9.-]*)*$'
                  if [[ $url =~ $regex ]]; then
                      return 0 # URL is valid
                  else
                      return 1 # URL is invalid
                  fi
              }

              echo "List of URLs:"
              echo "$URLS"

              echo "$URLS" | awk -F, '{for (i=1; i<=NF; i++) print $i}' | while read -r line; do
                  url=$(echo "$line" | awk '{print $1}')
                  auth=$(echo "$line" | awk '{print $2}')
                  full_filename=$(basename "$url" .bin)
                  short_filename=$(echo "$full_filename" | cut -c1-20)
                  hash=$(echo "$full_filename" | sha256sum | cut -c1-12)
                  filename="${short_filename}_${hash}"
                  lockfile="$LOCK_DIR/$filename.lock"

                  # Validate URL
                  if ! validate_url "$url"; then
                      echo "Invalid URL: $url. Skipping download."
                      continue
                  fi

                  if [ -e "$MODEL_DIR/$filename" ]; then
                      echo "File $filename already exists. Skipping download."
                      continue
                  fi

                  if [ -e "$lockfile" ]; then
                      echo "Another pod is downloading $filename. Waiting for download to complete."
                      while [ -e "$lockfile" ]; do sleep 1; done
                      continue
                  fi

                  touch "$lockfile"

                  echo "Downloading $filename"
                  if [ -n "$auth" ]; then
                      wget --header "Authorization: Basic $auth" "$url" -O "$MODEL_DIR/$filename"
                  else
                      wget "$url" -O "$MODEL_DIR/$filename"
                  fi

                  if [ "$?" -ne 0 ]; then
                      echo "Download failed."
                      rm -f "$lockfile"
                      exit 1
                  else
                      echo "Download completed."
                      rm -f "$lockfile"
                  fi
              done

          volumeMounts:
            - name: models
              mountPath: /models
            - name: output
              mountPath: /tmp/generated

      containers:
        # Sidecar containers from values.yaml
        - name: my-release-local-ai
          image: "quay.io/go-skynet/local-ai:latest"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
            - name: CONTEXT_SIZE
              value: "512"
            - name: THREADS
              value: "4"
            - name: MODELS_PATH
              value: /models
          volumeMounts:
            - name: models
              mountPath: /models
            - name: output
              mountPath: /tmp/generated
      volumes:
        - name: models
          persistentVolumeClaim:
            claimName: my-release-local-ai-models
        - name: output
          persistentVolumeClaim:
            claimName: my-release-local-ai-output
        - name: prompt-templates
          configMap:
            name: my-release-local-ai-prompt-templates
