---
# Source: kube-agent-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mw-service-account
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kube-agent-chart/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  name: mw-cluster-role-helm
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

  # Other resources
  - apiGroups: [""]
    resources: ["nodes", "namespaces", "pods", "serviceaccounts", "services", "configmaps", "endpoints", "persistentvolumeclaims", "replicationcontrollers", "replicationcontrollers/scale", "persistentvolumeclaims", "persistentvolumes", "bindings", "events", "limitranges", "namespaces/status", "pods/log", "pods/status", "replicationcontrollers/status", "resourcequotas", "resourcequotas/status"]
    verbs: ["get", "list", "watch"]
  
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "deployments/scale", "replicasets", "replicasets/scale", "statefulsets"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["batch"]
    resources: ["cronjobs", "jobs"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["extensions"]
    resources: ["daemonsets", "deployments", "deployments/scale", "networkpolicies", "replicasets", "replicasets/scale", "replicationcontrollers/scale"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "networkpolicies"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "volumeattachments"]
    verbs: ["get", "list", "watch"]

  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterrolebindings", "clusterroles", "roles", "rolebindings", ]
    verbs: ["get", "list", "watch"]
---
# Source: kube-agent-chart/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mw-cluster-role-helm-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mw-cluster-role-helm
subjects:
  - kind: ServiceAccount
    name: mw-service-account
    namespace: default
---
# Source: kube-agent-chart/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  name: mw-role
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["mw-app-key-holder", "mw-app-certs", "mw-app-csrf"]
    verbs: ["get", "update", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/exec"]
    verbs: ["get", "list", "delete", "patch", "create"]
    # Allow Dashboard to get and update 'mw-app-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["mw-app-settings"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]
---
# Source: kube-agent-chart/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mw-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mw-role
subjects:
  - kind: ServiceAccount
    name: mw-service-account
---
# Source: kube-agent-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kube-agent-chart
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 4317
      targetPort: 4317
      protocol: TCP
      name: grpc
    - port: 4318
      targetPort: 4318
      protocol: TCP
      name: fluent
    - port: 8006
      targetPort: 8006
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
---
# Source: kube-agent-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kube-agent-chart
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-agent-chart
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-agent-chart
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: mw-service-account
      securityContext:
        {}
      containers:
        - name: kube-agent-chart
          securityContext:
            {}
          image: "ghcr.io/middleware-labs/agent-kube-go:dev"
          imagePullPolicy: IfNotPresent
          args:
            - api-server
            - start
          env:
            - name: TARGET
              value: MW_TARGET
            - name: MW_API_KEY
              value: MW_API_KEY
          # ports:
          #   - name: http
          #     containerPort: 4318
          #     protocol: TCP
          #   - name: grpc
          #     containerPort: 4317
          #     protocol: TCP
          #   - name: fluent
          #     containerPort: 8006
          #     protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 4317
          readinessProbe:
            tcpSocket:
              port: 4317
          resources:
            {}
---
# Source: kube-agent-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-kube-agent-chart-test-connection"
  labels:
    helm.sh/chart: kube-agent-chart-0.1.2
    app.kubernetes.io/name: kube-agent-chart
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-kube-agent-chart:80']
  restartPolicy: Never
