---
# Source: aws-multi-ecr-credentials/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: my-release-ns
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: aws-multi-ecr-credentials/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-account
  namespace: my-release-ns
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: aws-multi-ecr-credentials/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-secret
  namespace: my-release-ns
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  AWS_ACCESS_KEY_ID: 
  AWS_SECRET_ACCESS_KEY:
---
# Source: aws-multi-ecr-credentials/templates/service-account.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-account
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: my-release-account
    namespace: my-release-ns
---
# Source: aws-multi-ecr-credentials/templates/job.yml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-job
  namespace: my-release-ns
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
            app.kubernetes.io/name: aws-multi-ecr-credentials
            helm.sh/chart: aws-multi-ecr-credentials-1.4.3
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/version: "1.4.3"
    spec:
      serviceAccountName: my-release-account
      terminationGracePeriodSeconds: 0
      restartPolicy: Never
      containers:
        - name: kubectl
          imagePullPolicy: IfNotPresent
          image: amazon/aws-cli:latest
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-secret
                  key: AWS_ACCESS_KEY_ID

            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-secret
                  key: AWS_SECRET_ACCESS_KEY
          command:
            - "/bin/sh"
            - "-c"
            - |
              set -e #stop script because of error

              #fetching docker password
              DOCKER_REGISTRY_SERVER=https://.dkr.ecr..amazonaws.com
              DOCKER_USER=AWS
              DOCKER_PASSWORD=`aws ecr get-login-password --region `

              #download latest kubectl binary app
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl

              #delete old secret
              ./kubectl delete secret --namespace default aws-registry- || true

              #create new secret (.dockerconfigjson)
              ./kubectl create secret --namespace default docker-registry aws-registry- \
              --docker-server=$DOCKER_REGISTRY_SERVER \
              --docker-username=$DOCKER_USER \
              --docker-password=$DOCKER_PASSWORD \
              --docker-email=no@email.local
              ./kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"aws-registry-"}]}'
---
# Source: aws-multi-ecr-credentials/templates/cron.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: my-release-cron
  namespace: my-release-ns
  labels:
    app.kubernetes.io/name: aws-multi-ecr-credentials
    helm.sh/chart: aws-multi-ecr-credentials-1.4.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.3"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: ""
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2  
  jobTemplate:
    spec:
      backoffLimit: 4
      template:
        metadata:
          labels:
            app.kubernetes.io/name: aws-multi-ecr-credentials
            helm.sh/chart: aws-multi-ecr-credentials-1.4.3
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/version: "1.4.3"
        spec:
          serviceAccountName: my-release-account
          terminationGracePeriodSeconds: 0
          restartPolicy: Never
          containers:
          - name: kubectl
            imagePullPolicy: IfNotPresent
            image: amazon/aws-cli:latest
            env:
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: my-release-secret
                    key: AWS_ACCESS_KEY_ID

              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: my-release-secret
                    key: AWS_SECRET_ACCESS_KEY

            command:
            - "/bin/sh"
            - "-c"
            - |
              set -e #stop script because of error

              #fetching docker password
              DOCKER_REGISTRY_SERVER=https://.dkr.ecr..amazonaws.com
              DOCKER_USER=AWS
              DOCKER_PASSWORD=`aws ecr get-login-password --region `

              #download latest kubectl binary app
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl

              #delete old secret
              ./kubectl delete secret --namespace default aws-registry- || true

              #create new secret (.dockerconfigjson)
              ./kubectl create secret --namespace default docker-registry aws-registry- \
              --docker-server=$DOCKER_REGISTRY_SERVER \
              --docker-username=$DOCKER_USER \
              --docker-password=$DOCKER_PASSWORD \
              --docker-email=no@email.local
              ./kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"aws-registry-"}]}'
