---
# Source: clowder2/charts/elasticsearch/templates/coordinating/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-elasticsearch-coordinating
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: coordinating-only
automountServiceAccountToken: false
---
# Source: clowder2/charts/elasticsearch/templates/data/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-elasticsearch-data
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: data
automountServiceAccountToken: false
---
# Source: clowder2/charts/elasticsearch/templates/ingest/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-elasticsearch-ingest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: ingest
automountServiceAccountToken: false
---
# Source: clowder2/charts/elasticsearch/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
automountServiceAccountToken: false
---
# Source: clowder2/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
automountServiceAccountToken: true
---
# Source: clowder2/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
automountServiceAccountToken: true
secrets:
  - name: my-release-minio
---
# Source: clowder2/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "5.0.10"
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: clowder2/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
automountServiceAccountToken: true
secrets:
  - name: my-release-rabbitmq
---
# Source: clowder2/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-clowder2
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: clowder2/charts/keycloak/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.2.0"
type: Opaque
data:
  postgres-password: "cGFzc3dvcmQ="
  password: "cGFzc3dvcmQ="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: clowder2/charts/keycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "YWRtaW4="
---
# Source: clowder2/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
type: Opaque
data:
  root-user: "bWluaW9hZG1pbg=="
  root-password: "bWluaW9hZG1pbg=="
---
# Source: clowder2/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IGd1ZXN0CmRlZmF1bHRfcGFzcyA9IENIQU5HRU1FCiMjIENsdXN0ZXJpbmcKIyMKY2x1c3Rlcl9mb3JtYXRpb24ucGVlcl9kaXNjb3ZlcnlfYmFja2VuZCAgPSByYWJiaXRfcGVlcl9kaXNjb3ZlcnlfazhzCmNsdXN0ZXJfZm9ybWF0aW9uLms4cy5ob3N0ID0ga3ViZXJuZXRlcy5kZWZhdWx0CmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5pbnRlcnZhbCA9IDEwCmNsdXN0ZXJfZm9ybWF0aW9uLm5vZGVfY2xlYW51cC5vbmx5X2xvZ193YXJuaW5nID0gdHJ1ZQpjbHVzdGVyX3BhcnRpdGlvbl9oYW5kbGluZyA9IGF1dG9oZWFsCiMgcXVldWUgbWFzdGVyIGxvY2F0b3IKcXVldWVfbWFzdGVyX2xvY2F0b3IgPSBtaW4tbWFzdGVycwojIGVuYWJsZSBndWVzdCB1c2VyCmxvb3BiYWNrX3VzZXJzLmd1ZXN0ID0gZmFsc2UKI2RlZmF1bHRfdmhvc3QgPSBkZWZhdWx0LXZob3N0CiNkaXNrX2ZyZWVfbGltaXQuYWJzb2x1dGUgPSA1ME1C
---
# Source: clowder2/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
type: Opaque
data:
  rabbitmq-password: "Z3Vlc3Q="
  
  rabbitmq-erlang-cookie: "a2l0dGVuY29va2ll"
---
# Source: clowder2/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-keycloak-env-vars
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "passthrough"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "my-release-postgresql"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "keycloak"
  KEYCLOAK_DATABASE_USER: "keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=my-release-keycloak-headless.default.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "INFO"
---
# Source: clowder2/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: clowder2/templates/realm.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clowder2-realm
data:
  realm.json: |-
    {
      "id": "b5eacc0b-a10a-49b7-8f21-ab93c71735a9",
      "realm": "clowder",
      "notBefore": 0,
      "defaultSignatureAlgorithm": "RS256",
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "oauth2DeviceCodeLifespan": 600,
      "oauth2DevicePollingInterval": 5,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": true,
      "registrationEmailAsUsername": true,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": true,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "defaultRole": {
        "id": "c591865d-0de4-451f-b763-4ae343dc3322",
        "name": "default-roles-clowder",
        "description": "${role_default-roles}",
        "composite": true,
        "clientRole": false,
        "containerId": "b5eacc0b-a10a-49b7-8f21-ab93c71735a9"
      },
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "486d20a6-e766-4dff-9abf-96735a52d7bc",
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/clowder/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/clowder/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "e3e1b680-d9fb-4d06-bc32-f9a31f79f259",
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/clowder/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/clowder/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "ee1ac7ad-04f8-4a56-a0ee-02bc5dc51b59",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email",
            "openid"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "9c6a2e22-b7de-4a61-b70f-655311076a02",
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "c043c833-1a48-43b9-a223-baea22a3ec70",
          "clientId": "broker",
          "name": "${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "54c87ecc-a8ef-45a1-9ec3-b4a42ddb8b7a",
          "clientId": "clowder2-backend",
          "rootUrl": "https://clowder2.software-dev.ncsa.illinois.edu",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "https://clowder2.software-dev.ncsa.illinois.edu/api/v2/auth",
            "http://clowder2.software-dev.ncsa.illinois.edu/api/v2/auth"
          ],
          "webOrigins": [
            "https://clowder2.software-dev.ncsa.illinois.edu"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "c4aacce6-90b0-4ef4-abd5-fd9f8381284f",
          "clientId": "realm-management",
          "name": "${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "f7445290-8963-4b48-ae50-d4348c80f95c",
          "clientId": "security-admin-console",
          "name": "${client_security-admin-console}",
          "rootUrl": "${authAdminUrl}",
          "baseUrl": "/admin/clowder/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/admin/clowder/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "34a98b21-6e29-442b-95a2-9a72adc6df28",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "acr",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "30ea97a6-5e71-41a8-8995-d622abbf5600",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "3c79c94f-49a7-4596-916b-98037c9a81b0",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "0e4cf1c6-9e85-471f-ab11-c89b67cdc6cf",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "27b15f8c-ea65-4288-bfd5-bd88eb1d05cf",
          "name": "openid",
          "description": "",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "gui.order": "",
            "consent.screen.text": ""
          }
        },
        {
          "id": "9489cfcc-4415-4d08-a792-988d995a3edb",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "9d138d48-6737-4c22-aac5-5beca4d34ab4",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "fd531eb9-ca60-49a7-bbaa-63f580845ac0",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "f5aeca44-b95c-4285-a403-0ed43e44f6b2",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "5e921964-33af-45eb-8824-5d4e69866639",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "b32dc4c4-9eb5-48de-a41d-788a261b29f8",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            }
          ]
        },
        {
          "id": "1309fe1b-6c70-45f8-a5ac-98579e021c34",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "3af1742c-319a-47db-a713-319fd4d1ffb4",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "8a8f2492-5545-4b5c-94dc-cd6cff298737",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "2455569d-04a7-457f-9344-07933c779fdf",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "458db221-c237-4ede-af98-f258795ca68e",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "b042b61d-5cd3-4ad3-8ce4-c50693b42953",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "a98d17c8-e305-4dd4-8bc9-5e9e18247ee4",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "2690610c-0395-4922-9539-cdd77426e861",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "7cbf8b9e-93fd-484b-b842-38cbf777f5a4",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "a386ceb1-d919-4e52-91db-0d7967074ef6",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "85aecc64-3797-487a-b0c9-29670e03354a",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "c70365ba-9d90-4a73-bea3-0e05306beaaf",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "5fb754d9-54c2-4a5c-a6fb-154294dafac7",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "fb4268da-a638-48c1-89a4-5ebf2f208a2e",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8eb1eebf-d3da-42fb-9fdd-e8085ef96ea0",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "0daad314-60bd-4d67-b413-686a21a97dd7",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "id": "527e4fb2-c40a-425f-872f-4b61bf9687d1",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "446e25c9-df01-48a6-879d-7514861472f8",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f8ed7659-dc20-41d7-8887-b5de4d7ab729",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "long"
              }
            },
            {
              "id": "470b0766-e349-47be-bc12-ff00034e6183",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "4a83089f-afe1-4bf1-a152-5b3251624010",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "e672b9b3-6c21-4d39-90f2-6588e66119e8",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            },
            {
              "id": "60abe195-8831-46de-af48-b0cfbc70ed8f",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "5ff3acda-fb9b-4408-bacc-cd73e1587664",
          "name": "acr",
          "description": "OpenID Connect scope for add acr (authentication context class reference) to the token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "0c9fbfd7-84a6-41b1-8feb-226a3caef5bb",
              "name": "acr loa level",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-acr-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "18b51410-9962-4643-a2d3-99ac8ec995cd",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "c26571b4-2895-482a-bc6a-22855e6a1d4d",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "835008c5-84e0-400a-b652-6b8b07e25d98",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "role_list",
        "profile",
        "email",
        "roles",
        "web-origins",
        "acr",
        "openid"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "address",
        "phone",
        "microprofile-jwt"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {
        "replyToDisplayName": "",
        "starttls": "false",
        "auth": "",
        "host": "smtp.ncsa.illinois.edu",
        "replyTo": "",
        "from": "clowder2-devnull@illinois.edu",
        "fromDisplayName": "",
        "envelopeFrom": "",
        "ssl": "false"
      },
      "loginTheme": "clowder-theme",
      "eventsEnabled": false,
      "eventsListeners": [
        "jboss-logging"
      ],
      "enabledEventTypes": [],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [
        {
          "alias": "cilogon",
          "displayName": "CILogon",
          "internalId": "165a05f4-f6d7-44ae-a906-285cba64bae7",
          "providerId": "oidc",
          "enabled": true,
          "updateProfileFirstLoginMode": "on",
          "trustEmail": false,
          "storeToken": true,
          "addReadTokenRoleOnCreate": true,
          "authenticateByDefault": false,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login",
          "config": {
            "userInfoUrl": "https://cilogon.org/oauth2/userinfo",
            "clientId": "cilogon:/client_id/165f54b200b7bc4bf77635fe56237902",
            "tokenUrl": "https://cilogon.org/oauth2/token",
            "authorizationUrl": "https://cilogon.org/authorize",
            "clientAuthMethod": "client_secret_post",
            "syncMode": "IMPORT",
            "clientSecret": "**********",
            "defaultScope": "openid profile org.cilogon.userinfo email",
            "useJwksUrl": "true"
          }
        },
        {
          "alias": "globus",
          "displayName": "Globus",
          "internalId": "1f4df120-221f-4ed9-ab4a-f40bfeedafbb",
          "providerId": "oidc",
          "enabled": true,
          "updateProfileFirstLoginMode": "on",
          "trustEmail": false,
          "storeToken": true,
          "addReadTokenRoleOnCreate": true,
          "authenticateByDefault": false,
          "linkOnly": false,
          "firstBrokerLoginFlowAlias": "first broker login",
          "config": {
            "clientId": "fa3320ff-4730-4395-a4ec-fc7fe23ec8a7",
            "tokenUrl": "https://auth.globus.org/v2/oauth2/token",
            "authorizationUrl": "https://auth.globus.org/v2/oauth2/authorize",
            "clientAuthMethod": "client_secret_post",
            "syncMode": "IMPORT",
            "clientSecret": "**********",
            "defaultScope": "openid profile email",
            "useJwksUrl": "true"
          }
        }
      ],
      "identityProviderMappers": [],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "287a6b4b-a564-4e99-8ca3-27ef51bc4a5a",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          },
          {
            "id": "3b592cbd-0381-4633-8484-5bb330623b99",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-user-attribute-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-address-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-attribute-mapper",
                "saml-user-property-mapper",
                "oidc-full-name-mapper"
              ]
            }
          },
          {
            "id": "a3467695-96f0-4b4e-bda0-09fd5d65de20",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "de67577b-ddfa-4eda-9bbf-4d1c353a23c8",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "36dfd2e7-066f-4d2f-98d8-fa9b30931968",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "fc62cbe4-b848-4693-b811-8af72abba811",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-role-list-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-usermodel-attribute-mapper",
                "oidc-address-mapper",
                "saml-user-attribute-mapper",
                "saml-user-property-mapper"
              ]
            }
          },
          {
            "id": "f86e8306-bfc1-4b84-8dd3-f9227fa177c9",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "7e085201-baad-4642-a0ac-f478789a7209",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.userprofile.UserProfileProvider": [
          {
            "id": "818c99fa-b974-439f-8831-d52c99f366dc",
            "providerId": "declarative-user-profile",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "2173f0d5-b1cd-4633-b8ae-a8185ed3752f",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          },
          {
            "id": "32f31a65-2b0c-4f2b-a544-5fceb139cf19",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "ed428a39-820b-4b76-a84d-62da27c861c1",
            "name": "rsa-enc-generated",
            "providerId": "rsa-enc-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "RSA-OAEP"
              ]
            }
          },
          {
            "id": "51030d62-50f0-4131-a8af-c0e2195837a3",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [],
      "authenticationFlows": [
        {
          "id": "8b9ca866-8a9f-430e-82e6-0b49363cfe96",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "e1a16962-4b23-4a75-8628-b0d43a2b6068",
          "alias": "Authentication Options",
          "description": "Authentication options.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "basic-auth",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "basic-auth-otp",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "1160389b-b559-4818-b46f-bd55aac1534c",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "776980fd-00c0-46cf-8aaf-0f307e32499b",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "77648439-b0b5-4550-b4ba-12bce7584a14",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "5000b10a-c433-48cc-b312-783f8f599d85",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "503480bb-e8e9-43ad-a63e-b606cabc068e",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "f5c24c55-01a5-477a-9da6-279e18fed911",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "952e38b4-f404-4d73-ba8f-78c22f974cad",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "b986aa8c-ead1-4a8e-860a-82401b0df6b5",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "forms",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "f85f758a-5c8b-4b6b-b6b4-3963751ace98",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "ff8b9c35-95f6-483e-815a-720ded74c241",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "c73f712d-f377-47fc-b347-be37d2ff22b8",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "db52bdf0-7270-4591-8218-fa021fd8db80",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "ca735413-4607-4684-91c5-dd233757a3ba",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "93dff6bd-ac51-4ded-945a-204a9fb4d361",
          "alias": "http challenge",
          "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "no-cookie-redirect",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Authentication Options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "3b8d0d35-21c4-4972-916d-a46f7e8b22b1",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": true,
              "flowAlias": "registration form",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "91c95b78-94e3-40a2-8494-06156ee1a61b",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-profile-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "d68adba4-8d0c-418e-a466-109d6b88bd1e",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "autheticatorFlow": true,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "f4e7f21a-423e-4e1f-97ed-28950b4c5262",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "9ae0cda4-b49a-417d-9bec-71bf471cc1b6",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "7f163635-5d1c-4260-ac42-18bc6892f07d",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "delete_account",
          "name": "Delete Account",
          "providerId": "delete_account",
          "enabled": false,
          "defaultAction": false,
          "priority": 60,
          "config": {}
        },
        {
          "alias": "webauthn-register",
          "name": "Webauthn Register",
          "providerId": "webauthn-register",
          "enabled": true,
          "defaultAction": false,
          "priority": 70,
          "config": {}
        },
        {
          "alias": "webauthn-register-passwordless",
          "name": "Webauthn Register Passwordless",
          "providerId": "webauthn-register-passwordless",
          "enabled": true,
          "defaultAction": false,
          "priority": 80,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "cibaBackchannelTokenDeliveryMode": "poll",
        "cibaAuthRequestedUserHint": "login_hint",
        "oauth2DevicePollingInterval": "5",
        "clientOfflineSessionMaxLifespan": "0",
        "clientSessionIdleTimeout": "0",
        "userProfileEnabled": "false",
        "clientOfflineSessionIdleTimeout": "0",
        "cibaInterval": "5",
        "cibaExpiresIn": "120",
        "oauth2DeviceCodeLifespan": "600",
        "parRequestUriLifespan": "60",
        "clientSessionMaxLifespan": "0",
        "frontendUrl": "https://clowder2.software-dev.ncsa.illinois.edu/keycloak",
        "acr.loa.map": "[]"
      },
      "keycloakVersion": "19.0.3",
      "userManagedAccessAllowed": false,
      "clientProfiles": {
        "profiles": []
      },
      "clientPolicies": {
        "policies": []
      }
    }
---
# Source: clowder2/templates/theme.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clowder2-theme
binaryData:
  custom_theme.tgz: |
    
---
# Source: clowder2/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "20Gi"
  storageClassName: nfs-taiga
---
# Source: clowder2/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
  storageClassName: csi-cinder-sc-retain
---
# Source: clowder2/templates/geoserver/persistence.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: clowder2-geoserver
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "8Gi"
  storageClassName: nfs-taiga
---
# Source: clowder2/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: clowder2/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
subjects:
  - kind: ServiceAccount
    name: my-release-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-rabbitmq-endpoint-reader
---
# Source: clowder2/charts/elasticsearch/templates/coordinating/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch-coordinating-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: coordinating-only
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: coordinating-only
---
# Source: clowder2/charts/elasticsearch/templates/data/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch-data-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: data
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: data
---
# Source: clowder2/charts/elasticsearch/templates/ingest/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch-ingest-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: ingest
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: ingest
---
# Source: clowder2/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: clowder2/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: coordinating-only
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: coordinating-only
---
# Source: clowder2/charts/keycloak/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.2.0"
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: clowder2/charts/keycloak/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.2.0"
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: clowder2/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-keycloak-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: keycloak
---
# Source: clowder2/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: keycloak
---
# Source: clowder2/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: minio
---
# Source: clowder2/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: clowder2/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
  publishNotReadyAddresses: true
---
# Source: clowder2/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: clowder2/templates/backend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-clowder2-backend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-release-clowder2-backend
    app.kubernetes.io/instance: my-release
---
# Source: clowder2/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-clowder2-frontend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-release-clowder2-frontend
    app.kubernetes.io/instance: my-release
---
# Source: clowder2/templates/geoserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-clowder2-geoserver
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: geoserver
      targetPort: geoserver
      protocol: TCP
  selector:
    app.kubernetes.io/name: clowder2-geoserver
    app.kubernetes.io/instance: my-release
---
# Source: clowder2/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2023.12.23
        helm.sh/chart: minio-12.13.2
      annotations:
        checksum/credentials-secret: ea7895e7b783ca904069352d3c66ccb298f4a015550e587c53469e5104f18741
    spec:
      
      serviceAccountName: my-release-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: minio
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.12.23-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/minio/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: my-release-minio
---
# Source: clowder2/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-12.1.31
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "5.0.10"
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-12.1.31
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "5.0.10"
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:5.0.10-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: clowder2/templates/backend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-backend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: clowder2-backend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clowder2-backend
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-clowder2
      securityContext:
        {}
      containers:
        - name: backend
          securityContext:
            {}
          image: "clowder/clowder2-backend:2.0.0-beta.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: WEB_CONCURRENCY
              value: "1"
            - name: MINIO_SERVER_URL
              value: clowder2-minio:9000
#              value: clowder2-minio-headless:9000
            - name: MINIO_EXTERNAL_SERVER_URL
              value: minio-api.clowder2.localhost
            - name: MINIO_SECURE
              value: "true"
            - name: MINIO_BUCKET_NAME
              value: clowder
            - name: MINIO_ACCESS_KEY
              value: minioadmin
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: clowder2-minio
                  key: root-password
            - name: MINIO_UPLOAD_CHUNK_SIZE
              value: "10485760"
            - name: MONGODB_URL
              value: mongodb://clowder2-mongodb:27017
            - name: MONGO_DATABASE
              value: clowder2
            - name: CLOWDER2_URL
              value: http://clowder2.localhost
            - name: auth_base
              value: $(CLOWDER2_URL)
            - name: auth_realm
              value: clowder
            - name: auth_client_id
              value: clowder2-backend
            - name: auth_redirect_uri
              value: $(CLOWDER2_URL)/api/v2/auth
            - name: auth_url
              value: $(CLOWDER2_URL)/keycloak/realms/clowder/protocol/openid-connect/auth?client_id=clowder2-backend&response_type=code
            - name: oauth2_scheme_auth_url
              value: http://clowder2-keycloak-headless:8080/keycloak/realms/clowder/protocol/openid-connect/auth?client_id=clowder2-backend&response_type=code
            - name: auth_register_url
              value: $(CLOWDER2_URL)/keycloak/realms/clowder/protocol/openid-connect/registrations?client_id=clowder2-backend&response_type=code&redirect_uri=$(auth_redirect_uri)
            - name: auth_token_url
              value: http://clowder2-keycloak-headless:8080/keycloak/realms/clowder/protocol/openid-connect/token
            - name: auth_server_url
              value: $(CLOWDER2_URL)/keycloak/
            - name: keycloak_base
              value: $(CLOWDER2_URL)/api
            - name: frontend_url
              value: $(CLOWDER2_URL)
            - name: elasticsearch_url
              value: http://clowder2-elasticsearch:9200
            - name: elasticsearch_no_of_shards
              value: "5"
            - name: elasticsearch_no_of_replicas
              value: "5"
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: HEARTBEAT_EXCHANGE
              value: "extractors"
            - name: API_HOST
#              value: $(CLOWDER2_URL)
              value: http://clowder2-backend:80
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-audio-preview
  labels:
    clowder2/extractor: "audio-preview"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-audio-preview
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-audio-preview
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-audio-preview:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-file-digest
  labels:
    clowder2/extractor: "file-digest"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-file-digest
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-file-digest
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-digest:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-geotiff-preview
  labels:
    clowder2/extractor: "geotiff-preview"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-geotiff-preview
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-geotiff-preview
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-geotiff-preview:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-image-metadata
  labels:
    clowder2/extractor: "image-metadata"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-image-metadata
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-image-metadata
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-image-metadata:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-image-preview
  labels:
    clowder2/extractor: "image-preview"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-image-preview
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-image-preview
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-image-preview:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/extractors/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-extractors-wordcount
  labels:
    clowder2/extractor: "wordcount"
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-clowder2-extractors-wordcount
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-clowder2-extractors-wordcount
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractor
          image: "clowder/extractors-wordcount:latest"
          imagePullPolicy: Always
          env:
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: CLOWDER_VERSION
              value: "2"
            - name: RABBITMQ_URI
              value: amqp://$(RABBITMQ_USER):$(RABBITMQ_PASS)@$(RABBITMQ_HOST):5672/%2F
---
# Source: clowder2/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-frontend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: clowder2-frontend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clowder2-frontend
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-clowder2
      securityContext:
        {}
      containers:
        - name: frontend
          securityContext:
            {}
          image: "clowder/clowder2-frontend:2.0.0-beta.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: clowder2/templates/geoserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-geoserver
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: clowder2-geoserver
      app.kubernetes.io/instance: my-release
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clowder2-geoserver
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: geoserver
          image: "kartoza/geoserver:2.17.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: GEOSERVER_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-clowder2-services
                  key: GEOSERVER_USER
            - name: GEOSERVER_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-clowder2-services
                  key: GEOSERVER_PW
          ports:
            - containerPort: 8080
              name: geoserver
          volumeMounts:
            - name: clowder2-geoserver
              mountPath: /opt/geoserver/data_dir
          startupProbe:
            httpGet:
              path: /geoserver/index.html
              port: geoserver
            failureThreshold: 240
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /geoserver/index.html
              port: geoserver
          readinessProbe:
            httpGet:
              path: /geoserver/index.html
              port: geoserver
          resources:
            null
      volumes:
        - name: clowder2-geoserver
          persistentVolumeClaim:
            claimName: clowder2-geoserver
---
# Source: clowder2/templates/heartbeat/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-heartbeat
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: clowder2-heartbeat
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clowder2-heartbeat
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractors-heartbeat
          securityContext:
            {}
          image: "clowder/clowder2-heartbeat:2.0.0-beta.2"
          imagePullPolicy: Always
          env:
            - name: MONGODB_URL
              value: mongodb://clowder2-mongodb:27017
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
---
# Source: clowder2/templates/messages/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clowder2-messages
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: clowder2-messages
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clowder2-messages
        app.kubernetes.io/instance: my-release
    spec:
      containers:
        - name: extractors-messages
          securityContext:
            {}
          image: "clowder/clowder2-messages:2.0.0-beta.2"
          imagePullPolicy: Always
          env:
            - name: MONGODB_URL
              value: mongodb://clowder2-mongodb:27017
            - name: RABBITMQ_USER
              value: guest
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: clowder2-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: clowder2-rabbitmq
---
# Source: clowder2/charts/elasticsearch/templates/coordinating/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-elasticsearch-coordinating
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: coordinating-only
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: coordinating-only
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: coordinating-only
  updateStrategy:
    type: RollingUpdate
  serviceName: my-release-elasticsearch-coordinating-hl
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: elasticsearch-19.17.6
        app.kubernetes.io/component: coordinating-only
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: coordinating-only
      annotations:
    spec:
      serviceAccountName: my-release-elasticsearch-coordinating
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r96
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.1-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "clowder2"
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_ROLES
              value: ""
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "my-release-elasticsearch-master-hl.default.svc.cluster.local,my-release-elasticsearch-coordinating-hl.default.svc.cluster.local,my-release-elasticsearch-data-hl.default.svc.cluster.local,my-release-elasticsearch-ingest-hl.default.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "4"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: my-release-elasticsearch-master-0 my-release-elasticsearch-master-1 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "2"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).my-release-elasticsearch-coordinating-hl.default.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "128m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
        - name: "data"
          emptyDir: {}
---
# Source: clowder2/charts/elasticsearch/templates/data/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-elasticsearch-data
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: data
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: data
spec:
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: data
  serviceName: my-release-elasticsearch-data-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: elasticsearch-19.17.6
        app.kubernetes.io/component: data
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: data
      annotations:
    spec:
      serviceAccountName: my-release-elasticsearch-data
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r96
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.1-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "data"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "clowder2"
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "my-release-elasticsearch-master-hl.default.svc.cluster.local,my-release-elasticsearch-coordinating-hl.default.svc.cluster.local,my-release-elasticsearch-data-hl.default.svc.cluster.local,my-release-elasticsearch-ingest-hl.default.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "4"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: my-release-elasticsearch-master-0 my-release-elasticsearch-master-1 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "2"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).my-release-elasticsearch-data-hl.default.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "1024m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 2048Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: csi-cinder-sc-retain
---
# Source: clowder2/charts/elasticsearch/templates/ingest/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-elasticsearch-ingest
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: ingest
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: ingest
spec:
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: ingest
  serviceName: my-release-elasticsearch-ingest-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: elasticsearch-19.17.6
        app.kubernetes.io/component: ingest
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: ingest
      annotations:
    spec:
      serviceAccountName: my-release-elasticsearch-ingest
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r96
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.1-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "ingest"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "clowder2"
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "my-release-elasticsearch-master-hl.default.svc.cluster.local,my-release-elasticsearch-coordinating-hl.default.svc.cluster.local,my-release-elasticsearch-data-hl.default.svc.cluster.local,my-release-elasticsearch-ingest-hl.default.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "4"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: my-release-elasticsearch-master-0 my-release-elasticsearch-master-1 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "2"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).my-release-elasticsearch-ingest-hl.default.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "128m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests:
              cpu: 25m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
        - name: "data"
          emptyDir: {}
---
# Source: clowder2/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: my-release-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: elasticsearch-19.17.6
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: my-release-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:11-debian-11-r96
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.1-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "yes"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "clowder2"
            
            - name: ELASTICSEARCH_CLUSTER_HOSTS
              value: "my-release-elasticsearch-master-hl.default.svc.cluster.local,my-release-elasticsearch-coordinating-hl.default.svc.cluster.local,my-release-elasticsearch-data-hl.default.svc.cluster.local,my-release-elasticsearch-ingest-hl.default.svc.cluster.local,"
            - name: ELASTICSEARCH_TOTAL_NODES
              value: "4"
            - name: ELASTICSEARCH_CLUSTER_MASTER_HOSTS
              value: my-release-elasticsearch-master-0 my-release-elasticsearch-master-1 
            - name: ELASTICSEARCH_MINIMUM_MASTER_NODES
              value: "2"
            - name: ELASTICSEARCH_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).my-release-elasticsearch-master-hl.default.svc.cluster.local"
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "128m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: csi-cinder-sc-retain
---
# Source: clowder2/charts/keycloak/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.2.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.2.0"
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.2.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "15.2.0"
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "keycloak"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: csi-cinder-sc-retain
---
# Source: clowder2/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: my-release-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 93cf22681242867ede6ce7c0b44b0d8e8dbf85c9f773accfee5763390b229965
        checksum/secrets: 55cf651616d10aeb7f9e6b5faa2b061c605a5381aadc06be66bec69b8b5cfb40
      labels:
        app.kubernetes.io/name: keycloak
        helm.sh/chart: keycloak-13.4.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "20.0.5"
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: my-release-keycloak
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: keycloak
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      enableServiceLinks: true
      initContainers:
        - command:
          - sh
          - -c
          - cd /keycloak && tar zxf /theme/custom_theme.tgz
          image: busybox:1.28
          name: init-customtheme
          volumeMounts:
          - mountPath: /keycloak
            name: keycloak-theme
          - mountPath: /theme
            name: clowder2-theme
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:20.0.5-debian-11-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/keycloak/"
            - name: KEYCLOAK_EXTRA_ARGS
              value: -Dkeycloak.import=/config/realm.json
          envFrom:
            - configMapRef:
                name: my-release-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /keycloak/
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /keycloak/realms/master
              port: http
          volumeMounts:
            - mountPath: /opt/bitnami/keycloak/themes
              name: keycloak-theme
            - mountPath: /config
              name: clowder2-realm
              readOnly: true
      volumes:
        - emptyDir: {}
          name: keycloak-theme
        - configMap:
            name: clowder2-theme
          name: clowder2-theme
        - configMap:
            name: clowder2-realm
          name: clowder2-realm
---
# Source: clowder2/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
spec:
  serviceName: my-release-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-10.3.9
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "3.10.8"
      annotations:
        checksum/config: 06889d5c973b44c0ab0d54e474c2ea1fa4e7a5aef9aee101b6f865c2d3d39feb
        checksum/secret: 23eef85b1b408dbf120119d43a60b344c25ddd036c5581b1398fb1d991d9ff7f
    spec:
      
      serviceAccountName: my-release-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: rabbitmq
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.10.8-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: my-release-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "guest"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          secret:
            secretName: my-release-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: my-release
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: csi-cinder-sc-retain
---
# Source: clowder2/charts/keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-keycloak
  namespace: "default"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-13.4.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "20.0.5"
    app.kubernetes.io/component: keycloak
  annotations:
spec:
  rules:
    - host: "clowder2.localhost"
      http:
        paths:
          - path: /keycloak
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-keycloak
                port:
                  name: http
---
# Source: clowder2/charts/minio/templates/api-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-minio-api
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
  annotations:
    {}
spec:
  rules:
    - host: minio-api.clowder2.localhost
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-minio
                port:
                  name: minio-api
---
# Source: clowder2/charts/minio/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
  annotations:
    {}
spec:
  rules:
    - host: minio.clowder2.localhost
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-minio
                port:
                  name: minio-console
---
# Source: clowder2/charts/rabbitmq/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-10.3.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.10.8"
  annotations:
spec:
  rules:
    - host: rabbitmq.clowder2.localhost
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-rabbitmq
                port:
                  name: http-stats
---
# Source: clowder2/templates/backend/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-clowder2-backend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: clowder2.localhost
      http:
        paths:
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-clowder2-backend
                port:
                  number: 80
          - path: /docs
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-clowder2-backend
                port:
                  number: 80
---
# Source: clowder2/templates/frontend/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-clowder2-frontend
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: clowder2.localhost
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-clowder2-frontend
                port:
                  number: 80
---
# Source: clowder2/templates/geoserver/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-clowder2-geoserver
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: clowder2.localhost
      http:
        paths:
          - path: /geoserver/
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-clowder2-geoserver
                port:
                  number: 8080
---
# Source: clowder2/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-clowder2-test-connection"
  labels:
    helm.sh/chart: clowder2-1.9.1
    app.kubernetes.io/name: clowder2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.0.0-beta.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-clowder2:80']
  restartPolicy: Never
