---
# Source: ilum/charts/ilum-core/templates/core-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-ilum-core-spark
---
# Source: ilum/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ilum-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
automountServiceAccountToken: true
secrets:
  - name: ilum-minio
---
# Source: ilum/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ilum-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
secrets:
  - name: ilum-mongodb
automountServiceAccountToken: true
---
# Source: ilum/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.4
automountServiceAccountToken: false
---
# Source: ilum/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ilum-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
type: Opaque
data:
  root-user: "bWluaW9hZG1pbg=="
  root-password: "bWluaW9hZG1pbg=="
---
# Source: ilum/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.4
type: Opaque
data:
  postgres-password: "Q0hBTkdFTUVQTEVBU0U="
  password: "Q0hBTkdFTUVQTEVBU0U="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: ilum/charts/ilum-core/templates/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum
data:
  application.yml: |
    spring:
      main:
        banner-mode: off
      servlet:
        multipart:
          enabled: true
          max-file-size: 500MB
          max-request-size: 500MB
          file-size-threshold: 50MB
      data:
        mongodb:
          uri: mongodb://ilum-mongodb-0.ilum-mongodb-headless:27017,ilum-mongodb-1.ilum-mongodb-headless:27017/ilum-default?replicaSet=rs0
      kafka:
        admin:
          fail-fast: true
      codec:
        max-in-memory-size: 20MB
      task:
        scheduling:
          pool:
            size: 2

    communication:
      mode: grpc
    job:
      kafka:
        server: ilum-kafka-controller-0.ilum-kafka-controller-headless:9092
        topicPrefix: ilum-default
        requestSize: 20000000
        maxPollRecords: 500
        maxPollInterval: 60000
      grpc:
        server: ilum-grpc
        port: 9999
      retain:
        hours: 168
      openLineage:
        enabled: false
        transport:
          type: http
          serverUrl: http://ilum-marquez:9555/api/v1/namespaces/ilum
      prometheus:
        enabled: true
      healthcheck:
        enabled: true
        interval: 300
        tolerance: 120
      hiveMetastore:
        enabled: false
        address: thrift://ilum-hive-metastore:9083

    ilum:
      namespace: default
      release: my-release
      externalSubmit: false
      historyServer:
        enabled: true
        url: http://ilum-history-server:9666
      storageType: s3
      s3a:
        endpoint: ilum-minio:9000
        sparkBucket: ilum-files
        dataBucket: ilum-tables
        accessKey: minioadmin
        secretKey: minioadmin

    logAggregation:
      enabled: false
      loki:
        url: http://ilum-loki-gateway

    license:
      account: ilum-cloud
      validation:
        baseUrl: https://api.keygen.sh
      key:
        public: b72137e87c3fc1c6bf8ae0b758264fe4ea8110ce04253f9cba9240efd1710996
        private: ""

    security:
      internal:
        enabled: true
        users:
          - password: admin
            roles:
            - ADMIN
            username: admin
      ldap:
        enabled: false
        base: ""
        username: ""
        password: ""
        passwordEncoder: ""
        userSearch:
          base: ""
          filter: "uid={0}"
          passwordAttr: "userPassword"
        groupSearch:
          base: ""
          filter: "(member={0})"
          roleAttr: "cn"
      oauth2:
        enabled: false
        clientId: ""
        clientSecret: ""
        issuerUri: ""
      jwt:
        issuerUri: "https://ilum.cloud"
        timeToLive: "8h"
        publicKey: ""
        privateKey: ""
      authorities:
        roles:
          prefix: "ROLE_"
          claimName: "groups"
        scopes:
          prefix: "SCOPE_"
          claimName: "scp"

    springdoc:
      swagger-ui:
        tags-sorter: alpha
        operations-sorter: alpha
      paths-to-match: /api/v1/**

    management:
      endpoints:
        web:
          exposure:
            include: "info,configprops,env,metrics,mappings,beans,prometheus"

    logging:
      level:
        # ilum
        cloud.ilum: info
        # kafka
        org.apache.kafka: warn
        org.springframework.kafka: warn
        # mongo
        org.mongodb.driver: warn
        # yarn client
        org.apache.hadoop.yarn.client: error
        # transactions
        # org.springframework.transaction: info
        # web
        # org.springframework.web: debug

    mongock:
      migration-scan-package:
        - cloud.ilum.service.migrations

    cors:
      enabled: true
---
# Source: ilum/charts/ilum-core/templates/hs-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-defaults
data:
  spark-defaults.conf: |
    # Spark history server custom properties:
      
    # Spark hadoop properties:
    spark.hadoop.fs.s3a.bucket.ilum-files.endpoint                ilum-minio:9000
    spark.hadoop.fs.s3a.bucket.ilum-files.access.key              minioadmin
    spark.hadoop.fs.s3a.bucket.ilum-files.secret.key              minioadmin
    spark.hadoop.fs.s3a.bucket.ilum-files.connection.ssl.enabled  false
    spark.hadoop.fs.s3a.bucket.ilum-files.path.style.access       true
    spark.hadoop.fs.s3a.bucket.ilum-files.impl                    org.apache.hadoop.fs.s3a.S3AFileSystem
    spark.hadoop.fs.s3a.bucket.ilum-files.fast.upload             true
    spark.hadoop.fs.s3a.aws.credentials.provider                                               org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
    spark.history.fs.logDirectory                                                              s3a://ilum-files/ilum/logs
---
# Source: ilum/charts/ilum-core/templates/spark-submit-pt.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-spark-submit-pt
data:
  spark-submit-pt.yaml: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: spark-submit
      namespace: default
    spec:
      serviceAccountName: my-release-ilum-core-spark
      restartPolicy: Never
      containers:
        - name: spark-submit
          image: ilum/spark-launcher:spark-3.4.1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 300Mi
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-images-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-images
binaryData:
  addendpoint.PNG: ""
  addsession.PNG: ""
  addsession_s.PNG: ""
  clean_ilum_jupyter_session.png: ""
  cleanup.PNG: ""
  create_ilum_jupyter_session.png: ""
  logo-shape.png: ""
  logo2.png: "iVBORw0KGgoAAAANSUhEUgAAAJMAAAA6CAYAAAC09mszAAAABmJLR0QA/wD/AP+gvaeTAAAIhklEQVR42u2d+VMURxSA95ckf4KamKQit+ABcqosKgqVUqsSE1NaxiRGo1EOFW+ToInlFYNKQEBExVtUPFAhyCWiIAoowQNFxaixxDOCBwjy0m+WGbZnr9llC2vXt1VfccxM90zPV6/f9vRUq1SyT48u4b0cuoXFOnYNv8B4xgCCaAN9uODQLXytQ5dID5Whj6NjxHuOXSMS2M6vqdEIBbQwX+Ld3Re/q0eksHxqIMIC8jihHLqGJ1KjEB0gTsqRqGsjOt7lhbmr2pJtahCiY3QJX61iv1ykxiCsQBXK1EANQXScsHoVNQJhLUgmgmQiSCaCZCIIkokgmQiSyQSu/oug7/yd4Lu/GHw25YFndBp4fJMAboFLwOmjGXRDSCbjOPeYBR5j4sB7Qw74/1VumKNlvGDBy8DJIUpxPZ5Oc2Da9xs5ggN+5faZPD6Z2/7l8BiLrwvLlteH56D0eFPnMmFMorRt6oQUcPkg0uJz7ec6z2rX3ekyOb0fAT1DVoDnsv3gf+SscYmMkcUE25wPnov2QJ9Ra43WOXzwCnj+AjgWL0jn9rlX94LbfvhQpcXXiGXL68NzUHq8qXOpufqI2z7l2w0Wn+ualVlWu+5Ok8nZbR70mpgMvtsLLRdIC9/dReC3+igEJxSA34SNimR68VKDMZleNlpPJu36LJHJ0LmIMonbiwqvWXSe7h/PhNu366123Z0mk098LvjtLQWflALwXp8LPqn54Heo1CyB/NJLwDfmKKhjcyB0xxkI3XkWQraeBhfnOYpkwgZremVcpuYW68mEdYk3yRKZDJ2LKNPr1nZZPwtZZfZ5zo7cLrVLS4sNydRz0DIIuvYAgq4/5AisuAX+GRVMrkLwTsoF75Rc8N1Z1C5QJuvOkrKhf0wWDN1eCqG7yzj8p20zWbe9ytTKZHrVdj1pO0rNPs9z5XekemxKJsRva7GOTIYYWF4L/luKIDi1GEL3VOhnVxm4su7zbZYJwd+f1rdA/z4/K65j7OexUleMH5uTyU29VG90MkRgegWEpJ8zSMDsNEX12rNM+Gls0uyHybTSOo6wMvGYV802KhPim3pSeXTaVgIhByr1Miz9PLj1+emtlgkFaGxshaY2me7caRCSalPlB/ksgoaG11qJ92tobrZBmdz6/wZBNcqi04CUIhiW8bdeAn45oLhOe5VJlAi7KrGeOdN3mCw/MS5POk4cEhDbxaZkEqJT8nFlMiUdh2FHqvTi7ruYZGpql0Gsp/L8XXDqFmGw7N6Os6Du/gv7kcmVhVn11fumu7kEJlPmRR0GLM80q763QSbtMa1xX8QZLDt63l4dkWxaJiE6JRaYlin5BAzNvqSDR+BSkkkmk3Z0ymKRW+/TBxaxLl2osz+ZXL2jIchEdFKzYYGhOdUcA2PzzK7LbmVqu5a7d59xMjU8a9V59ig80xubyIn07Hkr/HPzqe3LJIyKx+UalWnQnjIYmn+Fw2PYSpJJJtOGxONSHiTWl5JUqFNu/rFqTqa87MtQmH/VPmRy7fszBF2pMyjT4KyLEHy8RiIw5aRF9di7TLGrsiEpPp+T6dGjJvBymSsdE8pSA4xE2jLh7AO7kQnxXpOtX6bqOgg+cY2j98g1NiFT9Py9VpUp4+B5ozLFxRwDNUsb6rmxI4AlWsMnWzad5ETC3MmZzeCwK5lc2MCjulo3OgWevgHBp9pRp50Vpq/YgkxRYdukBFm8saOHr1Y2RYclyfX1GinEgcQdqSUmZcL/799bzslUU/MIXLpHgpfzXHj4sImTaeEszdMDu5JJiE6/Z+qOMeVchiEltRK9v1pncfmdLdOkr9cLZeBjDvFRR/ikTYqO9e+9ULrpr9pkSvwzz6hM69bkCP8f9ekfOsMEOHlu6eJDnEj37j2HXj2i7FMmZ4/5oL50j5Op/8FzMOTMTQF1BgvzHZhN2Nky4eMKuRDYzSg5NmJKqo6IM6dtNSpTwtpcadupohtcdCo+eQOuX3/MySTKZ5cyCdNHlx/mZWLd2pCyWwJ9OzCT8E3IhNTWPuHKw24G8xqjj5o+nN4+LaS5/eajnEZlim2X6cfvUnSik/B320/MqwZ6/mLfMjm7zgX1hbuSTAE7S2FwxW1QH7sETt0jbU4m/IYljzCY9I4Yoj8R9++1EDIPV+lEtMKCGp195TJpd4M4H/xK9QPN9b7kR8jxZ/qecq4su5RJiE5LMtpl2sVkqvwX+k7d0uFyLZEJn8DjuIxS/DwW6Mjx4EGjNM1D7Hbw6/np4lrYvOEExK8+BsnrCiCXjfc8ftIs3XQx8UbGj443LVMcn1MtWrBP7yg3gnnVWyGTM/vWoa7SRKcA1s2pT10Hp0+i3ohM5qKvC8O3PbQfV8gff8jBCCbOnETWr8vXez1ymXCMSf4wV7we7e6u5FStTll2KxPiFb1fkzMdOgdes3ZZpUztFwrECGFIJmzUxkblGJMJmT9jFzz5r5kTRkC7nLb/aUeSjesLwZXlUMZkEq9FLhOCSbk8Oun7RinKZFMvFCiOTo6zIfD8bRiQUSn8bk2ZzHnVyRqRSWRk8Erh4as4Am2MsrO34Af23pyx65G/6qQvgmGSjVN5xX3wG52LntxTlMmmXnUyB8+F+8BrbprVygtgA6OYn2jz1Qh+ND2GTWuR72MOODCoZMggKnybEHUOsmnHmGvhzdu+uVgYNVc6So7jRtp1TxyXZDAqmrMPIh+GsHmZMCK5KHhRgKDXwwmSiSBIJoJkIkgmgiCZCJKJsBWZwuqpIQgr8JQW4iGsRZUK11ulhiA6TkSMChfudRQWn6MGISwG1+vtqVmjly3cSw1CWAougCmt0YsL9jp1jcilhiHMFyk8p59q8jvcCuIoFNsYR10eobRrw4ikIxK3LD1buBfXW8Xs3JFWySR4GjReRMRIOZLW53+vfztyQLMZYwAAAABJRU5ErkJggg=="
  spark_session_started.png: ""
  widget.PNG: ""
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-intro-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-intro
data:
  IlumIntro.ipynb: |-
    {
     "cells": [
      {
       "cell_type": "markdown",
       "source": [
        "<center><img src=\"images/logo2.png\"/></center>\n",
        "<center><h1>Introduction to ILUM</h1></center>\n",
        "<center><h3><a href = 'https://ilum.cloud'>ilum.cloud</a></h3></center>\n",
        "Welcome to the Ilum Interactive Capabilities Tutorial! Ilum focuses on interactive Spark sessions, offering a modern replacement for Apache Livy. In this tutorial, you'll learn how to leverage Ilum's powerful features within your Jupyter Notebook environment. Let's dive in!\n"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "Ilum uses [Sparkmagic](https://github.com/jupyter-incubator/sparkmagic) to work with Apache Spark in Jupyter notebooks.\n",
        "\n",
        "**warning** You will interact with the remote spark cluster."
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "### Reference\n",
        "- [Ilum Documentation](https://ilum.cloud/docs)\n",
        "- [IPython Kernel](Magics%20in%20IPython%20Kernel.ipynb)\n",
        "- [Pyspark Kernel](Pyspark%20Kernel.ipynb)\n",
        "- [Spark Kernel](Spark%20Kernel.ipynb)"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "First, we'll need to load the spark magic extension. You can do this by running the following command:"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "outputs": [],
       "source": [
        "%load_ext sparkmagic.magics"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "Next, we'll need to set up an endpoint. An endpoint is simply a URL that points to a specific Spark cluster. You can choose scala or python, but we will focus on python here. You can do this by running the following:"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%manage_spark"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n",
         "is_executing": true
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "![Ilum session](images/create_ilum_jupyter_session.png)\n",
        "\n",
        "Example properties: ```{\"conf\" : {\"pyRequirements\": \"pandas\"}, \"driverMemory\": \"1000M\", \"executorCores\": 2}```"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "Bundled Jupyter is ready to work out of the box and has a predefined endpoint address, which points to livy-proxy. What you have to do is choose this endpoint from the dropdown list and click the create session button. As simple as that. Now Jupyter will connect with ilum-core via ilum-livy-proxy for creating a spark session. It could take several minutes when the spark container will be up and running. Once is ready, you receive information that a spark session is available.\n",
        "\n",
        "![Ilum session started](images/spark_session_started.png)\n",
        "\n",
        "You can now use your Ilum session to run Spark code against it. The name that you assigned to the session will be used in the %%spark magic to run the code."
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%%spark\n",
        "rdd = sc.parallelize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n",
        "print(rdd.count())"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n",
         "is_executing": true
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "Ilum provides a preconfigured S3-compatible storage system, complete with access to the essential bucket `ilum-files`. For data engineers working on various projects, this bucket can serve as the foundation for storing and managing datasets.\n",
        "\n",
        "If your workflow requires the creation of additional buckets, you'll have the flexibility to do so. However, be mindful that additional configuration will be necessary when defining your Spark jobs to access those custom buckets.\n",
        "\n",
        "Let's save some data to our object storage."
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%%spark\n",
        "df = spark.read.csv('/opt/spark/examples/src/main/resources/people.csv', header=True, inferSchema=True, sep=';')\n",
        "df.printSchema()\n",
        "\n",
        "df.write.parquet(\"s3a://ilum-files/examples/people.parquet\")\n",
        "\n",
        "df.select(\"name\", \"age\").show()\n",
        "df.createOrReplaceTempView(\"people\")"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n"
        },
        "is_executing": true
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "You can run SQL queries by passing the arguments -c sql to the %%spark magic"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%%spark -c sql\n",
        "SHOW TABLES"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "Now, let’s query one of the available tables.\n",
        "Notice that we are passing the --output or -o parameter with a value of people so that the output of our SQL query is saved in the people variable in the IPython kernel context as a Pandas DataFrame"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%%spark -c sql -o people\n",
        "SELECT * FROM people"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n"
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "If you want to visualize the data in the Pandas dataframe, you can write your own code to do so, or you can use sparkmagic autovisualization widget:"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "from autovizwidget.widget.utils import display_dataframe\n",
        "display_dataframe(people)"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n",
         "is_executing": true
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "or you can use matplotlib"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%% md\n"
        }
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.pie(people[\"age\"], labels=people[\"name\"])\n",
        "plt.show()\n",
        "\n",
        "people.plot.bar(x='name',y='age')"
       ],
       "metadata": {
        "collapsed": false,
        "pycharm": {
         "name": "#%%\n",
         "is_executing": true
        }
       }
      },
      {
       "cell_type": "markdown",
       "source": [
        "### Cleaning up\n",
        "\n",
        "Now that you’re done with your work, you should clean them up.\n",
        "Simply click on the Delete buttons!\n",
        "\n",
        "![Ilum session clean](images/clean_ilum_jupyter_session.png)"
       ],
       "metadata": {
        "collapsed": false
       }
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "outputs": [],
       "source": [
        "%manage_spark"
       ],
       "metadata": {
        "collapsed": false
       }
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 2
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython2",
       "version": "2.7.6"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 0
    }
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-magics-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-magics
data:
  Magics_in_IPython_Kernel.ipynb: |-
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# Demonstrating sparkmagic"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## This notebook will demonstrate how we can use the spark magic to intersperse our Python code with code that is running against a Spark cluster"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Let’s say we’re working in an IPython notebook and we want to use Spark to analyze some data. So, we'll load `sparkmagic` in order to be able to talk to Spark from our Python notebook."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 1,
       "metadata": {},
       "outputs": [],
       "source": [
        "%load_ext sparkmagic.magics"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "With it, the `%manage_spark` line magic and the `%%spark` magic are available.\n",
        "\n",
        "The %%manage_spark line magic lets you manage Livy endpoints and Spark sessions."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Let's start by adding an Endpoint.\n",
        "\n",
        "An Endpoint is a [Livy](https://github.com/cloudera/livy) installation running on a Spark cluster. \n",
        "\n",
        "`sparkmagic` allows us to specify the Livy endpoint along with a username and password to authenticate to it. If the Livy endpoint is on your local machine or has no password, simply leave the text fields for username and password blank."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "78c2d2745b6b47a8b4bbd41317a34f9d",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "MagicsControllerWidget(children=(Tab(children=(ManageSessionWidget(children=(HTML(value='<br/>'), HTML(value='…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Added endpoint http://localhost:8998\n",
          "Starting Spark application\n"
         ]
        },
        {
         "data": {
          "text/html": [
           "<table>\n",
           "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>3</td><td>None</td><td>pyspark</td><td>idle</td><td></td><td></td><td>✔</td></tr></table>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "SparkSession available as 'spark'.\n"
         ]
        }
       ],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "![add_endpoint](images/addendpoint.PNG)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Now, add a session to the endpoint you added. The name you give to the session will be used with the `%%spark` magic to run Spark code. You can also specify the configuration you want to start the session with. You can create either Python (PySpark) or Scala (Spark) sessions.\n",
        "\n",
        "Creating a session will create a `SparkContext` with the name `sc` and a `HiveContext` with the name `sqlContext`.\n",
        "\n",
        "We'll start by adding a PySpark session."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "![add_session](images/addsession.PNG)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "You can now run Spark code against your Livy session.  For information on the available commands, run %spark?"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {
        "collapsed": true
       },
       "outputs": [],
       "source": [
        "%spark?"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## Pyspark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "You can run code against your Spark session by adding `%%spark` at the beginning of the cell.  Since we’ve only created a single session, we don’t need to specify the session name.\n",
        "\n",
        "In the following cell, I'll create a Resilient Distributed Dataset (RDD) called fruits, and print its first element."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "First element of numbers is 1 and its description is:\n",
          "b'(1) ParallelCollectionRDD[0] at parallelize at PythonRDD.scala:194 []'"
         ]
        }
       ],
       "source": [
        "%%spark\n",
        "numbers = sc.parallelize([1, 2, 3, 4])\n",
        "print('First element of numbers is {} and its description is:\\n{}'.format(numbers.first(), numbers.toDebugString()))"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Now, you've created your session and executed some statements. If you want to look at the Livy logs for this session, simply run a cell like so:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 5,
       "metadata": {
        "scrolled": true
       },
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:29 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n",
          "16/06/09 23:43:30 INFO TimelineClientImpl: Timeline service address: http://localhost:8188/ws/v1/timeline/\n",
          "16/06/09 23:43:30 INFO Client: Requesting a new application from cluster with 10 NodeManagers\n",
          "16/06/09 23:43:30 INFO Client: Verifying our application has not requested more than the maximum memory capability of the cluster (25600 MB per container)\n",
          "16/06/09 23:43:30 INFO Client: Will allocate AM container, with 1408 MB memory including 384 MB overhead\n",
          "16/06/09 23:43:30 INFO Client: Setting up container launch context for our AM\n",
          "16/06/09 23:43:30 INFO Client: Setting up the launch environment for our AM container\n",
          "16/06/09 23:43:30 INFO Client: Preparing resources for our AM container\n",
          "16/06/09 23:43:31 INFO MetricsConfig: loaded properties from hadoop-metrics2-azure-file-system.properties\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init starting.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init starting. Initializing MdsLogger.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO MetricsSinkAdapter: Sink azurefs2 started\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: Scheduled snapshot period at 60 second(s).\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: azure-file-system metrics system started\n",
          "16/06/09 23:43:31 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/conf/hive-site.xml -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/hive-site.xml\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:34 INFO Client: Uploading resource file:/tmp/spark-1c0a5560-2256-4f63-ba1f-c0dfd25dc24b/__spark_conf__324896021270563710.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/__spark_conf__324896021270563710.zip\n",
          "16/06/09 23:43:34 WARN Client: spark.yarn.am.extraJavaOptions will not take effect in cluster mode\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing view acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing modify acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(spark); users with modify permissions: Set(spark)\n",
          "16/06/09 23:43:34 INFO Client: Submitting application 1 to ResourceManager\n",
          "16/06/09 23:43:35 INFO YarnClientImpl: Submitted application application_1464100251524_0001\n",
          "16/06/09 23:43:36 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:36 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: N/A\n",
          "\t ApplicationMaster RPC port: -1\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:37 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:38 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:39 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:40 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:41 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:42 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:43 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:44 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:45 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:46 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:47 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:47 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: 10.0.0.4\n",
          "\t ApplicationMaster RPC port: 0\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:48 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:49 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:50 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:51 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:52 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:53 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:54 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:55 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:56 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:57 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:58 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:59 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:00 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:01 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:02 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:03 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:04 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:05 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:06 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:07 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:08 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:09 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:10 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:11 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:12 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:13 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:14 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:15 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:16 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:17 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:18 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:19 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:20 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:21 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:22 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:23 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:24 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:25 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)"
         ]
        }
       ],
       "source": [
        "%spark logs"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## SparkSQL"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "You can run SQL queries by passing the arguments `-c sql` to the %%spark magic\n",
        "\n",
        "First, let's create a table:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%spark\n",
        "df = spark.read.json(\"/apps/spark-2.3.3/examples/src/main/resources/people.json\")\n",
        "df.createOrReplaceTempView(\"people\")"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Now we can see what tables we have:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 4,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "<div>\n",
           "<style scoped>\n",
           "    .dataframe tbody tr th:only-of-type {\n",
           "        vertical-align: middle;\n",
           "    }\n",
           "\n",
           "    .dataframe tbody tr th {\n",
           "        vertical-align: top;\n",
           "    }\n",
           "\n",
           "    .dataframe thead th {\n",
           "        text-align: right;\n",
           "    }\n",
           "</style>\n",
           "<table border=\"1\" class=\"dataframe\">\n",
           "  <thead>\n",
           "    <tr style=\"text-align: right;\">\n",
           "      <th></th>\n",
           "      <th>database</th>\n",
           "      <th>tableName</th>\n",
           "      <th>isTemporary</th>\n",
           "    </tr>\n",
           "  </thead>\n",
           "  <tbody>\n",
           "    <tr>\n",
           "      <th>0</th>\n",
           "      <td>NaT</td>\n",
           "      <td>people</td>\n",
           "      <td>True</td>\n",
           "    </tr>\n",
           "  </tbody>\n",
           "</table>\n",
           "</div>"
          ],
          "text/plain": [
           "  database tableName  isTemporary\n",
           "0      NaT    people         True"
          ]
         },
         "execution_count": 4,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "%%spark -c sql\n",
        "SHOW TABLES"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Now, let's query one of the available tables.\n",
        "\n",
        "Notice that we are passing the `--output` or `-o` parameter with a value of `df_hvac` so that the output of our SQL query is saved in the `df_hvac` variable in the IPython kernel context as a [Pandas](http://pandas.pydata.org/) DataFrame."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 5,
       "metadata": {
        "scrolled": true
       },
       "outputs": [
        {
         "data": {
          "text/html": [
           "<div>\n",
           "<style scoped>\n",
           "    .dataframe tbody tr th:only-of-type {\n",
           "        vertical-align: middle;\n",
           "    }\n",
           "\n",
           "    .dataframe tbody tr th {\n",
           "        vertical-align: top;\n",
           "    }\n",
           "\n",
           "    .dataframe thead th {\n",
           "        text-align: right;\n",
           "    }\n",
           "</style>\n",
           "<table border=\"1\" class=\"dataframe\">\n",
           "  <thead>\n",
           "    <tr style=\"text-align: right;\">\n",
           "      <th></th>\n",
           "      <th>age</th>\n",
           "      <th>name</th>\n",
           "    </tr>\n",
           "  </thead>\n",
           "  <tbody>\n",
           "    <tr>\n",
           "      <th>0</th>\n",
           "      <td>NaN</td>\n",
           "      <td>Michael</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>1</th>\n",
           "      <td>30.0</td>\n",
           "      <td>Andy</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>2</th>\n",
           "      <td>19.0</td>\n",
           "      <td>Justin</td>\n",
           "    </tr>\n",
           "  </tbody>\n",
           "</table>\n",
           "</div>"
          ],
          "text/plain": [
           "    age     name\n",
           "0   NaN  Michael\n",
           "1  30.0     Andy\n",
           "2  19.0   Justin"
          ]
         },
         "execution_count": 5,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "%%spark -c sql -o df_people --maxrows 10\n",
        "SELECT * FROM people"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        ">SQL queries also have other parameters you can pass in, like `--samplemethod`, `--maxrows`, `--samplefraction`, and `--quiet`."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "We can now simply use the Pandas dataframe from the IPython notebook."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 6,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "<div>\n",
           "<style scoped>\n",
           "    .dataframe tbody tr th:only-of-type {\n",
           "        vertical-align: middle;\n",
           "    }\n",
           "\n",
           "    .dataframe tbody tr th {\n",
           "        vertical-align: top;\n",
           "    }\n",
           "\n",
           "    .dataframe thead th {\n",
           "        text-align: right;\n",
           "    }\n",
           "</style>\n",
           "<table border=\"1\" class=\"dataframe\">\n",
           "  <thead>\n",
           "    <tr style=\"text-align: right;\">\n",
           "      <th></th>\n",
           "      <th>age</th>\n",
           "      <th>name</th>\n",
           "    </tr>\n",
           "  </thead>\n",
           "  <tbody>\n",
           "    <tr>\n",
           "      <th>0</th>\n",
           "      <td>NaN</td>\n",
           "      <td>Michael</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>1</th>\n",
           "      <td>30.0</td>\n",
           "      <td>Andy</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>2</th>\n",
           "      <td>19.0</td>\n",
           "      <td>Justin</td>\n",
           "    </tr>\n",
           "  </tbody>\n",
           "</table>\n",
           "</div>"
          ],
          "text/plain": [
           "    age     name\n",
           "0   NaN  Michael\n",
           "1  30.0     Andy\n",
           "2  19.0   Justin"
          ]
         },
         "execution_count": 6,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "df_people.head()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "If you want to visualize the data in the Pandas dataframe, you can write your own code to do so, or you can use our autovisualization widget:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 6,
       "metadata": {},
       "outputs": [
        {
         "name": "stderr",
         "output_type": "stream",
         "text": [
          "/home/itamarst/Devel/sparkmagic/autovizwidget/autovizwidget/widget/utils.py:50: FutureWarning:\n",
          "\n",
          "A future version of pandas will default to `skipna=True`. To silence this warning, pass `skipna=True|False` explicitly.\n",
          "\n"
         ]
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "a636af59090748c19091d6623bcfa21f",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "VBox(children=(HBox(children=(HTML(value='Type:'), Button(description='Table', layout=Layout(width='70px'), st…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "80c03fc27f1a44bdb200feaece400e64",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "Output()"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "464e2b2d3660495f9e2dade159d459f4",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "AutoVizWidget()"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "from autovizwidget.widget.utils import display_dataframe\n",
        "display_dataframe(df_people)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        ">You could also choose to have this widget display by default for *all* Pandas dataframes from here on by running this piece of code:\n",
        "\n",
        "```\n",
        "ip = get_ipython()\n",
        "ip.display_formatter.ipython_display_formatter.for_type_by_name('pandas.core.frame', 'DataFrame', display_dataframe)\n",
        "```"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Server-side rendering\n",
        "\n",
        "You can also have images rendered on the server, and then display them locally. This prevents the need to ship large amounts of data locally to do visualizations. First, we render a PNG, in this case using matplotlib:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 13,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%spark\n",
        "import matplotlib.pyplot as plt\n",
        "ax = df.toPandas().plot.bar(x='name',y='age')"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "And now we can view the resulting image using the `%matplot` magic:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 14,
       "metadata": {
        "scrolled": false
       },
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": [
           "<IPython.core.display.Image object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%spark\n",
        "%matplot plt"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "## Scala support"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "If you want to write your Spark code in Scala, you can easily do that."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Let's add a Scala session:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 10,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Creating SparkContext as 'sc'\n",
          "Creating HiveContext as 'sqlContext'\n"
         ]
        }
       ],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "![add_session](images/addsession_s.PNG)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "And just run some Spark code. Notice that we now specify the session we want to use, `-s my_spark`."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 12,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "res0: Int = 1"
         ]
        }
       ],
       "source": [
        "%%spark -s my_spark\n",
        "val hvacText = sc.parallelize(Array(1, 2, 3, 4))\n",
        "hvacText.first()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Now, we can query the table with **SparkSQL** too:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 13,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "<div>\n",
           "<table border=\"1\" class=\"dataframe\">\n",
           "  <thead>\n",
           "    <tr style=\"text-align: right;\">\n",
           "      <th></th>\n",
           "      <th>clientid</th>\n",
           "      <th>country</th>\n",
           "      <th>devicemake</th>\n",
           "      <th>devicemodel</th>\n",
           "      <th>deviceplatform</th>\n",
           "      <th>market</th>\n",
           "      <th>querydwelltime</th>\n",
           "      <th>querytime</th>\n",
           "      <th>sessionid</th>\n",
           "      <th>sessionpagevieworder</th>\n",
           "      <th>state</th>\n",
           "    </tr>\n",
           "  </thead>\n",
           "  <tbody>\n",
           "    <tr>\n",
           "      <th>0</th>\n",
           "      <td>8</td>\n",
           "      <td>United States</td>\n",
           "      <td>Samsung</td>\n",
           "      <td>SCH-i500</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>13.920401</td>\n",
           "      <td>2016-06-09 18:54:20</td>\n",
           "      <td>0</td>\n",
           "      <td>0</td>\n",
           "      <td>California</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>1</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>NaN</td>\n",
           "      <td>2016-06-09 19:19:44</td>\n",
           "      <td>0</td>\n",
           "      <td>0</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>2</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>1.475742</td>\n",
           "      <td>2016-06-09 19:19:46</td>\n",
           "      <td>0</td>\n",
           "      <td>1</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>3</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>0.245968</td>\n",
           "      <td>2016-06-09 19:19:47</td>\n",
           "      <td>0</td>\n",
           "      <td>2</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>4</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>20.309534</td>\n",
           "      <td>2016-06-09 01:37:50</td>\n",
           "      <td>1</td>\n",
           "      <td>1</td>\n",
           "      <td>Colorado</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>5</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>16.298167</td>\n",
           "      <td>2016-06-09 00:53:31</td>\n",
           "      <td>0</td>\n",
           "      <td>0</td>\n",
           "      <td>Colorado</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>6</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>1.771523</td>\n",
           "      <td>2016-06-09 00:53:50</td>\n",
           "      <td>0</td>\n",
           "      <td>1</td>\n",
           "      <td>Colorado</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>7</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>11.675599</td>\n",
           "      <td>2016-06-09 16:44:21</td>\n",
           "      <td>2</td>\n",
           "      <td>1</td>\n",
           "      <td>Utah</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>8</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>36.944689</td>\n",
           "      <td>2016-06-09 16:43:41</td>\n",
           "      <td>2</td>\n",
           "      <td>0</td>\n",
           "      <td>Utah</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>9</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>28.981142</td>\n",
           "      <td>2016-06-09 01:37:19</td>\n",
           "      <td>1</td>\n",
           "      <td>0</td>\n",
           "      <td>Colorado</td>\n",
           "    </tr>\n",
           "  </tbody>\n",
           "</table>\n",
           "</div>"
          ],
          "text/plain": [
           "   clientid        country devicemake devicemodel deviceplatform market  \\\n",
           "0         8  United States    Samsung    SCH-i500        Android  en-US   \n",
           "1        23  United States        HTC  Incredible        Android  en-US   \n",
           "2        23  United States        HTC  Incredible        Android  en-US   \n",
           "3        23  United States        HTC  Incredible        Android  en-US   \n",
           "4        28  United States   Motorola     Droid X        Android  en-US   \n",
           "5        28  United States   Motorola     Droid X        Android  en-US   \n",
           "6        28  United States   Motorola     Droid X        Android  en-US   \n",
           "7        28  United States   Motorola     Droid X        Android  en-US   \n",
           "8        28  United States   Motorola     Droid X        Android  en-US   \n",
           "9        28  United States   Motorola     Droid X        Android  en-US   \n",
           "\n",
           "   querydwelltime           querytime  sessionid  sessionpagevieworder  \\\n",
           "0       13.920401 2016-06-09 18:54:20          0                     0   \n",
           "1             NaN 2016-06-09 19:19:44          0                     0   \n",
           "2        1.475742 2016-06-09 19:19:46          0                     1   \n",
           "3        0.245968 2016-06-09 19:19:47          0                     2   \n",
           "4       20.309534 2016-06-09 01:37:50          1                     1   \n",
           "5       16.298167 2016-06-09 00:53:31          0                     0   \n",
           "6        1.771523 2016-06-09 00:53:50          0                     1   \n",
           "7       11.675599 2016-06-09 16:44:21          2                     1   \n",
           "8       36.944689 2016-06-09 16:43:41          2                     0   \n",
           "9       28.981142 2016-06-09 01:37:19          1                     0   \n",
           "\n",
           "          state  \n",
           "0    California  \n",
           "1  Pennsylvania  \n",
           "2  Pennsylvania  \n",
           "3  Pennsylvania  \n",
           "4      Colorado  \n",
           "5      Colorado  \n",
           "6      Colorado  \n",
           "7          Utah  \n",
           "8          Utah  \n",
           "9      Colorado  "
          ]
         },
         "execution_count": 13,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "%%spark -s my_spark -c sql -o my_df_from_scala --maxrows 10\n",
        "SELECT * FROM hivesampletable"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "And we can still access the result of the Spark query from Scala as a Pandas dataframe!"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 14,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "<div>\n",
           "<table border=\"1\" class=\"dataframe\">\n",
           "  <thead>\n",
           "    <tr style=\"text-align: right;\">\n",
           "      <th></th>\n",
           "      <th>clientid</th>\n",
           "      <th>country</th>\n",
           "      <th>devicemake</th>\n",
           "      <th>devicemodel</th>\n",
           "      <th>deviceplatform</th>\n",
           "      <th>market</th>\n",
           "      <th>querydwelltime</th>\n",
           "      <th>querytime</th>\n",
           "      <th>sessionid</th>\n",
           "      <th>sessionpagevieworder</th>\n",
           "      <th>state</th>\n",
           "    </tr>\n",
           "  </thead>\n",
           "  <tbody>\n",
           "    <tr>\n",
           "      <th>0</th>\n",
           "      <td>8</td>\n",
           "      <td>United States</td>\n",
           "      <td>Samsung</td>\n",
           "      <td>SCH-i500</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>13.920401</td>\n",
           "      <td>2016-06-09 18:54:20</td>\n",
           "      <td>0</td>\n",
           "      <td>0</td>\n",
           "      <td>California</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>1</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>NaN</td>\n",
           "      <td>2016-06-09 19:19:44</td>\n",
           "      <td>0</td>\n",
           "      <td>0</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>2</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>1.475742</td>\n",
           "      <td>2016-06-09 19:19:46</td>\n",
           "      <td>0</td>\n",
           "      <td>1</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>3</th>\n",
           "      <td>23</td>\n",
           "      <td>United States</td>\n",
           "      <td>HTC</td>\n",
           "      <td>Incredible</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>0.245968</td>\n",
           "      <td>2016-06-09 19:19:47</td>\n",
           "      <td>0</td>\n",
           "      <td>2</td>\n",
           "      <td>Pennsylvania</td>\n",
           "    </tr>\n",
           "    <tr>\n",
           "      <th>4</th>\n",
           "      <td>28</td>\n",
           "      <td>United States</td>\n",
           "      <td>Motorola</td>\n",
           "      <td>Droid X</td>\n",
           "      <td>Android</td>\n",
           "      <td>en-US</td>\n",
           "      <td>20.309534</td>\n",
           "      <td>2016-06-09 01:37:50</td>\n",
           "      <td>1</td>\n",
           "      <td>1</td>\n",
           "      <td>Colorado</td>\n",
           "    </tr>\n",
           "  </tbody>\n",
           "</table>\n",
           "</div>"
          ],
          "text/plain": [
           "   clientid        country devicemake devicemodel deviceplatform market  \\\n",
           "0         8  United States    Samsung    SCH-i500        Android  en-US   \n",
           "1        23  United States        HTC  Incredible        Android  en-US   \n",
           "2        23  United States        HTC  Incredible        Android  en-US   \n",
           "3        23  United States        HTC  Incredible        Android  en-US   \n",
           "4        28  United States   Motorola     Droid X        Android  en-US   \n",
           "\n",
           "   querydwelltime           querytime  sessionid  sessionpagevieworder  \\\n",
           "0       13.920401 2016-06-09 18:54:20          0                     0   \n",
           "1             NaN 2016-06-09 19:19:44          0                     0   \n",
           "2        1.475742 2016-06-09 19:19:46          0                     1   \n",
           "3        0.245968 2016-06-09 19:19:47          0                     2   \n",
           "4       20.309534 2016-06-09 01:37:50          1                     1   \n",
           "\n",
           "          state  \n",
           "0    California  \n",
           "1  Pennsylvania  \n",
           "2  Pennsylvania  \n",
           "3  Pennsylvania  \n",
           "4      Colorado  "
          ]
         },
         "execution_count": 14,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "my_df_from_scala.head()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# Cleaning up\n",
        "\n",
        "Now that you’re done with your Livy sessions, you should clean them up.\n",
        "\n",
        "Simply click on the `Delete` buttons!"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 15,
       "metadata": {},
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "![clean_up](images/cleanup.PNG)\n"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.6.8"
      },
      "widgets": {
       "state": {
        "002f8ae4f9064d21a99b1a3b5e477aa3": {
         "views": []
        },
        "004c2f98654d4c21b0e619ed9c9f49e4": {
         "views": []
        },
        "009c4ca9cff846e68a60bbc657f65381": {
         "views": []
        },
        "00c7108e57664937b3c7c2a387e9a0a9": {
         "views": []
        },
        "00d992d8cac14b6fb53f56208890216e": {
         "views": []
        },
        "00f5950d301142ad8fb892969d94b592": {
         "views": []
        },
        "018db6fa89df437abd40973ea9eea562": {
         "views": []
        },
        "019d0b3be4bc4202b4c7acac38ed3420": {
         "views": []
        },
        "02db41ae16524c4988773ad4c86f82fb": {
         "views": []
        },
        "035c94ab02104d6e82ec7dabe8c1857e": {
         "views": []
        },
        "03a2e48efd634e3f980e2cfb3ada9cf6": {
         "views": []
        },
        "03a6eadcdc694192b26a2ad3b7fc0c1b": {
         "views": []
        },
        "03ab2b795edd4490aac7ce8f877fc6a0": {
         "views": []
        },
        "04696ca667544c69bdfec3103c1d4ff7": {
         "views": []
        },
        "046b13c070814437bb1f0f881e81b341": {
         "views": []
        },
        "04a4e4f7dbff4a678dba6936902c8f47": {
         "views": []
        },
        "04d484521e454983ad7baf39d81f0407": {
         "views": []
        },
        "04fd12a0280f4366929d04f732cdd228": {
         "views": []
        },
        "054a28c54021495789ec308b8f3d4480": {
         "views": []
        },
        "05a081b82e7a44248a670702ead6e6f8": {
         "views": []
        },
        "05f65dc0da2b4a18b5e7ed05e399335b": {
         "views": []
        },
        "06b6840f09874791aa57d97147c93430": {
         "views": []
        },
        "07b9939ac2cc4eb2a282d65606763a7a": {
         "views": []
        },
        "08c8b61556294808885a61098aa5ac86": {
         "views": []
        },
        "08f8a41c399a40c1bf8e17930fc69098": {
         "views": []
        },
        "09c9728142b74370b6d177d6bd9859b2": {
         "views": []
        },
        "0a6e74d776ca48128f74aeb1bcf5a7b0": {
         "views": []
        },
        "0bd679072aef45008ec4fd8ffacb8328": {
         "views": []
        },
        "0c677213b62c475caad8dbe92b2ab816": {
         "views": []
        },
        "0d7718a9e4144a1ca721e6039da51d5b": {
         "views": []
        },
        "0edfb4fff97a4ec8a9c5da54a9240039": {
         "views": []
        },
        "0f00b5152a284452993746a058e1118a": {
         "views": []
        },
        "0f5d611c9b294132a001bb79adfd3ce0": {
         "views": []
        },
        "0fb9c6d25b40472b9781e7aa0434e0f6": {
         "views": []
        },
        "1030af1a1acb47aa8b914ebd9d21e42c": {
         "views": []
        },
        "10956737c8b64c0aaa09a2ee747c07b5": {
         "views": []
        },
        "10b51e316f5a485ab2da0f3ce11d760c": {
         "views": []
        },
        "10be30034079447fa908cdf1f5d2e151": {
         "views": []
        },
        "10d12c2da458489394588cec6b2e3f0b": {
         "views": []
        },
        "11294cd045fc4dbabf8c8a53ec7cbc60": {
         "views": []
        },
        "117ffda0a5d145e4b5e5cf811c726872": {
         "views": []
        },
        "12a7a24cefdc494eb99cd0fb46e0f5dc": {
         "views": []
        },
        "12d698351adc4448bc3efc0c57c2ab81": {
         "views": []
        },
        "13282c201b744352ad1c2a6c22ea1c99": {
         "views": []
        },
        "137b242fbebf4b8c8b99e6ab415b967d": {
         "views": []
        },
        "13de53ca3fe24a389640a7516ce105fd": {
         "views": []
        },
        "143cb702034a440e88e68f6ae62bc032": {
         "views": []
        },
        "15754d7af7d1470a9cc21f97684e38d8": {
         "views": []
        },
        "1661a94a6ce845fdbe323cc46084a981": {
         "views": []
        },
        "16bec478883347788cc19f474713798c": {
         "views": []
        },
        "16fc6f971f56469392b4f379ddfe74fc": {
         "views": []
        },
        "17499fa9aa1a4c1bb64b37bc38cc5ebd": {
         "views": []
        },
        "1853618953434a67b21a1d9ed5ed7ed0": {
         "views": []
        },
        "18bf210df8884b37a407a058c988f1f1": {
         "views": []
        },
        "18e51416a1b74e65b0ae23b259dc8766": {
         "views": []
        },
        "198ca3addbe141bead2b47d0f638ae06": {
         "views": []
        },
        "1ab6bc4ed23c4ee5bc6872f9892a00e9": {
         "views": []
        },
        "1b8e619288e842d0a0db51f6359c0019": {
         "views": []
        },
        "1baee760b0ec4d27a37ccc6adc169e3b": {
         "views": []
        },
        "1bc5bc1c4a0143d2a792c8ea248660d5": {
         "views": []
        },
        "1bd7fa1fca284f73abccfe96acec1f59": {
         "views": []
        },
        "1d0b08f5ddeb499b9246ea2720fc724e": {
         "views": []
        },
        "1e627f7c330c40dea2f4cd85c7a1291f": {
         "views": []
        },
        "1f0c57b21b5c43d086d8e5ba58dedb13": {
         "views": []
        },
        "1f9b6b7628434a6ca51cf780373d9c8f": {
         "views": []
        },
        "1fa98a768cb44ace8a894ab5948f6042": {
         "views": []
        },
        "1fe697b0defa402fa2b61946528febfc": {
         "views": []
        },
        "20589d964e4843bb821dbad786404875": {
         "views": []
        },
        "2333daceae5b43bea7e62edb4c4832d3": {
         "views": []
        },
        "238a0a911a1349ed8380228ef3cdfc82": {
         "views": []
        },
        "23cc4384a44f4532ac5e2540533d0e47": {
         "views": []
        },
        "23cf3274a84f414c9643769286b4b155": {
         "views": []
        },
        "246eb5ef07104cdd8c6138b5f96fbd75": {
         "views": []
        },
        "2495f052b81e4a8a9feb49fca781a58c": {
         "views": []
        },
        "249b545bcee040bf90873762c057ecc9": {
         "views": []
        },
        "24df30ddcfee47f1a34f72dd624bb3cf": {
         "views": []
        },
        "24e6add1e6b94329b6147ce5217f58a6": {
         "views": []
        },
        "25f258856c464574aa41788464e8f11b": {
         "views": []
        },
        "264fdb8033e14d9ab95440b7b6be1c7d": {
         "views": []
        },
        "27699877565543a8a43d4f06244f07ca": {
         "views": []
        },
        "276e908827664d6ca836a41946575ee4": {
         "views": []
        },
        "27d87d70d7894c9d930c147e460d91db": {
         "views": []
        },
        "282884489d8740a6af022c86b9e99c65": {
         "views": []
        },
        "282b035d4ab04ca79eb343f8ddc3e774": {
         "views": []
        },
        "28438bc6e51d4c119ca45fb1f3ecb35b": {
         "views": []
        },
        "29eefb5c7c28475b818d3ad36a509238": {
         "views": []
        },
        "29efbc027eba484aab2fa1360454445c": {
         "views": []
        },
        "2a66c91e175b4e92b4e4ae76bb490490": {
         "views": []
        },
        "2a776d1c846f49cb8d728143e2a35ce1": {
         "views": []
        },
        "2bc2b0ace5354d0b883c5eafba8eef62": {
         "views": []
        },
        "2c37f830b78f410db283fde0a010e64e": {
         "views": []
        },
        "2c8b324519c14279ba138ee643f2cbf5": {
         "views": []
        },
        "2d1742064a0241c9a860081d93e8abce": {
         "views": []
        },
        "2d460f58343546418ceb2bf755aa8987": {
         "views": []
        },
        "2d98fc68931b46649de3302db7f65d86": {
         "views": []
        },
        "2de034e8ae544572887ecc83624ac3d3": {
         "views": []
        },
        "2f425327636b40d39abdc24394a31715": {
         "views": []
        },
        "3077d7a1a6e14af58ef121788892bdba": {
         "views": []
        },
        "3097db359f32428380bd84844c4179f0": {
         "views": []
        },
        "3169e07189584897975927dce5adf764": {
         "views": []
        },
        "31849bc7b28d4589836a0b6e605dee29": {
         "views": []
        },
        "322aee57512f4f5ab41eca43707c46dc": {
         "views": []
        },
        "329851df8dea468abe21ae8a0cda45c6": {
         "views": []
        },
        "3344debb3acd430faea0994bd692fe4c": {
         "views": []
        },
        "33d217abd48c4c3e83f25b735bc891d3": {
         "views": []
        },
        "33edc73d8e344c258937eeb75375994b": {
         "views": []
        },
        "34c0790ee2254a6881040daa11b9df5d": {
         "views": []
        },
        "35bdcccf9df84ef986dd590c3bc0e9f5": {
         "views": []
        },
        "35fa85a408c144e1a3c3fb03e97ec67f": {
         "views": []
        },
        "362c101871774640aaef37c497d719f9": {
         "views": []
        },
        "363577c09cd1475dadf371d1b097608e": {
         "views": []
        },
        "3835d3b5959544bc8b00dfcdc981c438": {
         "views": []
        },
        "38b9afbba069482d8db02aa976e29827": {
         "views": []
        },
        "392548f96b7249049480dfdc2666bada": {
         "views": []
        },
        "3aa855c83cbe448cb94b45db33d4182d": {
         "views": []
        },
        "3aade98a21954759b4d434231e4a2875": {
         "views": []
        },
        "3bad19589d8e47c4a022986c6ca1b428": {
         "views": []
        },
        "3c5392c494fb44df82aa6ee566c91fa7": {
         "views": []
        },
        "3ce3aaae5783451a98e605cbd7ea8b61": {
         "views": []
        },
        "3d38096eb76247378bacdc3e7b70d75b": {
         "views": []
        },
        "3d774014e1d24bf9a3f2d74389bee570": {
         "views": []
        },
        "3de944a68eb84bc592b1d3f14725dc8f": {
         "views": []
        },
        "3eb0ac1b71944f7982acef824529c3ea": {
         "views": []
        },
        "3f9c8628ceee4ecaa74a7ef36225532d": {
         "views": []
        },
        "402d7bd614584f5aabc2b02a2c45bcb6": {
         "views": []
        },
        "4049067402d84dfaa1a12684449dc53b": {
         "views": []
        },
        "40888c9d2ccc47a0a88143ab40d175fc": {
         "views": []
        },
        "415abd94649241d4a9d3037131679cf8": {
         "views": []
        },
        "422f739af31a4e19b1ec558c05692e6b": {
         "views": []
        },
        "42b424b4eafb43a2b7604dbecab792e6": {
         "views": []
        },
        "433b70114bf848089eed2a346559b0f5": {
         "views": []
        },
        "43e77dfd670e4cfda1678637cf93cb7c": {
         "views": []
        },
        "4448c88750ea4e3b9f6839342d4627f9": {
         "views": []
        },
        "444fd0b6cbdd4855b09919b11183ba33": {
         "views": []
        },
        "445cb7eeaaaa420fbc58e1f884f99f2f": {
         "views": []
        },
        "44c235f9720e48648a90bd8ad90f1119": {
         "views": []
        },
        "44f8efaec90d4c05b82e028b06f7c1d1": {
         "views": []
        },
        "45582badaca0467690a10655931e6acc": {
         "views": []
        },
        "4575b6e315d64062beea7b0c2f10ab95": {
         "views": []
        },
        "459cea80c3124785a13d8b49ef866c8d": {
         "views": []
        },
        "4672e5bda4d8471baaef1a70c90bcf5e": {
         "views": []
        },
        "46917e92c24749dfa76c051a66f39476": {
         "views": []
        },
        "4696dfe7fd724a2d95e382a0fd335a6f": {
         "views": []
        },
        "46b8549d804a4fdc975086e0fec5143a": {
         "views": []
        },
        "46c5ed588ce2404881003e8ae0f5e90b": {
         "views": []
        },
        "4701b38eeae44891b444bb5d95097eb7": {
         "views": []
        },
        "473be50b845e4aa9ad488fd564657fdb": {
         "views": []
        },
        "47b308b300a1422ab1076b5cb2414b67": {
         "views": []
        },
        "481a458e68604b428c70dffe4bb9528f": {
         "views": []
        },
        "491f59eeec8b4451b4100b534130acad": {
         "views": []
        },
        "4975b31264f043ecb410d2adeab39e6c": {
         "views": []
        },
        "4a71e8b610bf410eb4f0d2ac9167dbcc": {
         "views": []
        },
        "4b044052e7e44688a7532662638cfd49": {
         "views": []
        },
        "4b1b84c19e544868b970c9ce10c1f2f8": {
         "views": []
        },
        "4b50155fcd4d41969f218edc1eab9998": {
         "views": []
        },
        "4bf025112f8d471285173d340cc4ca0a": {
         "views": []
        },
        "4c4727b4f60e4919894c916efbef41df": {
         "views": []
        },
        "4dc406d1f5c8408c8b5d47a094404a37": {
         "views": []
        },
        "4ddebd9065534901beed6503f6291fae": {
         "views": []
        },
        "4f759d4c91124ad786bf2c9386bb3375": {
         "views": []
        },
        "4fdf12b30d234288ba0ef0bb760ab988": {
         "views": []
        },
        "5027215f4ce84a0ba00321fec1e612c7": {
         "views": []
        },
        "50f19f55dccc4c3b9b44a1c320c5b008": {
         "views": []
        },
        "517a453018db47d0b507295272fdcebe": {
         "views": []
        },
        "5256d05ab29d49bdb503f02481e5c4c1": {
         "views": []
        },
        "53051047cbb341dc9fa87a087ca93cbd": {
         "views": []
        },
        "5317a548c0434bf0ba205331f6d8598b": {
         "views": []
        },
        "542423514d3645abbd350fb4136.2.0-RC13": {
         "views": []
        },
        "546e50c7c2f946418e907ca7824250c4": {
         "views": []
        },
        "548779cf3af64522b2d0ad0d2c8133bd": {
         "views": []
        },
        "5596337ff6864cbd9eb46154b461f189": {
         "views": []
        },
        "55a6cd5ce243492d8063c8d0c1e0d929": {
         "views": []
        },
        "55f8811663074906865afe5e9181b92e": {
         "views": []
        },
        "56d8825e4b3c4faf81fb8195985c47a6": {
         "views": []
        },
        "570d2c105a544fa783294a4450929ee6": {
         "views": []
        },
        "570ed0bbcc364bc0942805ee4408167b": {
         "views": []
        },
        "572ae3f59f8140a999f62af27433c975": {
         "views": []
        },
        "589166c6504747259e8cb1fd9b49b4a6": {
         "views": []
        },
        "59391b7deded46bab2e797a2f69bfd34": {
         "views": []
        },
        "5a6dc19dcfe24ff4b8e3c584e711fb61": {
         "views": []
        },
        "5a6fe61218734b4a853f39beed16d8e4": {
         "views": []
        },
        "5a76e0a8b250439aba0aa5542304cefb": {
         "views": []
        },
        "5c625be86290481c8b090ada16146417": {
         "views": []
        },
        "5d3afeef0d074f6e9e64d72dd74f29c0": {
         "views": []
        },
        "5d48ace46b5d45ce9b24cf5acf67ad0c": {
         "views": []
        },
        "5dfcee09b67b4a3ba04bd63415d7225b": {
         "views": []
        },
        "5e08e21398734a7e8db6ae506a20cd0a": {
         "views": []
        },
        "5e42397e8d6f458cbcd370e69d47f8c4": {
         "views": []
        },
        "5e5c63507657454b98fc57dfe35bf936": {
         "views": []
        },
        "5f654c7a180147258e05b6c9da016de4": {
         "views": []
        },
        "5f810a7855f346b38d82280605b7c74e": {
         "views": []
        },
        "5fe5e92541534bd19c15248f7d5270ef": {
         "views": []
        },
        "5ffb942be7e744ac9a5d9b861e046069": {
         "views": []
        },
        "6085f053623b4c7cbd5292e31984bbae": {
         "views": []
        },
        "60a6717e2fdf4de38b40d0c645397b44": {
         "views": []
        },
        "60af173b13b241fc93d18514a743ccad": {
         "views": []
        },
        "60fc7fe6ff614afb8b9910e54e32039a": {
         "views": []
        },
        "61ca149f3e5847f49020b6fd6b8997d8": {
         "views": []
        },
        "623c022f68534a58aa870a6ba3cea641": {
         "views": []
        },
        "62d045f626ae4b399fdcbd4104e24d85": {
         "views": []
        },
        "63fd19904cf346cbbc4f4c3ac642bf42": {
         "views": []
        },
        "6403964963be4611a9f9cc534d6314c3": {
         "views": []
        },
        "6455039fbc244720b3b8e30277a73104": {
         "views": []
        },
        "64e752cbf7d241c491483595c6db885f": {
         "views": []
        },
        "64e89e2e7531477b8d2c441d7b2e316b": {
         "views": []
        },
        "65b90d8275eb4dc98aca60b1200d2bbb": {
         "views": []
        },
        "65da2fd144d042aa8029753a14a1c62f": {
         "views": []
        },
        "65fc8ae2fa9249d3a87eed74b90c3f7f": {
         "views": []
        },
        "663154f2a2834b968b8ba1e8fe715212": {
         "views": []
        },
        "6642f76bdaa44e69b9031e107ddcad40": {
         "views": []
        },
        "6683c6256f35443d8a5ac6129a570703": {
         "views": []
        },
        "670ca1732799483aadbf1a0efee67f0f": {
         "views": []
        },
        "671e73335eaf4637b36183453662b5f6": {
         "views": []
        },
        "672a0d46f9e444dba91a60b0dc077ca8": {
         "views": []
        },
        "674ee5fbb23a40778c7dbd6b213671ad": {
         "views": []
        },
        "67968ff65c8447aa92f88077ee31999b": {
         "views": []
        },
        "67d2296927b04999abc4e31de12649d9": {
         "views": []
        },
        "67fb241301f548ef988403c333f59b0f": {
         "views": []
        },
        "685b9f522b88435ea64e43462bdccd73": {
         "views": []
        },
        "68bd27b63aa64df3a541de2bbf317194": {
         "views": []
        },
        "68c332448b4549639a4242d827eb13bb": {
         "views": []
        },
        "6b1aabe535924dd79317641ab314bd1d": {
         "views": []
        },
        "6b2a7e2dd4d7425fa71309c300460225": {
         "views": []
        },
        "6bce7fd4c92f405082e36f6e652ac52e": {
         "views": []
        },
        "6c287ca8c86046ab8c67641cc7d497f7": {
         "views": []
        },
        "6cae767bd0444a0793028a847a35716a": {
         "views": []
        },
        "6cb2d3d2f1d9422bb30ec830e3ca4656": {
         "views": []
        },
        "6d79c61a8f6f4229a1489a47a0a56c51": {
         "views": []
        },
        "6d83179436ab478fad16b3f21f08e228": {
         "views": []
        },
        "6dba3f2ca39d497f8afcd9fd8dc1375e": {
         "views": []
        },
        "6dbf6318bb994343b141a1b17809faf8": {
         "views": []
        },
        "6dfcb5f7979a4eeaa0eecadf46c50ecb": {
         "views": []
        },
        "6e17c3c177974b0db1b5bedffbd5abb7": {
         "views": []
        },
        "6fa1ee774231417a84f0838de35109f5": {
         "views": []
        },
        "70ab4433d1214b09b848c7107c1eb181": {
         "views": []
        },
        "70ddb0cc4abc4006bca26ac54b64ba23": {
         "views": []
        },
        "71f7e418ed7f4903aa41dce7b01529cb": {
         "views": []
        },
        "72dc6d4e381040749e0658249313aae7": {
         "views": []
        },
        "730077e765794fcbad4dfb0abbf93797": {
         "views": []
        },
        "7342f7075fc949cdb9ea7e0e4c4b1252": {
         "views": []
        },
        "73aa7e6af0ef4aafacb383e609955996": {
         "views": []
        },
        "747ec4b3b1574357a65da93186074953": {
         "views": []
        },
        "74ad9c932cf4460db73aa6e6b7b081fe": {
         "views": []
        },
        "76df612393c54c71826fccd8039b3803": {
         "views": []
        },
        "777dcf72b5564ddeb4fd2949670308d3": {
         "views": []
        },
        "78a6e9c0747b448ca9fddf5a7d750b2e": {
         "views": []
        },
        "795c25007857492b9f26e5d831bfb496": {
         "views": []
        },
        "7a7615fb4a3a43d2820f19ab0f5417e0": {
         "views": []
        },
        "7b13fc0849ab44b0ae4560916f880cdd": {
         "views": []
        },
        "7b1d7be6a10c4b378bd899c08879257f": {
         "views": []
        },
        "7bd220e11804440686db7cca4c2425a4": {
         "views": []
        },
        "7c1c03f8a35645ef875b14cb3f3ebb4b": {
         "views": []
        },
        "7c400f5db4a64a5aa44ccb62dea332a9": {
         "views": []
        },
        "7d75d4f1ca4d4995974dedd35995d7c0": {
         "views": []
        },
        "7dc224ea134d4645a1010b347ced01e2": {
         "views": []
        },
        "7dc22cc9c07d40489216512eac46182c": {
         "views": []
        },
        "7ddfccf431174040a1e1c82e81864466": {
         "views": []
        },
        "7e784a69a23c41429ca9bc6515d36856": {
         "views": []
        },
        "7eacf8bae8e04943a985e0c0e522424d": {
         "views": []
        },
        "7ed6ab5e64234726af18f0cb3d72ff78": {
         "views": []
        },
        "7f34bd72ce984ef2a31bc4762d40840a": {
         "views": []
        },
        "808b862d23e9452caf0ae47d1b9f4b01": {
         "views": []
        },
        "80ead7e851af4a62a29e171393140ff6": {
         "views": []
        },
        "82c4f335b3c64979ab59f42239a4e422": {
         "views": []
        },
        "82e1594827514f5f93baf32fef3c4355": {
         "views": []
        },
        "83117696251c4149ad98cff1d7ea99dc": {
         "views": []
        },
        "8354f4a445db4e71bf934e20b0a68e60": {
         "views": []
        },
        "83f5876c25744d36a3ae39e07c9ad705": {
         "views": []
        },
        "845ee392539d4efdaeb34a9ea945f6c3": {
         "views": []
        },
        "84d0ea03663244759f5aa32a0bdfeefe": {
         "views": []
        },
        "855d9d01c57841cb9e060f8365e8bda4": {
         "views": []
        },
        "8586a4d3cce4412bbf6bd070206962b9": {
         "views": []
        },
        "8587971c26ca46539229a092eff9af5f": {
         "views": []
        },
        "86076e49796f412ea0b5040037a6ed65": {
         "views": []
        },
        "8663169e1df3448ba9ae8867118daa0d": {
         "views": []
        },
        "87446f9e85954d1eb5a6459fc25c87d0": {
         "views": []
        },
        "87451e56ebc2445d8d0604ef9abd8921": {
         "views": []
        },
        "88dad515792c4dc0a0beb8868fe3d5a2": {
         "views": []
        },
        "88f8b30e65d94ffaa3ad4a42edd6d9af": {
         "views": []
        },
        "8956b2ba91ff49eb98900ef5ad76a9e6": {
         "views": []
        },
        "89ce1ebf75b74a34a54acee9a7957d9d": {
         "views": []
        },
        "8a4880dfeaaf4b7ea1624b04719afbf8": {
         "views": []
        },
        "8a965e13dfc6462d9b51124197b40e44": {
         "views": []
        },
        "8b031e693b5144c389079df0c5fe9bcc": {
         "views": []
        },
        "8b153feb1a9f4071a5a6276bdbb61fe0": {
         "views": []
        },
        "8bab50e956d14f4c9cec96362e20eea9": {
         "views": []
        },
        "8beb4a359bbf40b0a092ea80349dda73": {
         "views": []
        },
        "8ce77cdf3bcc49b7b4dd0f705b3b283e": {
         "views": []
        },
        "8d9edff75e754616b1cb04c3c8820dd4": {
         "views": []
        },
        "8dbcae4a829b4eccb1925e8c3af261c4": {
         "views": []
        },
        "8dca34d52cc74dd8b727de4c3066c3e1": {
         "views": []
        },
        "8e72b91a7a6b4fb889edcb2f57ffee0d": {
         "views": []
        },
        "8e89167d51d64dd4b4def1287a5f9e70": {
         "views": []
        },
        "8ed2bfc5f0f14b889528a0f1a277df73": {
         "views": []
        },
        "8f513db325fc421497ee709831a1c2f5": {
         "views": []
        },
        "8fec883cb038446a9c4d6db8e1770f3d": {
         "views": []
        },
        "904097ea22684113b5080684929937b5": {
         "views": []
        },
        "908cc4dcbdd847e29f6a8343b580a1ca": {
         "views": []
        },
        "90e8be9783004ff4a8d72432f3f9e205": {
         "views": []
        },
        "9261f331e1a745879d54c764522a8f86": {
         "views": []
        },
        "93469278a0474154bb02b9c50a893e91": {
         "views": []
        },
        "938c369269d5489f8c77193bfc71d20d": {
         "views": []
        },
        "93ef853b3cd34ad39102b0e31c0c990f": {
         "views": []
        },
        "9487b8da5d604db8881dcd7e32a8c76c": {
         "views": []
        },
        "94e076fece7f44798c862b27475fd6c0": {
         "views": []
        },
        "9549aa1af9da4326b8beda04cc9965df": {
         "views": []
        },
        "9553fb427cd44a749bd738f7c3e97d9d": {
         "views": []
        },
        "971407e795ba4a0683242d7bd560e759": {
         "views": []
        },
        "97aedcaa2584402196bed40dffd6db2f": {
         "views": []
        },
        "97ec777d6ea3466eaa925e751d213738": {
         "views": []
        },
        "9a41c6ea99b64d80bf3d415ad0af4e30": {
         "views": []
        },
        "9acfbb3334804de6bae91534c989ca5d": {
         "views": []
        },
        "9b87a37acfe94f64a68178320f4cf442": {
         "views": []
        },
        "9ba03755d3ed4d20ae713d31c6c72bb2": {
         "views": []
        },
        "9bb3d7ce1cef4282947a22e3b520ebfd": {
         "views": []
        },
        "9bc34217f77541a0b501da965f04d446": {
         "views": []
        },
        "9c8ced28a4b8408894300df6a0b74a63": {
         "views": []
        },
        "9cb8dbedaa1f4cf191e41ef1bbff56b7": {
         "views": []
        },
        "9d1f7bf45ac44fda957a52b010886774": {
         "views": []
        },
        "9d471f6a96314aab93140e3a90986acc": {
         "views": []
        },
        "9db39ad0952142a1bac85999874b11b2": {
         "views": []
        },
        "9ee4abf8a8194b8d8296ccdc3c1d3a58": {
         "views": []
        },
        "9f47e144552f48569e862eb418004f29": {
         "views": []
        },
        "9fe674c4ddb747d7916bc61bd1230871": {
         "views": []
        },
        "a10eba8636b444d6a31012b191e8fa07": {
         "views": []
        },
        "a1259877889b495d85e6ce12e750b89b": {
         "views": []
        },
        "a187cbf0b95d42ec84ae60b4be650f3d": {
         "views": []
        },
        "a1885ce9d42c4421909f530920525de1": {
         "views": []
        },
        "a1b7d45189a441819ebe16d49e1e8aa9": {
         "views": []
        },
        "a1c82b3f292244a5b60b9de436121f88": {
         "views": []
        },
        "a25ab1dc75164dd3bdde1a3dd4f4edd6": {
         "views": []
        },
        "a2665683a88c4f24aa054a937672955d": {
         "views": []
        },
        "a3c14f14214248ccb8919d438b539ef8": {
         "views": []
        },
        "a538dadcd7754de2afc5fd16672d0de3": {
         "views": []
        },
        "a58ab9363f7541338b282a6e81d03c47": {
         "views": []
        },
        "a5ce36495fb8438d87f2f3523aa64f04": {
         "views": []
        },
        "a6ec33b1b5174f35b6c938373c122a98": {
         "views": []
        },
        "a720092102ae4c9691f136a67ce71f12": {
         "views": []
        },
        "a771e1949812402aa5d39635f57432ce": {
         "views": []
        },
        "a8413baecf71466aaf62b79e190d6a06": {
         "views": []
        },
        "a94aa3138a4941f6a909f0fe35510a9e": {
         "views": []
        },
        "a9935ae41a7143d1b6405adca33713c9": {
         "views": []
        },
        "a9c34bb9b2cb489eb00cd888dfe3823b": {
         "views": []
        },
        "ab3a517dbc0a4b03affb4dbc512e8d73": {
         "views": []
        },
        "abb433f63cf5451080a0d54e1ab8cbaa": {
         "views": []
        },
        "abcba84c7b4c44198397065c6e0f2f92": {
         "views": []
        },
        "acfd856a7c9f400a8914f0ecc3790508": {
         "views": []
        },
        "ad4c647f8f3343fc9d4b43534c585588": {
         "views": []
        },
        "adb449d9448b447592bb6a95bfc7337c": {
         "views": []
        },
        "adfeb551fe1c47bf8eabdfedd76d7fd1": {
         "views": []
        },
        "af68ea7411de492488055fcade00861e": {
         "views": []
        },
        "b100927498244b3c94965c4e024fb7d8": {
         "views": []
        },
        "b1b8d8fb420d425681f81d0827be57fb": {
         "views": []
        },
        "b1bb0ce4e0a14099b64ad266a85f5441": {
         "views": []
        },
        "b1e81131ec9440618c236c3cd1e17c3c": {
         "views": []
        },
        "b2a66a13c82240c5912da1fcde674bbe": {
         "views": []
        },
        "b332ddc932d441c5876ec52d7ee0def6": {
         "views": []
        },
        "b35d8e6c4cbc43e5a14616d38eba36c9": {
         "views": []
        },
        "b4c726ddd4a64523a545f4c500e9c014": {
         "views": []
        },
        "b4cf431de33449d98c64e4b13d18c935": {
         "views": []
        },
        "b5c649812c23466aae8eb78fc0236e31": {
         "views": []
        },
        "b5d23520dc014e40a59696c38b942337": {
         "views": []
        },
        "b5e48857b2734c6e859242629fa251a8": {
         "views": []
        },
        "b6458f0a953646db8f6e880b5faad2af": {
         "views": []
        },
        "b65dbc60d4c44ac3b00d6fb82193a102": {
         "views": []
        },
        "b6e97a2306894a278c693c7198b352ad": {
         "views": []
        },
        "b766ac82ba0a4829a0e28cd4253d65ea": {
         "views": []
        },
        "b771e402dd7b4249b9fc0b680075122f": {
         "views": []
        },
        "b7f05f9c1de547ba983dbad0c7b4ae13": {
         "views": []
        },
        "b850fa1c709b4279900c9f11a87ea146": {
         "views": []
        },
        "b8eb234453e84a5a9a5fa765f4a5d1cb": {
         "views": []
        },
        "b9d8ab3e20c44357abb11c99b9f7c36e": {
         "views": []
        },
        "b9f12425601b416d956a0bb768f88e54": {
         "views": []
        },
        "ba719d94af224d6eaf7bacdea87d344b": {
         "views": []
        },
        "bb2908860204416fb59ac36d727232de": {
         "views": []
        },
        "bb4b0b69ff9442458c3c5c6dccb4880c": {
         "views": []
        },
        "bb6e18a974ed47289a5b51f2aa739dc5": {
         "views": []
        },
        "bccc58aafdb549f8bcb852041f6be337": {
         "views": []
        },
        "bcec7b62b9e4469a9e62d92ef585464d": {
         "views": []
        },
        "bd24c08617314e5aaae77b0d25545f9e": {
         "views": []
        },
        "bdb7d64997994ba69c62470cfb60858e": {
         "views": []
        },
        "be1f132405c240ad8ab5e4f5ebb9e745": {
         "views": []
        },
        "be6a0890a32c4698ac978b197266510b": {
         "views": []
        },
        "be91a016f0e6463ba1eefb4eb3efb997": {
         "views": []
        },
        "bed02ab3a20d4fa0ae848fc7b4479652": {
         "views": []
        },
        "bf21ae3564f046ab86d90a034945ffd6": {
         "views": []
        },
        "bf2e3202cbd943a6af473a804bd2b6f2": {
         "views": []
        },
        "bf904c08b2bf47b190cda19f213565da": {
         "views": []
        },
        "c1589808d9e2467680d036a37105b5b1": {
         "views": []
        },
        "c21ad1c067a24277b2d3fed42970427d": {
         "views": []
        },
        "c3a0851ef9554a4fad467fbb0fd2a369": {
         "views": []
        },
        "c3b565c39dad40c28b67a41a0a26e79f": {
         "views": []
        },
        "c47ecb8c98684578af14f63e29828562": {
         "views": []
        },
        "c484a8dafa3d4563b6148076858e33bc": {
         "views": []
        },
        "c50e55e118fa420398ab5466bd6c6cee": {
         "views": []
        },
        "c51df391bb7e466c9b3be6162286a432": {
         "views": []
        },
        "c52566dd0b194d5b866ca8c20bf0748e": {
         "views": []
        },
        "c5598250b79241f7a55ca0573cc9da2d": {
         "views": []
        },
        "c58ac451c30446e9804247cd39ee7ba0": {
         "views": []
        },
        "c599fcb19de44d509f041d92820adf0a": {
         "views": []
        },
        "c71febd4d3a84a62a6bd48867ba34e1a": {
         "views": []
        },
        "c7a30d6a6f23417e8540ae786054484b": {
         "views": []
        },
        "c988e0f363544fdfb70916e1bb199f4d": {
         "views": []
        },
        "c98c2c53733942d6a87af3481cd17e42": {
         "views": []
        },
        "c9a6e51954354815ada1faba970a77f1": {
         "views": []
        },
        "caace157e7b947c683dfa4d1199d7e4c": {
         "views": []
        },
        "cae79ced27084b7ea6491e285b8269e2": {
         "views": []
        },
        "cb0d745166284fd893667411119516ec": {
         "views": []
        },
        "cbb826cb40c446de9c9f60cd35e8007e": {
         "views": []
        },
        "cd3d3d45091648ba924445fd0ef58806": {
         "views": []
        },
        "cd5b82ef8f8c4453954f65663acce521": {
         "views": []
        },
        "cdfb1960ddd94d8384856b603c146140": {
         "views": []
        },
        "cefdb90b823949edb8cc828dee33c421": {
         "views": []
        },
        "cf0acaebe42642069ca503d9974277f6": {
         "views": []
        },
        "cf50521ae02146b3b139a55c0f1b9be2": {
         "views": []
        },
        "cf95457cc4d24bb6a478fcfc6350c4bc": {
         "views": []
        },
        "cf95a7ebf1d04a10802d76fc1fba0a16": {
         "views": []
        },
        "cfd91142673745088428f7d7ddb813f5": {
         "views": []
        },
        "d047fb6ab9ba47a4985417d5fc073b99": {
         "views": []
        },
        "d228512ec637477d959cae10453e4147": {
         "views": []
        },
        "d23e27d78a4b4239ac1f2ea9cb0380a3": {
         "views": []
        },
        "d290e78eb99e446588972989163e2dee": {
         "views": []
        },
        "d37ffb626d0c405cb43a1a70b1cd48d9": {
         "views": []
        },
        "d3944b93c9bc4f07b4f14e6c3b7e2455": {
         "views": []
        },
        "d3c1f01d8de9474c8adefe5f9628ed2c": {
         "views": []
        },
        "d411ce291f19460fb415cde6bffca849": {
         "views": []
        },
        "d577384c378e4f679de59952b2883608": {
         "views": []
        },
        "d5a49c390bb84f7a9aa1d615eca3aafe": {
         "views": []
        },
        "d604bee51f274eaf9ecf52aa4ea2f979": {
         "views": []
        },
        "d614e53a114f4d378526a8ae32a5905a": {
         "views": []
        },
        "d66af11efe274c37adfc09bfac2bf5c0": {
         "views": []
        },
        "d6dfdcabe4084df6968595b09cf7667a": {
         "views": []
        },
        "d6eb5bfab110447d87b8f6e0c1c3cf85": {
         "views": []
        },
        "d7603a0318694b72aa57799d224f7d0f": {
         "views": []
        },
        "d818eea5d08b480b956a67399068deac": {
         "views": []
        },
        "d84eb6a1eb414b729f7d22f886c81ceb": {
         "views": []
        },
        "d978c26cbf894e41b6b380c58e4c91ff": {
         "views": []
        },
        "d99df7e1d52d4d05a4ae85c83bec631f": {
         "views": []
        },
        "da405edb34234f3394ba6e13ab446e9c": {
         "views": []
        },
        "da5bb9accec448a6a8a61d2209f7627d": {
         "views": []
        },
        "dc1e0be9f82d4270bdb56e8d64083ffd": {
         "views": []
        },
        "dc28c0ec49644be4951648af53788a25": {
         "views": []
        },
        "dd10c5a44524444294dc3cda692ec20d": {
         "views": []
        },
        "dd5980cf0367466796862a73d6a94795": {
         "views": []
        },
        "dda953e815fa4c2680e0d2662dece6ff": {
         "views": []
        },
        "dedd17c82c174700b79b19926bd06894": {
         "views": []
        },
        "df02c4a87f04406292f968bde14516cf": {
         "views": []
        },
        "df3bb1376a854008bd572ff126ad56ef": {
         "views": []
        },
        "df3ea6e6efb348e7a997033d27d334c9": {
         "views": []
        },
        "df6ec0e521b546cf87339de430e08dcf": {
         "views": []
        },
        "df871ce7b5fa43999cd43ed47e911d32": {
         "views": [
          {
           "cell_index": 26.0
          }
         ]
        },
        "df88f9a4978b4eeb86885d7e4d3364ed": {
         "views": []
        },
        "df93b5a138e549f1a619fb8cf9df8b2b": {
         "views": []
        },
        "df93f56ed887465ebca5255f3f42c41e": {
         "views": []
        },
        "dfab6549731c47e49818c9b39fee5f61": {
         "views": []
        },
        "e0f6cfe9fc5e436dbcff43c60c66b499": {
         "views": []
        },
        "e1562c0f6cc44224873c729ba0b11ef5": {
         "views": []
        },
        "e19b9430857b4a66a9ef81480641944f": {
         "views": []
        },
        "e220878bc02f4281981a30f243d2d6f1": {
         "views": []
        },
        "e22f0223f90a4f04960687427b29858a": {
         "views": []
        },
        "e2bf345d46744a6a896e6d20cc3f4856": {
         "views": []
        },
        "e3306f5a9a9a435dab1f31e6058a7f53": {
         "views": []
        },
        "e3ae4bb0673d4aeda958bcbb56b969e2": {
         "views": []
        },
        "e58532e0ab5b4b4286f63e2fc1351ace": {
         "views": []
        },
        "e58c119ec1ef475189475e16946ad442": {
         "views": []
        },
        "e5ba48c814ae4ca6b062ffb9823783ab": {
         "views": []
        },
        "e6d6f73994ce4874999ec3451381fafa": {
         "views": []
        },
        "e6e3fa69789e472682739ffd832acedf": {
         "views": []
        },
        "e76a005db4994331a4e7f09e1c9490fd": {
         "views": []
        },
        "e8ded0a47d434e488f8b92f330502082": {
         "views": []
        },
        "e96f3ec1301f403a9e95bbfb27441fa8": {
         "views": []
        },
        "e98811e5aead4198a3a299a86588d7c7": {
         "views": []
        },
        "ea78e6557e504e89a472a3367d777b0a": {
         "views": []
        },
        "ea8e0a32e83a41dd92dbe3c612dd79ca": {
         "views": []
        },
        "eaf84aaa0d92444f85493552d027b4ea": {
         "views": []
        },
        "eb1b3305ccc64b78990a8c975927375c": {
         "views": []
        },
        "ec7272b56f1241e2a6773609743350fb": {
         "views": []
        },
        "ece58ce41a1e475885422305f685a8f8": {
         "views": []
        },
        "ecee1ac34a0745509ccfd98d48588843": {
         "views": []
        },
        "ed1947f3ef3a480a9d51371761e1a12a": {
         "views": []
        },
        "ed2eb4d74dc94954ac03496fd46cc126": {
         "views": []
        },
        "ed318f2d7721427985a6c3cc64f97a09": {
         "views": []
        },
        "ed501b37aa824c6e8940fca9082f5e81": {
         "views": []
        },
        "ee1ec3813476421287e392bc2d4e74f7": {
         "views": []
        },
        "ee212adcb5c845f29af37494747d5530": {
         "views": []
        },
        "ef31b74a2ea24bf484dbd62149c1bebd": {
         "views": []
        },
        "ef82a0f368f743d59b6cc75de1decc57": {
         "views": []
        },
        "efbd0d44cad441df8492b584c28c7672": {
         "views": []
        },
        "f16f28922f0a4c78bf54e685f7ef3ac1": {
         "views": []
        },
        "f267c28fbc0440b190154ab917b980c5": {
         "views": []
        },
        "f52fd702226245d9bbeaf6c7300b46e4": {
         "views": []
        },
        "f547f55ab16a4cd389643f2b0ba46c3c": {
         "views": []
        },
        "f570ef7cde684202b423ebe3a44892f6": {
         "views": []
        },
        "f7ef10df938445a39a67b50a3f967c75": {
         "views": []
        },
        "f7f529ddfa6b4127824238becb344699": {
         "views": []
        },
        "f84450459bb14dc8bfc2b482d37545b7": {
         "views": []
        },
        "f864605325634aaf858a83b9db62404d": {
         "views": []
        },
        "f94155f1363a41e897da6378f2f09326": {
         "views": []
        },
        "f95438ae6d634279a27fd1388c8e3222": {
         "views": []
        },
        "fa09e12bbe444d4ebdc674ff04a08ff8": {
         "views": []
        },
        "fa7cedbf8bd64bee9d6cbd3c4d117e32": {
         "views": []
        },
        "fac54524e99e46b5b4d983c6f67b9d6b": {
         "views": []
        },
        "fc595dd1ca2a489b8032c7483aa64e66": {
         "views": []
        },
        "fc97f733dd684a55b455c07fb694df4c": {
         "views": []
        },
        "fca6520357824983a8e333a075ee380a": {
         "views": []
        },
        "fd1b4f0486614e7cbd134f9e6aba8245": {
         "views": []
        },
        "fd514058da1a4ec3a4a7ad6ce33fec2d": {
         "views": []
        },
        "fe29a1533c864679bba888bc43f36321": {
         "views": []
        },
        "ff2b812935e545b685aee08298c8e394": {
         "views": []
        },
        "ff8d85998641490495da0b85d54f9204": {
         "views": []
        }
       },
       "version": "1.1.2"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 1
    }
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-medallion-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-medallion
data:
  1_Raw_data_to_Bronze.ipynb: |
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "<center><img src=\"../images/logo2.png\"/></center>\n",
        "<center><h1>Raw data to Bronze</h1></center>\n",
        "<center><h3><a href = 'https://ilum.cloud'>ilum.cloud</a></h3></center>\n",
        "<center>Welcome to the Ilum Interactive Capabilities Tutorial! In this section you can load the first batch of data into the bronze layer. Let's dive in!</center>"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### The Bronze Layer\n",
        "\n",
        "The bronze layer is the lowest level in the Medallion architecture. It stores raw, unprocessed data. This data is collected from a variety of sources, such as ERP systems, CRM systems, analytical databases, etc.\n",
        "\n",
        "Typical data stored in the bronze layer includes:\n",
        "\n",
        "- Transactional data, such as sales, purchases, production, etc.\n",
        "- Demographic data, such as customer, employee, and supplier data, etc.\n",
        "- Financial data, such as account, balance sheet, and financial statement data, etc.\n",
        "- Operational data, such as machine performance and production process data, etc.\n",
        "\n",
        "This data can be stored in local memory or in the cloud and is usually stored in csv, json or xml formats.\n",
        "\n",
        "The bronze layer serves the following purposes:\n",
        "\n",
        "- It provides access to raw, unprocessed data.\n",
        "- It is the landing zone for data from a variety of sources.\n",
        "- It is the foundation for the silver layer.\n",
        "\n",
        "Data from the bronze layer can be used for a variety of purposes, such as:\n",
        "\n",
        "- Trend analysis and customer behavior analysis\n",
        "- Identification of opportunities to improve efficiency\n",
        "- Business decision making\n",
        "- Summary\n",
        "\n",
        "The bronze layer is a key component of the Medallion architecture. It provides access to raw data that can then be used for analysis and business decision making.\n"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Reference\n",
        "- [Ilum Documentation](https://ilum.cloud/docs)\n",
        "- [IPython Kernel](Magics%20in%20IPython%20Kernel.ipynb)\n",
        "- [Pyspark Kernel](Pyspark%20Kernel.ipynb)\n",
        "- [Spark Kernel](Spark%20Kernel.ipynb)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "To start interacting with the remote cluster, we'll need to load the spark magic extension. You can do this by running the following command:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "collapsed": false,
        "jupyter": {
         "outputs_hidden": false
        },
        "pycharm": {
         "name": "#%%\n"
        },
        "tags": []
       },
       "outputs": [],
       "source": [
        "%load_ext sparkmagic.magics"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "Next, we'll need to set up an endpoint. An endpoint is simply a URL that points to a specific Spark cluster. You can choose scala or python, but we will focus on python here. You can do this by running the following:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "collapsed": false,
        "jupyter": {
         "outputs_hidden": false
        },
        "pycharm": {
         "is_executing": true,
         "name": "#%%\n"
        },
        "tags": []
       },
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "The first step is to push the data into the bronze layer. This is usually done automatically from many different sources, but for this notebook the test data will be loaded manually."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "tags": []
       },
       "source": [
        "Below, each of the three sample data packages is downloaded from a remote repository and placed in the S3A bucket without any processing."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "tags": []
       },
       "source": [
        "Animals:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    import pandas as pd\n",
        "\n",
        "    url = 'https://raw.githubusercontent.com/ilum-cloud/ilum-python-examples/main/animals.csv'\n",
        "    \n",
        "    animals_bronze_path = 's3a://ilum-files/tables/bronze/animals.csv'\n",
        "\n",
        "    dtype_dic= { 'id': int,\n",
        "                 'owner_id':str,\n",
        "                 'specie_id':str,\n",
        "                 'animal_name':str,\n",
        "                 'gender':str,\n",
        "                 'birth_date':str,\n",
        "                 'color':str,\n",
        "                 'weight':str\n",
        "                }\n",
        "    \n",
        "    pd_animals = pd.read_csv(url, dtype = dtype_dic, keep_default_na=False)\n",
        "\n",
        "    spark_animals = spark.createDataFrame(pd_animals)\n",
        "    spark_animals.sort(\"id\").write.mode('overwrite').option(\"header\",True).csv(animals_bronze_path)\n",
        "    spark_animals.show()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Owners:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    import pandas as pd\n",
        "    \n",
        "    url = 'https://raw.githubusercontent.com/ilum-cloud/ilum-python-examples/main/owners.csv'\n",
        "    \n",
        "    owners_bronze_path = 's3a://ilum-files/tables/bronze/owners.csv'\n",
        "\n",
        "    dtype_dic= { 'owner_id':int,\n",
        "                 'first_name':str,\n",
        "                 'last_name':str,\n",
        "                 'mobile':str,\n",
        "                 'email':str\n",
        "                }\n",
        "\n",
        "    pd_owners = pd.read_csv(url, dtype = dtype_dic, keep_default_na=False)\n",
        "\n",
        "    spark_owners = spark.createDataFrame(pd_owners)\n",
        "    spark_owners.sort(\"id\").write.mode('overwrite').option(\"header\",True).csv(owners_bronze_path)\n",
        "    spark_owners.show()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Species:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    import pandas as pd\n",
        "    \n",
        "    url = 'https://raw.githubusercontent.com/ilum-cloud/ilum-python-examples/main/species.csv'\n",
        "    \n",
        "    species_bronze_path = 's3a://ilum-files/tables/bronze/species.csv'\n",
        "\n",
        "    dtype_dic= { 'specie_id':int,\n",
        "                 'specie_name':str\n",
        "                }\n",
        "\n",
        "    pd_species = pd.read_csv(url, dtype = dtype_dic, keep_default_na=False)\n",
        "\n",
        "    spark_species = spark.createDataFrame(pd_species)\n",
        "    spark_species.sort(\"specie_id\").write.mode('overwrite').option(\"header\",True).csv(species_bronze_path)\n",
        "    spark_species.show()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Cleaning up\n",
        "\n",
        "Now that you’re done with your work, you should clean them up.\n",
        "Simply click on the Delete buttons!\n",
        "\n",
        "![Ilum session clean](../images/clean_ilum_jupyter_session.png)"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "#### [Click here to proceed to the \"Bronze to silver\" section.](2.%20Bronze%20to%20silver.ipynb)\n",
        "\n"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3 (ipykernel)",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.11.6"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 4
    }
  2_Bronze_to_silver.ipynb: |
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "<center><img src=\"../images/logo2.png\"/></center>\n",
        "<center><h1>Bronze to silver</h1></center>\n",
        "<center><h3><a href = 'https://ilum.cloud'>ilum.cloud</a></h3></center>\n",
        "<center>Welcome to the Ilum Interactive Capabilities Tutorial! In this section, you can transform the data from the bronze layer to meet the assumptions of the silver layer. Let's dive in!</center>"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### The Silver Layer\n",
        "\n",
        "The silver layer is the middle layer in the Medallion architecture. It stores cleansed and conformed data from the brown layer. This data is ready for analysis and other downstream applications.\n",
        "\n",
        "Typical data stored in the silver layer includes:\n",
        "\n",
        "- Data from the bronze layer that has been cleansed of errors and inconsistencies.\n",
        "- Data that has been conformed to a common schema.\n",
        "- Data that has been enriched with additional information, such as historical data or demographic data.\n",
        "\n",
        "This data can be stored in local memory or in the cloud and is usually stored in the form of relational databases, data warehouses, or other data lakes.\n",
        "\n",
        "The silver layer serves the following purposes:\n",
        "\n",
        "- It provides a cleansed and conformed view of the data.\n",
        "- It makes the data accessible for analysis and other downstream applications.\n",
        "- It provides a foundation for the gold layer.\n",
        "\n",
        "Data from the silver layer can be used for a variety of purposes, such as:\n",
        "\n",
        "- Trend analysis and customer behavior analysis\n",
        "- Identification of opportunities to improve efficiency\n",
        "- Business decision making\n",
        "- Summary\n",
        "\n",
        "The silver layer is a key component of the Medallion architecture. It provides a cleansed and conformed view of the data that can then be used for analysis and business decision making."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "### Reference\n",
        "- [Ilum Documentation](https://ilum.cloud/docs)\n",
        "- [IPython Kernel](Magics%20in%20IPython%20Kernel.ipynb)\n",
        "- [Pyspark Kernel](Pyspark%20Kernel.ipynb)\n",
        "- [Spark Kernel](Spark%20Kernel.ipynb)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "To start interacting with the remote cluster, we'll need to load the spark magic extension. You can do this by running the following command:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "collapsed": false,
        "jupyter": {
         "outputs_hidden": false
        },
        "pycharm": {
         "name": "#%%\n"
        },
        "tags": []
       },
       "outputs": [],
       "source": [
        "%load_ext sparkmagic.magics"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "Next, we'll need to set up an endpoint. An endpoint is simply a URL that points to a specific Spark cluster. You can choose scala or python, but we will focus on python here. You can do this by running the following:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "collapsed": false,
        "jupyter": {
         "outputs_hidden": false
        },
        "pycharm": {
         "is_executing": true,
         "name": "#%%\n"
        },
        "tags": []
       },
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "Before we start processing, we need to import the necessary libraries."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    from pyspark.sql.functions import to_date\n",
        "    from pyspark.sql.types import IntegerType, StringType, LongType, StructType, StructField"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "The first stage of processing in this layer is to read data from the bronze layer, set the correct data types and reject invalid rows. The operation is repeated for each data set: animals, owners and spicies."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o animals_bronze\n",
        "\n",
        "    animals_bronze_path = \"s3a://ilum-files/tables/bronze/animals.csv\"\n",
        "\n",
        "    animals_bronze_schema = StructType([\n",
        "                        StructField(\"id\", IntegerType(), False),\n",
        "                        StructField(\"owner_id\", IntegerType(), False),\n",
        "                        StructField(\"specie_id\", IntegerType(), False),\n",
        "                        StructField(\"animal_name\", StringType(), False),\n",
        "                        StructField(\"gender\", StringType(), False),\n",
        "                        StructField(\"birth_date\", StringType(), False),\n",
        "                        StructField(\"color\", StringType(), False),\n",
        "                        StructField(\"size\", StringType(), False),\n",
        "                        StructField(\"weight\", StringType(), False)\n",
        "                        ])\n",
        "\n",
        "    animals_bronze = spark.read.csv(path=animals_bronze_path, header=True, schema = animals_bronze_schema).dropna()\n",
        "    animals_bronze.show()"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o owners_silver\n",
        "\n",
        "    owners_bronze_path = \"s3a://ilum-files/tables/bronze/owners.csv\"\n",
        "\n",
        "    owners_bronze_schema = StructType([\n",
        "                        StructField(\"owner_id\", IntegerType(), False),\n",
        "                        StructField(\"first_name\", StringType(), False),\n",
        "                        StructField(\"last_name\", StringType(), False),\n",
        "                        StructField(\"mobile\", LongType(), False),\n",
        "                        StructField(\"email\", StringType(), False)\n",
        "                        ])\n",
        "\n",
        "    owners_silver = spark.read.csv(path=owners_bronze_path, header=True, schema = owners_bronze_schema).dropna()\n",
        "    owners_silver.show()"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o species_bronze\n",
        "\n",
        "    species_bronze_path = \"s3a://ilum-files/tables/bronze/species.csv\"\n",
        "\n",
        "    species_bronze_schema = StructType([\n",
        "                        StructField(\"specie_id\", IntegerType(), False),\n",
        "                        StructField(\"specie_name\", StringType(), False)\n",
        "                        ])\n",
        "\n",
        "    species_bronze = spark.read.csv(path=species_bronze_path, header=True, schema = species_bronze_schema)\n",
        "    species_bronze.show()"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "The second stage of processing data from the brown layer will be combining them in the result table and formatting the data.\n",
        "Below two Dataframes are combined to link each animal to its corresponding species."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o animals_silver\n",
        "\n",
        "    animals_silver = animals_bronze. \\\n",
        "    join(species_bronze, animals_bronze[\"specie_id\"] == species_bronze[\"specie_id\"], 'left'). \\\n",
        "    select(animals_bronze[\"id\"], \\\n",
        "           animals_bronze[\"owner_id\"], \\\n",
        "           species_bronze[\"specie_name\"], \\\n",
        "           animals_bronze[\"animal_name\"], \\\n",
        "           to_date(animals_bronze['birth_date'],'MM/dd/yyyy').alias('birth_date'), \\\n",
        "           animals_bronze[\"gender\"], \\\n",
        "           animals_bronze[\"size\"], \\\n",
        "           animals_bronze[\"color\"], \\\n",
        "           animals_bronze[\"weight\"], \\\n",
        "          )"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "from autovizwidget.widget.utils import display_dataframe\n",
        "\n",
        "display_dataframe(animals_silver)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Then the data is written to silver layer storage. The use of the delta format in this case allows access to the history of changes and optimizes the amount of memory consumed."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    animals_silver.write.mode('overwrite').format(\"delta\").save(\"s3a://ilum-files/tables/silver/animals_delta\")\n",
        "\n",
        "    owners_silver.write.mode('overwrite').format(\"delta\").save(\"s3a://ilum-files/tables/silver/owners_delta\")"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Cleaning up\n",
        "\n",
        "Now that you’re done with your work, you should clean them up.\n",
        "Simply click on the Delete buttons!\n",
        "\n",
        "![Ilum session clean](../images/clean_ilum_jupyter_session.png)"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "#### [Click here to proceed to the \"Silver to gold\" section.](3.%20Silver%20to%20gold.ipynb)"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3 (ipykernel)",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.10.11"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 4
    }
  3_Silver_to_gold.ipynb: |
    {
     "cells": [
      {
       "cell_type": "markdown",
       "id": "6bacd938-dd24-48a7-bef4-c930e8396b9c",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "<center><img src=\"../images/logo2.png\"/></center>\n",
        "<center><h1>Silver to Gold</h1></center>\n",
        "<center><h3><a href = 'https://ilum.cloud'>ilum.cloud</a></h3></center>\n",
        "<center>Welcome to the Ilum Interactive Capabilities Tutorial! In this section, you can transform the data from the silver layer to meet the assumptions of the gold layer. Let's dive in!</center>\n"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "0fed4e0d-3b76-4ff2-a74c-ac2b73b99a29",
       "metadata": {},
       "source": [
        "### The Gold Layer\n",
        "\n",
        "The gold layer is the highest layer in the Medallion architecture. It stores data that has been cleansed, transformed, and enriched. This data is ready for analysis and consumption by business users.\n",
        "\n",
        "Typical data stored in the gold layer includes:\n",
        "\n",
        "- De-duplicated and reconciled data\n",
        "- Complete and accurate data\n",
        "- Data that is aligned with business requirements\n",
        "- Data that is enriched with additional information\n",
        "\n",
        "This data is stored in the form of relational databases, data warehouses, or other data marts. The data can be stored in local memory or in the cloud.\n",
        "\n",
        "The gold layer serves the following purposes:\n",
        "\n",
        "- It provides a single source of truth for business users\n",
        "- It facilitates analysis and reporting\n",
        "- It supports decision-making\n",
        "\n",
        "Data from the gold layer can be used for a variety of purposes, such as:\n",
        "\n",
        "- Trend analysis\n",
        "- Customer behavior analysis\n",
        "- Financial analysis\n",
        "- Operational analysis\n",
        "- Risk management\n",
        "- Summary\n",
        "\n",
        "The gold layer is a key component of the Medallion architecture. It provides a foundation for analysis and decision-making."
       ]
      },
      {
       "cell_type": "markdown",
       "id": "d48509f8-23f3-4f1b-836a-b81293752591",
       "metadata": {
        "tags": []
       },
       "source": [
        "### Reference\n",
        "- [Ilum Documentation](https://ilum.cloud/docs)\n",
        "- [IPython Kernel](Magics%20in%20IPython%20Kernel.ipynb)\n",
        "- [Pyspark Kernel](Pyspark%20Kernel.ipynb)\n",
        "- [Spark Kernel](Spark%20Kernel.ipynb)"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "6432d628-6330-4b68-8f31-77ae47c70d46",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "To start interacting with the remote cluster, we'll need to load the spark magic extension. You can do this by running the following command:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "c6886af1-0265-48c0-9e02-107ba6dcc28c",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%load_ext sparkmagic.magics"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "da9c7240-33cb-4cae-91a9-4ee2e4426cbc",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "Next, we'll need to set up an endpoint. An endpoint is simply a URL that points to a specific Spark cluster. You can choose scala or python, but we will focus on python here. You can do this by running the following:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "a4ee2106-501a-4fdc-99b3-0ca03aa0e47e",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "88a3a11e-4521-4ef8-aec0-04b2190626f4",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "Before we start processing, we need to import the necessary libraries."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "de3da6db-24d3-4d02-b2b7-0d6bbea241d8",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    from pyspark.sql.functions import sort_array, collect_list, concat_ws, count"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "56c2c898-f80d-4cd9-a52a-d811d4e82add",
       "metadata": {
        "tags": []
       },
       "source": [
        "The first stage of processing in this layer is to read data from the silver layer."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "5ceaffdc-3d23-43dd-9e6c-e60f47fa5ecb",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o animals_gold -o owners_silver\n",
        "\n",
        "    animals_gold = spark.read.format('delta').load('s3a://ilum-files/tables/silver/animals_delta')\n",
        "\n",
        "    owners_silver = spark.read.format('delta').load('s3a://ilum-files/tables/silver/owners_delta')"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "00e66918-4f6a-4f4e-b7d2-ba55be5700be",
       "metadata": {},
       "source": [
        "One of the business requirements is to count the number of animals per owner and provide their names in one column."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "e0fbd21c-ae78-4f94-a399-98840f3e9d78",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o animals_count\n",
        "\n",
        "    animals_count = (\n",
        "        animals_gold.groupby(\"owner_id\")\n",
        "        .agg(\n",
        "            concat_ws(\", \", sort_array(collect_list(\"animal_name\"))).alias(\"animals_names\"),\n",
        "            count(\"animal_name\").alias(\"animals_qty\"),\n",
        "        )\n",
        "    )\n",
        "    \n",
        "    animals_count.sort(\"owner_id\").show(30)"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "a90a285c-ace7-4fc6-ac09-19d71154078b",
       "metadata": {},
       "source": [
        "Then let's combine it into a result table."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "82877ce5-6c72-4235-9fae-37d3685a34a6",
       "metadata": {
        "tags": []
       },
       "outputs": [],
       "source": [
        "%%spark -o owners_gold\n",
        "\n",
        "    owners_gold = (\n",
        "        owners_silver.join(animals_count, animals_count.owner_id == owners_silver.owner_id, \"right\")\n",
        "        .select(\n",
        "            owners_silver.owner_id,\n",
        "            owners_silver.first_name,\n",
        "            owners_silver.last_name,\n",
        "            animals_count.animals_names,\n",
        "            animals_count.animals_qty,\n",
        "            owners_silver.mobile,\n",
        "            owners_silver.email,\n",
        "        )\n",
        "        .sort(\"owner_id\")\n",
        "    )\n",
        "\n",
        "    owners_gold.show(50)"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "46ce7587-3f25-4a4a-8f0d-3d185a3ef65a",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "At the end data is written to gold layer storage. The use of the delta format in this case allows access to the history of changes and optimizes the amount of memory consumed."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "7203e848-a948-437f-ac81-07eed6b45031",
       "metadata": {},
       "outputs": [],
       "source": [
        "%%spark\n",
        "\n",
        "    animals_gold.write.mode('overwrite').format(\"delta\").save(\"s3a://ilum-files/tables/gold/animals_delta\")\n",
        "\n",
        "    owners_gold.write.mode('overwrite').format(\"delta\").save(\"s3a://ilum-files/tables/gold/owners_delta\")"
       ]
      },
      {
       "cell_type": "markdown",
       "id": "2b539e6e-0b9d-4c74-9d4e-607164540d0d",
       "metadata": {
        "pycharm": {
         "name": "#%% md\n"
        }
       },
       "source": [
        "### Cleaning up\n",
        "\n",
        "Now that you’re done with your work, you should clean them up.\n",
        "Simply click on the Delete buttons!\n",
        "\n",
        "![Ilum session clean](../images/clean_ilum_jupyter_session.png)"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "1af06385-739c-41d1-b4b3-e41a54309e05",
       "metadata": {},
       "outputs": [],
       "source": [
        "%manage_spark"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3 (ipykernel)",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.10.11"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 5
    }
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-pyspark-kernel-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-pyspark-kernel
data:
  Pyspark_Kernel.ipynb: |-
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# Features available with the new kernels\n",
        "\n",
        "By default Jupyter notebook comes with a `Python` kernel. sparkmagic provides two additional kernels that you can use with Jupyter. These are:\n",
        "\n",
        "1. **PySpark** (for applications written in Python). PySpark kernel exposes the Spark programming model to Python\n",
        "2. **Spark** (for applications written in Scala)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "------------\n",
        "## How do I use the new kernels? \n",
        "\n",
        "1. Create a notebook with the new kernels. Click **New**, and then click **PySpark** or **Spark**. \n",
        "![Create notebooks with new kernels](https://mysstorage.blob.core.windows.net/notebookimages/overview/jupyter-kernels.png \"Create notebooks with new kernels\") \n",
        "2. This should open a new notebook with the kernel you selected."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## Notebook setup\n",
        "\n",
        "When using PySpark kernel notebooks, there is no need to create a SparkContext or a HiveContext; those are all created for you automatically when you run the first code cell, and you'll be able to see the progress printed. The contexts are created with the following variable names:\n",
        "- SparkContext (sc)\n",
        "- HiveContext (sqlContext)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Everytime you run a cell, your web browser window title will show a **(Busy)** status along with the notebook title. You will also see a solid circle next to the **PySpark** text in the top-right corner. After the job completes, this will change to a hollow circle.\n",
        "\n",
        "![Status of a Jupyter notebook job](https://mysstorage.blob.core.windows.net/notebookimages/overview/HDI.Spark.Jupyter.Job.Status.png \"Status of a Jupyter notebook job\")"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## PySpark magics \n",
        "\n",
        "The PySpark kernel provides some predefined “magics”, which are special commands that you can call with `%%` (e.g. `%%MAGIC` <args>). The magic command must be the first word in a code cell and allow for multiple lines of content. You can’t put comments before a cell magic.\n",
        "\n",
        "For more information on magics, see [here](http://ipython.readthedocs.org/en/stable/interactive/magics.html)."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Help magic (%%help)\n",
        "\n",
        "This magic gives you information about the different supported magics in PySpark kernel and the usage for each. "
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 1,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "\n",
           "<table>\n",
           "  <tr>\n",
           "    <th>Magic</th>\n",
           "    <th>Example</th>\n",
           "    <th>Explanation</th>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>info</td>\n",
           "    <td>%%info</td>\n",
           "    <td>Outputs session information for the current Livy endpoint.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>cleanup</td>\n",
           "    <td>%%cleanup -f</td>\n",
           "    <td>Deletes all sessions for the current Livy endpoint, including this notebook's session. The force flag is mandatory.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>delete</td>\n",
           "    <td>%%delete -f -s 0</td>\n",
           "    <td>Deletes a session by number for the current Livy endpoint. Cannot delete this kernel's session.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>logs</td>\n",
           "    <td>%%logs</td>\n",
           "    <td>Outputs the current session's Livy logs.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>configure</td>\n",
           "    <td>%%configure -f<br/>{\"executorMemory\": \"1000M\", \"executorCores\": 4}</td>\n",
           "    <td>Configure the session creation parameters. The force flag is mandatory if a session has already been\n",
           "    created and the session will be dropped and recreated.<br/>Look at <a href=\"https://github.com/cloudera/livy#request-body\">\n",
           "    Livy's POST /sessions Request Body</a> for a list of valid parameters. Parameters must be passed in as a JSON string.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>sql</td>\n",
           "    <td>%%sql -o tables -q<br/>SHOW TABLES</td>\n",
           "    <td>Executes a SQL query against the sqlContext.\n",
           "    Parameters:\n",
           "      <ul>\n",
           "        <li>-o VAR_NAME: The result of the query will be available in the %%local Python context as a\n",
           "          <a href=\"http://pandas.pydata.org/\">Pandas</a> dataframe.</li>\n",
           "        <li>-q: The magic will return None instead of the dataframe (no visualization).</li>\n",
           "        <li>-m METHOD: Sample method, either <tt>take</tt> or <tt>sample</tt>.</li>\n",
           "        <li>-n MAXROWS: The maximum number of rows of a SQL query that will be pulled from Livy to Jupyter.\n",
           "            If this number is negative, then the number of rows will be unlimited.</li>\n",
           "        <li>-r FRACTION: Fraction used for sampling.</li>\n",
           "      </ul>\n",
           "    </td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>local</td>\n",
           "    <td>%%local<br/>a = 1</td>\n",
           "    <td>All the code in subsequent lines will be executed locally. Code must be valid Python code.</td>\n",
           "  </tr>\n",
           "</table>\n"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "execute_result",
         "execution_count": 1
        }
       ],
       "source": [
        "%%help"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session information (%%info)\n",
        "\n",
        "Livy is an open source REST server for Spark. When you execute a code cell in a PySpark notebook, it creates a Livy session to execute your code. You can use the `%%info` magic to display the current Livy session information. "
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "Current session configs: <tt>{u'kind': 'pyspark'}</tt><br>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "execute_result",
         "execution_count": 1
        },
        {
         "data": {
          "text/html": [
           "No active sessions."
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "execute_result",
         "execution_count": 1
        }
       ],
       "source": [
        "%%info"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session configuration (%%configure)\n",
        " \n",
        "Use the `%%configure` magic to configure new or existing Livy sessions.\n",
        "* If a session is already running, you can change the configuration by using the `-f` argument with `%%configure` magic. This will delete the current session and recreate it with the applied configurations. If you don't provide the `-f` argument, an error will be displayed and no configuration changes will be applied.\n",
        "* If you haven't already started the session, then the `-f` argument is not mandatory. Even if you use it with a session that you are just creating, it will not delete any currently running sessions.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "These are some session attributes that can be used for configuration \n",
        "- **\"name\"**: Name of the application\n",
        "- **\"driverMemory\"**: Memory for driver (e.g. 1000M, 2G) \n",
        "- **\"executorMemory\"**: Memory for executor (e.g. 1000M, 2G) \n",
        "\n",
        "For more attributes for session configuration see <a href=\"https://github.com/cloudera/livy/tree/6fe1e80cfc72327c28107e0de20c818c1f13e027#post-sessions\" target=\"_blank\"> the Livy documentation</a>.\n",
        "\n",
        "> **TIP**: The application name should start with `remotesparkmagics` to allow sessions to get automatically cleaned up if an error happened. If you provide a name that does not start with `remotesparkmagics` it will not result in an error but the cleanup won't occur."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/html": [
           "Current session configs: <tt>{u'executorCores': 4, u'kind': 'pyspark', u'executorMemory': u'4G', u'name': u'remotesparkmagics-sample'}</tt><br>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "execute_result",
         "execution_count": 1
        },
        {
         "data": {
          "text/html": [
           "No active sessions."
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "execute_result",
         "execution_count": 1
        }
       ],
       "source": [
        "%%configure -f \n",
        "{\"name\":\"remotesparkmagics-sample\", \"executorMemory\": \"4G\", \"executorCores\":4}"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## Automatic visualization of queries \n",
        "\n",
        "The Pyspark kernel automatically visualizes the output of SQL (HiveQL) queries. You are given the option to choose between several different types of visualizations:\n",
        "- Table\n",
        "- Pie\n",
        "- Line \n",
        "- Area\n",
        "- Bar\n",
        "\n",
        ">**TIP**: When you perform a SQL query, the number of rows of data that will be included in the result data set will be limited by default to 2500 rows. "
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### SQL magic (%%sql)\n",
        "\n",
        "The PySpark kernel supports easy inline HiveQL queries against the `sqlContext`. The (`-o VARIABLE_NAME`) argument persists the output of the SQL query as a <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" target=\"_blank\">Pandas dataframe</a> on the Jupyter server (e.g. `-o query1` in the example below). This means it'll be available in the local mode which will be explained later. The output will be automatically visualized after you run the cell below."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 1,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Starting Spark application\n"
         ]
        },
        {
         "data": {
          "text/html": [
           "<table>\n",
           "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>4</td><td>None</td><td>pyspark</td><td>idle</td><td></td><td></td><td>✔</td></tr></table>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "SparkSession available as 'spark'.\n"
         ]
        },
        {
         "name": "stderr",
         "output_type": "stream",
         "text": [
          "/home/itamarst/Devel/sparkmagic/autovizwidget/autovizwidget/widget/utils.py:50: FutureWarning:\n",
          "\n",
          "A future version of pandas will default to `skipna=True`. To silence this warning, pass `skipna=True|False` explicitly.\n",
          "\n"
         ]
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "4b9e21546ff44b808f6770ae9587cdce",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "VBox(children=(HBox(children=(HTML(value='Type:'), Button(description='Table', layout=Layout(width='70px'), st…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "c32aad77d89941f388d8e819bb91e2b4",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "Output()"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%sql -o query1\n",
        "SELECT 1, 2, 3"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "![widget](images/widget.PNG)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "In addition to `-o`, a number of other configuration parameters for SQL queries are available (as described in the `%%help` output above). These include:\n",
        "\n",
        "* `-q`. This causes the magic to return `None`, turning off visualizations for that cell. If you don't want to auto-visualize the content of a cell and just want to capture it as a dataframe, then use `-q -o VARIABLE`. If you want to turn off visualizations without capturing the results (e.g. for running a SQL query with side effects, like a `CREATE TABLE` statement), just use `-q` without specifying a `-o` argument.\n",
        "\n",
        "> Remember that the kernel by default limits the output of a SQL query to 2500 rows. If you want to adjust this default behavior, use these options.\n",
        "\n",
        "* `-m METHOD`, where `METHOD` is either `take` or `sample` (defaults to `take`). If the method is `take`, the kernel will take elements from the top of the result data set; if the method is `sample`, the kernel will randomly sample elements of the data set according to `-r`, described below.\n",
        "\n",
        "* `-r FRACTION`, where `FRACTION` is some floating-point number between 0.0 and 1.0. If the sample method for the SQL query is `sample`, then the kernel will randomly sample this fraction of the elements of the result set for you; e.g. if you run a SQL query with the arguments `-m sample -r 0.01`, then 1% of the result rows will be randomly sampled.\n",
        "\n",
        "* `-n MAXROWS`, where `MAXROWS` is some integer. The kernel will limit the number of output rows to `MAXROWS`. If `MAXROWS` is a negative number such as `-1`, then the number of rows in the result set will not be limited.\n",
        "\n",
        "> **WARNING**: Be careful with the `-n` option, as it is possible to cause the Jupyter server to run out of memory if you try to collect too many result rows. We recommend only using `-n -1` if you are certain that the result dataset will not be too large.\n",
        "\n",
        "As a final example, this SQL query randomly samples 10% of the rows in the **hivesampletable**, limits the size of the result set to 500, and saves the output into a dataframe called `query2` without doing any visualizations."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 5,
       "metadata": {
        "collapsed": true
       },
       "outputs": [],
       "source": [
        "%%sql -q -m sample -r 0.1 -n 500 -o query2 \n",
        "SELECT * FROM hivesampletable"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Server-side rendering\n",
        "\n",
        "You can render images on the server and then display them locally. First, we create the image:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "<matplotlib.axes._subplots.AxesSubplot object at 0x7f2831efbe10>"
         ]
        }
       ],
       "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "df = spark.read.json(\"/apps/spark-2.3.3/examples/src/main/resources/people.json\")\n",
        "df.createOrReplaceTempView(\"people\")\n",
        "df.toPandas().plot.bar(x='name',y='age')"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "And then we render it locally using the `%matplot` magic:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": [
           "<IPython.core.display.Image object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%matplot plt"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Running locally (%%local)\n",
        "\n",
        "You can use the `%%local` magic to run your code locally on the Jupyter server without going to Spark. Here's a typical use case for this scenario. \n",
        "\n",
        "By default, the output of any code snippet that you run from a Jupyter notebook is available within the context of the session that is persisted on the worker nodes. However, if you want to save a trip to the worker nodes for every computation, and all the data that you need for your computation is available locally on the Jupyter server node (which is the headnode), you can use the `%%local` magic to run the code snippet on the Jupyter server. Typically, you would use `%%local` magic in conjunction with the `%%sql` magic with `-o` parameter. The `-o` parameter would persist the output of the SQL query locally and then `%%local` magic would trigger the next set of code snippet to run locally against the output of the SQL queries that is persisted locally.\n",
        "\n",
        "> **TIPS**: \n",
        "> * Working against locally persisted data is especially useful when you want the flexibility of using visualization libraries such as **matplotlib**. If you work directly against the data on the remote worker nodes, the output received through Livy is always text that limits the options of visual representation.\n",
        "\n",
        "\n",
        "> * Remember that SQL queries, by default, limit the number of result rows to 2500 -- and that it is possible to get Out of Memory errors if you accidentally collect too many results from your SQL query. Therefore, if your dataset is large, it is considered a best practice to do your computation or number-crunching on the cluster or in the SQL query rather than in local mode.\n",
        "\n",
        "When you use `%%local` all subsequent lines in the cell will be executed locally. The code in the cell must be valid Python code.\n",
        "\n",
        "This code block prints the length of the result set of the dataframe `query2` -- remember, we used the `-n 500` option to limit the size of the dataframe to 500."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 6,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "500\n"
         ]
        }
       ],
       "source": [
        "%%local\n",
        "print(len(query2))"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Send to spark (%%send_to_spark)\n",
        "\n",
        "This command gives you the ability to send local data to remote cluster. Note that passing even a simple string allows you to retain pretrained, saved ML model from local filesystem.\n",
        "\n",
        "#### Pass string to a remote cluster"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%local\n",
        "variable = 'this string will be available in spark cluster'"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%send_to_spark -i variable -n custom_name -t str"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "print custom_name"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "#### Send pretrained scikit-learn model to a remote cluster"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%local\n",
        "## todo"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session logs (%%logs)\n",
        "\n",
        "You can get the logs of your current Livy session to debug any issues you encounter."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 7,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:29 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n",
          "16/06/09 23:43:30 INFO TimelineClientImpl: Timeline service address: http://localhost:8188/ws/v1/timeline/\n",
          "16/06/09 23:43:30 INFO Client: Requesting a new application from cluster with 10 NodeManagers\n",
          "16/06/09 23:43:30 INFO Client: Verifying our application has not requested more than the maximum memory capability of the cluster (25600 MB per container)\n",
          "16/06/09 23:43:30 INFO Client: Will allocate AM container, with 1408 MB memory including 384 MB overhead\n",
          "16/06/09 23:43:30 INFO Client: Setting up container launch context for our AM\n",
          "16/06/09 23:43:30 INFO Client: Setting up the launch environment for our AM container\n",
          "16/06/09 23:43:30 INFO Client: Preparing resources for our AM container\n",
          "16/06/09 23:43:31 INFO MetricsConfig: loaded properties from hadoop-metrics2-azure-file-system.properties\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init starting.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init starting. Initializing MdsLogger.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO MetricsSinkAdapter: Sink azurefs2 started\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: Scheduled snapshot period at 60 second(s).\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: azure-file-system metrics system started\n",
          "16/06/09 23:43:31 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/conf/hive-site.xml -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/hive-site.xml\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:34 INFO Client: Uploading resource file:/tmp/spark-1c0a5560-2256-4f63-ba1f-c0dfd25dc24b/__spark_conf__324896021270563710.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/__spark_conf__324896021270563710.zip\n",
          "16/06/09 23:43:34 WARN Client: spark.yarn.am.extraJavaOptions will not take effect in cluster mode\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing view acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing modify acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(spark); users with modify permissions: Set(spark)\n",
          "16/06/09 23:43:34 INFO Client: Submitting application 1 to ResourceManager\n",
          "16/06/09 23:43:35 INFO YarnClientImpl: Submitted application application_1464100251524_0001\n",
          "16/06/09 23:43:36 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:36 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: N/A\n",
          "\t ApplicationMaster RPC port: -1\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:37 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:38 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:39 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:40 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:41 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:42 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:43 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:44 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:45 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:46 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:47 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:47 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: 10.0.0.4\n",
          "\t ApplicationMaster RPC port: 0\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:48 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:49 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:50 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:51 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:52 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:53 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:54 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:55 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:56 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:57 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:58 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:59 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:00 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:01 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:02 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:03 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:04 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:05 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:06 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:07 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:08 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:09 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:10 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:11 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:12 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:13 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:14 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:15 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:16 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:17 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:18 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:19 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:20 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:21 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:22 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:23 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:24 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:25 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)"
         ]
        }
       ],
       "source": [
        "%%logs"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Delete session (%%delete)\n",
        "\n",
        "Use '`%%delete -f -s <session #>`' to delete a session given its session ID. Note that you cannot delete the session that is initiated for the kernel itself. Another notebook might go into an error state, since notebooks are supposed to manage sessions by themselves, and all work will be lost on that session."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Sessions cleanup (%%cleanup)\n",
        "\n",
        "Use '`%%cleanup -f`' magic to delete all of the sessions for this cluster, including this notebook's session.\n",
        "The force flag `-f` is mandatory."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Pretty Print Spark Dataframes (%%pretty)\n",
        "\n",
        "Use '`%%pretty`' magic to display a Spark dataframe as a HTML formatted table"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {
        "pycharm": {
         "name": "#%%\n"
        }
       },
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": []
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "text/html": [
           "<table><tr><th>age</th><th>name</th></tr><tr><td>null</td><td>Michael</td></tr><tr><td>30</td><td>Andy</td></tr><tr><td>19</td><td>Justin</td></tr></table><br /><pre></pre>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%pretty\n",
        "df = spark.read.json(\"/apps/spark-2.3.3/examples/src/main/resources/people.json\")\n",
        "df.show()\n"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "PySpark",
       "language": "",
       "name": "pysparkkernel"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "python",
        "version": 2
       },
       "mimetype": "text/x-python",
       "name": "pyspark",
       "pygments_lexer": "python2"
      },
      "widgets": {
       "state": {},
       "version": "1.1.2"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 1
    }
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-send-data-to-spark-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-send-data-to-spark
data:
  Send_local_data_to_Spark.ipynb: |-
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# Sending data to Spark cluster from Local instance\n",
        "\n",
        "suppose you would like to send pretrained scikit-learn model to your Spark cluster(e.g. for further usage with other packages like `spark-sklearn`)\n",
        "\n",
        "**warning** this example assumes that both (py)Spark cluster and your local machine both have the same python packages versions\n",
        "\n",
        "the following code requires numpy, scipy and scikit-learn to be installed"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "We can send strings:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 1,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "abc ሴ def\n"
         ]
        }
       ],
       "source": [
        "%%local\n",
        "\n",
        "s = u\"abc ሴ def\"\n",
        "print(s)"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "metadata": {},
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Starting Spark application\n"
         ]
        },
        {
         "data": {
          "text/html": [
           "<table>\n",
           "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>16</td><td>None</td><td>pyspark</td><td>idle</td><td></td><td></td><td>✔</td></tr></table>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "SparkSession available as 'spark'.\n"
         ]
        },
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Successfully passed 's' as 's' to Spark kernel"
         ]
        }
       ],
       "source": [
        "%%send_to_spark -i s -t str -n s"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "abc ? def"
         ]
        }
       ],
       "source": [
        "# This runs in Spark; not sure why Unicode doesn't work\n",
        "print(s)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Next we train a model to get its precision:"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 4,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "text/plain": [
           "0.9763157894736842"
          ]
         },
         "execution_count": 4,
         "metadata": {},
         "output_type": "execute_result"
        }
       ],
       "source": [
        "%%local\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import load_iris\n",
        "import pandas as pd\n",
        "import pickle\n",
        "from sklearn import tree\n",
        "from sklearn.metrics import precision_score\n",
        "\n",
        "iris = load_iris()\n",
        "X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=1)\n",
        "X_test_pd = pd.DataFrame(X_test, columns=['a','b','c','d'])\n",
        "Y_test_pd = pd.DataFrame(y_test, columns=['pred'])\n",
        "\n",
        "decision_tree = tree.DecisionTreeClassifier()\n",
        "decision_tree_model = decision_tree.fit(X_train, y_train)\n",
        "\n",
        "y_pred = decision_tree_model.predict(X_test)\n",
        "precision_score(y_test, y_pred, average='weighted')"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "send test sets to `%spark`"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 5,
       "metadata": {
        "scrolled": true
       },
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Successfully passed 'X_test_pd' as 'X_test' to Spark kernel"
         ]
        }
       ],
       "source": [
        "%%send_to_spark -i X_test_pd -t df -n X_test"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 6,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Successfully passed 'Y_test_pd' as 'y_test' to Spark kernel"
         ]
        }
       ],
       "source": [
        "%%send_to_spark -i Y_test_pd -t df -n y_test"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "because `pickle.dumps` returns `bytearray` we encode it to base64"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 7,
       "metadata": {},
       "outputs": [],
       "source": [
        "%%local\n",
        "import codecs\n",
        "decision_tree_pickled = codecs.encode(pickle.dumps(decision_tree_model), \"base64\").decode()"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 8,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Successfully passed 'decision_tree_pickled' as 'decision_tree_pickled' to Spark kernel"
         ]
        }
       ],
       "source": [
        "%%send_to_spark -i decision_tree_pickled -t str -n decision_tree_pickled"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "decode from base64 in `%spark`"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 9,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "import pickle, codecs\n",
        "\n",
        "decision_tree_model = pickle.loads(codecs.decode(decision_tree_pickled.encode(), \"base64\"))"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "convert Pyspark DataFrame into numpy arrays"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 10,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "import numpy as np\n",
        "y_test = np.array(y_test.select('pred').collect())\n",
        "X_test = np.array(X_test.collect())"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "run pretrained classifier and see if its precision matches the `%local` model"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 11,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "0.9763157894736842"
         ]
        }
       ],
       "source": [
        "from sklearn.metrics import precision_score\n",
        "\n",
        "y_pred = decision_tree_model.predict(X_test)\n",
        "precision_score(y_test, y_pred, average='weighted')"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "it does! we have successfully passed both string and pandas dataframe from `%local` to `%spark`"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "PySpark",
       "language": "",
       "name": "pysparkkernel"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "python",
        "version": 3
       },
       "mimetype": "text/x-python",
       "name": "pyspark",
       "pygments_lexer": "python3"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 2
    }
---
# Source: ilum/charts/ilum-jupyter/templates/examples-configmaps/jupyter-spark-kernel-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-spark-kernel
data:
  Spark_Kernel.ipynb: |-
    {
     "cells": [
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "# Features available with the new kernels\n",
        "\n",
        "By default Jupyter notebook comes with a `Python` kernel. sparkmagic provides two additional kernels that you can use with Jupyter. These are:\n",
        "\n",
        "1. **PySpark** (for applications written in Python). PySpark kernel exposes the Spark programming model to Python\n",
        "2. **Spark** (for applications written in Scala)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "------------\n",
        "## How do I use the new kernels? \n",
        "\n",
        "1. Create a notebook with the new kernels. Click **New**, and then click **PySpark** or **Spark**. \n",
        "![Create notebooks with new kernels](https://mysstorage.blob.core.windows.net/notebookimages/overview/jupyter-kernels.png \"Create notebooks with new kernels\") \n",
        "2. This should open a new notebook with the kernel you selected."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## Notebook setup\n",
        "\n",
        "When using Spark kernel notebooks, there is no need to create a SparkContext or a HiveContext; those are all created for you automatically when you run the first code cell, and you'll be able to see the progress printed. The contexts are created with the following variable names:\n",
        "- SparkContext (sc)\n",
        "- HiveContext (sqlContext)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "Everytime you run a cell, your web browser window title will show a **(Busy)** status along with the notebook title. You will also see a solid circle next to the **Spark** text in the top-right corner. After the job completes, this will change to a hollow circle.\n",
        "\n",
        "![Status of a Jupyter notebook job](https://mysstorage.blob.core.windows.net/notebookimages/overview/HDI.Spark.Jupyter.Job.Status.Spark.Kernel.png \"Status of a Jupyter notebook job\")"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## Spark magics \n",
        "\n",
        "The Spark kernel provides some predefined “magics”, which are special commands that you can call with `%%` (e.g. `%%MAGIC` <args>). The magic command must be the first word in a code cell and allow for multiple lines of content. You can’t put comments before a cell magic.\n",
        "\n",
        "For more information on magics, see [here](http://ipython.readthedocs.org/en/stable/interactive/magics.html)."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Help magic (%%help)\n",
        "\n",
        "This magic gives you information about the different supported magics in Spark kernel and the usage for each. "
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 1,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "data": {
          "text/html": [
           "\n",
           "<table>\n",
           "  <tr>\n",
           "    <th>Magic</th>\n",
           "    <th>Example</th>\n",
           "    <th>Explanation</th>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>info</td>\n",
           "    <td>%%info</td>\n",
           "    <td>Outputs session information for the current Livy endpoint.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>cleanup</td>\n",
           "    <td>%%cleanup -f</td>\n",
           "    <td>Deletes all sessions for the current Livy endpoint, including this notebook's session. The force flag is mandatory.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>delete</td>\n",
           "    <td>%%delete -f -s 0</td>\n",
           "    <td>Deletes a session by number for the current Livy endpoint. Cannot delete this kernel's session.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>logs</td>\n",
           "    <td>%%logs</td>\n",
           "    <td>Outputs the current session's Livy logs.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>configure</td>\n",
           "    <td>%%configure -f<br/>{\"executorMemory\": \"1000M\", \"executorCores\": 4}</td>\n",
           "    <td>Configure the session creation parameters. The force flag is mandatory if a session has already been\n",
           "    created and the session will be dropped and recreated.<br/>Look at <a href=\"https://github.com/cloudera/livy#request-body\">\n",
           "    Livy's POST /sessions Request Body</a> for a list of valid parameters. Parameters must be passed in as a JSON string.</td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>sql</td>\n",
           "    <td>%%sql -o tables -q<br/>SHOW TABLES</td>\n",
           "    <td>Executes a SQL query against the sqlContext.\n",
           "    Parameters:\n",
           "      <ul>\n",
           "        <li>-o VAR_NAME: The result of the query will be available in the %%local Python context as a\n",
           "          <a href=\"http://pandas.pydata.org/\">Pandas</a> dataframe.</li>\n",
           "        <li>-q: The magic will return None instead of the dataframe (no visualization).</li>\n",
           "        <li>-m METHOD: Sample method, either <tt>take</tt> or <tt>sample</tt>.</li>\n",
           "        <li>-n MAXROWS: The maximum number of rows of a SQL query that will be pulled from Livy to Jupyter.\n",
           "            If this number is negative, then the number of rows will be unlimited.</li>\n",
           "        <li>-r FRACTION: Fraction used for sampling.</li>\n",
           "      </ul>\n",
           "    </td>\n",
           "  </tr>\n",
           "  <tr>\n",
           "    <td>local</td>\n",
           "    <td>%%local<br/>a = 1</td>\n",
           "    <td>All the code in subsequent lines will be executed locally. Code must be valid Python code.</td>\n",
           "  </tr>\n",
           "</table>\n"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%help"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session information (%%info)\n",
        "\n",
        "Livy is an open source REST server for Spark. When you execute a code cell in a Spark notebook, it creates a Livy session to execute your code. You can use the `%%info` magic to display the current Livy session information. "
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 2,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "data": {
          "text/html": [
           "Current session configs: <tt>{u'kind': 'spark'}</tt><br>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "text/html": [
           "<table>\n",
           "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>46</td><td>application_1466020664423_0016</td><td>pyspark</td><td>idle</td><td><a target=\"_blank\" href=\"https://localhost/yarnui/hn/proxy/application_1466020664423_0016/\">Link</a></td><td><a target=\"_blank\" href=\"https://localhost/yarnui/10.0.0.10/node/containerlogs/container_e04_1466020664423_0016_01_000001/spark\">Link</a></td><td></td></tr></table>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%info"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session configuration (%%configure)\n",
        " \n",
        "Use the `%%configure` magic to configure new or existing Livy sessions.\n",
        "* If a session is already running, you can change the configuration by using the `-f` argument with `%%configure` magic. This will delete the current session and recreate it with the applied configurations. If you don't provide the `-f` argument, an error will be displayed and no configuration changes will be applied.\n",
        "* If you haven't already started the session, then the `-f` argument is not mandatory. Even if you use it with a session that you are just creating, it will not delete any currently running sessions.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "These are some session attributes that can be used for configuration \n",
        "- **\"name\"**: Name of the application\n",
        "- **\"driverMemory\"**: Memory for driver (e.g. 1000M, 2G) \n",
        "- **\"executorMemory\"**: Memory for executor (e.g. 1000M, 2G) \n",
        "\n",
        "For more attributes for session configuration see <a href=\"https://github.com/cloudera/livy/tree/6fe1e80cfc72327c28107e0de20c818c1f13e027#post-sessions\" target=\"_blank\"> the Livy documentation</a>.\n",
        "\n",
        "> **TIP**: The application name should start with `remotesparkmagics` to allow sessions to get automatically cleaned up if an error happened. If you provide a name that does not start with `remotesparkmagics` it will not result in an error but the cleanup won't occur."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 3,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "data": {
          "text/html": [
           "Current session configs: <tt>{u'executorCores': 4, u'kind': 'spark', u'executorMemory': u'4G', u'name': u'remotesparkmagics-sample'}</tt><br>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "text/html": [
           "<table>\n",
           "<tr><th>ID</th><th>YARN Application ID</th><th>Kind</th><th>State</th><th>Spark UI</th><th>Driver log</th><th>Current session?</th></tr><tr><td>46</td><td>application_1466020664423_0016</td><td>pyspark</td><td>idle</td><td><a target=\"_blank\" href=\"https://localhost/yarnui/hn/proxy/application_1466020664423_0016/\">Link</a></td><td><a target=\"_blank\" href=\"https://localhost/yarnui/10.0.0.10/node/containerlogs/container_e04_1466020664423_0016_01_000001/spark\">Link</a></td><td></td></tr></table>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%configure -f \n",
        "{\"name\":\"remotesparkmagics-sample\", \"executorMemory\": \"4G\", \"executorCores\":4}"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "----------\n",
        "## Automatic visualization of queries \n",
        "\n",
        "The Pyspark kernel automatically visualizes the output of SQL (HiveQL) queries. You are given the option to choose between several different types of visualizations:\n",
        "- Table\n",
        "- Pie\n",
        "- Line \n",
        "- Area\n",
        "- Bar\n",
        "\n",
        ">**TIP**: When you perform a SQL query, the number of rows of data that will be included in the result data set will be limited by default to 2500 rows."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### SQL magic (%%sql)\n",
        "\n",
        "The Spark kernel supports easy inline HiveQL queries against the `sqlContext`. The (`-o VARIABLE_NAME`) argument persists the output of the SQL query as a <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" target=\"_blank\">Pandas dataframe</a> on the Jupyter server (e.g. `-o query1` in the example below). This means it'll be available in the local mode which will be explained later. The output will be automatically visualized after you run the cell below."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 4,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "Creating SparkContext as 'sc'\n",
          "Creating HiveContext as 'sqlContext'\n"
         ]
        }
       ],
       "source": [
        "%%sql -o query1\n",
        "SELECT 1, 2, 3"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "![widget](images/widget.PNG)"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "In addition to `-o`, a number of other configuration parameters for SQL queries are available (as described in the `%%help` output above). These include:\n",
        "\n",
        "* `-q`. This causes the magic to return `None`, turning off visualizations for that cell. If you don't want to auto-visualize the content of a cell and just want to capture it as a dataframe, then use `-q -o VARIABLE`. If you want to turn off visualizations without capturing the results (e.g. for running a SQL query with side effects, like a `CREATE TABLE` statement), just use `-q` without specifying a `-o` argument.\n",
        "\n",
        "> Remember that the kernel by default limits the output of a SQL query to 2500 rows. If you want to adjust this default behavior, use these options.\n",
        "\n",
        "* `-m METHOD`, where `METHOD` is either `take` or `sample` (defaults to `take`). If the method is `take`, the kernel will take elements from the top of the result data set; if the method is `sample`, the kernel will randomly sample elements of the data set according to `-r`, described below.\n",
        "\n",
        "* `-r FRACTION`, where `FRACTION` is some floating-point number between 0.0 and 1.0. If the sample method for the SQL query is `sample`, then the kernel will randomly sample this fraction of the elements of the result set for you; e.g. if you run a SQL query with the arguments `-m sample -r 0.01`, then 1% of the result rows will be randomly sampled.\n",
        "\n",
        "* `-n MAXROWS`, where `MAXROWS` is some integer. The kernel will limit the number of output rows to `MAXROWS`. If `MAXROWS` is a negative number such as `-1`, then the number of rows in the result set will not be limited.\n",
        "\n",
        "> **WARNING**: Be careful with the `-n` option, as it is possible to cause the Jupyter server to run out of memory if you try to collect too many result rows. We recommend only using `-n -1` if you are certain that the result dataset will not be too large.\n",
        "\n",
        "As a final example, this SQL query randomly samples 10% of the rows in the **hivesampletable**, limits the size of the result set to 500, and saves the output into a dataframe called `query2` without doing any visualizations."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 5,
       "metadata": {
        "collapsed": true
       },
       "outputs": [],
       "source": [
        "%%sql -q -m sample -r 0.1 -n 500 -o query2 \n",
        "SELECT * FROM hivesampletable"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Running locally (%%local)\n",
        "\n",
        "You can use the `%%local` magic to run your code locally on the Jupyter server without going to Spark. Here's a typical use case for this scenario. \n",
        "\n",
        "By default, the output of any code snippet that you run from a Jupyter notebook is available within the context of the session that is persisted on the worker nodes. However, if you want to save a trip to the worker nodes for every computation, and all the data that you need for your computation is available locally on the Jupyter server node (which is the headnode), you can use the `%%local` magic to run the code snippet on the Jupyter server. Typically, you would use `%%local` magic in conjunction with the `%%sql` magic with `-o` parameter. The `-o` parameter would persist the output of the SQL query locally and then `%%local` magic would trigger the next set of code snippet to run locally against the output of the SQL queries that is persisted locally.\n",
        "\n",
        "> **TIPS**: \n",
        "> * Working against locally persisted data is especially useful when you want the flexibility of using the visual representation libraries such as **matplotlib**. If you work directly against the data on the remote worker nodes, the output received through Livy is always text that limits the options of visual representation.\n",
        "\n",
        "\n",
        "> * Remember that SQL queries, by default, limit the number of result rows to 2500 -- and that it is possible to get OOM errors if you accidentally collect too many results from your SQL query. Therefore, if your dataset is large, it is considered a best practice to do your computation or number-crunching on the cluster or in the SQL query rather than in local mode.\n",
        "\n",
        "When you use `%%local` all subsequent lines in the cell will be executed locally. The code in the cell must be valid Python code.\n",
        "\n",
        "This code block prints the length of the result set of the dataframe `query2` -- remember, we used the `-n 500` option to limit the size of the dataframe to 500.\n",
        "\n",
        "> **TIP**: Remember that even if you're working in the Spark kernel, you can only use Python in local mode."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 6,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "500\n"
         ]
        }
       ],
       "source": [
        "%%local  \n",
        "print(len(query2))"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Session logs (%%logs)\n",
        "\n",
        "You can get the logs of your current Livy session to debug any issues you encounter."
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 7,
       "metadata": {
        "collapsed": false
       },
       "outputs": [
        {
         "name": "stdout",
         "output_type": "stream",
         "text": [
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:28 WARN SparkConf: The configuration key 'spark.yarn.applicationMaster.waitTries' has been deprecated as of Spark 1.3 and and may be removed in the future. Please use the new key 'spark.yarn.am.waitTime' instead.\n",
          "16/06/09 23:43:29 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n",
          "16/06/09 23:43:30 INFO TimelineClientImpl: Timeline service address: http://localhost:8188/ws/v1/timeline/\n",
          "16/06/09 23:43:30 INFO Client: Requesting a new application from cluster with 10 NodeManagers\n",
          "16/06/09 23:43:30 INFO Client: Verifying our application has not requested more than the maximum memory capability of the cluster (25600 MB per container)\n",
          "16/06/09 23:43:30 INFO Client: Will allocate AM container, with 1408 MB memory including 384 MB overhead\n",
          "16/06/09 23:43:30 INFO Client: Setting up container launch context for our AM\n",
          "16/06/09 23:43:30 INFO Client: Setting up the launch environment for our AM container\n",
          "16/06/09 23:43:30 INFO Client: Preparing resources for our AM container\n",
          "16/06/09 23:43:31 INFO MetricsConfig: loaded properties from hadoop-metrics2-azure-file-system.properties\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init starting.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init starting. Initializing MdsLogger.\n",
          "16/06/09 23:43:31 INFO AzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO WasbAzureIaasSink: Init completed.\n",
          "16/06/09 23:43:31 INFO MetricsSinkAdapter: Sink azurefs2 started\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: Scheduled snapshot period at 60 second(s).\n",
          "16/06/09 23:43:31 INFO MetricsSystemImpl: azure-file-system metrics system started\n",
          "16/06/09 23:43:31 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:32 INFO Client: Uploading resource file:/usr/hdp/current/spark-client/conf/hive-site.xml -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/hive-site.xml\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/pyspark.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/pyspark.zip\n",
          "16/06/09 23:43:33 INFO Client: Uploading resource file:/usr/hdp/2.3.3.1-7/spark/python/lib/py4j-0.8.2.1-src.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/py4j-0.8.2.1-src.zip\n",
          "16/06/09 23:43:34 INFO Client: Uploading resource file:/tmp/spark-1c0a5560-2256-4f63-ba1f-c0dfd25dc24b/__spark_conf__324896021270563710.zip -> wasb://MYSTORAGE@store.blob.core.windows.net/user/spark/.sparkStaging/application_1464100251524_0001/__spark_conf__324896021270563710.zip\n",
          "16/06/09 23:43:34 WARN Client: spark.yarn.am.extraJavaOptions will not take effect in cluster mode\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing view acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: Changing modify acls to: spark\n",
          "16/06/09 23:43:34 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users with view permissions: Set(spark); users with modify permissions: Set(spark)\n",
          "16/06/09 23:43:34 INFO Client: Submitting application 1 to ResourceManager\n",
          "16/06/09 23:43:35 INFO YarnClientImpl: Submitted application application_1464100251524_0001\n",
          "16/06/09 23:43:36 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:36 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: N/A\n",
          "\t ApplicationMaster RPC port: -1\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:37 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:38 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:39 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:40 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:41 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:42 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:43 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:44 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:45 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:46 INFO Client: Application report for application_1464100251524_0001 (state: ACCEPTED)\n",
          "16/06/09 23:43:47 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:47 INFO Client: \n",
          "\t client token: N/A\n",
          "\t diagnostics: N/A\n",
          "\t ApplicationMaster host: 10.0.0.4\n",
          "\t ApplicationMaster RPC port: 0\n",
          "\t queue: default\n",
          "\t start time: 1465515814875\n",
          "\t final status: UNDEFINED\n",
          "\t tracking URL: http://localhost:8088/proxy/application_1464100251524_0001/\n",
          "\t user: spark\n",
          "16/06/09 23:43:48 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:49 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:50 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:51 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:52 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:53 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:54 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:55 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:56 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:57 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:58 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:43:59 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:00 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:01 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:02 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:03 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:04 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:05 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:06 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:07 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:08 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:09 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:10 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:11 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:12 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:13 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:14 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:15 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:16 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:17 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:18 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:19 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:20 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:21 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:22 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:23 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:24 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)\n",
          "16/06/09 23:44:25 INFO Client: Application report for application_1464100251524_0001 (state: RUNNING)"
         ]
        }
       ],
       "source": [
        "%%logs"
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Delete session (%%delete)\n",
        "\n",
        "Use '`%%delete -f -s <session #>`' to delete a session given its session ID. Note that you cannot delete the session that is initiated for the kernel itself. Another notebook might go into an error state, since notebooks are supposed to manage sessions by themselves, and all work will be lost on that session."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Sessions cleanup (%%cleanup)\n",
        "\n",
        "Use '`%%cleanup -f`' magic to delete all of the sessions for this cluster, including this notebook's session.\n",
        "The force flag `-f` is mandatory."
       ]
      },
      {
       "cell_type": "markdown",
       "metadata": {},
       "source": [
        "### Pretty Print Spark Dataframes (%%pretty)\n",
        "\n",
        "Use '`%%pretty`' magic to display a Scala Spark dataframe as a HTML formatted table"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": 7,
       "metadata": {},
       "outputs": [
        {
         "data": {
          "application/vnd.jupyter.widget-view+json": {
           "model_id": "",
           "version_major": 2,
           "version_minor": 0
          },
          "text/plain": [
           "FloatProgress(value=0.0, bar_style='info', description='Progress:', layout=Layout(height='25px', width='50%'),…"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "text/html": [
           "<table><tr><th>col1</th><th>col2</th><th>col3</th></tr><tr><td>28</td><td>44</td><td>36</td></tr><tr><td>16</td><td>41</td><td>72</td></tr><tr><td>27</td><td>14</td><td>45</td></tr></table><br /><pre></pre>"
          ],
          "text/plain": [
           "<IPython.core.display.HTML object>"
          ]
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ],
       "source": [
        "%%pretty\n",
        "df.show()"
       ]
      },
      {
       "cell_type": "code",
       "execution_count": null,
       "metadata": {},
       "outputs": [],
       "source": []
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Spark",
       "language": "",
       "name": "sparkkernel"
      },
      "language_info": {
       "codemirror_mode": "text/x-scala",
       "mimetype": "text/x-scala",
       "name": "scala",
       "pygments_lexer": "scala"
      },
      "widgets": {
       "state": {},
       "version": "1.1.2"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 0
    }
---
# Source: ilum/charts/ilum-jupyter/templates/jupyter-config-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-jupyter-config
data:
  config.json: |
    {
      "kernel_python_credentials" : {
        "username": "",
        "password": "",
        "url": "http://ilum-livy-proxy:8998",
        "auth": "None"
      },
      "kernel_scala_credentials" : {
        "username": "",
        "password": "",
        "url": "http://ilum-livy-proxy:8998",
        "auth": "None"
      },
      "kernel_r_credentials": {
        "username": "",
        "password": "",
        "url": "http://ilum-livy-proxy:8998"
      },
      "logging_config": {
        "version": 1,
        "formatters": {
          "magicsFormatter": {
            "format": "%(asctime)s\t%(levelname)s\t%(message)s",
            "datefmt": ""
          }
        },
        "handlers": {
          "magicsHandler": {
            "class": "hdijupyterutils.filehandler.MagicsFileHandler",
            "formatter": "magicsFormatter",
            "home_path": "~/.sparkmagic"
          }
        },
        "loggers": {
          "magicsLogger": {
            "handlers": ["magicsHandler"],
            "level": "DEBUG",
            "propagate": 0
          }
        }
      },
      "authenticators": {
        "Kerberos": "sparkmagic.auth.kerberos.Kerberos",
        "None": "sparkmagic.auth.customauth.Authenticator",
        "Basic_Access": "sparkmagic.auth.basic.Basic"
      },
      "wait_for_idle_timeout_seconds": 15,
      "livy_session_startup_timeout_seconds": 300,
      "http_session_config": {
        "adapters":
          [
            {
              "prefix": "http://",
              "adapter": "requests.adapters.HTTPAdapter"
            }
          ]
      },
      "fatal_error_suggestion": "The code failed because of a fatal error:\n\t{}.\n\nSome things to try:\na) Make sure Spark has enough available resources for Jupyter to create a Spark context.\nb) Contact your Jupyter administrator to make sure the Spark magics library is configured correctly.\nc) Restart the kernel.",
      "ignore_ssl_errors": false,
      "session_configs": {
        "conf": { "pyRequirements": "pandas", "spark.jars.packages": "io.delta:delta-core_2.12:2.4.0", "spark.sql.extensions": "io.delta.sql.DeltaSparkSessionExtension", "spark.sql.catalog.spark_catalog": "org.apache.spark.sql.delta.catalog.DeltaCatalog" },
        "driverMemory": "1000M",
        "executorCores": 2
      },
      "session_configs_defaults": {
        "conf": { "pyRequirements": "pandas", "spark.jars.packages": "io.delta:delta-core_2.12:2.4.0", "spark.sql.extensions": "io.delta.sql.DeltaSparkSessionExtension", "spark.sql.catalog.spark_catalog": "org.apache.spark.sql.delta.catalog.DeltaCatalog" },
        "driverMemory": "1000M",
        "executorCores": 2
      },
      "use_auto_viz": true,
      "coerce_dataframe": true,
      "max_results_sql": 2500,
      "pyspark_dataframe_encoding": "utf-8",
      "heartbeat_refresh_seconds": 30,
      "livy_server_heartbeat_timeout_seconds": 0,
      "heartbeat_retry_seconds": 10,
      "server_extension_default_kernel_name": "pysparkkernel",
      "custom_headers": {},
      "retry_policy": "configurable",
      "retry_seconds_to_sleep_list": [0.2, 0.5, 1, 3, 5],
      "configurable_retry_policy_max_retries": 8
    }
---
# Source: ilum/charts/ilum-livy-proxy/templates/livy-proxy-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-livy-proxy
data:
  ilumCoreUri: "http://ilum-core:9888/api/v1"
  ilumUIPublicUri: "http://localhost:9777"
---
# Source: ilum/charts/ilum-ui/templates/ui-cm-nginx.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-nginx
data:
  nginx.conf: |-
    worker_processes  auto;
    
    error_log  /var/log/nginx/error.log warn;
    pid        /tmp/nginx.pid;
    
    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
    
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
    
        access_log  /var/log/nginx/access.log  main;
    
        sendfile        on;
        server_tokens   off;
    
        keepalive_time 6h;
        keepalive_timeout  6h;
        client_max_body_size 2G;
    
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            text/event-stream
            application/javascript
            application/json
            image/svg+xml;
    
      include conf.d/server.conf;
    
    }
---
# Source: ilum/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    readiness_test='db.isMaster().ismaster || db.isMaster().secondary'
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        readiness_test='db.hello().isWritablePrimary || db.hello().secondary'
    fi
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "${readiness_test}" | grep 'true'
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: ilum/charts/mongodb/templates/replicaset/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-mongodb-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: mongodb
data:
  setup.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh
    . /opt/bitnami/scripts/libfs.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    if is_empty_value "$MONGODB_ADVERTISED_PORT_NUMBER"; then
      export MONGODB_ADVERTISED_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    info "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    info "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"

    # Check for existing replica set in case there is no data in the PVC
    # This is for cases where the PVC is lost or for MongoDB caches without
    # persistence
    current_primary=""
    if is_dir_empty "${MONGODB_DATA_DIR}/db"; then
      info "Data dir empty, checking if the replica set already exists"
        current_primary=$(mongosh admin --host "ilum-mongodb-0.ilum-mongodb-headless.default.svc.cluster.local:27017,ilum-mongodb-1.ilum-mongodb-headless.default.svc.cluster.local:27017" --eval 'db.runCommand("ismaster")' | awk -F\' '/primary/ {print $2}')
      if ! is_empty_value "$current_primary"; then
        info "Detected existing primary: ${current_primary}"
      fi
    fi

    if ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" == "$current_primary" ]]; then
        info "Advertised name matches current primary, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    elif ! is_empty_value "$current_primary" && [[ "$MONGODB_ADVERTISED_HOSTNAME:$MONGODB_ADVERTISED_PORT_NUMBER" != "$current_primary" ]]; then
        info "Current primary is different from this node. Configuring the node as replica of ${current_primary}"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_HOST="${current_primary%:*}"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="${current_primary#*:}"
        export MONGODB_SET_SECONDARY_OK="yes"
    elif [[ "$MY_POD_NAME" = "ilum-mongodb-0" ]]; then
        info "Pod name matches initial primary pod name, configuring node as a primary"
        export MONGODB_REPLICA_SET_MODE="primary"
    else
        info "Pod name doesn't match initial primary pod name, configuring node as a secondary"
        export MONGODB_REPLICA_SET_MODE="secondary"
        export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    fi

    if [[ "$MONGODB_REPLICA_SET_MODE" == "secondary" ]]; then
        export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
        export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
        export MONGODB_ROOT_PASSWORD=""
        export MONGODB_EXTRA_USERNAMES=""
        export MONGODB_EXTRA_DATABASES=""
        export MONGODB_EXTRA_PASSWORDS=""
        export MONGODB_ROOT_PASSWORD_FILE=""
        export MONGODB_EXTRA_USERNAMES_FILE=""
        export MONGODB_EXTRA_DATABASES_FILE=""
        export MONGODB_EXTRA_PASSWORDS_FILE=""
    fi

    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
  setup-hidden.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/mongodb-env.sh

    echo "Advertised Hostname: $MONGODB_ADVERTISED_HOSTNAME"
    echo "Advertised Port: $MONGODB_ADVERTISED_PORT_NUMBER"
    echo "Configuring node as a hidden node"
    export MONGODB_REPLICA_SET_MODE="hidden"
    export MONGODB_INITIAL_PRIMARY_ROOT_USER="$MONGODB_ROOT_USER"
    export MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD="$MONGODB_ROOT_PASSWORD"
    export MONGODB_INITIAL_PRIMARY_PORT_NUMBER="$MONGODB_PORT_NUMBER"
    export MONGODB_ROOT_PASSWORD=""
    export MONGODB_EXTRA_USERNAMES=""
    export MONGODB_EXTRA_DATABASES=""
    export MONGODB_EXTRA_PASSWORDS=""
    export MONGODB_ROOT_PASSWORD_FILE=""
    export MONGODB_EXTRA_USERNAMES_FILE=""
    export MONGODB_EXTRA_DATABASES_FILE=""
    export MONGODB_EXTRA_PASSWORDS_FILE=""
    exec /opt/bitnami/scripts/mongodb/entrypoint.sh /opt/bitnami/scripts/mongodb/run.sh
---
# Source: ilum/templates/ui-cm-nginx-server.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-nginx-server
data:
  server.conf.template: |-
    server {
        listen 8080;
        server_name ilum-frontend;
        ignore_invalid_headers off;

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # This path will be forward to http://ilum-core-service/
        location /core/ {
            proxy_pass ${ILUM_BACKEND_URL}/;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            chunked_transfer_encoding off;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 6h;
        }

        # This path will be forward to http://ilum-jupyter/
        location /external/jupyter/ {
            proxy_pass ${ILUM_JUPYTER_URL};
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_redirect off;
            proxy_buffering off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        

        #This path will be forward to http://ilum-history-server/
        location /external/history-server/ {
            proxy_set_header Accept-Encoding "";
            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 6h;
            absolute_redirect off;

            sub_filter_types *;
            sub_filter 'href="/' 'href="/external/history-server/';
            sub_filter 'src="/' 'src="/external/history-server/';
            sub_filter 'action="/' 'action="/external/history-server/';
            sub_filter 'setUIRoot(\'\')' 'setUIRoot(\'/external/history-server/\')';
            sub_filter_once off;

            proxy_pass ${ILUM_HISTORY_SERVER_URL}/;
        }
    
        location /external/minio/ {
            rewrite ^/external/minio/(.*) /$1 break;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            
            # This is necessary to pass the correct IP to be hashed
            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            # To support websockets in MinIO versions released after January 2023
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            # Some environments may encounter CORS errors (Kubernetes + Nginx Ingress)
            # Uncomment the following line to set the Origin request to an empty string
            proxy_set_header Origin '';
            proxy_hide_header X-Frame-Options;
            chunked_transfer_encoding off;
            proxy_pass ${ILUM_DATA_URL}; # This uses the upstream directive definition to load balance
        }
    
        
    
                    

        # This path will be forward to spark web ui of job with given appid
        location ~ ^/sparkui/(?<jobid>.+)/(?<random>.+)/(?<port>[0-9]+)/(?<namespace>.+)/proxy/(?<appid>[^/]+)(?<local_path>.*) {
             resolver kube-dns.kube-system.svc.cluster.local valid=10s;

             proxy_set_header Accept-Encoding "";
             proxy_http_version 1.1;
             proxy_buffering off;
             proxy_cache off;
             proxy_read_timeout 6h;

             sub_filter_types *;
             sub_filter 'href="/' 'href="/sparkui/$jobid/$random/$port/$namespace/proxy/$appid/';
             sub_filter 'src="/' 'src="/sparkui/$jobid/$random/$port/$namespace/proxy/$appid/';
             sub_filter 'action="/' 'action="/sparkui/$jobid/$random/$port/$namespace/proxy/$appid/';
             sub_filter 'setUIRoot(\'\')' 'setUIRoot(\'/sparkui/$jobid/$random/$port/$namespace/proxy/$appid/\')';
             sub_filter_once off;

             if ($local_path = "") {
                rewrite ^ /jobs/ break;
             }
             if ($local_path = "/") {
                rewrite ^ /jobs/ break;
             }
             rewrite ^ $local_path break;

             proxy_pass http://job-$jobid-$random-driver-svc.$namespace.svc.cluster.local:$port;
        }

        location /core/api/v1/ {
            deny all;
        }
    }
---
# Source: ilum/templates/ui-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ilum-ui
data:
  ILUM_DEBUG: "false"
  ILUM_BACKEND_URL: "http://ilum-core:9888"
  ILUM_AIRFLOW_URL: "http://ilum-webserver:8080"
  ILUM_HISTORY_SERVER_URL: "http://ilum-history-server:9666"
  ILUM_JUPYTER_URL: "http://ilum-jupyter:8888"
  ILUM_DATA_URL: "http://ilum-minio:9001"
  ILUM_MLFLOW_URL: "http://mlflow:5000"
  ILUM_LINEAGE_URL: "http://ilum-marquez-web:9444"
  ILUM_HISTORY_SERVER_ENABLED: "true"
  ILUM_JUPYTER_ENABLED: "true"
  ILUM_AIRFLOW_ENABLED: "false"
  ILUM_DATA_ENABLED: "true"
  ILUM_MLFLOW_ENABLED: "false"
  ILUM_LINEAGE_ENABLED: "false"
  ILUM_DOC_ENABLED: "true"
  ILUM_SQL_ENABLED: "false"
  ILUM_JUPYTER_PATH: "/external/jupyter/lab/tree/work/IlumIntro.ipynb"
  ILUM_AIRFLOW_PATH: "/external/airflow/"
  ILUM_DATA_PATH: "/external/minio/"
  ILUM_MLFLOW_PATH: "/external/mlflow/"
  ILUM_HISTORY_SERVER_PATH: "/external/history-server/"
  ILUM_LINEAGE_PATH: "/external/lineage/"
  ILUM_OAUTH2_CLIENT_ID: "undefined"
  ILUM_OAUTH2_CLIENT_SECRET: "undefined"
  ILUM_OAUTH2_ISSUER_URI: "undefined"
---
# Source: ilum/charts/ilum-jupyter/templates/jupyter-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ilum-jupyter-work-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "4Gi"
---
# Source: ilum/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ilum-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "16Gi"
---
# Source: ilum/charts/ilum-core/templates/spark-cr.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: spark-submit-cluster-role-default
rules:
  - apiGroups: [ "metrics.k8s.io" ]
    resources: [ "nodes" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods/exec" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "pods/log" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "services" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "configmaps" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "persistentvolumeclaims" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "" ]
    resources: [ "endpoints" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
  - apiGroups: [ "monitoring.coreos.com" ]
    resources: [ "servicemonitors" ]
    verbs: [ "create","delete","deletecollection","get","list","patch","update","watch" ]
---
# Source: ilum/charts/ilum-core/templates/spark-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spark-submit-cluster-role-binding-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spark-submit-cluster-role-default
subjects:
- kind: ServiceAccount
  name: my-release-ilum-core-spark
  namespace: default
---
# Source: ilum/charts/ilum-core/templates/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-core
  labels:
    app: ilum-core
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9888
      targetPort: 8080
  selector:
    app: ilum-core
---
# Source: ilum/charts/ilum-core/templates/grpc-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-grpc
  labels:
    app: ilum-grpc
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 9999
      targetPort: 9999
  selector:
    app: ilum-core
---
# Source: ilum/charts/ilum-core/templates/hs-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-history-server
  labels:
    app: ilum-history-server
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9666
      targetPort: 18080
  selector:
    app: ilum-history-server
---
# Source: ilum/charts/ilum-jupyter/templates/jupyter-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-jupyter
  labels:
    app: ilum-jupyter
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8888
      targetPort: 8888
  selector:
    app: ilum-jupyter
---
# Source: ilum/charts/ilum-livy-proxy/templates/livy-proxy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-livy-proxy
  labels:
    app: ilum-livy-proxy
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8998
      targetPort: 8998
  selector:
    app: ilum-livy-proxy
---
# Source: ilum/charts/ilum-ui/templates/ui-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-ui
  labels:
    app: ilum-ui
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9777
      targetPort: 8080
  selector:
    app: ilum-ui
---
# Source: ilum/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: minio
---
# Source: ilum/charts/mongodb/templates/arbiter/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-mongodb-arbiter-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: arbiter
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-mongodb
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: arbiter
---
# Source: ilum/charts/mongodb/templates/replicaset/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-mongodb-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: mongodb
---
# Source: ilum/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.4
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: ilum/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.4
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: ilum/charts/ilum-core/templates/core-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ilum-core
  template:
    metadata:
      annotations:
        rollme: "1ivII"
      labels:
        app: ilum-core
        ilum.prometheus: "true"
    spec:
      serviceAccountName: my-release-ilum-core-spark
      volumes:
        - name: application-config
          configMap:
            name: ilum
        - name: spark-submit-pod-template
          configMap:
            name: ilum-spark-submit-pt
      initContainers:
        - name: wait-for-mongo
          image: mongo:7.0.5-jammy
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', "until mongosh --host ilum-mongodb-0.ilum-mongodb-headless:27017,ilum-mongodb-1.ilum-mongodb-headless:27017 --eval 'db.runCommand({ping:1})' ; do echo waiting for mongo; sleep 2; done"]
      containers:
        - name: ilum-core
          image: ilum/core:6.2.0-RC1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 2Gi
            requests:
              memory: 1Gi
          volumeMounts:
            - name: application-config
              mountPath: /config
            - name: spark-submit-pod-template
              mountPath: /tmp/pod-template
          env:
            - name: ILUM_KUBERNETES_INITCLUSTERONSTARTUP
              value: "true"
            - name: ILUM_KUBERNETES_UPGRADECLUSTERONSTARTUP
              value: "false"
            - name: ILUM_SPARKNAMESPACE
              value: "default"
            - name: ILUM_KUBERNETES_API_URL
              value: "https://kubernetes.default.svc"
            - name: ILUM_KUBERNETES_CONTAINER_IMAGE
              value: "ilum/spark:3.4.1"
            - name: ILUM_SERVICE_ACCOUNT_NAME
              value: my-release-ilum-core-spark
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/dev/reactive/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/dev/reactive/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
---
# Source: ilum/charts/ilum-core/templates/hs-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-history-server
spec:
  selector:
    matchLabels:
      app: ilum-history-server
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ilum-history-server
      annotations:
        checksum/config: 6bb6969297abc5823ee6b8083c016a80341607eef0fa6b95aa5c0f1d3a0295a3
    spec:
      restartPolicy: Always
      initContainers:
        - name: wait-for-ilum-core
          image: curlimages/curl:8.5.0
          imagePullPolicy: IfNotPresent
          command: [ 'sh', '-c', 'until curl -sf http://ilum-core:9888/api/dev/reactive/health ; do echo waiting for ilum-core; sleep 2; done' ]
      containers:
        - name: ilum-history-server
          image: ilum/spark-launcher:spark-3.4.1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 500Mi
            requests:
              memory: 300Mi
          command:
            - ./bin/spark-class
            - org.apache.spark.deploy.history.HistoryServer
          ports:
            - containerPort: 18080
              name: history-server
              protocol: TCP
          volumeMounts:
            - name: spark-config
              mountPath: /usr/local/spark/conf
          
      volumes:
        - name: spark-config
          configMap:
            name: spark-defaults
        
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
---
# Source: ilum/charts/ilum-jupyter/templates/jupyter-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-jupyter
spec:
  selector:
    matchLabels:
      app: ilum-jupyter
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ilum-jupyter
      annotations:
        checksum/sparkmagicConf: dd144c5c00a7ae004b30b5d1aaaa3a71ec6d4d3940d4df7cdd538bf813ceefef
        checksum/sparkmagicIntro: 14435b256a710084211a8188c2a194b23c046e41dde3a1dd08f72dbd59be9f55
        checksum/sparkmagicMagics: 51922263e4b9bf4858feb10dc5adac464f94556d9ebea9130cf2e56d6e9f790d
        checksum/sparkmagicPysparkKernel: 6089f634d9212e740123661d9980a8bdb0279af707e43fe0fedf66500a3c0bb1
        checksum/sparkmagicSendData: 08183f0d550aca9b637579d83b4740ee776d17071f569efb26a9aab54609a81e
        checksum/sparkmagicSparkKernel: 484ae98e3dc5680448250557a4ce51b3f09f070e6bd11dfac4a3ffcd626bdfe4
        checksum/sparkmagicImages: 585de03370504740cdbb71145cdcf07229c8ecd5840d59104ea31e86f9928917
        checksum/sparkmagicMedallion: bc4fdc32548a4a783f1441b4dd17979d027cb99b043ca5f3fce461582b6327d1
    spec:
      volumes:
        - name: jupyter-sparkmagic-config
          configMap:
            name: ilum-jupyter-config
        - name: jupyter-intro
          configMap:
            name: ilum-jupyter-intro
        - name: jupyter-magics
          configMap:
            name: ilum-jupyter-magics
        - name: jupyter-pyspark-kernel
          configMap:
            name: ilum-jupyter-pyspark-kernel
        - name: jupyter-send-data-to-spark
          configMap:
            name: ilum-jupyter-send-data-to-spark
        - name: jupyter-spark-kernel
          configMap:
            name: ilum-jupyter-spark-kernel
        - name: jupyter-images
          configMap:
            name: ilum-jupyter-images
        - name: jupyter-medallion
          configMap:
            name: ilum-jupyter-medallion
        - name: jupyter-workspace
          persistentVolumeClaim:
            claimName: ilum-jupyter-work-pvc
      containers:
        - name: ilum-jupyter
          image: ilum/sparkmagic:0.21.0
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 1Gi
          command: [ "/bin/sh", "-c" ]
          args:
            -   >
                set -ex;
                exec start-notebook.sh --NotebookApp.base_url='/external/jupyter/' --NotebookApp.token='' "$@";
          volumeMounts:
            - name: jupyter-sparkmagic-config
              mountPath: /home/jovyan/.sparkmagic/config.json
              subPath: config.json
            - name: jupyter-intro
              mountPath: /home/jovyan/work/IlumIntro.ipynb
              subPath: IlumIntro.ipynb
            - name: jupyter-magics
              mountPath: /home/jovyan/work/Magics_in_IPython_Kernel.ipynb
              subPath: Magics_in_IPython_Kernel.ipynb
            - name: jupyter-pyspark-kernel
              mountPath: /home/jovyan/work/Pyspark_Kernel.ipynb
              subPath: Pyspark_Kernel.ipynb
            - name: jupyter-send-data-to-spark
              mountPath: /home/jovyan/work/Send_local_data_to_Spark.ipynb
              subPath: Send_local_data_to_Spark.ipynb
            - name: jupyter-spark-kernel
              mountPath: /home/jovyan/work/Spark_Kernel.ipynb
              subPath: Spark_Kernel.ipynb
            - name: jupyter-images
              mountPath: /home/jovyan/work/images
            - name: jupyter-medallion
              mountPath: /home/jovyan/work/medallion
            - name: jupyter-workspace
              mountPath: /home/jovyan/work
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
---
# Source: ilum/charts/ilum-livy-proxy/templates/livy-proxy-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-livy-proxy
spec:
  selector:
    matchLabels:
      app: ilum-livy-proxy
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ilum-livy-proxy
    spec:
      initContainers:
        - name: wait-for-ilum-core
          image: curlimages/curl:8.5.0
          imagePullPolicy: IfNotPresent
          command: [ 'sh', '-c', 'until curl -sf http://ilum-core:9888/api/dev/reactive/health ; do echo waiting for ilum-core; sleep 2; done']
      containers:
        - name: ilum-livy-proxy
          image: ilum/livy-proxy:6.2.0-RC1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 1Gi
          env:
            - name: ILUM_CORE_URI
              valueFrom:
                configMapKeyRef:
                  name: ilum-livy-proxy
                  key: ilumCoreUri
            - name: ILUM_UI_PUBLIC_URI
              valueFrom:
                configMapKeyRef:
                  name: ilum-livy-proxy
                  key: ilumUIPublicUri
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
---
# Source: ilum/charts/ilum-ui/templates/ui-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ilum-ui
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        rollme: "hp1RB"
      labels:
        app: ilum-ui
    spec:
      initContainers:
        - name: wait-for-ilum-core
          image: curlimages/curl:8.5.0
          imagePullPolicy: IfNotPresent
          command: [ 'sh', '-c', "until curl -sf http://ilum-core:9888/api/dev/reactive/health ; do echo waiting for ilum-core; sleep 2; done" ]
      containers:
        - name: ilum-ui
          image: ilum/ui:6.2.0-RC1
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1Gi
            requests:
              memory: 1Gi
          envFrom:
            - configMapRef:
                name: ilum-ui
          volumeMounts:
            - name: ilum-nginx
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: ilum-nginx-server
              mountPath: /etc/nginx/templates/server.conf.template
              subPath: server.conf.template
      securityContext:
        fsGroup: 101 # nginx
      volumes:
        - name: ilum-nginx
          configMap:
            name: ilum-nginx
        - name: ilum-nginx-server
          configMap:
            name: ilum-nginx-server
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
---
# Source: ilum/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2023.12.23
    helm.sh/chart: minio-12.13.2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2023.12.23
        helm.sh/chart: minio-12.13.2
      annotations:
        checksum/credentials-secret: fd9dcbc948b747d0d9820ef06190dd4779b8f87bae121a52a9075eab368dbc24
    spec:
      
      serviceAccountName: ilum-minio
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2023.12.23-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: ilum-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ilum-minio
                  key: root-password
            - name: MINIO_DEFAULT_BUCKETS
              value: ilum-files
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_BROWSER_REDIRECT_URL
              value: "http://ilum-minio:9001/external/minio/"
            
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/minio/data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: ilum-minio
---
# Source: ilum/charts/mongodb/templates/arbiter/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ilum-mongodb-arbiter
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: arbiter
spec:
  serviceName: ilum-mongodb-arbiter-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: arbiter
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/version: 6.0.10
        helm.sh/chart: mongodb-13.18.5
        app.kubernetes.io/component: arbiter
    spec:
      
      serviceAccountName: ilum-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/component: arbiter
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      initContainers:
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:6.0.10-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "ilum-mongodb-arbiter-headless"
            - name: MONGODB_REPLICA_SET_MODE
              value: "arbiter"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: ilum-mongodb-0.ilum-mongodb-headless.$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
          ports:
            - containerPort: 27017
              name: mongodb
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            tcpSocket:
              port: mongodb
          resources:
            limits: {}
            requests: {}
---
# Source: ilum/charts/mongodb/templates/replicaset/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ilum-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 6.0.10
    helm.sh/chart: mongodb-13.18.5
    app.kubernetes.io/component: mongodb
spec:
  serviceName: ilum-mongodb-headless
  podManagementPolicy: OrderedReady
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/version: 6.0.10
        helm.sh/chart: mongodb-13.18.5
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: ilum-mongodb
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      initContainers:
        - name: volume-permissions
          image: docker.io/bitnami/os-shell:11-debian-11-r72
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p /bitnami/mongodb/
              chown 1001:1001 /bitnami/mongodb/
              find  /bitnami/mongodb/ -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs -r chown -R 1001:1001
          securityContext:
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.10-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: K8S_SERVICE_NAME
              value: "ilum-mongodb-headless"
            - name: MONGODB_INITIAL_PRIMARY_HOST
              value: ilum-mongodb-0.$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local
            - name: MONGODB_REPLICA_SET_NAME
              value: "rs0"
            - name: MONGODB_ADVERTISED_HOSTNAME
              value: "$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            
      volumes:
        - name: common-scripts
          configMap:
            name: ilum-mongodb-common-scripts
            defaultMode: 0550
        - name: scripts
          configMap:
            name: ilum-mongodb-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: ilum/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.4
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.4.4
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "ilum"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "ilum" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "ilum" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: ilum/templates/postgres/postgres-create-databases.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ilum-create-extra-postgres-databases
spec:
  template:
    spec:
      initContainers:
        - name: wait-for-db
          image: bitnami/postgresql:16
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
          args:
            - -ec
            - until pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}; do echo waiting for database; sleep 2; done;
          env:
            - name: POSTGRES_HOST
              value: "ilum-postgresql-0.ilum-postgresql-hl"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: "ilum"
      containers:
        - name: postgres-databases-creator
          image: bitnami/postgresql:16
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Creating marquez database in postgres..."
              createdb -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} marquez
              echo "Creating airflow database in postgres..."
              createdb -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} airflow
              echo "Creating metastore database in postgres..."
              createdb -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} metastore
          env:
            - name: POSTGRES_HOST
              value: "ilum-postgresql-0.ilum-postgresql-hl"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: "ilum"
            - name: PGPASSWORD
              value: "CHANGEMEPLEASE"
      restartPolicy: Never
  backoffLimit: 8
