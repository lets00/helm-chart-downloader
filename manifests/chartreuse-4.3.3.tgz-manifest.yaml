---
# Source: chartreuse/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: chartreuse/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-chartreuse
  labels:
    app: chartreuse
    chart: chartreuse-4.3.3
    release: my-release
    heritage: Helm
type: Opaque
stringData:

  CHARTREUSE_ALEMBIC_URL: postgresql://my-dummy-username:my-dummy-password@my-release-postgresql:5432/my-dummy-database?sslmode=prefer
---
# Source: chartreuse/templates/confimap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
data:
  # Note: Chartreuse expects false values to be empty string (falsy value) and true values to be non-empty string.
  CHARTREUSE_ALEMBIC_ALLOW_MIGRATION_FOR_EMPTY_DATABASE: "1"
  HELM_IS_INSTALL: "1"
  CHARTREUSE_ENABLE_STOP_PODS: "1"
  CHARTREUSE_UPGRADE_BEFORE_DEPLOYMENT: ""

  CHARTREUSE_ALEMBIC_DIRECTORY_PATH: /app/alembic
  CHARTREUSE_ALEMBIC_CONFIG_FILE_PATH: alembic.ini

  CHARTREUSE_MIGRATE_CONTAINER_IMAGE: "overrideme:latest"
  CHARTREUSE_MIGRATE_IMAGE_PULL_SECRET: ""
  CHARTREUSE_RELEASE_NAME: my-release
  CHARTREUSE_ALEMBIC_ADDITIONAL_PARAMETERS: ""

  CHARTREUSE_UPGRADE_PRIORITYCLASS_NAME: ""

  HELM_CHART_VERSION: 4.3.3
---
# Source: chartreuse/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["replicationcontrollers/scale"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["list", "patch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "update", "create", "delete"]
  - apiGroups: ["extensions"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "list", "update", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "list", "update", "patch"]
  - apiGroups: ["extensions"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list"]
  - apiGroups: ["wiremind.io"]
    resources: ["expecteddeploymentscales"]
    verbs: ["get", "list"]
---
# Source: chartreuse/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-chartreuse
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-chartreuse
subjects:
  - kind: ServiceAccount
    name: my-release-chartreuse
    namespace: default
---
# Source: chartreuse/templates/serviceaccount-ephemeral.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
---
# Source: chartreuse/templates/secret-ephemeral.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app: chartreuse
    chart: chartreuse-4.3.3
    release: my-release
    heritage: Helm
  annotations:
    
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
type: Opaque
stringData:

  CHARTREUSE_ALEMBIC_URL: postgresql://my-dummy-username:my-dummy-password@my-release-postgresql:5432/my-dummy-database?sslmode=prefer
---
# Source: chartreuse/templates/confimap-ephemeral.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
data:
  # Note: Chartreuse expects false values to be empty string (falsy value) and true values to be non-empty string.
  CHARTREUSE_ALEMBIC_ALLOW_MIGRATION_FOR_EMPTY_DATABASE: "1"
  HELM_IS_INSTALL: "1"
  CHARTREUSE_ENABLE_STOP_PODS: "1"
  CHARTREUSE_UPGRADE_BEFORE_DEPLOYMENT: ""

  CHARTREUSE_ALEMBIC_DIRECTORY_PATH: /app/alembic
  CHARTREUSE_ALEMBIC_CONFIG_FILE_PATH: alembic.ini

  CHARTREUSE_MIGRATE_CONTAINER_IMAGE: "overrideme:latest"
  CHARTREUSE_MIGRATE_IMAGE_PULL_SECRET: ""
  CHARTREUSE_RELEASE_NAME: my-release
  CHARTREUSE_ALEMBIC_ADDITIONAL_PARAMETERS: ""

  CHARTREUSE_UPGRADE_PRIORITYCLASS_NAME: ""

  HELM_CHART_VERSION: 4.3.3
---
# Source: chartreuse/templates/role-ephemeral.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
rules:
  - apiGroups: [""]
    resources: ["replicationcontrollers/scale"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["list", "patch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "update", "create", "delete"]
  - apiGroups: ["extensions"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "list", "update", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments/scale", "replicasets/scale"]
    verbs: ["get", "list", "update", "patch"]
  - apiGroups: ["extensions"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list"]
  - apiGroups: ["wiremind.io"]
    resources: ["expecteddeploymentscales"]
    verbs: ["get", "list"]
---
# Source: chartreuse/templates/role-ephemeral.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded,hook-failed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-chartreuse-ephemeral
subjects:
  - kind: ServiceAccount
    name: my-release-chartreuse-ephemeral
    namespace: default
---
# Source: chartreuse/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-chartreuse-ephemeral
  labels:
    app.kubernetes.io/name: chartreuse
    helm.sh/chart: chartreuse-4.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.3.3"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "chartreuse-upgrade"
  annotations:
    
    # Should be run in post-install,post-upgrade wherever it is install or upgrade.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 1800
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chartreuse
        helm.sh/chart: chartreuse-4.3.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "4.3.3"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: chartreuse-upgrade-ephemeral
        my-release-postgresql-client: "true"
    spec:
      restartPolicy: "Never"
      imagePullSecrets:
        - name: 
      initContainers:
        - name: postgresql-wait
          image: bitnami/postgresql:latest
          imagePullPolicy: IfNotPresent
          command:
            - sh
          args:
            - -c
            - |
              until pg_isready "--dbname=$CHARTREUSE_ALEMBIC_URL"; do
                echo "Waiting for Postgresql to be ready...";
                sleep 1;
              done;
          envFrom:
          - secretRef:
              name: my-release-chartreuse-ephemeral
          - configMapRef:
              name: my-release-chartreuse-ephemeral
      containers:
        - name: chartreuse
          image: "overrideme:latest"
          imagePullPolicy: IfNotPresent
          command:
            - "chartreuse-upgrade"
          envFrom:
          - secretRef:
              name: my-release-chartreuse-ephemeral
          - configMapRef:
              name: my-release-chartreuse-ephemeral
          env:
      serviceAccountName: my-release-chartreuse-ephemeral
      terminationGracePeriodSeconds: 0
