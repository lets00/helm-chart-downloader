---
# Source: dora/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dora
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: default
---
# Source: dora/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.9.0
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: dora/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-extended-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.9.0
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    max_connections = 1024
---
# Source: dora/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dora-ranges
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ranges.yaml: |
    0-1: test
---
# Source: dora/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dora-config
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    logging:
      outputLevel: "info"
      #outputStderr: false
    
      #filePath: "explorer.log"
      #fileLevel: "warn"
    
    # Chain network configuration
    chain:
      # use built in config by name ("mainnet", "prater", "sepolia")
      name: "mainnet"
      configPath: ""
      displayName: "mainnet"
    
    # HTTP Server configuration
    server:
      host: "0.0.0.0" # Address to listen on
      port: "8080" # Port to listen on
    
    frontend:
      enabled: true # Enable or disable to web frontend
      debug: false
      minimize: false # minimize html templates
    
      # Name of the site, displayed in the title tag
      siteName: "Dora the Explorer"
      siteSubtitle: "mainnet"
    
      # link to EL Explorer
      ethExplorerLink: ""
    
      # file or inventory url to load validator names from
      validatorNamesYaml: "/data/ranges.yaml"
      validatorNamesInventory: ""
    
    rateLimit:
      enabled: true
      proxyCount: 1
      rate: 2
      burst: 10
    
    beaconapi:
      # CL Client RPC
      endpoints:
        - url: "http://beacon-node:5052"
          name: "default-endpoint"
          priority: 1
          headers:
            "X-Test": "test"
            "Y-Test": "test2"
    
      # local cache for page models
      localCacheSize: 100 # 100MB
    
      # remote cache for page models
      redisCacheAddr: ""
      redisCachePrefix: ""
    
    # indexer keeps track of the latest epochs in memory.
    indexer:
      # max number of epochs to keep in memory
      inMemoryEpochs: 6
    
      # disable synchronizing and everything that writes to the db (indexer just maintains local cache)
      disableIndexWriter: false
    
      # number of seconds to wait between each epoch (don't overload CL client)
      syncEpochCooldown: 2
    
    database:
      engine: "pgsql"
      pgsql:
        host: "my-release-postgresql"
        port: 5432
        user: "postgres"
        password: "postgres"
        name: "dora"
---
# Source: dora/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.9.0
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dora/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.9.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dora/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dora
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
---
# Source: dora/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dora
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dora
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dora
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/config: 15468a6c1f014ae6fac96f7db5a7b1f3a0e17289541cba4cd86d8cf8823b1b07
    spec:
      serviceAccountName: my-release-dora
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
      containers:
        - name: dora
          image: "ethpandaops/dora:master"
          imagePullPolicy: Always
          command:
              - ./dora-explorer
              - -config
              - /data/config.yaml
          securityContext:
            {}
          volumeMounts:
            - name: config
              mountPath: "/data/config.yaml"
              subPath: config.yaml
              readOnly: true
            - name: ranges
              mountPath: "/data/ranges.yaml"
              subPath: ranges.yaml
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 120
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: http
          resources:
            {}
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      topologySpreadConstraints:
        []
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: my-release-dora-config
        - name: ranges
          configMap: 
            name: my-release-dora-ranges
---
# Source: dora/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.9.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.9.0
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: fd18c85829958181cad9f64e7138083fdb14bc37799ad2071e85662b7ff3ccf7
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "dora"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=dora" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=dora" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: my-release-postgresql-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dora/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-dora-test-connection"
  labels:
    helm.sh/chart: dora-0.0.4
    app.kubernetes.io/name: dora
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-dora:8080']
  restartPolicy: Never
