---
# Source: enav/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enav-admin
  labels:
    helm.sh/chart: enav-0.0.1
    app.kubernetes.io/name: enav
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: enav/charts/api-gateway/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: api-gateway-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/aton-admin-service/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: aton-admin-service-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/aton-service-client/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ton-service-client-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/aton-service/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: aton-service-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/ckeeper/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: ckeeper-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/eureka/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eureka-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  config_encryption_key: "encryption_key"
  config_repo_username: "git_user"
  config_repo_password: "git_password"
  keystore:  ""
  truststore:  ""
  config_repo_username: "git_user"
---
# Source: enav/charts/msg-broker/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: msg-broker-secrets
type: Opaque
data:
  config_username: "enav_config_user"
  config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/vdes-controller/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: vdes-controller-secrets
type: Opaque
data:
  enav_cloud_config_username: "enav_config_user"
  enav_cloud_config_password: "enav_config_password"
  keystore:  ""
  truststore:  ""
---
# Source: enav/charts/api-gateway/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/aton-admin-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aton-admin-service-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/aton-service-client/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aton-service-client-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/aton-service/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: aton-service-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/ckeeper/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ckeeper-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/eureka/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: eureka-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
  config_repo_url: "https://git.com/gla-rad/eNav-Config.git"
  config_repo_branch: "master"
---
# Source: enav/charts/kafka-broker/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-broker-config
data:
  broker_id: "1"
  zookeeper_url: "zookeeper.enav-service-architecture:2181"
  advertised_listeners:  "PLAINTEXT://kafka-broker.enav:9092,PLAINTEXT_HOST://localhost:19092"
  listener_security_protocol_map:  "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
  inter_broker_listener_name:  "PLANTEXT"
  offsets_topic_replication_factor:  "1"
  message_max_bytes:  "10485760"
  max_request_size:  "10485760"
---
# Source: enav/charts/msg-broker/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: msg-broker-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/vdes-controller/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vdes-controller-config
data:
  config_endpoint: "http://enav-eureka.enav.svc.k8s:8761/config/"
  config_branch: "master"
---
# Source: enav/charts/zookeeper/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
data:
  client_port: "2181"
  tick_time: "2000"
---
# Source: enav/charts/api-gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-api-gateway
  labels:
    helm.sh/chart: api-gateway-0.0.1
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8760
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/aton-admin-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-aton-admin-service
  labels:
    helm.sh/chart: aton-admin-service-0.0.1
    app.kubernetes.io/name: aton-admin-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8769
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: aton-admin-service
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/aton-service-client/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-aton-service-client
  labels:
    helm.sh/chart: aton-service-client-0.0.1
    app.kubernetes.io/name: aton-service-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8768
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: aton-service-client
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/aton-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-aton-service
  labels:
    helm.sh/chart: aton-service-0.0.1
    app.kubernetes.io/name: aton-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8766
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: aton-service
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/ckeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ckeeper
  labels:
    helm.sh/chart: ckeeper-0.1.0
    app.kubernetes.io/name: ckeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8764
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ckeeper
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/eureka/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-eureka
  labels:
    helm.sh/chart: eureka-0.0.1
    app.kubernetes.io/name: eureka
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8761
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: eureka
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/kafka-broker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kafka-broker
  labels:
    helm.sh/chart: kafka-broker-0.1.0
    app.kubernetes.io/name: kafka-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9092
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kafka-broker
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/msg-broker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-msg-broker
  labels:
    helm.sh/chart: msg-broker-0.0.1
    app.kubernetes.io/name: msg-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8763
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: msg-broker
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/vdes-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-vdes-controller
  labels:
    helm.sh/chart: vdes-controller-0.0.1
    app.kubernetes.io/name: vdes-controller
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8762
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vdes-controller
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-zookeeper
  labels:
    helm.sh/chart: zookeeper-0.0.1
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 2181
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
---
# Source: enav/charts/api-gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-api-gateway
  labels:
    helm.sh/chart: api-gateway-0.0.1
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: api-gateway-0.0.1
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: api-gateway
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-api-gateway:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8760
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: api-gateway-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: api-gateway-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/aton-admin-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-aton-admin-service
  labels:
    helm.sh/chart: aton-admin-service-0.0.1
    app.kubernetes.io/name: aton-admin-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aton-admin-service
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: aton-admin-service-0.0.1
        app.kubernetes.io/name: aton-admin-service
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: aton-admin-service
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-aton-admin-service:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8769
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /var/s-100
              name: s100-exchange-set-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - emptyDir: {}
          name: s100-exchange-set-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: aton-admin-service-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: aton-admin-service-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/aton-service-client/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-aton-service-client
  labels:
    helm.sh/chart: aton-service-client-0.0.1
    app.kubernetes.io/name: aton-service-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aton-service-client
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: aton-service-client-0.0.1
        app.kubernetes.io/name: aton-service-client
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: aton-service-client
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-aton-service-client:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8768
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: aton-service-client-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: aton-service-client-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/aton-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-aton-service
  labels:
    helm.sh/chart: aton-service-0.0.1
    app.kubernetes.io/name: aton-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aton-service
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: aton-service-0.0.1
        app.kubernetes.io/name: aton-service
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: aton-service
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-aton-service:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8766
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /var/s-100
              name: s100-exchange-set-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - emptyDir: {}
          name: s100-exchange-set-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: aton-service-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: aton-service-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/ckeeper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ckeeper
  labels:
    helm.sh/chart: ckeeper-0.1.0
    app.kubernetes.io/name: ckeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ckeeper
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: ckeeper-0.1.0
        app.kubernetes.io/name: ckeeper
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: ckeeper
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-ckeeper:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8764
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: ckeeper-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: ckeeper-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/eureka/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-eureka
  labels:
    helm.sh/chart: eureka-0.0.1
    app.kubernetes.io/name: eureka
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: eureka
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: eureka-0.0.1
        app.kubernetes.io/name: eureka
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      containers:
        - name: eureka
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-eureka:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8761
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: eureka-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: eureka-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/kafka-broker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kafka-broker
  labels:
    helm.sh/chart: kafka-broker-0.1.0
    app.kubernetes.io/name: kafka-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka-broker
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: kafka-broker-0.1.0
        app.kubernetes.io/name: kafka-broker
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      containers:
        - name: kafka-broker
          securityContext:
            {}
          image: "confluentinc/cp-kafka:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9092
              protocol: TCP
          livenessProbe:
            {}
          readinessProbe:
            {}
          resources:
            {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/msg-broker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-msg-broker
  labels:
    helm.sh/chart: msg-broker-0.0.1
    app.kubernetes.io/name: msg-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: msg-broker
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: msg-broker-0.0.1
        app.kubernetes.io/name: msg-broker
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: msg-broker
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-msg-broker:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8763
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - emptyDir: {}
          name: s100-exchange-set-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: msg-broker-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: msg-broker-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/vdes-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-vdes-controller
  labels:
    helm.sh/chart: vdes-controller-0.0.1
    app.kubernetes.io/name: vdes-controller
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vdes-controller
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: vdes-controller-0.0.1
        app.kubernetes.io/name: vdes-controller
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      initContainers:
        - name: wait-for-eureka-before-starup
          image: busybox
          command:  ["sh", "-c", "until nc -z my-release-eureka.default 8761 > /dev/null; do echo Waiting for my-release-eureka.; sleep 2; done;"]
      containers:
        - name: vdes-controller
          securityContext:
            {}
          image: "ghcr.io/gla-rad/enav-vdes-controller:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8762
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
          resources:
            {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/log
              name: log-volume
            - mountPath: /ssl
              name: ssl-volume
              readOnly: true
      volumes:
        - emptyDir: {}
          name: tmp-volume
        - emptyDir: {}
          name: log-volume
        - name: ssl-volume
          projected:
            sources:
            - secret:
                items:
                - key: keystore
                  path: keystore.jks
                name: vdes-controller-secrets
            - secret:
                items:
                - key: truststore
                  path: truststore.jks
                name: vdes-controller-secrets
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/charts/zookeeper/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-zookeeper
  labels:
    helm.sh/chart: zookeeper-0.0.1
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: zookeeper-0.0.1
        app.kubernetes.io/name: zookeeper
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: enav-admin
      securityContext:
        {}
      containers:
        - name: zookeeper
          securityContext:
            {}
          image: "confluentinc/cp-zookeeper:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 2181
              protocol: TCP
          livenessProbe:
            {}
          readinessProbe:
            {}
          resources:
            {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: enav/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-enav
  labels:
    helm.sh/chart: enav-0.0.1
    app.kubernetes.io/name: enav
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: /enav
spec:
  ingressClassName: nginx
  rules:
    - host: "enav.authority.org"
      http:
        paths:
          - path: /enav/(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-enav-api-gateway
                port:
                  number: 8760
---
# Source: enav/charts/api-gateway/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-api-gateway-test-connection"
  labels:
    helm.sh/chart: api-gateway-0.0.1
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-api-gateway:8760']
  restartPolicy: Never
---
# Source: enav/charts/aton-admin-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-aton-admin-service-test-connection"
  labels:
    helm.sh/chart: aton-admin-service-0.0.1
    app.kubernetes.io/name: aton-admin-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-aton-admin-service:8769']
  restartPolicy: Never
---
# Source: enav/charts/aton-service-client/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-aton-service-client-test-connection"
  labels:
    helm.sh/chart: aton-service-client-0.0.1
    app.kubernetes.io/name: aton-service-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-aton-service-client:8768']
  restartPolicy: Never
---
# Source: enav/charts/aton-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-aton-service-test-connection"
  labels:
    helm.sh/chart: aton-service-0.0.1
    app.kubernetes.io/name: aton-service
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-aton-service:8766']
  restartPolicy: Never
---
# Source: enav/charts/ckeeper/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-ckeeper-test-connection"
  labels:
    helm.sh/chart: ckeeper-0.1.0
    app.kubernetes.io/name: ckeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-ckeeper:8764']
  restartPolicy: Never
---
# Source: enav/charts/eureka/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-eureka-test-connection"
  labels:
    helm.sh/chart: eureka-0.0.1
    app.kubernetes.io/name: eureka
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-eureka:8761']
  restartPolicy: Never
---
# Source: enav/charts/kafka-broker/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-kafka-broker-test-connection"
  labels:
    helm.sh/chart: kafka-broker-0.1.0
    app.kubernetes.io/name: kafka-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-kafka-broker:9092']
  restartPolicy: Never
---
# Source: enav/charts/msg-broker/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-msg-broker-test-connection"
  labels:
    helm.sh/chart: msg-broker-0.0.1
    app.kubernetes.io/name: msg-broker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-msg-broker:8763']
  restartPolicy: Never
---
# Source: enav/charts/vdes-controller/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-vdes-controller-test-connection"
  labels:
    helm.sh/chart: vdes-controller-0.0.1
    app.kubernetes.io/name: vdes-controller
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-vdes-controller:8762']
  restartPolicy: Never
---
# Source: enav/charts/zookeeper/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-zookeeper-test-connection"
  labels:
    helm.sh/chart: zookeeper-0.0.1
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-zookeeper:2181']
  restartPolicy: Never
