---
# Source: apicurio/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "WnJPdW5DM2hHNQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: apicurio/templates/apicurio-studio-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-api
  namespace: default
type: Opaque
data:
  APICURIO_DB_PASSWORD: dlNYNVJJTEhCaw==
  APICURIO_KC_CLIENT_SECRET: YXBpY3VyaW9rYw==
  APICURIO_MICROCKS_CLIENT_SECRET: YXBpY3VyaW9tcg==
  # Extras
---
# Source: apicurio/templates/apicurio-studio-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-ui
  namespace: default
type: Opaque
data:
  APICURIO_KC_CLIENT_SECRET: YXBpY3VyaW9rYw==
  APICURIO_MICROCKS_CLIENT_SECRET: YXBpY3VyaW9tcg==
  # Extras
---
# Source: apicurio/templates/apicurio-studio-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-ws
  namespace: default
type: Opaque
data:
  APICURIO_DB_PASSWORD: dlNYNVJJTEhCaw==
  # Extras
---
# Source: apicurio/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: apicurio/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: apicurio/templates/apicurio-studio-services.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-api
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 8080
      targetPort: 8080
  selector:
    org.apicurio.instance: my-release-api
---
# Source: apicurio/templates/apicurio-studio-services.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ui
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: ui
      port: 8080
      targetPort: 8080
  selector:
    org.apicurio.instance: my-release-ui
---
# Source: apicurio/templates/apicurio-studio-services.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ws
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: ws
      port: 8080
      targetPort: 8080
  selector:
    org.apicurio.instance: my-release-ws
---
# Source: apicurio/templates/apicurio-studio-api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-api
  namespace: default
  labels:
    org.apicurio.instance: my-release-api
spec:
  replicas: 1
  selector:
    matchLabels:
      org.apicurio.instance: my-release-api
  template:
    metadata:
      labels:
        org.apicurio.instance: my-release-api
      annotations:
        # Force a pod restart if secret values change
        checksum/secrets: f56f39f2aeb2399ef993699d8e201be8b19d213844744a31d0d6079e6ed491bd
    spec:
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      restartPolicy: Always

      initContainers:
        # Wait for db
        - name: wait-db
          image: jwilder/dockerize
          imagePullPolicy: IfNotPresent
          args:
            - -timeout=300s
            - -wait=tcp://my-release-postgresql:5432

      containers:
        - name: api
          image: "apicurio/apicurio-studio-api:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          env:
            # DB settings
            - name: APICURIO_DB_CONNECTION_URL
              value: "jdbc:postgresql://my-release-postgresql:5432/apicuriodb"
            - name: APICURIO_DB_DRIVER_NAME
              value: "postgresql"
            - name: APICURIO_DB_INITIALIZE
              value: "true"
            - name: APICURIO_DB_TYPE
              value: "postgresql9"
            - name: APICURIO_DB_USER_NAME
              value: "apicuriodb"

            # Microcks settings
            - name: APICURIO_MICROCKS_API_URL
              value: "http://www.example.com/api"
            - name: APICURIO_MICROCKS_CLIENT_ID
              value: "microcks-serviceaccount"

            # Keycloak settings
            - name: APICURIO_KC_AUTH_URL
              value: "https://www.example.com/auth"
            - name: APICURIO_KC_REALM
              value: "Apicurio"
            - name: APICURIO_KC_CLIENT_ID
              value: "apicurio-studio"

            # Others
            - name: APICURIO_SHARE_FOR_EVERYONE
              value: "true"
            - name: APICURIO_LOGGING_LEVEL
              value: |-
                INFO
            - name: JAVA_TOOL_OPTIONS
              value: |-
                -Djava.net.preferIPv4Stack=true

          envFrom:
            - secretRef:
                name: my-release-api

          ports:
            - containerPort: 8080

          readinessProbe:
            httpGet:
              path: "/system/ready"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
          livenessProbe:
            httpGet:
              path: "/system/ready"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
---
# Source: apicurio/templates/apicurio-studio-ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ui
  namespace: default
  labels:
    org.apicurio.instance: my-release-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      org.apicurio.instance: my-release-ui
  template:
    metadata:
      labels:
        org.apicurio.instance: my-release-ui
      annotations:
        # Force a pod restart if secret values change
        checksum/secrets: 0ab06f831b1902348a18d20db9cb4d0eebebc004ac624acd824abf611c0f0ffc
    spec:
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      restartPolicy: Always
      containers:
        - name: api
          image: "apicurio/apicurio-studio-ui:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          env:
            # UI Settings
            - name: APICURIO_UI_FEATURE_SHARE_WITH_EVERYONE
              value: "true"
            - name: APICURIO_UI_HUB_API_URL
              value: https://www.example.com/studio-api
            - name: APICURIO_UI_EDITING_URL
              value: wss://www.example.com/ws

            # Microcks settings
            - name: APICURIO_MICROCKS_API_URL
              value: "http://www.example.com/api"
            - name: APICURIO_MICROCKS_CLIENT_ID
              value: "microcks-serviceaccount"

            # Keycloak settings
            - name: APICURIO_KC_AUTH_URL
              value: "https://www.example.com/auth"
            - name: APICURIO_KC_REALM
              value: "Apicurio"
            - name: APICURIO_KC_CLIENT_ID
              value: "apicurio-studio"
            - name: APICURIO_LOGGING_LEVEL
              value: |-
                INFO
            - name: APICURIO_UI_FEATURE_MICROCKS
              value: |-
                false
            - name: APICURIO_UI_VALIDATION_CHANNELNAME_REGEXP
              value: |-
                ([^{}\/]*(\{[a-zA-Z_][0-9a-zA-Z_]*\})?)+
            - name: JAVA_TOOL_OPTIONS
              value: |-
                -Djava.net.preferIPv4Stack=true

          envFrom:
            - secretRef:
                name: my-release-ui

          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: "/ready"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
          livenessProbe:
            httpGet:
              path: "/ready"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
---
# Source: apicurio/templates/apicurio-studio-ws-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ws
  namespace: default
  labels:
    org.apicurio.instance: my-release-ws
spec:
  replicas: 1
  selector:
    matchLabels:
      org.apicurio.instance: my-release-ws
  template:
    metadata:
      labels:
        org.apicurio.instance: my-release-ws
      annotations:
        # Force a pod restart if secret values change
        checksum/secrets: 56a3badf145f9f589e305c2587ef0fea3e3ac71511a8bc79bc4be2461a6c7d10
    spec:
      securityContext:
        runAsGroup: 1000
        runAsUser: 1000
      restartPolicy: Always

      initContainers:
        # Wait for db
        - name: wait-db
          image: jwilder/dockerize
          imagePullPolicy: IfNotPresent
          args:
            - -wait
            - tcp://my-release-postgresql:5432
            - -timeout
            - 300s

      containers:
        - name: api
          image: "apicurio/apicurio-studio-ws:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          env:
            # DB settings
            - name: APICURIO_DB_CONNECTION_URL
              value: "jdbc:postgresql://my-release-postgresql:5432/apicuriodb"
            - name: APICURIO_DB_DRIVER_NAME
              value: "postgresql"
            - name: APICURIO_DB_INITIALIZE
              value: "true"
            - name: APICURIO_DB_TYPE
              value: "postgresql9"
            - name: APICURIO_DB_USER_NAME
              value: "apicuriodb"

            # Others
            - name: APICURIO_SHARE_FOR_EVERYONE
              value: "true"
            - name: APICURIO_LOGGING_LEVEL
              value: |-
                INFO
            - name: JAVA_TOOL_OPTIONS
              value: |-
                -Djava.net.preferIPv4Stack=true

          envFrom:
            - secretRef:
                name: my-release-ws

          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: "/metrics"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
          livenessProbe:
            httpGet:
              path: "/metrics"
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 15
---
# Source: apicurio/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.26
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: apicurio/templates/tests/test-connections.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-test-apicurio-connections
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    # TODO: find better API-level tests...
    - image: jwilder/dockerize
      imagePullPolicy: IfNotPresent
      name: test-connections
      args:
        - -timeout=5m
        # Postgres
        - -wait=tcp://my-release-postgresql:5432
        # API
        - -wait=http://my-release-api:8080/system/ready
        # UI
        - -wait=http://my-release-ui:8080/ready
        # WS
        - -wait=http://my-release-ws:8080/metrics
  restartPolicy: Never
