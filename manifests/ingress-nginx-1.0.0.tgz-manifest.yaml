---
# Source: ingress-nginx/templates/sa-ingress-nginx.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default-ingress-nginx
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
---
# Source: ingress-nginx/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tls
type: kubernetes.io/tls
data:
  tls.key: Ci0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURKSWRHNG1LcXZ6VEV2Ckl0eDdWdzhIc1M0YTVlR2VmRW0vWWg0Y1BhVDgvQjJ1dlU0Tkptc2xQMTNlcTRYeDJlQUdUbE5uREo2b2lCNksKVS80WitCV1lPQU0rN3d1eEFqWmp1VVl4azFXclc2NTR3c0J6M3pMQVJQMW1vVHBKNDFuRmFqM2hIRGRKa3l4Ngpla2dETnFtRGNiSFlHRUFpVm5Edm0vU013aTB6OFFiYzF1SnFFNDJoNnUvcVl2eEE3TTB0dmNVeDk1MmR5TnNBClhxaFg4SzVSOU5ZT3VISHdNdkxJQVp5cDRJTDBXM0pPeW8wbmFrRjhHbzVoVGEwUDBIL1JGY3JjdkthVE5TWnYKY0w3RHZYM2tPR0IyQStsMzZBajZvblRzWkEwZHJqbG5wUzZ5TnVZaUhOeDBvRnhZOEJTaUJHbFpqekk2SGw1Zwp6eWFmamdNTkFnTUJBQUVDZ2dFQVdic2l5MDRnNkNtTkJkQnh1UDBRRVloMFh6K3J0bjhRajdlQVkyMEZESENWCjlYMHpNeDZ1c29GZ3FaU3dQMFBLZEVYQlk3bjNsb3lUdzNiUmFGaUxtY3R6ZDBKQ1h3ZnpwKzNpYVArb09yaSsKVDlYaThrN2pYMi9uOVQ5OHQ3WWNPTHk3T3BEU0Fac05QdDhLL1pRSGNFTHE2dE4yMlZyaks2TFNLWEgvcEtuWgpsS0NySGNRMzhJSnJ2c2hIRGo1VFZzZDNLdW03L1ZTSVMwc0lBUndWZ2FZT1IrZ1lKa0liQ0Nib3ZtVTVjUjZtCnBtNTNzRlJGVUt3bWRaOFJoQ2dQOW1ZdmpTZmdQcm1ya1F6bWo3Z005TG9BQmd5N1l5NnpQSVVYUDhML3hQOEEKQlB6MmprTFB5QjNOOC9DM2ZycDdURnlkano2WEtYY3JYRTczOVVMRWdRS0JnUUQ4MHRSQTIrMG9QNldjOGdJNQp2eWN5VmNDUXpiZUlqZlE0dC9KRDVpZUZNdkxuNmN4Z255NW5pVVRtcXZYNytjdnU4TnZkbjNaUE1aNW1xcDlCCk9lbnZHZU8xWkF4TG1RR1kxYnJqbEJUcVdsTTlKYjhKc3RYaDVEekMxNTdsUjNVZnVyWjdER2Y5Y2YvVGFHcGcKSXVRWGpHLzdaZ3NQM3JhMkpicWNqMDNwVVFLQmdRRExxTHRoRXdQbXFpSjVYTURoc0xWQXVGYTl2NGVYVm5lZAp5TE5qMUpFd1NTQmRvOWVHdGMrOFQxYXA3N3ZsU3Q0Sld1a2RzRXkzRTVMZ0JoQ2RreXNOTTFWRHk0WHBzTUpTClRPSXVYRFBKV0RUcDRDTDFsdjliOWg3cWxVallpNE11c0hxSTVEbUFOTnFZcE5XNnl3MVJ1akF4MFhBQ2prWFYKMWM3L3ZRd08vUUtCZ1FETU0yaldIZ3YxMXpwbmdoeUVFYjJSN1NzRWlmTjBLdHVYdUJMSC9xdnE3SlMrOWRwcQpMQWVwL25nVkt2NVZENVJFb0d1bEhEZk5qUkVZY1RVQjFNbjZvZG1HVjVHS3VjRk5kVXRtcHVNaHllU3pYYnBvCkZmYWtaZGtoc2xBWGRkakcwT0swamZlc0FCaVY0eDhRR1A1TGV0V3pvdDdLYWFML2lZZXBEaUhxa1FLQmdEd0UKNUFQOXlKNkg4VlQyNHRrZ2JLcEFLVUFPVy9WYnhEQzUzelJDaHU5Ri9jWGE3VCtFQVU2cnl3eVYzRGY4MG1iTApaZndiNHQvcFl0V21zK3JjWGttcm9Tc3pwYWx6TURGMCt3dFNuT2h2bUZoOGQ1RU5DUUNmRGdsd0tXRzM2OWNzCnAxQUVnbldvSGV2eVdCS09tTVJITE1EaHlqTFdudm9mNHJzM2lZQTVBb0dCQUlhd3FWKzRQclVhZFBhMHMzNDMKM29tYk5kODlzZ1Y2YnBES05IWWtDTnNmVXdSeFl5a0ozMlplb0FMUjBDOHpWOUxrZFlsd2FvWVJDOU9YUWM5LwozVjg4eVpmSHNPNVBGQWZ6Qmc0TGRhZFdoSSs5Vjg0eGRtWTU1VG5xNzNwaGVPYmpPWGxqaENoZlM5aUg4ZGtQClhaNU9WS3hFWWFJenJxSWNibVVEaEx3NAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t
  tls.crt: Ci0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlERHpDQ0FmZWdBd0lCQWdJSkFOZ09uSGU1WCtsZU1BMEdDU3FHU0liM0RRRUJDd1VBTUI0eERUQUxCZ05WCkJBTU1CRzV0WVdFeERUQUxCZ05WQkFvTUJHNXRZV0V3SGhjTk1qUXdOREkxTURJMU1UVXhXaGNOTXpRd05ESXoKTURJMU1UVXhXakFlTVEwd0N3WURWUVFEREFSdWJXRmhNUTB3Q3dZRFZRUUtEQVJ1YldGaE1JSUJJakFOQmdrcQpoa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXlTSFJ1SmlxcjgweEx5TGNlMWNQQjdFdUd1WGhubnhKCnYySWVIRDJrL1B3ZHJyMU9EU1pySlQ5ZDNxdUY4ZG5nQms1VFp3eWVxSWdlaWxQK0dmZ1ZtRGdEUHU4THNRSTIKWTdsR01aTlZxMXV1ZU1MQWM5OHl3RVQ5WnFFNlNlTlp4V285NFJ3M1NaTXNlbnBJQXphcGczR3gyQmhBSWxadwo3NXYwak1JdE0vRUczTmJpYWhPTm9lcnY2bUw4UU96TkxiM0ZNZmVkbmNqYkFGNm9WL0N1VWZUV0RyaHg4REx5CnlBR2NxZUNDOUZ0eVRzcU5KMnBCZkJxT1lVMnREOUIvMFJYSzNMeW1relVtYjNDK3c3MTk1RGhnZGdQcGQrZ0kKK3FKMDdHUU5IYTQ1WjZVdXNqYm1JaHpjZEtCY1dQQVVvZ1JwV1k4eU9oNWVZTThtbjQ0RERRSURBUUFCbzFBdwpUakFkQmdOVkhRNEVGZ1FVKzF2WlVMOW0zU3p4VGZ6RmlyWFQwdkpycHRnd0h3WURWUjBqQkJnd0ZvQVUrMXZaClVMOW0zU3p4VGZ6RmlyWFQwdkpycHRnd0RBWURWUjBUQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQU5CenM4S2FwKzRvbmNqdDJhdXBhYm4xUy9lcDJOSG1SbmhVQmthUFl1c21XeUtDRGYveXpaZ3o4MC81dQpCWXJZYXNCWkw4UWJydXFUcDlYUVQ4clhlNUJEYWhnWkNLQ0VYZ0huYXowTS9vajlrS2t5T3VoMnkrS0Y0VVY0CmhjbEpGQVhBSXQ0REFIb1ZmT1J0TFd1MWgxUDB3bitEaUVTSlQ0cG8zRlNEYmpvanNSdDVJV0VTTC91TTVPaCsKcmJxaStXRGtmRTMzUG90U0gybVJ3T0tXS3dUNTgxYXAyUGdGMlVKYllFZXBmSWM0WVk0WXRHZm9wRXlNZFJ0RAp4MGt6LzZrOTZjMk1uRHEwQ0U4S1o1OXYzd3NlMk0wY0N6bkFHRGU3TFRCTGZqdXJVRUx0VlhHbFhVRlVBVXBZCmZZeXB3eDNKdWd4bDVkZW1jTVRxRDlmOHF3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
# Source: ingress-nginx/templates/cm-ingress-nginx.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: default-ingress-nginx
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
---
# Source: ingress-nginx/templates/cm-tcp-services.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
data:
---
# Source: ingress-nginx/templates/cm-udp-services.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: udp-services
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
data:
  162: "default/snmp-manager:162"
---
# Source: ingress-nginx/templates/clusterrole-ingress-nginx.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: default-ingress-nginx
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "nodes", "pods", "secrets", "namespaces"]
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: ["extensions","networking.k8s.io"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingressclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["list", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]
---
# Source: ingress-nginx/templates/clusterrolebinding-ingress-nginx.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-ingress-nginx
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: default-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: default-ingress-nginx
    namespace: default
---
# Source: ingress-nginx/templates/role-ingress-nginx.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: default-ingress-nginx
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps", "pods", "secrets", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingressclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    resourceNames: ["ingress-controller-leader-default"]
    verbs: ["get", "update", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]
---
# Source: ingress-nginx/templates/rolebinding-ingress-nginx.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-ingress-nginx
  namespace: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: default-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: default-ingress-nginx
    namespace: default
---
# Source: ingress-nginx/templates/ingress-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-backend
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  
  ports:
    
    - name: snmp-manager
      port: 162
      targetPort: 162
      protocol: UDP
---
# Source: ingress-nginx/templates/ingress-frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-frontend
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  
  ports:
    
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
---
# Source: ingress-nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-ingress-nginx-controller
  namespace: default
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      serviceAccountName: default-ingress-nginx
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/part-of: ingress-nginx
            topologyKey: app.kubernetes.io/hostname
      # Ingress-nginx-controller container
      containers:
      - name: ingress-nginx-controller
        image: registry.k8s.io/ingress-nginx/controller:v1.9.4
        imagePullPolicy: "IfNotPresent"
        securityContext:
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
          runAsUser: 101
          allowPrivilegeEscalation: true
        lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
        args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/ingress-nginx
          - --election-id=ingress-controller-leader-default
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --annotations-prefix=nginx.ingress.kubernetes.io
          - --ingress-class=default
          - --watch-namespace=default
          - --default-ssl-certificate=default/tls
          # - --watch-ingress-without-class=true
        ## ENV
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
        ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          - name: metrics
            containerPort: 10254
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
---
# Source: ingress-nginx/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: default
  labels:
    app.kubernetes.io/name: default-ingress-nginx
    app.kubernetes.io/part-of: default-ingress-nginx
spec:
  controller: k8s.io/ingress-nginx
