---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-emissary-ingress-agent
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
---
# Source: emissary-ingress/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-emissary-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
rules: []
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-pods
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: [""]
  resources: [ "pods"]
  verbs: [ "get", "list", "watch" ]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-deployments
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: ["apps", "extensions"]
  resources: [ "deployments" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-endpoints
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: [""]
  resources: [ "endpoints" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-configmaps
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: [""]
  resources: [ "configmaps" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-rollouts
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: ["argoproj.io"]
  resources: [ "rollouts", "rollouts/status" ]
  verbs: [ "get", "list", "watch", "patch" ]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-agent-applications
  labels:
    rbac.getambassador.io/role-group: my-release-emissary-ingress-agent
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: ["argoproj.io"]
  resources: [ "applications" ]
  verbs: [ "get", "list", "watch" ]
---
# Source: emissary-ingress/templates/rbac.yaml
######################################################################
# Aggregate                                                          #
######################################################################
# This ClusterRole has an empty `rules` and instead sets
# `aggregationRule` in order to aggregate several other ClusterRoles
# together, to avoid the need for multiple ClusterRoleBindings.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.getambassador.io/role-group: my-release-emissary-ingress
rules: []
---
# Source: emissary-ingress/templates/rbac.yaml
######################################################################
# No namespace                                                       #
######################################################################
# These ClusterRoles should be limited to resource types that are
# non-namespaced, and therefore cannot be put in a Role, even if
# Emissary is in single-namespace mode.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-crd
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
    rbac.getambassador.io/role-group: my-release-emissary-ingress
rules:
  - apiGroups: [ "apiextensions.k8s.io" ]
    resources: [ "customresourcedefinitions" ]
    verbs: ["get", "list", "watch", "delete"]
---
# Source: emissary-ingress/templates/rbac.yaml
######################################################################
# All namespaces                                                     #
######################################################################
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-emissary-ingress-watch
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
    rbac.getambassador.io/role-group: my-release-emissary-ingress
rules:
  - apiGroups: [""]
    resources:
    - namespaces
    - services
    - secrets
    - configmaps
    - endpoints
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "getambassador.io", "gateway.getambassador.io" ]
    resources: [ "*" ]
    verbs: ["get", "list", "watch", "update", "patch", "create", "delete" ]

  - apiGroups: [ "getambassador.io" ]
    resources: [ "mappings/status" ]
    verbs: ["update"]

  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "clusteringresses", "ingresses" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "networking.x-k8s.io" ]
    resources: [ "*" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "networking.internal.knative.dev" ]
    resources: [ "ingresses/status", "clusteringresses/status" ]
    verbs: ["update"]

  - apiGroups: [ "extensions", "networking.k8s.io" ]
    resources: [ "ingresses", "ingressclasses" ]
    verbs: ["get", "list", "watch"]

  - apiGroups: [ "extensions", "networking.k8s.io" ]
    resources: [ "ingresses/status" ]
    verbs: ["update"]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-emissary-ingress-agent
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-emissary-ingress-agent
subjects:
- kind: ServiceAccount
  name: my-release-emissary-ingress-agent
  namespace: default
---
# Source: emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-emissary-ingress
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-emissary-ingress
subjects:
  - name: my-release-emissary-ingress
    namespace: default
    kind: ServiceAccount
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-emissary-ingress-agent-config
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
rules:
- apiGroups: [""]
  resources: [ "configmaps" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [""]
  resources: [ "secrets"]
  verbs: [ "get", "list", "watch", "create", "delete", "patch" ]
---
# Source: emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-emissary-ingress-apiext
  namespace: emissary-system
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
    rbac.getambassador.io/role-group: my-release-emissary-ingress
rules:
  - apiGroups: ["apps"]
    resources:
    - deployments
    verbs: ["get", "list", "watch"]
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-emissary-ingress-agent-config
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-emissary-ingress-agent-config
subjects:
- kind: ServiceAccount
  name: my-release-emissary-ingress-agent
  namespace: default
---
# Source: emissary-ingress/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-emissary-ingress-apiext
  namespace: emissary-system
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-emissary-ingress-apiext
subjects:
  - name: my-release-emissary-ingress
    namespace: default
    kind: ServiceAccount
---
# Source: emissary-ingress/templates/admin-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-emissary-ingress-admin
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    # Hard-coded label for Prometheus Operator ServiceMonitor
    service: ambassador-admin
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack admin service for internal use and health checks."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: "None"
spec:
  type: ClusterIP
  ports:
    - port: 8877
      targetPort: admin
      protocol: TCP
      name: ambassador-admin
    - port: 8005
      targetPort: 8005
      protocol: TCP
      name: ambassador-snapshot
  selector:
    app.kubernetes.io/name: emissary-ingress
    app.kubernetes.io/instance: my-release
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-emissary-ingress-agent
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress-agent
    app.kubernetes.io/part-of: my-release
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
spec:
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-release-emissary-ingress-agent
    app.kubernetes.io/instance: my-release
---
# Source: emissary-ingress/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-emissary-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: ambassador-service
    product: aes
  annotations:
    a8r.io/owner: "Ambassador Labs"
    a8r.io/repository: github.com/datawire/ambassador
    a8r.io/description: "The Ambassador Edge Stack goes beyond traditional API Gateways and Ingress Controllers with the advanced edge features needed to support developer self-service and full-cycle development."
    a8r.io/documentation: https://www.getambassador.io/docs/edge-stack/latest/
    a8r.io/chat: http://a8r.io/Slack
    a8r.io/bugs: https://github.com/datawire/ambassador/issues
    a8r.io/support: https://www.getambassador.io/about-us/support/
    a8r.io/dependencies: my-release-emissary-ingress-redis.default
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
  selector:
    app.kubernetes.io/name: emissary-ingress
    app.kubernetes.io/instance: my-release
    profile: main
---
# Source: emissary-ingress/templates/ambassador-agent.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-emissary-ingress-agent
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-emissary-ingress-agent
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-emissary-ingress-agent
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-emissary-ingress-agent
        helm.sh/chart: emissary-ingress-8.9.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/part-of: my-release
        app.kubernetes.io/managed-by: Helm
        product: aes
    spec:
      serviceAccountName: my-release-emissary-ingress-agent
      containers:
      - name: agent
        image: "docker.io/ambassador/ambassador-agent:1.0.14"
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8080
            name: http
        env:
        - name: AGENT_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AGENT_CONFIG_RESOURCE_NAME
          value: my-release-emissary-ingress-agent-cloud-token
        - name: RPC_CONNECTION_ADDRESS
          value: https://app.getambassador.io/
        - name: AES_SNAPSHOT_URL
          value: "http://my-release-emissary-ingress-admin.default:8005/snapshot-external"
        - name: AES_REPORT_DIAGNOSTICS_TO_CLOUD
          value: "true"
        - name: AES_DIAGNOSTICS_URL
          value: "http://my-release-emissary-ingress-admin.default:8877/ambassador/v0/diag/?json=true"

  
  
  progressDeadlineSeconds: 600
---
# Source: emissary-ingress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-emissary-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    product: aes
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: emissary-ingress
      app.kubernetes.io/instance: my-release
  strategy:
    type: RollingUpdate
  
  
  progressDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: emissary-ingress
        helm.sh/chart: emissary-ingress-8.9.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/part-of: my-release
        app.kubernetes.io/managed-by: Helm
        product: aes
        profile: main
      annotations:
        checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      securityContext:
        runAsUser: 8888
      serviceAccountName: my-release-emissary-ingress
      volumes:
        - name: ambassador-pod-info
          downwardAPI:
            items:
              - fieldRef:
                  fieldPath: metadata.labels
                path: labels
      initContainers:
      - name: wait-for-apiext
        image: istio/kubectl:1.5.10
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 8888
        command: ["/bin/sh", "-c"]
        args:
          - |
            deployment_name="emissary-apiext"
            deployment_namespace="emissary-system"
            while true; do
              echo "checking if deployment/$deployment_name in namespace: $deployment_namespace exists."
              if kubectl get deployment "$deployment_name" -n $deployment_namespace > /dev/null 2>&1; then
                echo "$deployment_name.$deployment_namespace exists."
                echo "checking if $deployment_name.$deployment_namespace is fully available..."
                kubectl wait --for=condition=available deployment/"$deployment_name" -n $deployment_namespace --timeout=5m
                if [ $? -eq 0 ]; then
                  echo "$deployment_name.$deployment_namespace is available"
                  while true; do
                  desired_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.spec.replicas}')
                  current_replicas=$(kubectl get deployment $deployment_name -n $deployment_namespace -o jsonpath='{.status.replicas}')
                  if [[ $current_replicas != $desired_replicas ]]; then
                    echo "$deployment_name.$deployment_namespace is in the process of restarting. Have: $current_replicas, want $desired_replicas"
                    sleep 3
                  else
                    echo "$deployment_name.$deployment_namespace is fully ready and not currently restarting.  Have: $current_replicas, want $desired_replicas"
                    break
                  fi
                  done
                  break
                else
                  echo "$deployment_name.$deployment_namespace did not become available within the timeout"
                fi
              else
                echo "$deployment_name.$deployment_namespace does not exist yet. Waiting..."
                sleep 3
              fi
            done
      containers:
        - name: emissary-ingress
          image: docker.io/emissaryingress/emissary:3.9.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
            - name: admin
              containerPort: 8877
          env:
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AGENT_CONFIG_RESOURCE_NAME
              value: my-release-emissary-ingress-agent-cloud-token
          securityContext:
            allowPrivilegeEscalation: false
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: admin
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: admin
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 3
          volumeMounts:
            - name: ambassador-pod-info
              mountPath: /tmp/ambassador-pod-info
              readOnly: true
          resources:
            limits:
              cpu: 1000m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 300Mi
      imagePullSecrets:
        []
      dnsPolicy: ClusterFirst
      hostNetwork: false
---
# Source: emissary-ingress/templates/module.yaml
apiVersion: getambassador.io/v3alpha1
kind: Module
metadata:
  name: ambassador
  namespace: default
  labels:
    app.kubernetes.io/name: emissary-ingress
    helm.sh/chart: emissary-ingress-8.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: emissary-ingress
    product: aes
spec:
  config:
    diagnostics:
      allow_non_local: true
      enabled: false
