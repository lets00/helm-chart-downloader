---
# Source: erpnext/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: erpnext
    helm.sh/chart: erpnext-7.0.22
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  # TODO: narrow api groups
  - apiGroups:
      - '*'
    resources:
      - '*'
    verbs:
      - '*'
---
# Source: erpnext/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: erpnext
    helm.sh/chart: erpnext-7.0.22
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: erpnext
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
---
# Source: erpnext/templates/releases/erpnext.yaml
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: my-release-release
  labels:
    app.kubernetes.io/name: erpnext
    helm.sh/chart: erpnext-7.0.22
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  interval: 5m
  chart:
    spec:
      chart: erpnext
      version: "7.0.22"
      sourceRef:
        apiVersion: source.toolkit.fluxcd.io/v1beta1
        kind: HelmRepository
        name: erpnext
  values:
    image:
      repository: "registry.gitlab.com/bitspur/rock8s/erpnext/images/erpnext"
      tag: "15.21.2"
      pullPolicy: "Always"
    nginx:
      replicaCount: 1
      config: |
        
      environment:
        upstreamRealIPAddress: "127.0.0.1"
        upstreamRealIPRecursive: "off"
        upstreamRealIPHeader: "X-Forwarded-For"
        frappeSiteNameHeader: "$host"
      livenessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      service:
        type: ClusterIP
        port: 8080
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 512Mi
    worker:
      gunicorn:
        replicaCount: 1
        livenessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 10
        service:
          type: ClusterIP
          port: 8000
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 600m
            memory: 512Mi
        args: []
      default:
        replicaCount: 1
        resources: {}
      short:
        replicaCount: 1
        resources: {}
      long:
        replicaCount: 1
        resources: {}
      scheduler:
        replicaCount: 1
        resources: {}
    socketio:
      replicaCount: 1
      livenessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      readinessProbe:
        tcpSocket:
          port: 9000
        initialDelaySeconds: 5
        periodSeconds: 10
      resources: {}
      service:
        type: ClusterIP
        port: 9000
    persistence:
      worker:
        enabled: true
        size: 1Gi
        storageClass: efs-sc
      logs:
        enabled: false
        size: 1Gi
        storageClass: efs-sc
    ingress:
      ingressName: my-release-release
      enabled: false
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 4G
      hosts:
        - host: ''
          paths:
          - path: /
            pathType: ImplementationSpecific
    jobs:
      volumePermissions:
        enabled: false
      configure:
        enabled: true
        fixVolume: false
      createSite:
        enabled: false
        forceCreate: false
        siteName: my-release-release.default.svc.cluster.local
        adminPassword: "P@ssw0rd"
        installApps:
          - erpnext
          - hrms
        dbType: mariadb
      dropSite:
        enabled: false
      # backup:
      #   enabled: {\{ (and .Values.config.backup.enabled (not .Values.config.backup.s3.integration)) }}
      #   siteName: {\{ template "erpnext.erpnext-hostname" . }}
      #   withFiles: true
      #   push:
      #     enabled: true
      #     bucket: {\{ .Values.config.backup.s3.bucket | quote }}
      #     region: {\{ .Values.config.backup.s3.region | quote }}
      #     accessKey: {\{ .Values.config.backup.s3.accessKey | quote }}
      #     secretKey: {\{ .Values.config.backup.s3.secretKey | quote }}
      #     endpoint: https://{\{ (empty .Values.config.backup.s3.endpoint) | ternary (printf "s3.%s.amazonaws.com" .Values.config.backup.s3.region) .Values.config.backup.s3.endpoint }}/{\{ .Values.config.backup.s3.prefix }}
      migrate:
        enabled: false
    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    serviceAccount:
      create: true
    podSecurityContext:
      supplementalGroups: [1000]
    securityContext:
      capabilities:
        add:
        - CAP_CHOWN
    redis-cache:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-queue:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    redis-socketio:
      enabled: true
      architecture: standalone
      auth:
        enabled: false
        sentinal: false
      master:
        containerPorts:
          redis: 6379
        persistence:
          enabled: false
    mariadb:
      enabled: true
      image:
        registry: docker.io
        repository: "bitnami/mariadb"
        tag: "10.6.11-debian-11-r12"
        pullPolicy: "Always"
      auth:
        rootPassword: "P@ssw0rd"
        username: 'erpnext'
        password: "P@ssw0rd"
        replicationPassword: "P@ssw0rd"
      primary:
        service:
          ports:
            mysql: 3306
        persistence:
          enabled: true
          size: 1Gi
          storageClass: 
        configuration: |-
          [mysqld]
          skip-name-resolve
          explicit_defaults_for_timestamp
          basedir=/opt/bitnami/mariadb
          plugin_dir=/opt/bitnami/mariadb/plugin
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          tmpdir=/opt/bitnami/mariadb/tmp
          max_allowed_packet=16M
          # bind-address=::
          pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
          log-error=/opt/bitnami/mariadb/logs/mysqld.log
          # Frappe Specific Changes
          character-set-client-handshake=FALSE
          character-set-server=utf8mb4
          collation-server=utf8mb4_unicode_ci
          [client]
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          plugin_dir=/opt/bitnami/mariadb/plugin
          # Frappe Specific Changes
          default-character-set=utf8mb4
          [manager]
          port=3306
          socket=/opt/bitnami/mariadb/tmp/mysql.sock
          pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    postgresql:
      enabled: false
    dbHost: ""
    dbPort: "3306"
    dbRootPassword: "P@ssw0rd"
    dbRootUser: "root"
    mariadbHost: ""
---
# Source: erpnext/templates/releases/erpnext.yaml
apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: erpnext
  labels:
    app.kubernetes.io/name: erpnext
    helm.sh/chart: erpnext-7.0.22
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  interval: 5m
  url: https://helm.erpnext.com
---
# Source: erpnext/templates/patches/create-site.yaml
apiVersion: kyverno.io/v1
kind: Policy
metadata:
  name: create-site
  labels:
    app.kubernetes.io/name: erpnext
    helm.sh/chart: erpnext-7.0.22
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  mutateExistingOnPolicyUpdate: true
  background: true
  schemaValidation: false
  rules:
    - name: helm-release
      match:
        resources:
          kinds:
            - helm.toolkit.fluxcd.io/*/HelmRelease
          names:
            - my-release-release
      mutate:
        targets:
          - apiVersion: helm.toolkit.fluxcd.io/v2beta1
            kind: HelmRelease
            name: my-release-release
        patchesJson6902: |
          - op: replace
            path: /spec/values/jobs/createSite/enabled
            value: true
