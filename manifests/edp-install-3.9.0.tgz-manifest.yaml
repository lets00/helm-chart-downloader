---
# Source: edp-install/charts/cd-pipeline-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edp-cd-pipeline-operator
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/codebase-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edp-codebase-operator
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/edp-headlamp/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: edp-headlamp
  labels:
    helm.sh/chart: edp-headlamp-0.15.0
    app.kubernetes.io/name: portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-interceptor
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/edp-tekton/templates/resources/pruner/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-resource-pruner
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/edp-tekton/templates/resources/serviceaccount-tekton.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
# -- Define secrets which will be mounted to service account. This allow signed image while push to Harbor
---
# Source: edp-install/charts/edp-tekton/templates/triggers/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-triggers-sa-default
  namespace: default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/codebase-operator/templates/cert_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: edp-codebase-operator-webhook-certs
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/interceptor-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tekton-edp-interceptor-certs #The edp interceptor relies on this name of the secret for populating certificates.
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
# The data is populated at install time by edp interceptor.
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/cm-dashboard.yaml
apiVersion: v1
data:
  version: v0.46.0
kind: ConfigMap
metadata:
  labels:
    app: tekton-dashboard
  name: dashboard-info
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-autotest-workspace.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: autotests-workspace-template
data:
  volumeclaimtemplate.yaml: |
    metadata:
      name: shared-workspace
    spec:
      accessModes:
        - ReadWriteOnce
      volumeMode: Filesystem
      resources:
        requests:
          storage: 5Gi
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-codenarc-settings.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-codenarc-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  init.gradle: |
    // Copyright 2022 EPAM Systems.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    //
    // See the License for the specific language governing permissions and
    // limitations under the License.

    allprojects {
        buildscript {
            repositories {
                maven {
                    name "maven-group"
                    credentials {
                        username nexusLogin
                        password nexusPassword
                    }
                    url "${nexusMavenRepositoryUrl}"
                    allowInsecureProtocol = true
                }
            }
            dependencies {
                classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
            }
        }

        apply plugin: 'java'
        apply plugin: 'jacoco'
        apply plugin: 'maven-publish'

        afterEvaluate { project ->
            project.apply plugin: 'org.sonarqube'
        }
    }
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-gradle-settings.yaml
# Default configuration map for provisioning Gradle init.gradle file.
# To change it, prepare another configuration map and update "tekton.configs.gradleConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-gradle-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  SNAPSHOTS_REPO_PATH: "/repository/edp-maven-snapshots"
  RELEASES_REPO_PATH: "/repository/edp-maven-releases"
  init.gradle: |
    // Copyright 2024 EPAM Systems.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    //
    // See the License for the specific language governing permissions and
    // limitations under the License.

    allprojects {
        buildscript {
            repositories {
                maven {
                    name "nexus"
                    credentials {
                        username = System.getenv("CI_USERNAME")
                        password = System.getenv("CI_PASSWORD")
                    }
                    url = System.getenv("NEXUS_HOST_URL") + "/repository/edp-maven-group"
                    allowInsecureProtocol = true
                }
            }
            dependencies {
                classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
            }
        }

        repositories {
            maven {
                name "nexus"
                credentials {
                    username = System.getenv("CI_USERNAME")
                    password = System.getenv("CI_PASSWORD")
                }
                url = System.getenv("NEXUS_HOST_URL") + "/repository/edp-maven-group"
                allowInsecureProtocol = true
            }
            maven {
                name "gitlab-registry"
                url = "https://gitlab.example.com/api/v4/projects/PROJECT_ID/packages/maven"
                credentials(HttpHeaderCredentials) {
                    name = System.getenv("CI_GITLAB_TOKEN_TYPE")
                    value = System.getenv("CI_GITLAB_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
            maven {
                name "github-registry"
                url = "https://maven.pkg.github.com/OWNER/REPOSITORY"
                credentials {
                    username = System.getenv("CI_GITHUB_USERNAME")
                    password = System.getenv("CI_GITHUB_PASSWORD")
                }
            }
            maven {
                name "azure-devops-registry"
                url 'https://pkgs.dev.azure.com'
                credentials {
                    username = System.getenv("CI_AZURE_DEVOPS_USERNAME")
                    password = System.getenv("CI_AZURE_DEVOPS_PASSWORD")
                }
            }
        }

        apply plugin: 'java'
        apply plugin: 'jacoco'
        apply plugin: 'maven-publish'

        afterEvaluate { project ->
            project.apply plugin: 'org.sonarqube'
        }
    }
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-maven-settings.yaml
# Default configuration map for provisioning Maven settings.xml file.
# To change it, prepare another configuration map and update "tekton.configs.mavenConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-maven-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  settings.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--Copyright 2024 EPAM Systems.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License. -->
    <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
        <localRepository>/workspace/source/cache</localRepository>

        <pluginGroups>
            <pluginGroup>org.sonarsource.scanner.maven</pluginGroup>
        </pluginGroups>
        <servers>
            <!-- The "nexus" server is defined to provide credentials required by the mirror. -->
            <server>
                <id>nexus</id>
                <username>${env.CI_USERNAME}</username>
                <password>${env.CI_PASSWORD}</password>
            </server>
            <!-- The "gitlab-registry" server is defined to provide credentials required by the GitLab registry.
            A token is used for authentication which is passed in HTTP headers.
            More documentation: https://docs.gitlab.com/ee/user/packages/maven_repository/ -->
            <server>
                <id>gitlab-registry</id>
                <configuration>
                    <httpHeaders>
                        <property>
                            <name>${env.CI_GITLAB_TOKEN_TYPE}</name>
                            <value>${env.CI_GITLAB_TOKEN}</value>
                        </property>
                    </httpHeaders>
                </configuration>
            </server>
            <!-- The "github-registry" server is defined to provide credentials required by the GitHub registry.
            Username and password are used for authentication.
            More documentation: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry -->
            <server>
                <id>github-registry</id>
                <username>${env.CI_GITHUB_USERNAME}</username>
                <password>${env.CI_GITHUB_PASSWORD}</password>
            </server>
            <!-- The "azure-devops-registry" server is defined to provide credentials required by the Azure DevOps registry.
            Username and password are used for authentication.
            More documentation: https://learn.microsoft.com/en-us/azure/devops/artifacts/get-started-maven?view=azure-devops -->
            <server>
                <id>azure-devops-registry</id>
                <username>${env.CI_AZURE_DEVOPS_USERNAME}</username>
                <password>${env.CI_AZURE_DEVOPS_PASSWORD}</password>
            </server>
        </servers>

        <mirrors>
            <mirror>
                <!--This sends everything else to /public -->
                <id>nexus</id>
                <mirrorOf>*</mirrorOf>
                <url>http://nexus.nexus:8081/repository/edp-maven-group</url>
            </mirror>
        </mirrors>

        <profiles>
            <profile>
                <id>sonar</id>
                <activation>
                     <activeByDefault>true</activeByDefault>
                </activation>
                <properties>
                    <sonar.login>
                        ${env.SONAR_TOKEN}
                    </sonar.login>
                    <sonar.host.url>
                        ${env.SONAR_HOST_URL}
                    </sonar.host.url>
                </properties>
            </profile>
            <!-- Nexus profile for managing artifacts within Nexus repository. -->
            <profile>
                <id>nexus</id>
                <properties>
                    <altSnapshotDeploymentRepository>nexus::http://nexus.nexus:8081/repository/edp-maven-snapshots</altSnapshotDeploymentRepository>
                    <altReleaseDeploymentRepository>nexus::http://nexus.nexus:8081/repository/edp-maven-releases</altReleaseDeploymentRepository>
                </properties>
            </profile>
            <!-- GitLab registry profile for managing artifacts within GitLab. -->
            <profile>
                <id>gitlab-registry</id>
                <properties>
                    <altSnapshotDeploymentRepository>gitlab-registry::https://gitlab.example.com/api/v4/projects/PROJECT_ID/packages/maven</altSnapshotDeploymentRepository>
                    <altReleaseDeploymentRepository>gitlab-registry::https://gitlab.example.com/api/v4/projects/PROJECT_ID/packages/maven</altReleaseDeploymentRepository>
                </properties>
            </profile>
            <!-- GitHub registry profile for managing artifacts within GitHub. -->
            <profile>
                <id>github-registry</id>
                <properties>
                    <altSnapshotDeploymentRepository>github-registry::https://maven.pkg.github.com/OWNER/REPOSITORY</altSnapshotDeploymentRepository>
                    <altReleaseDeploymentRepository>github-registry::https://maven.pkg.github.com/OWNER/REPOSITORY</altReleaseDeploymentRepository>
                </properties>
            </profile>
            <!-- Azure DevOps registry profile for managing artifacts within Azure DevOps. -->
            <profile>
                <id>azure-devops-registry</id>
                <properties>
                    <altSnapshotDeploymentRepository>azure-devops-registry::https://pkgs.dev.azure.com</altSnapshotDeploymentRepository>
                    <altReleaseDeploymentRepository>azure-devops-registry::https://pkgs.dev.azure.com</altReleaseDeploymentRepository>
                </properties>
            </profile>
        </profiles>
        <!-- Specify the active profile here. If you want to push packages to nexus (default), gitlab registry, github registry,
        or Azure DevOps registry, change the activeProfile id to the required profile id. -->
        <activeProfiles>
            <activeProfile>nexus</activeProfile>
        </activeProfiles>
    </settings>
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-npm-settings.yaml
# Default configuration maps for provisioning NPM .npmrc files.
# To change it, prepare another configuration map and update "tekton.configs.npmConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-npm-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  .npmrc-ci: |
    registry=${NEXUS_HOST_URL}/repository/edp-npm-group
    ${NEXUS_HOST}/repository/:email=ci.user@edp.com
    ${NEXUS_HOST}/repository/:_auth=${upBase64}
    cache=${NPM_CACHE_DIR}

  .npmrc-publish-snapshots: |
    registry=${NEXUS_HOST_URL}/repository/edp-npm-snapshots
    ${NEXUS_HOST}/repository/:email=ci.user@edp.com
    ${NEXUS_HOST}/repository/:_auth=${upBase64}
    cache=${NPM_CACHE_DIR}

  .npmrc-publish-releases: |
    registry=${NEXUS_HOST_URL}/repository/edp-npm-releases
    ${NEXUS_HOST}/repository/:email=ci.user@edp.com
    ${NEXUS_HOST}/repository/:_auth=${upBase64}
    cache=${NPM_CACHE_DIR}

  # Example of how to push changes when using Node.js version 18.10.0 with the node:18.10-alpine3.16 image
  # .npmrc-ci: |
  #   registry=${NEXUS_HOST_URL}/repository/edp-npm-group
  #   _auth=${upBase64}
  #   cache=${NPM_CACHE_DIR}

  # .npmrc-publish-snapshots: |
  #   registry=${NEXUS_HOST_URL}/repository/edp-npm-snapshots
  #   _auth=${upBase64}
  #   cache=${NPM_CACHE_DIR}

  # .npmrc-publish-releases: |
  #   registry=${NEXUS_HOST_URL}/repository/edp-npm-releases
  #   _auth=${upBase64}
  #   cache=${NPM_CACHE_DIR}

  # Example for pushing a snapshot package to GitLab
  # Ref: https://docs.gitlab.com/ee/user/packages/npm_registry/
  #.npmrc-publish-snapshots: |
  #  registry=https://gitlab.example.com/api/v4/projects/PROJECT_ID/packages/npm
  #  _authToken=${CI_GITLAB_TOKEN}
  #  cache=${NPM_CACHE_DIR}

  # Example for pushing a release package to GitLab
  # Ref: https://docs.gitlab.com/ee/user/packages/npm_registry/
  #.npmrc-publish-releases: |
  #  registry=https://gitlab.example.com/api/v4/projects/PROJECT_ID/packages/npm
  #  _authToken=${CI_GITLAB_TOKEN}
  #  cache=${NPM_CACHE_DIR}

  # Example for pushing a snapshot package to GitHub
  # Ref: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry
  #.npmrc-publish-snapshots: |
  #  registry=https://npm.pkg.github.com
  #  _authToken=${CI_GITHUB_PASSWORD}
  #  cache=${NPM_CACHE_DIR}

  # Example for pushing a release package to GitHub
  # Ref: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry
  #.npmrc-publish-releases: |
  #  registry=https://npm.pkg.github.com
  #  _authToken=${CI_GITHUB_PASSWORD}
  #  cache=${NPM_CACHE_DIR}
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-nuget-settings.yaml
# Default configuration maps for provisioning nuget.config file.
# To change it, prepare another configuration map and update "tekton.configs.nugetConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-nuget-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  nuget.config: |
    <?xml version="1.0" encoding="utf-8"?>
    <configuration>
        <packageSources>
            <add key="nugetStorageSnapshots" value="%NEXUS_HOST_URL%/repository/edp-dotnet-snapshots" />
            <add key="nugetStorageReleases" value="%NEXUS_HOST_URL%/repository/edp-dotnet-releases" />
        </packageSources>
        <packageSourceCredentials>
            <nugetStorageSnapshots>
                <add key="Username" value="%CI_USERNAME%" />
                <add key="ClearTextPassword" value="%CI_PASSWORD%" />
            </nugetStorageSnapshots>
            <nugetStorageReleases>
                <add key="Username" value="%CI_USERNAME%" />
                <add key="ClearTextPassword" value="%CI_PASSWORD%" />
            </nugetStorageReleases>
        </packageSourceCredentials>
    </configuration>
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-python-settings.yaml
# Default configuration maps for provisioning PIP_TRUSTED_HOST, PIP_INDEX, PIP_INDEX_URL,
# REPOSITORY_URL_SNAPSHOTS and REPOSITORY_URL_RELEASES environment variables for Python tasks.
# To change it, prepare another configuration map and update "tekton.configs.pythonConfigMap"
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-python-settings
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  # Private repo index path PIP searches through. It is used by 'pip search' command.
  # e.g. '/repository/edp-python-group/pypi'
  PIP_INDEX_PATH: "/repository/edp-python-group/pypi"

  # Repo index path from wich PIP downloads private packages and public packages via proxy.
  # PIP_INDEX_URL can have only one URL while PIP_EXTRA_INDEX_URL can hold
  # multiple URLs if passed with spaces. It is used by 'pip install' command.
  # To access index via web, add slash at the end of 'simple/'.
  # e.g. '/repository/edp-python-group/simple'
  PIP_INDEX_URL_PATH: "/repository/edp-python-group/simple"

  # Path for the snapshots repository in artifact storage.
  REPOSITORY_SNAPSHOTS_PATH: "/repository/edp-python-snapshots/"

  # Path for the releases repository in artifact storage
  REPOSITORY_RELEASES_PATH: "/repository/edp-python-releases/"

  # Example for pushing a snapshot and a release packages package to GitLab
  # Ref: https://docs.gitlab.com/ee/user/packages/pypi_repository/
  #PIP_INDEX_URL_PATH: "/api/v4/projects/PROJECT_ID/packages/pypi/simple"
  #REPOSITORY_SNAPSHOTS_PATH: "/api/v4/projects/PROJECT_ID/packages/pypi/"
  #REPOSITORY_RELEASES_PATH: "/api/v4/projects/PROJECT_ID/packages/pypi/"

  # Example for pushing a snapshot and a release packages to Azure Devops Artifacts
  # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/quickstarts/python-packages?view=azure-devops
  #PIP_INDEX_URL_PATH: "/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/pypi/simple"
  #REPOSITORY_SNAPSHOTS_PATH: "/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/pypi/upload"
  #REPOSITORY_RELEASES_PATH: "/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/pypi/upload"
---
# Source: edp-install/charts/edp-tekton/templates/resources/cm-tekton-cache.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tekton-cache
data:
  url: http://tekton-cache:8080
---
# Source: edp-install/charts/edp-tekton/templates/resources/ct-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ct-config
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  ct.yaml: |
    validate-maintainers: false
  chart_schema.yaml:
    |
      name: str()
      home: str()
      version: str()
      type: str()
      apiVersion: str()
      appVersion: any(str(), num())
      description: str()
      keywords: list(str(), required=False)
      sources: list(str(), required=True)
      maintainers: list(include('maintainer'), required=True)
      dependencies: list(include('dependency'), required=False)
      icon: str(required=False)
      engine: str(required=False)
      condition: str(required=False)
      tags: str(required=False)
      deprecated: bool(required=False)
      kubeVersion: str(required=False)
      annotations: map(str(), str(), required=False)
      ---
      maintainer:
        name: str(required=True)
        email: str(required=False)
        url: str(required=False)
      ---
      dependency:
        name: str()
        version: str()
        repository: str()
        condition: str(required=False)
        tags: list(str(), required=False)
        enabled: bool(required=False)
        import-values: any(list(str()), list(include('import-value')), required=False)
        alias: str(required=False)
  lintconf.yaml:
    |
      ---
      rules:
        braces:
          min-spaces-inside: 0
          max-spaces-inside: 0
          min-spaces-inside-empty: -1
          max-spaces-inside-empty: -1
        brackets:
          min-spaces-inside: 0
          max-spaces-inside: 0
          min-spaces-inside-empty: -1
          max-spaces-inside-empty: -1
        colons:
          max-spaces-before: 0
          max-spaces-after: 1
        commas:
          max-spaces-before: 0
          min-spaces-after: 1
          max-spaces-after: 1
        comments:
          require-starting-space: true
          min-spaces-from-content: 2
        document-end: disable
        document-start: disable           # No --- to start a file
        empty-lines:
          max: 2
          max-start: 0
          max-end: 0
        hyphens:
          max-spaces-after: 1
        indentation:
          spaces: consistent
          indent-sequences: whatever      # - list indentation will handle both indentation and without
          check-multi-line-strings: false
        key-duplicates: enable
        line-length: disable              # Lines can be any length
        new-line-at-end-of-file: enable
        new-lines:
          type: unix
        trailing-spaces: enable
        truthy:
          level: warning
---
# Source: edp-install/charts/edp-tekton/templates/resources/pruner/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: tekton-resource-pruner-scripts
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
data:
  tekton-prune.sh: |
    #!/usr/bin/env bash
  
    set -o errtrace
    trap 'echo "error occurred on line ${LINENO}"; exit 1' ERR
  
    verify() {
      echo 'Verify that kubectl is installed'
      if ! command -v kubectl &> /dev/null; then
        echo "kubectl could not be found"
        exit 1
      fi
      echo 'Ok'
      echo 'Verify that namespace variables are defined'
      if test -z "${NAMESPACE}"; then
        echo 'NAMESPACE env variable not defined.'
        exit 1
      fi
      echo 'Ok'
    }
  
    get_pipelinerun_to_file() {
      pods_file_path="$1"
      kubectl get -n "${NAMESPACE}" pipelinerun -o name > "${pods_file_path}"
    }
  
  
    get_active_pipelineruns() {
      kubectl get -n "${NAMESPACE}" pipelineruns \
        -o jsonpath='{.items[?(@.status.conditions[0].reason=="Running")].metadata.name}'
    }
  
  
    delete_lines_from_file() {
      file="$1"
      lines_to_delete="$2"
      for line in ${lines_to_delete[@]}; do
        sed -i "/${line}/d" "${file}"
      done
    }
  
    prune_resources() {
      resources_to_delete_file_path="$1"
      type="$2"
      resource_list=''
      while IFS= read -r line || [[ -n "${line}" ]]; do
        if ! test -z "${line}"; then resource_list="${resource_list} ${type}${line}"; fi
      done < "$resources_to_delete_file_path"
      if test -z "${resource_list// }"; then
        echo 'No resources to delete'
      else
        kubectl delete -n "${NAMESPACE}" ${resource_list} --force --grace-period=0;
      fi
    }
  
    main() {
      separator=';'
      pvc_owner_kind='PipelineRun'
      pipelinerun_to_delete_file_path='/tmp/runs-to-delete.txt'
  
      verify
  
      echo 'Get active pipelineruns'
      active_pipelineruns=$(get_active_pipelineruns)
      echo "Running pipelineruns: $active_pipelineruns"
  
      echo "Get pipelinerun list"
      get_pipelinerun_to_file "${pipelinerun_to_delete_file_path}"
      cat "${pipelinerun_to_delete_file_path}"
  
      echo 'Exclude running pipelineruns from deletion list':
      delete_lines_from_file "${pipelinerun_to_delete_file_path}" "${active_pipelineruns}"
      cat "${pipelinerun_to_delete_file_path}"
  
      echo 'Delete pipelineruns'
      prune_resources "${pipelinerun_to_delete_file_path}" ''
      echo 'Ok'
  
    }
  
    main
---
# Source: edp-install/templates/edp_config_map.yaml
apiVersion: v1
data:
  container_registry_space: 
  container_registry_host: 
  container_registry_type: 
  platform: kubernetes
  edp_name: default
  edp_version: 3.9.0
  dns_wildcard: 
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-config
---
# Source: edp-install/charts/edp-tekton/charts/tekton-cache/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cache
  labels:
    helm.sh/chart: tekton-cache-0.3.3
    app.kubernetes.io/name: tekton-cache
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.3.3"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: edp-install/charts/cd-pipeline-operator/templates/clusterrole_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-cd-pipeline-operator-default
rules:
- apiGroups:
    - ""
  resources:
    - namespaces
  verbs:
    - get
    - list
    - create
    - delete
---
# Source: edp-install/charts/codebase-operator/templates/clusterrole_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator-default
rules:
- apiGroups:
    - admissionregistration.k8s.io
  resources:
    - validatingwebhookconfigurations
  verbs:
    - get
    - update
    - patch
---
# Source: edp-install/templates/role_edp_aggregate_view.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: edp-aggregate-view-default
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - v1.edp.epam.com
    resources:
      - keycloakauthflows
      - keycloakclients
      - keycloakclientscopes
      - keycloakrealmcomponents
      - keycloakrealmgroups
      - keycloakrealmidentityproviders
      - keycloakrealmrolebatches
      - keycloakrealmroles
      - keycloakrealms
      - keycloakrealmusers
      - keycloaks
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - v2.edp.epam.com
    resources:
      - adminconsoles
      - cdpipelines
      - cdstagedeployments
      - cdstagejenkinsdeployments
      - codebasebranches
      - codebaseimagestreams
      - codebases
      - gerritgroupmembers
      - gerritgroups
      - gerritmergerequests
      - gerritprojectaccesses
      - gerritprojects
      - gerritreplicationconfigs
      - gerrits
      - gitservers
      - jenkins
      - jenkinsagents
      - jenkinsauthorizationrolemappings
      - jenkinsauthorizationroles
      - jenkinsfolders
      - jenkinsjobbuildruns
      - jenkinsjobs
      - jenkinsscripts
      - jenkinsserviceaccounts
      - jenkinssharedlibraries
      - jiraissuemetadatas
      - jiraservers
      - nexuses
      - nexususers
      - perfdatasourcegitlabs
      - perfdatasourcejenkinses
      - perfdatasourcesonars
      - perfservers
      - quicklinks
      - sonargroups
      - sonarpermissiontemplates
      - sonars
      - stages
      - templates
    verbs:
      - get
      - list
      - watch
---
# Source: edp-install/charts/cd-pipeline-operator/templates/clusterrolebinding_admin_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-cd-pipeline-operator-default-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
  - kind: ServiceAccount
    name: edp-cd-pipeline-operator
    namespace: default
---
# Source: edp-install/charts/cd-pipeline-operator/templates/clusterrolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-cd-pipeline-operator-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edp-cd-pipeline-operator-default
subjects:
  - kind: ServiceAccount
    name: edp-cd-pipeline-operator
    namespace: default
---
# Source: edp-install/charts/codebase-operator/templates/clusterrolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edp-codebase-operator-default
subjects:
  - kind: ServiceAccount
    name: edp-codebase-operator
    namespace: default
---
# Source: edp-install/charts/edp-tekton/templates/triggers/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-triggers-eventlistener-clusterbinding-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: tekton-triggers-sa-default
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-clusterroles
---
# Source: edp-install/charts/cd-pipeline-operator/templates/role_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-cd-pipeline-operator
rules:
- apiGroups:
    - argoproj.io
  resources:
    - applicationsets
  verbs:
    - get
    - list
    - patch
    - update
    - watch
    - create
- apiGroups:
    - '*'
  resources:
    - cdpipelines
    - cdpipelines/finalizers
    - cdpipelines/status
    - codebases
    - codebases/finalizers
    - codebases/status
    - codebasebranches
    - codebasebranches/finalizers
    - codebasebranches/status
    - stages
    - stages/finalizers
    - stages/status
    - gitservers
    - gitservers/status
    - gitservers/finalizers
    - edpcomponents
    - edpcomponents/finalizers
    - edpcomponents/status
    - codebaseimagestreams
    - codebaseimagestreams/status
    - codebaseimagestreams/finalizers
    - configmaps
    - events
  verbs:
    - '*'
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - create
    - get
    - list
    - update
- apiGroups: [ "" ]
  resources:
    - secrets
  verbs:
    - create
    - get
    - list
    - patch
    - update
    - watch
---
# Source: edp-install/charts/codebase-operator/templates/role_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator
rules:
- apiGroups:
    - argoproj.io
  resources:
    - applications
  verbs:
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - '*'
  resources:
    - gitservers
    - gitservers/status
    - gitservers/finalizers
    - codebases
    - codebases/status
    - codebases/finalizers
    - codebasebranches
    - codebasebranches/status
    - codebasebranches/finalizers
    - codebaseimagestreams
    - codebaseimagestreams/status
    - codebaseimagestreams/finalizers
    - configmaps
    - quicklinks
    - jiraservers
    - jiraservers/finalizers
    - jiraservers/status
    - jirafixversions
    - jirafixversions/status
    - jiraissuemetadatas
    - jiraissuemetadatas/finalizers
    - jiraissuemetadatas/status
    - cdstagedeployments
    - cdstagedeployments/finalizers
    - cdstagedeployments/status
    - stages
    - stages/finalizers
    - stages/status
    - cdpipelines
  verbs:
    - '*'
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
- apiGroups:
    - networking.k8s.io
  resources:
    - ingresses
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - ""
  resources:
    - events
  verbs:
    - create
    - patch
- apiGroups:
    - ''
  verbs:
    - get
    - watch
    - list
    - patch
    - update
    - create
  resources:
    - secrets
- apiGroups:
    - tekton.dev
  resources:
    - pipelineruns
  verbs:
    - create
    - list
- apiGroups:
    - triggers.tekton.dev
  resources:
    - triggertemplates
  verbs:
    - get
    - list
    - watch
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-info
  namespace: default
rules:
  - apiGroups:
      - ""
    resourceNames:
      - dashboard-info
    resources:
      - configmaps
    verbs:
      - get
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-backend
  namespace: default
rules:
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
  - apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    verbs:
      - use
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - dashboard.tekton.dev
    resources:
      - extensions
    verbs:
      - create
      - update
      - delete
      - patch
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-tenant
  namespace: default
rules:
  - apiGroups:
      - dashboard.tekton.dev
    resources:
      - extensions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
      - namespaces
      - pods
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - tekton.dev
    resources:
      - tasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      - runs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - triggers.tekton.dev
    resources:
      - eventlisteners
      - triggerbindings
      - triggers
      - triggertemplates
      - interceptors
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - tekton.dev
    resources:
      - tasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      - runs
    verbs:
      - create
      - update
      - delete
      - patch
  - apiGroups:
      - triggers.tekton.dev
    resources:
      - eventlisteners
      - triggerbindings
      - triggers
      - triggertemplates
      - interceptors
    verbs:
      - create
      - update
      - delete
      - patch
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tekton-triggers-edp-interceptor
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - verbs:
      - get
      - list
      - watch
      - update
    apiGroups:
      - triggers.tekton.dev
    resources:
      - interceptors

  - verbs:
      - get
      - list
      - watch
      - update
      - create
    apiGroups:
      - ''
    resources:
      - secrets
    resourceNames:
      - tekton-edp-interceptor-certs

  - verbs:
      - get
    apiGroups:
      - ''
    resources:
      - secrets

  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - v2.edp.epam.com
    resources:
      - codebases
      - codebases/status
      - codebases/finalizers

  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - v2.edp.epam.com
    resources:
      - codebasebranches
      - codebasebranches/status
      - codebasebranches/finalizers

  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - v2.edp.epam.com
    resources:
      - gitservers
      - gitservers/status
      - gitservers/finalizers
---
# Source: edp-install/charts/edp-tekton/templates/resources/pruner/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-resource-pruner
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - tekton.dev
    verbs:
      - get
      - list
      - delete
    resources:
      - pipelineruns
  - apiGroups:
      - ''
    verbs:
      - get
    resources:
      - ConfigMap
    resourceNames:
      - tekton-resource-pruner-scripts
---
# Source: edp-install/charts/edp-tekton/templates/resources/role-tekton-autotest.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-autotests-role
rules:
  - verbs:
      - create
      - get
      - list
      - watch
      - patch
      - update
    apiGroups:
      - tekton.dev
    resources:
      - pipelines
      - pipelineruns
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - v2.edp.epam.com
    resources:
      - codebases
      - gitservers
      - stages
  - verbs:
      - list
      - get
    apiGroups:
      - argoproj.io
    resources:
      - applications
---
# Source: edp-install/charts/edp-tekton/templates/resources/role-tekton.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-pipeline-role
rules:
  # allow to get configs for EDP from configmap
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch

  # baseline operations with codebase and cbis
  - apiGroups:
      - 'v2.edp.epam.com'
    resources:
      - cdpipelines
      - codebasebranches
      - codebasebranches/status
      - codebaseimagestreams
      - codebases
      - stages
    verbs:
      - get
      - update
      - patch
      - list

  # we need to create jira issues
  - apiGroups:
      - 'v2.edp.epam.com'
    resources:
      - jiraissuemetadatas
    verbs:
      - create
      - get

  # we need to get information about the taskRun running in ns containers
  - verbs:
      - get
      - list
      - watch
    apiGroups:
      - tekton.dev
    resources:
      - taskruns

  # we need to manage Argo ApplicationSet (except create, delete)
  - verbs:
      - get
      - list
      - watch
      - update
      - patch
    apiGroups:
      - argoproj.io
    resources:
      - applicationsets
---
# Source: edp-install/templates/rbac/role_builder.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tenant-builder
rules:
  - apiGroups:
      - tekton.dev
    resources:
      - pipelineruns
    verbs:
      - create
---
# Source: edp-install/templates/rbac/role_deployer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tenant-deployer
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - applications
    verbs:
      - list
      - get
      - create
      - watch
      - update
---
# Source: edp-install/templates/rbac/role_developer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tenant-developer
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - applications
    verbs:
      - get
      - list
      - watch
      - create
      - update
  - apiGroups:
      - tekton.dev
    resources:
      - pipelineruns
    verbs:
      - create
  - verbs:
      - get
    apiGroups:
      - ''
    resources:
      - secrets
---
# Source: edp-install/charts/cd-pipeline-operator/templates/rolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-cd-pipeline-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: edp-cd-pipeline-operator
subjects:
  - kind: ServiceAccount
    name: edp-cd-pipeline-operator
    namespace: default
---
# Source: edp-install/charts/codebase-operator/templates/rolebinding_admin_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator-admin
roleRef:
  name: admin
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
subjects:
  - kind: ServiceAccount
    name: edp-codebase-operator
    namespace: default
---
# Source: edp-install/charts/codebase-operator/templates/rolebinding_kubernetes.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: edp-codebase-operator
subjects:
  - kind: ServiceAccount
    name: edp-codebase-operator
    namespace: default
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-info
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-dashboard-info
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-backend
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-dashboard-backend
subjects:
  - kind: ServiceAccount
    name: tekton-dashboard
    namespace: default
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard-tenant
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-dashboard-tenant
subjects:
  - kind: ServiceAccount
    name: tekton-dashboard
    namespace: default
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-edp-interceptor
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: tekton-interceptor
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-triggers-edp-interceptor
---
# Source: edp-install/charts/edp-tekton/templates/resources/pruner/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-resource-pruner
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: tekton-resource-pruner
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-resource-pruner
---
# Source: edp-install/charts/edp-tekton/templates/resources/rolebinding-tekton-autotest.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-autotests-rolebinding
subjects:
  - kind: ServiceAccount
    name: tekton
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-autotests-role
---
# Source: edp-install/charts/edp-tekton/templates/resources/rolebinding-tekton.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-pipeline-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-pipeline-role
subjects:
  - kind: ServiceAccount
    name: tekton
    namespace: default
---
# Source: edp-install/charts/edp-tekton/templates/triggers/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-triggers-eventlistener-binding-default
  namespace: default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: tekton-triggers-sa-default
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-roles
---
# Source: edp-install/templates/rbac/rolebinding_admin.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-admins"
---
# Source: edp-install/templates/rbac/rolebinding_builder.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-builder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tenant-builder
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-builders"
---
# Source: edp-install/templates/rbac/rolebinding_deployer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-deployer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tenant-deployer
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-deployers"
---
# Source: edp-install/templates/rbac/rolebinding_developer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-developer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tenant-developer
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-developers"
---
# Source: edp-install/templates/rbac/rolebinding_viewer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tenant-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-viewers"
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: "default-oidc-developers"
---
# Source: edp-install/charts/codebase-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: edp-codebase-operator-webhook-service
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
  selector:
    name: codebase-operator
---
# Source: edp-install/charts/edp-headlamp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: portal
  labels:
    helm.sh/chart: edp-headlamp-0.15.0
    app.kubernetes.io/name: portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: portal
    app.kubernetes.io/instance: my-release
---
# Source: edp-install/charts/edp-tekton/charts/tekton-cache/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tekton-cache
  labels:
    helm.sh/chart: tekton-cache-0.3.3
    app.kubernetes.io/name: tekton-cache
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.3.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: tekton-cache
    app.kubernetes.io/instance: my-release
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard
  
spec:
  type: ClusterIP
  ports:
    - port: 8080
    
      targetPort: 9097
    
      protocol: TCP
      name: http
  selector:
    
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tekton-triggers-edp-interceptor
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: tekton-interceptor
    app.kubernetes.io/instance: my-release
---
# Source: edp-install/charts/cd-pipeline-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: cd-pipeline-operator-2.20.0
    app.kubernetes.io/name: cd-pipeline-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.20.0"
    app.kubernetes.io/managed-by: Helm
  name: cd-pipeline-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: cd-pipeline-operator
  template:
    metadata:
      labels:
        name: cd-pipeline-operator
    spec:
      serviceAccountName: edp-cd-pipeline-operator
      securityContext:
        runAsNonRoot: true
      containers:
        - name: cd-pipeline-operator
          image: epamedp/cd-pipeline-operator:2.20.0
          imagePullPolicy: "IfNotPresent"
          command:
            - /manager
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PLATFORM_TYPE
              value: kubernetes
            - name: TENANCY_ENGINE
              value: "none"
            - name: MANAGE_NAMESPACE
              value: "true"
            - name: SECRET_MANAGER
              value: "own"
          resources:
            limits:
              memory: 192Mi
            requests:
              cpu: 50m
              memory: 64Mi
---
# Source: edp-install/charts/codebase-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: codebase-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      name: codebase-operator
  template:
    metadata:
      labels:
        name: codebase-operator
    spec:
      serviceAccountName: edp-codebase-operator
      securityContext:
        runAsNonRoot: true
      containers:
        - name: codebase-operator
          image: epamedp/codebase-operator:2.23.0
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: WATCH_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OPERATOR_NAME
              value: codebase-operator
            - name: PLATFORM_TYPE
              value: "kubernetes"
            - name: TELEMETRY_ENABLED
              value: "true"
            - name: RECONCILATION_PERIOD
              value: "360"
            - name: CODEBASE_BRANCH_MAX_CONCURRENT_RECONCILES
              value: "3"
          resources:
            limits:
              memory: 192Mi
            requests:
              cpu: 50m
              memory: 64Mi
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: edp-codebase-operator-webhook-certs
---
# Source: edp-install/charts/edp-headlamp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal
  labels:
    helm.sh/chart: edp-headlamp-0.15.0
    app.kubernetes.io/name: portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: portal
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: portal
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: edp-headlamp
      securityContext:
        {}
      containers:
        - name: portal
          securityContext:
            {}
          image: "epamedp/edp-headlamp:0.15.0"
          imagePullPolicy: 
          
          args:
            - "-in-cluster"
            - "-plugins-dir=/headlamp/plugins"
            
          ports:
            - name: http
              containerPort: 4466
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 4466
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: 4466
            timeoutSeconds: 1
          resources:
            {}
          volumeMounts:
      volumes:
---
# Source: edp-install/charts/edp-tekton/charts/tekton-cache/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-cache
  labels:
    helm.sh/chart: tekton-cache-0.3.3
    app.kubernetes.io/name: tekton-cache
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.3.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-cache
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tekton-cache
        app.kubernetes.io/instance: my-release
    spec:
      volumes:
        - name: cache
          persistentVolumeClaim:
            claimName: cache
      securityContext:
        {}
      initContainers:
        - name: fix-permissions
          image: busybox:1.36.1
          command:
            - chmod
            - '-R'
            - '0775'
            - /uploads
          resources: {}
          volumeMounts:
            - name: cache
              mountPath: /uploads
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            privileged: true
            runAsUser: 0
      containers:
        - name: tekton-cache
          volumeMounts:
            - mountPath: "/uploads"
              name: cache
          securityContext:
            {}
          image: "epamedp/tekton-cache:0.1.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: UPLOADER_HOST
              value: "0.0.0.0"
            - name: UPLOADER_PORT
              value: "8080"
            - name: UPLOADER_DIRECTORY
              value: "/uploads"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  name: tekton-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      
      app.kubernetes.io/name: tekton-dashboard
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: edp-tekton-0.12.0
        app.kubernetes.io/name: tekton-dashboard
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "0.12.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      
        - args:
            - --port=9097
            - --logout-url=
            - --pipelines-namespace=tekton-pipelines
            - --triggers-namespace=tekton-pipelines
            - --read-only=false
            - --log-level=info
            - --log-format=json
            - --stream-logs=true
            - --external-logs=
            - --namespaces=default
          env:
            - name: INSTALLED_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard:v0.46.0
          livenessProbe:
            httpGet:
              path: /health
              port: 9097
          name: tekton-dashboard
          ports:
            - containerPort: 9097
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9097
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 60m
              memory: 70Mi
            requests:
              cpu: 50m
              memory: 40Mi
      serviceAccount: tekton-dashboard
      serviceAccountName: tekton-dashboard
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-interceptor
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tekton-interceptor
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tekton-interceptor
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: tekton-interceptor
      securityContext:
        {}
      containers:
        - command:
          - /edpinterceptor
          args:
            - '-logtostderr'
            - '-stderrthreshold'
            - INFO
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: config-logging-triggers
            - name: CONFIG_OBSERVABILITY_NAME
              value: config-observability-triggers
            - name: METRICS_DOMAIN
              value: tekton.dev/triggers
            - name: INTERCEPTOR_NAME
              value: edp
          name: tekton-triggers-edp-interceptor
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "epamedp/edp-tekton:0.12.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 70m
              memory: 60Mi
            requests:
              cpu: 50m
              memory: 40Mi
---
# Source: edp-install/charts/edp-tekton/templates/resources/pruner/cron-job.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: tekton-resource-pruner
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "0 10 */1 * *"
  suspend: false
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        spec:
          volumes:
            - name: scripts
              configMap:
                name: tekton-resource-pruner-scripts
          containers:
            - name: kubectl
              image: "bitnami/kubectl:1.25"
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              command:
                - bash
                - /scripts/tekton-prune.sh
              volumeMounts: [{name: scripts, mountPath: /scripts}]
              resources:
                limits:
                  cpu: 100m
                  memory: 70Mi
                requests:
                  cpu: 50m
                  memory: 50Mi
          restartPolicy: OnFailure
          serviceAccountName: tekton-resource-pruner
          serviceAccount: tekton-resource-pruner
      ttlSecondsAfterFinished: 10
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
---
# Source: edp-install/charts/edp-headlamp/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: portal
  labels:
    helm.sh/chart: edp-headlamp-0.15.0
    app.kubernetes.io/name: portal
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.15.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: portal-default.%!s(<nil>)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: portal
                port:
                  number: 80
---
# Source: edp-install/charts/edp-tekton/templates/dashboard/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tekton-dashboard
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/name: tekton-dashboard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: tekton-default.%!s(<nil>)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tekton-dashboard
                port:
                  name: http
---
# Source: edp-install/charts/edp-tekton/templates/interceptor/interceptor.yaml
apiVersion: triggers.tekton.dev/v1alpha1
kind: Interceptor
metadata:
  name: edp
  labels:
    server/type: https
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  clientConfig:
    service:
      name: tekton-triggers-edp-interceptor
      namespace: default
      port: 8443
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-gradle'
      description: "Project name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-gradle'
      description: "Project name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-gradle'
      description: "Project name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - sonar
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - update-build-number
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - update-build-number
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-aut-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - update-build-number
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - get-version
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - get-version
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-aut-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - get-version
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - get-version
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: test
      taskRef:
        kind: Task
        name: run-tests-for-autotests
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: test
      taskRef:
        kind: Task
        name: run-tests-for-autotests
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/autotests/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-aut-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: "maven:3.9.0-eclipse-temurin-17"
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: test
      taskRef:
        kind: Task
        name: run-tests-for-autotests
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/cd-autotests/autotest.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: autotests-maven
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/SergK/autotests.git"
    - name: git-source-revision
      default: "master"
    - name: stage-name
      default: "dev"
    - name: base-image
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
          kind: Task
          name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: run-autotest
      taskRef:
        kind: Task
        name: run-autotests-maven
      runAfter:
        - fetch-repository
      params:
        - name: base-image
          value: "$(params.base-image)"
        - name: stage-name
          value: "$(params.stage-name)"
      workspaces:
        - name: source
          workspace: shared-workspace
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/cd-autotests/autotest.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: autotests-gradle
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/SergK/autotests.git"
    - name: git-source-revision
      default: "master"
    - name: stage-name
      default: "dev"
    - name: base-image
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
          kind: Task
          name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: run-autotest
      taskRef:
        kind: Task
        name: run-autotests-gradle
      runAfter:
        - fetch-repository
      params:
        - name: base-image
          value: "$(params.base-image)"
        - name: stage-name
          value: "$(params.stage-name)"
      workspaces:
        - name: source
          workspace: shared-workspace
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/cd/deploy-with-autotests.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy-with-autotests
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  description: |
    This Pipeline is used to deploy applications to the target Stage (Environment).
  workspaces:
    - name: shared-workspace
  params:
    - name: pipelineUrl
      description: |
        URL of the pipeline run in Tekton Dashboard.
      type: string
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
      type: string
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
      type: string
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
      type: string
    - name: autotes-pipeline
      default: "autotes-pipeline"
    - name: codebase_tags
      default: "codebase_tags"
    - name: parent-pipeline-name
      default: $(context.pipelineRun.name)
  tasks:
    - name: pre-deploy
      taskRef:
        kind: Task
        name: run-quality-gate
      params:
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)
        - name: BASE_IMAGE
          value: "bitnami/kubectl:1.25.4"
        - name: EXTRA_COMMANDS
          value:
            echo "Hello World"

    - name: deploy-app
      taskRef:
        kind: Task
        name: deploy-applicationset-cli
      runAfter:
        - pre-deploy
      params:
        - name: PIPELINE
          value: $(params.CDPIPELINE)
        - name: STAGE
          value: $(params.CDSTAGE)
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)

    - name: post-deploy
      taskRef:
        kind: Task
        name: run-quality-gate
      runAfter:
        - deploy-app
      params:
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)
        - name: BASE_IMAGE
          value: "bitnami/kubectl:1.25.4"
        - name: EXTRA_COMMANDS
          value:
            echo "Hello World"

    - name: init-autotest
      taskRef:
          kind: Task
          name: init-autotest
      runAfter:
         - post-deploy
      params:
        - name: stage-name
          value: $(params.CDSTAGE)
        - name: cd-pipeline-name
          value: $(params.CDPIPELINE)
        - name: AUTOTEST_PIPELINES
          value: $(params.autotes-pipeline)
        - name: codebase_tags
          value: $(params.codebase_tags)
        - name: parent-pipeline-name
          value: $(params.parent-pipeline-name)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: wait-for-autotests
      taskRef:
          kind: Task
          name: wait-for-autotests
      runAfter:
         - init-autotest
      params:
        - name: AUTOTEST_PIPELINES
          value: $(params.autotes-pipeline)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: promote-images
      taskRef:
        kind: Task
        name: promote-images
      runAfter:
        - wait-for-autotests
      params:
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)
        - name: CDPIPELINE_STAGE
          value: $(params.CDSTAGE)
        - name: CDPIPELINE_CR
          value: $(params.CDPIPELINE)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/cd/deploy.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  description: |
    This Pipeline is used to deploy applications to the target Stage (Environment).
  params:
    - name: pipelineUrl
      description: |
        URL of the pipeline run in Tekton Dashboard.
      type: string
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
      type: string
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
      type: string
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
      type: string
  tasks:
    - name: pre-deploy
      taskRef:
        kind: Task
        name: run-quality-gate
      params:
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)
        - name: BASE_IMAGE
          value: "bitnami/kubectl:1.25.4"
        - name: EXTRA_COMMANDS
          value:
            echo "Hello World"

    - name: deploy-app
      taskRef:
        kind: Task
        name: deploy-applicationset-cli
      runAfter:
        - pre-deploy
      params:
        - name: PIPELINE
          value: $(params.CDPIPELINE)
        - name: STAGE
          value: $(params.CDSTAGE)
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)

    - name: post-deploy
      taskRef:
        kind: Task
        name: run-quality-gate
      runAfter:
        - deploy-app
      params:
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)
        - name: BASE_IMAGE
          value: "bitnami/kubectl:1.25.4"
        - name: EXTRA_COMMANDS
          value:
            echo "Hello World"

    - name: promote-images
      taskRef:
        kind: Task
        name: promote-images
      runAfter:
        - post-deploy
      params:
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)
        - name: CDPIPELINE_STAGE
          value: $(params.CDSTAGE)
        - name: CDPIPELINE_CR
          value: $(params.CDPIPELINE)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-dotnet-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - push
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dotnet-publish
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-dotnet-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - push
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dotnet-publish
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-csharp
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - push
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dotnet-publish
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-csharp
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - push
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dotnet-publish
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-dotnet-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-dotnet-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-csharp
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-csharp
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.branch.name=${BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            slnFilename=$(ls *.sln)
            nugetPackagesPath="/tmp/project-nupkgs/"
            dotnet pack ${slnFilename} --no-build --output ${nugetPackagesPath} "-p:PackageVersion=$(tasks.get-version.results.VERSION)"
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageSnapshots"
            else
                ARTIFACT_REPOSITORY_SOURCE="nugetStorageReleases"
            fi
            
            # Note: The api-key is only used as a placeholder. 
            # Ref: https://learn.microsoft.com/en-us/azure/devops/artifacts/nuget/dotnet-exe?view=azure-devops#publish-packages
            dotnet nuget push ${nugetPackagesPath} --source ${ARTIFACT_REPOSITORY_SOURCE} --api-key key
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.pullrequest.key=${KEY_ID} \
              /d:sonar.pullrequest.branch=${SOURCE_BRANCH} \
              /d:sonar.pullrequest.base=${TARGET_BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.pullrequest.key=${KEY_ID} \
              /d:sonar.pullrequest.branch=${SOURCE_BRANCH} \
              /d:sonar.pullrequest.base=${TARGET_BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-3.1-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-3.1"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-3.1'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
      description: "dotnet-sdk image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.pullrequest.key=${KEY_ID} \
              /d:sonar.pullrequest.branch=${SOURCE_BRANCH} \
              /d:sonar.pullrequest.base=${TARGET_BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - dotnet-publish
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/csharp/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-dotnet-dotnet-6.0-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'csharp-dotnet-dotnet-6.0'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: "mcr.microsoft.com/dotnet/sdk:6.0.407-alpine3.17"
      description: "dotnet-sdk image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-dotnet
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-dotnet
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
        - name: BASE_IMAGE
          value: 'epamedp/tekton-dotnet:6.0.2'
        - name: EXTRA_COMMANDS
          value: |
            slnFilename=$(ls *.sln)
            dotnet sonarscanner begin \
              /d:sonar.host.url=${SONAR_HOST_URL} \
              /d:sonar.qualitygate.wait=true \
              /d:sonar.login=${SONAR_TOKEN} \
              /k:${SONAR_PROJECT_KEY} \
              /n:${SONAR_PROJECT_NAME} \
              /d:sonar.pullrequest.key=${KEY_ID} \
              /d:sonar.pullrequest.branch=${SOURCE_BRANCH} \
              /d:sonar.pullrequest.base=${TARGET_BRANCH}
            dotnet build ${sln_filename}
            dotnet sonarscanner end /d:sonar.login=${SONAR_TOKEN}
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dotnet-publish
      taskRef:
        kind: Task
        name: dotnet
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            dotnet publish --configuration Release --output app
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - dotnet-publish
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/docker/kaniko/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-kaniko-docker-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'docker-kaniko'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dockerfile-lint
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/docker/kaniko/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-kaniko-docker-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'docker-kaniko'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - dockerfile-lint
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/docker/kaniko/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-kaniko-docker-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:

    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-beego-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "beego-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-gin-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-gin"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "gin-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-operator-sdk-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-operator-sdk"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "operator-sdk-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-beego-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "beego-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-gin-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-gin"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "gin-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-operator-sdk-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-operator-sdk"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "operator-sdk-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-beego-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: "beego-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-gin-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-gin"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: "gin-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/go/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-go-operator-sdk-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-operator-sdk"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: "operator-sdk-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    # we don't need subPath for the source workspace, since we need to have access to both folders
    # /source and /cache
    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
            cd source
            make build
            make test
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/groovy/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-codenarc-codenarc-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/groovy-pipeline-codenarc-codenarc"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'groovy-pipeline'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: codenarc
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            build -x test -x compileGroovy
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/groovy/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-codenarc-codenarc-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/groovy-pipeline-codenarc-codenarc"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'groovy-pipeline'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: codenarc
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            build -x test -x compileGroovy
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/groovy/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-codenarc-codenarc-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/groovy-pipeline-codenarc-codenarc"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'groovy-pipeline'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: build
      taskRef:
        kind: Task
        name: codenarc
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            build -x test -x compileGroovy
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            -x compileGroovy \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm-pipelines/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-pipeline-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "."
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - fetch-repository
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: release_name
          value: $(params.CODEBASE_NAME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-template
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm-pipelines/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-pipeline-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "."
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-helm-chart
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: release_name
          value: $(params.CODEBASE_NAME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-template
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm-pipelines/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-pipeline-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: gitfullrepositoryname
      description: "Repository full name"
      type: string
    - name: gitsha
      description: "Commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "."
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - helm-docs
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: release_name
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-helm-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: check-chart-name
      params:
        - name: codebase_name
          value: $(params.CODEBASE_NAME)
        - name: chart_dir
          value: $(params.CHART_DIR)
      runAfter:
        - fetch-repository
      taskRef:
        name: check-helm-chart-name
      workspaces:
        - name: source
          subPath: source
          workspace: shared-workspace

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-helm-default
      runAfter:
        - init-values
      params:
        - name: chart-dir
          value: $(params.CHART_DIR)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: release_name
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-push
      taskRef:
        kind: Task
        name: helm-push
      runAfter:
        - helm-template
      params:
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: chart-dir
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.VCS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-helm-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: check-chart-name
      params:
        - name: codebase_name
          value: $(params.CODEBASE_NAME)
        - name: chart_dir
          value: $(params.CHART_DIR)
      runAfter:
        - fetch-repository
      taskRef:
        name: check-helm-chart-name
      workspaces:
        - name: source
          subPath: source
          workspace: shared-workspace

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-helm-chart
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: release_name
          value: $(params.CODEBASE_NAME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-push
      taskRef:
        kind: Task
        name: helm-push
      runAfter:
        - helm-template
      params:
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: chart-dir
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-charts-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "charts"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-library-lint
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
        - name: TARGET_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-library-dependency-update
      runAfter:
        - helm-lint
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-template
      taskRef:
        kind: Task
        name: helm-library-template
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: release_name
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-push
      taskRef:
        kind: Task
        name: helm-push-lib
      runAfter:
        - helm-template
      params:
        - name: image-tag
          value: $(tasks.get-version.results.VERSION)
        - name: chart-dir
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-charts-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/container-kaniko-docker"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "charts"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-library-lint
      runAfter:
        - get-version
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
        - name: TARGET_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-library-dependency-update
      runAfter:
        - helm-lint
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-template
      taskRef:
        kind: Task
        name: helm-library-template
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: release_name
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-push
      taskRef:
        kind: Task
        name: helm-push-lib
      runAfter:
        - helm-template
      params:
        - name: chart-dir
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-charts-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: gitfullrepositoryname
      description: "Repository full name"
      type: string
    - name: gitsha
      description: "Commit sha"
      type: string
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "charts"
      type: string
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
      type: string
    - name: targetBranch
      description: "Target branch of Merge Request"
      type: string
    - name: CHART_VERSION_INCREMENT
      description: "Check Chart version increment"
      default: 'true'
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-library-docs
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: fetch-target-branch
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - fetch-repository
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git fetch --unshallow
            git fetch origin $(params.targetBranch):refs/remotes/origin/$(params.targetBranch)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-library-lint
      runAfter:
        - fetch-target-branch
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
        - name: TARGET_BRANCH
          value: $(params.targetBranch)
        - name: CHART_VERSION_INCREMENT
          value: $(params.CHART_VERSION_INCREMENT)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-library-dependency-update
      runAfter:
        - helm-lint
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-template
      taskRef:
        kind: Task
        name: helm-library-template
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: release_name
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/helm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-helm-helm-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      description: "Project name"
      type: string
    - name: gitfullrepositoryname
      description: "Repository full name"
      type: string
    - name: gitsha
      description: "Commit sha"
      type: string
    - name: CHART_DIR
      description: "The directory in source that contains the helm chart"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: check-chart-name
      params:
        - name: codebase_name
          value: $(params.CODEBASE_NAME)
        - name: chart_dir
          value: $(params.CHART_DIR)
      runAfter:
        - fetch-repository
      taskRef:
        name: check-helm-chart-name
      workspaces:
        - name: source
          subPath: source
          workspace: shared-workspace

    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-dependency-update
      taskRef:
        kind: Task
        name: helm-dependency-update
      runAfter:
        - helm-docs
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - helm-dependency-update
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-template
      taskRef:
        kind: Task
        name: helm-template
      runAfter:
        - helm-lint
      params:
        - name: release_name
          value: $(params.CODEBASE_NAME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/infrastructure/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-aws-inf-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/terraform-terraform-aws"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - get-version
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - terraform-check
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/infrastructure/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-aws-inf-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/terraform-terraform-aws"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - get-version
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - terraform-check
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/infrastructure/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-aws-inf-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/terraform-terraform-aws"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-gradle'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-gradle
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
        - name: IS_RELEASE_BRANCH
          value: $(tasks.get-version.results.IS_RELEASE_BRANCH)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.branch.name=$(params.git-source-revision) \
            -Dsonar.qualitygate.wait=true \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -Dorg.gradle.internal.publish.checksums.insecure=true \
            -PsnapshotsRepoUrl=${NEXUS_HOST_URL}${SNAPSHOTS_REPO_PATH} \
            -PreleasesRepoUrl=${NEXUS_HOST_URL}${RELEASES_REPO_PATH} \
            publish -i
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java11-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - build
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java17-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk17'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk17'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - build
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/gradle/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-gradle-java8-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'gradle:7.5.1-jdk8'
      description: "gradle image version"
      type: string
    - name: sonar_image
      default: 'gradle:7.5.1-jdk11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: edp-gradle
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-gradle
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: $(params.sonar_image)
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: EXTRA_COMMANDS
          value: |
            -Dsonar.projectKey=$(params.CODEBASE_NAME) \
            -Dsonar.projectName=$(params.CODEBASE_NAME) \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.pullrequest.key=$(params.changeNumber) \
            -Dsonar.pullrequest.branch=$(params.git-source-revision) \
            -Dsonar.pullrequest.base=$(params.targetBranch) \
            sonarqube
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - build
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-maven-module
        - push
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-version
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - versions:set
            - versions:commit
            - '-DnewVersion=$(tasks.get-version.results.VERSION)'
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
        - security
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.branch.name=$(params.git-source-revision)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: push
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - build
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - deploy
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java11-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java11-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - get-maven-module
        - build
        - dockerfile-lint
      params:
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java17-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java17-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-17'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - get-maven-module
        - build
        - dockerfile-lint
      params:
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/java/maven/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-maven-java8-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/sergk/spring-petclinic"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'java8-maven'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'maven:3.9.0-eclipse-temurin-8'
      description: "maven image version"
      type: string
    - name: sonar_image
      default: 'maven:3.9.0-eclipse-temurin-11'
      description: "sonar image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache
    - name: get-maven-module
      taskRef:
        kind: Task
        name: get-maven-module
      runAfter:
        - init-values
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: compile
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - get-cache
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - compile
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: test
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - compile
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - org.jacoco:jacoco-maven-plugin:prepare-agent
            - '-Dmaven.test.failure.ignore=true'
            - verify
            - org.jacoco:jacoco-maven-plugin:report
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-maven
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: MAVEN_IMAGE
          value: $(params.sonar_image)
        - name: EXTRA_COMMANDS
          value:
            - -B
            - '-Dsonar.projectKey=$(params.CODEBASE_NAME)'
            - '-Dsonar.projectName=$(params.CODEBASE_NAME)'
            - '-Dsonar.pullrequest.key=$(params.changeNumber)'
            - '-Dsonar.pullrequest.branch=$(params.git-source-revision)'
            - '-Dsonar.pullrequest.base=$(params.targetBranch)'
            - '-Dsonar.qualitygate.wait=true'
            - verify
            - sonar:sonar
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: build
      taskRef:
        kind: Task
        name: maven
      runAfter:
        - sonar
      params:
        - name: MAVEN_IMAGE
          value: $(params.image)
        - name: GOALS
          value:
            - -B
            - clean
            - package
            - '-DskipTests=true'
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - get-maven-module
        - build
        - dockerfile-lint
      params:
        - name: context
          value: "$(tasks.get-maven-module.results.DEPLOYABLE_MODULE_DIR)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/antora/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-antora-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-antora"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'antora-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'antora/antora:3.1.4'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: PATH_CONTEXT
          value: "source"
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            export npm_config_userconfig=/var/configmap/.npmrc-ci
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            export NPM_CACHE_DIR=/workspace/source/cache
            npm ci
            npm run build:prod
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/antora/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-antora-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-antora"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'antora-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'antora/antora:3.1.4'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: PATH_CONTEXT
          value: "source"
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            export npm_config_userconfig=/var/configmap/.npmrc-ci
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            export NPM_CACHE_DIR=/workspace/source/cache
            npm ci
            npm run build:prod
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/antora/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-antora-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-antora"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: 'antora-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'antora/antora:3.1.4'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:

    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: PATH_CONTEXT
          value: "source"
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            export npm_config_userconfig=/var/configmap/.npmrc-ci
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            export NPM_CACHE_DIR=/workspace/source/cache
            npm ci
            npm run build:prod
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - build
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm-default
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            # Get Nexus repository name
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
            
            if [[ "$versionLowerCase" == *"snapshot"* ]]; then
                export npm_config_userconfig=/var/configmap/.npmrc-publish-snapshots
            else
                export npm_config_userconfig=/var/configmap/.npmrc-publish-releases
            fi
            npm publish
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace


    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-react-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-angular-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-angular"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'angular-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-vue-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-vue"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'vue-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-express-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-express"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'express-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/js/npm/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-npm-next-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-next"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: CODEBASE_NAME
      default: 'next-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'docker.io/library/node:18.20.3-alpine3.20'
      description: "npm image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: edp-npm
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/opa/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-opa-opa-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/rego-opa-opa"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'rego-opa'
      description: "Project name"
      type: string
    - name: image
      default: 'openpolicyagent/opa:0.45.0-debug'
      description: "opa image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: test
      taskRef:
        name: opa
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            python "${JUNIT_SCRIPT}" "${OPA_RESULTS}" > testReport.xml
            cat testReport.xml
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - test
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/opa/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-opa-opa-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/rego-opa-opa"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'rego-opa'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'openpolicyagent/opa:0.45.0-debug'
      description: "opa image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: test
      taskRef:
        name: opa
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            python "${JUNIT_SCRIPT}" "${OPA_RESULTS}" > testReport.xml
            cat testReport.xml
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - test
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/opa/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-opa-opa-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/rego-opa-opa"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: image
      default: 'openpolicyagent/opa:0.45.0-debug'
      description: "opa image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:

    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: test
      taskRef:
        kind: Task
        name: opa
      runAfter:
        - fetch-repository
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            python "${JUNIT_SCRIPT}" "${OPA_RESULTS}" > testReport.xml
            cat testReport.xml
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-fastapi-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python-default
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: EXTRA_COMMANDS
          value: |
            pip3 install -r test-requirements.txt
            python setup.py sdist

            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')

            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi

            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"

            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-flask-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python-default
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: EXTRA_COMMANDS
          value: |
            pip3 install -r test-requirements.txt
            python setup.py sdist

            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')

            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi

            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"

            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-fastapi-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: EXTRA_COMMANDS
          value: |
            pip3 install -r test-requirements.txt
            python setup.py sdist

            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')

            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi

            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"

            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-flask-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: EXTRA_COMMANDS
          value: |
            pip3 install -r test-requirements.txt
            python setup.py sdist

            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')

            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi

            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"

            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-fastapi-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - sonar
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - sonar
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/fastapi/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-flask-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory

            # build
            python setup.py clean build sdist bdist_wheel

            # lint
            pip3 install -r test-requirements.txt
            pylint --output-format=colorized *.py
            flake8 --exclude .local --filename=*.py
            # test
            pytest -sv --color=yes
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - sonar
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - sonar
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-build-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-app-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python-default
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: 'python:3.8-slim'
        - name: EXTRA_COMMANDS
          value: |
            pip install twine==4.0.1
            python setup.py sdist
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi
    
            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"
    
            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-build-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-app-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: 'python:3.8-slim'
        - name: EXTRA_COMMANDS
          value: |
            pip install twine==4.0.1
            python setup.py sdist
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi
    
            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"
    
            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - push
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
        - name: BASE_IMAGE
          value: $(params.image)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python-default
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: 'python:3.8-slim'
        - name: EXTRA_COMMANDS
          value: |
            pip install twine==4.0.1
            python setup.py sdist
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi
    
            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"
    
            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-python
      runAfter:
        - get-version
      params:
        - name: VERSION
          value: $(tasks.get-version.results.VERSION)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - update-build-number
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: push
      taskRef:
        kind: Task
        name: python
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: 'python:3.8-slim'
        - name: EXTRA_COMMANDS
          value: |
            pip install twine==4.0.1
            python setup.py sdist
    
            # Get package version from the get-version task
            versionLowerCase=$(echo $(tasks.get-version.results.VERSION) | tr '[:upper:]' '[:lower:]')
    
            # # Define a repository for publishing the package
            if echo "$versionLowerCase" | grep -q "snapshot"; then
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_SNAPSHOTS}"
            else
                TWINE_REPOSITORY_URL="${REPOSITORY_URL_RELEASES}"
            fi
    
            echo "[TEKTON][INFO] TWINE_REPOSITORY_URL contains ${TWINE_REPOSITORY_URL}"
    
            twine upload dist/*
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - push
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - push
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
            pip3 install .
            [ -f run_service.py ] && python run_service.py &
            python setup.py pytest
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/python/github-review.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-python-python-3.8-app-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/python-python-python-3.8"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
      default: ""
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "python-app"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: image
      default: 'python:3.8-alpine3.16'
      description: "python image version"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: helm-docs
      taskRef:
        kind: Task
        name: helm-docs
      params:
        - name: CHART_DIR
          value: "deploy-templates"
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: build
      taskRef:
        kind: Task
        name: python
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            # we checkout the source code in the /source directory
            # and hold cache in the /cache directory
    
            python setup.py clean build install --user
            pip3 install .
            [ -f run_service.py ] && python run_service.py &
            python setup.py pytest
      workspaces:
        - name: source
          workspace: shared-workspace
    
    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/terraform/github-build-lib-default.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-terraform-lib-build-default
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/hcl-terraform-terraform"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - get-version
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - terraform-check
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/terraform/github-build-lib-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-terraform-lib-build-edp
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/hcl-terraform-terraform"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranch name"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - get-version
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - terraform-check
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"
---
# Source: edp-install/charts/edp-tekton/templates/pipelines/terraform/github-review-lib.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: github-terraform-terraform-lib-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-default./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/hcl-terraform-terraform"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, ref…)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: 'terraform-terraform'
      description: "Project name"
      type: string
    - name: gitfullrepositoryname
      description: "repository full name"
      type: string
    - name: gitsha
      description: "commit sha"
      type: string
    - name: terraform_default_version
      type: string
      default: "1.4.5"
      description: The default terraform version used if the `.terraform-version` file does not exist in the repository.

  tasks:
    - name: github-set-pending-status
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has started"
        - name: STATE
          value: "pending"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
    
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - github-set-pending-status
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)
    - name: terraform-check
      taskRef:
        kind: Task
        name: terraform-check
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            if [ -f .terraform-version ]; then
                tfenv install
            else
                tfenv install "$(params.terraform_default_version)";
                tfenv use "$(params.terraform_default_version)";
            fi
            terraform init
            chown -R $(whoami):$(whoami) .
            pre-commit run --all-files
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: github-set-success-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build was successful"
        - name: STATE
          value: "success"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
  
    - name: github-set-failure-status
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: github-set-status
      params:
        - name: REPO_FULL_NAME
          value: $(params.gitfullrepositoryname)
        - name: DESCRIPTION
          value: "Build has failed"
        - name: STATE
          value: "failure"
        - name: AUTH_TYPE
          value: Token
        - name: GITHUB_TOKEN_SECRET_NAME
          value: ci-github
        - name: GITHUB_TOKEN_SECRET_KEY
          value: token
        - name: SHA
          value: $(params.gitsha)
        - name: TARGET_URL
          value: $(params.pipelineUrl)
---
# Source: edp-install/charts/edp-tekton/templates/resources/quicklinks/dashboard.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: tekton
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: system
  url: "https://tekton-default."
  visible: true
  icon: ""
---
# Source: edp-install/templates/quick-links/argocd.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: argocd
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB2aWV3Qm94PSIwIDAgMzYwIDM2MCI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOm5vbmU7fS5jbHMtMntmaWxsOiNlOTY1NGI7fS5jbHMtM3tmaWxsOiNiNmNmZWE7fS5jbHMtNHtmaWxsOiNlNmY1Zjg7fS5jbHMtNXtmaWxsOiNkMGU4ZjA7fS5jbHMtNntmaWxsOiNlZTc5NGI7fS5jbHMtN3tjbGlwLXBhdGg6dXJsKCNjbGlwLXBhdGgpO30uY2xzLTh7b3BhY2l0eTowLjIyO30uY2xzLTl7ZmlsbDojZTM0ZTNiO30uY2xzLTEwe29wYWNpdHk6MC41O30uY2xzLTExe2ZpbGw6I2ZiZGZjMzt9LmNscy0xMntmaWxsOiMwMTAxMDE7fS5jbHMtMTN7ZmlsbDojZmZmO30uY2xzLTE0e29wYWNpdHk6MC4yNTt9PC9zdHlsZT48Y2xpcFBhdGggaWQ9ImNsaXAtcGF0aCI+PHBvbHlsaW5lIGNsYXNzPSJjbHMtMSIgcG9pbnRzPSIyNDEuMDE5IDExNS42ODcgMjMzLjg0NiAyNzkuNDc5IDEyNi4yNDUgMjc5LjQ3OSAxMjAuMjY3IDExNS42ODciLz48L2NsaXBQYXRoPjwvZGVmcz48dGl0bGU+Y2xvdWRldmVudHMtaWNvbi1jb2xvcjwvdGl0bGU+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTIzLjg1NDEsMjUxLjk4MTU2cy0yLjM5MTEyLDcuMTczMzgtNS45Nzc4MSwxMC43NjAwNmExMC44NTM2MSwxMC44NTM2MSwwLDAsMS04LjM2ODk0LDMuNTg2NjhBMTM4LjYwNTg5LDEzOC42MDU4OSwwLDAsMSw5MS41NzM5MSwyNjkuOTE1czguMzY4OTMsMS4xOTU1NywxNy45MzM0NCwyLjM5MTE0YzMuNTg2NjksMCwzLjU4NjY5LDAsNS45Nzc4MiwxLjE5NTU2LDUuOTc3ODEsMCw4LjM2ODkzLTMuNTg2NjgsOC4zNjg5My0zLjU4NjY4WiIvPjxwYXRoIGNsYXNzPSJjbHMtMiIgZD0iTTIzMy44NDU5MSwyNTEuOTgxNTZzMi4zOTExMyw3LjE3MzM4LDUuOTc3ODEsMTAuNzYwMDZhMTAuODUzNjUsMTAuODUzNjUsMCwwLDAsOC4zNjg5NSwzLjU4NjY4LDEzOC42MDYyMSwxMzguNjA2MjEsMCwwLDAsMTcuOTMzNDUsMy41ODY2OHMtOC4zNjksMS4xOTU1Ny0xOS4xMjksMi4zOTExNGMtMy41ODY2NywwLTMuNTg2NjcsMC01Ljk3NzgxLDEuMTk1NTYtNy4xNzMzOCwwLTguMzY5LTMuNTg2NjgtOC4zNjktMy41ODY2OFoiLz48Y2lyY2xlIGNsYXNzPSJjbHMtMyIgY3g9IjE4MC4wNDU1NyIgY3k9IjEzMy42MjA4IiByPSIxMjkuMTIwOCIvPjxjaXJjbGUgY2xhc3M9ImNscy00IiBjeD0iMTgwLjA0NTU3IiBjeT0iMTMzLjYyMDgiIHI9IjEyNC4zMzg1NSIvPjxjaXJjbGUgY2xhc3M9ImNscy01IiBjeD0iMTgwLjA0NTU3IiBjeT0iMTM2LjAxMTk0IiByPSIxMDEuNjIyODUiLz48ZyBpZD0iQm9keSI+PHBhdGggY2xhc3M9ImNscy02IiBkPSJNMTIwLjI2NzQxLDE4My44MzQ0NnM4LjM2ODk0LDEzNS4wOTg2MSw4LjM2ODk0LDEzNy40ODk3NGMwLDEuMTk1NTUsMS4xOTU1NywzLjU4NjY4LTQuNzgyMjUsNS45Nzc4MnMtMjUuMTA2ODIsNy4xNzMzNi0yNS4xMDY4Miw3LjE3MzM2aDI4LjY5MzVjMTMuMTUxMiwwLDEzLjE1MTItMTAuNzYwMDksMTMuMTUxMi0xMy4xNTExOHMzLjU4NjY4LTUzLjgwMDMzLDMuNTg2NjgtNTMuODAwMzMsMS4xOTU1Nyw2MC45NzM2OSwxLjE5NTU3LDYzLjM2NDgzLTEuMTk1NTUsNS45Nzc4MS05LjU2NDUsOC4zNjljLTUuOTc3ODEsMS4xOTU1NC0yMy45MTEyNiw0Ljc4MjI3LTIzLjkxMTI2LDQuNzgyMjdoMjcuNDk3OTRjMTYuNzM3ODgsMCwxNi43Mzc4OC0xMC43NjAwOSwxNi43Mzc4OC0xMC43NjAwOWwzLjU4NjctNTMuODAwMzNzMS4xOTU1Nyw1My44MDAzMywxLjE5NTU3LDU5Ljc3ODE1YzAsNC43ODIyNy0zLjU4NjY4LDguMzY4OTUtMTYuNzM3ODgsMTAuNzYwMDgtOC4zNjksMi4zOTExNC0xOS4xMjksNC43ODIyNy0xOS4xMjksNC43ODIyN2gzMS4wODQ2NGMxNS41NDIzMS0xLjE5NTU0LDE3LjkzMzQ1LTExLjk1NTYzLDE3LjkzMzQ1LTExLjk1NTYzbDI2LjMwMjM5LTEzMy45MDMwNloiLz48cGF0aCBjbGFzcz0iY2xzLTYiIGQ9Ik0yMzkuODIzNzIsMTgzLjgzNDQ2cy04LjM2OSwxMzUuMDk4NjEtOC4zNjksMTM3LjQ4OTc0YzAsMS4xOTU1NS0xLjE5NTU3LDMuNTg2NjgsNC43ODIyNSw1Ljk3NzgyczI1LjEwNjgzLDcuMTczMzYsMjUuMTA2ODMsNy4xNzMzNkgyMzIuNjUwMzRjLTEzLjE1MTIsMC0xMy4xNTEyLTEwLjc2MDA5LTEzLjE1MTItMTMuMTUxMThzLTMuNTg2NjgtNTMuODAwMzMtMy41ODY2OC01My44MDAzMy0xLjE5NTU2LDYwLjk3MzY5LTEuMTk1NTYsNjMuMzY0ODMsMS4xOTU1Niw1Ljk3NzgxLDkuNTY0NDksOC4zNjljNS45Nzc4MSwxLjE5NTU0LDIzLjkxMTI2LDQuNzgyMjcsMjMuOTExMjYsNC43ODIyN0gyMjAuNjk0NzFjLTE2LjczNzg4LDAtMTYuNzM3ODgtMTAuNzYwMDktMTYuNzM3ODgtMTAuNzYwMDlsLTMuNTg2Ny01My44MDAzM3MtMS4xOTU1Nyw1My44MDAzMy0xLjE5NTU3LDU5Ljc3ODE1YzAsNC43ODIyNywzLjU4NjY4LDguMzY4OTUsMTYuNzM3ODgsMTAuNzYwMDgsOC4zNjg5NSwyLjM5MTE0LDE5LjEyOSw0Ljc4MjI3LDE5LjEyOSw0Ljc4MjI3SDIwMy45NTY4MWMtMTUuNTQyMzEtMS4xOTU1NC0xNy45MzM0NC0xMS45NTU2My0xNy45MzM0NC0xMS45NTU2M0wxNTkuNzIxLDIwOC45NDEyOVoiLz48cGF0aCBjbGFzcz0iY2xzLTYiIGQ9Ik0yNDEuMDE5MjcsMTE4LjA3ODVjMCwzMy40NzU3NS0yNy40OTc5NCw1OS43NzgxNC01OS43NzgxNSw1OS43NzgxNFMxMjEuNDYzLDE1MC4zNTg3LDEyMS40NjMsMTE4LjA3ODVzMjcuNDk3OTQtNTkuNzc4MTUsNTkuNzc4MTUtNTkuNzc4MTVTMjQxLjAxOTI3LDg0LjYwMjczLDI0MS4wMTkyNywxMTguMDc4NVoiLz48ZyBjbGFzcz0iY2xzLTciPjxjaXJjbGUgY2xhc3M9ImNscy02IiBjeD0iMTgxLjI0MTEyIiBjeT0iMTUwLjM1ODciIHI9IjEwNi40MDUxIi8+PC9nPjxnIGNsYXNzPSJjbHMtOCI+PHBhdGggY2xhc3M9ImNscy05IiBkPSJNMjM3LjQzMjU5LDE4My44MzQ0NnM3LjE3MzM4LTYzLjM2NDgzLTIuMzkxMTQtODcuMjc2MWMtMTcuOTMzNDQtNDEuODQ0NzEtNTkuNzc4MTUtMzguMjU4LTU5Ljc3ODE1LTM4LjI1OHMyMy45MTEyNiw5LjU2NDUsMjUuMTA2ODMsNDUuNDMxMzljMS4xOTU1NywyNS4xMDY4MiwwLDYyLjE2OTI3LDAsNjIuMTY5MjdaIi8+PC9nPjwvZz48ZyBpZD0iRmFjZSI+PGcgY2xhc3M9ImNscy0xMCI+PGNpcmNsZSBjbGFzcz0iY2xzLTExIiBjeD0iMTU2LjEzNDMxIiBjeT0iODUuNzk4MyIgcj0iOC4zNjg5NCIvPjwvZz48cGF0aCBjbGFzcz0iY2xzLTEyIiBkPSJNMjAxLjU2NTcsMjA3Ljc0NTcyYzAsMjAuMzI0NTgtOS41NjQ1LDMzLjQ3NTc1LTIxLjUyMDEzLDMzLjQ3NTc1cy0yMS41MjAxMi0xNS41NDIzMS0yMS41MjAxMi0zNS44NjY4OWMwLDAsOS41NjQ0OSwxOS4xMjksMjIuNzE1NjksMTkuMTI5UzIwMS41NjU3LDIwNy43NDU3MiwyMDEuNTY1NywyMDcuNzQ1NzJaIi8+PHBhdGggY2xhc3M9ImNscy0xMyIgZD0iTTIwMS41NjU3LDIwNy43NDU3MmMwLDEzLjE1MTItOS41NjQ1LDIwLjMyNDU4LTIxLjUyMDEzLDIwLjMyNDU4UzE1OS43MjEsMjE4LjUwNTc4LDE1OS43MjEsMjA2LjU1MDE1YzAsMCw5LjU2NDUsMTEuOTU1NjMsMjIuNzE1NywxMS45NTU2M1MyMDEuNTY1NywyMDcuNzQ1NzIsMjAxLjU2NTcsMjA3Ljc0NTcyWiIvPjxjaXJjbGUgY2xhc3M9ImNscy0yIiBjeD0iMjIxLjg5MDI4IiBjeT0iMTUxLjU1NDI1IiByPSIzNy4wNjI0NiIvPjxjaXJjbGUgY2xhc3M9ImNscy0yIiBjeD0iMTM4LjIwMDg3IiBjeT0iMTUxLjU1NDI1IiByPSIzNy4wNjI0NiIvPjxjaXJjbGUgY2xhc3M9ImNscy0xMyIgY3g9IjIyMS44OTAyOCIgY3k9IjE1MS41NTQyNSIgcj0iMjguNjkzNTEiLz48Y2lyY2xlIGNsYXNzPSJjbHMtMTMiIGN4PSIxMzUuODA5NzMiIGN5PSIxNTEuNTU0MjUiIHI9IjI4LjY5MzUxIi8+PGNpcmNsZSBjbGFzcz0iY2xzLTEyIiBjeD0iMTM1LjgwOTczIiBjeT0iMTQ3Ljk2NzU3IiByPSI4LjM2ODk1Ii8+PGNpcmNsZSBjbGFzcz0iY2xzLTEyIiBjeD0iMjIxLjg5MDI4IiBjeT0iMTQ3Ljk2NzU3IiByPSI4LjM2ODk1Ii8+PC9nPjxwYXRoIGNsYXNzPSJjbHMtMyIgZD0iTTQ4LjUzMzYzLDE2NS45MDFoMGE1LjY0NzY4LDUuNjQ3NjgsMCwwLDEtNS45Nzc4MS01Ljk3NzgxVjExMi4xMDA2OGE1LjY0NzY3LDUuNjQ3NjcsMCwwLDEsNS45Nzc4MS01Ljk3NzgxaDBhNS42NDc2OCw1LjY0NzY4LDAsMCwxLDUuOTc3ODIsNS45Nzc4MVYxNTkuOTIzMkE1LjY0NzY4LDUuNjQ3NjgsMCwwLDEsNDguNTMzNjMsMTY1LjkwMVoiLz48cGF0aCBjbGFzcz0iY2xzLTMiIGQ9Ik0zMDkuMTY2MzcsMTY1LjkwMWgwYTUuNjQ3NjksNS42NDc2OSwwLDAsMS01Ljk3NzgyLTUuOTc3ODFWMTEyLjEwMDY4YTUuNjQ3NjgsNS42NDc2OCwwLDAsMSw1Ljk3NzgyLTUuOTc3ODFoMGE1LjY0NzY4LDUuNjQ3NjgsMCwwLDEsNS45Nzc4MSw1Ljk3NzgxVjE1OS45MjMyQTUuNjQ3NjgsNS42NDc2OCwwLDAsMSwzMDkuMTY2MzcsMTY1LjkwMVoiLz48Y2lyY2xlIGNsYXNzPSJjbHMtMTMiIGN4PSIxMzkuMzk2NDEiIGN5PSIzNy45NzU3OCIgcj0iNS45Nzc4MSIvPjxwYXRoIGNsYXNzPSJjbHMtMTMiIGQ9Ik05Ni4zNTYxNSwxOTkuMzc2NzdhNC4zOTIxLDQuMzkyMSwwLDAsMS0zLjU4NjY5LTEuMTk1NTdjLTE0LjM0Njc1LTE3LjkzMzQ0LTIxLjUyMDEzLTQwLjY0OTE0LTIxLjUyMDEzLTYzLjM2NDg1QTEwNi42ODM0OCwxMDYuNjgzNDgsMCwwLDEsODUuNTk2MDgsODEuMDE2YTExNy4wMDkxMSwxMTcuMDA5MTEsMCwwLDEsMzguMjU4LTM4LjI1OCw1LjI1NzMxLDUuMjU3MzEsMCwwLDEsNS45Nzc4MywxLjE5NTU3LDUuMjU3MjgsNS4yNTcyOCwwLDAsMS0xLjE5NTU3LDUuOTc3ODFBOTYuNDk2MzQsOTYuNDk2MzQsMCwwLDAsNzkuNjE4MjYsMTMzLjYyMDhhOTQuMjIyMTIsOTQuMjIyMTIsMCwwLDAsMjAuMzI0NTcsNTguNTgyNTljMS4xOTU1NywxLjE5NTU2LDEuMTk1NTcsNC43ODIyNC0xLjE5NTU3LDUuOTc3ODFDOTcuNTUxNzIsMTk5LjM3Njc3LDk3LjU1MTcyLDE5OS4zNzY3Nyw5Ni4zNTYxNSwxOTkuMzc2NzdaIi8+PGcgY2xhc3M9ImNscy0xNCI+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMjMzLjg0NTkxLDI1NS41NjgyNHYtOS41NjQ1Yy0xNi43Mzc4OCw5LjU2NDUtMzQuNjcxMzIsMTkuMTI5LTU2LjE5MTQ3LDE5LjEyOS0yMy45MTEyNiwwLTM5LjQ1MzU3LTEwLjc2MDA3LTU0Ljk5NTktMTkuMTI5bDEuMTk1NTYsOS41NjQ1czE3LjkzMzQ1LDE5LjEyOSw1NC45OTU5MSwxOS4xMjlDMjEzLjUyMTMzLDI3My41MDE2OCwyMzMuODQ1OTEsMjU1LjU2ODI0LDIzMy44NDU5MSwyNTUuNTY4MjRaIi8+PC9nPjwvc3ZnPg==
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/defectdojo.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: defectdojo
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PD94bWwgdmVyc2lvbj0iMS4wIiBzdGFuZGFsb25lPSJubyI/Pgo8IURPQ1RZUEUgc3ZnIFBVQkxJQyAiLS8vVzNDLy9EVEQgU1ZHIDIwMDEwOTA0Ly9FTiIKICJodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy1TVkctMjAwMTA5MDQvRFREL3N2ZzEwLmR0ZCI+CjxzdmcgdmVyc2lvbj0iMS4wIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiB3aWR0aD0iMjAwLjAwMDAwMHB0IiBoZWlnaHQ9IjE5OS4wMDAwMDBwdCIgdmlld0JveD0iMCAwIDIwMC4wMDAwMDAgMTk5LjAwMDAwMCIKIHByZXNlcnZlQXNwZWN0UmF0aW89InhNaWRZTWlkIG1lZXQiPgoKPGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMC4wMDAwMDAsMTk5LjAwMDAwMCkgc2NhbGUoMC4xMDAwMDAsLTAuMTAwMDAwKSIKZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSJub25lIj4KPHBhdGggZD0iTTIxMCAxNjYzIGMwIC03MSA1IC0xMzUgMTAgLTE0MyA4IC0xMyA5MiAtMTUgNjQyIC0xNyBsNjMzIC0zIDMKLTQ5NyBjMSAtMjkyIC0yIC00OTkgLTcgLTUwMiAtNSAtMyAtMjMwIC00IC01MDEgLTEgbC00OTIgNSAxIDI1MSBjMSAxMzkgLTEKMjYzIC00IDI3NiAtNiAyNCAtNyAyNCAtMTQwIDIzIC0xMjUgMCAtMTM0IC0xIC0xMzkgLTIwIC0xMCAtMzYgLTYgLTc4OSA0Ci04MDUgOCAtMTMgMTA5IC0xNSA3OTAgLTE4IGw3ODAgLTIgMCA3NzQgYzAgNjkxIC0yIDc3NiAtMTYgNzkwIC0xNCAxNCAtOTkKMTYgLTc5MCAxNiBsLTc3NCAwIDAgLTEyN3ogbTEzMDcgLTI3MCBjLTMgLTEwIC01IC00IC01IDEyIDAgMTcgMiAyNCA1IDE4IDIKLTcgMiAtMjEgMCAtMzB6IG0wIC04MTAgYy0yIC0xNiAtNCAtNSAtNCAyMiAwIDI4IDIgNDAgNCAyOCAyIC0xMyAyIC0zNSAwCi01MHogbS04OSAtMTAwIGMtMTYgLTIgLTQwIC0yIC01NSAwIC0xNiAyIC0zIDQgMjcgNCAzMCAwIDQzIC0yIDI4IC00eiIvPgo8L2c+Cjwvc3ZnPgo=
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/dependency-track.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: dependency-track
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL0dyYXBoaWNzL1NWRy8xLjEvRFREL3N2ZzExLmR0ZCI+Cjxzdmcgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgdmlld0JveD0iMCAwIDMwMCA0NzQiIHZlcnNpb249IjEuMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgeG1sbnM6c2VyaWY9Imh0dHA6Ly93d3cuc2VyaWYuY29tLyIgc3R5bGU9ImZpbGwtcnVsZTpldmVub2RkO2NsaXAtcnVsZTpldmVub2RkO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoyOyI+CiAgICA8ZyBpZD0iU3ltYm9sIj4KICAgICAgICA8ZyB0cmFuc2Zvcm09Im1hdHJpeCg3LjU1Nzc4LDAsMCw3LjU1Nzc4LDEzOC45MjcsNDguNTczOCkiPgogICAgICAgICAgICA8cGF0aCBkPSJNMCw3LjcwMUMwLDEwLjA0NyAtMS45MDksMTEuOTU1IC00LjI1NCwxMS45NTVMLTExLjk1NSwxMS45NTVDLTE0LjMsMTEuOTU1IC0xNi4yMDksMTAuMDQ3IC0xNi4yMDksNy43MDFMLTE2LjIwOSwwLjAwMUMtMTYuMjA5LC0yLjM0NSAtMTQuMywtNC4yNTMgLTExLjk1NSwtNC4yNTNMLTQuMjU0LC00LjI1M0MtMS45MDksLTQuMjUzIDAsLTIuMzQ1IDAsMC4wMDFMMCw3LjcwMVpNLTMuODk1LC02LjQyN0wtMTIuMzE0LC02LjQyN0MtMTUuNjY1LC02LjQyNyAtMTguMzgyLC0zLjcxIC0xOC4zODIsLTAuMzU5TC0xOC4zODIsOC4wNjFDLTE4LjM4MiwxMS40MTIgLTE1LjY2NSwxNC4xMjggLTEyLjMxNCwxNC4xMjhMLTMuODk1LDE0LjEyOEMtMC41NDMsMTQuMTI4IDIuMTczLDExLjQxMiAyLjE3Myw4LjA2MUwyLjE3MywtMC4zNTlDMi4xNzMsLTMuNzEgLTAuNTQzLC02LjQyNyAtMy44OTUsLTYuNDI3IiBzdHlsZT0iZmlsbDpyZ2IoMjU1LDAsMjA3KTtmaWxsLXJ1bGU6bm9uemVybzsiLz4KICAgICAgICA8L2c+CiAgICAgICAgPGcgdHJhbnNmb3JtPSJtYXRyaXgoNy41NTc3OCwwLDAsNy41NTc3OCwyODMuNTc3LDIxMS44MjQpIj4KICAgICAgICAgICAgPHBhdGggZD0iTTAsNy43MDFDMCwxMC4wNDcgLTEuOTA5LDExLjk1NSAtNC4yNTQsMTEuOTU1TC0xMS45NTUsMTEuOTU1Qy0xNC4zLDExLjk1NSAtMTYuMjA5LDEwLjA0NyAtMTYuMjA5LDcuNzAxTC0xNi4yMDksMC4wMDFDLTE2LjIwOSwtMi4zNDUgLTE0LjMsLTQuMjUzIC0xMS45NTUsLTQuMjUzTC00LjI1NCwtNC4yNTNDLTEuOTA5LC00LjI1MyAwLC0yLjM0NSAwLDAuMDAxTDAsNy43MDFaTS0zLjg5NSwtNi40MjdMLTEyLjMxNCwtNi40MjdDLTE1LjY2NSwtNi40MjcgLTE4LjM4MiwtMy43MSAtMTguMzgyLC0wLjM1OUwtMTguMzgyLDguMDYxQy0xOC4zODIsMTEuNDEyIC0xNS42NjUsMTQuMTI4IC0xMi4zMTQsMTQuMTI4TC0zLjg5NSwxNC4xMjhDLTAuNTQzLDE0LjEyOCAyLjE3MywxMS40MTIgMi4xNzMsOC4wNjFMMi4xNzMsLTAuMzU5QzIuMTczLC0zLjcxIC0wLjU0MywtNi40MjcgLTMuODk1LC02LjQyNyIgc3R5bGU9ImZpbGw6cmdiKDI1NSwwLDIwNyk7ZmlsbC1ydWxlOm5vbnplcm87Ii8+CiAgICAgICAgPC9nPgogICAgICAgIDxnIHRyYW5zZm9ybT0ibWF0cml4KDcuNTU3NzgsMCwwLDcuNTU3NzgsMTM4LjkyNywzNjYuOTAyKSI+CiAgICAgICAgICAgIDxwYXRoIGQ9Ik0wLDcuNzAxQzAsMTAuMDQ3IC0xLjkwOSwxMS45NTUgLTQuMjU0LDExLjk1NUwtMTEuOTU1LDExLjk1NUMtMTQuMywxMS45NTUgLTE2LjIwOSwxMC4wNDcgLTE2LjIwOSw3LjcwMUwtMTYuMjA5LDAuMDAxQy0xNi4yMDksLTIuMzQ1IC0xNC4zLC00LjI1MyAtMTEuOTU1LC00LjI1M0wtNC4yNTQsLTQuMjUzQy0xLjkwOSwtNC4yNTMgMCwtMi4zNDUgMCwwLjAwMUwwLDcuNzAxWk0tMy44OTUsLTYuNDI3TC0xMi4zMTQsLTYuNDI3Qy0xNS42NjUsLTYuNDI3IC0xOC4zODIsLTMuNzEgLTE4LjM4MiwtMC4zNTlMLTE4LjM4Miw4LjA2MUMtMTguMzgyLDExLjQxMiAtMTUuNjY1LDE0LjEyOCAtMTIuMzE0LDE0LjEyOEwtMy44OTUsMTQuMTI4Qy0wLjU0MywxNC4xMjggMi4xNzMsMTEuNDEyIDIuMTczLDguMDYxTDIuMTczLC0wLjM1OUMyLjE3MywtMy43MSAtMC41NDMsLTYuNDI3IC0zLjg5NSwtNi40MjciIHN0eWxlPSJmaWxsOnJnYigyNTUsMCwyMDcpO2ZpbGwtcnVsZTpub256ZXJvOyIvPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+Cg==
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/docker-registry.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: docker-registry
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48IS0tIFVwbG9hZGVkIHRvOiBTVkcgUmVwbywgd3d3LnN2Z3JlcG8uY29tLCBHZW5lcmF0b3I6IFNWRyBSZXBvIE1peGVyIFRvb2xzIC0tPgo8c3ZnIGZpbGw9IiMwMDAwMDAiIHdpZHRoPSI4MDBweCIgaGVpZ2h0PSI4MDBweCIgdmlld0JveD0iMCAwIDMyIDMyIiBpZD0iaWNvbiIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KICA8ZGVmcz4KICAgIDxzdHlsZT4KICAgICAgLmNscy0xIHsKICAgICAgICBmaWxsOiBub25lOwogICAgICB9CiAgICA8L3N0eWxlPgogIDwvZGVmcz4KICA8cGF0aCBkPSJNMTcsMTNWNkg4VjIySDI0VjEzWk0xMCw4aDV2NUgxMFptMCw3aDV2NUgxMFptMTIsNUgxN1YxNWg1WiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIvPgogIDxwYXRoIGQ9Ik0yOCwxMUgxOVYyaDlaTTIxLDloNVY0SDIxWiIgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCAwKSIvPgogIDxwYXRoIGQ9Ik0yOCwyMEgyNnYyaDJ2Nkg0VjIySDZWMjBINGEyLjAwMjQsMi4wMDI0LDAsMCwwLTIsMnY2YTIuMDAyNCwyLjAwMjQsMCwwLDAsMiwySDI4YTIuMDAyNCwyLjAwMjQsMCwwLDAsMi0yVjIyQTIuMDAyNCwyLjAwMjQsMCwwLDAsMjgsMjBaIiB0cmFuc2Zvcm09InRyYW5zbGF0ZSgwIDApIi8+CiAgPGNpcmNsZSBjeD0iNyIgY3k9IjI1IiByPSIxIi8+CiAgPHJlY3QgaWQ9Il9UcmFuc3BhcmVudF9SZWN0YW5nbGVfIiBkYXRhLW5hbWU9IiZsdDtUcmFuc3BhcmVudCBSZWN0YW5nbGUmZ3Q7IiBjbGFzcz0iY2xzLTEiIHdpZHRoPSIzMiIgaGVpZ2h0PSIzMiIvPgo8L3N2Zz4=
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/grafana.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: grafana
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PHN2ZyB2aWV3Qm94PSI4LjUgMSAzMzQuMTAwMDAwMDAwMDAwMSAzNjMiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjIyNDkiIGhlaWdodD0iMjUwMCI+PGxpbmVhckdyYWRpZW50IGlkPSJhIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgeDE9IjE3NS41IiB4Mj0iMTc1LjUiIHkxPSIzMCUiIHkyPSI5OSUiPjxzdG9wIG9mZnNldD0iMCIgc3RvcC1jb2xvcj0iI2YwNWEyOCIvPjxzdG9wIG9mZnNldD0iMSIgc3RvcC1jb2xvcj0iI2ZiY2EwYSIvPjwvbGluZWFyR3JhZGllbnQ+PHBhdGggZD0iTTM0MiAxNjEuMmMtLjYtNi4xLTEuNi0xMy4xLTMuNi0yMC45LTItNy43LTUtMTYuMi05LjQtMjVzLTEwLjEtMTcuOS0xNy41LTI2LjhjLTIuOS0zLjUtNi4xLTYuOS05LjUtMTAuMiA1LjEtMjAuMy02LjItMzcuOS02LjItMzcuOS0xOS41LTEuMi0zMS45IDYuMS0zNi41IDkuNC0uOC0uMy0xLjUtLjctMi4zLTEtMy4zLTEuMy02LjctMi42LTEwLjMtMy43LTMuNS0xLjEtNy4xLTIuMS0xMC44LTNzLTcuNC0xLjYtMTEuMi0yLjJjLS43LS4xLTEuMy0uMi0yLS4zQzIxNC4yIDEyLjQgMTg5LjggMSAxODkuOCAxYy0yNy4zIDE3LjMtMzIuNCA0MS41LTMyLjQgNDEuNXMtLjEuNS0uMyAxLjRjLTEuNS40LTMgLjktNC41IDEuMy0yLjEuNi00LjIgMS40LTYuMiAyLjItMi4xLjgtNC4xIDEuNi02LjIgMi41LTQuMSAxLjgtOC4yIDMuOC0xMi4yIDYtMy45IDIuMi03LjcgNC42LTExLjQgNy4xbC0xLS40Yy0zNy44LTE0LjQtNzEuMyAyLjktNzEuMyAyLjktMy4xIDQwLjIgMTUuMSA2NS41IDE4LjcgNzAuMS0uOSAyLjUtMS43IDUtMi41IDcuNS0yLjggOS4xLTQuOSAxOC40LTYuMiAyOC4xLS4yIDEuNC0uNCAyLjgtLjUgNC4yQzE4LjggMTkyLjcgOC41IDIyOCA4LjUgMjI4YzI5LjEgMzMuNSA2My4xIDM1LjYgNjMuMSAzNS42bC4xLS4xYzQuMyA3LjcgOS4zIDE1IDE0LjkgMjEuOSAyLjQgMi45IDQuOCA1LjYgNy40IDguMy0xMC42IDMwLjQgMS41IDU1LjYgMS41IDU1LjYgMzIuNCAxLjIgNTMuNy0xNC4yIDU4LjItMTcuNyAzLjIgMS4xIDYuNSAyLjEgOS44IDIuOSAxMCAyLjYgMjAuMiA0LjEgMzAuNCA0LjUgMi41LjEgNS4xLjIgNy42LjFoMy42bDEuNi0uMXYuMWMxNS4zIDIxLjggNDIuMSAyNC45IDQyLjEgMjQuOSAxOS4xLTIwLjEgMjAuMi00MC4xIDIwLjItNDQuNHYtLjMtLjYtLjljNC0yLjggNy44LTUuOCAxMS40LTkuMSA3LjYtNi45IDE0LjMtMTQuOCAxOS45LTIzLjNsMS41LTIuNGMyMS42IDEuMiAzNi45LTEzLjQgMzYuOS0xMy40LTMuNi0yMi41LTE2LjQtMzMuNS0xOS4xLTM1LjZzLS4xLS4xLS4zLS4yLS4yLS4yLS4yLS4yYy0uMS0uMS0uMy0uMi0uNS0uMy4xLTEuNC4yLTIuNy4zLTQuMS4yLTIuNC4yLTQuOS4yLTcuM3YtMy4yLS42bC0uMS0xLjUtLjEtMmMwLS43LS4xLTEuMy0uMi0xLjlzLS4xLTEuMy0uMi0xLjlsLS4yLTEuOS0uMy0xLjljLS40LTIuNS0uOC00LjktMS40LTcuNC0yLjMtOS43LTYuMS0xOC45LTExLTI3LjItNS04LjMtMTEuMi0xNS42LTE4LjMtMjEuOC03LTYuMi0xNC45LTExLjItMjMuMS0xNC45LTguMy0zLjctMTYuOS02LjEtMjUuNS03LjItNC4zLS42LTguNi0uOC0xMi45LS43aC0zLjJsLTEuNi4xYy0uNiAwLTEuMi4xLTEuNy4xLTIuMi4yLTQuNC41LTYuNS45LTguNiAxLjYtMTYuNyA0LjctMjMuOCA5cy0xMy4zIDkuNi0xOC4zIDE1LjYtOC45IDEyLjctMTEuNiAxOS42LTQuMiAxNC4xLTQuNiAyMWMtLjEgMS43LS4xIDMuNS0uMSA1LjJ2MS4zbC4xIDEuNGMuMS44LjEgMS43LjIgMi41LjMgMy41IDEgNi45IDEuOSAxMC4xIDEuOSA2LjUgNC45IDEyLjQgOC42IDE3LjRzOC4yIDkuMSAxMi45IDEyLjRjNC43IDMuMiA5LjggNS41IDE0LjggN3MxMCAyLjEgMTQuNyAyLjFoMi42Yy4zIDAgLjYgMCAuOS0uMS41IDAgMS0uMSAxLjUtLjEuMSAwIC4zIDAgLjQtLjFsLjUtLjFjLjMgMCAuNi0uMS45LS4xLjYtLjEgMS4xLS4yIDEuNy0uM3MxLjEtLjIgMS42LS40YzEuMS0uMiAyLjEtLjYgMy4xLS45IDItLjcgNC0xLjUgNS43LTIuNCAxLjgtLjkgMy40LTIgNS0zIC40LS4zLjktLjYgMS4zLTEgMS42LTEuMyAxLjktMy43LjYtNS4zLTEuMS0xLjQtMy4xLTEuOC00LjctLjlsLTEuMi42Yy0xLjQuNy0yLjggMS4zLTQuMyAxLjhzLTMuMS45LTQuNyAxLjJjLS44LjEtMS42LjItMi41LjMtLjQgMC0uOC4xLTEuMy4xaC0yLjRjLS41IDAtMSAwLTEuNS0uMUgyMTAuMmMtLjIgMC0uNSAwLS43LS4xLS41LS4xLS45LS4xLTEuNC0uMi0zLjctLjUtNy40LTEuNi0xMC45LTMuMi0zLjYtMS42LTctMy44LTEwLjEtNi42cy01LjgtNi4xLTcuOS05LjktMy42LTgtNC4zLTEyLjRjLS4zLTIuMi0uNS00LjUtLjQtNi43IDAtLjYuMS0xLjIuMS0xLjh2LS44YzAtLjMuMS0uNi4xLS45LjEtMS4yLjMtMi40LjUtMy42IDEuNy05LjYgNi41LTE5IDEzLjktMjYuMSAxLjktMS44IDMuOS0zLjQgNi00LjlzNC40LTIuOCA2LjgtMy45IDQuOC0yIDcuNC0yLjdjMi41LS43IDUuMS0xLjEgNy44LTEuNCAxLjMtLjEgMi42LS4yIDQtLjJoMy4xbDEuMS4xYzIuOS4yIDUuNy42IDguNSAxLjMgNS42IDEuMiAxMS4xIDMuMyAxNi4yIDYuMSAxMC4yIDUuNyAxOC45IDE0LjUgMjQuMiAyNS4xIDIuNyA1LjMgNC42IDExIDUuNSAxNi45LjIgMS41LjQgMyAuNSA0LjVsLjEgMS4xLjEgMS4xVjIxNy44YzAgLjctLjEgMS45LS4xIDIuNi0uMSAxLjYtLjMgMy4zLS41IDQuOXMtLjUgMy4yLS44IDQuOC0uNyAzLjItMS4xIDQuN2MtLjggMy4xLTEuOCA2LjItMyA5LjMtMi40IDYtNS42IDExLjgtOS40IDE3LjEtNy43IDEwLjYtMTguMiAxOS4yLTMwLjIgMjQuNy02IDIuNy0xMi4zIDQuNy0xOC44IDUuNy0zLjIuNi02LjUuOS05LjggMWgtNWMtMS44IDAtMy41LS4xLTUuMy0uMy03LS41LTEzLjktMS44LTIwLjctMy43LTYuNy0xLjktMTMuMi00LjYtMTkuNC03LjgtMTIuMy02LjYtMjMuNC0xNS42LTMyLTI2LjUtNC4zLTUuNC04LjEtMTEuMy0xMS4yLTE3LjRzLTUuNi0xMi42LTcuNC0xOS4xYy0xLjgtNi42LTIuOS0xMy4zLTMuNC0yMC4xbC0uMS0xLjN2LTUuNy0uNy0yLjVjLjEtMy4zLjQtNi44LjgtMTAuMnMxLTYuOSAxLjctMTAuMyAxLjUtNi44IDIuNS0xMC4yYzEuOS02LjcgNC4zLTEzLjIgNy4xLTE5LjMgNS43LTEyLjIgMTMuMS0yMy4xIDIyLTMxLjggMi4yLTIuMiA0LjUtNC4yIDYuOS02LjIgMi40LTEuOSA0LjktMy43IDcuNS01LjQgMi41LTEuNyA1LjItMy4yIDcuOS00LjYgMS4zLS43IDIuNy0xLjQgNC4xLTJsMi4xLS45IDIuMS0uOWMyLjgtMS4yIDUuNy0yLjIgOC43LTMuMS43LS4yIDEuNS0uNCAyLjItLjcuNy0uMiAxLjUtLjQgMi4yLS42IDEuNS0uNCAzLS44IDQuNS0xLjEuNy0uMiAxLjUtLjMgMi4zLS41czEuNS0uMyAyLjMtLjVjLjgtLjEgMS41LS4zIDIuMy0uNGwxLjEtLjIgMS4yLS4yYy44LS4xIDEuNS0uMiAyLjMtLjMuOS0uMSAxLjctLjIgMi42LS4zLjctLjEgMS45LS4yIDIuNi0uMy41LS4xIDEuMS0uMSAxLjYtLjJsMS4xLS4xLjUtLjFoLjZjLjktLjEgMS43LS4xIDIuNi0uMmwxLjMtLjFoMWMuNyAwIDEuNS0uMSAyLjItLjEgMi45LS4xIDUuOS0uMSA4LjggMCA1LjguMiAxMS41LjkgMTcgMS45IDExLjEgMi4xIDIxLjUgNS42IDMxIDEwLjMgOS41IDQuNiAxNy45IDEwLjMgMjUuMyAxNi41LjUuNC45LjggMS40IDEuMi40LjQuOS44IDEuMyAxLjIuOS44IDEuNyAxLjYgMi42IDIuNHMxLjcgMS42IDIuNSAyLjQgMS42IDEuNiAyLjQgMi41YzMuMSAzLjMgNiA2LjYgOC42IDEwIDUuMiA2LjcgOS40IDEzLjUgMTIuNyAxOS45bC42IDEuMi42IDEuMmMuNC44LjggMS42IDEuMSAyLjQuNC44LjcgMS41IDEuMSAyLjMuMy44LjcgMS41IDEgMi4zIDEuMiAzIDIuNCA1LjkgMy4zIDguNiAxLjUgNC40IDIuNiA4LjMgMy41IDExLjcuMyAxLjQgMS42IDIuMyAzIDIuMSAxLjUtLjEgMi42LTEuMyAyLjYtMi44LjEtMy42IDAtNy45LS41LTEyLjh6IiBmaWxsPSJ1cmwoI2EpIi8+PC9zdmc+
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/kibana.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: kibana
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: 
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/nexus.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: nexus
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA2MSA2MSI+CiAgPGRlZnM+CiAgICA8c3R5bGU+CiAgICAgIC5jbHMtMSB7CiAgICAgICAgZmlsbDogIzAwYmQ2YzsKICAgICAgfQoKICAgICAgLmNscy0yIHsKICAgICAgICBmaWxsOiAjMDBiYjZjOwogICAgICB9CgogICAgICAuY2xzLTMgewogICAgICAgIGZpbGw6ICNmZmY7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgPC9kZWZzPgogIDxnIGlkPSJTb25hdHlwZV9Mb2dvX0Zhdmljb24iIGRhdGEtbmFtZT0iU29uYXR5cGUgTG9nbyBGYXZpY29uIj4KICAgIDxwb2x5Z29uIGNsYXNzPSJjbHMtMSIgcG9pbnRzPSI1NS44MiAyNy41MSA1NS44MiAzNC4yNCA0MC4wNSA0My40NyAzNi4wNSA0NS44MSAzNi4wNCA0NS44MSAzMC4zMSA0OS4xNiAyNC41NyA0NS44IDIwLjU2IDQzLjQ2IDQuODIgMzQuMjQgNC44MiAyNy41MyAxMC43MSAzMC45OCAxMC43MSAzMS4wMiAyNi4yNiA0MC4xMSAzMC4yOCA0Mi40NiAzMC4zMSA0Mi40OCAzMC4zNCA0Mi40NiAzNC4zNCA0MC4xMiA0OS45MSAzMS4wMiA0OS45MSAzMC45NiA1NS44MiAyNy41MSIvPgogIDwvZz4KICA8ZyBpZD0iU29uYXR5cGVfTG9nb19GYXZpY29uLTIiIGRhdGEtbmFtZT0iU29uYXR5cGUgTG9nbyBGYXZpY29uIj4KICAgIDxwb2x5Z29uIGNsYXNzPSJjbHMtMyIgcG9pbnRzPSI1NS44MiAzOC4zNCA1NS44MiA0NS4wNiA0MC4wNSA1NC4zIDM2LjA1IDU2LjY0IDM2LjA0IDU2LjY0IDMwLjMxIDU5Ljk5IDI0LjU3IDU2LjYyIDIwLjU2IDU0LjI4IDQuODIgNDUuMDYgNC44MiAzOC4zNSAxMC43MSA0MS44IDEwLjcxIDQxLjg1IDI2LjI2IDUwLjkzIDMwLjI4IDUzLjI5IDMwLjMxIDUzLjMgMzAuMzQgNTMuMjkgMzQuMzQgNTAuOTUgNDkuOTEgNDEuODUgNDkuOTEgNDEuNzkgNTUuODIgMzguMzQiLz4KICA8L2c+CiAgPGcgaWQ9IlNvbmF0eXBlX0xvZ29fRmF2aWNvbi0zIiBkYXRhLW5hbWU9IlNvbmF0eXBlIExvZ28gRmF2aWNvbiI+CiAgICA8cGF0aCBjbGFzcz0iY2xzLTMiIGQ9Im00OS45MSw5LjY4djEwLjUybC0xNS41Nyw5LjEtNC4wMSwyLjM0aC0uMDNzLS4wMywwLS4wMywwbC00LjAyLTIuMzYtMTUuNTUtOS4wOHYtMTAuNTJoLTUuODl2MTMuNzNsMTUuNzQsOS4yMiw0LjAxLDIuMzQsNS43NCwzLjM2LDUuNzMtMy4zNSw0LjAxLTIuMzQsMTUuNzctOS4yM3YtMTMuNzNoLTUuOTFaIi8+CiAgPC9nPgogIDxwYXRoIGNsYXNzPSJjbHMtMiIgZD0ibTMxLjI1LDIyLjA3di0xMS4wMWMuNzItMS4wNywyLjYyLTEuOSw0LjA1LTEuOS41MSwwLC44OC4wNCwxLjE5LjF2LTQuMjhjLTIuMDQsMC00LjA1LDEuMjEtNS4yNCwyLjY2di0yLjI0aC00LjMydjE2LjY3aDQuMzJaIi8+Cjwvc3ZnPg==
  type: system
  url: 
  visible: true
---
# Source: edp-install/templates/quick-links/sonar.yaml
apiVersion: v2.edp.epam.com/v1
kind: QuickLink
metadata:
  name: sonar
  labels:
    helm.sh/chart: edp-install-3.9.0
    app.kubernetes.io/name: edp-install
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.9.0"
    app.kubernetes.io/managed-by: Helm
spec:
  icon: PHN2ZyBoZWlnaHQ9IjIzNzQiIHZpZXdCb3g9Ii4xIC0uMSA5NjAuMSA5MTEuNCIgd2lkdGg9IjI1MDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0ibTgzMi42IDkxMS4zaC01Mi42YzAtNDI0LjEtMzQ5LjktNzY5LjEtNzc5LjktNzY5LjF2LTUyLjZjNDU5IDAgODMyLjUgMzY4LjUgODMyLjUgODIxLjd6bTM2LjQtMjgyLjljLTYzLjItMjY2LTI3OC43LTQ4OC01NDktNTY1LjdsMTIuMS00Mi4yYzI4NS4zIDgyIDUxMi44IDMxNi41IDU3OS41IDU5Ny44em01OS4zLTI0OS43Yy02NS4xLTE0Mi0xNzYuMi0yNjUuOS0zMTIuNS0zNDguOGwxOC4zLTMwYzE0Mi4zIDg2LjYgMjU4IDIxNS44IDMyNi4xIDM2NC4yeiIgZmlsbD0iIzQ5OWNkMiIvPjwvc3ZnPg==
  type: system
  url: 
  visible: true
---
# Source: edp-install/charts/edp-tekton/templates/tasks/autotest-cd-pipeline/init-autotests.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: init-autotest
spec:
  workspaces:
    - name: source
      description: The workspace consisting of csharp project.
  params:
    - name: stage-name
      type: string
    - name: cd-pipeline-name
      type: string
    - name: AUTOTEST_PIPELINES
      default: 'autotes-pipeline'
    - name: codebase_tags
      default: 'codebase_tags'
    - name: parent-pipeline-name
      default: ''
  volumes:
    - name: autotests-workspace-template
      configMap:
        name: autotests-workspace-template
  results:
    - name: AUTOTEST_PIPELINES
      type: string
    - name: codebase_tags
      type: string
  steps:
    - name: init-autotest
      image: epamedp/tekton-autotest:0.1.3
      workingDir: $(workspaces.source.path)
      volumeMounts:
        - name: autotests-workspace-template
          mountPath: "/var/configmap"
      env:
        - name: CODEBASE_TAGS
          value: "$(params.codebase_tags)"
        - name: AUTOTEST_PIPELINES
          value: "$(params.AUTOTEST_PIPELINES)"
        - name: STAGE_NAME
          value: $(params.stage-name)
        - name: CD_PIPELINE_NAME
          value: $(params.cd-pipeline-name)
        - name: PARENT_PIPELINE_NAME
          value: $(params.parent-pipeline-name)

      script: |
        #!/usr/bin/env python

        import subprocess
        import json
        import os
        import re

        autotestsList = []
        autotestBuildTool = []
        gitAutotesUrl = []
        autotestsBranch = []
        pipelines = ""
        applications = []
        tags = []
        codebases = ""
        autotestFramework =[]
        gitSecret = {}

        frameworks = {
          "gradle-java8": "gradle:7.5.1-jdk8",
          "gradle-java11": "gradle:7.5.1-jdk11",
          "gradle-java17": "gradle:7.5.1-jdk17",
          "maven-java8": "maven:3.9.0-eclipse-temurin-8",
          "maven-java11": "maven:3.9.0-eclipse-temurin-11",
          "maven-java17": "maven:3.9.0-eclipse-temurin-17"
        }
        cdPipelineName = os.getenv('CD_PIPELINE_NAME')
        stage = os.getenv('STAGE_NAME')
        parentPipelineName = os.getenv('PARENT_PIPELINE_NAME')
        codebaseFileTags = os.getenv('CODEBASE_TAGS')

        autotests = json.loads(subprocess.check_output(["kubectl", "get", "stages.v2.edp.epam.com", cdPipelineName + "-" + stage, "-o=jsonpath='{.spec}'"]).decode("utf-8").strip("'"))

        for element in autotests["qualityGates"]:
            if element["qualityGateType"] == "autotests":
              autotestGitServer = subprocess.check_output(["kubectl", "get", "codebase", element["autotestName"], "-o=jsonpath='{.spec.gitServer}'"]).decode("utf-8").strip("'")
              gitserver = json.loads(subprocess.check_output(["kubectl", "get", "gitserver", autotestGitServer , "-o=jsonpath='{.spec}'"]).decode("utf-8").strip("'"))
              autotestsList.append(element["autotestName"])
              autotestsBranch.append(element["branchName"])
              autotest = json.loads(subprocess.check_output(["kubectl", "get", "codebase", element["autotestName"], "-o=jsonpath='{.spec}'"]).decode("utf-8").strip("'"))
              gitAutotesUrl.append("ssh://" + gitserver['gitUser'] + "@" + gitserver['gitHost'] + ":" + str(gitserver['sshPort']) + autotest['gitUrlPath'])
              autotestBuildTool.append(autotest["buildTool"])
              autotestFramework.append(autotest["framework"])

              gitSecret[element["autotestName"]] = gitserver['nameSshKeySecret']

        for count, element in enumerate(autotestsList):
            print("[TEKTON][DEBUG]: Run autotest - autotests-" + autotestBuildTool[count])
            print("[TEKTON][DEBUG]: Autotest URL - " + gitAutotesUrl[count])
            print("[TEKTON][DEBUG]: Autotest branch - " + autotestsBranch[count])
            command = "tkn pipeline start autotests-" + autotestBuildTool[count] + " \
            --use-param-defaults \
            -p git-source-url=" + gitAutotesUrl[count] + " \
            -p git-source-revision=" + autotestsBranch[count] + " \
            -p stage-name=" + stage +" \
            -p base-image=" + frameworks[autotestBuildTool[count] + "-" + autotestFramework[count]] + " \
            --labels app.edp.epam.com/pipeline=" + cdPipelineName + " \
            --labels app.edp.epam.com/stage=" + stage + " \
            --labels app.edp.epam.com/codebase=" + autotestsList[count] + " \
            --labels app.edp.epam.com/branch=" + autotestsBranch[count] + " \
            --labels app.edp.epam.com/parentPipelineRun=" + parentPipelineName + " \
            --workspace name=ssh-creds,secret=" + gitSecret[autotestsList[count]] + " \
            --workspace name=shared-workspace,volumeClaimTemplateFile=/var/configmap/volumeclaimtemplate.yaml"

            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            output = re.search("autotests(-[A-Za-z0-9]*)* ", result.stdout)
            pipelines += output.group() + " "

        autotests_pipelines_file = os.getenv("AUTOTEST_PIPELINES")
        with open(autotests_pipelines_file, "w") as outfile:
            outfile.write(pipelines)

        try:
            listApplications = json.loads(subprocess.check_output(["kubectl", "get", "cdpipeline", cdPipelineName , "-o=jsonpath='{.spec.applicationsToPromote}'"]).decode("utf-8").strip("'"))
            kindApplications = subprocess.check_output(["kubectl", "get", "applications"])

            for element in listApplications:
                output = re.search(cdPipelineName + "-" + stage + "-" + element, str(kindApplications))
                applications.append(output.group())

            print("[TEKTON][DEBUG]: Images to promote:")
            for element in applications:
                print(element)

            for count, element in enumerate(applications):
                temp = subprocess.check_output(["kubectl", "get", "application", element.strip(" ") , "-o=jsonpath='{.spec.source.helm.parameters[0].value}'"]).decode("utf-8").strip("'")
                codebases += listApplications[count] + "=" + temp + " "

            with open(codebaseFileTags, "w") as outfile:
                outfile.write(codebases)

            with open("/tekton/results/" + codebaseFileTags, "w") as outfile:
                outfile.write(codebases)
        except:
            with open("/tekton/results/" + codebaseFileTags, "w") as outfile:
                outfile.write("not-set")
            print("[TEKTON][DEBUG]: No images to promote.")
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/autotest-cd-pipeline/run-autotests-java.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-autotests-maven
  labels:
    app.kubernetes.io/based-on: "0.2"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Autootest Tools
    tekton.dev/tags: autotest-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
      description: A workspace that contains the repository.
  params:
    - name: stage-name
      type: string
    - name: base-image
      type: string
  steps:
    - name: run-autotest
      image: "$(params.base-image)"
      workingDir: $(workspaces.source.path)
      env:
        - name: STAGE_NAME
          value: $(params.stage-name)
      script: |
        #!/bin/bash

        set -exo pipefail
        $(sed -n 's/.*"'$STAGE_NAME'": "\(.*\)",/\1/p' run.json | awk -F '"' '{print $1}')
---
# Source: edp-install/charts/edp-tekton/templates/tasks/autotest-cd-pipeline/run-autotests-java.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-autotests-gradle
  labels:
    app.kubernetes.io/based-on: "0.2"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Autootest Tools
    tekton.dev/tags: autotest-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
      description: A workspace that contains the repository.
  params:
    - name: stage-name
      type: string
    - name: base-image
      type: string
  steps:
    - name: run-autotest
      image: "$(params.base-image)"
      workingDir: $(workspaces.source.path)
      env:
        - name: STAGE_NAME
          value: $(params.stage-name)
      script: |
        #!/bin/bash

        set -exo pipefail
        $(sed -n 's/.*"'$STAGE_NAME'": "\(.*\)",/\1/p' run.json | awk -F '"' '{print $1}')
---
# Source: edp-install/charts/edp-tekton/templates/tasks/autotest-cd-pipeline/wait-autotest.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for-autotests
spec:
  workspaces:
    - name: source
      description: The workspace consisting of csharp project.
  params:
    - name: AUTOTEST_PIPELINES
      default: 'autotes-pipeline'
  steps:
    - name: wait-for
      image: epamedp/tekton-autotest:0.1.3
      workingDir: $(workspaces.source.path)
      env:
        - name: AUTOTEST_PIPELINES
          value: "$(params.AUTOTEST_PIPELINES)"
      script: |
        #!/usr/bin/env python

        import subprocess
        import json
        import os
        import time

        pipelines = os.getenv('AUTOTEST_PIPELINES')
        output = ""
        pipelines_name = []

        with open(pipelines, 'r') as f:
            output = f.read()

        pipelines_name = output.split()

        while pipelines_name:
            value = pipelines_name[0]
            result = subprocess.check_output(["kubectl", "get", "pipelinerun", value, "-o=jsonpath='{.status.conditions[].reason}'"]).decode("utf-8").strip("'")
            if result.strip() == 'Succeeded':
                pipelines_name.pop(0)
            if result.strip() == 'Failed':
                print("[DEBUG]: Autotest failed.")
                exit(1)
            else:
                continue

        print("[TEKTON][DEBUG]: All autotests finished.")
---
# Source: edp-install/charts/edp-tekton/templates/tasks/autotests/TestsMavenAutotest.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-tests-for-autotests
spec:
  description: >-
    This Task can be used to run tests for autotests.

  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: TEST_TYPE
      description: "Test type command in file run.json"
      default: "codereview"
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: BASE_IMAGE
      description: "The base image for the task"
  results:
    - name: COMMAND
      type: string
  volumes:
    - name: settings-maven
      configMap:
        name: custom-maven-settings
  steps:
    - name: check-run-json-file
      image: "python:3.9.14-alpine3.16"
      workingDir: $(workspaces.source.path)
      script: |
        set -ex

        if [ -f "run.json" ]; then
            echo "[TEKTON][INFO] run.json file exists in the project."
        else
            echo "[TEKTON][ERROR] There is no run.json file in the project. Can't define command to run autotests."
            exit 1
        fi

    - name: get-command
      image: "python:3.10.1-alpine3.15"
      workingDir: $(workspaces.source.path)
      env:
        - name: RESULT_COMMAND_FILE_PATH
          value: $(results.COMMAND.path)
        - name: TEST_TYPE
          value: $(params.TEST_TYPE)
      script: |
        #!/usr/bin/env python

        import os
        import json
        import sys

        type_test = os.getenv("TEST_TYPE")
        result_command_file_path = os.getenv("RESULT_COMMAND_FILE_PATH")

        print(f"[TEKTON] '{type_test}' type was chosen")

        with open('run.json') as json_file:
          data = json.load(json_file)

          try:
              command=data[type_test]
          except KeyError:
              sys.exit(f"[TEKTON] Haven't found '{type_test}' command in file run.json. It's mandatory to be specified, please check")

          print(f"[TEKTON] The command was received: {command}")
          with open(result_command_file_path, "w") as outfile:
              outfile.write(command)

    - name: run-tests
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-maven
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)
      env:
        - name: RESULT_COMMAND_FILE_PATH
          value: $(results.COMMAND.path)
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
      script: |
        $(cat ${RESULT_COMMAND_FILE_PATH}) \
        -B \
        -Dartifactory.baseUrl=${NEXUS_HOST_URL} \
        -Dartifactory.releasePath=edp-maven-releases \
        -Dartifactory.snapshotsPath=edp-maven-snapshots \
        -Dartifactory.groupPath=edp-maven-group \
        --settings \
        /var/configmap/settings.xml
---
# Source: edp-install/charts/edp-tekton/templates/tasks/cd/deploy-applicationset-cli.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-applicationset-cli
spec:
  description: |
    This task is used to deploy Codebases across specific Stage using ApplicationSet object.

  params:
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: PIPELINE
      type: string
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
    - name: STAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
      type: string

  steps:
    - name: wait-for-deploy
      image: epamedp/tekton-cd-pipeline:0.1.2
      env:
        - name: ARGOCD_URL
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: url
        - name: ARGOCD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: token
      script: |
        set -ex

        export ARGOCD_OPTS="--core=false --grpc-web"
        # the address of the Argo CD server without https:// prefix
        export ARGOCD_SERVER=${ARGOCD_URL#*//}

        pipeline=$(params.PIPELINE)
        stage=$(params.STAGE)
        # quotes are important here
        new_tags='$(params.APPLICATIONS_PAYLOAD)'

        selector="app.edp.epam.com/stage=$(params.STAGE),app.edp.epam.com/pipeline=$(params.PIPELINE)"

        patch=$(kubectl get applicationset $pipeline -o json | jq --argjson updates "$new_tags" --arg stage $stage '
          .spec.generators[0].list.elements |= map(
            if (.stage == $stage) and (.codebase | IN($updates | keys[])) then
              .imageTag = $updates[.codebase].imageTag
              # Update customValues field if customValues is true in payload
              | .customValues = if ($updates[.codebase].customValues == true) then true elif ($updates[.codebase].customValues == false) then false else .customValues end
            else
              .
            end
          )
        ')

        kubectl patch applicationset $pipeline --type=merge -p "$patch"

        argocd app list -l $selector

        argocd app sync -l $selector --prune --timeout 300
        # TODO: we build our custom argocd-cli that has fixed issue with argocd app wait
        argocd app wait -l $selector --health --sync
---
# Source: edp-install/charts/edp-tekton/templates/tasks/cdxgen.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: cdxgen
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/displayName: Dep-Analysis
    tekton.dev/platforms: linux/amd64
spec:
  params:
    - default: ''
      description: That is the name of the project that will be updated/created on the dependency track side
      name: PROJECT_NAME
      type: string
    - name: ci-dependency-track
      type: string
      description: Name of the secret holding the ci-dependency-track api token
      default: ci-dependency-track
  steps:
    - env:
        - name: API_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: token
        - name: DEPTRACK_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: url
        - name: PROJECT_NAME
          value: $(params.PROJECT_NAME)
      image: >-
        ghcr.io/cyclonedx/cdxgen:v9.6.0@sha256:ea01324872d2c21b024264a2224d761ab63851b9cc4722903b5e74be56ca6fa6
      name: cdxgen
      computeResources: {}
      script: >
        #!/usr/bin/env sh

        set -e

        set +x

        /opt/cdxgen/bin/cdxgen.js --api-key=$API_TOKEN --server-url=$DEPTRACK_URL --project-name=$PROJECT_NAME
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
---
# Source: edp-install/charts/edp-tekton/templates/tasks/check-helm-chart-name.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: check-helm-chart-name
spec:
  params:
    - name: codebase_name
      type: string
    - name: chart_dir
      description: The directory in source that contains the helm chart
      default: "."
  steps:
    - name: check-helm-chart-name
      env:
        - name: CODEBASE_NAME
          value: $(params.codebase_name)
        - name: CHART_DIR
          value: $(params.chart_dir)
      image: alpine:3.18.6
      script: |
        #!/bin/sh
        # Extract the chart name from the Chart.yaml
        CHART_NAME=$(awk '/^name:/ {print $2}' ${CHART_DIR}/Chart.yaml)

        # Compare with CODEBASE_NAME
        if [ "$CHART_NAME" == "$CODEBASE_NAME" ]; then
            echo "The name in Chart.yaml matches the CODEBASE_NAME."
        else
            echo "The name in Chart.yaml does not match the CODEBASE_NAME."
            exit 1
        fi

      workingDir: $(workspaces.source.path)
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
---
# Source: edp-install/charts/edp-tekton/templates/tasks/codenarc.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: codenarc
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: CodeNarc
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Gradle build and a Groovy CodeNarc review.
    Download the output of the 'codenarc-report' step as logs from Tekton
    and save it as 'html'.
    Open the 'html' file in a browser to see the CodeNarc report.

  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: BASE_IMAGE
      description: Gradle base image.
      type: string
      default: gradle:7.5.1-jdk11
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: EXTRA_ARGS
      description: Extra arguments to add to the gradle build
      default: |
        -Dorg.gradle.internal.publish.checksums.insecure=true \
        publish
  volumes:
    - name: settings-codenarc
      configMap:
        name: custom-codenarc-settings
  steps:
    - name: gradle-tasks
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-codenarc
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
          -PnexusLogin=${CI_USERNAME} \
          -PnexusPassword=${CI_PASSWORD} \
          $(params.EXTRA_ARGS)
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
    - name: codenarc-report
      image: alpine:3.18.6
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        cat /workspace/source/build/reports/codenarc/main.html
---
# Source: edp-install/charts/edp-tekton/templates/tasks/commit-validate.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Commit-Validate
    tekton.dev/platforms: linux/amd64
  name: commit-validate
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  description: |
    This task validates a commit message.
  params:
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: BASE_IMAGE
      description: "The base image for the task."
      default: "python:3.10.1-alpine3.15"
    - name: MAX_LINE_LENGTH
      description: "Maximum length of each line in the commit message."
      default: "80"
  steps:
    - image: $(params.BASE_IMAGE)
      name: commit-validate
      env:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
        - name: MAX_LINE_LENGTH
          value: $(params.MAX_LINE_LENGTH)
      script: |
        #!/usr/bin/env python

        import os
        import sys
        import re

        commit_message_pattern = os.getenv("COMMIT_MESSAGE_PATTERN")
        if not commit_message_pattern:
            print("[TEKTON] Pattern to validate commit message is empty")
            sys.exit(1)

        commit_message = os.getenv("COMMIT_MESSAGE")

        print("[TEKTON] Pattern to validate commit message: " + commit_message_pattern)

        print("[TEKTON] Commit message to validate has been fetched:\n" + commit_message)

        result = re.search(commit_message_pattern, commit_message)

        if result == None:
            print("[TEKTON] Commit message is invalid. The required pattern is " + commit_message_pattern)
            sys.exit(1)

        max_line_length = int(os.getenv("MAX_LINE_LENGTH"))
        lines = commit_message.split('\n')
        for line in lines:
            if len(line) > max_line_length:
                print(f"[TEKTON] A line in the commit message is too long. Each line should be no longer than {max_line_length} characters.")
                sys.exit(1)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/create-ecr-repository.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-ecr-repository
  labels:
    app.kubernetes.io/based-on: "0.6"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Init ECR repository"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task creates an ECR repo
  params:
    - name: REPO_NAME
      description: "The name of the ecr repository where we are going to push the image"
    - name: edp-config
      type: string
      description: "This configmap holds aws_region parameter"
      default: edp-config
  steps:
    - name: init-repository
      image: amazon/aws-cli:2.7.35
      
      env:
        - name: REPO_NAME
          value: "$(params.REPO_NAME)"
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: "$(params.edp-config)"
              key: 'aws_region'
      command: ["/bin/sh"]
      args:
        - "-c"
        - |
          ECR_REPO_NAME=$(echo "${REPO_NAME}" | cut -d'/' -f2-)
          aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" || aws ecr create-repository --repository-name "$ECR_REPO_NAME"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/dotnet.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dotnet
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: DotNet
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a DotNet build.

  workspaces:
    - name: source
      description: The workspace consisting of the dotnet project.

  volumes:
    - name: settings-nuget
      configMap:
        name: custom-nuget-settings

  params:
    - name: BASE_IMAGE
      description: DotNet base image.
      type: string
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
    - name: PROJECT_DIR
      description: The directory containing source code.
      type: string
      default: "."
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret for the Sonarqube integration
      default: "ci-sonarqube"
    - name: EXTRA_COMMANDS
      type: string
  steps:
    - name: dotnet
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)

      volumeMounts:
        - name: settings-nuget
          mountPath: $(workspaces.source.path)/$(params.PROJECT_DIR)/nuget.config
          subPath: nuget.config

      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
      script: |
        #!/usr/bin/env sh
        set -e
        $(params.EXTRA_COMMANDS)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/ecr-to-docker.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: ecr-to-docker
  labels:
    app.kubernetes.io/based-on: "0.6"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Copy
    tekton.dev/tags: image-copy
    tekton.dev/displayName: "Push ECR images to DockerHUB"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task copies images from ECR to DockerHUB.
    It must be used after kaniko-build task.
    It is necessary to add a Service Account in a Pipeline for this task to run
    since it uses AWS ECR authentication.
  params:
    - name: ECR_LOGIN
      type: string
      default: '/workspace/ecr_login_pass'
    - name: ECR_USER
      type: string
      default: 'AWS'
    - name: CODEBASE_NAME
      type: string
    - name: IMAGE_TAG
      type: string
    - name: DOCKERHUB_HOST
      type: string
      default: 'index.docker.io'
    - name: dockerhub-credentials
      type: string
      description: secret holding dockerhub login token
      default: dockerhub-credentials
    - name: edp-config
      type: string
      description: this configmap holds aws_region parameter
      default: edp-config
  steps:
    - image: amazon/aws-cli:2.7.35
      name: get-ecr-pass
      computeResources: {}
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: "$(params.edp-config)"
              key: 'aws_region'
      script: |
        aws ecr get-login-password --region "${AWS_REGION}" > "${ECR_LOGIN}"
        ls -l "${ECR_LOGIN}"
    - name: copy-image
      env:
        - name: ECR_LOGIN
          value: "$(params.ECR_LOGIN)"
        - name: ECR_USER
          value: "$(params.ECR_USER)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: IMAGE_TAG
          value: "$(params.IMAGE_TAG)"
        - name: DOCKERHUB_HOST
          value: "$(params.DOCKERHUB_HOST)"
        - name: DOCKERHUB_USERNAME
          valueFrom:
            secretKeyRef:
              name: "$(params.dockerhub-credentials)"
              key: 'username'
        - name: DOCKERHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: "$(params.dockerhub-credentials)"
              key: 'accesstoken'
        - name: DOCKERHUB_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: "$(params.dockerhub-credentials)"
              key: 'account'
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
      image: gcr.io/go-containerregistry/crane/debug:v0.11.0
      script: |
        #!/busybox/sh
        DOCKERHUB_IMAGE_TAGGED="${DOCKERHUB_HOST}/${DOCKERHUB_ACCOUNT}/${CODEBASE_NAME}:${IMAGE_TAG}"
        echo "${DOCKERHUB_TOKEN}" | crane auth login "${DOCKERHUB_HOST}" -u "${DOCKERHUB_USERNAME}" --password-stdin
        if crane manifest "${DOCKERHUB_IMAGE_TAGGED}"; then
            echo " [INFO] Image "${DOCKERHUB_IMAGE_TAGGED}" already exists in Docker Hub"
            exit 1
        else
            cat "${ECR_LOGIN}" | crane auth login "${CONTAINER_REGISTRY_URL}" -u "${ECR_USER}" --password-stdin
            crane cp "${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}/${CODEBASE_NAME}:${IMAGE_TAG}" "${DOCKERHUB_IMAGE_TAGGED}"
        fi
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/edp-dotnet.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: edp-dotnet
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: DotNet
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a DotNet build.

  workspaces:
    - name: source
      description: The workspace consisting of the dotnet project.
  params:
    - name: BASE_IMAGE
      description: DotNet base image.
      type: string
      default: "mcr.microsoft.com/dotnet/sdk:3.1.423-alpine3.16"
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "source"
    - name: DOTNET_CACHE
      type: string
      description: name of the secret for the Sonarqube integration
      default: "/workspace/source/cache"
  steps:
    - name: build
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: DOTNET_CACHE
          value: $(params.DOTNET_CACHE)
      script: |
        #!/usr/bin/env sh
        set -e
        dotnet restore --packages ${DOTNET_CACHE}
        dotnet build
    - name: test
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: DOTNET_CACHE
          value: $(params.DOTNET_CACHE)
      script: |
        #!/usr/bin/env sh
        set -e
        dotnet restore --packages ${DOTNET_CACHE}
        ls *Tests*/*.csproj | while read -r file;
            do dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover "${file}";
        done
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/edp-gradle.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: edp-gradle
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: Gradle
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Gradle build.

  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: BASE_IMAGE
      description: Gradle base image.
      type: string
      default: gradle:7.5.1-jdk11
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "source"
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: GRADLE_USER_CACHE
      description: Gradle user cache directory
      default: /workspace/source/cache
  volumes:
    - name: settings-gradle
      configMap:
        name: custom-gradle-settings
  steps:
    - name: compile
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-gradle
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
            clean \
            compileJava \
            -x test
      env:
        - name: XDG_CONFIG_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: GRADLE_USER_HOME
          value: $(params.GRADLE_USER_CACHE)
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
    - name: test
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-gradle
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
            test \
            jacocoTestReport
      env:
        - name: XDG_CONFIG_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: GRADLE_USER_HOME
          value: $(params.GRADLE_USER_CACHE)
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
    - name: build
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-gradle
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
            build -x test
      env:
        - name: XDG_CONFIG_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: GRADLE_USER_HOME
          value: $(params.GRADLE_USER_CACHE)
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/edp-npm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: edp-npm
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run npm goals on a project
    where package.json is present and has some pre-defined
    npm scripts.
  params:
    - name: PATH_CONTEXT
      type: string
      default: "source"
      description: The path where package.json of the project is defined.
    - name: BASE_IMAGE
      type: string
      default: "docker.io/library/node:18.20.3-alpine3.20"
      description: The node image you want to use.
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret for the Sonarqube integration
      default: "ci-sonarqube"
    - name: CACHE_DIR
      default: "/workspace/source/cache"
      description: The path to the cache directory.

  workspaces:
    - name: source

  volumes:
    - name: settings-npm
      configMap:
        name: custom-npm-settings

  steps:
    - name: init
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)

      volumeMounts:
        - name: settings-npm
          mountPath: /var/configmap

      env:
        - name: HOME
          value: "$(workspaces.source.path)/"
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
        - name: NPM_CACHE_DIR
          value: $(params.CACHE_DIR)
      script: |
        #!/usr/bin/env sh
        set -e
        
        export upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
        export npm_config_userconfig=/var/configmap/.npmrc-ci
        export NEXUS_HOST="//${NEXUS_HOST_URL#*://}"
        npm ci

    - name: build
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        npm run build:prod
      

    - name: test
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      script: |
        npm run test:coverage
      
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/gerrit-ssh-cmd.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gerrit-ssh-cmd
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Gerrit Tools
    tekton.dev/tags: ssh, gerrit api
    tekton.dev/displayName: "gerrit api over ssh"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to run gerrit votes using ssh.

    The following task takes gerrit host and required credentials as input along
    with the command and run it on gerrit server.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before ssh commands are executed.
  params:
    - name: GERRIT_HOST
      type: string
      description: Remote host to connect
      default: "gerrit"
    - name: USERNAME
      type: string
      description: SSH username
      default: "edp-ci"
    - name: GERRIT_PORT
      type: string
      description: SSH port, default is 22
      default: "22"
    - name: SSH_GERRIT_COMMAND
      type: string
      description: The gerrit command you want to run over ssh
    - name: ERR_EXIT_CODE
      type: string
      description: Define Error exit code for task. By default - 1. In case of skip set 0
      default: "1"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  steps:
    - name: ssh
      image: 'epamedp/tekton-openssh-client:0.1.5'
      env:
        - name: GERRIT_HOST
          value: "$(params.GERRIT_HOST)"
        - name: GERRIT_PORT
          value: "$(params.GERRIT_PORT)"
        - name: USERNAME
          value: "$(params.USERNAME)"
        - name: SSH_GERRIT_COMMAND
          value: "$(params.SSH_GERRIT_COMMAND)"
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: ERR_EXIT_CODE
          value: $(params.ERR_EXIT_CODE)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        ssh -o StrictHostKeyChecking=no -p ${GERRIT_PORT} ${USERNAME}@${GERRIT_HOST} gerrit ${SSH_GERRIT_COMMAND} || exit ${ERR_EXIT_CODE}
---
# Source: edp-install/charts/edp-tekton/templates/tasks/get-cache.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-cache
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "get-cache"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task is used to get the cache from the distribution server. It stores cache in the root of the workspace.
  params:
    - name: CACHE_NAME
      description: "Cache name (filename) to be downloaded from the cache server."
      type: string
    - name: BASE_IMAGE
      description: "Base image"
      default: "ghcr.io/curl/curl-container/curl-multi:8.3.0"
      type: string

  workspaces:
    - name: cache

  steps:
    - name: get-cache
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.cache.path)

      script: |
        #!/usr/bin/env sh
        set -ex
        set -o pipefail

        curl -fsI ${CACHE_SERVER_URL}/${CACHE_NAME}.tar.gz || {
              echo "no cache found"
              exit 0
        }

        echo "Getting cache"
        curl ${CACHE_SERVER_URL}/${CACHE_NAME}.tar.gz|tar -xz -f-
      env:
        - name: CACHE_SERVER_URL
          valueFrom:
            configMapKeyRef:
              name: tekton-cache
              key: url
              optional: true
        - name: CACHE_NAME
          value: "$(params.CACHE_NAME)"
      # TODO: We need to run this task as root because the workspace is owned by root.
      securityContext:
        runAsUser: 0

      computeResources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/GetVersion.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-version-default
spec:
  description: |
    This task generates a version number for the application based on the current timestamp and the branch name.
    The version number is used to tag the image and the codebase image stream.
  params:
    - name: BRANCH_NAME
      type: string
      description: Branch name.
  results:
    - name: VERSION
      description: "Application version"
    - name: VCS_TAG
      description: "VCS tag"
    - name: IS_TAG
      description: "CodebaseImageStream tag"
    - name: TIMESTAMP
      description: Current timestamp
  steps:
    - name: get-timestamp
      image: alpine:3.18.6
      script: |
        ts=$(date "+%Y%m%d-%H%M%S")
        echo "Current Timestamp: ${ts}"
        echo ${ts} | tr -d "\n" | tee $(results.TIMESTAMP.path)

    - name: get-version
      image: alpine:3.18.6
      env:
        - name: BRANCH_NAME
          value: "$(params.BRANCH_NAME)"
      script: |
        set -e

        # get current BUILD ID
        BUILD_ID=$(cat $(results.TIMESTAMP.path))

        BUILD_VERSION="${BUILD_ID}"
        VCS_TAG="${BRANCH_NAME}-${BUILD_VERSION}"
        NORMALIZED_BRANCH=$(printf '%s' "${BRANCH_NAME}" | sed 's/\//-/g')
        IS_TAG="${NORMALIZED_BRANCH}-${BUILD_VERSION}"

        echo "Application version - ${BUILD_VERSION}"
        echo "VCS tag - ${VCS_TAG}"
        echo "IS tag - ${IS_TAG}"

        printf "%s" "${BUILD_VERSION}" > "$(results.VERSION.path)"
        printf "%s" "${VCS_TAG}" > "$(results.VCS_TAG.path)"
        printf "%s" "${IS_TAG}" > "$(results.IS_TAG.path)"
        printf "%s" "${BUILD_ID}" > "$(results.VERSION.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/GetVersionHelm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-version-helm-default
spec:
  description:
    The task is used to get the version of the application from the helm chart.
  workspaces:
    - name: source
      description: The workspace consisting of csharp project.
  params:
    - name: BRANCH_NAME
      type: string
      description: Branch name.
    - name: chart-dir
      type: string
  results:
    - name: VERSION
      description: "Application version"
    - name: VCS_TAG
      description: "VCS tag"
    - name: IS_TAG
      description: "CodebaseImageStream tag"
  steps:
    - name: get-version
      image: linuxserver/yq
      env:
        - name: BRANCH_NAME
          value: "$(params.BRANCH_NAME)"
        - name: CHART_DIR
          value: "$(params.chart-dir)"
      workingDir: $(workspaces.source.path)
      script: |
        set -e

        BUILD_VERSION=$(grep -m 1 -oE 'version:[[:space:]]*[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*' ${CHART_DIR}/Chart.yaml | awk '{print $2}')
        BUILD_VERSION=$(cat ${CHART_DIR}/Chart.yaml | yq -r ".version")

        VCS_TAG="${BRANCH_NAME}-${BUILD_VERSION}"
        IS_TAG="${BUILD_VERSION}"

        echo "VCS tag - ${VCS_TAG}"
        echo "IS tag - ${IS_TAG}"
        echo "VERSION tag - ${BUILD_VERSION}"

        printf "%s" "${VCS_TAG}" > "$(results.VCS_TAG.path)"
        printf "%s" "${BUILD_VERSION}" > "$(results.VERSION.path)"
        printf "%s" "${IS_TAG}" > "$(results.IS_TAG.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/UpdateBuildNumberDotnet.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-version-dotnet-default
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of dotnet project.
  params:
    - name: BRANCH_NAME
      type: string
      description: Branch name.
  results:
    - name: VERSION
      description: "Application version"
    - name: VCS_TAG
      description: "VCS tag"
    - name: IS_TAG
      description: "CodebaseImageStream tag"
    - name: DEPLOYABLE_MODULE_DIR
    - name: TIMESTAMP
      description: Current timestamp
  steps:
    - name: get-timestamp
      image: alpine:3.18.6
      script: |
        ts=$(date "+%Y%m%d-%H%M%S")
        echo "Current Timestamp: ${ts}"
        echo ${ts} | tr -d "\n" | tee $(results.TIMESTAMP.path)

    - name: get-version
      image: alpine:3.18.6
      env:
        - name: BRANCH_NAME
          value: "$(params.BRANCH_NAME)"
      workingDir: $(workspaces.source.path)
      script: |
        set -e

        DEPLOYABLE_MODULE=$(find ./ -name '*.csproj' | xargs awk  -F '[><]' '/<DeployableModule>/ {print $3}')

        VERSION=$(find ${DEPLOYABLE_MODULE} -name '*.csproj' | xargs awk  -F '[><]' '/<Version>/ {print $3}' | tr '[:upper:]' '[:lower:]')

        # get current BUILD ID
        BUILD_ID=$(cat $(results.TIMESTAMP.path))

        BUILD_VERSION="${VERSION}-${BUILD_ID}"
        VCS_TAG="${BUILD_VERSION}"
        NORMALIZED_BRANCH=$(printf '%s' "${BRANCH_NAME}" | sed 's/\//-/g')
        IS_TAG="${BUILD_VERSION}"

        echo "Application version - ${BUILD_VERSION}"
        echo "VCS tag - ${VCS_TAG}"
        echo "IS tag - ${IS_TAG}"

        printf "%s" "${BUILD_VERSION}" > "$(results.VERSION.path)"
        printf "%s" "${VCS_TAG}" > "$(results.VCS_TAG.path)"
        printf "%s" "${IS_TAG}" > "$(results.IS_TAG.path)"

        DEPLOYABLE_MODULE_DIR="."

        printf "%s" "${DEPLOYABLE_MODULE_DIR}" > "$(results.DEPLOYABLE_MODULE_DIR.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/UpdateBuildNumberGradle.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-gradle-default
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of gradle project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        set -ex

        sed -i "s/version = .*/version = \'${VERSION}\'/" build.gradle
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/UpdateBuildNumberNpm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-npm-default
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of npm project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "node:18.9.0"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        #!/usr/bin/env sh
        set -ex

        NPM_VERSION=$(node -p "require('./package.json').version" | tr '[:upper:]' '[:lower:]')

        BUILD_VERSION="${NPM_VERSION}-${VERSION}"

        npm --no-git-tag-version version ${BUILD_VERSION}
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/defaulttype/UpdateBuildNumberPython.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-python-default
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of python project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        #!/bin/sh
        set -ex

        sed -i 's/\(__version__\s*=\s*\).*/\1'\"${VERSION}\"'/' version/__init__.py
        cat version/__init__.py
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/GetVersionEDP.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-version-edp
spec:
  description:
  params:
    - name: CODEBASEBRANCH_NAME
      type: string
      description: "Codebasebranch name"
  results:
    - name: VERSION
      description: "Application version"
    - name: VCS_TAG
      description: "VCS tag"
    - name: IS_TAG
      description: "CodebaseImageStream tag"
    - name: BUILD_ID
      description: "Build id"
    - name: BRANCH_VERSION
      description: "Branch version"
    - name: IS_RELEASE_BRANCH
    - name: DEPLOYABLE_MODULE_DIR
  steps:
    - name: get-version
      image: bitnami/kubectl:1.25.2
      env:
        - name: CODEBASEBRANCH_NAME
          value: "$(params.CODEBASEBRANCH_NAME)"
      script: |
        #!/usr/bin/env bash
        set -e

        # replace '/' with '-'
        CODEBASEBRANCH_NAME=${CODEBASEBRANCH_NAME//\//-}
        # get current BUILD ID
        BUILD_ID=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.status.build})
        # and increment it
        BUILD_ID=$((BUILD_ID+1))
        # set new version
        kubectl patch codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} --subresource=status --type=merge -p "{\"status\": {\"build\": \"$BUILD_ID\"}}"

        IS_RELEASE_BRANCH=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.spec.release})

        # Get current version
        VERSION=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.spec.version})

        # Replace slashes
        VERSION=$(printf '%s' ${VERSION} | sed 's/\//-/g')

        BRANCH_VERSION=${VERSION}
        VERSION="${VERSION}.${BUILD_ID}"
        VCS_TAG="build/${VERSION}"
        IS_TAG=${VERSION}
        DEPLOYABLE_MODULE_DIR="."

        echo "Application version - ${VERSION}"
        echo "VCS tag - ${VCS_TAG}"
        echo "IS tag - ${IS_TAG}"
        echo "Build id - ${BUILD_ID}"
        echo "Branch version - ${BRANCH_VERSION}"

        if [ "${IS_RELEASE_BRANCH}" = "true" ] ; then
            VERSION="${BRANCH_VERSION}.${BUILD_ID}"
        else
            VERSION="${BRANCH_VERSION}"
        fi

        printf "%s" "${VERSION}" > "$(results.VERSION.path)"
        printf "%s" "${VCS_TAG}" > "$(results.VCS_TAG.path)"
        printf "%s" "${IS_TAG}" > "$(results.IS_TAG.path)"
        printf "%s" "${BUILD_ID}" > "$(results.BUILD_ID.path)"
        printf "%s" "${BRANCH_VERSION}" > "$(results.BRANCH_VERSION.path)"
        printf "%s" "${IS_RELEASE_BRANCH}" > "$(results.IS_RELEASE_BRANCH.path)"
        printf "%s" "${DEPLOYABLE_MODULE_DIR}" > "$(results.DEPLOYABLE_MODULE_DIR.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberCsharp.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-csharp
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        set -ex

        DEPLOYABLE_MODULE=$(find ./ -name '*.csproj')
        sed -i "s#\(<Version>\).*\(</Version>\)#\1${VERSION}\2#" ${DEPLOYABLE_MODULE}
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberDotnet.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-dotnet
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        set -ex

        DEPLOYABLE_MODULE=$(find ./ -name '*.csproj' | xargs awk  -F '[><]' '/<DeployableModule>/ {print $3}')
        sed -i "s#\(<Version>\).*\(</Version>\)#\1${VERSION}\2#" ${DEPLOYABLE_MODULE}/${DEPLOYABLE_MODULE}.csproj
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberGradle.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-gradle
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BRANCH_VERSION
      type: string
      description: "Branch version"
    - name: BUILD_ID
      type: string
      description: "Version"
    - name: IS_RELEASE_BRANCH
      type: string
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: BRANCH_VERSION
          value: "$(params.BRANCH_VERSION)"
        - name: BUILD_ID
          value: "$(params.BUILD_ID)"
      script: |
        set -ex

        if [ "${IS_RELEASE_BRANCH}" = "true" ] ; then
            sed -i "s/version = .*/version = \'${BRANCH_VERSION}-${BUILD_ID}\'/" build.gradle
        else
            sed -i "s/^version = .*/version = \'${BRANCH_VERSION}\'/" build.gradle
        fi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberHelmChart.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-helm-chart
spec:
  description: >-
    This Task can be used to update a helm chart version.
  workspaces:
    - name: source
      description: The workspace consisting of helm chart project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
        - name: CHART_DIR
          value: $(params.CHART_DIR)
      script: |
        #!/bin/sh
        set -ex

        sed -i "s/^version: .*$/version: ${VERSION}/" ${CHART_DIR}/Chart.yaml
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberNpm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-npm
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BRANCH_VERSION
      type: string
      description: "Branch version"
    - name: BUILD_ID
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "node:18.9.0"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: BRANCH_VERSION
          value: "$(params.BRANCH_VERSION)"
        - name: BUILD_ID
          value: "$(params.BUILD_ID)"
      script: |
        #!/usr/bin/env sh
        set -ex

        npm --no-git-tag-version version ${BRANCH_VERSION}-${BUILD_ID}
---
# Source: edp-install/charts/edp-tekton/templates/tasks/getversion/edptype/UpdateBuildNumberPython.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-build-number-python
spec:
  description:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: VERSION
      type: string
      description: "Version"
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  steps:
    - name: update-build-number
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        #!/bin/sh
        set -ex

        VERSION_LOWER_CASE=$(echo "${VERSION}" | tr '[:upper:]' '[:lower:]')
        if [[ ! ${VERSION_LOWER_CASE} == *"snapshot"* ]]; then
            sed -i 's/\(__version__\s*=\s*\).*/\1'\"${VERSION}\"'/' version/__init__.py
        fi
        cat version/__init__.py
---
# Source: edp-install/charts/edp-tekton/templates/tasks/git-cli.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-cli
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.21.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git cli"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to perform git operations.

    Git command that needs to be run can be passed as a script to
    the task. This task needs authentication to git in order to push
    after the git operation.

  workspaces:
    - name: source
      description: A workspace that contains the fetched git repository.

    - name: input
      optional: true
      description: |
        An optional workspace that contains the files that need to be added to git. You can
        access the workspace from your script using `$(workspaces.input.path)`, for instance:

          cp $(workspaces.input.path)/file_that_i_want .
          git add file_that_i_want
          # etc

    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.

    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
  params:
    - name: BASE_IMAGE
      description: |
        The base image for the task.
      type: string
      default: docker.io/alpine/git:v2.26.2@sha256:23618034b0be9205d9cc0846eb711b12ba4c9b468efdd8a59aac1d7b1a23363f #tag: v2.26.2

    - name: GIT_USER_NAME
      type: string
      description: |
        Git user name for performing git operation.
      default: ""

    - name: GIT_USER_EMAIL
      type: string
      description: |
        Git user email for performing git operation.
      default: ""

    - name: GIT_SCRIPT
      description: The git script to run.
      type: string
      default: |
        git help

    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"

    - name: VERBOSE
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"

  results:
    - name: commit
      description: The precise commit SHA after the git operation.

  steps:
    - name: git
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: GIT_SSH_COMMAND
          value: ssh -i $(params.USER_HOME)/.ssh/id_rsa -o StrictHostKeyChecking=no
        - name: HOME
          value: $(params.USER_HOME)
        - name: PARAM_VERBOSE
          value: $(params.VERBOSE)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
          value: $(workspaces.basic-auth.bound)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          echo "" >> "${PARAM_USER_HOME}"/.ssh/id_rsa
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        # Setting up the config for the git.
        git config --global user.email "$(params.GIT_USER_EMAIL)"
        git config --global user.name "$(params.GIT_USER_NAME)"

        # remove git-hooks. We potentially might have hooks installed by components, for example - pre-commit
        # this leads to the situation when we have a hook and are not able to perform git command
        rm -rf .git/hooks

        eval '$(params.GIT_SCRIPT)'

        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        printf "%s" "$RESULT_SHA" > "$(results.commit.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/git-clone.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
  labels:
    app.kubernetes.io/based-on: "0.7"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.29.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "2"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
      type: string
      default: "ca-bundle.crt"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
    - name: url
      description: The precise URL that was fetched by this Task.
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_CRT_FILENAME
        value: $(params.crtFileName)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          echo "" >> "${PARAM_USER_HOME}"/.ssh/id_rsa
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/github-set-status.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: github-set-status
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/categories: Git
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: github
    tekton.dev/displayName: "set github status"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task will set the status of the CI job to the specified value along
    with a link to the specified target URL where developers can follow the
    progress of the CI job.

    The `github-set-status` task allows external services to mark GitHub commits
    with an `error`, `failure`, `pending`, or `success` state, which is then
    reflected in pull requests involving those commits. Statuses include as well a
    `description` and a `target_url`, to give the user informations about the CI
    statuses or a direct link to the full log.

  params:
    - name: GITHUB_HOST_URL
      description: |
        The GitHub host, adjust this if you run a GitHub enteprise.
      default: "api.github.com"
      type: string

    - name: API_PATH_PREFIX
      description: |
        The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3
      default: ""
      type: string

    - name: REPO_FULL_NAME
      description: |
        The GitHub repository full name, e.g.: tektoncd/catalog
      type: string

    - name: GITHUB_TOKEN_SECRET_NAME
      description: |
        The name of the kubernetes secret that contains the GitHub token, default: github
      type: string
      default: github

    - name: GITHUB_TOKEN_SECRET_KEY
      description: |
        The key within the kubernetes secret that contains the GitHub token, default: token
      type: string
      default: token

    - name: SHA
      description: |
        Commit SHA to set the status for.
      type: string

    - name: TARGET_URL
      description: |
        The target URL to associate with this status. This URL will be linked
        from the GitHub UI to allow users to easily see the source of the
        status.
      type: string

    - name: DESCRIPTION
      description: |
        A short description of the status.
      type: string

    - name: CONTEXT
      description: |
        The GitHub context, A string label to differentiate this status from
        the status of other systems. ie: "continuous-integration/tekton"
      default: "continuous-integration/tekton"
      type: string

    - name: STATE
      description: |
        The state of the status. Can be one of the following `error`,
        `failure`, `pending`, or `success`.
      type: string

    - name: AUTH_TYPE
      description: |
        The type of authentication to use. You could use the less secure "Basic" for example
      type: string
      default: Bearer

    - name: IMAGE
      description: |
        Image providing the python binary which this task uses.
      type: string
      default: python:3.10.1-alpine3.15

    - name: SHEBANG
      description: |
        Python path. Depends on the image.
      type: string
      default: /usr/bin/env python

  volumes:
    - name: githubtoken
      secret:
        secretName: $(params.GITHUB_TOKEN_SECRET_NAME)

  steps:
    - name: set-status
      volumeMounts:
        - name: githubtoken
          mountPath: /etc/github-set-status
      env:
        - name: GITHUB_HOST_URL
          value: $(params.GITHUB_HOST_URL)
        - name: API_PATH_PREFIX
          value: $(params.API_PATH_PREFIX)
        - name: REPO_FULL_NAME
          value: $(params.REPO_FULL_NAME)
        - name: GITHUB_TOKEN_SECRET_NAME
          value: $(params.GITHUB_TOKEN_SECRET_NAME)
        - name: GITHUB_TOKEN_SECRET_KEY
          value: $(params.GITHUB_TOKEN_SECRET_KEY)
        - name: SHA
          value: $(params.SHA)
        - name: TARGET_URL
          value: $(params.TARGET_URL)
        - name: DESCRIPTION
          value: $(params.DESCRIPTION)
        - name: CONTEXT
          value: $(params.CONTEXT)
        - name: STATE
          value: $(params.STATE)
        - name: AUTH_TYPE
          value: $(params.AUTH_TYPE)
        - name: SHEBANG
          value: $(params.SHEBANG)

      image: $(params.IMAGE)
      script: |
        #!$(params.SHEBANG)

        """This script will set the CI status on GitHub PR"""

        import json
        import os
        import sys
        import http.client

        github_token_filename = "/etc/github-set-status/" + \
            os.getenv("GITHUB_TOKEN_SECRET_KEY")
        github_token = open(github_token_filename, "r").read()

        status_url = os.getenv("API_PATH_PREFIX") + "/repos/" + \
            os.getenv("REPO_FULL_NAME") + "/statuses/" + os.getenv("SHA")

        data = {
            "state": os.getenv("STATE"),
            "target_url": os.getenv("TARGET_URL"),
            "description": os.getenv("DESCRIPTION"),
            "context": os.getenv("CONTEXT")
        }
        print("Sending this data to GitHub@{url}: ".format(
          url=os.getenv("GITHUB_HOST_URL")))
        print(data)

        authHeader = os.getenv("AUTH_TYPE") + " " + github_token

        # This is for our fake github server
        if "$(params.GITHUB_HOST_URL)".startswith("http://"):
          conn = http.client.HTTPConnection("$(params.GITHUB_HOST_URL)".replace("http://", ""))
        else:
          conn = http.client.HTTPSConnection("$(params.GITHUB_HOST_URL)")

        conn.request(
            "POST",
            status_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": authHeader,
                "Accept": "application/vnd.github.v3+json ",
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            sys.exit(1)
        else:
            print("GitHub status '{state}' has been set on {repo}#{sha} ".format(
                state=os.getenv("STATE"),
                repo=os.getenv("REPO_FULL_NAME"),
                sha=os.getenv("SHA")))
---
# Source: edp-install/charts/edp-tekton/templates/tasks/gitlab-set-status.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gitlab-set-status
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Git
    tekton.dev/tags: gitlab, git
    tekton.dev/displayName: "Set Gitlab commit status"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will set the status of the CI job to the specified value along
    with a link to the specified target URL where developers can follow the
    progress of the CI job.

    The `gitlab-set-status` task allows external services to mark GitLab commits
    with an `error`, `failure`, `pending`, or `success` state, which is then
    reflected in merge requests involving those commits. Statuses include as well a
    `description` and a `target_url`, to give the user informations about the CI
    statuses or a direct link to the full log.

  params:
    - name: GITLAB_HOST_URL
      description: |
        The GitLab host, adjust this if you run a GitLab enterprise. In EDP we use git_ssh_url
        value from the event payload, format: "git@example.com:mike/diaspora.git"
      default: "gitlab.com"
      type: string

    - name: API_PATH_PREFIX
      description: |
        The API path prefix, GitLab Enterprise has a prefix e.g. /api/v4
      default: "/api/v4"
      type: string

    - name: REPO_FULL_NAME
      description: |
        The GitLab repository full name, e.g.: tektoncd/catalog
      type: string

    - name: GITLAB_TOKEN_SECRET_NAME
      description: |
        The name of the kubernetes secret that contains the GitLab token, default: gitlab-api-secret
      type: string
      default: gitlab-api-secret

    - name: GITLAB_TOKEN_SECRET_KEY
      description: |
        The key within the kubernetes secret that contains the GitLab token, default: token
      type: string
      default: token

    - name: SHA
      description: |
        Commit SHA to set the status for.
      type: string

    - name: TARGET_URL
      description: |
        The target URL to associate with this status. This URL will be linked
        from the GitLab UI to allow users to easily see the source of the
        status.
      type: string

    - name: DESCRIPTION
      description: |
        A short description of the status.
      type: string

    - name: CONTEXT
      description: |
        The GitLab context, A string label to differentiate this status from
        the status of other systems. ie: "continuous-integration/tekton"
      default: "continuous-integration/tekton"
      type: string

    - name: STATE
      description: |
        The state of the status. Can be one of the following `pending`,
        `running`, `success`, `failed`, or `canceled`.
      type: string

  steps:
    - name: set-status
      image: registry.access.redhat.com/ubi8/python-38@sha256:af6f93b81f9313de95966e8cd681edb9dbcb5fdbddc5a4cc365af8e4534096ef
      script: |
        #!/usr/libexec/platform-python

        import os
        import sys
        import json
        import http.client
        import urllib.parse

        GITLAB_TOKEN = os.getenv("GITLAB_TOKEN")
        GITLAB_HOST_URL = "ssh://$(params.GITLAB_HOST_URL)"
        API_PATH_PREFIX = "$(params.API_PATH_PREFIX)"
        REPO_FULL_NAME = "$(params.REPO_FULL_NAME)"
        SHA = "$(params.SHA)"
        STATE = "$(params.STATE)"
        CONTEXT = "$(params.CONTEXT)"
        TARGET_URL = "$(params.TARGET_URL)"
        DESCRIPTION = "$(params.DESCRIPTION)"

        headers = {
            "User-Agent": "TektonCD, the peaceful cat",
            "Authorization": f"Bearer {GITLAB_TOKEN}",
        }

        URLENCODED_REPO_NAME = urllib.parse.quote(REPO_FULL_NAME, safe="")

        params = {
            "state": STATE,
            "context": CONTEXT,
            "target_url": TARGET_URL,
            "description": DESCRIPTION
        }

        encoded_params = urllib.parse.urlencode(params)

        api_url = f"{API_PATH_PREFIX}/projects/{URLENCODED_REPO_NAME}/statuses/{SHA}?{encoded_params}"

        # we need to adapt to EDP approach and extract the host from the git_ssh_url
        # which is in the format: git@example.com:mike/diaspora.git
        GITLAB_HOST_URL = urllib.parse.urlparse(GITLAB_HOST_URL).hostname

        print(f"POST to {GITLAB_HOST_URL}{api_url}")

        if GITLAB_HOST_URL.startswith("http://"):
            conn = http.client.HTTPConnection(GITLAB_HOST_URL[7:])
        elif GITLAB_HOST_URL.startswith("https://"):
            conn = http.client.HTTPSConnection(GITLAB_HOST_URL[8:])
        else:
            conn = http.client.HTTPSConnection(GITLAB_HOST_URL)
        try:
            conn.request("POST", api_url, headers=headers)

            resp = conn.getresponse()
            if not str(resp.status).startswith("2"):
                print(f"{resp.status} | Unable to set status")
                response_data = json.dumps(json.loads(resp.read()), indent=4)
                print(response_data)
                sys.exit(1)
            else:
                print(f"Just set status of {REPO_FULL_NAME}#{SHA} to {STATE}")
        finally:
            conn.close()

      env:
        - name: GITLAB_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.GITLAB_TOKEN_SECRET_NAME)
              key: $(params.GITLAB_TOKEN_SECRET_KEY)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/go.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: golang
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "golang build"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  params:
    - name: GOOS
      description: "running program's operating system target"
      default: linux
      type: string
    - name: GOARCH
      description: "running program's architecture target"
      default: amd64
      type: string
    - name: GO111MODULE
      description: "value of module support"
      default: auto
      type: string
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)/cache"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: "$(workspaces.source.path)/cache"
      type: string
    - name: CGO_ENABLED
      description: "Toggle cgo tool during Go build. Use value '0' to disable cgo (for static builds)."
      default: '0'
      type: string
    - name: GOSUMDB
      description: "Go checksum database url. Use value 'off' to disable checksum validation."
      default: ""
      type: string
    - name: EXTRA_COMMANDS
      type: string
      description: Extra commands
      default: ""
    - name: BASE_IMAGE
      description: "Base image"
      default: "golang:1.22-bookworm"
      type: string
    - name: GOPROXY
      description: "Go proxy server"
      default: ""
      type: string
  workspaces:
    - name: source

  steps:
    - name: golang
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)

      script: |
        set -ex
        $(params.EXTRA_COMMANDS)
      env:
        - name: GOOS
          value: "$(params.GOOS)"
        - name: GOARCH
          value: "$(params.GOARCH)"
        - name: GO111MODULE
          value: "$(params.GO111MODULE)"
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: CGO_ENABLED
          value: "$(params.CGO_ENABLED)"
        - name: GOSUMDB
          value: "$(params.GOSUMDB)"
        - name: GOPROXY
          value: "$(params.GOPROXY)"
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/gradle.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: gradle
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/displayName: Gradle
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Gradle build.

  workspaces:
    - name: source
      description: The workspace consisting of the gradle project.
  params:
    - name: BASE_IMAGE
      description: Gradle base image.
      type: string
      default: gradle:7.5.1-jdk11
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret for the Sonarqube integration
      default: "ci-sonarqube"
    - name: EXTRA_ARGS
      description: Extra arguments to add to the gradle build
      default: |
        -Dorg.gradle.internal.publish.checksums.insecure=true \
        publish
  volumes:
    - name: settings-gradle
      configMap:
        name: custom-gradle-settings
  steps:
    - name: gradle-tasks
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-gradle
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
          -PnexusLogin=${CI_USERNAME} \
          -PnexusPassword=${CI_PASSWORD} \
          $(params.EXTRA_ARGS)
      env:
        - name: XDG_CONFIG_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: GRADLE_USER_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: SONAR_USER_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
        - name: SNAPSHOTS_REPO_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-gradle-settings
              key: SNAPSHOTS_REPO_PATH
              optional: true
        - name: RELEASES_REPO_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-gradle-settings
              key: RELEASES_REPO_PATH
              optional: true
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/hadolint.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Code Quality
    tekton.dev/displayName: Hadolint
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'Kubernetes, Misconfiguration'
  name: hadolint
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  description: >-
    This task makes it possible to use Hadolint within Tekton Pipeline.
    A smarter Dockerfile linter that helps you build best practice Docker
    images. The linter parses the Dockerfile into an AST and performs rules on
    top of the AST
  params:
    - name: BASE_IMAGE
      description: The base image for the task.
      default: ghcr.io/hadolint/hadolint:v2.12.0-alpine@sha256:3c206a451cec6d486367e758645269fd7d696c5ccb6ff59d8b03b0e45268a199
    - default: './Dockerfile'
      description: Dockerfile path.
      name: dockerfile-path
      type: string
    - default: tty
      description: >-
        The output format for the results [tty | json | checkstyle | codeclimate
        | gitlab_codeclimate | codacy] (default tty).
      name: output-format
      type: string
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  steps:
    - image: $(params.BASE_IMAGE)
      name: lint-dockerfile
      workingDir: $(workspaces.source.path)
      env:
        - name: DOCKERFILE
          value: "$(params.dockerfile-path)"
        - name: OFORMAT
          value: "$(params.output-format)"
      script: |
        set -e
        hadolint "$DOCKERFILE" -f "$OFORMAT"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-dependency-update.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-dependency-update
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will update dependencies of a helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: extra_params
      description: "Extra parameters passed for the helm dependency build command"
      default: ""
    - name: helm_image
      description: "Specify a specific helm image"
      default: "alpine/helm:3.11.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm
      image: $(params.helm_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: EXTRA_PARAMS
          value: $(params.extra_params)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        helm dependency update ${CHART_DIR} ${EXTRA_PARAMS}
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-docs.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-docs
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run `helm-docs` command for helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: helm_docs_image
      description: "Specify a specific helm-docs image"
      default: "jnorwood/helm-docs:v1.13.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm-docs
      image: $(params.helm_docs_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        README_FILE_PATH="${CHART_DIR}/README.md"
        if [ -f "${README_FILE_PATH}" ]; then
            echo "[TEKTON][INFO] The file has been found at the given location \"${README_FILE_PATH}\""
        else
            echo "[TEKTON][ERROR] The file has not been found at the given location \"${README_FILE_PATH}\""
            exit 1
        fi

        helm-docs --chart-search-root ${CHART_DIR}
    - name: validate-helm-docs
      image: bitnami/git:2.41.0
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        git config --global --add safe.directory $(pwd)
        git diff -s --exit-code ${CHART_DIR}/README.md || (echo "Run 'helm-docs' to address the issue." && git diff && exit 1)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-libraries/helm-dependency-update-lib.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-library-dependency-update
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will update dependencies of a helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: extra_params
      description: "Extra parameters passed for the helm dependency build command"
      default: ""
    - name: helm_image
      description: "Specify a specific helm image"
      default: "alpine/helm:3.11.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm
      image: $(params.helm_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: EXTRA_PARAMS
          value: $(params.extra_params)
        - name: HOME
          value: $(params.user_home)
      script: |
        #!/bin/bash
        set -ex

        chart_directory=(${CHART_DIR}/*)
        for i in "${chart_directory[@]}"
        do
            helm dependency update $i ${EXTRA_PARAMS}
        done
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-libraries/helm-docs-lib.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-library-docs
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run `helm-docs` command for helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: helm_docs_image
      description: "Specify a specific helm-docs image"
      default: "jnorwood/helm-docs:v1.13.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm-docs
      image: $(params.helm_docs_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        chart_directory=$(ls -1 ${CHART_DIR}/)
        for i in ${chart_directory}
        do
            README_FILE_PATH="${CHART_DIR}/${i}/README.md"
            if [ -f "${README_FILE_PATH}" ]; then
                echo "[TEKTON][INFO] The file has been found at the given location \"${README_FILE_PATH}\""
            else
                echo "[TEKTON][ERROR] The file has not been found at the given location \"${README_FILE_PATH}\""
                exit 1
            fi
        done

        helm-docs --chart-search-root ${CHART_DIR}

    - name: validate-helm-docs
      image: bitnami/git:2.41.0
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        git config --global --add safe.directory $(pwd)

        chart_directory=$(ls -1 ${CHART_DIR}/)
        for i in ${chart_directory}
        do
            git diff -s --exit-code ${CHART_DIR}/${i}/README.md || (echo "Run 'helm-docs' to address the issue." && git diff && exit 1)
        done
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-libraries/helm-lint-lib.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Code Quality
    tekton.dev/displayName: Helm-Lint
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
  name: helm-library-lint
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: BASE_IMAGE
      description: The base image for the task.
      default: quay.io/helmpack/chart-testing:v3.10.1
      type: string
    - name: EXTRA_COMMANDS
      description: Arguments to add to the helm-lint step
      default: ""
      type: string
    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
      type: string
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
      type: string
    - name: CHART_VERSION_INCREMENT
      description: "Check version increment"
      default: 'false'
      type: string
    - name: TARGET_BRANCH
      description: "Git branch"
      default: "master"
      type: string
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  volumes:
    - name: ct-config-volume
      configMap:
        name: ct-config
  steps:
    - image: $(params.BASE_IMAGE)
      name: helm-lint
      workingDir: $(workspaces.source.path)
      env:
        - name: HOME
          value: $(params.USER_HOME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
        - name: CT_CONFIGS_DIR_DEFAULT
          value: "ct-configs"
      script: |
        set -ex
        $(params.EXTRA_COMMANDS)

        CT_FILE_PATH=""
        LINTCONF_FILE_PATH=""
        CHART_SCHEMA_FILE_PATH=""

        if [ -f "${CT_CONFIGS_DIR}/ct.yaml" ]; then
            CT_FILE_PATH="${CT_CONFIGS_DIR}/ct.yaml"
        else
            CT_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/ct.yaml"
        fi

        if [ -f "${CT_CONFIGS_DIR}/lintconf.yaml" ]; then
            LINTCONF_FILE_PATH="${CT_CONFIGS_DIR}/lintconf.yaml"
        else
            LINTCONF_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/lintconf.yaml"
        fi

        if [ -f "${CT_CONFIGS_DIR}/chart_schema.yaml" ]; then
            CHART_SCHEMA_FILE_PATH="${CT_CONFIGS_DIR}/chart_schema.yaml"
        else
            CHART_SCHEMA_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/chart_schema.yaml"
        fi

        echo "[TEKTON][INFO] Specific charts to test are located at \"${CT_FILE_PATH}\""
        echo "[TEKTON][INFO] The config file for YAML linting is located at \"${LINTCONF_FILE_PATH}\""
        echo "[TEKTON][INFO] The schema for chart.yml validation is located at \"${CHART_SCHEMA_FILE_PATH}\""

        git config --global --add safe.directory $(pwd)

        ct lint \
        --debug \
        --target-branch $(params.TARGET_BRANCH) \
        --config ${CT_FILE_PATH} \
        --lint-conf ${LINTCONF_FILE_PATH} \
        --chart-yaml-schema ${CHART_SCHEMA_FILE_PATH} \
        --check-version-increment=$(params.CHART_VERSION_INCREMENT)

      volumeMounts:
        - name: ct-config-volume
          mountPath: /workspace/source/ct-configs/
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-libraries/helm-push-lib.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-push-lib
spec:
  description: |
    This Task allows Uset to push a new version of the Helm Chart
    to the repository with Snapshot versions.
  workspaces:
    - name: source
      description: A workspace that contains the repository.
  volumes:
    - name: dockerconfig
      secret:
        secretName: kaniko-docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
        optional: true
  params:
    - name: chart-dir
      description: The directory in source that contains the helm chart
      default: "."
  steps:
    - name: init-repository
      image: amazon/aws-cli:2.7.35
      workingDir: $(workspaces.source.path)
      env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
              optional: true
        - name: CHART_DIR
          value: $(params.chart-dir)
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
      script: |
          #!/bin/bash

          set -ex

          if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
            chart_directory=(${CHART_DIR}/*)
            for i in "${chart_directory[@]}"
            do
                REPO_NAME=$(awk '/^name:/ {print $2}' ${i}/Chart.yaml)
            aws ecr describe-repositories --repository-names "${CONTAINER_REGISTRY_SPACE}/${REPO_NAME}" || aws ecr create-repository --repository-name "${CONTAINER_REGISTRY_SPACE}/${REPO_NAME}";
            done

          else
            echo 'Registry not ECR, stage skipped';
          fi

    - name: push-helm-chart
      image: alpine/k8s:1.25.15
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.chart-dir)
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
              optional: true
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
        - name: PLATFORM
          valueFrom:
            configMapKeyRef:
              key: platform
              name: edp-config
      script: |
        #!/bin/bash
        set -ex

        helm_push_command="helm push *-*.tgz oci://${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}"

        if [ $CONTAINER_REGISTRY_TYPE != "ecr" ]; then
          helm_push_command+=" --registry-config /.config/helm/registry/config.json"
        fi

        if [ $PLATFORM == "openshift" ]; then
          helm_push_command+=" --insecure-skip-tls-verify"
        fi

        if [ $CONTAINER_REGISTRY_TYPE == "ecr" ]; then
          aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | helm registry login --username AWS --password-stdin ${CONTAINER_REGISTRY_URL}
        fi

        chart_directory=(${CHART_DIR}/*)
        for i in "${chart_directory[@]}"
        do
            if ! git diff --quiet HEAD^ HEAD -- $i; then
                helm package ${i}
                $helm_push_command
                rm *-*.tgz
            fi
        done

      # Adding this securityContext makes it explicit that it needs to run as root.
      # Required for Openshift.
      securityContext:
        runAsUser: 0
      # This secret mount is necessary for helm push to internal openshift registry
      volumeMounts:
        - mountPath: /.config/helm/registry
          name: dockerconfig
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-libraries/helm-template-lib.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-library-template
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run `helm template` command for helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: release_name
      description: The helm release name
      default: "helm-release"
    - name: template_extra_params
      description: "Extra parameters passed for the helm template command"
      default: ""
    - name: extra_commands
      description: Arguments to add to the helm-lint step
      default: ""
    - name: helm_image
      description: "Specify a specific helm image"
      default: "alpine/helm:3.11.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm
      image: $(params.helm_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: RELEASE_NAME
          value: $(params.release_name)
        - name: TEMPLATE_EXTRA_PARAMS
          value: $(params.template_extra_params)
        - name: HOME
          value: $(params.user_home)
      script: |
        #!/bin/bash
        set -ex

        chart_directory=(${CHART_DIR}/*)
        for i in "${chart_directory[@]}"
        do
            helm template ${RELEASE_NAME} ${i} ${TEMPLATE_EXTRA_PARAMS}
            $(params.extra_commands)
        done
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-lint.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Code Quality
    tekton.dev/displayName: Helm-Lint
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
  name: helm-lint
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: BASE_IMAGE
      description: The base image for the task.
      default: quay.io/helmpack/chart-testing:v3.10.1
    - name: EXTRA_COMMANDS
      description: Arguments to add to the helm-lint step
      default: ""
    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "."
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  volumes:
    - name: ct-config-volume
      configMap:
        name: ct-config
  steps:
    - image: $(params.BASE_IMAGE)
      name: helm-lint
      workingDir: $(workspaces.source.path)
      env:
        - name: HOME
          value: $(params.USER_HOME)
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
        - name: CT_CONFIGS_DIR_DEFAULT
          value: "ct-configs"
      script: |
        set -ex
        $(params.EXTRA_COMMANDS)

        CT_FILE_PATH=""
        LINTCONF_FILE_PATH=""
        CHART_SCHEMA_FILE_PATH=""

        if [ -f "${CT_CONFIGS_DIR}/ct.yaml" ]; then
            CT_FILE_PATH="${CT_CONFIGS_DIR}/ct.yaml"
        else
            CT_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/ct.yaml"
        fi

        if [ -f "${CT_CONFIGS_DIR}/lintconf.yaml" ]; then
            LINTCONF_FILE_PATH="${CT_CONFIGS_DIR}/lintconf.yaml"
        else
            LINTCONF_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/lintconf.yaml"
        fi

        if [ -f "${CT_CONFIGS_DIR}/chart_schema.yaml" ]; then
            CHART_SCHEMA_FILE_PATH="${CT_CONFIGS_DIR}/chart_schema.yaml"
        else
            CHART_SCHEMA_FILE_PATH="${CT_CONFIGS_DIR_DEFAULT}/chart_schema.yaml"
        fi

        echo "[TEKTON][INFO] Specific charts to test are located at \"${CT_FILE_PATH}\""
        echo "[TEKTON][INFO] The config file for YAML linting is located at \"${LINTCONF_FILE_PATH}\""
        echo "[TEKTON][INFO] The schema for chart.yml validation is located at \"${CHART_SCHEMA_FILE_PATH}\""

        ct lint \
        --charts ${CHART_DIR}/ \
        --config ${CT_FILE_PATH} \
        --lint-conf ${LINTCONF_FILE_PATH} \
        --chart-yaml-schema ${CHART_SCHEMA_FILE_PATH}

      volumeMounts:
        - name: ct-config-volume
          mountPath: /workspace/source/ct-configs/
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-push.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-push
spec:
  description: |
    This Task allows Uset to push a new version of the Helm Chart
    to the repository with Snapshot versions.
  workspaces:
    - name: source
      description: A workspace that contains the repository.
  volumes:
    - name: dockerconfig
      secret:
        secretName: kaniko-docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
        optional: true
  params:
    - name: image-tag
      description: Image tag
    - name: chart-dir
      description: The directory in source that contains the helm chart
      default: "."
  steps:
    - name: init-repository
      image: amazon/aws-cli:2.7.35
      workingDir: $(workspaces.source.path)
      env:
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
              optional: true
        - name: CHART_DIR
          value: $(params.chart-dir)
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
      script: |
          if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
            REPO_NAME=$(awk '/^name:/ {print $2}' ${CHART_DIR}/Chart.yaml)
            aws ecr describe-repositories --repository-names "${CONTAINER_REGISTRY_SPACE}/${REPO_NAME}" || aws ecr create-repository --repository-name "${CONTAINER_REGISTRY_SPACE}/${REPO_NAME}";
          else
            echo 'Registry not ECR, stage skipped';
          fi

    - name: push-helm-chart
      image: alpine/k8s:1.25.15
      workingDir: $(workspaces.source.path)
      env:
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: CHART_DIR
          value: $(params.chart-dir)
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
              optional: true
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: PLATFORM
          valueFrom:
            configMapKeyRef:
              key: platform
              name: edp-config
      script: |
        #!/bin/bash

        set -ex

        helm package ${CHART_DIR} --version ${IMAGE_TAG}

        helm_push_command="helm push *-${IMAGE_TAG}.tgz oci://${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}"


        if [ $CONTAINER_REGISTRY_TYPE != "ecr" ]; then
          helm_push_command+=" --registry-config /.config/helm/registry/config.json"
        fi

        if [ $PLATFORM == "openshift" ]; then
          helm_push_command+=" --insecure-skip-tls-verify"
        fi

        if [ $CONTAINER_REGISTRY_TYPE == "ecr" ]; then
          aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | helm registry login --username AWS --password-stdin ${CONTAINER_REGISTRY_URL}
        fi

        $helm_push_command

      # Adding this securityContext makes it explicit that it needs to run as root.
      # Required for Openshift.
      securityContext:
        runAsUser: 0
      # This secret mount is necessary for helm push to internal openshift registry
      volumeMounts:
        - mountPath: /.config/helm/registry
          name: dockerconfig
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/helm-template.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-template
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: CI
    tekton.dev/pipelines.minVersion: "0.41.0"
    tekton.dev/tags: helm
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task will run `helm template` command for helm chart
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
  params:
    - name: CHART_DIR
      description: The directory in source that contains the helm chart
      default: "."
    - name: release_name
      description: The helm release name
      default: "helm-release"
    - name: template_extra_params
      description: "Extra parameters passed for the helm template command"
      default: ""
    - name: extra_commands
      description: Arguments to add to the helm-lint step
      default: ""
    - name: helm_image
      description: "Specify a specific helm image"
      default: "alpine/helm:3.11.1"
    - name: user_home
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
      type: string
      default: "/tekton/home"
  steps:
    - name: helm
      image: $(params.helm_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: RELEASE_NAME
          value: $(params.release_name)
        - name: TEMPLATE_EXTRA_PARAMS
          value: $(params.template_extra_params)
        - name: HOME
          value: $(params.user_home)
      script: |
        set -ex

        helm template ${RELEASE_NAME} ${CHART_DIR} ${TEMPLATE_EXTRA_PARAMS}
        $(params.extra_commands)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/image-scan.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: image-scan
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to scan images for vulnerabilites
  workspaces:
    - name: source
  params:
    - name: IMAGE
      description: Name (reference) of the image.
    - name: IMAGE_TAR
      description: Name (reference) of the image tar package.
    - name: BASE_IMAGE_TRIVY
      type: string
      default: "aquasec/trivy:0.41.0"
    - name: BASE_IMAGE_GRYPE
      type: string
      default: "anchore/grype:v0.62.1-debug"
    - name: BASE_IMAGE_CURL
      type: string
      default: "alpine/curl:3.14"
    - name: PATH_CONTEXT
      description: The build context used by Trivy.
      default: "."
    - name: JUNIT_REPORT
      type: string
      description: "This configmap contains Trivy JUnit XML Go template"
      default: report-junit
    - name: TRIVY_REPORT
      type: string
      description: "Trivy report name"
      default: trivy-junit.tpl
    - name: GRYPE_REPORT
      type: string
      description: "Grype report name"
      default: grype-junit.tpl
    - name: RP_PROPERTIES
      type: string
      description: "This secret contains ReportPortal credentials"
      default: reportportal-properties
    - name: TRIVY_SCAN_REPORT
      type: string
      description: "This name of the scan report"
      default: "image-scan-trivy-report.xml"
    - name: GRYPE_SCAN_REPORT
      type: string
      description: "This name of the scan report"
      default: "image-scan-grype-report.xml"
  steps:
    - name: trivy
      image: $(params.BASE_IMAGE_TRIVY)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: JUNIT_REPORT
          valueFrom:
            configMapKeyRef:
              name: $(params.JUNIT_REPORT)
              key: $(params.TRIVY_REPORT)
      script: |
        #!/usr/bin/env sh
        set -e

        echo "${JUNIT_REPORT}" > "$(params.TRIVY_REPORT)"
        trivy image --format template --template "@$(params.TRIVY_REPORT)" \
            -o $(params.TRIVY_SCAN_REPORT) --input $(params.IMAGE_TAR).tar
        cat $(params.TRIVY_SCAN_REPORT)

    - name: grype
      image: $(params.BASE_IMAGE_GRYPE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: JUNIT_REPORT
          valueFrom:
            configMapKeyRef:
              name: $(params.JUNIT_REPORT)
              key: $(params.GRYPE_REPORT)
      script: |
        #!/busybox/sh
        set -e

        echo "${JUNIT_REPORT}" > "$(params.GRYPE_REPORT)"
        /grype $(params.IMAGE_TAR).tar -o template \
            -t $(params.GRYPE_REPORT) > $(params.GRYPE_SCAN_REPORT)
        cat $(params.GRYPE_SCAN_REPORT)

    - name: upload-report
      image: $(params.BASE_IMAGE_CURL)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: RP_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: $(params.RP_PROPERTIES)
              key: rp.endpoint
        - name: RP_PROJECT
          valueFrom:
            secretKeyRef:
              name: $(params.RP_PROPERTIES)
              key: rp.project
        - name: RP_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.RP_PROPERTIES)
              key: rp.token
      script: |
        #!/usr/bin/env sh
        set -e
        apk add zip

        for REPORT_NAME in $(params.TRIVY_SCAN_REPORT) $(params.GRYPE_SCAN_REPORT)
        do
            REPORT_ARCHIVE_NAME="${REPORT_NAME}_$(params.IMAGE_TAR).zip"
            zip -r ${REPORT_ARCHIVE_NAME} ${REPORT_NAME}
            curl -X POST "https://${RP_ENDPOINT}/api/v1/${RP_PROJECT}/launch/import" \
                  -H  "accept: */*" \
                  -H  "Content-Type: multipart/form-data" \
                  -H  "Authorization: bearer ${RP_TOKEN}" \
                  -F "file=@${REPORT_ARCHIVE_NAME};type=application/x-zip-compressed"
        done
---
# Source: edp-install/charts/edp-tekton/templates/tasks/init-values.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: init-values
spec:
  params:
    - name: CODEBASE_NAME
      type: string
      description: Codebasebranch name.
      default: "CODEBASE_NAME_placeholder"
    - name: BRANCH_NAME
      type: string
      description: Branch name.
      default: "BRANCH_placeholder"
    - name: BASE_IMAGE
      description: The base image for the task.
      type: string
      default: bitnami/kubectl:1.25.2
  results:
    - name: TENANT_NAME
      description: "edp name"
    - name: NORMALIZED_BRANCH
      description: "Branch name without '/' symbols and lowercase"
    - name: RESULT_IMAGE_NAME
      description: "Codebase name with only letters and dashes"
  steps:
    - name: get-values
      image: $(params.BASE_IMAGE)
      env:
        - name: CODEBASE
          value: "$(params.CODEBASE_NAME)"
        - name: BRANCH
          value: "$(params.BRANCH_NAME)"
      script: |
        #!/usr/bin/env bash
        set -e

        tenantName=$(kubectl get cm edp-config -o jsonpath='{.data.edp_name}')
        echo "${tenantName}" | tr -d '\n' | tee $(results.TENANT_NAME.path)

        normalizedBranch=$(echo ${BRANCH//[^\(?!.)a-zA-Z0-9]/-} | tr '[:upper:]' '[:lower:]')
        printf "%s" "${normalizedBranch}" > "$(results.NORMALIZED_BRANCH.path)"

        resultImageName="${CODEBASE}-$(echo ${BRANCH//[^a-zA-Z0-9]/-} | tr '[:upper:]' '[:lower:]')"
        printf "%s" "${resultImageName}" > "$(results.RESULT_IMAGE_NAME.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/kaniko-dockerbuild-verify.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: dockerbuild-verify
  labels:
    app.kubernetes.io/based-on: "0.6"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a Dockerfile with kaniko.
  params:
    - name: codebase-name
      description: Name of codebase
      default: "placeholder"
    - name: image-tag
      description: Image tag
      default: "lastest"
    - name: image-tar
      description: Name (reference) of the image tar.
      default: "image_tar"
    - name: dockerfile
      description: Dockerfile name.
      default: "Dockerfile"
    - name: context
      description: The build context used by Kaniko.
      default: ./
      description: The build context used by Kaniko.
      default: ./
    - name: builder-image
      description: The image on which builds will run
      default: gcr.io/kaniko-project/executor:v1.12.1-debug
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: build-no-push
      workingDir: $(workspaces.source.path)
      image: "$(params.builder-image)"
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: IMAGE_TAR
          value: "$(params.image-tar)"
        - name: DOCKERFILE
          value: "$(params.dockerfile)"
        - name: CONTEXT
          value: "$(params.context)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_GROUP
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
      script: |
        /kaniko/executor \
          --dockerfile=$(workspaces.source.path)/${DOCKERFILE} \
          --context=$(workspaces.source.path)/${CONTEXT} \
          --destination=${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}:${IMAGE_TAG} \
          --digest-file=$(results.IMAGE_DIGEST.path) \
          --tar-path=${IMAGE_TAR}.tar \
          --no-push
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/kaniko.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/based-on: "0.6"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: codebase-name
      description: Name of codebase
    - name: image-tag
      description: Image tag
    - name: image-tar
      description: Name (reference) of the image tar.
      default: "image_tar"
    - name: dockerfile
      description: Dockerfile name.
      default: "Dockerfile"
    - name: context
      description: The build context used by Kaniko.
      default: ./
    - name: builder-image
      description: The image on which builds will run
      default: gcr.io/kaniko-project/executor:v1.12.1-debug
    - name: kaniko-cache-path
      description: The repo where Kaniko stores cached image layers
      default: ""
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
  volumes:
    - name: dockerconfig
      secret:
        secretName: kaniko-docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
        optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: init-repository
      image: amazon/aws-cli:2.7.35
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: AWS_DEFAULT_REGION
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: aws_region
              optional: true
        - name: CONTAINER_REGISTRY_GROUP
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: CONTAINER_REGISTRY_TYPE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_type
      script: |
          if [[ "$CONTAINER_REGISTRY_TYPE" == "ecr" ]]; then
            aws ecr describe-repositories --repository-names "${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}" || aws ecr create-repository --repository-name "${CONTAINER_REGISTRY_GROUP}/${CODEBASE_NAME}";
          else
            echo 'Registry not ECR, stage skipped';
          fi

    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: "$(params.builder-image)"
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: IMAGE_TAR
          value: "$(params.image-tar)"
        - name: DOCKERFILE
          value: "$(params.dockerfile)"
        - name: CONTEXT
          value: "$(params.context)"
        - name: KANIKO_CACHE_PATH
          value: "$(params.kaniko-cache-path)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: PLATFORM
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: platform
      script: |
        base_command="/kaniko/executor \
          --dockerfile=/workspace/source/${DOCKERFILE} \
          --context=/workspace/source/${CONTEXT} \
          --destination=${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}/${CODEBASE_NAME}:${IMAGE_TAG} \
          --digest-file=/tekton/results/IMAGE_DIGEST \
          --tar-path=${IMAGE_TAR}.tar "

        kaniko_cache=" --cache=true \
                       --cache-repo=${CONTAINER_REGISTRY_URL}/${KANIKO_CACHE_PATH} "

        okd_skip_tls=" --skip-tls-verify "

        custom_certs=false

        command=$base_command

        if [ -n "$KANIKO_CACHE_PATH" ]; then
          command="$command $kaniko_cache";
        fi

        if [ $PLATFORM == "openshift" ]; then
          command="$command $okd_skip_tls";
        fi

        if [ "$custom_certs" == "true" ]; then
          command='$command $CONTAINER_REGISTRY_URL"=/kaniko/.custom-certs/ca.crt "';
        fi

        $command
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: dockerconfig
          mountPath: /kaniko/.docker
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
    - image: alpine:3.18.6
      name: write-url
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              key: container_registry_host
              name: edp-config
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              key: container_registry_space
              name: edp-config
      script: |
        set -e
        echo -n "${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}/${CODEBASE_NAME}:${IMAGE_TAG}" | tee "$(results.IMAGE_URL.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/maven-get-module.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-maven-module
spec:
  description: Get maven deployable multimodule directory name.
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BASE_IMAGE
      description: "The base image for the task"
      default: "alpine:3.18.6"
  results:
    - name: DEPLOYABLE_MODULE_DIR
      description: Maven deployable multimodule directory.
  steps:
    - name: get-maven-module
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        set -ex

        DEPLOYABLE_MODULE=$(grep '<deployable.module>' pom.xml | awk -F '[><]' '{print $3}' || true)

        if [ -z "${DEPLOYABLE_MODULE}" ] ; then
            DEPLOYABLE_MODULE_DIR="."
        else
            DEPLOYABLE_MODULE_DIR="${DEPLOYABLE_MODULE}"
        fi

        echo "Deployable module directory: ${DEPLOYABLE_MODULE_DIR}"

        printf "%s" "${DEPLOYABLE_MODULE_DIR}" > "$(results.DEPLOYABLE_MODULE_DIR.path)"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/maven.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: maven
  labels:
    app.kubernetes.io/based-on: "0.2"
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task can be used to run a Maven build.

  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: MAVEN_IMAGE
      type: string
      description: Maven base image
      default: maven:3.9.0-eclipse-temurin-11
    - name: GOALS
      description: maven goals to run
      type: array
      default:
        - "package"
    - name: CONTEXT_DIR
      type: string
      description: >-
        The context directory within the repository for sources on
        which we want to execute maven goals.
      default: "source"
    - name: ci-nexus
      type: string
      description: name of the secret holding the Nexus CI integration data
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret holding the Sonarqube CI integration data
      default: "ci-sonarqube"
  volumes:
    - name: settings-maven
      configMap:
        name: custom-maven-settings
  steps:
    - name: mvn-goals
      image: $(params.MAVEN_IMAGE)
      volumeMounts:
        - name: settings-maven
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      command: ["/usr/bin/mvn"]
      args:
        - -s
        - /var/configmap/settings.xml
        - "$(params.GOALS)"
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/npm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: npm
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run npm goals on a project
    where package.json is present and has some pre-defined
    npm scripts.
  params:
    - name: PATH_CONTEXT
      type: string
      default: "."
      description: The path where package.json of the project is defined.
    - name: EXTRA_COMMANDS
      type: string
    - name: BASE_IMAGE
      type: string
      default: "docker.io/library/node:18.20.3-alpine3.20"
      description: The node image you want to use.
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus

  workspaces:
    - name: source

  volumes:
    - name: settings-npm
      configMap:
        name: custom-npm-settings

  steps:
    - name: npm
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)

      volumeMounts:
        - name: settings-npm
          mountPath: /var/configmap

      env:
        - name: HOME
          value: "$(workspaces.source.path)"
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
      script: |
        #!/usr/bin/env sh
        set -e

        $(params.EXTRA_COMMANDS)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/opa.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: opa
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run opa tests on a project.
  workspaces:
    - name: source
  params:
    - name: PROJECT_DIR
      description: The directory containing opa files
      type: string
      default: "."
    - name: OPA_RESULTS
      type: string
      default: '/workspace/opa_results'
    - name: JUNIT_SCRIPT
      type: string
      default: '/workspace/opa_test_to_junit.py'
    - name: EXTRA_COMMANDS
      type: string
    - name: BASE_IMAGE
      type: string
      default: "openpolicyagent/opa:0.45.0-debug"
      description: The opa image.
  steps:
    - name: opa-results-json
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: OPA_RESULTS
          value: "$(params.OPA_RESULTS)"
      script: |
        #!/busybox/sh
        set -e
        opa test --bundle ./ --format json > "${OPA_RESULTS}"
        cat "${OPA_RESULTS}"
    - image: curlimages/curl:7.85.0
      name: download-converter
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: JUNIT_SCRIPT
          value: "$(params.JUNIT_SCRIPT)"
      script: |
        set -e
        curl -fsSL https://raw.githubusercontent.com/open-policy-agent/contrib/main/junit/opa_test_to_junit.py \
            -o "${JUNIT_SCRIPT}"
        cat "${JUNIT_SCRIPT}"
    - name: convert-to-xml
      image: 'python:3.10.8-alpine3.16'
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: OPA_RESULTS
          value: "$(params.OPA_RESULTS)"
        - name: JUNIT_SCRIPT
          value: "$(params.JUNIT_SCRIPT)"
      script: |
        set -e
        $(params.EXTRA_COMMANDS)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/promote-images.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: promote-images
spec:
  params:
    - name: BASE_IMAGE
      description: The base image for the task.
      type: string
      default: epamedp/tekton-cd-pipeline:0.1.2
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: CDPIPELINE_CR
      description: CDPipeline custom resource name
      type: string
    - name: CDPIPELINE_STAGE
      description: Stage name in CD Pipeline
      type: string
    - name: CBIS_CRD
      description: CodebaseImageStream custom resource definition.
      type: string
      default: "cbis.v2.edp.epam.com"
    - name: STAGE_CRD
      description: Stage custom resource definition.
      type: string
      default: "stages.v2.edp.epam.com"
    - name: CDPIPELINE_CRD
      description: CDPipeline custom resource definition.
      type: string
      default: "cdpipelines.v2.edp.epam.com"

  steps:
    - name: annotate
      image: $(params.BASE_IMAGE)
      env:
        - name: APPLICATIONS_PAYLOAD
          value: "$(params.APPLICATIONS_PAYLOAD)"
        - name: CDPIPELINE_CR
          value: "$(params.CDPIPELINE_CR)"
        - name: CDPIPELINE_STAGE
          value: "$(params.CDPIPELINE_STAGE)"
        - name: STAGE_CRD
          value: "$(params.STAGE_CRD)"
      script: |
        set -ex
        STAGE_CR="${CDPIPELINE_CR}-${CDPIPELINE_STAGE}"
        echo ${APPLICATIONS_PAYLOAD} | jq -r 'to_entries[] |
        "\(.key)=\(.value.imageTag)"' | while IFS= read -r i; do
          kubectl annotate --overwrite "${STAGE_CRD}" "${STAGE_CR}" "app.edp.epam.com/${i}"
        done
    - name: promote-images
      image: $(params.BASE_IMAGE)
      env:
        - name: CDPIPELINE_CR
          value: "$(params.CDPIPELINE_CR)"
        - name: CDPIPELINE_STAGE
          value: "$(params.CDPIPELINE_STAGE)"
        - name: CDPIPELINE_CRD
          value: "$(params.CDPIPELINE_CRD)"
        - name: CBIS_CRD
          value: "$(params.CBIS_CRD)"
        - name: STAGE_CRD
          value: "$(params.STAGE_CRD)"
      script: |
        set -ex

        APPS_PROMOTE=$(kubectl get "${CDPIPELINE_CRD}" "${CDPIPELINE_CR}" -o jsonpath='{.spec.applicationsToPromote[*]}')
        DATE_FORMAT_RFC3339=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        STAGE_CR="${CDPIPELINE_CR}-${CDPIPELINE_STAGE}"

        for APP in ${APPS_PROMOTE}; do
          VERIFIED_SBIS="${STAGE_CR}-${APP}-verified"
          IMAGE_TAG=$(kubectl get "${STAGE_CRD}" "${STAGE_CR}" -o jsonpath="{.metadata.annotations.app\.edp\.epam\.com/${APP}}")

          if [ -n "${IMAGE_TAG}" ]; then
            CBIS_TAG=$(kubectl get "${CBIS_CRD}" "${VERIFIED_SBIS}" -o jsonpath='{.spec.tags[*].name}')
            NEW_CBIS_TAG="{\"name\":\"${IMAGE_TAG}\",\"created\":\"${DATE_FORMAT_RFC3339}\"}"

            if [ -n "${CBIS_TAG}" ] && [ "${CBIS_TAG}" = "$(printf '%s' "${CBIS_TAG}" | sed 's/'"${IMAGE_TAG}"'//g')" ]; then
              echo "[TEKTON][DEBUG] ImageStream ${VERIFIED_SBIS} doesn't contain ${IMAGE_TAG} tag ... it will be added."
              kubectl patch "${CBIS_CRD}" "${VERIFIED_SBIS}" --type json \
                -p "[{\"op\": \"add\", \"path\": \"/spec/tags/-\", \"value\": ${NEW_CBIS_TAG} }]"
            elif [ -z "${CBIS_TAG}" ]; then
              echo "[TEKTON][DEBUG] There're no tags in imageStream ${VERIFIED_SBIS} ... the first one will be added."
              kubectl patch "${CBIS_CRD}" "${VERIFIED_SBIS}" --type=merge \
                -p "{\"spec\":{\"tags\":[${NEW_CBIS_TAG}]}}"
            fi
          fi
        done
---
# Source: edp-install/charts/edp-tekton/templates/tasks/push-to-jira.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-to-jira
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/displayName: Push-to-Jira
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The push-to-jira Task will create JiraIssueMetadata Custom Resource

  params:
    - name: TICKET_NAME_PATTERN
      type: string
    - name: COMMIT_MESSAGE
      type: string
    - name: COMMIT_ID
      type: string
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      type: string
    - name: CODEBASE_NAME
      type: string
    - name: PIPELINE_URL
      type: string
    - name: VCS_TAG
      type: string
    - name: VERSION
      type: string
  steps:
    - name: push-to-jira
      image: epamedp/tekton-autotest:0.1.3
      env:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(params.COMMIT_ID)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.PIPELINE_URL)"
        - name: VCS_TAG
          value: "$(params.VCS_TAG)"
        - name: VERSION
          value: "$(params.VERSION)"
      script: |
        #!/usr/bin/python

        import os
        import sys
        import re
        import json
        from random import randint

        ticket_message_pattern = os.getenv("TICKET_NAME_PATTERN")
        commit_message_with_change_id = os.getenv("COMMIT_MESSAGE")
        commit_id = os.getenv("COMMIT_ID")
        jira_issue_metadata_payload = os.getenv("JIRA_ISSUE_METADATA_PAYLOAD")
        codebase = os.getenv("CODEBASE_NAME")
        pipeline_url = os.getenv("PIPELINE_URL")
        vcs_tag = os.getenv("VCS_TAG")
        version = os.getenv("VERSION")

        print(f"[TEKTON][DEBUG] TICKET_NAME_PATTERN: {ticket_message_pattern}")
        print(f"[TEKTON][DEBUG] COMMIT_MESSAGE: \n{commit_message_with_change_id}")
        print(f"[TEKTON][DEBUG] COMMIT_ID: {commit_id}")
        print(f"[TEKTON][DEBUG] JIRA_ISSUE_METADATA_PAYLOAD: {jira_issue_metadata_payload}")
        print(f"[TEKTON][DEBUG] CODEBASE_NAME: {codebase}")
        print(f"[TEKTON][DEBUG] PIPELINE_URL: {pipeline_url}")
        print(f"[TEKTON][DEBUG] VCS_TAG: {vcs_tag}")
        print(f"[TEKTON][DEBUG] VERSION: {version}")
        print("")

        def search_pattern(message, pattern):
            result = re.search(pattern, message)
            if result == None:
                print(f"[TEKTON] Message is invalid. The required pattern is {pattern}")
                sys.exit(1)
            return result.group()

        def set_params_jira_issue_metadata(metadata_name, commits, tickets, codebase, payload):
            print("[TEKTON] Getting JiraIssueMetadata CR template")
            template = {
              "apiVersion": "v2.edp.epam.com/v1",
              "kind": "JiraIssueMetadata",
              "metadata": {
                "name": "replace"
              },
              "spec": {
                "commits": "replace",
                "tickets": "replace",
                "codebaseName": "replace",
                "payload": "replace"
              }
            }
            print("[TEKTON] JiraIssueMetadata template has been fetched:\n{}".format(json.dumps(template, indent = 4)))

            template["metadata"]["name"] = metadata_name
            template["spec"]["commits"] = commits
            template["spec"]["tickets"] = tickets
            template["spec"]["codebaseName"] = codebase
            template["spec"]["payload"] = payload
            print("[TEKTON] JiraIssueMetadata template has been parameterized:\n{}".format(json.dumps(template, indent = 4)))

            return json.dumps(template)

        print(f"[TEKTON] Ticket name pattern has been fetched: {ticket_message_pattern}")
        print(f"[TEKTON] Commit message to validate has been fetched:\n{commit_message_with_change_id}")

        print("[TEKTON] Getting Ticket number and Commit message")
        ticket_number = search_pattern(commit_message_with_change_id, ticket_message_pattern)
        print(f"[TEKTON] Ticket number is {ticket_number}")
        # Use the first line of commit message as a commit message for JiraIssueMetadata CR
        commit_message = commit_message_with_change_id.split("\n")[0]
        print(f"[TEKTON] Commit message was parsed: {commit_message}")

        print("[TEKTON] Preparing Jira Issue Link")
        linkInfo = {
            "ticket": ticket_number,
            "title": f"{commit_message} [{codebase}][{vcs_tag}]",
            "url": pipeline_url
        }
        print("[TEKTON] Issue Link:\n{}".format(json.dumps(linkInfo, indent = 4)))

        values = {
            "EDP_COMPONENT": codebase,
            "EDP_VERSION": version,
            "EDP_SEM_VERSION": re.sub("(-RC|-SNAPSHOT)\.\d+", "", version),
            "EDP_GITTAG": vcs_tag
        }
        print("[TEKTON] EDP predefined variables:\n{}".format(json.dumps(values, indent = 4)))

        payload = json.loads(jira_issue_metadata_payload)
        print("[TEKTON] JiraIssueMetadataPayload of {0} Codebase CR has been fetched:\n{1}".format(codebase, json.dumps(values, indent = 4)))

        if payload == None:
            payload = { "issuesLinks": [linkInfo] }
        else:
            for x in payload:
                for k in values:
                    payload[x] = payload[x].replace(k, values[k])
            payload["issuesLinks"] = [linkInfo]

        random_seed = ''.join(str(randint(0, 9)) for _ in range(8))
        metadata_name = f"{codebase}-{random_seed}"

        template_json = set_params_jira_issue_metadata(metadata_name, [commit_id], [ticket_number], codebase, json.dumps(payload, indent = 4))

        print("[TEKTON][DEBUG] Applying JiraIssueMetadata CR")
        os.system(f"kubectl apply -f - << EOF\n{template_json}\nEOF")

        print("[TEKTON][DEBUG] JiraIssueMetadata CR has been created")
---
# Source: edp-install/charts/edp-tekton/templates/tasks/python.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: python
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run python goals on a project.
    It utilizes default PIP and Twine environment variables.
    Twine logs in to nexus using environment variables to upload packages.
    PIP does not support username and password environment variables yet.
    Thus, we use the ~/.netrc file for PIP to download packages.
    The ~/.config/pip/pip.conf file can also be used along with ~/.netrc.
  workspaces:
    - name: source
  params:
    - name: PATH_CONTEXT
      type: string
      default: "source"
      description: The path where package.json of the project is defined.
    - name: TWINE_REPOSITORY_URL
      type: string
      default: ""
      description: Nexus Repository URL Twine uploads to.
    - name: TWINE_NON_INTERACTIVE
      type: string
      default: "1"
      description: Do not interactively prompt for credentials if they are missing.
    - name: EXTRA_COMMANDS
      type: string
    - name: BASE_IMAGE
      type: string
      default: "python:3.8-slim"
      description: The python image you want to use.
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: PIP_CACHE_DIR
      type: string
      description: Cache directory of the pip
      default: "$(workspaces.source.path)/cache/.cache/pip"
  steps:
    - name: python
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: PIP_CACHE_DIR
          value: $(params.PIP_CACHE_DIR)
        - name: TWINE_REPOSITORY_URL
          value: $(params.TWINE_REPOSITORY_URL)
        - name: TWINE_NON_INTERACTIVE
          value: $(params.TWINE_NON_INTERACTIVE)
        - name: TWINE_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: TWINE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
        - name: PIP_INDEX_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-python-settings
              key: PIP_INDEX_PATH
              optional: true
        - name: PIP_INDEX_URL_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-python-settings
              key: PIP_INDEX_URL_PATH
        - name: REPOSITORY_SNAPSHOTS_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-python-settings
              key: REPOSITORY_SNAPSHOTS_PATH
        - name: REPOSITORY_RELEASES_PATH
          valueFrom:
            configMapKeyRef:
              name: custom-python-settings
              key: REPOSITORY_RELEASES_PATH
      script: |
        #!/usr/bin/env sh
        set -ex
        export PATH=$PATH:$HOME/.local/bin

        # Artifact Storage Repository host PIP connects to via HTTP. e.g. 'nexus'
        export PIP_TRUSTED_HOST=$(echo "${NEXUS_HOST_URL}" | cut -d '/' -f 3 | cut -d ':' -f 1)

        # Concatenate the base URL with the specific paths from the ConfigMap
        export PIP_INDEX="${NEXUS_HOST_URL}${PIP_INDEX_PATH}"
        export PIP_INDEX_URL="${NEXUS_HOST_URL}${PIP_INDEX_URL_PATH}"
        export REPOSITORY_URL_SNAPSHOTS="${NEXUS_HOST_URL}${REPOSITORY_SNAPSHOTS_PATH}"
        export REPOSITORY_URL_RELEASES="${NEXUS_HOST_URL}${REPOSITORY_RELEASES_PATH}"

        echo "[TEKTON][INFO] NEXUS_HOST_URL contains ${NEXUS_HOST_URL}"
        echo "[TEKTON][INFO] PIP_INDEX contains ${PIP_INDEX}"
        echo "[TEKTON][INFO] PIP_INDEX_URL contains ${PIP_INDEX_URL}"
        echo "[TEKTON][INFO] PIP_TRUSTED_HOST contains ${PIP_TRUSTED_HOST}"
        echo "[TEKTON][INFO] REPOSITORY_URL_SNAPSHOTS contains ${REPOSITORY_URL_SNAPSHOTS}"
        echo "[TEKTON][INFO] REPOSITORY_URL_RELEASES contains ${REPOSITORY_URL_RELEASES}"

        netcr_file="$HOME/.netrc"
        if [ ! -f "${netcr_file}" ]; then
          cat <<-EOF > "${netcr_file}"
        machine ${PIP_TRUSTED_HOST}
        login ${TWINE_USERNAME}
        password ${TWINE_PASSWORD}
        EOF
        chmod 0600 "${netcr_file}"
        fi

        $(params.EXTRA_COMMANDS)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/run-quality-gate.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: run-quality-gate
spec:
  params:
    - name: BASE_IMAGE
      description: The base image for the task (different for buildtools).
      type: string
      default: ""
    - name: EXTRA_COMMANDS
      type: string
      description: Extra commands
      default: ""
    - name: KUBECONFIG_SECRET_NAME
      type: string
      description: The name of secret with Kubeconfig to connect to the remote cluster
      default: "in-cluster"
  volumes:
    - name: kubeconfig
      secret:
        secretName: $(params.KUBECONFIG_SECRET_NAME)
        optional: true
  steps:
    - name: run
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: kubeconfig
          mountPath: /workspace/source/kube
      script: |
        set -ex
        export KUBECONFIG="workspace/source/kube/config"
        $(params.EXTRA_COMMANDS)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/save-cache.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: save-cache
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "save-cache"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task is used to save the cache to the distribution server. It packs and uploads the root of workspace to the distribution server
  params:
    - name: CACHE_NAME
      description: "Cache name (filename) to be downloaded from the cache server."
      type: string
    - name: BASE_IMAGE
      description: "Base image"
      default: "epamedp/tekton-autotest:0.1.2"
      type: string

  workspaces:
    - name: cache

  steps:
    - name: save-cache
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.cache.path)

      script: |
        #!/usr/bin/env bash
        set -ex

        curl -o/dev/null -s -f -X POST -F path=test -F file=@/etc/motd  ${CACHE_SERVER_URL}/upload || {
            echo "No cache server found"
            exit 0
        }

        lm="$(curl -fsI ${CACHE_SERVER_URL}/${CACHE_NAME}.tar.gz|sed -n '/Last-Modified/ { s/Last-Modified: //;s/\r//; p}')"
        if [ -n "${lm}" ];then
          expired=$(python -c "import datetime, sys;print(datetime.datetime.now() > datetime.datetime.strptime(sys.argv[1], '%a, %d %b %Y %X %Z') + datetime.timedelta(days=1))" "${lm}")
          if [ "${expired}" = "False" ]; then
              echo "Cache is younger than a day"
              exit
          fi
        fi

        tar czf - . |curl -# -L -f -F path=${CACHE_NAME}.tar.gz -X POST -F "file=@-" ${CACHE_SERVER_URL}/upload
      env:
        - name: CACHE_SERVER_URL
          valueFrom:
            configMapKeyRef:
              name: tekton-cache
              key: url
              optional: true
        - name: CACHE_NAME
          value: "$(params.CACHE_NAME)"

      computeResources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/security.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: security
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Scan Tools
    tekton.dev/tags: scan-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BASE_IMAGE
      type: string
      description: Semgrep image
      default: returntocorp/semgrep:1.58.0
    - name: ci-defectdojo
      type: string
      description: name of the secret holding the DefectDojo CI integration data
      default: ci-defectdojo
    - name: reportDataPath
      type: string
      default: "security-semgrep-report.json"
    - name: reportDataProductName
      type: string
      default: ""
    - name: reportDataEngagementName
      type: string
      default: ""
    - name: PROJECT_NAME
      description: That is the name of the project that will be updated/created on the dependency track side
      default: ''
      type: string
    - name: PROJECT_BRANCH
      description: That is the branch of the project that will be updated/created on the dependency track side
      default: ''
      type: string
    - name: ci-dependency-track
      type: string
      description: Name of the secret holding the ci-dependency-track api token
      default: ci-dependency-track
  steps:
    - name: semgrep-scan-and-report
      image: $(params.BASE_IMAGE)
      computeResources: {}
      workingDir: $(workspaces.source.path)
      script: |
        set -e
        # The .docker/config.json file contained sensitive information, so it was added to the ignorelist.
        echo ".docker/config.json" >> .semgrepignore
        semgrep --jobs 1 --config=p/r2c-ci . --json --output $(params.reportDataPath) --disable-version-check

        if [ -z "$DD_HOST_URL" ]
        then
          exit 0
        fi

        reportDataActive="true"
        reportDataVerified="false"
        reportDataPath="security-semgrep-report.json"
        reportDataType="Semgrep JSON Report"
        reportDataProductTypeName="Tenant"
        reportDataProductName=$(params.reportDataProductName)
        reportDataEngagementName=$(params.reportDataEngagementName)
        reportDataAutoCreateContext="true"
        reportDataCloseOldFindings="true"
        reportDataPushToJira="false"
        reportDataEnvironment="Development"
        reportDataTestTitle="security"
        curl -X POST "${DD_HOST_URL}/api/v2/import-scan/" \
            -H "accept: application/json" \
            -H "Authorization: Token ${DD_TOKEN}" \
            -H "Content-Type: multipart/form-data" \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "minimum_severity=Info" \
            -F "active=${reportDataActive}" \
            -F "verified=${reportDataVerified}" \
            -F "scan_type=${reportDataType}" \
            -F "file=@${reportDataPath};type=application/json" \
            -F "product_type_name=${reportDataProductTypeName}" \
            -F "product_name=${reportDataProductName}" \
            -F "engagement_name=${reportDataEngagementName}" \
            -F "auto_create_context=${reportDataAutoCreateContext}" \
            -F "close_old_findings=${reportDataCloseOldFindings}" \
            -F "push_to_jira=${reportDataPushToJira}" \
            -F "environment=${reportDataEnvironment}" \
            -F "test_title=${reportDataTestTitle}"

      env:
        - name: HOME
          value: "$(workspaces.source.path)"
        - name: SEMGREP_VERSION_CACHE_PATH
          value: "$(workspaces.source.path)/.cache"
        - name: DD_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-defectdojo)
              key: token
              optional: true
        - name: DD_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-defectdojo)
              key: url
              optional: true
    - env:
        - name: API_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: token
              optional: true
        - name: DEPTRACK_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-dependency-track)
              key: url
              optional: true
        - name: PROJECT_NAME
          value: $(params.PROJECT_NAME)
        - name: PROJECT_BRANCH
          value: $(params.PROJECT_BRANCH)
      image: >-
        ghcr.io/cyclonedx/cdxgen:v9.6.0@sha256:ea01324872d2c21b024264a2224d761ab63851b9cc4722903b5e74be56ca6fa6
      name: cdxgen
      computeResources: {}
      script: >
        #!/usr/bin/env sh

        set -e

        set +x

        /opt/cdxgen/bin/cdxgen.js --api-key=$API_TOKEN --server-url=$DEPTRACK_URL --project-name=$PROJECT_NAME --project-version=$PROJECT_BRANCH
      workingDir: $(workspaces.source.path)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/send-to-microsoft-teams.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: send-to-microsoft-teams
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  description: >-
    These tasks post a message to a Microsoft Teams Channel.
    This task uses the Incoming Webhook functionality of Microsoft Teams
  params:
  - name: webhook-url-secret
    type: string
    description: Name of the secret with incoming webhook URL
  - name: webhook-url-secret-key
    type: string
    description: Key in the secret
  - name: message
    type: string
    description: The message to notify about
  steps:
  - name: post
    image: docker.io/curlimages/curl:7.70.0@sha256:031df77a11e5edded840bc761a845eab6e3c2edee22669fb8ad6d59484b6a1c4
    script: |
      #!/usr/bin/env sh
      MESSAGE=$(echo "${MESSAGE}" | sed -e 's/\"/\\\\"/g')
      JSON="{\"text\": \"${MESSAGE}\" }"
      curl -X POST -H 'Content-Type: application/json' -d "${JSON}" "${WEBHOOK_URL}"
    env:
    - name: WEBHOOK_URL
      valueFrom:
        secretKeyRef:
          name: $(params.webhook-url-secret)
          key: $(params.webhook-url-secret-key)
    - name: MESSAGE
      value: $(params.message)
---
# Source: edp-install/charts/edp-tekton/templates/tasks/sonar/sonarqube-dotnet.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sonarqube-dotnet
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The sonarqube-scanner Task will update parameters in the
    sonar-project.properties file or create a new sonar-project.properties
    file and put parameters of a sonar project into it.

    Task will run sonar-scanner for scanning after preparing the sonar-project.properties file.

  workspaces:
    - name: source
  params:
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_PROJECT_NAME
      description: Project's unique name
      default: ""
    - name: SONAR_QUALITYGATE_WAIT
      description: Forces the analysis step to poll the SonarQube instance and wait for the Quality Gate status.
      default: "true"
    - name: ci-sonarqube
      type: string
      description: name of the secret holding the Sonarqube CI integration data
      default: "ci-sonarqube"
    - name: branch
      type: string
      description: Branch of scanning (for build pipeline)
      default: ""
    - name: target-branch
      type: string
      description: Target branch of Merge Request
      default: ""
    - name: source-branch
      type: string
      description: Source branch of Merge Request
      default: ""
    - name: key-id
      type: string
      description: Change number from Merge Request
      default: ""
    - name: BASE_IMAGE
      description: DotNet base image.
      type: string
      default: "epamedp/tekton-dotnet:6.0.2"
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
    - name: EXTRA_COMMANDS
      type: string
  steps:
    - image: epamedp/tekton-autotest:0.1.3
      name: prepare-project
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
      script: |
        set -e

        PROJECT_EXISTS=$(curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/components/show?component=${SONAR_PROJECT_KEY}" | jq -r ".component.key")

        if [ "$PROJECT_EXISTS" == "null" ]; then
          default_branch=$(kubectl get codebase $SONAR_PROJECT_NAME -o jsonpath='{.spec.defaultBranch}')
          echo "Create project ${SONAR_PROJECT_KEY}"
          curl -X POST -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/projects/create?name=${SONAR_PROJECT_KEY}&project=${SONAR_PROJECT_KEY}&mainBranch=${default_branch}"
        else
          echo "Project ${SONAR_PROJECT_KEY} already exists"
        fi
    - name: sonar-scanner
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
        - name: SONAR_QUALITYGATE_WAIT
          value: "$(params.SONAR_QUALITYGATE_WAIT)"
        - name: TARGET_BRANCH
          value: "$(params.target-branch)"
        - name: SOURCE_BRANCH
          value: "$(params.source-branch)"
        - name: KEY_ID
          value: "$(params.key-id)"
        - name: BRANCH
          value: "$(params.branch)"
      script: |
        #!/usr/bin/env sh
        set -e
        $(params.EXTRA_COMMANDS)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/sonar/sonarqube-general.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sonarqube-general
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The sonarqube-scanner Task will update parameters in the
    sonar-project.properties file or create a new sonar-project.properties
    file and put parameters of a sonar project into it.

    Task will run sonar-scanner for scanning after preparing the sonar-project.properties file.

  workspaces:
    - name: source
  params:
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_PROJECT_NAME
      description: Project's unique name
      default: ""
    - name: SONAR_QUALITYGATE_WAIT
      description: Forces the analysis step to poll the SonarQube instance and wait for the Quality Gate status.
      default: "true"
    - name: ci-sonarqube
      type: string
      description: name of the secret holding the Sonarqube CI integration data
      default: "ci-sonarqube"
    - name: branch
      type: string
      description: Branch of scanning (for build pipeline)
      default: ""
    - name: target-branch
      type: string
      description: Target branch of Merge Request
      default: ""
    - name: source-branch
      type: string
      description: Source branch of Merge Request
      default: ""
    - name: key-id
      type: string
      description: Change number from Merge Request
      default: ""
  steps:
    - image: epamedp/tekton-autotest:0.1.3
      name: prepare-project
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
      script: |
        set -e

        PROJECT_EXISTS=$(curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/components/show?component=${SONAR_PROJECT_KEY}" | jq -r ".component.key")

        if [ "$PROJECT_EXISTS" == "null" ]; then
          default_branch=$(kubectl get codebase $SONAR_PROJECT_NAME -o jsonpath='{.spec.defaultBranch}')
          echo "Create project ${SONAR_PROJECT_KEY}"
          curl -X POST -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/projects/create?name=${SONAR_PROJECT_KEY}&project=${SONAR_PROJECT_KEY}&mainBranch=${default_branch}"
        else
          echo "Project ${SONAR_PROJECT_KEY} already exists"
        fi
    - image: registry.access.redhat.com/ubi8/ubi-minimal:8.8
      name: prepare-sonar-project-properties
      computeResources: {}
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
        - name: SONAR_QUALITYGATE_WAIT
          value: "$(params.SONAR_QUALITYGATE_WAIT)"
        - name: TARGET_BRANCH
          value: "$(params.target-branch)"
        - name: SOURCE_BRANCH
          value: "$(params.source-branch)"
        - name: KEY_ID
          value: "$(params.key-id)"
        - name: BRANCH
          value: "$(params.branch)"
      script: |
        #!/usr/bin/env bash

        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3

          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        if [[ -f $(workspaces.source.path)/sonar-project.properties ]]; then
          if [[ -n "${SONAR_HOST_URL}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.host.url ${SONAR_HOST_URL}
          fi
          if [[ -n "${SONAR_PROJECT_KEY}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.projectKey ${SONAR_PROJECT_KEY}
          fi
          if [[ -n "${SONAR_PROJECT_NAME}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.projectName ${SONAR_PROJECT_NAME}
          fi
          if [[ -n "${SONAR_QUALITYGATE_WAIT}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.qualitygate.wait ${SONAR_QUALITYGATE_WAIT}
          fi
          if [[ -n "${BRANCH}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.branch.name ${BRANCH}
          fi
          if [[ -n "${KEY_ID}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.key ${KEY_ID}
          fi
          if [[ -n "${SOURCE_BRANCH}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.branch ${SOURCE_BRANCH}
          fi
          if [[ -n "${TARGET_BRANCH}" ]]; then
            replaceValues $(workspaces.source.path)/sonar-project.properties sonar.pullrequest.base ${TARGET_BRANCH}
          fi

        else
          touch sonar-project.properties
          test -z "${SONAR_HOST_URL}" || echo "sonar.host.url=${SONAR_HOST_URL}" >> sonar-project.properties
          test -z "${SONAR_PROJECT_KEY}" || echo "sonar.projectKey=${SONAR_PROJECT_KEY}" >> sonar-project.properties
          test -z "${SONAR_PROJECT_NAME}" || echo "sonar.projectName=${SONAR_PROJECT_NAME}" >> sonar-project.properties
          test -z "${SONAR_QUALITYGATE_WAIT}" || echo "sonar.qualitygate.wait=${SONAR_QUALITYGATE_WAIT}" >> sonar-project.properties
          test -z "${BRANCH}" || echo "sonar.branch.name=${BRANCH}" >> sonar-project.properties
          test -z "${KEY_ID}" || echo "sonar.pullrequest.key=${KEY_ID}" >> sonar-project.properties
          test -z "${SOURCE_BRANCH}" || echo "sonar.pullrequest.branch=${SOURCE_BRANCH}" >> sonar-project.properties
          test -z "${TARGET_BRANCH}" || echo "sonar.pullrequest.base=${TARGET_BRANCH}" >> sonar-project.properties
        fi

        echo "---------------------------"
        cat $(workspaces.source.path)/sonar-project.properties

    - image: sonarsource/sonar-scanner-cli:5.0.1
      name: sonar-scanner
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
      command:
        - sonar-scanner
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/sonar/sonarqube-gradle.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sonarqube-gradle
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The sonarqube-scanner Task will update parameters in the
    sonar-project.properties file or create a new sonar-project.properties
    file and put parameters of a sonar project into it.

    Task will run sonar-scanner for scanning after preparing the sonar-project.properties file.

  workspaces:
    - name: source
  params:
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_PROJECT_NAME
      description: Project's unique name
      default: ""
    - name: SONAR_QUALITYGATE_WAIT
      description: Forces the analysis step to poll the SonarQube instance and wait for the Quality Gate status.
      default: "true"
    - name: ci-sonarqube
      type: string
      description: name of the secret holding the Sonarqube CI integration data
      default: "ci-sonarqube"
    - name: branch
      type: string
      description: Branch of scanning (for build pipeline)
      default: ""
    - name: target-branch
      type: string
      description: Target branch of Merge Request
      default: ""
    - name: source-branch
      type: string
      description: Source branch of Merge Request
      default: ""
    - name: key-id
      type: string
      description: Change number from Merge Request
      default: ""
    - name: ci-nexus
      type: string
      description: name of the secret for the Nexus integration
      default: ci-nexus
    - name: BASE_IMAGE
      description: Gradle base image.
      type: string
      default: gradle:7.5.1-jdk11
    - name: PROJECT_DIR
      description: The directory containing build.gradle
      type: string
      default: "."
    - name: EXTRA_COMMANDS
      type: string
  volumes:
    - name: settings-gradle
      configMap:
        name: custom-gradle-settings
  steps:
    - image: epamedp/tekton-autotest:0.1.3
      name: prepare-project
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
      script: |
        set -e

        PROJECT_EXISTS=$(curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/components/show?component=${SONAR_PROJECT_KEY}" | jq -r ".component.key")

        if [ "$PROJECT_EXISTS" == "null" ]; then
          default_branch=$(kubectl get codebase $SONAR_PROJECT_NAME -o jsonpath='{.spec.defaultBranch}')
          echo "Create project ${SONAR_PROJECT_KEY}"
          curl -X POST -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/projects/create?name=${SONAR_PROJECT_KEY}&project=${SONAR_PROJECT_KEY}&mainBranch=${default_branch}"
        else
          echo "Project ${SONAR_PROJECT_KEY} already exists"
        fi
    - name: gradle-tasks
      image: $(params.BASE_IMAGE)
      volumeMounts:
        - name: settings-gradle
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        #!/bin/bash
        set -e

        gradle \
          -I \
          /var/configmap/init.gradle \
          -PnexusLogin=${CI_USERNAME} \
          -PnexusPassword=${CI_PASSWORD} \
          $(params.EXTRA_COMMANDS)
      env:
        - name: XDG_CONFIG_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: GRADLE_USER_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: SONAR_USER_HOME
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
        - name: NEXUS_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: url
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/sonar/sonarqube-maven.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sonarqube-maven
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The sonarqube-scanner Task will update parameters in the
    sonar-project.properties file or create a new sonar-project.properties
    file and put parameters of a sonar project into it.

    Task will run sonar-scanner for scanning after preparing the sonar-project.properties file.

  workspaces:
    - name: source
  params:
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_PROJECT_NAME
      description: Project's unique name
      default: ""
    - name: SONAR_QUALITYGATE_WAIT
      description: Forces the analysis step to poll the SonarQube instance and wait for the Quality Gate status.
      default: "true"
    - name: ci-nexus
      type: string
      description: name of the secret holding the Nexus CI integration data
      default: ci-nexus
    - name: ci-sonarqube
      type: string
      description: name of the secret holding the Sonarqube CI integration data
      default: "ci-sonarqube"
    - name: branch
      type: string
      description: Branch of scanning (for build pipeline)
      default: ""
    - name: target-branch
      type: string
      description: Target branch of Merge Request
      default: ""
    - name: source-branch
      type: string
      description: Source branch of Merge Request
      default: ""
    - name: key-id
      type: string
      description: Change number from Merge Request
      default: ""
    - name: CONTEXT_DIR
      type: string
      description: >-
        The context directory within the repository for sources on
        which we want to execute maven goals.
      default: "source"
    - name: MAVEN_IMAGE
      type: string
      description: Maven base image
      default: maven:3.9.0-eclipse-temurin-11
    - name: EXTRA_COMMANDS
      description: maven goals to run
      type: array
      default:
        - "package"
  volumes:
    - name: settings-maven
      configMap:
        name: custom-maven-settings
  steps:
    - image: epamedp/tekton-autotest:0.1.3
      name: prepare-project
      workingDir: $(workspaces.source.path)
      env:
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_PROJECT_KEY
          value: "$(params.SONAR_PROJECT_KEY)"
        - name: SONAR_PROJECT_NAME
          value: "$(params.SONAR_PROJECT_NAME)"
      script: |
        set -e

        PROJECT_EXISTS=$(curl -s -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/components/show?component=${SONAR_PROJECT_KEY}" | jq -r ".component.key")

        if [ "$PROJECT_EXISTS" == "null" ]; then
          default_branch=$(kubectl get codebase $SONAR_PROJECT_NAME -o jsonpath='{.spec.defaultBranch}')
          echo "Create project ${SONAR_PROJECT_KEY}"
          curl -X POST -u ${SONAR_TOKEN}: "${SONAR_HOST_URL}/api/projects/create?name=${SONAR_PROJECT_KEY}&project=${SONAR_PROJECT_KEY}&mainBranch=${default_branch}"
        else
          echo "Project ${SONAR_PROJECT_KEY} already exists"
        fi
    - name: mvn-goals
      image: $(params.MAVEN_IMAGE)
      volumeMounts:
        - name: settings-maven
          mountPath: /var/configmap
      workingDir: $(workspaces.source.path)/$(params.CONTEXT_DIR)
      command: ["/usr/bin/mvn"]
      args:
        - -s
        - /var/configmap/settings.xml
        - "$(params.EXTRA_COMMANDS)"
      env:
        - name: HOME
          value: $(workspaces.source.path)
        - name: SONAR_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: token
        - name: SONAR_HOST_URL
          valueFrom:
            secretKeyRef:
              name: $(params.ci-sonarqube)
              key: url
        - name: CI_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: username
        - name: CI_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.ci-nexus)
              key: password
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/terraform-check.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: terraform-check
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run opa tests on a project.
  workspaces:
    - name: source
  params:
    - name: PROJECT_DIR
      description: The directory containing terraform files
      type: string
      default: "."
    - name: EXTRA_COMMANDS
      type: string
    - name: BASE_IMAGE
      type: string
      default: epamedp/tekton-pre-commit:0.1.5
      description: The terraform-check image.
  steps:
    - name: terraform
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        set -ex
        $(params.EXTRA_COMMANDS)
      securityContext:
        runAsUser: 0
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/terraform.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: terraform
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run opa tests on a project.
  workspaces:
    - name: source
  params:
    - name: PROJECT_DIR
      description: The directory containing terraform files
      type: string
      default: "."
    - name: EXTRA_COMMANDS
      type: string
    - name: BASE_IMAGE
      type: string
      default: epamedp/tekton-tfenv:0.1.4
      description: The tfenv image.
    - name: TFENV_TERRAFORM_VERSION
      type: string
      default: "latest"
      description: Terraform version
  steps:
    - name: terraform
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        set -ex
        $(params.EXTRA_COMMANDS)
      env:
        - name: TFENV_CONFIG_DIR
          value: /tekton/home
        - name: TFENV_TERRAFORM_VERSION
          value: $(params.TFENV_TERRAFORM_VERSION)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: 500m
          memory: 1Gi
---
# Source: edp-install/charts/edp-tekton/templates/tasks/trivy-scan.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: trivy-scan
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Scan Tools
    tekton.dev/tags: scan-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: source
      description: The workspace consisting of maven project.
  params:
    - name: BASE_IMAGE
      type: string
      description: Semgrep image
      default: "aquasec/trivy:0.41.0"
    - name: targetImage
      type: string
      default: ""
  steps:
    - name: trivy
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: TARGET_IMAGE
          value: $(params.targetImage)
      script: |
        #!/usr/bin/env sh
        set -e

        trivy image --scanners vuln --severity HIGH,CRITICAL "${TARGET_IMAGE}"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/update-cbb.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-cbb
spec:
  params:
    - name: CODEBASEBRANCH_NAME
      type: string
      description: "Codebase branch name with only letters and dashes"
    - name: CURRENT_BUILD_NUMBER
      type: string
    - name: BASE_IMAGE
      description: The base image for the task.
      type: string
      default: bitnami/kubectl:1.25.2
  steps:
    - name: update-cbis
      image: $(params.BASE_IMAGE)
      env:
        - name: CBB_NAME
          value: "$(params.CODEBASEBRANCH_NAME)"
        - name: CURRENT_BUILD_NUMBER
          value: "$(params.CURRENT_BUILD_NUMBER)"
      script: |
        #!/usr/bin/env bash
        set -ex

        kubectl patch codebasebranches.v2.edp.epam.com ${CBB_NAME} \
        --subresource=status \
        --type=merge \
        -p "{\"status\": {\"lastSuccessfulBuild\": \"${CURRENT_BUILD_NUMBER}\"}}"
---
# Source: edp-install/charts/edp-tekton/templates/tasks/update-cbis.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-cbis
spec:
  params:
    - name: CBIS_NAME
      type: string
      description: "Codebase name with only letters and dashes"
    - name: IMAGE_TAG
      type: string
    - name: BASE_IMAGE
      description: The base image for the task.
      type: string
      default: bitnami/kubectl:1.25.2
  steps:
    - name: update-cbis
      image: $(params.BASE_IMAGE)
      env:
        - name: CBIS_NAME
          value: "$(params.CBIS_NAME)"
        - name: IMAGE_TAG
          value: "$(params.IMAGE_TAG)"
      script: |
        #!/usr/bin/env bash
        set -e

        cbisCrTags=$(kubectl get cbis.v2.edp.epam.com ${CBIS_NAME} --output=jsonpath={.spec.tags})
        dateFormat=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        newcbisTag="{\"name\":\"${IMAGE_TAG}\",\"created\":\"${dateFormat}\"}"

        if [ "${cbisCrTags}" = "" ] ; then
            echo "[TEKTON][DEBUG] There're no tags in imageStream ${CBIS_NAME} ... the first one will be added."
            kubectl patch cbis.v2.edp.epam.com ${CBIS_NAME} --type=merge -p "{\"spec\":{\"tags\":[${newcbisTag}]}}"
        fi

        cbisTagsList=$(kubectl get cbis.v2.edp.epam.com ${CBIS_NAME} --output=jsonpath={.spec.tags[*].name})
        if [[ ! ${cbisTagsList} == *"${IMAGE_TAG}"* ]]; then
            echo "[TEKTON][DEBUG] ImageStream ${CBIS_NAME} doesn't contain ${IMAGE_TAG} tag ... it will be added."
            kubectl patch cbis.v2.edp.epam.com ${CBIS_NAME} --type json -p="[{\"op\": \"add\", \"path\": \"/spec/tags/-\", \"value\": ${newcbisTag} }]"
        fi
---
# Source: edp-install/templates/marketplace/antora.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: antora
spec:
  displayName: Documentation as Code with Antora
  buildTool: npm
  type: application
  framework: antora
  language: javascript
  description: Utilize the AsciiDoc markup language to construct, arrange, and manage your documentation while adopting a Documentation as Code methodology.
  category: docs
  icon:
    - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxZW0iIGhlaWdodD0iMWVtIiB2aWV3Qm94PSIwIDAgMzIgMzIiPjxnIGZpbGw9Im5vbmUiPjxwYXRoIGZpbGw9IiNGM0FENjEiIGQ9Ik0yOS4zNzQgMmgtNC4xN2EyMi40IDIyLjQgMCAwIDAtNi4xOTQuODc0bC0xLjk5IDMuMTdMMTQuMDEyIDVhMjIuMzk1IDIyLjM5NSAwIDAgMC0zLjI2OSAyLjNhMTkuMDI1IDE5LjAyNSAwIDAgMC02LjcyIDE0LjUxdjMuMjVzLjE3LS4zLjQ5LS44MWMtLjA5LjM4LS4xMy41OS0uMTMuNTl2LjIyaDMuOTJjMi4wOCAwIDQuMDgtLjQ3IDUuODktMS4zNGMuMjEtLjEuMjEtLjQgMC0uNWwtMi4xNy0xLjAxYy0uMTMtLjA0LS4wOS0uMjEuMDQtLjIxaDQuNTNjLjIxIDAgLjQxLS4wOC41Ny0uMjFjMS4zMy0xLjE0IDIuNDUtMi41NCAzLjI3LTQuMTVjLjMtLjYuODctMS42NyAxLjE4LTIuMjVjLjEzLS4yNC4xMi0uNTMtLjAyLS43N2wtMS4zNi0yLjI0YS4yNS4yNSAwIDAgMSAuMjEtLjM4bDEuNTMzLS45OTRsMi4wNDQtMS45OThsMi43Ni0yLjAwMmE0NS44NjEgNDUuODYxIDAgMCAxIDMuMDQzLTMuODE2Yy4xMy0uMTQuMi0uMzMuMi0uNTJhLjY1My42NTMgMCAwIDAtLjY1LS42N1oiLz48cGF0aCBmaWxsPSIjQTU2OTUzIiBkPSJNMTQgMTJoOS4xMTRjLjI2IDAgLjUxLS4xNC42NC0uMzZjLjk0LTEuNTcgMS45Ni0zLjE0IDMuMDQtNC42NGgtNy43OVYyLjg4QTIyLjEyOSAyMi4xMjkgMCAwIDAgMTQgNS4wMTZWMTJaIi8+PHBhdGggZmlsbD0iI0QzODgzRSIgZD0iTTI1LjI4NCA0LjE0YS40OTguNDk4IDAgMCAwLS42NS0uMjNjLTQuNiAyLjA3LTguNzQgNC45NC0xMi4zNCA4LjUzYTQxLjU4NCA0MS41ODQgMCAwIDAtOC45MiAxMy4yMmE0MS40NyA0MS40NyAwIDAgMC0xLjM1IDMuNjdjLS4wOS4zLjA4LjYxLjM4LjY2Yy4yNi4wNS41LS4xMS41Ny0uMzVjLjM4LTEuMjEuODItMi40MSAxLjMyLTMuNTljMi4wNC00LjgzIDQuOTctOS4xOCA4LjctMTIuOWMzLjUxLTMuNTEgNy41NS02LjMgMTIuMDQtOC4zMmEuNS41IDAgMCAwIC4yNS0uNjljMCAuMDEgMCAuMDEgMCAwWiIvPjwvZz48L3N2Zz4=
      mediatype: image/svg+xml
  keywords:
    - antora
    - asciidoc
    - documentation
    - technical writing
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/javascript-npm-antora
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/templates/marketplace/csharp-dotnet-6.0.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: csharp-app
spec:
  displayName: Modern Applications with C# .NET 6.0
  buildTool: dotnet
  type: application
  framework: dotnet-6.0
  language: csharp
  description: Develop modern, high-performance applications using C# and the latest version of the .NET framework.
  category: web
  icon:
    - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxZW0iIGhlaWdodD0iMWVtIiB2aWV3Qm94PSIwIDAgMTI4IDEyOCI+PGcgZmlsbD0iIzYyMzY5NyI+PHBhdGggZD0iTTYxLjE5NSAwaDQuOTUzYzEyLjkxOC41MzUgMjUuNjg4IDQuODkgMzYuMDQzIDEyLjY3NmM5LjgwOSA3LjI4OSAxNy40NzMgMTcuNDM3IDIxLjcyNyAyOC45MDZjMi40NDEgNi4zODcgMy42NjQgMTMuMTggNC4wODIgMTkuOTkydjQuMjExYy0uNDE0IDExLjI5My0zLjY2NCAyMi41Mi05LjczIDMyLjA4MmMtNi44MDEgMTAuODk1LTE2LjkyMiAxOS43My0yOC43MjcgMjQuODI4QTY0LjM5OSA2NC4zOTkgMCAwIDEgNjUuMDgyIDEyOGgtMi4xNDRjLTExLjczNS0uMTkxLTIzLjQxLTMuNjYtMzMuMjk3LTkuOTkyYy0xMS4xOTYtNy4xMTMtMjAuMTE0LTE3Ljc4NS0yNS4wMjgtMzAuMTE3QzEuODkxIDgxLjE5LjQ0MSA3NC4wMiAwIDY2LjgxMnYtNC45NTdjLjUwNC0xNC4zOSA1Ljk1My0yOC42MDkgMTUuNDEtMzkuNDk2QzIzLjE2OCAxMy4zMSAzMy41IDYuNDggNDQuODg3IDIuOTM3QzUwLjE3MiAxLjI3IDU1LjY3Ni40MSA2MS4xOTUgME0yNS4xOTEgMzcuNTIzYy0uMDMgMTIuMTUzLS4wMTEgMjQuMzA1LS4wMTEgMzYuNDU0YzEuNDMuMDExIDIuODYuMDExIDQuMjkzLjAxMWMtLjA3NS0xMC40MzMuMTAxLTIwLjg2My0uMTA2LTMxLjI5M2MuNDguOTA3LjkxOCAxLjg0IDEuNDY1IDIuNzA3QzM3LjAzNSA1NC45MSA0My4xMDUgNjQuNSA0OS4zMDkgNzRjMS43MzgtLjAyMyAzLjQ3Ni0uMDIzIDUuMjE0LjAwNGMtLjAwMy0xMi4xNi0uMDA3LTI0LjMyLjAwNC0zNi40OGEzMDguMDc2IDMwOC4wNzYgMCAwIDAtNC4yNS0uMDEyYy4wNzUgMTAuMzItLjEzNiAyMC42NC4xMjUgMzAuOTQ5Yy02LjUwNy0xMC4zNTItMTMuMTAxLTIwLjY0NS0xOS42OTUtMzAuOTQ1YTM3MC44NSAzNzAuODUgMCAwIDAtNS41MTYuMDA3bTM4Ljg0NC0uMDExYy0uMTI5IDEyLjE2LS4wMDQgMjQuMzItLjA0NyAzNi40NzZjNi40NjktLjAxNSAxMi45MzguMDI0IDE5LjQxLS4wMmE4My4zNiA4My4zNiAwIDAgMSAuMDI0LTMuOTUyYy01LjAxMi0uMDE2LTEwLjAyNy4wMDctMTUuMDQzLS4wMmMtLjA3NC00LjIxLS4wMDQtOC40MjYtLjA0LTEyLjYzN2M0LjM5NS0uMDc4IDguNzkuMDEyIDEzLjE4LS4wNDdjLS4wMTEtMS4yNzctLjAxMS0yLjU1NC0uMDE5LTMuODMyYy00LjM4Ny4xNDEtOC43NzMtLjA1NC0xMy4xNjQuMDEyYy4wMTItNC4wMjMuMDItOC4wNS4wMi0xMi4wNzhjNC42OTkgMCA5LjM5OC0uMDIgMTQuMDkzLjAxMmMtLjAwOC0xLjMwMSAwLTIuNjA2LjAxNi0zLjkwNmMtNi4xNDUtLjAxNi0xMi4yOS0uMDA4LTE4LjQzLS4wMDhtMjIuNjAyLjA1NGMuMDA0IDEuMjY2LjAwNCAyLjUyOC4wMDggMy43OWMzLjQ4OC0uMDQgNi45NzIuMTA5IDEwLjQ2LjAzNWMtLjAyMyAxMC44NjMuMDA0IDIxLjcxOC0uMDExIDMyLjU3NGMxLjQ2LjA0MyAyLjkzLjAzNSA0LjM5LS4wOWMtLjEyLTUuOTkyLjExOC0xMS45ODgtLjE1Ni0xNy45NzdjLjA2Ny0yLjY5OS0uMDctNS4zOTQuMTE3LTguMDljLjEwNi0yLjE0LS4yNzctNC4yNzctLjAzNS02LjQxN2MzLjUxNi4wNDcgNy4wMzUuMDE1IDEwLjU1LjAxNWE1OS43NzQgNTkuNzc0IDAgMCAxIC4wNzUtMy44MzJjLTguNDY5LS4xMDUtMTYuOTM3LS4wOTQtMjUuMzk4LS4wMDhNMTMuNTUgNjkuMDk0Yy0xLjk3Ny45MS0yLjEwNiA0LjAyMy0uMTQ5IDUuMDI3YzEuNzIgMS4xOCA0LjMwNS0uMzcxIDQuMjI3LTIuNDFjLjEzMy0yLjAwNC0yLjI5LTMuNjg4LTQuMDc4LTIuNjE3bTI5LjIzIDE1LjI4OWMtNC4yNzcgMy40NjktNC4yMjYgMTEuMTk1LjUgMTQuMjVjMi42NjggMS42OTUgNi4xMDIgMS4zNDQgOC45MjIuMjE1Yy4wMTItLjYyMS4wMjctMS4yMzkuMDUtMS44NmMtMi42NzEgMS4zOTUtNi40MSAxLjY4LTguNjc1LS42MWMtMi45NjUtMy4yMzctMi4yOTctOS4yNjkgMS42MTMtMTEuNDc2YzIuMjExLTEuMTY0IDQuOTA3LS44MjQgNy4wODYuMjM5Yy0uMDA3LS42Ni0uMDA0LTEuMzIgMC0xLjk4Yy0zLjA5Ny0xLjA5OS02LjkyMi0xLjA0LTkuNDk2IDEuMjIybTE3LjIwNyAyLjcxYy0xLjg5LjIyLTMuNzU4IDEuMjItNC42MzMgMi45NjZjLTEuMjUzIDIuNDk2LTEuMTA5IDUuODY3Ljg2NCA3Ljk2YzIuMDM1IDIuMjk3IDUuOTQ1IDIuMzIgOC4xOC4yOTdjMi40MjUtMi4zMDggMi42OTktNi40NjguNzU3LTkuMTY0Yy0xLjE0OC0xLjYyOS0zLjI3My0yLjE4My01LjE2OC0yLjA1OG0xNy44ODcgMi43MjJjLTEuNjYgMi44ODMtMS4zMzIgNy4yNSAxLjU5OCA5LjIxMWMyLjE4MyAxLjIyIDQuOTMzLjgzMiA3LjA3NC0uMzA4Yy0uMDA0LS42MTcuMDA0LTEuMjM1LjAzMS0xLjg0OGMtMS42ODcgMS4wNy0zLjkzNyAxLjg1Ni01LjgxMi43NzdjLTEuMzA5LS43MjItMS43MDQtMi4yNTctMS45MTQtMy42MjVjMi44NzUtLjAzOSA1Ljc0Ni0uMDgyIDguNjI1LS4wNzRjLS4wNzUtMS44MjgtLjExOC0zLjg5NC0xLjQ1LTUuMzA4Yy0yLjE5OS0yLjQzLTYuNjQ0LTEuNjU3LTguMTUyIDEuMTc1TTY5LjQ2IDg3LjQ4djEyLjAwOGMuNjUyIDAgMS4zMTIgMCAxLjk3My4wMDRjLjAyMy0yLjE5NS0uMDQtNC4zOTQuMDIzLTYuNTk0Yy4wMTYtMS4yNy41MjctMi41NTggMS40ODQtMy40MTRjLjgwMS0uNjA1IDEuODgzLS4yNyAyLjgwMS0uMjQ2Yy0uMDEyLS42MzYtLjAyLTEuMjctLjAyMy0xLjkwMmMtMS43OTMtLjM5OC0zLjMzNi42NTItNC4yNDIgMi4xMTdjLS4wMi0uNjMzLS4wNC0xLjI2Ni0uMDUxLTEuODk0Yy0uNjU2LS4wMjQtMS4zMTMtLjA1MS0xLjk2NS0uMDc5em0wIDAiLz48cGF0aCBkPSJNNTguNzU4IDg5LjIyM2MxLjY1Mi0uODA1IDQuMDIzLS40MSA0Ljk0NSAxLjNjMS4wNSAxLjg4NyAxLjAyNyA0LjM4My0uMTM3IDYuMjExYy0xLjUyIDIuMjg2LTUuNTI3IDEuNzg2LTYuNTIzLS43NDJjLTEuMDA4LTIuMjU4LS42MTctNS40ODQgMS43MTUtNi43N3ptMjAuMjgyIDMuMTkxYy4wNDYtMS41NzQgMS4xNDQtMy4xMzcgMi43MjYtMy40OGMuOTc2LS4xNjQgMi4wOTcuMDA3IDIuNzczLjc5M2MuNjcyLjcxNC44MTMgMS43MTQuOTggMi42NGMtMi4xNi4wMTItNC4zMi0uMDMxLTYuNDguMDQ3em0wIDAiLz48L2c+PC9zdmc+
      mediatype: image/svg+xml
  keywords:
    - api
    - csharp
    - web
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/csharp-dotnet-dotnet-6.0
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/templates/marketplace/fastapi.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: fastapi
spec:
  displayName: Fast API Microservice
  buildTool: python
  type: application
  framework: fastapi
  language: python
  description: FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.
  category: api
  icon:
    - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIxZW0iIGhlaWdodD0iMWVtIiB2aWV3Qm94PSIwIDAgMjU2IDI1NiI+PGcgZmlsbD0ibm9uZSI+PHJlY3Qgd2lkdGg9IjI1NiIgaGVpZ2h0PSIyNTYiIGZpbGw9IiMwNDk3ODkiIHJ4PSI2MCIvPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0xMjcuNSA0MUM3OS43NDMgNDEgNDEgNzkuNzQzIDQxIDEyNy41Uzc5Ljc0MyAyMTQgMTI3LjUgMjE0czg2LjUtMzguNzQzIDg2LjUtODYuNVMxNzUuMjU3IDQxIDEyNy41IDQxWm0tNC41MDcgMTU1LjgzOXYtNTQuMjU4SDkyLjgzMWw0My4zMzYtODQuNDJ2NTQuMjU4aDI5LjAzNmwtNDIuMjEgODQuNDJaIi8+PC9nPjwvc3ZnPg==
      mediatype: image/svg+xml
  keywords:
    - fastapi
    - python
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/python-python-fastapi
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/templates/marketplace/gin.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: gingo
spec:
  displayName: Web Applications with Gin Framework
  buildTool: go
  type: application
  framework: gin
  language: go
  description: Build scalable and robust web applications in Go using the simplicity and speed of the Gin framework.
  category: web
  icon:
    - base64data: 
      mediatype: image/png
  keywords:
    - api
    - golang
    - web
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/go-go-gin
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/templates/marketplace/springboot-java17.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: springboot-java17
spec:
  displayName: Simple Spring Boot Application
  buildTool: maven
  type: application
  framework: java17
  language: java
  description: Develop powerful and scalable Java applications with ease using Spring Boot. Leverage the latest features and enhancements introduced in Java 17 to build modern, cloud-native applications. Build RESTful APIs, integrate with databases, implement security, and deploy your application with confidence using Spring Boot's opinionated approach and extensive ecosystem.
  category: api
  icon:
    - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA5Ny4xIDk3Ij48ZGVmcz48c3R5bGU+LmNscy0xe2ZpbGw6IzZkYjMzZjt9PC9zdHlsZT48L2RlZnM+PHRpdGxlPnNwcmluZy1pY29uPC90aXRsZT48ZyBpZD0iTGF5ZXJfMiIgZGF0YS1uYW1lPSJMYXllciAyIj48ZyBpZD0ibG9nb3MiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTg4LjQsNS42YTQyLjMyLDQyLjMyLDAsMCwxLTUuMiw5LjFBNDguNDYsNDguNDYsMCwxLDAsMTUuNSw4NGwxLjgsMS42QTQ4LjQxLDQ4LjQxLDAsMCwwLDk2LjgsNTJDOTguMiwzOS44LDk0LjUsMjQuMiw4OC40LDUuNlpNMjIuNSw4NC40YTQuMTIsNC4xMiwwLDEsMS0uNi01LjhBNC4yMSw0LjIxLDAsMCwxLDIyLjUsODQuNFpNODguMSw2OS45Qzc2LjIsODUuOCw1MC42LDgwLjQsMzQuMyw4MS4yYzAsMC0yLjkuMi01LjguNiwwLDAsMS4xLS41LDIuNS0xLDExLjUtNCwxNi45LTQuOCwyMy45LTguNEM2OCw2NS43LDgxLjEsNTEsODMuNywzNS44Yy01LDE0LjYtMjAuMiwyNy4yLTM0LDMyLjNDNDAuMiw3MS42LDIzLjEsNzUsMjMuMSw3NWwtLjctLjRjLTExLjYtNS43LTEyLTMwLjksOS4yLTM5LDkuMy0zLjYsMTguMS0xLjYsMjguMi00LDEwLjctMi41LDIzLjEtMTAuNSwyOC4xLTIxQzkzLjUsMjcuNSwxMDAuMyw1My43LDg4LjEsNjkuOVoiLz48L2c+PC9nPjwvc3ZnPg==
      mediatype: image/svg+xml
  keywords:
    - api
    - java
    - microservice
    - springboot
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/java-maven-java17
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/templates/marketplace/terraform-module.yaml
apiVersion: v2.edp.epam.com/v1alpha1
kind: Template
metadata:
  name: terraform-module
spec:
  displayName: Terraform Module
  buildTool: terraform
  type: library
  framework: terraform
  language: hcl
  description: Encapsulate reusable infrastructure components, abstracting complex configurations into modular and scalable building blocks - Terraform modules.
  category: iac
  icon:
    - base64data: PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIwLjg4ZW0iIGhlaWdodD0iMWVtIiB2aWV3Qm94PSIwIDAgMjU2IDI5MSI+PHBhdGggZmlsbD0iIzQwNDBCMiIgZD0iTTE3Ni40ODUgMTg4Ljk5NEwyNTYgMTQzLjEyN1Y1MS4yNDlsLTc5LjUxNSA0NS45NjN6Ii8+PHBhdGggZmlsbD0iIzVDNEVFNSIgZD0ibTg4LjI0MyA1MS4yNDlsNzkuNTE1IDQ1Ljk2M3Y5MS43ODJMODguMjQzIDE0My4wOE0wIDkxLjgzbDc5LjUxNSA0NS45MTZ2LTkxLjgzTDAgMG04OC4yNDMgMjQ0Ljk5NGw3OS41MTUgNDUuOTE1di05MS44M2wtNzkuNTE1LTQ1LjkxNSIvPjwvc3ZnPg==
      mediatype: image/svg+xml
  keywords:
    - hcl
    - iac
    - infrastructure
    - terraform
  maintainers:
    - name: SupportEPMD-EDP
      email: SupportEPMD-EDP@epam.com
  source: https://github.com/epmd-edp/hcl-terraform-terraform
  version: 0.1.0
  minEDPVersion: 3.4.0
  maturity: stable
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/trigger-build.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: Trigger
metadata:
  name: github-build
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  interceptors:
    - ref:
        name: "github"
      params:
        - name: "secretRef"
          value:
            secretName: ci-github
            secretKey: secretString
        - name: "eventTypes"
          value: ["pull_request"]
    - ref:
        name: "cel"
      params:
        - name: "filter"
          value: "body.action in ['closed'] && body.pull_request.merged == true"
    - ref:
        name: "edp"
        kind: NamespacedInterceptor
    - ref:
        name: "cel"
      params:
        - name: "overlays"
          value:
            - key: cbtype_short
              expression: "extensions.spec.type.truncate(3)"
  bindings:
    - ref: github-binding-build
  template:
    ref: github-build-template
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/trigger-review.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: Trigger
metadata:
  name: github-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  interceptors:
    - ref:
        name: "github"
      params:
        - name: "secretRef"
          value:
            secretName: ci-github
            secretKey: secretString
        - name: "eventTypes"
          value: ["pull_request", "issue_comment"]
    - ref:
        name: "cel"
      params:
        - name: "filter"
          value: "body.action in ['opened', 'synchronize', 'created']"
    - ref:
        name: "edp"
        kind: NamespacedInterceptor
    - ref:
        name: "cel"
      params:
        - name: "overlays"
          value:
            - key: cbtype_short
              expression: "extensions.spec.type.truncate(3)"
  bindings:
    - ref: github-binding-review
  template:
    ref: github-review-template
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/triggerbinding-build.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-binding-build
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: gitrevision
      value: "$(body.pull_request.base.ref)"
    - name: gitrepositoryurl
      value: "$(body.repository.ssh_url)"
    - name: gitrepositoryname
      value: "$(body.repository.name)"
    - name: buildtool
      value: "$(extensions.spec.buildTool)"
    - name: framework
      value: "$(extensions.spec.framework)"
    # Truncated cbtype type name to reduce string length
    - name: cbtype
      value: "$(extensions.cbtype_short)"
    - name: versioning-type
      value: "$(extensions.spec.versioning.type)"
    - name: codebase
      value: "$(extensions.codebase)"
    - name: codebasebranch
      value: "$(extensions.codebasebranch)"
    # commitMessage is used for 'push-to-jira' Task
    - name: commitMessage
      value: "$(body.pull_request.title)"
    # commitMessagePattern is used for 'commit-validate' Tasks
    - name: commitMessagePattern
      value: "$(extensions.spec.commitMessagePattern)"
    # jiraIssueMetadataPayload is used for 'push-to-jira' Task
    - name: jiraIssueMetadataPayload
      value: "$(extensions.spec.jiraIssueMetadataPayload)"
    # ticketNamePattern is used for 'push-to-jira' Task
    - name: ticketNamePattern
      value: "$(extensions.spec.ticketNamePattern)"
    # jiraServer is used for 'push-to-jira' Task
    - name: jiraServer
      value: "$(extensions.spec.jiraServer)"
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/triggerbinding-review.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: github-binding-review
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: gitrevision
      value: $(extensions.pullRequest.headRef)
    - name: gitrepositoryurl
      value: $(body.repository.ssh_url)
    - name: gitrepositoryname
      value: $(body.repository.name)
    - name: gitfullrepositoryname
      value: $(body.repository.full_name)
    - name: gitsha
      value: $(extensions.pullRequest.headSha)
    - name: targetBranch
      value: "$(extensions.targetBranch)"
    - name: changeNumber
      value: "$(extensions.pullRequest.changeNumber)"
    - name: buildtool
      value: "$(extensions.spec.buildTool)"
    - name: framework
      value: "$(extensions.spec.framework)"
    # Truncated cbtype type name to reduce string length
    - name: cbtype
      value: "$(extensions.cbtype_short)"
    - name: commitMessage
      value: "$(extensions.pullRequest.lastCommitMessage)"
    - name: commitMessagePattern
      value: "$(extensions.spec.commitMessagePattern)"
    - name: codebase
      value: "$(extensions.codebase)"
    - name: codebasebranch
      value: "$(extensions.codebasebranch)"
---
# Source: edp-install/charts/edp-tekton/templates/triggers/cd/deploy-with-autotests.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: deploy-with-autotests
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  params:
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: deploy-$(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)-auto-
        labels:
          app.edp.epam.com/cdpipeline: $(tt.params.CDPIPELINE)
          app.edp.epam.com/cdstage: $(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)
          app.edp.epam.com/pipelinetype: deploy
        annotations:
          argocd.argoproj.io/compare-options: IgnoreExtraneous
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
        pipelineRef:
          name: deploy-with-autotests
        params:
          - name: APPLICATIONS_PAYLOAD
            value: $(tt.params.APPLICATIONS_PAYLOAD)
          - name: CDSTAGE
            value: $(tt.params.CDSTAGE)
          - name: CDPIPELINE
            value: $(tt.params.CDPIPELINE)
          - name: KUBECONFIG_SECRET_NAME
            value: $(tt.params.KUBECONFIG_SECRET_NAME)
        timeouts:
          pipeline: 1h00m0s
        workspaces:
          - name: shared-workspace
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "1Gi"
            subPath: codebase
---
# Source: edp-install/charts/edp-tekton/templates/triggers/cd/deploy.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: deploy
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  params:
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: deploy-$(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)-
        labels:
          app.edp.epam.com/cdpipeline: $(tt.params.CDPIPELINE)
          app.edp.epam.com/cdstage: $(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)
          app.edp.epam.com/pipelinetype: deploy
        annotations:
          argocd.argoproj.io/compare-options: IgnoreExtraneous
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
        pipelineRef:
          name: deploy
        params:
          - name: APPLICATIONS_PAYLOAD
            value: $(tt.params.APPLICATIONS_PAYLOAD)
          - name: CDSTAGE
            value: $(tt.params.CDSTAGE)
          - name: CDPIPELINE
            value: $(tt.params.CDPIPELINE)
          - name: KUBECONFIG_SECRET_NAME
            value: $(tt.params.KUBECONFIG_SECRET_NAME)
        timeouts:
          pipeline: 1h00m0s
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/tt-build.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: github-build-template
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: gitrevision
    - name: gitrepositoryurl
    - name: gitrepositoryname
    - name: buildtool
      description: Build tool for codebase. Used to generate build pipeline name. Populated by edp interceptor
    - name: framework
      description: Framework for codebase. Used to generate build pipeline name. Populated by edp interceptor
    - name: cbtype
      description: Application or library type for codebase. Used to generate build pipeline name. Populated by edp interceptor
    - name: versioning-type
      description: Versioning type for codebase. Used to generate build pipeline name. Populated by edp interceptor
    - name: codebase
      description: Codebase name used in pipeline
    - name: codebasebranch
      description: Codebasebranch name used in pipeline
    - name: ticketNamePattern
      description: Ticket name pattern
    - name: commitMessagePattern
      description: Commit message pattern to run commit-validate task
    - name: commitMessage
      description: Commit message
    - name: jiraIssueMetadataPayload
      description: Jira issue payload
    - name: jiraServer
      description: Jira server name
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: $(tt.params.codebasebranch)-build-
        labels:
          # used by UI to sort pipelines for codebasebranches
          app.edp.epam.com/codebasebranch: $(tt.params.codebasebranch)
          app.edp.epam.com/codebase: $(tt.params.codebase)
          app.edp.epam.com/pipelinetype: build
        annotations:
          argocd.argoproj.io/compare-options: IgnoreExtraneous
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
        pipelineRef:
          name: github-$(tt.params.buildtool)-$(tt.params.framework)-$(tt.params.cbtype)-build-$(tt.params.versioning-type)
        params:
          - name: git-source-url
            value: $(tt.params.gitrepositoryurl)
          - name: git-source-revision
            value: $(tt.params.gitrevision)
          - name: CODEBASE_NAME
            value: $(tt.params.codebase)
          - name: CODEBASEBRANCH_NAME
            value: $(tt.params.codebasebranch)
          - name: TICKET_NAME_PATTERN
            value: $(tt.params.ticketNamePattern)
          - name: COMMIT_MESSAGE_PATTERN
            value: $(tt.params.commitMessagePattern)
          - name: COMMIT_MESSAGE
            value: $(tt.params.commitMessage)
          - name: JIRA_ISSUE_METADATA_PAYLOAD
            value: $(tt.params.jiraIssueMetadataPayload)
          - name: JIRA_SERVER
            value: $(tt.params.jiraServer)
        workspaces:
          - name: shared-workspace
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 5Gi
            subPath: codebase
          - name: ssh-creds
            secret:
              secretName: ci-github
---
# Source: edp-install/charts/edp-tekton/templates/triggers/github/tt-review.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: github-review-template
  labels:
    helm.sh/chart: edp-tekton-0.12.0
    app.kubernetes.io/version: "0.12.0"
    app.kubernetes.io/managed-by: Helm
spec:
  params:
    - name: gitrevision
    - name: gitrepositoryurl
    - name: gitrepositoryname
    - name: gitfullrepositoryname
    - name: gitsha
    - name: buildtool
      description: Build tool for codebase. Used to generate code-review pipeline name. Populated by edp interceptor
    - name: framework
      description: Framework for codebase. Used to generate code-review pipeline name. Populated by edp interceptor
    - name: cbtype
      description: Application or library type for codebase. Used to generate build pipeline name. Populated by edp interceptor
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: codebase
      description: Codebase name used in pipeline
    - name: codebasebranch
      description: Codebasebranch name used in pipeline
    - name: commitMessagePattern
      description: Commit message pattern to run commit-validate task
    - name: commitMessage
      description: Commit message
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: $(tt.params.codebasebranch)-review-
        labels:
          # used by UI to sort pipelines for codebasebranches
          app.edp.epam.com/codebasebranch: $(tt.params.codebasebranch)
          app.edp.epam.com/codebase: $(tt.params.codebase)
          app.edp.epam.com/pipelinetype: review
        annotations:
          argocd.argoproj.io/compare-options: IgnoreExtraneous
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
        pipelineRef:
          name: github-$(tt.params.buildtool)-$(tt.params.framework)-$(tt.params.cbtype)-review
        params:
          - name: git-source-url
            value: $(tt.params.gitrepositoryurl)
          - name: git-source-revision
            value: $(tt.params.gitrevision)
          - name: CODEBASE_NAME
            value: $(tt.params.codebase)
          - name: CODEBASEBRANCH_NAME
            value: $(tt.params.codebasebranch)
          - name: targetBranch
            value: $(tt.params.targetBranch)
          - name: changeNumber
            value: $(tt.params.changeNumber)
          - name: gitfullrepositoryname
            value: $(tt.params.gitfullrepositoryname)
          - name: gitsha
            value: $(tt.params.gitsha)
          - name: COMMIT_MESSAGE_PATTERN
            value: $(tt.params.commitMessagePattern)
          - name: COMMIT_MESSAGE
            value: $(tt.params.commitMessage)
        workspaces:
          - name: shared-workspace
            volumeClaimTemplate:
              spec:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 5Gi
            subPath: codebase
          - name: ssh-creds
            secret:
              secretName: ci-github
---
# Source: edp-install/charts/codebase-operator/templates/validation_webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: codebase-operator-2.23.0
    app.kubernetes.io/name: codebase-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.23.0"
    app.kubernetes.io/managed-by: Helm
  name: edp-codebase-operator-validating-webhook-configuration-default
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: edp-codebase-operator-webhook-service
        namespace: default
        path: /validate-v2-edp-epam-com-v1-codebase
    failurePolicy: Fail
    name: vcodebase.kb.io
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - default
    rules:
      - apiGroups:
          - v2.edp.epam.com
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - codebases
        scope: Namespaced
    sideEffects: None
