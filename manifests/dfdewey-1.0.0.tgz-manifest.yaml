---
# Source: dfdewey/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-dfdewey-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: dfdewey-postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: dfdewey/charts/opensearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "dfdewey-opensearch-master-pdb"
  labels:
    helm.sh/chart: opensearch-2.18.0
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.12.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dfdewey-opensearch-master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dfdewey-opensearch
      app.kubernetes.io/instance: my-release
---
# Source: dfdewey/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dfdewey-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
automountServiceAccountToken: false
---
# Source: dfdewey/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-dfdewey-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
type: Opaque
data:
  postgres-password: "Wm5iNnhqUGhmVQ=="
  password: "cGFzc3dvcmQ="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: dfdewey/charts/opensearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dfdewey-opensearch-master-config
  labels:
    helm.sh/chart: opensearch-2.18.0
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.12.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dfdewey-opensearch-master
data:
  opensearch.yml: |
    discovery:
      type: single-node
    plugins:
      security:
        disabled: true
---
# Source: dfdewey/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dfdewey-opensearch
  labels:
    helm.sh/chart: opensearch-2.18.0
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.12.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dfdewey-opensearch-master
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: dfdewey/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: dfdewey-opensearch-headless
  labels:
    helm.sh/chart: opensearch-2.18.0
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.12.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dfdewey-opensearch-master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like opensearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
  - name: metrics
    port: 9600
---
# Source: dfdewey/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dfdewey-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/component: primary
---
# Source: dfdewey/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dfdewey-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/component: primary
---
# Source: dfdewey/charts/opensearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dfdewey-opensearch-master
  labels:
    helm.sh/chart: opensearch-2.18.0
    app.kubernetes.io/name: dfdewey-opensearch
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.12.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dfdewey-opensearch-master
  annotations:
    majorVersion: "2"
spec:
  serviceName: dfdewey-opensearch-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: dfdewey-opensearch
      app.kubernetes.io/instance: my-release
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: dfdewey-opensearch-master
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "2Gi"
  template:
    metadata:
      name: "dfdewey-opensearch-master"
      labels:
        helm.sh/chart: opensearch-2.18.0
        app.kubernetes.io/name: dfdewey-opensearch
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.12.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: dfdewey-opensearch-master
      annotations:
        configchecksum: f081e6a6a550fbf4ee0d22d22bf11fa2b3eb5439f319a833fca1782cb3a38fe
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - my-release
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - dfdewey-opensearch
      terminationGracePeriodSeconds: 120
      volumes:
      - name: config
        configMap:
          name: dfdewey-opensearch-master-config
      - emptyDir: {}
        name: config-emptydir
      enableServiceLinks: true
      initContainers:
      - name: fsgroup-volume
        image: "busybox:latest"
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c']
        args:
          - 'chown -R 1000:1000 /usr/share/opensearch/data'
        securityContext:
          runAsUser: 0
        resources:
          {}
        volumeMounts:
          - name: "dfdewey-opensearch-master"
            mountPath: /usr/share/opensearch/data
      - name: sysctl
        image: "busybox:latest"
        imagePullPolicy: "IfNotPresent"
        command:
        - sh
        - -c
        - |
          set -xe
          DESIRED="262144"
          CURRENT=$(sysctl -n vm.max_map_count)
          if [ "$DESIRED" -gt "$CURRENT" ]; then
            sysctl -w vm.max_map_count=$DESIRED
          fi
        securityContext:
          runAsUser: 0
          privileged: true
        resources:
          {}
      - name: configfile
        image: "opensearchproject/opensearch:2.12.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          cp -r /tmp/configfolder/*  /tmp/config/
        resources:
          {}
        volumeMounts:
          - mountPath: /tmp/config/
            name: config-emptydir
          - name: config
            mountPath: /tmp/configfolder/opensearch.yml
            subPath: opensearch.yml
      containers:
      - name: "dfdewey-opensearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000

        image: "opensearchproject/opensearch:2.12.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 5
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        - name: metrics
          containerPort: 9600
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
        env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "dfdewey-opensearch-headless"
        - name: cluster.name
          value: "opensearch-cluster"
        - name: network.host
          value: "0.0.0.0"
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: node.roles
          value: "master,ingest,data,remote_cluster_client,"
        - name: discovery.type
          value: "single-node"
        - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
          value: KyfwJExU2!2MvU6j
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: "true"
        - name: DISABLE_SECURITY_PLUGIN
          value: "true"
        volumeMounts:
        - name: "dfdewey-opensearch-master"
          mountPath: /usr/share/opensearch/data
        - name: config-emptydir
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch.yml
---
# Source: dfdewey/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-dfdewey-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dfdewey-postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.3.1
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-dfdewey-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: dfdewey-postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-dfdewey-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: dfdewey-postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.3.1
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-dfdewey-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: dfdewey-postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "dfdewey"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-dfdewey-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-dfdewey-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "dfdewey"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "dfdewey" -d "dbname=dfdewey" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "dfdewey" -d "dbname=dfdewey" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
