---
# Source: gemini/charts/cubetran/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cubetran
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: gemini/charts/kubeviewer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubeviewer
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken:
---
# Source: gemini/charts/loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: gemini/charts/servicemirror/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: servicemirror-client
  labels:
    helm.sh/chart: servicemirror-0.2.15
    app.kubernetes.io/name: servicemirror-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.2.15"
    app.kubernetes.io/managed-by: Helm
---
# Source: gemini/charts/victoria-metrics-alert/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-victoria-metrics-alert
  namespace: default
  labels:
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
---
# Source: gemini/charts/victoria-metrics-cluster/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster
  namespace: default
---
# Source: gemini/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-gemini
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: gemini/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-gemini-dataprotection-exec-worker
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: gemini/charts/servicemirror/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: servicemirror-client
type: Opaque
stringData:
  tls.crt:     ""
  tls.key:     ""
  trusted-ca.crt:     ""
---
# Source: gemini/charts/loki/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    
    auth_enabled: false
    common:
      compactor_address: 'loki-backend'
      path_prefix: /var/loki
      replication_factor: 1
      storage:
        s3:
          bucketnames: chunks
          insecure: false
          s3forcepathstyle: false
    compactor:
      apply_retention_interval: 1h
      compaction_interval: 5m
      retention_delete_worker_count: 500
      retention_enabled: true
      shared_store: s3
    frontend:
      scheduler_address: query-scheduler-discovery.default.svc.cluster.local.:9095
    frontend_worker:
      scheduler_address: query-scheduler-discovery.default.svc.cluster.local.:9095
    index_gateway:
      mode: ring
    limits_config:
      ingestion_burst_size_mb: 100
      max_cache_freshness_per_query: 10m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      retention_period: 48h
      split_queries_by_interval: 2h
    memberlist:
      join_members:
      - loki-memberlist
    query_range:
      align_queries_with_step: true
    ruler:
      storage:
        s3:
          bucketnames: ruler
          insecure: false
          s3forcepathstyle: false
        type: s3
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
      - from: "2022-01-11"
        index:
          period: 24h
          prefix: loki_index_
        object_store: s3
        schema: v12
        store: boltdb-shipper
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
    storage_config:
      aws:
        bucketnames: kb-bucket
        s3: http://admin:minio123@minio.minio.svc.cluster.local:9000
        s3forcepathstyle: true
      boltdb_shipper:
        cache_ttl: 24h
        shared_store: s3
      hedging:
        at: 250ms
        max_per_second: 20
        up_to: 3
    tracing:
      enabled: false
---
# Source: gemini/charts/loki/templates/gateway/configmap-gateway.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
data:
  nginx.conf: |    
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;
    
    events {
      worker_connections  4096;  ## Default: 1024
    }
    
    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;
    
      client_max_body_size  4M;
    
      proxy_read_timeout    600; ## 10 minutes
      proxy_send_timeout    600;
      proxy_connect_timeout 600;
    
      proxy_http_version    1.1;
    
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
    
      sendfile     on;
      tcp_nopush   on;
      resolver kube-dns.kube-system.svc.cluster.local.;
      
    
      server {
        listen             8080;
        listen             [::]:8080;
    
        location = / {
          return 200 'OK';
          auth_basic off;
        }
    
    
        # Distributor
        location = /api/prom/push {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/push {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
        location = /distributor/ring {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
    
        # Ingester
        location = /flush {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /ingester/ {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
        location = /ingester {
          internal;        # to suppress 301
        }
    
        # Ring
        location = /ring {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
    
        # MemberListKV
        location = /memberlist {
          proxy_pass       http://loki-write.default.svc.cluster.local:3100$request_uri;
        }
    
    
        # Ruler
        location = /ruler/ring {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom/rules {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /api/prom/rules/ {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/rules {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location ^~ /loki/api/v1/rules/ {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/alerts {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /prometheus/api/v1/rules {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
    
        # Compactor
        location = /compactor/ring {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/delete {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1/cache/generation_numbers {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
    
        # IndexGateway
        location = /indexgateway/ring {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
    
        # QueryScheduler
        location = /scheduler/ring {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
    
        # Config
        location = /config {
          proxy_pass       http://loki-backend.default.svc.cluster.local:3100$request_uri;
        }
    
    
        # QueryFrontend, Querier
        location = /api/prom/tail {
          proxy_pass       http://loki-read.default.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location = /loki/api/v1/tail {
          proxy_pass       http://loki-read.default.svc.cluster.local:3100$request_uri;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
        location ^~ /api/prom/ {
          proxy_pass       http://loki-read.default.svc.cluster.local:3100$request_uri;
        }
        location = /api/prom {
          internal;        # to suppress 301
        }
        location ^~ /loki/api/v1/ {
          proxy_pass       http://loki-read.default.svc.cluster.local:3100$request_uri;
        }
        location = /loki/api/v1 {
          internal;        # to suppress 301
        }
      }
    }
---
# Source: gemini/charts/loki/templates/monitoring/dashboards/configmap-1.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-dashboards-1
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    grafana_dashboard: "1"
data:
  "loki-chunks.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(loki_ingester_memory_chunks{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"})","format":"time_series","intervalFactor":2,"legendFormat":"series","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Series","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(loki_ingester_memory_chunks{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}) / sum(loki_ingester_memory_streams{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"})","format":"time_series","intervalFactor":2,"legendFormat":"chunks","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Chunks per series","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Active Series / Chunks","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_ingester_chunk_utilization_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_ingester_chunk_utilization_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_ingester_chunk_utilization_sum{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) * 1 / sum(rate(loki_ingester_chunk_utilization_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Utilization","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"percentunit","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_ingester_chunk_age_seconds_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_ingester_chunk_age_seconds_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_ingester_chunk_age_seconds_sum{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) * 1e3 / sum(rate(loki_ingester_chunk_age_seconds_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Age","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Flush Stats","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":5,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_ingester_chunk_entries_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_ingester_chunk_entries_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)) * 1","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_ingester_chunk_entries_sum{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) * 1 / sum(rate(loki_ingester_chunk_entries_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Log Entries Per Chunk","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_chunk_store_index_entries_per_chunk_sum{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m])) / sum(rate(loki_chunk_store_index_entries_per_chunk_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m]))","format":"time_series","intervalFactor":2,"legendFormat":"Index Entries","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Index Entries Per Chunk","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Flush Stats","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":7,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"loki_ingester_flush_queue_length{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"} or cortex_ingester_flush_queue_length{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Queue Length","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{"1xx":"#EAB839","2xx":"#7EB26D","3xx":"#6ED0E0","4xx":"#EF843C","5xx":"#E24D42","error":"#E24D42","success":"#7EB26D"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":8,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (status) (\n  label_replace(label_replace(rate(loki_ingester_chunk_age_seconds_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n  \"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))\n","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","refId":"A","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Flush Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Flush Stats","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":9,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_ingester_chunks_flushed_total{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Chunks Flushed/Second","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":10,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (reason) (rate(loki_ingester_chunks_flushed_total{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) / ignoring(reason) group_left sum(rate(loki_ingester_chunks_flushed_total{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{reason}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Chunk Flush Reason","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":1,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":1,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Flush Stats","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"cards":{"cardPadding":null,"cardRound":null},"color":{"cardColor":"#b4ff00","colorScale":"sqrt","colorScheme":"interpolateSpectral","exponent":0.5,"mode":"spectrum"},"dataFormat":"tsbuckets","datasource":"$datasource","heatmap":{},"hideZeroBuckets":false,"highlightCards":true,"id":11,"legend":{"show":true},"span":12,"targets":[{"expr":"sum by (le) (rate(loki_ingester_chunk_utilization_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval]))","format":"heatmap","intervalFactor":2,"legendFormat":"{{le}}","refId":"A"}],"title":"Chunk Utilization","tooltip":{"show":true,"showHistogram":true},"type":"heatmap","xAxis":{"show":true},"xBucketNumber":null,"xBucketSize":null,"yAxis":{"decimals":0,"format":"percentunit","show":true,"splitFactor":null},"yBucketBound":"auto"}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Utilization","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"cards":{"cardPadding":null,"cardRound":null},"color":{"cardColor":"#b4ff00","colorScale":"sqrt","colorScheme":"interpolateSpectral","exponent":0.5,"mode":"spectrum"},"dataFormat":"tsbuckets","datasource":"$datasource","heatmap":{},"hideZeroBuckets":false,"highlightCards":true,"id":12,"legend":{"show":true},"span":12,"targets":[{"expr":"sum(rate(loki_ingester_chunk_size_bytes_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[$__rate_interval])) by (le)","format":"heatmap","intervalFactor":2,"legendFormat":"{{le}}","refId":"A"}],"title":"Chunk Size Bytes","tooltip":{"show":true,"showHistogram":true},"type":"heatmap","xAxis":{"show":true},"xBucketNumber":null,"xBucketSize":null,"yAxis":{"decimals":0,"format":"bytes","show":true,"splitFactor":null},"yBucketBound":"auto"}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Utilization","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":13,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":12,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_ingester_chunk_size_bytes_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[1m])) by (le))","format":"time_series","intervalFactor":2,"legendFormat":"p99","legendLink":null,"step":10},{"expr":"histogram_quantile(0.90, sum(rate(loki_ingester_chunk_size_bytes_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[1m])) by (le))","format":"time_series","intervalFactor":2,"legendFormat":"p90","legendLink":null,"step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_ingester_chunk_size_bytes_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[1m])) by (le))","format":"time_series","intervalFactor":2,"legendFormat":"p50","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Chunk Size Quantiles","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Utilization","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":14,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":12,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.5, sum(rate(loki_ingester_chunk_bounds_hours_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m])) by (le))","format":"time_series","intervalFactor":2,"legendFormat":"p50","legendLink":null,"step":10},{"expr":"histogram_quantile(0.99, sum(rate(loki_ingester_chunk_bounds_hours_bucket{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m])) by (le))","format":"time_series","intervalFactor":2,"legendFormat":"p99","legendLink":null,"step":10},{"expr":"sum(rate(loki_ingester_chunk_bounds_hours_sum{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m])) / sum(rate(loki_ingester_chunk_bounds_hours_count{cluster=\"$cluster\", job=~\"$namespace/(loki|enterprise-logs)-write\"}[5m]))","format":"time_series","intervalFactor":2,"legendFormat":"avg","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Chunk Duration hours (end-start)","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Duration","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Chunks","uid":"chunks","version":0}
  "loki-deletion.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"height":"100px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"format":"none","id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(loki_compactor_pending_delete_requests_count{cluster=~\"$cluster\", namespace=~\"$namespace\"})","format":"time_series","instant":true,"intervalFactor":2,"refId":"A"}],"thresholds":"70,80","timeFrom":null,"timeShift":null,"title":"Number of Pending Requests","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"singlestat","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"format":"dtdurations","id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"max(loki_compactor_oldest_pending_delete_request_age_seconds{cluster=~\"$cluster\", namespace=~\"$namespace\"})","format":"time_series","instant":true,"intervalFactor":2,"refId":"A"}],"thresholds":"70,80","timeFrom":null,"timeShift":null,"title":"Oldest Pending Request Age","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"singlestat","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":false,"title":"Headlines","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(increase(loki_compactor_delete_requests_received_total{cluster=~\"$cluster\", namespace=~\"$namespace\"}[1d]))","format":"time_series","intervalFactor":2,"legendFormat":"received","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Delete Requests Received / Day","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(increase(loki_compactor_delete_requests_processed_total{cluster=~\"$cluster\", namespace=~\"$namespace\"}[1d]))","format":"time_series","intervalFactor":2,"legendFormat":"processed","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Delete Requests Processed / Day","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Churn","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":5,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":12,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(increase(loki_compactor_load_pending_requests_attempts_total{status=\"fail\", cluster=~\"$cluster\", namespace=~\"$namespace\"}[1h]))","format":"time_series","intervalFactor":2,"legendFormat":"failures","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Failures in Loading Delete Requests / Hour","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Failures","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":12,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_compactor_deleted_lines{cluster=~\"$cluster\",job=~\"$namespace/(loki|enterprise-logs)-read\"}[$__rate_interval])) by (user)","format":"time_series","intervalFactor":2,"legendFormat":"{{user}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Lines Deleted / Sec","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Deleted lines","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Deletion","uid":"deletion","version":0}
  "loki-logs.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"id":8,"iteration":1583185057230,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":0,"y":0},"hiddenSeries":false,"id":35,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(go_goroutines{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\"})","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"goroutines","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":3,"y":0},"hiddenSeries":false,"id":41,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(go_gc_duration_seconds{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\"}) by (quantile)","legendFormat":"{{quantile}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"gc duration","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":6,"y":0},"hiddenSeries":false,"id":36,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(container_cpu_usage_seconds_total{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\", container=~\"$container\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"cpu","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":9,"y":0},"hiddenSeries":false,"id":40,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(container_memory_working_set_bytes{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\", container=~\"$container\"})","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"working set","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":12,"y":0},"hiddenSeries":false,"id":38,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(container_network_transmit_bytes_total{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"tx","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":15,"y":0},"hiddenSeries":false,"id":39,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(container_network_receive_bytes_total{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"rx","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"decbytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":18,"y":0},"hiddenSeries":false,"id":37,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"increase(kube_pod_container_status_last_terminated_reason{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\", container=~\"$container\"}[30m]) \u003e 0","legendFormat":"{{reason}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"restarts","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":3,"x":21,"y":0},"hiddenSeries":false,"id":42,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(promtail_custom_bad_words_total{cluster=\"$cluster\", exported_namespace=\"$namespace\", exported_pod=~\"$deployment.*\", exported_pod=~\"$pod\", container=~\"$container\"}[5m])) by (level)","legendFormat":"{{level}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"bad words","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$logs","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":24,"x":0,"y":4},"hiddenSeries":false,"id":31,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"warn","color":"#FF780A"},{"alias":"error","color":"#E02F44"},{"alias":"info","color":"#56A64B"},{"alias":"debug","color":"#3274D9"}],"spaceLength":10,"stack":true,"steppedLine":false,"targets":[{"expr":"sum(rate({cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\", container=~\"$container\" } |logfmt| level=~\"$level\" |= \"$filter\" [5m])) by (level)","intervalFactor":3,"legendFormat":"{{level}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Log Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"timeseries","xaxis":{"buckets":null,"mode":"time","name":null,"show":false,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}],"yaxis":{"align":false,"alignLevel":null}},{"datasource":"$logs","gridPos":{"h":19,"w":24,"x":0,"y":6},"id":29,"maxDataPoints":"","options":{"showLabels":false,"showTime":true,"sortOrder":"Descending","wrapLogMessage":true},"targets":[{"expr":"{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\", pod=~\"$pod\", container=~\"$container\"} | logfmt | level=~\"$level\" |= \"$filter\"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Logs","type":"logs"}],"refresh":"10s","rows":[],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"hide":0,"label":null,"name":"logs","options":[],"query":"loki","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{},"datasource":"$datasource","hide":0,"includeAll":false,"label":null,"multi":false,"name":"deployment","options":[],"query":"label_values(kube_deployment_created{cluster=\"$cluster\", namespace=\"$namespace\"}, deployment)","refresh":0,"regex":"","sort":1,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{},"datasource":"$datasource","hide":0,"includeAll":false,"label":null,"multi":false,"name":"pod","options":[],"query":"label_values(kube_pod_container_info{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$deployment.*\"}, pod)","refresh":0,"regex":"","sort":1,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{},"datasource":"$datasource","hide":0,"includeAll":false,"label":null,"multi":false,"name":"container","options":[],"query":"label_values(kube_pod_container_info{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"$pod\", pod=~\"$deployment.*\"}, container)","refresh":0,"regex":"","sort":1,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"selected":true,"text":"","value":""},"hide":0,"includeAll":false,"label":"","multi":true,"name":"level","options":[{"selected":false,"text":"debug","value":"debug"},{"selected":false,"text":"info","value":"info"},{"selected":false,"text":"warn","value":"warn"},{"selected":false,"text":"error","value":"error"}],"query":"debug,info,warn,error","refresh":0,"type":"custom"},{"current":{"selected":false,"text":"","value":""},"label":"LogQL Filter","name":"filter","query":"","type":"textbox"}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Logs","uid":"logs","version":0}
  "loki-mixin-recording-rules.json": |
    {"annotations":{"list":[{"builtIn":1,"datasource":"-- Grafana --","enable":true,"hide":true,"iconColor":"rgba(0, 211, 255, 1)","name":"Annotations \u0026 Alerts","target":{"limit":100,"matchAny":false,"tags":[],"type":"dashboard"},"type":"dashboard"},{"datasource":"${datasource}","enable":false,"expr":"sum by (tenant) (changes(loki_ruler_wal_prometheus_tsdb_wal_truncations_total{tenant=~\"${tenant}\"}[$__rate_interval]))","iconColor":"red","name":"WAL Truncations","target":{"queryType":"Azure Monitor","refId":"Anno"},"titleFormat":"{{tenant}}"}]},"editable":true,"fiscalYearStartMonth":0,"gnetId":null,"graphTooltip":0,"iteration":1635347545534,"links":[],"liveNow":false,"panels":[{"datasource":"${datasource}","fieldConfig":{"defaults":{"color":{"mode":"thresholds"},"mappings":[],"noValue":"0","thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":1}]}},"overrides":[]},"gridPos":{"h":10,"w":2,"x":0,"y":0},"id":2,"options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"textMode":"auto"},"pluginVersion":"8.3.0-38205pre","targets":[{"datasource":"${datasource}","exemplar":false,"expr":"sum(loki_ruler_wal_appender_ready) by (pod, tenant) == 0","instant":true,"interval":"","legendFormat":"","refId":"A"}],"title":"Appenders Not Ready","type":"stat"},{"datasource":"${datasource}","description":"","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":10,"w":11,"x":2,"y":0},"id":4,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"sum(rate(loki_ruler_wal_samples_appended_total{tenant=~\"${tenant}\"}[$__rate_interval])) by (tenant) \u003e 0","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"Samples Appended to WAL per Second","type":"timeseries"},{"datasource":"${datasource}","description":"Series are unique combinations of labels","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":10,"w":11,"x":13,"y":0},"id":5,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"sum(rate(loki_ruler_wal_storage_created_series_total{tenant=~\"${tenant}\"}[$__rate_interval])) by (tenant) \u003e 0","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"Series Created per Second","type":"timeseries"},{"datasource":"${datasource}","description":"Difference between highest timestamp appended to WAL and highest timestamp successfully written to remote storage","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":10,"w":12,"x":0,"y":10},"id":6,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"loki_ruler_wal_prometheus_remote_storage_highest_timestamp_in_seconds{tenant=~\"${tenant}\"}\n- on (tenant)\n  (\n    loki_ruler_wal_prometheus_remote_storage_queue_highest_sent_timestamp_seconds{tenant=~\"${tenant}\"}\n    or vector(0)\n  )","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"Write Behind","type":"timeseries"},{"datasource":"${datasource}","description":"","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":10,"w":12,"x":12,"y":10},"id":7,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"sum(rate(loki_ruler_wal_prometheus_remote_storage_samples_total{tenant=~\"${tenant}\"}[$__rate_interval])) by (tenant) \u003e 0","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"Samples Sent per Second","type":"timeseries"},{"datasource":"${datasource}","description":"\n","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]},"unit":"bytes"},"overrides":[]},"gridPos":{"h":10,"w":12,"x":0,"y":20},"id":8,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"sum by (tenant) (loki_ruler_wal_disk_size{tenant=~\"${tenant}\"})","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"WAL Disk Size","type":"timeseries"},{"datasource":"${datasource}","description":"Some number of pending samples is expected, but if remote-write is failing this value will remain high","fieldConfig":{"defaults":{"color":{"mode":"palette-classic"},"custom":{"axisLabel":"","axisPlacement":"auto","barAlignment":0,"drawStyle":"line","fillOpacity":0,"gradientMode":"none","hideFrom":{"legend":false,"tooltip":false,"viz":false},"lineInterpolation":"linear","lineWidth":1,"pointSize":5,"scaleDistribution":{"type":"linear"},"showPoints":"auto","spanNulls":false,"stacking":{"group":"A","mode":"none"},"thresholdsStyle":{"mode":"off"}},"mappings":[],"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null},{"color":"red","value":80}]}},"overrides":[]},"gridPos":{"h":10,"w":12,"x":12,"y":20},"id":9,"options":{"legend":{"calcs":[],"displayMode":"list","placement":"bottom"},"tooltip":{"mode":"single"}},"targets":[{"datasource":"${datasource}","exemplar":true,"expr":"max(loki_ruler_wal_prometheus_remote_storage_samples_pending{tenant=~\"${tenant}\"}) by (tenant,pod) \u003e 0","interval":"","legendFormat":"{{tenant}}","refId":"A"}],"title":"Pending Samples","type":"timeseries"}],"schemaVersion":31,"style":"dark","tags":[],"templating":{"list":[{"description":null,"error":null,"hide":0,"includeAll":false,"label":"Datasource","multi":false,"name":"datasource","options":[],"query":"prometheus","queryValue":"","refresh":1,"regex":"","skipUrlSync":false,"type":"datasource"},{"allValue":null,"datasource":"${datasource}","definition":"label_values(loki_ruler_wal_samples_appended_total, tenant)","description":null,"error":null,"hide":0,"includeAll":true,"label":"Tenant","multi":true,"name":"tenant","options":[],"query":{"query":"label_values(loki_ruler_wal_samples_appended_total, tenant)","refId":"StandardVariableQuery"},"refresh":2,"regex":"","skipUrlSync":false,"sort":0,"type":"query"}]},"time":{"from":"now-6h","to":"now"},"timepicker":{},"timezone":"","title":"Recording Rules","uid":"2xKA_ZK7k","version":9,"weekStart":""}
  "loki-operational.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"id":68,"iteration":1588704280892,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"panels":[{"collapsed":false,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":0},"id":17,"panels":[],"targets":[],"title":"Main","type":"row"},{"aliasColors":{"5xx":"red"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":4,"x":0,"y":1},"hiddenSeries":false,"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by (status) (\nlabel_replace(\n  label_replace(\n        rate(loki_request_duration_seconds_count{cluster=\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\"}[5m]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n\"status\", \"${1}\", \"status_code\", \"([a-z]+)\")\n)","legendFormat":"{{status}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Queries/Second","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":10,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{"5xx":"red"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":4,"x":4,"y":1},"hiddenSeries":false,"id":7,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by (status) (\nlabel_replace(\n  label_replace(\n          rate(loki_request_duration_seconds_count{cluster=\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"api_prom_push|loki_api_v1_push\"}[5m]),\n   \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n\"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))","legendFormat":"{{status}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Pushes/Second","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":10,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":4,"x":12,"y":1},"hiddenSeries":false,"id":2,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"topk(10, sum(rate(loki_distributor_lines_received_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (tenant))","legendFormat":"{{tenant}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Lines Per Tenant (top 10)","tooltip":{"shared":false,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":4,"x":16,"y":1},"hiddenSeries":false,"id":4,"legend":{"avg":false,"current":false,"hideEmpty":true,"hideZero":true,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"topk(10, sum(rate(loki_distributor_bytes_received_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (tenant)) / 1024 / 1024","legendFormat":"{{tenant}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"MBs Per Tenant (Top 10)","tooltip":{"shared":false,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":4,"x":20,"y":1},"hiddenSeries":false,"id":24,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"increase(kube_pod_container_status_restarts_total{cluster=\"$cluster\", namespace=\"$namespace\"}[10m]) \u003e 0","hide":false,"interval":"","legendFormat":"{{container}}-{{pod}}","refId":"B"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Container Restarts","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":10,"w":12,"x":0,"y":6},"hiddenSeries":false,"id":9,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"api_prom_push|loki_api_v1_push\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".99","refId":"A"},{"expr":"histogram_quantile(0.75, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"api_prom_push|loki_api_v1_push\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".9","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"api_prom_push|loki_api_v1_push\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".5","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Push Latency","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":12,"y":6},"hiddenSeries":false,"id":12,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le) (job:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".99","refId":"A"},{"expr":"histogram_quantile(0.9, sum by (le) (job:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".9","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le) (job:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".5","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Distributor Latency","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":0,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":18,"y":6},"hiddenSeries":false,"id":71,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", status_code!~\"5[0-9]{2}\"}[5m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\"}[5m])) by (route)","interval":"","legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Distributor Success Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"decimals":null,"format":"percentunit","label":"","logBase":1,"max":"1","min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":12,"y":11},"hiddenSeries":false,"id":13,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=\"/logproto.Pusher/Push\", cluster=~\"$cluster\"})) * 1e3","legendFormat":".99","refId":"A"},{"expr":"histogram_quantile(0.9, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=\"/logproto.Pusher/Push\", cluster=~\"$cluster\"})) * 1e3","hide":false,"legendFormat":".9","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=\"/logproto.Pusher/Push\", cluster=~\"$cluster\"})) * 1e3","hide":false,"legendFormat":".5","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Ingester Latency Write","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":0,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":18,"y":11},"hiddenSeries":false,"id":72,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", status_code!~\"5[0-9]{2}\", route=\"/logproto.Pusher/Push\"}[5m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", route=\"/logproto.Pusher/Push\"}[5m])) by (route)","interval":"","legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Ingester Success Rate Write","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"decimals":null,"format":"percentunit","label":"","logBase":1,"max":"1","min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":10,"w":12,"x":0,"y":16},"hiddenSeries":false,"id":10,"legend":{"alignAsTable":true,"avg":false,"current":false,"hideEmpty":true,"hideZero":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"}))","legendFormat":"{{route}}-.99","refId":"A"},{"expr":"histogram_quantile(0.9, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"}))","legendFormat":"{{route}}-.9","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"}))","legendFormat":"{{route}}-.5","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Query Latency","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":12,"y":16},"hiddenSeries":false,"id":14,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"})) * 1e3","legendFormat":".99-{{route}}","refId":"A"},{"expr":"histogram_quantile(0.9, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"})) * 1e3","legendFormat":".9-{{route}}","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"api_prom_query|api_prom_labels|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_label|loki_api_v1_label_name_values\", cluster=\"$cluster\"})) * 1e3","legendFormat":".5-{{route}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Querier Latency","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":0,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":18,"y":16},"hiddenSeries":false,"id":73,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\", status_code!~\"5[0-9]{2}\"}[5m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\"}[5m])) by (route)","interval":"","legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Querier Success Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"decimals":null,"format":"percentunit","label":"","logBase":1,"max":"1","min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","description":"","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":1,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":12,"y":21},"hiddenSeries":false,"id":15,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"/logproto.Querier/Query|/logproto.Querier/Label|/logproto.Querier/Series|/logproto.Querier/QuerySample|/logproto.Querier/GetChunkIDs\", cluster=\"$cluster\"})) * 1e3","legendFormat":".99-{{route}}","refId":"A"},{"expr":"histogram_quantile(0.9, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"/logproto.Querier/Query|/logproto.Querier/Label|/logproto.Querier/Series|/logproto.Querier/QuerySample|/logproto.Querier/GetChunkIDs\", cluster=\"$cluster\"})) * 1e3","legendFormat":".9-{{route}}","refId":"B"},{"expr":"histogram_quantile(0.5, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"/logproto.Querier/Query|/logproto.Querier/Label|/logproto.Querier/Series|/logproto.Querier/QuerySample|/logproto.Querier/GetChunkIDs\", cluster=\"$cluster\"})) * 1e3","legendFormat":".5-{{route}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Ingester Latency Read","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"custom":{}},"overrides":[]},"fill":0,"fillGradient":0,"gridPos":{"h":5,"w":6,"x":18,"y":21},"hiddenSeries":false,"id":74,"legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", status_code!~\"5[0-9]{2}\", route=~\"/logproto.Querier/Query|/logproto.Querier/Label|/logproto.Querier/Series|/logproto.Querier/QuerySample|/logproto.Querier/GetChunkIDs\"}[5m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"/logproto.Querier/Query|/logproto.Querier/Label|/logproto.Querier/Series|/logproto.Querier/QuerySample|/logproto.Querier/GetChunkIDs\"}[5m])) by (route)","interval":"","legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Ingester Success Rate Read","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"decimals":null,"format":"percentunit","label":"","logBase":1,"max":"1","min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":26},"id":110,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":0,"y":27},"hiddenSeries":false,"id":112,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"topk(10,sum by (tenant, reason) (rate(loki_discarded_samples_total{cluster=\"$cluster\",namespace=\"$namespace\"}[1m])))","interval":"","legendFormat":"{{ tenant }} - {{ reason }}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Discarded Lines","tooltip":{"shared":false,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"columns":[],"datasource":"$datasource","fontSize":"100%","gridPos":{"h":8,"w":12,"x":12,"y":27},"id":113,"pageSize":null,"panels":[],"showHeader":true,"sort":{"col":3,"desc":true},"styles":[{"alias":"Time","align":"auto","dateFormat":"YYYY-MM-DD HH:mm:ss","pattern":"Time","type":"hidden"},{"alias":"","align":"auto","colorMode":null,"colors":["rgba(245, 54, 54, 0.9)","rgba(237, 129, 40, 0.89)","rgba(50, 172, 45, 0.97)"],"dateFormat":"YYYY-MM-DD HH:mm:ss","decimals":2,"mappingType":1,"pattern":"tenant","thresholds":[],"type":"string","unit":"short"},{"alias":"","align":"auto","colorMode":null,"colors":["rgba(245, 54, 54, 0.9)","rgba(237, 129, 40, 0.89)","rgba(50, 172, 45, 0.97)"],"dateFormat":"YYYY-MM-DD HH:mm:ss","decimals":2,"mappingType":1,"pattern":"reason","thresholds":[],"type":"number","unit":"short"},{"alias":"","align":"right","colorMode":null,"colors":["rgba(245, 54, 54, 0.9)","rgba(237, 129, 40, 0.89)","rgba(50, 172, 45, 0.97)"],"decimals":2,"pattern":"/.*/","thresholds":[],"type":"number","unit":"short"}],"targets":[{"expr":"topk(10, sum by (tenant, reason) (sum_over_time(increase(loki_discarded_samples_total{cluster=\"$cluster\",namespace=\"$namespace\"}[1m])[$__range:1m])))","format":"table","instant":true,"interval":"","legendFormat":"{{ tenant }} - {{ reason }}","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Discarded Lines Per Interval","transform":"table","type":"table-old"}],"targets":[],"title":"Limits","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":27},"id":23,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":28},"hiddenSeries":false,"id":26,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":true,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"(loki|enterprise-logs)-write.*\"}","intervalFactor":3,"legendFormat":"{{pod}}-{{container}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"CPU Usage","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":6,"y":28},"hiddenSeries":false,"id":27,"legend":{"avg":false,"current":false,"hideEmpty":false,"hideZero":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":true,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"go_memstats_heap_inuse_bytes{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"(loki|enterprise-logs)-write.*\"}","instant":false,"intervalFactor":3,"legendFormat":"{{pod}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Memory Usage","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":true,"dashLength":10,"dashes":false,"datasource":"$logs","fill":1,"fillGradient":0,"gridPos":{"h":4,"w":12,"x":12,"y":28},"hiddenSeries":false,"id":31,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"{}","color":"#C4162A"}],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate({cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\"} | logfmt | level=\"error\"[1m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Error Log Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":false,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}],"yaxis":{"align":false,"alignLevel":null}},{"datasource":"$logs","gridPos":{"h":18,"w":12,"x":12,"y":32},"id":29,"options":{"showLabels":false,"showTime":false,"sortOrder":"Descending","wrapLogMessage":true},"panels":[],"targets":[{"expr":"{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\"} | logfmt | level=\"error\"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Logs","type":"logs"},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":0,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":35},"hiddenSeries":false,"id":33,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\", status_code!~\"5[0-9]{2}\"}[5m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-write\"}[5m])) by (route)","interval":"","intervalFactor":1,"legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Success Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":6,"y":35},"hiddenSeries":false,"id":32,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_distributor_ingester_append_failures_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (ingester)","intervalFactor":1,"legendFormat":"{{ingester}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Append Failures By Ingester","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":42},"hiddenSeries":false,"id":34,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_distributor_bytes_received_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (pod)","intervalFactor":1,"legendFormat":"{{pod}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Bytes Received/Second","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":6,"y":42},"hiddenSeries":false,"id":35,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_distributor_lines_received_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (pod)","intervalFactor":1,"legendFormat":"{{pod}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Lines Received/Second","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Write Path","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":29},"id":104,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":0,"y":30},"hiddenSeries":false,"id":106,"legend":{"avg":false,"current":false,"hideEmpty":true,"hideZero":true,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"topk(10,sum by (tenant) (loki_ingester_memory_streams{cluster=\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\"}))","interval":"","legendFormat":"{{ tenant }}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Active Streams","tooltip":{"shared":false,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":12,"y":30},"hiddenSeries":false,"id":108,"legend":{"avg":false,"current":false,"hideEmpty":true,"hideZero":true,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"topk(10, sum by (tenant) (rate(loki_ingester_streams_created_total{cluster=\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m]) \u003e 0))","interval":"","legendFormat":"{{ tenant }}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Streams Created/Sec","tooltip":{"shared":false,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Streams","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":30},"id":94,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":12,"x":0,"y":31},"hiddenSeries":false,"id":102,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"De-Dupe Ratio","yaxis":2}],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_ingester_chunks_flushed_total{cluster=\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m]))","interval":"","legendFormat":"Chunks","refId":"A"},{"expr":"sum(increase(loki_chunk_store_deduped_chunks_total{cluster=\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m]))/sum(increase(loki_ingester_chunks_flushed_total{cluster=\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m])) \u003c 1","interval":"","legendFormat":"De-Dupe Ratio","refId":"B"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Chunks Flushed/Sec","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"cards":{"cardPadding":null,"cardRound":null},"color":{"cardColor":"#b4ff00","colorScale":"sqrt","colorScheme":"interpolateSpectral","exponent":0.5,"mode":"spectrum"},"dataFormat":"tsbuckets","datasource":"$datasource","gridPos":{"h":8,"w":12,"x":12,"y":31},"heatmap":{},"hideZeroBuckets":false,"highlightCards":true,"id":100,"legend":{"show":true},"panels":[],"reverseYBuckets":false,"targets":[{"expr":"sum(rate(loki_ingester_chunk_size_bytes_bucket{cluster=\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m])) by (le)","format":"heatmap","instant":false,"interval":"","legendFormat":"{{ le }}","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Chunk Size Bytes","tooltip":{"show":true,"showHistogram":false},"type":"heatmap","xAxis":{"show":true},"xBucketNumber":null,"xBucketSize":null,"yAxis":{"decimals":0,"format":"bytes","logBase":1,"max":null,"min":null,"show":true,"splitFactor":null},"yBucketBound":"auto","yBucketNumber":null,"yBucketSize":null},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":7,"fillGradient":0,"gridPos":{"h":9,"w":12,"x":0,"y":39},"hiddenSeries":false,"id":96,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by(reason) (rate(loki_ingester_chunks_flushed_total{cluster=~\"$cluster\",job=~\"$namespace/ingester\", namespace=~\"$namespace\"}[$__rate_interval])) / ignoring(reason) group_left sum(rate(loki_ingester_chunks_flushed_total{cluster=~\"$cluster\",job=~\"$namespace/ingester\", namespace=~\"$namespace\"}[$__rate_interval]))","interval":"","legendFormat":"{{ reason }}"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Chunk Flush Reason %","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"percentunit","label":null,"logBase":1,"max":"1","min":"0","show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"cards":{"cardPadding":null,"cardRound":null},"color":{"cardColor":"#b4ff00","colorScale":"sqrt","colorScheme":"interpolateSpectral","exponent":0.5,"max":null,"min":null,"mode":"spectrum"},"dataFormat":"tsbuckets","datasource":"$datasource","gridPos":{"h":9,"w":12,"x":12,"y":39},"heatmap":{},"hideZeroBuckets":true,"highlightCards":true,"id":98,"legend":{"show":true},"panels":[],"reverseYBuckets":false,"targets":[{"expr":"sum by (le) (rate(loki_ingester_chunk_utilization_bucket{cluster=\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"}[1m]))","format":"heatmap","instant":false,"interval":"","legendFormat":"{{ le }}","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Chunk Utilization","tooltip":{"show":true,"showHistogram":false},"type":"heatmap","xAxis":{"show":true},"xBucketNumber":null,"xBucketSize":null,"yAxis":{"decimals":0,"format":"percentunit","logBase":1,"max":null,"min":null,"show":true,"splitFactor":null},"yBucketBound":"auto","yBucketNumber":null,"yBucketSize":null}],"targets":[],"title":"Chunks","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":31},"id":64,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":32},"hiddenSeries":false,"id":68,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":true,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"(loki|enterprise-logs)-read.*\"}","intervalFactor":3,"legendFormat":"{{pod}}-{{container}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"CPU Usage","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":39},"hiddenSeries":false,"id":69,"legend":{"avg":false,"current":false,"hideEmpty":false,"hideZero":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":true,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"go_memstats_heap_inuse_bytes{cluster=\"$cluster\", namespace=\"$namespace\", pod=~\"(loki|enterprise-logs)-read.*\"}","instant":false,"intervalFactor":3,"legendFormat":"{{pod}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Memory Usage","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":true,"dashLength":10,"dashes":false,"datasource":"$logs","fill":1,"fillGradient":0,"gridPos":{"h":3,"w":18,"x":12,"y":32},"hiddenSeries":false,"id":65,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":false,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"{}","color":"#F2495C"}],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate({cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\"} | logfmt |  level=\"error\"[1m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Error Log Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":false,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}],"yaxis":{"align":false,"alignLevel":null}},{"datasource":"$logs","gridPos":{"h":18,"w":18,"x":12,"y":35},"id":66,"options":{"showLabels":false,"showTime":false,"sortOrder":"Descending","wrapLogMessage":true},"panels":[],"targets":[{"expr":"{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\"} | logfmt | level=\"error\"","refId":"A"}],"timeFrom":null,"timeShift":null,"title":"Logs","type":"logs"},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":0,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":46},"hiddenSeries":false,"id":70,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\", status_code!~\"5[0-9]{2}\"}[1m])) by (route)\n/\nsum(rate(loki_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", job=~\"($namespace)/(loki|enterprise-logs)-read\"}[1m])) by (route)","interval":"","intervalFactor":1,"legendFormat":"{{route}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Success Rate","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Read Path","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":32},"id":52,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":30},"hiddenSeries":false,"id":53,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_memcache_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (method, name, le, container))","intervalFactor":1,"legendFormat":"{{container}}: .99-{{method}}-{{name}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_memcache_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (method, name, le, container))","hide":false,"legendFormat":"{{container}}: .9-{{method}}-{{name}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_memcache_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (method, name, le, container))","hide":false,"legendFormat":"{{container}}: .5-{{method}}-{{name}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":38},"hiddenSeries":false,"id":54,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_memcache_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, method, name, container)","intervalFactor":1,"legendFormat":"{{container}}: {{status_code}}-{{method}}-{{name}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Memcached","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":33},"id":57,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":31},"hiddenSeries":false,"id":55,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_consul_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_consul_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_consul_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":39},"hiddenSeries":false,"id":58,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_consul_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, status_code, method)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Consul","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":34},"id":43,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":9},"hiddenSeries":false,"id":41,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/MutateRows\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".9","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/MutateRows\"}[5m])) by (operation, le))","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/MutateRows\"}[5m])) by (operation, le))","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"MutateRows Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":6,"y":9},"hiddenSeries":false,"id":46,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/ReadRows\"}[5m])) by (operation, le))","interval":"","intervalFactor":1,"legendFormat":"99%","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/ReadRows\"}[5m])) by (operation, le))","interval":"","legendFormat":"90%","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/ReadRows\"}[5m])) by (operation, le))","interval":"","legendFormat":"50%","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"ReadRows Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":12,"y":9},"hiddenSeries":false,"id":44,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/GetTable\"}[5m])) by (operation, le))","interval":"","intervalFactor":1,"legendFormat":"99%","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/GetTable\"}[5m])) by (operation, le))","interval":"","legendFormat":"90%","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/GetTable\"}[5m])) by (operation, le))","interval":"","legendFormat":"50%","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"GetTable Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":18,"y":9},"hiddenSeries":false,"id":45,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/ListTables\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".9","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/ListTables\"}[5m])) by (operation, le))","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_bigtable_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/ListTables\"}[5m])) by (operation, le))","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"ListTables Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":0,"y":16},"hiddenSeries":false,"id":47,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_bigtable_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/MutateRows\"}[5m])) by (status_code)","intervalFactor":1,"legendFormat":"{{status_code}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"MutateRows Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":6,"y":16},"hiddenSeries":false,"id":50,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_bigtable_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.v2.Bigtable/ReadRows\"}[5m])) by (status_code)","intervalFactor":1,"legendFormat":"{{status_code}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"ReadRows Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":12,"y":16},"hiddenSeries":false,"id":48,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_bigtable_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/GetTable\"}[5m])) by (status_code)","intervalFactor":1,"legendFormat":"{{status_code}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"GetTable Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":7,"w":6,"x":18,"y":16},"hiddenSeries":false,"id":49,"interval":"","legend":{"avg":false,"current":false,"max":false,"min":false,"show":false,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_bigtable_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\", operation=\"/google.bigtable.admin.v2.BigtableTableAdmin/ListTables\"}[5m])) by (status_code)","intervalFactor":1,"legendFormat":"{{status_code}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"ListTables Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Big Table","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":35},"id":60,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":33},"hiddenSeries":false,"id":61,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_gcs_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_gcs_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_gcs_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":41},"hiddenSeries":false,"id":62,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_gcs_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, operation)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"GCS","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":36},"id":76,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":null,"fill":1,"fillGradient":0,"gridPos":{"h":6,"w":6,"x":0,"y":9},"id":82,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(cortex_dynamo_failures_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Failure Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":null,"fill":1,"fillGradient":0,"gridPos":{"h":6,"w":6,"x":6,"y":9},"id":83,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(cortex_dynamo_consumed_capacity_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Consumed Capacity Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":null,"fill":1,"fillGradient":0,"gridPos":{"h":6,"w":6,"x":12,"y":9},"id":84,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(cortex_dynamo_throttled_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Throttled Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":null,"fill":1,"fillGradient":0,"gridPos":{"h":6,"w":6,"x":18,"y":9},"id":85,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(cortex_dynamo_dropped_requests_total{cluster=\"$cluster\", namespace=\"$namespace\"}[5m]))","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Dropped Rate","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":null,"fill":1,"fillGradient":0,"gridPos":{"h":6,"w":6,"x":0,"y":15},"id":86,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":2,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(cortex_dynamo_query_pages_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])))","legendFormat":".99","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(cortex_dynamo_query_pages_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])))","legendFormat":".9","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(cortex_dynamo_query_pages_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])))","legendFormat":".5","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Query Pages","tooltip":{"shared":true,"sort":0,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":6,"w":9,"x":6,"y":15},"id":87,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(cortex_dynamo_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(cortex_dynamo_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(cortex_dynamo_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":6,"w":9,"x":15,"y":15},"id":88,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(cortex_dynamo_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, operation)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Dynamo","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":37},"id":78,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":10},"id":79,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_s3_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_s3_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_s3_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":18},"id":80,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_s3_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, operation)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"S3","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":37},"id":78,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":10},"id":79,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_azure_blob_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_azure_blob_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_azure_blob_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":18},"id":80,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_azure_blob_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, operation)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"Azure Blob","type":"row"},{"collapsed":true,"datasource":null,"gridPos":{"h":1,"w":24,"x":0,"y":37},"id":114,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":10},"id":115,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(.99, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","intervalFactor":1,"legendFormat":".99-{{operation}}","refId":"A"},{"expr":"histogram_quantile(.9, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".9-{{operation}}","refId":"B"},{"expr":"histogram_quantile(.5, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (operation, le))","hide":false,"legendFormat":".5-{{operation}}","refId":"C"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Latency By Operation","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"fillGradient":0,"gridPos":{"h":8,"w":24,"x":0,"y":18},"id":116,"interval":"","legend":{"alignAsTable":true,"avg":false,"current":false,"max":false,"min":false,"rightSide":true,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"nullPointMode":"null","options":{"dataLinks":[]},"panels":[],"percentage":false,"pointradius":1,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(rate(loki_boltdb_shipper_request_duration_seconds_count{cluster=\"$cluster\", namespace=\"$namespace\"}[5m])) by (status_code, operation)","intervalFactor":1,"legendFormat":"{{status_code}}-{{operation}}","refId":"A"}],"thresholds":[],"timeFrom":null,"timeRegions":[],"timeShift":null,"title":"Status By Method","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":true}],"yaxis":{"align":false,"alignLevel":null}}],"targets":[],"title":"BoltDB Shipper","type":"row"}],"refresh":"10s","rows":[],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"hide":0,"label":null,"name":"logs","options":[],"query":"loki","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Operational","uid":"operational","version":0}
---
# Source: gemini/charts/loki/templates/monitoring/dashboards/configmap-2.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-dashboards-2
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    grafana_dashboard: "1"
data:
  "loki-reads-resources.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"collapsed":false,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_cpu_quota{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"} / container_spec_cpu_period{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"CPU","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(pod) (container_memory_working_set_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_memory_limit_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"} \u003e 0)","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (workingset)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-read\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (go heap inuse)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"gridPos":{},"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by(instance, pod, device) (rate(node_disk_written_bytes_total[$__rate_interval])) + ignoring(pod) group_right() (label_replace(count by(instance, pod, device) (container_fs_writes_bytes_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\", device!~\".*sda.*\"}), \"device\", \"$1\", \"device\", \"/dev/(.*)\") * 0)\n","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}} - {{device}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Writes","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"Bps","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"gridPos":{},"id":5,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by(instance, pod, device) (rate(node_disk_read_bytes_total[$__rate_interval])) + ignoring(pod) group_right() (label_replace(count by(instance, pod, device) (container_fs_writes_bytes_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\", device!~\".*sda.*\"}), \"device\", \"$1\", \"device\", \"/dev/(.*)\") * 0)\n","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}} - {{device}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Reads","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"Bps","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(persistentvolumeclaim) (kubelet_volume_stats_used_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\"} / kubelet_volume_stats_capacity_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\"}) and count by(persistentvolumeclaim) (kube_persistentvolumeclaim_labels{cluster=~\"$cluster\", namespace=~\"$namespace\",label_name=~\"(loki|enterprise-logs)-read.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{persistentvolumeclaim}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Space Utilization","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"percentunit","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":7,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"loki_boltdb_shipper_query_readiness_duration_seconds{cluster=~\"$cluster\", namespace=~\"$namespace\"}","format":"time_series","intervalFactor":2,"legendFormat":"duration","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Query Readiness Duration","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"s","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Read path","titleSize":"h6","type":"row"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":8,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_cpu_quota{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"} / container_spec_cpu_period{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"CPU","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":9,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(pod) (container_memory_working_set_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_memory_limit_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"} \u003e 0)","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (workingset)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":10,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (go heap inuse)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Ingester","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Reads Resources","uid":"reads-resources","version":0}
  "loki-reads.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"height":"250px","panels":[{"aliasColors":{"1xx":"#EAB839","2xx":"#7EB26D","3xx":"#6ED0E0","4xx":"#EF843C","5xx":"#E24D42","error":"#E24D42","success":"#7EB26D"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (status) (\n  label_replace(label_replace(rate(loki_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"loki_api_v1_series|api_prom_series|api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_labels|loki_api_v1_label_name_values\"}[$__rate_interval]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n  \"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))\n","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","refId":"A","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"QPS","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"loki_api_v1_series|api_prom_series|api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_labels|loki_api_v1_label_name_values\", cluster=~\"$cluster\"})) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"{{ route }} 99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum by (le,route) (job_route:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"loki_api_v1_series|api_prom_series|api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_labels|loki_api_v1_label_name_values\", cluster=~\"$cluster\"})) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"{{ route }} 50th Percentile","refId":"B","step":10},{"expr":"1e3 * sum(job_route:loki_request_duration_seconds_sum:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"loki_api_v1_series|api_prom_series|api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_labels|loki_api_v1_label_name_values\", cluster=~\"$cluster\"}) by (route)  / sum(job_route:loki_request_duration_seconds_count:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-read\", route=~\"loki_api_v1_series|api_prom_series|api_prom_query|api_prom_label|api_prom_label_name_values|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_labels|loki_api_v1_label_name_values\", cluster=~\"$cluster\"}) by (route) ","format":"time_series","intervalFactor":2,"legendFormat":"{{ route }} Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Read Path","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{"1xx":"#EAB839","2xx":"#7EB26D","3xx":"#6ED0E0","4xx":"#EF843C","5xx":"#E24D42","error":"#E24D42","success":"#7EB26D"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (status) (\n  label_replace(label_replace(rate(loki_boltdb_shipper_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", operation=\"Shipper.Query\"}[$__rate_interval]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n  \"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))\n","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","refId":"A","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"QPS","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", operation=\"Shipper.Query\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", operation=\"Shipper.Query\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_boltdb_shipper_request_duration_seconds_sum{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", operation=\"Shipper.Query\"}[$__rate_interval])) * 1e3 / sum(rate(loki_boltdb_shipper_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-read\", operation=\"Shipper.Query\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"BoltDB Shipper","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Reads","uid":"reads","version":0}
  "loki-retention.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_cpu_quota{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"} / container_spec_cpu_period{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"CPU","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(pod) (container_memory_working_set_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_memory_limit_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-read.*\"} \u003e 0)","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (workingset)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-read\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (go heap inuse)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Resource Usage","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fieldConfig":{"defaults":{"color":{"fixedColor":"blue","mode":"fixed"},"custom":{},"thresholds":{"mode":"absolute","steps":[{"color":"green","value":null}]},"unit":"dateTimeFromNow"}},"fill":1,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","options":{"colorMode":"value","graphMode":"area","justifyMode":"auto","orientation":"auto","reduceOptions":{"calcs":["lastNotNull"],"fields":"","values":false},"text":{},"textMode":"auto"},"percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"loki_boltdb_shipper_compact_tables_operation_last_successful_run_timestamp_seconds{cluster=~\"$cluster\", namespace=~\"$namespace\"} * 1e3","format":"time_series","instant":true,"refId":"A"}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Last Compact and Mark Operation Success","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"stat","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":5,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"loki_boltdb_shipper_compact_tables_operation_duration_seconds{cluster=~\"$cluster\", namespace=~\"$namespace\"}","format":"time_series","intervalFactor":2,"legendFormat":"duration","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Compact and Mark Operations Duration","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"s","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by (status)(rate(loki_boltdb_shipper_compact_tables_operation_total{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{success}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Compact and Mark Operations Per Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Compact and Mark","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":7,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":true,"steppedLine":false,"targets":[{"expr":"count by(action)(loki_boltdb_shipper_retention_marker_table_processed_total{cluster=~\"$cluster\", namespace=~\"$namespace\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{action}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Processed Tables Per Action","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":8,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":true,"steppedLine":false,"targets":[{"expr":"count by(table,action)(loki_boltdb_shipper_retention_marker_table_processed_total{cluster=~\"$cluster\", namespace=~\"$namespace\" , action=~\"modified|deleted\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{table}}-{{action}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Modified Tables","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":9,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (table)(rate(loki_boltdb_shipper_retention_marker_count_total{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) \u003e0","format":"time_series","intervalFactor":2,"legendFormat":"{{table}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Marks Creation Rate Per Table","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Per Table Marker","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"format":"short","id":10,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum (increase(loki_boltdb_shipper_retention_marker_count_total{cluster=~\"$cluster\", namespace=~\"$namespace\"}[24h]))","format":"time_series","instant":true,"intervalFactor":2,"refId":"A"}],"thresholds":"70,80","timeFrom":null,"timeShift":null,"title":"Marked Chunks (24h)","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"singlestat","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":11,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_bucket{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_bucket{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_sum{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) * 1e3 / sum(rate(loki_boltdb_shipper_retention_marker_table_processed_duration_seconds_count{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Mark Table Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"format":"short","id":12,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum (increase(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_count{cluster=~\"$cluster\", namespace=~\"$namespace\"}[24h]))","format":"time_series","instant":true,"intervalFactor":2,"refId":"A"}],"thresholds":"70,80","timeFrom":null,"timeShift":null,"title":"Delete Chunks (24h)","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"singlestat","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":13,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_bucket{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_bucket{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_sum{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval])) * 1e3 / sum(rate(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_count{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Delete Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Sweeper","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":14,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"time() - (loki_boltdb_shipper_retention_sweeper_marker_file_processing_current_time{cluster=~\"$cluster\", namespace=~\"$namespace\"} \u003e 0)","format":"time_series","intervalFactor":2,"legendFormat":"lag","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Sweeper Lag","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"s","label":null,"logBase":1,"max":null,"min":null,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":15,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum(loki_boltdb_shipper_retention_sweeper_marker_files_current{cluster=~\"$cluster\", namespace=~\"$namespace\"})","format":"time_series","intervalFactor":2,"legendFormat":"count","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Marks Files to Process","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":16,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":4,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by (status)(rate(loki_boltdb_shipper_retention_sweeper_chunk_deleted_duration_seconds_count{cluster=~\"$cluster\", namespace=~\"$namespace\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Delete Rate Per Status","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"datasource":"$logs","id":17,"span":12,"targets":[{"expr":"{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-read\"}","refId":"A"}],"title":"Compactor Logs","type":"logs"}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Logs","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"hide":0,"label":null,"name":"logs","options":[],"query":"loki","refresh":1,"regex":"","type":"datasource"}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Retention","uid":"retention","version":0}
  "loki-writes-resources.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"collapsed":false,"panels":[{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (loki_ingester_memory_streams{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"In-memory streams","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (rate(container_cpu_usage_seconds_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_cpu_quota{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"} / container_spec_cpu_period{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"CPU","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[{"alias":"limit","color":"#E02F44","fill":0}],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(pod) (container_memory_working_set_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10},{"expr":"min(container_spec_memory_limit_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\"} \u003e 0)","format":"time_series","intervalFactor":2,"legendFormat":"limit","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (workingset)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"sum by(pod) (go_memstats_heap_inuse_bytes{cluster=~\"$cluster\", job=~\"($namespace)/(loki|enterprise-logs)-write\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Memory (go heap inuse)","tooltip":{"sort":2},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"bytes","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"gridPos":{},"id":5,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by(instance, pod, device) (rate(node_disk_written_bytes_total[$__rate_interval])) + ignoring(pod) group_right() (label_replace(count by(instance, pod, device) (container_fs_writes_bytes_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\", device!~\".*sda.*\"}), \"device\", \"$1\", \"device\", \"/dev/(.*)\") * 0)\n","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}} - {{device}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Writes","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"Bps","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"gridPos":{},"id":6,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by(instance, pod, device) (rate(node_disk_read_bytes_total[$__rate_interval])) + ignoring(pod) group_right() (label_replace(count by(instance, pod, device) (container_fs_writes_bytes_total{cluster=~\"$cluster\", namespace=~\"$namespace\", container=\"loki\", pod=~\"(loki|enterprise-logs)-write.*\", device!~\".*sda.*\"}), \"device\", \"$1\", \"device\", \"/dev/(.*)\") * 0)\n","format":"time_series","intervalFactor":2,"legendFormat":"{{pod}} - {{device}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Reads","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"Bps","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"gridPos":{},"id":7,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"max by(persistentvolumeclaim) (kubelet_volume_stats_used_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\"} / kubelet_volume_stats_capacity_bytes{cluster=~\"$cluster\", namespace=~\"$namespace\"}) and count by(persistentvolumeclaim) (kube_persistentvolumeclaim_labels{cluster=~\"$cluster\", namespace=~\"$namespace\",label_name=~\"(loki|enterprise-logs)-write.*\"})","format":"time_series","intervalFactor":2,"legendFormat":"{{persistentvolumeclaim}}","legendLink":null,"step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Disk Space Utilization","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"percentunit","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Write path","titleSize":"h6","type":"row"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Writes Resources","uid":"writes-resources","version":0}
  "loki-writes.json": |
    {"annotations":{"list":[]},"editable":true,"gnetId":null,"graphTooltip":0,"hideControls":false,"links":[{"asDropdown":true,"icon":"external link","includeVars":true,"keepTime":true,"tags":["loki"],"targetBlank":false,"title":"Loki Dashboards","type":"dashboards"}],"refresh":"10s","rows":[{"collapse":false,"height":"250px","panels":[{"aliasColors":{"1xx":"#EAB839","2xx":"#7EB26D","3xx":"#6ED0E0","4xx":"#EF843C","5xx":"#E24D42","error":"#E24D42","success":"#7EB26D"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":1,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (status) (\n  label_replace(label_replace(rate(loki_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", route=~\"api_prom_push|loki_api_v1_push|/httpgrpc.HTTP/Handle\"}[$__rate_interval]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n  \"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))\n","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","refId":"A","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"QPS","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":2,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum by (le) (job:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum by (le) (job:loki_request_duration_seconds_bucket:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"1e3 * sum(job:loki_request_duration_seconds_sum:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"}) / sum(job:loki_request_duration_seconds_count:sum_rate{job=~\"($namespace)/(loki|enterprise-logs)-write\", cluster=~\"$cluster\"})","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"Write Path","titleSize":"h6"},{"collapse":false,"height":"250px","panels":[{"aliasColors":{"1xx":"#EAB839","2xx":"#7EB26D","3xx":"#6ED0E0","4xx":"#EF843C","5xx":"#E24D42","error":"#E24D42","success":"#7EB26D"},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":10,"id":3,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":0,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":true,"steppedLine":false,"targets":[{"expr":"sum by (status) (\n  label_replace(label_replace(rate(loki_boltdb_shipper_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", operation=\"WRITE\"}[$__rate_interval]),\n  \"status\", \"${1}xx\", \"status_code\", \"([0-9])..\"),\n  \"status\", \"${1}\", \"status_code\", \"([a-z]+)\"))\n","format":"time_series","intervalFactor":2,"legendFormat":"{{status}}","refId":"A","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"QPS","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"short","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]},{"aliasColors":{},"bars":false,"dashLength":10,"dashes":false,"datasource":"$datasource","fill":1,"id":4,"legend":{"avg":false,"current":false,"max":false,"min":false,"show":true,"total":false,"values":false},"lines":true,"linewidth":1,"links":[],"nullPointMode":"null as zero","percentage":false,"pointradius":5,"points":false,"renderer":"flot","seriesOverrides":[],"spaceLength":10,"span":6,"stack":false,"steppedLine":false,"targets":[{"expr":"histogram_quantile(0.99, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", operation=\"WRITE\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"99th Percentile","refId":"A","step":10},{"expr":"histogram_quantile(0.50, sum(rate(loki_boltdb_shipper_request_duration_seconds_bucket{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", operation=\"WRITE\"}[$__rate_interval])) by (le)) * 1e3","format":"time_series","intervalFactor":2,"legendFormat":"50th Percentile","refId":"B","step":10},{"expr":"sum(rate(loki_boltdb_shipper_request_duration_seconds_sum{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", operation=\"WRITE\"}[$__rate_interval])) * 1e3 / sum(rate(loki_boltdb_shipper_request_duration_seconds_count{cluster=~\"$cluster\",job=~\"($namespace)/(loki|enterprise-logs)-write\", operation=\"WRITE\"}[$__rate_interval]))","format":"time_series","intervalFactor":2,"legendFormat":"Average","refId":"C","step":10}],"thresholds":[],"timeFrom":null,"timeShift":null,"title":"Latency","tooltip":{"shared":true,"sort":2,"value_type":"individual"},"type":"graph","xaxis":{"buckets":null,"mode":"time","name":null,"show":true,"values":[]},"yaxes":[{"format":"ms","label":null,"logBase":1,"max":null,"min":0,"show":true},{"format":"short","label":null,"logBase":1,"max":null,"min":null,"show":false}]}],"repeat":null,"repeatIteration":null,"repeatRowId":null,"showTitle":true,"title":"BoltDB Shipper","titleSize":"h6"}],"schemaVersion":14,"style":"dark","tags":["loki"],"templating":{"list":[{"current":{"text":"default","value":"default"},"hide":0,"label":"Data Source","name":"datasource","options":[],"query":"prometheus","refresh":1,"regex":"","type":"datasource"},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"cluster","multi":false,"name":"cluster","options":[],"query":"label_values(loki_build_info, cluster)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false},{"allValue":null,"current":{"text":"prod","value":"prod"},"datasource":"$datasource","hide":0,"includeAll":false,"label":"namespace","multi":false,"name":"namespace","options":[],"query":"label_values(loki_build_info{cluster=~\"$cluster\"}, namespace)","refresh":1,"regex":"","sort":2,"tagValuesQuery":"","tags":[],"tagsQuery":"","type":"query","useTags":false}]},"time":{"from":"now-1h","to":"now"},"timepicker":{"refresh_intervals":["5s","10s","30s","1m","5m","15m","30m","1h","2h","1d"],"time_options":["5m","15m","1h","6h","12h","24h","2d","7d","30d"]},"timezone":"utc","title":"Loki / Writes","uid":"writes","version":0}
---
# Source: gemini/charts/loki/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-runtime
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
data:
  runtime-config.yaml: |
    {}
---
# Source: gemini/templates/victoriametrics-svc.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: victoriametrics-svc
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
data:
  VM_SELECT_ENDPOINT: http://my-release-victoria-metrics-cluster-vmselect.default.svc:8481/select/0/prometheus
  VM_INSERT_ENDPOINT: http://my-release-victoria-metrics-cluster-vminsert.default.svc:8480/insert/0/prometheus/
---
# Source: gemini/charts/cubetran/templates/rbac/auth_proxy_client_clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-metrics-reader
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- nonResourceURLs:
  - "/metrics"
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/auth_proxy_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-proxy-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: gemini/charts/cubetran/templates/rbac/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/name: cubetran
      app.kubernetes.io/instance: my-release
---
# Source: gemini/charts/cubetran/templates/rbac/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-manager-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - apps
    resources:
    - deployments
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - common.apecloud.io
    resources:
    - serialjobs
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - common.apecloud.io
    resources:
    - serialjobs/finalizers
    verbs:
    - update
  - apiGroups:
    - common.apecloud.io
    resources:
    - serialjobs/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - common.apecloud.io
    resources:
    - topologies
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - common.apecloud.io
    resources:
    - topologies/finalizers
    verbs:
    - update
  - apiGroups:
    - common.apecloud.io
    resources:
    - topologies/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    - secrets
    - services
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    - pods
    - pods/log
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisondefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisondefinitions/finalizers
    verbs:
    - update
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisondefinitions/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisonjobs
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisonjobs/finalizers
    verbs:
    - update
  - apiGroups:
    - datacomparison.apecloud.io
    resources:
    - comparisonjobs/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferchannels
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferchannels
    - transferdefinitions
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferchannels/finalizers
    verbs:
    - update
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferchannels/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferdefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferdefinitions/finalizers
    verbs:
    - update
  - apiGroups:
    - datatransfer.apecloud.io
    resources:
    - transferdefinitions/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformdefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformdefinitions/finalizers
    verbs:
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformdefinitions/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformprocessors
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformprocessors/finalizers
    verbs:
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformprocessors/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformtemplates
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformtemplates/finalizers
    verbs:
    - update
  - apiGroups:
    - datatransform.apecloud.io
    resources:
    - transformtemplates/status
    verbs:
    - get
    - patch
    - update
---
# Source: gemini/charts/cubetran/templates/rbac/common_serialjob_editor_role.yaml
# permissions for end users to edit serialjobs.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-serialjob-editor-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - common.apecloud
  resources:
  - serialjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - common.apecloud
  resources:
  - serialjobs/status
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/common_serialjob_viewer_role.yaml
# permissions for end users to view serialjobs.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-serialjob-viewer-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - common.apecloud
  resources:
  - serialjobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - common.apecloud
  resources:
  - serialjobs/status
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/migrationjob_editor_role.yaml
# permissions for end users to edit migrationjobs.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-task-editor-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationjobs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationjobs/status
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/migrationjob_viewer_role.yaml
# permissions for end users to view migrationjobs.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-task-viewer-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationjobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationjobs/status
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/migrationtemplate_editor_role.yaml
# permissions for end users to edit migrationtemplates.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-template-editor-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationtemplates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationtemplates/status
  verbs:
  - get
---
# Source: gemini/charts/cubetran/templates/rbac/migrationtemplate_viewer_role.yaml
# permissions for end users to view migrationtemplates.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cubetran-template-viewer-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationtemplates
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - datamigration.apedt.io
  resources:
  - migrationtemplates/status
  verbs:
  - get
---
# Source: gemini/charts/kubeviewer/templates/rbac/auth_proxy_client_clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-metrics-reader
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - nonResourceURLs:
    - "/metrics"
    verbs:
    - get
---
# Source: gemini/charts/kubeviewer/templates/rbac/auth_proxy_role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-proxy-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
---
# Source: gemini/charts/kubeviewer/templates/rbac/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - clusters
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - components
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - configurations
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuppolicies
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backups
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backupschedules
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - restores
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - clusterrolebindings
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - rolebindings
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions/finalizers
    verbs:
    - update
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - view.apecloud.io
    resources:
    - views
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - views/finalizers
    verbs:
    - update
  - apiGroups:
    - view.apecloud.io
    resources:
    - views/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - workloads.kubeblocks.io
    resources:
    - replicatedstatemachines
    verbs:
    - get
    - list
    - watch
---
# Source: gemini/charts/kubeviewer/templates/rbac/view_editor_role.yaml
# permissions for end users to edit views.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-view-editor-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - view.apecloud.io
    resources:
    - views
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - views/status
    verbs:
    - get
---
# Source: gemini/charts/kubeviewer/templates/rbac/view_viewer_role.yaml
# permissions for end users to view views.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-view-viewer-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - view.apecloud.io
    resources:
    - views
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - views/status
    verbs:
    - get
---
# Source: gemini/charts/kubeviewer/templates/rbac/viewdefinition_editor_role.yaml
# permissions for end users to edit viewdefinitions.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-viewdef-editor-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions/status
    verbs:
    - get
---
# Source: gemini/charts/kubeviewer/templates/rbac/viewdefinition_viewer_role.yaml
# permissions for end users to view viewdefinitions.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeviewer-viewdef-viewer-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - view.apecloud.io
    resources:
    - viewdefinitions/status
    verbs:
    - get
---
# Source: gemini/charts/loki/templates/backend/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
  name: my-release-loki-clusterrole
rules: []
---
# Source: gemini/charts/servicemirror/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: servicemirror-client
  labels:
    helm.sh/chart: servicemirror-0.2.15
    app.kubernetes.io/name: servicemirror-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.2.15"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services/finalizers
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
---
# Source: gemini/charts/victoria-metrics-cluster/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-victoria-metrics-cluster-clusterrole
  labels:
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: gemini/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-gemini
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app.kubernetes.io/name: gemini
      app.kubernetes.io/instance: my-release
---
# Source: gemini/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-gemini-manager-role
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
rules:
  - nonResourceURLs:
    - /metrics
    verbs:
    - get
  - apiGroups:
    - apps
    resources:
    - daemonsets
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps
    resources:
    - daemonsets/finalizers
    verbs:
    - update
  - apiGroups:
    - apps
    resources:
    - daemonsets/status
    verbs:
    - get
  - apiGroups:
    - apps
    resources:
    - deployments
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps
    resources:
    - deployments/finalizers
    verbs:
    - update
  - apiGroups:
    - apps
    resources:
    - deployments/status
    verbs:
    - get
  - apiGroups:
    - apps
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets/finalizers
    verbs:
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets/status
    verbs:
    - get
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - backuppolicytemplates
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - backuppolicytemplates/finalizers
    verbs:
    - update
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - backuppolicytemplates/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - clusterdefinitions
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - clusterdefinitions/status
    verbs:
    - get
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - clusters
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - opsrequests
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - opsrequests/finalizers
    verbs:
    - update
  - apiGroups:
    - apps.kubeblocks.io
    resources:
    - opsrequests/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - autoscaling
    resources:
    - horizontalpodautoscalers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - cronjobs
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - batch
    resources:
    - jobs
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - configmaps/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - cronjobs
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - jobs
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - nodes/proxy
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - nodes/stats
    verbs:
    - get
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - pods/exec
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - resourcequotas
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - secrets/finalizers
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - serviceaccounts
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - services
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - services/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - actionsets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - actionsets/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - actionsets/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuppolicies
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuppolicies/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuppolicies/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuprepos
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuprepos/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backuprepos/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backups
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backups/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backups/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backupschedules
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backupschedules/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - backupschedules/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - restores
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - restores/finalizers
    verbs:
    - update
  - apiGroups:
    - dataprotection.kubeblocks.io
    resources:
    - restores/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - collectordatasources
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - collectordatasources/finalizers
    verbs:
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - collectordatasources/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - logsexportersinks
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - logsexportersinks/finalizers
    verbs:
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - logsexportersinks/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - metricsexportersinks
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - metricsexportersinks/finalizers
    verbs:
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - metricsexportersinks/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - monitordefinitions
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - monitordefinitions/finalizers
    verbs:
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - monitordefinitions/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - otelds
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - otelds/finalizers
    verbs:
    - update
  - apiGroups:
    - monitor.kubeblocks.io
    resources:
    - otelds/status
    verbs:
    - get
    - patch
    - update
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - clusterrolebindings
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - rbac.authorization.k8s.io
    resources:
    - rolebindings
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - scheduling.k8s.io
    resources:
    - priorityclasses
    verbs:
    - get
    - list
    - watch
---
# Source: gemini/templates/rbac/dataprotection_exec_worker_clusterrole.yaml
# permissions for dataprotection workers to run "kubectl exec".
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-gemini-dataprotection-exec-worker-role
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
---
# Source: gemini/charts/cubetran/templates/rbac/auth_proxy_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cubetran-proxy-rolebinding
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cubetran-proxy-role
subjects:
- kind: ServiceAccount
  name: my-release-cubetran
  namespace: default
---
# Source: gemini/charts/cubetran/templates/rbac/clusterrole_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cubetran
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cubetran
subjects:
- kind: ServiceAccount
  name: my-release-cubetran
  namespace: default
---
# Source: gemini/charts/kubeviewer/templates/rbac/auth_proxy_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubeviewer-proxy-rolebinding
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: proxy-role
subjects:
  - kind: ServiceAccount
    name: controller-manager
    namespace: default
---
# Source: gemini/charts/kubeviewer/templates/rbac/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubeviewer
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kubeviewer
subjects:
  - kind: ServiceAccount
    name: my-release-kubeviewer
    namespace: default
---
# Source: gemini/charts/loki/templates/backend/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-loki-clusterrolebinding
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: loki
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-loki-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: gemini/charts/servicemirror/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: servicemirror-client
  labels:
    helm.sh/chart: servicemirror-0.2.15
    app.kubernetes.io/name: servicemirror-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.2.15"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: servicemirror-client
subjects:
- kind: ServiceAccount
  name: servicemirror-client
  namespace: default
---
# Source: gemini/charts/victoria-metrics-alert/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-victoria-metrics-alert-server-clusterrolebinding
  namespace: default
  labels:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-victoria-metrics-alert
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-victoria-metrics-alert-server-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: gemini/charts/victoria-metrics-cluster/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-victoria-metrics-cluster-clusterrolebinding
  labels:
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-victoria-metrics-cluster
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-victoria-metrics-cluster-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: gemini/templates/clusterrole_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-gemini
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-gemini
subjects:
  - kind: ServiceAccount
    name: my-release-gemini
    namespace: default
---
# Source: gemini/templates/rbac/dataprotection_exec_worker_clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-gemini-dataprotection-exec-worker-rolebinding
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-gemini-dataprotection-exec-worker-role
subjects:
- kind: ServiceAccount
  name: my-release-gemini-dataprotection-exec-worker
  namespace: default
---
# Source: gemini/charts/cubetran/templates/rbac/leader_election_role.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cubetran-leader-election-role
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: gemini/charts/kubeviewer/templates/rbac/leader_election_role.yaml
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-kubeviewer-leader-election-role
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - get
    - list
    - watch
    - create
    - update
    - patch
    - delete
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - patch
---
# Source: gemini/charts/victoria-metrics-alert/templates/alert-config/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: alert-config
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "patch"]
---
# Source: gemini/charts/victoria-metrics-alert/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  my-release-victoria-metrics-alert-server
  namespace: default
  labels:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: gemini/charts/victoria-metrics-cluster/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-victoria-metrics-cluster
  namespace: default
  labels:
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
rules: []
---
# Source: gemini/charts/cubetran/templates/rbac/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cubetran-leader-election-rolebinding
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-cubetran-leader-election-role
subjects:
  - kind: ServiceAccount
    name: my-release-cubetran
    namespace: default
---
# Source: gemini/charts/kubeviewer/templates/rbac/leader_election_role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-kubeviewer-leader-election-rolebinding
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-election-role
subjects:
  - kind: ServiceAccount
    name: controller-manager
    namespace: default
---
# Source: gemini/charts/victoria-metrics-alert/templates/alert-config/role_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: default
  name: alert-config-rolebinding
subjects:
  - kind: ServiceAccount
    name: my-release-victoria-metrics-alert
    namespace: default
roleRef:
  kind: Role
  name: alert-config
  apiGroup: rbac.authorization.k8s.io
---
# Source: gemini/charts/victoria-metrics-alert/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-victoria-metrics-alert-server
  namespace: default
  labels:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-victoria-metrics-alert-server
subjects:
- kind: ServiceAccount
  name: my-release-victoria-metrics-alert
  namespace: default
---
# Source: gemini/charts/victoria-metrics-cluster/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-victoria-metrics-cluster
  namespace: default
  labels:
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-victoria-metrics-cluster
subjects:
- kind: ServiceAccount
  name: my-release-victoria-metrics-cluster
  namespace: default
---
# Source: gemini/charts/kubeviewer/templates/rbac/auth_proxy_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubeviewer-metrics-service
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
    ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: https
    selector:
      control-plane: controller-manager
---
# Source: gemini/charts/loki/templates/backend/query-scheduler-discovery.yaml
apiVersion: v1
kind: Service
metadata:
  name: query-scheduler-discovery
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
    prometheus.io/service-monitor: "false"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: gemini/charts/loki/templates/backend/service-backend-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-backend-headless
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
    variant: headless
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: gemini/charts/loki/templates/backend/service-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-backend
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: gemini/charts/loki/templates/gateway/service-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: gateway
---
# Source: gemini/charts/loki/templates/read/service-read-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-read-headless
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: read
    variant: headless
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      appProtocol: tcp
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: read
---
# Source: gemini/charts/loki/templates/read/service-read.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-read
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: read
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: read
---
# Source: gemini/charts/loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-memberlist
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: memberlist
---
# Source: gemini/charts/loki/templates/write/service-write-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-write-headless
  namespace: default
  labels:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: write
    variant: headless
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      appProtocol: tcp
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: write
---
# Source: gemini/charts/loki/templates/write/service-write.yaml
apiVersion: v1
kind: Service
metadata:
  name: loki-write
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: write
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: write
---
# Source: gemini/charts/victoria-metrics-alert/templates/alertmanager-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: default
  labels:
    app: alertmanager
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
  name: my-release-alertmanager
spec:
  ports:
    - name: web
      port: 9093
      targetPort: web
      protocol: TCP
  selector:
    app: alertmanager
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
---
# Source: gemini/charts/victoria-metrics-alert/templates/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: default
  labels:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-alert-server
spec:
  ports:
    - name: http
      port: 8880
      targetPort: http
      protocol: TCP
  selector:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
  type: "ClusterIP"
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vminsert-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vminsert
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vminsert
  namespace: default
spec:
  ports:
    - name: http
      port: 8480
      protocol: TCP
      targetPort: http

  selector:
    app: vminsert
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
  type: "ClusterIP"
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vmselect-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vmselect
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vmselect
  namespace: default
spec:
  ports:
    - name: http
      port: 8481
      protocol: TCP
      targetPort: http
  selector:
    app: vmselect
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
  type: "ClusterIP"
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vmstorage-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vmstorage
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vmstorage
  namespace: default
spec:
  clusterIP: None
  ports:
    - port: 8482
      targetPort: http
      protocol: TCP
      name: http
    - port: 8401
      targetPort: vmselect
      protocol: TCP
      name: vmselect
    - port: 8400
      targetPort: vminsert
      protocol: TCP
      name: vminsert
  selector:
    app: vmstorage
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
---
# Source: gemini/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gemini
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9443
      targetPort: http
      protocol: TCP
      name: http

  selector:
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
---
# Source: gemini/charts/cubetran/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cubetran
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cubetran
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cubetran
        app.kubernetes.io/instance: my-release
    spec:
      priorityClassName: 
      serviceAccountName: my-release-cubetran
      securityContext:
        runAsNonRoot: true
      containers:
        - name: manager
          args:
            - "--health-probe-bind-address=:8081"
            - "--metrics-bind-address=:8080"
            - "--leader-elect"
            - "--zap-devel=false"
            - "--zap-time-encoding=iso8601"
            - "--zap-encoder=console"
          image: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/cubetran-platform:0.5.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: CUBETRAN_WEBSERVER_ENABLE
              value: "false"
            - name: CUBETRAN_TRANSFORM_ENABLE
              value: "false"
          ports:
            - name: health
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: web-server
              containerPort: 9888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: health
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: health
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
      dnsPolicy: ClusterFirst
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: kb-controller
                operator: In
                values:
                - "true"
            weight: 100
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      terminationGracePeriodSeconds: 10
---
# Source: gemini/charts/kubeviewer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubeviewer
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeviewer
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: kubeviewer-0.1.14
        app.kubernetes.io/name: kubeviewer
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: my-release-kubeviewer
      securityContext:
        {}
      containers:
        - name: kubeviewer
          securityContext:
            {}
          image: "apecloud/kubeviewer:0.1.14"
          imagePullPolicy: IfNotPresent
          ports:
            - name: webhook-server
              containerPort: 9443
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: health
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: health
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
---
# Source: gemini/charts/loki/templates/gateway/deployment-gateway.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-gateway
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: gateway
  template:
    metadata:
      annotations:
        checksum/config: e0468715e734bc5bb619bf1c402af99ffa3d2c6fb5d10db1f993e3bf38a930b6
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: gateway
    spec:
      serviceAccountName: loki
      enableServiceLinks: true
      
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      terminationGracePeriodSeconds: 30
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.24-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: my-release
                  app.kubernetes.io/component: gateway
              topologyKey: kubernetes.io/hostname
        
      volumes:
        - name: config
          configMap:
            name: loki-gateway
        - name: tmp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
---
# Source: gemini/charts/loki/templates/read/deployment-read.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-read
  namespace: default
  labels:
    app.kubernetes.io/part-of: memberlist
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: read
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: read
  template:
    metadata:
      annotations:
        checksum/config: 106d9913b6dded71fe1450d24ef0d1763bbc91b8f6ae0fafd737f803baaa6af4
      labels:
        app.kubernetes.io/part-of: memberlist
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: read
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: loki
          image: docker.io/grafana/loki:2.9.4
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=read
            - -legacy-read-mode=false
            - -common.compactor-grpc-address=loki-backend.default.svc.cluster.local:9095
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: my-release
                  app.kubernetes.io/component: read
              topologyKey: kubernetes.io/hostname
        
      volumes:
        - name: tmp
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
---
# Source: gemini/charts/servicemirror/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicemirror-client
  labels:
    helm.sh/chart: servicemirror-0.2.15
    app.kubernetes.io/name: servicemirror-client
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.2.15"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: servicemirror-client
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: servicemirror-client
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: servicemirror-client
      containers:
        - name: servicemirror
          image: "apecloud/servicemirror:0.2.15"
          imagePullPolicy: IfNotPresent
          args: ["client"]
          env:
            - name: CERT_FILE
              value: /app/tls.crt
            - name: KEY_FILE
              value: /app/tls.key
            - name: TRUSTED_CA_FILE
              value: /app/trusted-ca.crt
            - name: SERVER_ADDR
              value: 
          volumeMounts:
            - mountPath: /app/
              name: tls
          # TODO: resource limits
      volumes:
        - name: tls
          secret:
            secretName: servicemirror-client
---
# Source: gemini/charts/victoria-metrics-alert/templates/alertmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-alertmanager
  namespace: default
  labels:
    app: alertmanager
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
      app.kubernetes.io/name: victoria-metrics-alert
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app: alertmanager
        app.kubernetes.io/name: victoria-metrics-alert
        app.kubernetes.io/instance: my-release
        helm.sh/chart: victoria-metrics-alert-0.8.3-reload
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      serviceAccountName: my-release-victoria-metrics-alert
      automountServiceAccountToken: true
      containers:
        - name: victoria-metrics-alert-alertmanager
          securityContext:
            null
          image: "docker.io/prom/alertmanager:v0.25.0"
          args:
            - --config.file=/config/alertmanager.yaml
            
            - --storage.path=/data
            - --data.retention=120h
            - --web.listen-address=0.0.0.0:9093
            - --cluster.advertise-address=$(POD_IP):6783
            
            
          ports:
            - name: web
              containerPort: 9093
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          readinessProbe:
            httpGet:
              
              path: /-/ready
              port: web
          livenessProbe:
            httpGet:
              
              path: /-/healthy
              port: web
          volumeMounts:
            - name: storage
              mountPath: /data
            - name: config
              mountPath: /config
              readOnly: true
          resources:
            {}
        - name: victoria-metrics-alert-configmap-reload
          image: docker.io/jimmidyson/configmap-reload:v0.5.0
          imagePullPolicy: IfNotPresent
          args:
            - '--volume-dir=/config'
            - '--webhook-url=http://127.0.0.1:9093/-/reload'
          volumeMounts:
            - name: config
              readOnly: true
              mountPath: /config
      volumes:
        - name: storage
          emptyDir: {}
        - name: config
          configMap:
            name: vm-alert-manager-config
---
# Source: gemini/charts/victoria-metrics-alert/templates/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-victoria-metrics-alert-server
  namespace: default
  labels:
    app: server
    app.kubernetes.io/name: victoria-metrics-alert
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-alert-0.8.3-reload
    app.kubernetes.io/managed-by: Helm
spec:
  minReadySeconds: 0
  replicas: 1
  selector:
    matchLabels:
      app: server
      app.kubernetes.io/name: victoria-metrics-alert
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: server
        app.kubernetes.io/name: victoria-metrics-alert
        app.kubernetes.io/instance: my-release
        helm.sh/chart: victoria-metrics-alert-0.8.3-reload
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      serviceAccountName: my-release-victoria-metrics-alert
      securityContext:
        {}
      automountServiceAccountToken: true
      containers:
        - name: victoria-metrics-alert-server
          securityContext:
            {}
          image: "docker.io/victoriametrics/vmalert:v1.95.1"
          args:
            - -rule=/config-0/alert-rules.yaml
            - -rule=/config-1/alert-rules.yaml
            - -datasource.url=http://gemini-victoria-metrics-cluster-vmselect:8481/select/0/prometheus/
            - -notifier.url=http://my-release-alertmanager:9093
            - -remoteRead.url=
            - -remoteWrite.url=http://gemini-victoria-metrics-cluster-vminsert:8480/insert/0/prometheus/
            - -envflag.enable=true
            - -envflag.prefix=VM_
            - -loggerFormat=json
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8880
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: config-0
              mountPath: /config-0
            - name: config-1
              mountPath: /config-1
            
          resources:
            {}
        - args:
            - --volume-dir=/config-0
            - --volume-dir=/config-1
            - --webhook-url=http://127.0.0.1:8880/-/reload
          image: docker.io/jimmidyson/configmap-reload:v0.5.0
          imagePullPolicy: IfNotPresent
          name: victoria-metrics-alert-configmap-reload
          volumeMounts:
            - mountPath: /config-0
              name: config-0
              readOnly: true
            - name: config-1
              mountPath: /config-1
      volumes:
        - name: config-0
          configMap:
            name: vmalert-server-rule-0
        - name: config-1
          configMap:
            name: vmalert-server-rule-1
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vminsert-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vminsert
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vminsert
  namespace: default
spec:
  selector:
    matchLabels:
      app: vminsert
      app.kubernetes.io/name: victoria-metrics-cluster
      app.kubernetes.io/instance: my-release
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/port: "8480"
        prometheus.io/scrape: "true"
      labels:
        app: vminsert
        app.kubernetes.io/name: victoria-metrics-cluster
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      automountServiceAccountToken: true
      containers:
        - name: victoria-metrics-cluster-vminsert
          image: "victoriametrics/vminsert:v1.95.1-cluster"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            {}
          args:
            - --storageNode=my-release-victoria-metrics-cluster-vmstorage-0.my-release-victoria-metrics-cluster-vmstorage.default.svc.cluster.local:8400
            
            - --envflag.enable=true
            - --envflag.prefix=VM_
            - --loggerFormat=json
          ports:
            - name: http
              containerPort: 8480
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            
          resources:
            {}
      serviceAccountName: my-release-victoria-metrics-cluster
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vmselect-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vmselect
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vmselect
  namespace: default
spec:
  selector:
    matchLabels:
      app: vmselect
      app.kubernetes.io/name: victoria-metrics-cluster
      app.kubernetes.io/instance: my-release
  replicas: 1
  template:
    metadata:
      annotations:
        prometheus.io/port: "8481"
        prometheus.io/scrape: "true"
      labels:
        app: vmselect
        app.kubernetes.io/name: victoria-metrics-cluster
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      automountServiceAccountToken: true
      containers:
        - name: victoria-metrics-cluster-vmselect
          image: "victoriametrics/vmselect:v1.95.1-cluster"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            {}
          args:
            - "--cacheDataPath=/cache"
            - --storageNode=my-release-victoria-metrics-cluster-vmstorage-0.my-release-victoria-metrics-cluster-vmstorage.default.svc.cluster.local:8401
            
            - --dedup.minScrapeInterval=1s
            - --envflag.enable=true
            - --envflag.prefix=VM_
            - --loggerFormat=json
          ports:
            - name: http
              containerPort: 8481
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - mountPath: /cache
              name: cache-volume
            
          resources:
      serviceAccountName: my-release-victoria-metrics-cluster
      volumes:
        - name: cache-volume
          emptyDir: {}
---
# Source: gemini/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gemini
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gemini
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gemini
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-gemini
      securityContext:
        {}
      containers:
        - name: gemini
          securityContext:
            {}
          env:
            # TODO: remove it in kb 0.9
            - name: DP_ENCRYPTION_KEY
              value: kubeblocks-dp-aes256
            - name: GEMINI_SERVICEACCOUNT_NAME
              value: my-release-gemini
            - name: CM_NAMESPACE
              value: kb-system
            - name: CM_TOLERATIONS
              value: "[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/control-plane\",\"operator\":\"Exists\"}]"
            - name: DATASAFED_IMAGE
              value: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/datasafed:0.2.0"
            - name: KUBEBLOCKS_SERVICEACCOUNT_NAME
              value: kubeblocks
            - name: KUBEBLOCKS_TOOLS_IMAGE
              value: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/kubeblocks-tools:latest
            - name: KUBEBLOCKS_IMAGE_PULL_POLICY
              value: IfNotPresent
            - name: DISABLE_METRICS_BATCH
              value: "true"
            - name: DISABLE_RUNTIME_METRICS
              value: "true"
            - name: DISABLE_SELF_METRICS_COLLECT
              value: "true"
            - name: WORKER_SERVICE_ACCOUNT_NAME
              value: my-release-gemini-dataprotection-worker
            - name: EXEC_WORKER_SERVICE_ACCOUNT_NAME
              value: my-release-gemini-dataprotection-exec-worker
            - name: WORKER_SERVICE_ACCOUNT_ANNOTATIONS
              value: "{}"
            - name: WORKER_CLUSTER_ROLE_NAME
              value: my-release-gemini-dataprotection-worker-role
          args:
            - "--metrics-bind-address=:8080"
          image: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/gemini:0.6.0-crd.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: webhook-server
              containerPort: 9443
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: health
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: health
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 10
---
# Source: gemini/templates/easymetrics_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gemini-easymetrics
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: my-release-gemini-easymetrics
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-gemini-easymetrics
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 40%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-gemini-easymetrics
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-gemini
      securityContext:
        runAsNonRoot: true
      containers:
        - name: easymetrics
          args:
            - --datapath=/data
          image: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/easymetrics:0.6.0-crd.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: health
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
          envFrom:
            - configMapRef:
                name: victoriametrics-svc
          resources:
            limits:
              cpu: 1
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
          volumeMounts:
            - mountPath: /data
              name: data
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
      dnsPolicy: ClusterFirst
      volumes:
        - name: data
          emptyDir: {}
      terminationGracePeriodSeconds: 10
---
# Source: gemini/charts/loki/templates/backend/statefulset-backend.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-backend
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-backend-headless
  revisionHistoryLimit: 10
  
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Delete
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: 106d9913b6dded71fe1450d24ef0d1763bbc91b8f6ae0fafd737f803baaa6af4
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: loki
          image: docker.io/grafana/loki:2.9.4
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=backend
            - -legacy-read-mode=false
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: tmp
              mountPath: /tmp
            - name: data
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: my-release
                  app.kubernetes.io/component: backend
              topologyKey: kubernetes.io/hostname
        
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
  volumeClaimTemplates:
    - apiVersion: v1	
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "20Gi"
---
# Source: gemini/charts/loki/templates/write/statefulset-write.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki-write
  namespace: default
  labels:
    helm.sh/chart: loki-5.42.1
    app.kubernetes.io/name: loki
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.9.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: write
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: loki-write-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: write
  template:
    metadata:
      annotations:
        checksum/config: 106d9913b6dded71fe1450d24ef0d1763bbc91b8f6ae0fafd737f803baaa6af4
      labels:
        app.kubernetes.io/name: loki
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: write
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: loki
      automountServiceAccountToken: true
      enableServiceLinks: true
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: loki
          image: docker.io/grafana/loki:2.9.4
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=write
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: loki
                  app.kubernetes.io/instance: my-release
                  app.kubernetes.io/component: write
              topologyKey: kubernetes.io/hostname
        
      volumes:
        - name: config
          configMap:
            name: loki
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: loki-runtime
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "20Gi"
---
# Source: gemini/charts/victoria-metrics-cluster/templates/vmstorage-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: vmstorage
    app.kubernetes.io/name: victoria-metrics-cluster
    app.kubernetes.io/instance: my-release
    helm.sh/chart: victoria-metrics-cluster-0.11.6
    app.kubernetes.io/managed-by: Helm
  name: my-release-victoria-metrics-cluster-vmstorage
  namespace: default
spec:
  serviceName: my-release-victoria-metrics-cluster-vmstorage
  selector:
    matchLabels:
      app: vmstorage
      app.kubernetes.io/name: victoria-metrics-cluster
      app.kubernetes.io/instance: my-release
  replicas: 1
  podManagementPolicy: OrderedReady
  template:
    metadata:
      annotations:
        prometheus.io/port: "8482"
        prometheus.io/scrape: "true"
      labels:
        app: vmstorage
        app.kubernetes.io/name: victoria-metrics-cluster
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      automountServiceAccountToken: true
      containers:
        - name: victoria-metrics-cluster-vmstorage
          image: "victoriametrics/vmstorage:v1.95.1-cluster"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            {}
          args:
            - "--retentionPeriod=1"
            - "--storageDataPath=/storage"
            - --envflag.enable=true
            - --envflag.prefix=VM_
            - --loggerFormat=json
            - --retentionPeriod=168h
          ports:
            - name: http
              containerPort: 8482
            - name: vminsert
              containerPort: 8400
            - name: vmselect
              containerPort: 8401
          livenessProbe:
            failureThreshold: 10
            initialDelaySeconds: 30
            periodSeconds: 30
            tcpSocket:
              port: http
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          resources: 
            {}
          volumeMounts:
            - name: vmstorage-volume
              mountPath: /storage
              subPath: 
            
      serviceAccountName: my-release-victoria-metrics-cluster
      terminationGracePeriodSeconds: 60
      volumes:
        
  volumeClaimTemplates:
    - metadata:
        name: vmstorage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "20Gi"
---
# Source: gemini/templates/actionset/apecloud-mysql-pitr.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  labels:
    clusterdefinition.kubeblocks.io/name: apecloud-mysql
  name: apecloud-mysql-pitr
spec:
  backupType: Continuous
  env:
    - name: VOLUME_DATA_DIR
      value: /data/mysql
    - name: DATA_DIR
      value: /data/mysql/data
    - name: PITR_RELATIVE_PATH
      value: pitr-logs
    - name: PITR_DIR
      value: "$(DATA_DIR)/$(PITR_RELATIVE_PATH)"
    - name: CONF_DIR
      value: "$(VOLUME_DATA_DIR)/conf"
    - name: TIME_FORMAT
      value: 2006-01-02T15:04:05Z
    - name: TARGET_POD_ROLE
      # TODO input by backup policy
      value: leader
    - name: DP_DB_PORT
      value: "3306"
    - name: BINLOG_ARCHIVE_INTERVAL
      value: "10"
    - name: FLUSH_BINLOG_INTERVAL_SECONDS
      value: $(DP_ARCHIVE_INTERVAL)
    - name: FLUSH_BINLOG_AFTER_SIZE
      # if the binlog size greater than 500Mi, will flush the bin log.
      value: "524288000"
  restore:
    prepareData:
      image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g:mysql-8.0
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        set -e;
        # log info file
        function DP_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} INFO: $msg"
        }
        
        # log error info
        function DP_error_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} ERROR: $msg"
        }
        
        # Get file names without extensions based on the incoming file path
        function DP_get_file_name_without_ext() {
            local fileName=$1
            local file_without_ext=${fileName%.*}
            echo $(basename ${file_without_ext})
        }
        
        # Save backup status info file for syncing progress.
        # timeFormat: %Y-%m-%dT%H:%M:%SZ
        function DP_save_backup_status_info() {
            local totalSize=$1
            local startTime=$2
            local stopTime=$3
            local timeZone=$4
            local extras=$5
            local timeZoneStr=""
            if [ ! -z ${timeZone} ]; then
               timeZoneStr=",\"timeZone\":\"${timeZone}\""
            fi
            if [ -z "${stopTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
            elif [ -z "${startTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            else
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            fi
        }
        
        
        # Clean up expired logfiles.
        # Default interval is 60s
        # Default rootPath is /
        function DP_purge_expired_files() {
          local currentUnix="${1:?missing current unix}"
          local last_purge_time="${2:?missing last_purge_time}"
          local root_path=${3:-"/"}
          local interval_seconds=${4:-60}
          local diff_time=$((${currentUnix}-${last_purge_time}))
          if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
             return
          fi
          expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
          files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
          for file in ${files[@]}
          do
              datasafed rm ${file}
              echo ${file}
          done
        }
        
        # analyze the start time of the earliest file from the datasafed backend.
        # Then record the file name into dp_oldest_file.info.
        # If the oldest file is no changed, exit the process.
        # This can save traffic consumption.
        function DP_analyze_start_time_from_datasafed() {
            local oldest_file="${1:?missing oldest file}"
            local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
            local datasafed_pull="${3:?missing datasafed_pull function}"
            local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
            mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
            if [ -f ${info_file} ]; then
              last_oldest_file=$(cat ${info_file})
              last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
              if [ "$last_oldest_file" == "${oldest_file}" ]; then
                # oldest file no changed.
                ${get_start_time_from_file} $last_oldest_file_name
                return
              fi
                 # remove last oldest file
              if [ -f ${last_oldest_file_name} ];then
                  rm -rf ${last_oldest_file_name}
              fi
            fi
            # pull file
            ${datasafed_pull} ${oldest_file}
            # record last oldest file
            echo ${oldest_file} > ${info_file}
            oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
            ${get_start_time_from_file} ${oldest_file_name}
        }
        
        # get the timeZone offset for location, such as Asia/Shanghai
        function getTimeZoneOffset() {
           local timeZone=${1:?missing time zone}
           if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
              echo ${timeZone}
              return
           fi
           local currTime=$(TZ=UTC date)
           local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
           local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
           local offset=$((${zoneHour}-${utcHour}))
           if [ $offset -eq 0 ]; then
              return
           fi
           symbol="+"
           if [ $offset -lt 0 ]; then
             symbol="-" && offset=${offset:1}
           fi
           if [ $offset -lt 10 ];then
              offset="0${offset}"
           fi
           echo "${symbol}${offset}:00"
        }
        
        
        #!/bin/bash
        set -e;
        
        # use datasafed and default config
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
        
        baseBackupStartTimestamp=${DP_BASE_BACKUP_START_TIMESTAMP}
        if [ -f $DATA_DIR/xtrabackup_info ]; then
          DP_BASE_BACKUP_START_TIME=$(cat $DATA_DIR/xtrabackup_info | grep start_time | awk -F ' = ' '{print $2}');
          baseBackupStartTimestamp=$(date -d"${DP_BASE_BACKUP_START_TIME}" +%s)
        fi
        log_index_name="archive_log.index"
        
        function fetch_pitr_binlogs() {
            echo "INFO: fetch binlogs from ${DP_BASE_BACKUP_START_TIME}"
            for file in $(datasafed list -f --recursive --newer-than ${baseBackupStartTimestamp} / -o json | jq -s -r '.[] | sort_by(.mtime) | .[] | .path' | grep .zst);do
                file_without_zst=${file%.*}
                dir_path=`dirname ${file_without_zst}`
                # mkdir the log directory
                mkdir -p ${PITR_DIR}/${dir_path}
                datasafed pull ${file} - | zstd -d -o ${PITR_DIR}/${file_without_zst}
                echo "${PITR_RELATIVE_PATH}/${file_without_zst}" >> ${PITR_DIR}/${log_index_name}
                # check if the binlog file contains the data for recovery time
                log_start_time=$(mysqlbinlog ${PITR_DIR}/${file_without_zst} | grep -m 1 "end_log_pos" | awk '{print $1, $2}'|tr -d '#')
                log_start_timestamp=$(date -d "${log_start_time}" +%s)
                if [[ ${log_start_timestamp} -gt ${DP_RESTORE_TIMESTAMP} ]];then
                   DP_log "${file} out of range ${DP_RESTORE_TIME}"
                   break
                fi
            done
        }
        
        function save_to_restore_file() {
            if [ -f ${DATA_DIR}/.xtrabackup_restore_new_cluster ];then
               restore_signal_file=${DATA_DIR}/.xtrabackup_restore_new_cluster
            else
               restore_signal_file=${DATA_DIR}/.restore_new_cluster
            fi
            echo "archive_log_index=${PITR_RELATIVE_PATH}/${log_index_name}" > ${restore_signal_file}
            kb_recover_time=$(date -d "${DP_RESTORE_TIME}" -u '+%Y-%m-%d %H:%M:%S')
            echo "recovery_target_datetime=${kb_recover_time}" >> ${restore_signal_file}
            sync
        }
        
        fetch_pitr_binlogs
        
        if [ -f ${PITR_DIR}/${log_index_name} ];then
          save_to_restore_file
          DP_log "fetch binlog finished."
        else
          DP_log "didn't get any binlogs."
        fi
    postReady:
    - exec:
        command:
        - bash
        - -c
        - |
          #!/bin/bash
          set -e;
          echo "INFO: waiting for analysis of archive logs to complete."
          while true; do
            if [ ! -f /data/mysql/data/.xtrabackup_restore_new_cluster ] && [ ! -f /data/mysql/data/.restore_new_cluster ];then
              break
            fi
            sleep 1
          done
          rm -rf /data/mysql/data/pitr-logs;
          echo "INFO: remove /data/mysql/data/pitr-logs."
  backup:
    backupData:
      image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g:mysql-8.0
      runOnTargetPodNode: true
      syncProgress:
        enabled: true
        intervalSeconds: 5
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        set -e;
        # log info file
        function DP_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} INFO: $msg"
        }
        
        # log error info
        function DP_error_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} ERROR: $msg"
        }
        
        # Get file names without extensions based on the incoming file path
        function DP_get_file_name_without_ext() {
            local fileName=$1
            local file_without_ext=${fileName%.*}
            echo $(basename ${file_without_ext})
        }
        
        # Save backup status info file for syncing progress.
        # timeFormat: %Y-%m-%dT%H:%M:%SZ
        function DP_save_backup_status_info() {
            local totalSize=$1
            local startTime=$2
            local stopTime=$3
            local timeZone=$4
            local extras=$5
            local timeZoneStr=""
            if [ ! -z ${timeZone} ]; then
               timeZoneStr=",\"timeZone\":\"${timeZone}\""
            fi
            if [ -z "${stopTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
            elif [ -z "${startTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            else
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            fi
        }
        
        
        # Clean up expired logfiles.
        # Default interval is 60s
        # Default rootPath is /
        function DP_purge_expired_files() {
          local currentUnix="${1:?missing current unix}"
          local last_purge_time="${2:?missing last_purge_time}"
          local root_path=${3:-"/"}
          local interval_seconds=${4:-60}
          local diff_time=$((${currentUnix}-${last_purge_time}))
          if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
             return
          fi
          expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
          files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
          for file in ${files[@]}
          do
              datasafed rm ${file}
              echo ${file}
          done
        }
        
        # analyze the start time of the earliest file from the datasafed backend.
        # Then record the file name into dp_oldest_file.info.
        # If the oldest file is no changed, exit the process.
        # This can save traffic consumption.
        function DP_analyze_start_time_from_datasafed() {
            local oldest_file="${1:?missing oldest file}"
            local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
            local datasafed_pull="${3:?missing datasafed_pull function}"
            local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
            mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
            if [ -f ${info_file} ]; then
              last_oldest_file=$(cat ${info_file})
              last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
              if [ "$last_oldest_file" == "${oldest_file}" ]; then
                # oldest file no changed.
                ${get_start_time_from_file} $last_oldest_file_name
                return
              fi
                 # remove last oldest file
              if [ -f ${last_oldest_file_name} ];then
                  rm -rf ${last_oldest_file_name}
              fi
            fi
            # pull file
            ${datasafed_pull} ${oldest_file}
            # record last oldest file
            echo ${oldest_file} > ${info_file}
            oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
            ${get_start_time_from_file} ${oldest_file_name}
        }
        
        # get the timeZone offset for location, such as Asia/Shanghai
        function getTimeZoneOffset() {
           local timeZone=${1:?missing time zone}
           if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
              echo ${timeZone}
              return
           fi
           local currTime=$(TZ=UTC date)
           local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
           local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
           local offset=$((${zoneHour}-${utcHour}))
           if [ $offset -eq 0 ]; then
              return
           fi
           symbol="+"
           if [ $offset -lt 0 ]; then
             symbol="-" && offset=${offset:1}
           fi
           if [ $offset -lt 10 ];then
              offset="0${offset}"
           fi
           echo "${symbol}${offset}:00"
        }
        
        
        # export wal-g environments
        export WALG_MYSQL_DATASOURCE_NAME="${DP_DB_USER}:${DP_DB_PASSWORD}@tcp(${DP_DB_HOST}:${DP_DB_PORT})/mysql"
        export WALG_COMPRESSION_METHOD=zstd
        # use datasafed and default config
        export WALG_DATASAFED_CONFIG=""
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export WALG_MYSQL_CHECK_GTIDS=true
        export MYSQL_PWD=${DP_DB_PASSWORD}
        # work directory to save necessary file for backup
        export KB_BACKUP_WORKDIR=${VOLUME_DATA_DIR}/kb-backup
        
        # get binlog basename
        MYSQL_CMD="mysql -u ${DP_DB_USER} -h ${DP_DB_HOST} -N"
        log_bin_basename=$(${MYSQL_CMD} -e "SHOW VARIABLES LIKE 'log_bin_basename';" | awk -F'\t' '{print $2}')
        if [ -z ${log_bin_basename} ]; then
           echo "ERROR: pod/${DP_TARGET_POD_NAME} connect failed."
           exit 1
        fi
        LOG_DIR=$(dirname $log_bin_basename)
        LOG_PREFIX=$(basename $log_bin_basename)
        
        global_latest_bin_log=""
        global_last_flush_logs_time=$(date +%s)
        global_last_purge_time=$(date +%s)
        global_old_size=0
        global_flush_bin_logs_interval=600
        
        if [[ ${DP_ARCHIVE_INTERVAL} =~ ^[0-9]+s$ ]];then
          global_flush_bin_logs_interval=${DP_ARCHIVE_INTERVAL%s}
        fi
        
        # checks if the mysql process is ok
        function check_mysql_process() {
            is_ok=false
            for ((i=1;i<4;i++));do
              role=$(${MYSQL_CMD} -e "select role from information_schema.wesql_cluster_local;" | head -n 1)
              if [[ $? -eq 0  && (-z ${TARGET_POD_ROLE} || "${TARGET_POD_ROLE,,}" == "${role,,}") ]]; then
                is_ok=true
                break
              fi
              DP_error_log "target backup pod/${DP_TARGET_POD_NAME} is not OK, target role: ${TARGET_POD_ROLE}, current role: ${role}, retry detection!"
              sleep 1
            done
            if [[ ${is_ok} == "false" ]];then
              DP_error_log "target backup pod/${DP_TARGET_POD_NAME} is not OK, target role: ${TARGET_POD_ROLE}, current role: ${role}!"
              exit 1
            fi
        }
        
        # clean up expired logfiles, interval is 60s
        function purge_expired_files() {
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          local currentUnix=$(date +%s)
          info=$(DP_purge_expired_files ${currentUnix} ${global_last_purge_time})
          if [ ! -z "${info}" ]; then
            global_last_purge_time=${currentUnix}
            DP_log "cleanup expired binlog files: ${info}"
            local TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
            DP_save_backup_status_info "${TOTAL_SIZE}"
          fi
        }
        
        # flush bin logs, interval is 600s by default
        function flush_binlogs() {
          local binlog=$(ls -Ft ${LOG_DIR}/|grep -e "^${LOG_PREFIX}.*[[:digit:]]$" |head -n 1)
          if [ -z ${binlog} ]; then
             return
          fi
          local curr_time=$(date +%s)
          # if size greater than FLUSH_BINLOG_AFTER_SIZE, will flush binary logs.
          if [ $(stat -c%s ${LOG_DIR}/${binlog}) -gt ${FLUSH_BINLOG_AFTER_SIZE} ]; then
             DP_log "flush binary logs"
             ${MYSQL_CMD} -e "flush binary logs";
             global_last_flush_logs_time=${curr_time}
             return
          fi
          local diff_time=$((${curr_time}-${global_last_flush_logs_time}))
          if [[ ${diff_time} -lt ${global_flush_bin_logs_interval} ]]; then
             return
          fi
          local LATEST_TRANS=$(mysqlbinlog ${LOG_DIR}/${binlog} |grep 'Xid =' |head -n 1)
          # only flush bin logs when Xid exists
          if [[ -n "${LATEST_TRANS}" ]]; then
            DP_log "flush binary logs"
            ${MYSQL_CMD} -e "flush binary logs";
          fi
          global_last_flush_logs_time=${curr_time}
        }
        
        # upload bin logs by walg
        function upload_bin_logs() {
            export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH/${DP_TARGET_POD_NAME}"
            global_latest_bin_log=$(ls -Ftr ${LOG_DIR}/|grep -e "^${LOG_PREFIX}.*[[:digit:]]$"|tail -n 1)
            if [ ! -z ${global_latest_bin_log} ];then
               global_latest_bin_log="${LOG_DIR}/${global_latest_bin_log}"
            fi
            wal-g binlog-push;
        }
        
        # get binlog start time
        function get_binlog_start_time() {
          local binlog="${1:?missing binlog name}"
          local time=$(mysqlbinlog ${binlog} | grep -m 1 "end_log_pos" | awk '{print $1, $2}'|tr -d '#')
          local time=$(date -d "$time" -u '+%Y-%m-%dT%H:%M:%SZ')
          echo $time
        }
        
        # pull binlog and decompress
        function pull_binlog() {
            file="${1:?missing file name}"
            fileName=$(basename ${file})
            datasafed pull ${file} ${fileName}
            zstd -d --rm ${fileName}
        }
        
        # get the start time for backup.status.timeRange
        function get_start_time_for_range() {
           local oldest_bin_log=$(datasafed list -f --recursive / -o json | jq -s -r '.[] | sort_by(.mtime) | .[] | .path' | grep .zst | head -n 1)
           if [ ! -z ${oldest_bin_log} ]; then
             START_TIME=$(DP_analyze_start_time_from_datasafed "${oldest_bin_log}" get_binlog_start_time pull_binlog)
             echo ${START_TIME}
           fi
        }
        
        # save backup status info to sync file
        function save_backup_status() {
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          local TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
          # if no size changes, return
          if [[ ${TOTAL_SIZE} == ${global_old_size} ]];then
             return
          fi
          global_old_size=${TOTAL_SIZE}
          local START_TIME=$(get_start_time_for_range)
          local STOP_TIME=$(get_binlog_start_time ${global_latest_bin_log})
          DP_save_backup_status_info "${TOTAL_SIZE}" "${START_TIME}" "${STOP_TIME}"
        }
        
        # trap term signal
        trap "echo 'Terminating...' && sync && exit 0" TERM
        DP_log "start to archive binlog"
        while true; do
          # check if mysql process is ok
          check_mysql_process
        
          # flush bin logs
          flush_binlogs
        
          # upload bin log
          upload_bin_logs
        
          # save backup status which will be updated to `backup` CR by the sidecar
          save_backup_status
        
          # purge the expired bin logs
          purge_expired_files
          sleep ${BINLOG_ARCHIVE_INTERVAL}
        done
---
# Source: gemini/templates/actionset/mongo-pitr.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  name: mongodb-pitr
  labels:
    clusterdefinition.kubeblocks.io/name: mongodb
spec:
  backupType: Continuous
  env:
    - name: ARCHIVE_AFTER_SIZE
      value: "20971520"
  backup:
    backupData:
      image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g:mongo-5.0
      syncProgress:
        enabled: true
        intervalSeconds: 5
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        set -e;
        # log info file
        function DP_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} INFO: $msg"
        }
        
        # log error info
        function DP_error_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} ERROR: $msg"
        }
        
        # Get file names without extensions based on the incoming file path
        function DP_get_file_name_without_ext() {
            local fileName=$1
            local file_without_ext=${fileName%.*}
            echo $(basename ${file_without_ext})
        }
        
        # Save backup status info file for syncing progress.
        # timeFormat: %Y-%m-%dT%H:%M:%SZ
        function DP_save_backup_status_info() {
            local totalSize=$1
            local startTime=$2
            local stopTime=$3
            local timeZone=$4
            local extras=$5
            local timeZoneStr=""
            if [ ! -z ${timeZone} ]; then
               timeZoneStr=",\"timeZone\":\"${timeZone}\""
            fi
            if [ -z "${stopTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
            elif [ -z "${startTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            else
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            fi
        }
        
        
        # Clean up expired logfiles.
        # Default interval is 60s
        # Default rootPath is /
        function DP_purge_expired_files() {
          local currentUnix="${1:?missing current unix}"
          local last_purge_time="${2:?missing last_purge_time}"
          local root_path=${3:-"/"}
          local interval_seconds=${4:-60}
          local diff_time=$((${currentUnix}-${last_purge_time}))
          if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
             return
          fi
          expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
          files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
          for file in ${files[@]}
          do
              datasafed rm ${file}
              echo ${file}
          done
        }
        
        # analyze the start time of the earliest file from the datasafed backend.
        # Then record the file name into dp_oldest_file.info.
        # If the oldest file is no changed, exit the process.
        # This can save traffic consumption.
        function DP_analyze_start_time_from_datasafed() {
            local oldest_file="${1:?missing oldest file}"
            local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
            local datasafed_pull="${3:?missing datasafed_pull function}"
            local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
            mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
            if [ -f ${info_file} ]; then
              last_oldest_file=$(cat ${info_file})
              last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
              if [ "$last_oldest_file" == "${oldest_file}" ]; then
                # oldest file no changed.
                ${get_start_time_from_file} $last_oldest_file_name
                return
              fi
                 # remove last oldest file
              if [ -f ${last_oldest_file_name} ];then
                  rm -rf ${last_oldest_file_name}
              fi
            fi
            # pull file
            ${datasafed_pull} ${oldest_file}
            # record last oldest file
            echo ${oldest_file} > ${info_file}
            oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
            ${get_start_time_from_file} ${oldest_file_name}
        }
        
        # get the timeZone offset for location, such as Asia/Shanghai
        function getTimeZoneOffset() {
           local timeZone=${1:?missing time zone}
           if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
              echo ${timeZone}
              return
           fi
           local currTime=$(TZ=UTC date)
           local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
           local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
           local offset=$((${zoneHour}-${utcHour}))
           if [ $offset -eq 0 ]; then
              return
           fi
           symbol="+"
           if [ $offset -lt 0 ]; then
             symbol="-" && offset=${offset:1}
           fi
           if [ $offset -lt 10 ];then
              offset="0${offset}"
           fi
           echo "${symbol}${offset}:00"
        }
        
        
        # retention 8 days by default
        retention_minute=""
        if [ ! -z ${DP_TTL_SECONDS} ];then
          retention_minute=$((${DP_TTL_SECONDS}/60))
        fi
        export MONGODB_URI="mongodb://${DP_DB_USER}:${DP_DB_PASSWORD}@${DP_DB_HOST}:${DP_DB_PORT}/?authSource=admin"
        export OPLOG_ARCHIVE_TIMEOUT_INTERVAL=${DP_ARCHIVE_INTERVAL}
        export OPLOG_ARCHIVE_AFTER_SIZE=${ARCHIVE_AFTER_SIZE}
        # use datasafed and default config
        export WALG_DATASAFED_CONFIG=""
        export WALG_COMPRESSION_METHOD=zstd
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
        # retention time
        export OPLOG_PITR_DISCOVERY_INTERVAL=168h
        retryTimes=0
        global_last_purge_time=$(date +%s)
        wal_g_pid=0
        old_size=0
        
        do_oplog_push(){
          DP_log "start to archive oplog..."
          DP_log "wal-g oplog-push > /tmp/wal-g-oplog.log"
          wal-g oplog-push >/tmp/wal-g-oplog.log 2>&1 &
          wal_g_pid=$!
          sleep 1
          cat /tmp/wal-g-oplog.log
        }
        
        check_oplog_push_process(){
          # check wal-g oplog-push process
          ps -p $wal_g_pid >/dev/null
          if [ $? -ne 0 ]; then
            DP_error_log 'the process "wal-g oplog-push" does not exist!'
            errorLog=$(cat /tmp/wal-g-oplog.log)
            echo $errorLog && exit 1
          fi
          # check role of the connected mongodb
          export CLIENT=`which mongosh&&echo mongosh||echo mongo`
          isPrimary=$($CLIENT -u ${DP_DB_USER} -p ${DP_DB_PASSWORD} --port ${DP_DB_PORT} --host ${DP_DB_HOST} --authenticationDatabase admin  --eval 'rs.isMaster().ismaster' --quiet)
          if [ "${isPrimary}" != "true" ]; then
            DP_log "isPrimary: ${isPrimary}"
            retryTimes=$(($retryTimes+1))
          else
            retryTimes=0
          fi
          if [ $retryTimes -ge 3 ]; then
             DP_error_log "the current mongo instance is not a primary node, 3 attempts have been made!" && kill $wal_g_pid
          fi
        }
        
        # write the startTime and stopTime to backup.info file
        dump_start_and_stop_time() {
           local TOTAL_SIZE=$(datasafed stat /oplog_005 | grep TotalSize | awk '{print $2}')
           # if no size changes, return
           if [[ -z ${TOTAL_SIZE} || ${TOTAL_SIZE} -eq 0 || ${TOTAL_SIZE} == ${old_size} ]];then
              return
           fi
           old_size=${TOTAL_SIZE}
           OLDEST_FILE=$(datasafed list -f -s mtime /oplog_005 | head -n 1)
           LATEST_FILE=$(datasafed list -f -s mtime /oplog_005 | tail -n 1)
           OLDEST_FILE=$(basename ${OLDEST_FILE}) && OLDEST_FILE=${OLDEST_FILE#*_} && LOG_START_TIME=${OLDEST_FILE%%.*}
           LATEST_FILE=$(basename ${LATEST_FILE}) && LATEST_FILE=${LATEST_FILE##*_} && LOG_STOP_TIME=${LATEST_FILE%%.*}
           if [ ! -z $LOG_START_TIME ]; then
               START_TIME=$(date -d "@${LOG_START_TIME}" -u '+%Y-%m-%dT%H:%M:%SZ')
               STOP_TIME=$(date -d "@${LOG_STOP_TIME}" -u '+%Y-%m-%dT%H:%M:%SZ')
               echo "{\"totalSize\":\"$TOTAL_SIZE\",\"timeRange\":{\"start\":\"${START_TIME}\",\"end\":\"${STOP_TIME}\"}}" > ${DP_BACKUP_INFO_FILE}
           fi
        }
        # purge the expired files, default interval is 60s
        purge_expired_files() {
          local currentUnix=$(date +%s)
          info=$(DP_purge_expired_files ${currentUnix} ${global_last_purge_time} /oplog_005)
          if [ ! -z "${info}" ]; then
            global_last_purge_time=${currentUnix}
            DP_log "cleanup expired oplog files: ${info}"
            local TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
            DP_save_backup_status_info "${TOTAL_SIZE}"
          fi
        }
        
        # create oplog push process
        do_oplog_push
        # trap term signal
        trap "echo 'Terminating...' && kill $wal_g_pid" TERM
        while true; do
          check_oplog_push_process
          sleep 1
          dump_start_and_stop_time
          # purge the expired oplog
          purge_expired_files
        done
  restore:
    postReady:
    - job:
        image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g:mongo-5.0
        runOnTargetPodNode: false
        command:
        - bash
        - -c
        - |
          #!/bin/bash
          set -e;
          # log info file
          function DP_log() {
              msg=$1
              local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
              echo "${curr_date} INFO: $msg"
          }
          
          # log error info
          function DP_error_log() {
              msg=$1
              local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
              echo "${curr_date} ERROR: $msg"
          }
          
          # Get file names without extensions based on the incoming file path
          function DP_get_file_name_without_ext() {
              local fileName=$1
              local file_without_ext=${fileName%.*}
              echo $(basename ${file_without_ext})
          }
          
          # Save backup status info file for syncing progress.
          # timeFormat: %Y-%m-%dT%H:%M:%SZ
          function DP_save_backup_status_info() {
              local totalSize=$1
              local startTime=$2
              local stopTime=$3
              local timeZone=$4
              local extras=$5
              local timeZoneStr=""
              if [ ! -z ${timeZone} ]; then
                 timeZoneStr=",\"timeZone\":\"${timeZone}\""
              fi
              if [ -z "${stopTime}" ];then
                echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
              elif [ -z "${startTime}" ];then
                echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
              else
                echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
              fi
          }
          
          
          # Clean up expired logfiles.
          # Default interval is 60s
          # Default rootPath is /
          function DP_purge_expired_files() {
            local currentUnix="${1:?missing current unix}"
            local last_purge_time="${2:?missing last_purge_time}"
            local root_path=${3:-"/"}
            local interval_seconds=${4:-60}
            local diff_time=$((${currentUnix}-${last_purge_time}))
            if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
               return
            fi
            expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
            files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
            for file in ${files[@]}
            do
                datasafed rm ${file}
                echo ${file}
            done
          }
          
          # analyze the start time of the earliest file from the datasafed backend.
          # Then record the file name into dp_oldest_file.info.
          # If the oldest file is no changed, exit the process.
          # This can save traffic consumption.
          function DP_analyze_start_time_from_datasafed() {
              local oldest_file="${1:?missing oldest file}"
              local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
              local datasafed_pull="${3:?missing datasafed_pull function}"
              local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
              mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
              if [ -f ${info_file} ]; then
                last_oldest_file=$(cat ${info_file})
                last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
                if [ "$last_oldest_file" == "${oldest_file}" ]; then
                  # oldest file no changed.
                  ${get_start_time_from_file} $last_oldest_file_name
                  return
                fi
                   # remove last oldest file
                if [ -f ${last_oldest_file_name} ];then
                    rm -rf ${last_oldest_file_name}
                fi
              fi
              # pull file
              ${datasafed_pull} ${oldest_file}
              # record last oldest file
              echo ${oldest_file} > ${info_file}
              oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
              ${get_start_time_from_file} ${oldest_file_name}
          }
          
          # get the timeZone offset for location, such as Asia/Shanghai
          function getTimeZoneOffset() {
             local timeZone=${1:?missing time zone}
             if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
                echo ${timeZone}
                return
             fi
             local currTime=$(TZ=UTC date)
             local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
             local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
             local offset=$((${zoneHour}-${utcHour}))
             if [ $offset -eq 0 ]; then
                return
             fi
             symbol="+"
             if [ $offset -lt 0 ]; then
               symbol="-" && offset=${offset:1}
             fi
             if [ $offset -lt 10 ];then
                offset="0${offset}"
             fi
             echo "${symbol}${offset}:00"
          }
          
          
          set -e
          export MONGODB_URI="mongodb://${MONGODB_ROOT_USER}:${MONGODB_ROOT_PASSWORD}@${DP_DB_HOST}:${DP_DB_PORT}/?authSource=admin&replicaSet=${KB_CLUSTER_COMP_NAME}"
          # use datasafed and default config
          export WALG_DATASAFED_CONFIG=""
          export WALG_COMPRESSION_METHOD=zstd
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          DP_log "wal-g oplog-replay ${DP_BASE_BACKUP_START_TIMESTAMP}.1 ${DP_RESTORE_TIMESTAMP}.1"
          wal-g oplog-replay ${DP_BASE_BACKUP_START_TIMESTAMP}.1 ${DP_RESTORE_TIMESTAMP}.1
---
# Source: gemini/templates/actionset/mysql-pitr.yaml
apiVersion: dataprotection.kubeblocks.io/v1alpha1
kind: ActionSet
metadata:
  labels:
    clusterdefinition.kubeblocks.io/name: mysql
  name: mysql-pitr
spec:
  backupType: Continuous
  env:
    - name: VOLUME_DATA_DIR
      value: /var/lib/mysql
    - name: DATA_DIR
      value: /var/lib/mysql/data
    - name: PITR_RELATIVE_PATH
      value: pitr-logs
    - name: PITR_DIR
      value: "$(VOLUME_DATA_DIR)/$(PITR_RELATIVE_PATH)"
    - name: CONF_DIR
      value: "$(VOLUME_DATA_DIR)/conf"
    - name: TIME_FORMAT
      value: 2006-01-02T15:04:05Z
    - name: TARGET_POD_ROLE
      # TODO input by backup policy
      value: leader
    - name: DP_DB_PORT
      value: "3306"
    - name: BINLOG_ARCHIVE_INTERVAL
      value: "10"
    - name: FLUSH_BINLOG_INTERVAL_SECONDS
      value: $(DP_ARCHIVE_INTERVAL)
    - name: FLUSH_BINLOG_AFTER_SIZE
      # if the binlog size greater than 500Mi, will flush the bin log.
      value: "524288000"
  backup:
    backupData:
      image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g:mysql-8.0
      runOnTargetPodNode: true
      syncProgress:
        enabled: true
        intervalSeconds: 5
      command:
      - bash
      - -c
      - |
        #!/bin/bash
        set -e;
        # log info file
        function DP_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} INFO: $msg"
        }
        
        # log error info
        function DP_error_log() {
            msg=$1
            local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
            echo "${curr_date} ERROR: $msg"
        }
        
        # Get file names without extensions based on the incoming file path
        function DP_get_file_name_without_ext() {
            local fileName=$1
            local file_without_ext=${fileName%.*}
            echo $(basename ${file_without_ext})
        }
        
        # Save backup status info file for syncing progress.
        # timeFormat: %Y-%m-%dT%H:%M:%SZ
        function DP_save_backup_status_info() {
            local totalSize=$1
            local startTime=$2
            local stopTime=$3
            local timeZone=$4
            local extras=$5
            local timeZoneStr=""
            if [ ! -z ${timeZone} ]; then
               timeZoneStr=",\"timeZone\":\"${timeZone}\""
            fi
            if [ -z "${stopTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
            elif [ -z "${startTime}" ];then
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            else
              echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
            fi
        }
        
        
        # Clean up expired logfiles.
        # Default interval is 60s
        # Default rootPath is /
        function DP_purge_expired_files() {
          local currentUnix="${1:?missing current unix}"
          local last_purge_time="${2:?missing last_purge_time}"
          local root_path=${3:-"/"}
          local interval_seconds=${4:-60}
          local diff_time=$((${currentUnix}-${last_purge_time}))
          if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
             return
          fi
          expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
          files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
          for file in ${files[@]}
          do
              datasafed rm ${file}
              echo ${file}
          done
        }
        
        # analyze the start time of the earliest file from the datasafed backend.
        # Then record the file name into dp_oldest_file.info.
        # If the oldest file is no changed, exit the process.
        # This can save traffic consumption.
        function DP_analyze_start_time_from_datasafed() {
            local oldest_file="${1:?missing oldest file}"
            local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
            local datasafed_pull="${3:?missing datasafed_pull function}"
            local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
            mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
            if [ -f ${info_file} ]; then
              last_oldest_file=$(cat ${info_file})
              last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
              if [ "$last_oldest_file" == "${oldest_file}" ]; then
                # oldest file no changed.
                ${get_start_time_from_file} $last_oldest_file_name
                return
              fi
                 # remove last oldest file
              if [ -f ${last_oldest_file_name} ];then
                  rm -rf ${last_oldest_file_name}
              fi
            fi
            # pull file
            ${datasafed_pull} ${oldest_file}
            # record last oldest file
            echo ${oldest_file} > ${info_file}
            oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
            ${get_start_time_from_file} ${oldest_file_name}
        }
        
        # get the timeZone offset for location, such as Asia/Shanghai
        function getTimeZoneOffset() {
           local timeZone=${1:?missing time zone}
           if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
              echo ${timeZone}
              return
           fi
           local currTime=$(TZ=UTC date)
           local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
           local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
           local offset=$((${zoneHour}-${utcHour}))
           if [ $offset -eq 0 ]; then
              return
           fi
           symbol="+"
           if [ $offset -lt 0 ]; then
             symbol="-" && offset=${offset:1}
           fi
           if [ $offset -lt 10 ];then
              offset="0${offset}"
           fi
           echo "${symbol}${offset}:00"
        }
        
        
        # export wal-g environments
        export WALG_MYSQL_DATASOURCE_NAME="${DP_DB_USER}:${DP_DB_PASSWORD}@tcp(${DP_DB_HOST}:${DP_DB_PORT})/mysql"
        export WALG_COMPRESSION_METHOD=zstd
        # use datasafed and default config
        export WALG_DATASAFED_CONFIG=""
        export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
        export WALG_MYSQL_CHECK_GTIDS=true
        export MYSQL_PWD=${DP_DB_PASSWORD}
        # work directory to save necessary file for backup
        export KB_BACKUP_WORKDIR=${VOLUME_DATA_DIR}/kb-backup
        
        # get binlog basename
        MYSQL_CMD="mysql -u ${DP_DB_USER} -h ${DP_DB_HOST} -N"
        MYSQL_CMD_WITH_COL="mysql -u ${DP_DB_USER} -h ${DP_DB_HOST}"
        log_bin_basename=$(${MYSQL_CMD} -e "SHOW VARIABLES LIKE 'log_bin_basename';" | awk -F'\t' '{print $2}')
        if [ -z "${log_bin_basename}" ]; then
           echo "ERROR: pod/${DP_TARGET_POD_NAME} connect failed."
           exit 1
        fi
        LOG_DIR=$(dirname "$log_bin_basename")
        LOG_PREFIX=$(basename "$log_bin_basename")
        
        global_latest_bin_log=""
        global_last_flush_logs_time=$(date +%s)
        global_last_purge_time=$(date +%s)
        global_old_size=0
        global_flush_bin_logs_interval=600
        
        if [[ ${DP_ARCHIVE_INTERVAL} =~ ^[0-9]+s$ ]];then
          global_flush_bin_logs_interval=${DP_ARCHIVE_INTERVAL%s}
        fi
        
        global_backup_in_secondary=
        if [ "${TARGET_POD_ROLE}" == "primary" ]; then
           global_backup_in_secondary=f
        elif [ "${TARGET_POD_ROLE}" == "secondary" ]; then
           global_backup_in_secondary=t
        fi
        
        # checks if the mysql process is ok
        function check_mysql_process() {
            is_ok=false
            for ((i=1;i<4;i++));do
              is_secondary=$(${MYSQL_CMD_WITH_COL} -e "show slave status\G" 2>/dev/null | grep 'Slave_IO_Running: Yes' &>/dev/null && echo "t" || echo "f")
              if [[ $? -eq 0  && (-z ${TARGET_POD_ROLE} || "${global_backup_in_secondary}" == "${is_secondary}") ]]; then
                is_ok=true
                break
              fi
              DP_error_log "target backup pod/${DP_TARGET_POD_NAME} is not OK, target role: ${TARGET_POD_ROLE}, is_secondary: ${is_secondary}, retry detection!"
              sleep 1
            done
            if [[ ${is_ok} == "false" ]];then
              DP_error_log "target backup pod/${DP_TARGET_POD_NAME} is not OK, target role: ${TARGET_POD_ROLE}, is_secondary: ${is_secondary}"
              exit 1
            fi
        }
        
        # clean up expired logfiles, interval is 60s
        function purge_expired_files() {
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          local currentUnix=$(date +%s)
          info=$(DP_purge_expired_files "${currentUnix}" "${global_last_purge_time}")
          if [ ! -z "${info}" ]; then
            global_last_purge_time=${currentUnix}
            DP_log "cleanup expired binlog files: ${info}"
            local TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
            DP_save_backup_status_info "${TOTAL_SIZE}"
          fi
        }
        
        # flush bin logs, interval is 600s by default
        function flush_binlogs() {
          local binlog=$(ls -Ft ${LOG_DIR}/|grep -e "^${LOG_PREFIX}.*[[:digit:]]$" |head -n 1)
          if [ -z ${binlog} ]; then
             return
          fi
          local curr_time=$(date +%s)
          # if size greater than FLUSH_BINLOG_AFTER_SIZE, will flush binary logs.
          if [ $(stat -c%s ${LOG_DIR}/${binlog}) -gt "${FLUSH_BINLOG_AFTER_SIZE}" ]; then
             DP_log "flush binary logs"
             ${MYSQL_CMD} -e "flush binary logs";
             global_last_flush_logs_time=${curr_time}
             return
          fi
          local diff_time=$((${curr_time}-${global_last_flush_logs_time}))
          if [[ ${diff_time} -lt ${global_flush_bin_logs_interval} ]]; then
             return
          fi
          local LATEST_TRANS=$(mysqlbinlog "${LOG_DIR}/${binlog}" |grep 'Xid =' |head -n 1)
          # only flush bin logs when Xid exists
          if [[ -n "${LATEST_TRANS}" ]]; then
            DP_log "flush binary logs"
            ${MYSQL_CMD} -e "flush binary logs";
          fi
          global_last_flush_logs_time=${curr_time}
        }
        
        # upload bin logs by walg
        function upload_bin_logs() {
            export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
            global_latest_bin_log=$(ls -Ftr "${LOG_DIR}"/|grep -e "^${LOG_PREFIX}.*[[:digit:]]$"|tail -n 1)
            if [ ! -z "${global_latest_bin_log}" ];then
               global_latest_bin_log="${LOG_DIR}/${global_latest_bin_log}"
            fi
            wal-g binlog-push;
        }
        
        # get binlog start time
        function get_binlog_start_time() {
          local binlog="${1:?missing binlog name}"
          local time=$(mysqlbinlog "${binlog}" | grep -m 1 "end_log_pos" | awk '{print $1, $2}'|tr -d '#')
          local time=$(date -d "$time" -u '+%Y-%m-%dT%H:%M:%SZ')
          echo $time
        }
        
        # pull binlog and decompress
        function pull_binlog() {
            file="${1:?missing file name}"
            fileName=$(basename "${file}")
            datasafed pull "${file}" "${fileName}"
            zstd -d --rm "${fileName}"
        }
        
        # get the start time for backup.status.timeRange
        function get_start_time_for_range() {
           local oldest_bin_log=$(datasafed list -f --recursive / -o json | jq -s -r '.[] | sort_by(.mtime) | .[] | .path' | grep .zst | head -n 1)
           if [ ! -z ${oldest_bin_log} ]; then
             START_TIME=$(DP_analyze_start_time_from_datasafed "${oldest_bin_log}" get_binlog_start_time pull_binlog)
             echo ${START_TIME}
           fi
        }
        
        # save backup status info to sync file
        function save_backup_status() {
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          local TOTAL_SIZE=$(datasafed stat / | grep TotalSize | awk '{print $2}')
          # if no size changes, return
          if [[ ${TOTAL_SIZE} == ${global_old_size} ]];then
             return
          fi
          global_old_size=${TOTAL_SIZE}
          local START_TIME=$(get_start_time_for_range)
          local STOP_TIME=$(get_binlog_start_time ${global_latest_bin_log})
          DP_save_backup_status_info "${TOTAL_SIZE}" "${START_TIME}" "${STOP_TIME}"
        }
        
        # trap term signal
        trap "echo 'Terminating...' && sync && exit 0" TERM
        DP_log "start to archive binlog"
        while true; do
          # check if mysql process is ok
          check_mysql_process
        
          # flush bin logs
          flush_binlogs
        
          # upload bin log
          upload_bin_logs
        
          # save backup status which will be updated to `backup` CR by the sidecar
          save_backup_status
        
          # purge the expired bin logs
          purge_expired_files
          sleep "${BINLOG_ARCHIVE_INTERVAL}"
        done
  restore:
    postReady:
    - job:
        image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/wal-g-mysql:2.0.1-1-ubuntu
        runOnTargetPodNode: true
        command:
        - bash
        - -c
        - |
          #!/bin/bash
          set -e;
          # log info file
          function DP_log() {
              msg=$1
              local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
              echo "${curr_date} INFO: $msg"
          }
          
          # log error info
          function DP_error_log() {
              msg=$1
              local curr_date=$(date -u '+%Y-%m-%d %H:%M:%S')
              echo "${curr_date} ERROR: $msg"
          }
          
          # Get file names without extensions based on the incoming file path
          function DP_get_file_name_without_ext() {
              local fileName=$1
              local file_without_ext=${fileName%.*}
              echo $(basename ${file_without_ext})
          }
          
          # Save backup status info file for syncing progress.
          # timeFormat: %Y-%m-%dT%H:%M:%SZ
          function DP_save_backup_status_info() {
              local totalSize=$1
              local startTime=$2
              local stopTime=$3
              local timeZone=$4
              local extras=$5
              local timeZoneStr=""
              if [ ! -z ${timeZone} ]; then
                 timeZoneStr=",\"timeZone\":\"${timeZone}\""
              fi
              if [ -z "${stopTime}" ];then
                echo "{\"totalSize\":\"${totalSize}\"}" > ${DP_BACKUP_INFO_FILE}
              elif [ -z "${startTime}" ];then
                echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
              else
                echo "{\"totalSize\":\"${totalSize}\",\"extras\":[${extras}],\"timeRange\":{\"start\":\"${startTime}\",\"end\":\"${stopTime}\"${timeZoneStr}}}" > ${DP_BACKUP_INFO_FILE}
              fi
          }
          
          
          # Clean up expired logfiles.
          # Default interval is 60s
          # Default rootPath is /
          function DP_purge_expired_files() {
            local currentUnix="${1:?missing current unix}"
            local last_purge_time="${2:?missing last_purge_time}"
            local root_path=${3:-"/"}
            local interval_seconds=${4:-60}
            local diff_time=$((${currentUnix}-${last_purge_time}))
            if [[ -z ${DP_TTL_SECONDS} || ${diff_time} -lt ${interval_seconds} ]]; then
               return
            fi
            expiredUnix=$((${currentUnix}-${DP_TTL_SECONDS}))
            files=$(datasafed list -f --recursive --older-than ${expiredUnix} ${root_path} )
            for file in ${files[@]}
            do
                datasafed rm ${file}
                echo ${file}
            done
          }
          
          # analyze the start time of the earliest file from the datasafed backend.
          # Then record the file name into dp_oldest_file.info.
          # If the oldest file is no changed, exit the process.
          # This can save traffic consumption.
          function DP_analyze_start_time_from_datasafed() {
              local oldest_file="${1:?missing oldest file}"
              local get_start_time_from_file="${2:?missing get_start_time_from_file function}"
              local datasafed_pull="${3:?missing datasafed_pull function}"
              local info_file="${KB_BACKUP_WORKDIR}/dp_oldest_file.info"
              mkdir -p ${KB_BACKUP_WORKDIR} && cd ${KB_BACKUP_WORKDIR}
              if [ -f ${info_file} ]; then
                last_oldest_file=$(cat ${info_file})
                last_oldest_file_name=$(DP_get_file_name_without_ext ${last_oldest_file})
                if [ "$last_oldest_file" == "${oldest_file}" ]; then
                  # oldest file no changed.
                  ${get_start_time_from_file} $last_oldest_file_name
                  return
                fi
                   # remove last oldest file
                if [ -f ${last_oldest_file_name} ];then
                    rm -rf ${last_oldest_file_name}
                fi
              fi
              # pull file
              ${datasafed_pull} ${oldest_file}
              # record last oldest file
              echo ${oldest_file} > ${info_file}
              oldest_file_name=$(DP_get_file_name_without_ext ${oldest_file})
              ${get_start_time_from_file} ${oldest_file_name}
          }
          
          # get the timeZone offset for location, such as Asia/Shanghai
          function getTimeZoneOffset() {
             local timeZone=${1:?missing time zone}
             if [[ $timeZone == "+"* ]] || [[ $timeZone == "-"* ]] ; then
                echo ${timeZone}
                return
             fi
             local currTime=$(TZ=UTC date)
             local utcHour=$(TZ=UTC date -d "${currTime}" +"%H")
             local zoneHour=$(TZ=${timeZone} date -d "${currTime}" +"%H")
             local offset=$((${zoneHour}-${utcHour}))
             if [ $offset -eq 0 ]; then
                return
             fi
             symbol="+"
             if [ $offset -lt 0 ]; then
               symbol="-" && offset=${offset:1}
             fi
             if [ $offset -lt 10 ];then
                offset="0${offset}"
             fi
             echo "${symbol}${offset}:00"
          }
          
          
          #
          # Refer: https://github.com/wal-g/wal-g/blob/master/docs/MySQL.md#mysql---using-with-xtrabackup
          #
          # export wal-g environments
          export WALG_MYSQL_DATASOURCE_NAME="${MYSQL_ROOT_USER}:${MYSQL_ROOT_PASSWORD}@tcp(${DP_DB_HOST}:${DP_DB_PORT})/mysql"
          export WALG_COMPRESSION_METHOD=zstd
          # use datasafed and default config
          export WALG_DATASAFED_CONFIG=""
          export PATH="$PATH:$DP_DATASAFED_BIN_PATH"
          export WALG_MYSQL_CHECK_GTIDS=true
          export MYSQL_PWD=${MYSQL_ROOT_PASSWORD}
          export DATASAFED_BACKEND_BASE_PATH="$DP_BACKUP_BASE_PATH"
          export WALG_MYSQL_BINLOG_DST=${PITR_DIR}
          export WALG_MYSQL_BINLOG_REPLAY_COMMAND="mysqlbinlog --stop-datetime=\"\$WALG_MYSQL_BINLOG_END_TS\" \"\$WALG_MYSQL_CURRENT_BINLOG\" | mysql -h ${DP_DB_HOST}"
          
          # If pitr logs dir exists, it may be created by previous failed restore.
          if [ -d "$WALG_MYSQL_BINLOG_DST" ]; then
              DP_log "pitr logs dir $WALG_MYSQL_BINLOG_DST exists, may be created by previous failed restore, exit"
              exit 1
          fi
          
          DP_log "mkdir -p $WALG_MYSQL_BINLOG_DST"
          mkdir -p "$WALG_MYSQL_BINLOG_DST"
          
          DP_log "wal-g binlog-replay --since-time=${DP_BASE_BACKUP_START_TIME} --until=${DP_RESTORE_TIME}"
          wal-g binlog-replay --since-time="${DP_BASE_BACKUP_START_TIME}" --until="${DP_RESTORE_TIME}"
          echo "mysql binlog replay done."
---
# Source: gemini/templates/monitor/apecloud-mysql.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: "apecloud-mysql"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "apecloud-mysql"
  components:
    - componentDefRef: mysql
      collectors:
        - name: mysql
          engineType: mysql
          monitorType: mysql
          receiver: apecloudmysql
          connectionSpec:
            config:
              allow_native_passwords: true
              collection_interval: '`settings.CollectionInterval`'
              endpoint: '`endpoint`:`envs["SERVICE_PORT"]`'
              password: '`envs["MYSQL_ROOT_PASSWORD"]`'
              transport: tcp
              username: '`envs["MYSQL_ROOT_USER"]`'
          metrics:
            collectionInterval: 30s
            collectionMetrics:
              - global_status
              - global_variables
              - slave_status
              - info_schema.innodb_cmp
              - info_schema.innodb_cmpmem
              - info_schema.query_response_time
              - info_schema.wesql_consensus
          logs:
            - logType: auditlog
              parserOperator: percona_audit
              include:
                - /data/mysql/auditlog/audit.log*
              multiline:
                lineStartPattern: "^({|<AUDIT_RECORD)"
            - logType: errorlog
              include:
                - "/data/mysql/log/mysqld-error.log*"
            - logType: slow
              parserOperator: "mysql_slowquery"
              include:
                - "/data/mysql/log/mysqld-slowquery.log*"
              multiline:
                lineStartPattern: "^# Time: "
        - name: vttablet
          condition: "`envs[\"KB_PROXY_ENABLED\"] == \"on\"`"
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
          logs:
            - logType: errorlog
              include:
                - /vtdataroot/vttablet/vttablet.*.vitess.log.ERROR*
              multiline:
                lineStartPattern: "^([IWEF][0-9]{4} )"
            - logType: runninglog
              include:
                - /vtdataroot/vttablet/vttablet.*.vitess.log.INFO*
              multiline:
                lineStartPattern: "^([IWEF][0-9]{4} )"
    - componentDefRef: vtgate
      collectors:
        - name: vtgate
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
          logs:
            - logType: errorlog
              include:
                - "/vtdataroot/vtgate.*.vitess.log.ERROR*"
              multiline:
                lineStartPattern: "^([IWEF][0-9]{4} )"
            - logType: runninglog
              include:
                - "/vtdataroot/vtgate.*.vitess.log.INFO*"
              multiline:
                lineStartPattern: "^([IWEF][0-9]{4} )"
    - componentDefRef: vtcontroller
      collectors:
        - name: vtconsensus
          logs:
            - logType: runninglog
              include:
                - "/vtdataroot/vtctld/vtctld.*.vitess.log.INFO*"
              multiline:
                lineStartPattern: "^([IWEF])([0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6})"
---
# Source: gemini/templates/monitor/clickhouse.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: clickhouse
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "clickhouse"
  components:
    - componentDefRef: clickhouse
      collectors:
        - name: clickhouse
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: ch-keeper
      collectors:
        - name: clickhouse
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: zookeeper
      collectors:
        - name: zookeeper
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
---
# Source: gemini/templates/monitor/dts.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: ape-dts
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: ape-dts
  components:
    - componentDefRef: ape-dts
      collectors:
        - name: ape-dts
          logs:
            - logType: defaultlog
              include:
                - /logs/default.log*
            - logType: monitorlog
              include:
                - /logs/monitor.log*
            - logType: positionlog
              include:
                - /logs/position.log*
            - logType: commitlog
              include:
                - /logs/commit.log*
---
# Source: gemini/templates/monitor/kafka.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: kafka
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "kafka"
  components:
    - componentDefRef: kafka-server
      collectors:
        - name: jmx-exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: kafka-broker
      collectors:
        - name: jmx-exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: controller
      collectors:
        - name: jmx-exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: kafka-exporter
      collectors:
        - name: kafka-exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
---
# Source: gemini/templates/monitor/mogdb.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: mogdb
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: mogdb
  components:
    - componentDefRef: mogdb
      collectors:
        - name: mogdb
          logs:
            - logType: runninglog
              include:
                - /var/lib/mogdb/data/pg_log/postgresql-*
              multiline:
                lineStartPattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}'
        - name: exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
---
# Source: gemini/templates/monitor/mongodb.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: mongodb
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "mongodb"
  components:
    - componentDefRef: mongodb
      collectors:
        - name: mongodb
          monitorType: mongodb
          receiver: apecloudmongodb
          connectionSpec:
            config:
              collection_interval: '`settings.CollectionInterval`'
              username: '`envs["MONGODB_ROOT_USER"]`'
              password: '`envs["MONGODB_ROOT_PASSWORD"]`'
              endpoint: '`endpoint`:`envs["SERVICE_PORT"]`'
              collect_all: true
              compatible_mode: true
              connect_params: admin?ssl=false&authSource=admin
              direct_connect: true
              global_conn_pool: true
          metrics:
            collectionInterval: 30s
          logs:
            - logType: runninglog
              include:
                - "/data/mongodb/logs/mongodb.log*"
---
# Source: gemini/templates/monitor/oceanbase.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: oceanbase
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: oceanbase
  components:
    - componentDefRef: oceanbase
      regexEnabled: true
      componentKinds:
        - oceanbase.*
      collectors:
        - name: observer-container
          engineType: oceanbase
          monitorType: oceanbase
          receiver: apecloudmysql
          connectionSpec:
            config:
              endpoint: '`endpoint`:`envs["COMP_MYSQL_PORT"] != "" ? envs["COMP_MYSQL_PORT"] : envs["OB_SERVICE_PORT"]`'
              username: '`envs["AUDITLOG_USER"] != "" ? envs["AUDITLOG_USER"] : "root"`'
              password: '`envs["AUDITLOG_PASSWORD"]`'
              database: oceanbase
              transport: tcp
              interpolate_params: true
          metrics:
            collectionInterval: 30s
            collectionMetrics:
              - global_status
              - ob_replication_heartbeat
              - ob_standby_tenant_sync_status
          logs:
            - logType: auditlog
              include:
                - /home/admin/workdir/audit/*.aud
              multiline:
                lineStartPattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'
              parserOperator: ob_ent_auditlog
            - logType: audit_extra
              receiverType: obauditlog
              config:
                sync_period: 1s
                system_user_enabled: true
            - logType: errorlog
              include:
                - /home/admin/log/log/rootservice.log.wf
                - /home/admin/log/log/election.log.wf
                - /home/admin/log/log/observer.log.wf
            - logType: runninglog
              include:
                - /home/admin/log/log/rootservice.log
                - /home/admin/log/log/election.log
                - /home/admin/log/log/observer.log
            - logType: slowlog
              receiverType: obslowquery
              config:
                slow_query_time_ms: 1000
                system_user_enabled: true
        - name: metrics
          monitorType: prometheus
          receiver: oceanbase-prometheus
          metrics:
            collectionInterval: 30s
            prometheusScrapeConfig:
              global:
                scrape_interval: '`settings.CollectionInterval`'
              scrape_configs:
                - job_name: node_ob
                  metrics_path: /metrics/node/ob
                  scheme: http
                  static_configs:
                    - targets:
                        - '`endpoint`:`envs["SERVICE_PORT"]`'
                - job_name: ob_basic
                  metrics_path: /metrics/ob/basic
                  scheme: http
                  static_configs:
                    - targets:
                        - '`endpoint`:`envs["SERVICE_PORT"]`'
                - job_name: ob_extra
                  metrics_path: /metrics/ob/extra
                  scheme: http
                  static_configs:
                    - targets:
                        - '`endpoint`:`envs["SERVICE_PORT"]`'
                - job_name: ob_agent
                  metrics_path: /metrics/stat
                  scheme: http
                  static_configs:
                    - targets:
                        - '`endpoint`:`envs["SERVICE_PORT"]`'
          logs:
            - logType: runninglog
              include:
                - /home/admin/obagent/log/monagent.log
---
# Source: gemini/templates/monitor/oracle-mysql.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: "oracle-mysql"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "mysql"
  components:
    - componentDefRef: mysql
      collectors:
        - name: mysql
          engineType: mysql
          monitorType: mysql
          receiver: apecloudmysql
          connectionSpec:
            config:
              allow_native_passwords: true
              collection_interval: '`settings.CollectionInterval`'
              endpoint: '`endpoint`:`envs["SERVICE_PORT"]`'
              password: '`envs["MYSQL_ROOT_PASSWORD"]`'
              transport: tcp
              username: '`envs["MYSQL_ROOT_USER"]`'
          metrics:
            collectionInterval: 30s
            collectionMetrics:
            - global_status
            - global_variables
            - slave_status
            - info_schema.innodb_cmp
            - info_schema.innodb_cmpmem
            - info_schema.query_response_time
            - replication_heartbeat
          logs:
            - logType: errorlog
              include:
                - "/var/lib/mysql/log/mysqld-error.log*"
            - logType: slow
              parserOperator: "mysql_slowquery"
              include:
                - "/var/lib/mysql/log/mysqld-slowquery.log*"
              multiline:
                lineStartPattern: "^# Time: "
            - logType: auditlog
              parserOperator: "percona_audit"
              include:
                - "/var/lib/mysql/auditlog/audit.log*"
              # logsFilter:
              #   fieldValues:
              #     regexEnabled: true
              #     user: "root"
              multiline:
                lineStartPattern: "^({|<AUDIT_RECORD)"
---
# Source: gemini/templates/monitor/oracledb.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: oracledb
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "oracle"
  components:
    - componentDefRef: oracle
      collectors:
        - name: exporter
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
          logs:
            - logType: tracelog
              include:
                - /opt/oracle/cfgtoollogs/dbca/ORCLCDB/trace.log*
              multiline:
                lineStartPattern: "\n\n"
                omitPattern: true
---
# Source: gemini/templates/monitor/postgresql.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: "postgresql"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "postgresql"
  components:
    - componentDefRef: postgresql
      collectors:
        - name: postgresql
          monitorType: postgresql
          receiver: apecloudpostgresql
          connectionSpec:
            config:
              collection_interval: '`settings.CollectionInterval`'
              username: '`envs["PGUSER_SUPERUSER"]`'
              password: '`envs["PGPASSWORD_SUPERUSER"]`'
              endpoint: '`endpoint`:`envs["SERVICE_PORT"]`'
              databases:
                - postgres
              exclude_databases:
                - template0
                - template1
              tls:
                insecure: true
                insecure_skip_verify: true
              transport: tcp
          metrics:
            collectionInterval: 30s
          logs:
            - logType: errorlog
              include:
                - "/home/postgres/pgdata/pgroot/data/log/postgresql-*.log"
            - logType: runninglog
              parserOperator: pg_log_parser
              include:
                - "/home/postgres/pgdata/pgroot/data/log/postgresql-*.csv"
              multiline:
                lineStartPattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[.0-9]* [A-Z]+'
---
# Source: gemini/templates/monitor/pulsar.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: "pulsar"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "pulsar"
  components:
    - componentDefRef: pulsar-broker
      collectors:
        - name: broker
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
            prometheus:
              metricsPath: "/metrics/"
              disableKeepAlives: false
              useServiceAccount: false
    - componentDefRef: pulsar-proxy
      collectors:
        - name: proxy
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
            prometheus:
              metricsPath: "/metrics/"
              disableKeepAlives: false
              useServiceAccount: false
    - componentDefRef: bookies
      collectors:
        - name: bookies
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: bookies-recovery
      collectors:
        - name: bookies-recovery
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
    - componentDefRef: zookeeper
      collectors:
        - name: zookeeper
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
---
# Source: gemini/templates/monitor/redis.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: "redis"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: "redis"
  components:
    - componentDefRef: redis
      collectors:
        - name: redis
          monitorType: redis
          receiver: apecloudredis
          connectionSpec:
            config:
              collection_interval: '`settings.CollectionInterval`'
              endpoint: '`endpoint`:`envs["SERVICE_PORT"]`'
              password: '`envs["REDIS_REPL_PASSWORD"]`'
              username: default
              tls:
                insecure: true
                insecure_skip_verify: true
          metrics:
            collectionInterval: 30s
          logs:
            - logType: runninglog
              include: ["/data/running.log"]
---
# Source: gemini/templates/monitor/starrocks.yaml
apiVersion: monitor.kubeblocks.io/v1alpha1
kind: MonitorDefinition
metadata:
  name: starrocks
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
spec:
  clusterDefRef: starrocks
  components:
    - componentDefRef: fe-shared-nothing
      componentKinds:
        - starrocks-fe-sd
        - starrocks-fe-sn
      collectors:
        - name: fe
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
            prometheus:
              metricsPath: "/metrics/"
              disableKeepAlives: false
              useServiceAccount: false
          logs:
            - logType: auditlog
              include:
                - /opt/starrocks/fe/log/fe.audit.log*
            - logType: errorlog
              include:
                - /opt/starrocks/fe/log/fe.warn.log*
              multiline:
                lineStartPattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[,0-9]* [A-Z]+'
            - logType: runninglog
              include:
                - /opt/starrocks/fe/log/fe.log*
              multiline:
                lineStartPattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[,0-9]* [A-Z]+'
            - logType: slowlog
              include:
                - /opt/starrocks/fe/log/fe.big_query.log*
    - componentDefRef: be
      componentKinds:
        - starrocks-be
      collectors:
        - name: be
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
            prometheus:
              metricsPath: "/metrics/"
              disableKeepAlives: false
              useServiceAccount: false
          logs:
            - logType: runninglog
              include:
                - /opt/starrocks/be/log/be.INFO*
            - logType: errorlog
              include:
                - /opt/starrocks/be/log/be.WARNING*
    - componentDefRef: cn
      componentKinds:
        - starrocks-cn
      collectors:
        - name: cn
          monitorType: prometheus
          metrics:
            collectionInterval: 30s
            prometheus:
              metricsPath: "/metrics/"
              disableKeepAlives: false
              useServiceAccount: false
          logs:
            - logType: runninglog
              include:
                - /opt/starrocks/cn/log/cn.INFO*
            - logType: errorlog
              include:
                - /opt/starrocks/cn/log/cn.WARNING*
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: mysql-source
spec:
  type: source
  nodeDef:
    dbType: MySQL
    dbVersion: 8.*
    relConstraints:
      - dbType: MySQL
        dbVersion: 8.*
      - dbType: Kafka
        dbVersion: 3.3.*
      - dbType: StarRocks
        dbVersion: "5.1"
  cycleDef:
    isSupported: true

  moduleDefs:
    preCheck:
      container:
        name: precheck
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: cdc
        extractor.db_type: mysql
        extractor.binlog_position: 0
        extractor.binlog_filename: ""
        extractor.server_id: 10086
        extractor.url: "mysql://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}?ssl-mode=disabled"
        sinker.batch_size: 2
        sinker.sink_type: write
        sinker.db_type: mysql
        pipeline.buffer_size: 4
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        precheck.do_struct_init: true
        precheck.do_cdc: true
    initStruct:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: struct
        extractor.db_type: mysql
        extractor.url: "mysql://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}?ssl-mode=disabled"
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: mysql
        sinker.conflict_policy: ignore
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: database,table
    initStructLater:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: struct
        extractor.db_type: mysql
        extractor.url: "mysql://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}?ssl-mode=disabled"
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: mysql
        sinker.conflict_policy: ignore
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: constraint,index
    initData:
      container:
        name: initdata
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: snapshot
        extractor.db_type: mysql
        extractor.url: "mysql://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}?ssl-mode=disabled"
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: mysql
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: snapshot
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.server_id: 10086
        extractor.binlog_filename: ""
        extractor.binlog_position: 0
        extractor.heartbeat_interval_secs: 10
        extractor.extract_type: cdc
        extractor.db_type: mysql
        extractor.url: "mysql://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}?ssl-mode=disabled"
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: mysql
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: mysql-sink
spec:
  type: sink
  nodeDef:
    dbType: MySQL
    dbVersion: 8.*
    relConstraints:
      - dbType: MySQL
        dbVersion: 8.*
  cycleDef:
    isSupported: true
    param:
      pipeline.type: transaction
  moduleDefs:
    preCheck:
      container:
        name: precheck
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: write
        sinker.db_type: mysql
        sinker.url: "mysql://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}?ssl-mode=disabled"
        pipeline.buffer_size: 4
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        precheck.do_struct_init: true
        precheck.do_cdc: true
    initStruct:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: mysql
        sinker.conflict_policy: ignore
        sinker.url: "mysql://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}?ssl-mode=disabled"
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: database,table
    initData:
      container:
        name: initdata
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: mysql
        sinker.url: "mysql://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}?ssl-mode=disabled"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: snapshot
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
    initStructLater:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: mysql
        sinker.conflict_policy: ignore
        sinker.url: "mysql://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}?ssl-mode=disabled"
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: constraint,index
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        command:
          - sh
          - -c
          - |
            if [ ! -f "/task/config" ]; then
              cp /secret/config /task/config
            fi
            /ape-dts /task/config
      sidecars:
        - name: cdc-monitor
          image: apecloud/cubetran-sidecar:0.1.1
      param:
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: mysql
        sinker.url: "mysql://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}?ssl-mode=disabled"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: postgresql-source
spec:
  type: source
  nodeDef:
    dbType: PostgreSQL
    dbVersion: 14.*
    relConstraints:
      - dbType: PostgreSQL
        dbVersion: 14.*
  cycleDef:
    isSupported: true
  moduleDefs:
    preCheck:
      container:
        name: precheck
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: cdc
        extractor.db_type: pg
        extractor.start_lsn: ''
        extractor.slot_name: ''
        extractor.heartbeat_interval_secs: 10
        extractor.url: "postgres://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}/{{ .Source.DatabaseName }}"
        sinker.batch_size: 2
        sinker.sink_type: write
        sinker.db_type: pg
        pipeline.buffer_size: 4
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 1
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        precheck.do_struct_init: true
        precheck.do_cdc: true
    initStruct:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: struct
        extractor.db_type: pg
        extractor.url: "postgres://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}/{{ .Source.DatabaseName }}"
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: pg
        sinker.conflict_policy: ignore
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 1
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: database,table
    initData:
      container:
        name: initData
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: snapshot
        extractor.db_type: pg
        extractor.url: "postgres://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}/{{ .Source.DatabaseName }}"
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: pg
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: snapshot
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
    initStructLater:
      container:
        name: initstructlater
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: struct
        extractor.db_type: pg
        extractor.url: "postgres://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}/{{ .Source.DatabaseName }}"
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: pg
        sinker.conflict_policy: ignore
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 1
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: constraint,index
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        command:
          - sh
          - -c
          - |
            if [ ! -f "/task/config" ]; then
              cp /secret/config /task/config
            fi
            /ape-dts /task/config
      sidecars:
        - name: cdc-monitor
          image: apecloud/cubetran-sidecar:0.1.1
      param:
        extractor.start_lsn: ''
        extractor.slot_name: ''
        extractor.heartbeat_interval_secs: 10
        extractor.extract_type: cdc
        extractor.db_type: pg
        extractor.pub_name: apecloud_migrate_pub_for_all_tables
        extractor.url: "postgres://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}/{{ .Source.DatabaseName }}"
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: pg
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: postgresql-sink
spec:
  type: sink
  nodeDef:
    dbType: PostgreSQL
    dbVersion: 14.*
    relConstraints:
      - dbType: PostgreSQL
        dbVersion: 14.*
  cycleDef:
    isSupported: true

  moduleDefs:
    preCheck:
      container:
        name: precheck
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: write
        sinker.db_type: pg
        sinker.url: "postgres://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}/{{ .Sink.DatabaseName }}"
        pipeline.buffer_size: 4
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 1
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        precheck.do_struct_init: true
        precheck.do_cdc: true
    initStruct:
      container:
        name: initstruct
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: pg
        sinker.conflict_policy: ignore
        sinker.url: "postgres://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}/{{ .Sink.DatabaseName }}"
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 1
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: database,table
    initData:
      container:
        name: initdata
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: pg
        sinker.url: "postgres://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}/{{ .Sink.DatabaseName }}"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: snapshot
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
    initStructLater:
      container:
        name: initstructlater
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 2
        sinker.sink_type: struct
        sinker.db_type: pg
        sinker.conflict_policy: ignore
        sinker.url: "postgres://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}/{{ .Sink.DatabaseName }}"
        pipeline.buffer_size: 100
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: serial
        parallelizer.parallel_size: 2
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
        filter.do_structures: constraint,index
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        command:
          - sh
          - -c
          - |
            if [ ! -f "/task/config" ]; then
              cp /secret/config /task/config
            fi
            /ape-dts /task/config
      sidecars:
        - name: cdc-monitor
          image: apecloud/cubetran-sidecar:0.1.1
      param:
        sinker.batch_size: 100
        sinker.sink_type: write
        sinker.db_type: pg
        sinker.url: "postgres://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}/{{ .Sink.DatabaseName }}"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: rdb_merge
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: redis-source
spec:
  type: source
  nodeDef:
    dbType: Redis
    dbVersion: 7.*
    relConstraints:
      - dbType: Redis
        dbVersion: 7.*
      - dbType: Redis
        dbVersion: 6.*
  cycleDef:
    isSupported: true

  moduleDefs:
    initData:
      container:
        name: initdata
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: snapshot
        extractor.db_type: redis
        extractor.repl_port: 
        extractor.url: "redis://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: redis
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        extractor.extract_type: cdc
        extractor.db_type: redis
        extractor.repl_port: 10008
        extractor.repl_id: ""
        extractor.repl_offset: 0
        extractor.now_db_id: 0
        extractor.keepalive_interval_secs: 10
        extractor.heartbeat_interval_secs: 10
        extractor.heartbeat_key: 
        extractor.url: "redis://{{ .Source.Address.UserName }}:{{ .Source.Address.Password }}@{{ .Source.Address.Endpoint }}"
        pipeline.buffer_size: 16000
        pipeline.checkpoint_interval_secs: 10
        parallelizer.parallel_type: redis
        parallelizer.parallel_size: 8
        runtime.log_level: info
        runtime.log4rs_file: ./log4rs.yaml
        runtime.log_dir: ./logs
---
# Source: gemini/charts/cubetran/templates/plugin/transferdefinitions.yaml
apiVersion: datatransfer.apecloud.io/v1alpha1
kind: TransferDefinition
metadata:
  name: redis-sink
spec:
  type: sink
  nodeDef:
    dbType: Redis
    dbVersion: 7.*
    relConstraints:
      - dbType: Redis
        dbVersion: 7.*
      - dbType: Redis
        dbVersion: 6.*
  cycleDef:
    isSupported: true
    param:
      pipeline.type: transaction
  moduleDefs:
    initData:
      container:
        name: initdata
        image: apecloud/ape-dts:0.1.16
        args:
          - "/secret/config"
      param:
        sinker.batch_size: 200
        sinker.sink_type: write
        sinker.db_type: redis
        sinker.method: restore
        sinker.url: "redis://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}"
    cdc:
      container:
        name: cdc
        image: apecloud/ape-dts:0.1.16
        command:
          - sh
          - -c
          - |
            if [ ! -f "/task/config" ]; then
              cp /secret/config /task/config
            fi
            /ape-dts /task/config
      sidecars:
        - name: cdc-monitor
          image: apecloud/cubetran-sidecar:0.1.1
      param:
        sinker.batch_size: 200
        sinker.sink_type: write
        sinker.db_type: redis
        sinker.method: restore
        sinker.url: "redis://{{ .Sink.Address.UserName }}:{{ .Sink.Address.Password }}@{{ .Sink.Address.Endpoint }}"
---
# Source: gemini/charts/kubeviewer/templates/cr/cluster_view_definition.yaml
apiVersion: view.apecloud.io/v1alpha1
kind: ViewDefinition
metadata:
  name: cluster-viewdef
  namespace: default
spec:
  target:
    group: ""
    version: "v1"
    kind: "Event"
    fieldPath:
      status: "message"
  involvedObjects:
    - group: "apps.kubeblocks.io"
      version: "v1alpha1"
      kind: "Cluster"
    - group: ""
      version: "v1"
      kind: "Pod"
    - group: ""
      version: "v1"
      kind: "Endpoints"
    - group: ""
      version: "v1"
      kind: "Service"
    - group: ""
      version: "v1"
      kind: "PersistentVolumeClaim"
    - group: "apps"
      version: "v1"
      kind: "StatefulSet"
    - group: "apps.kubeblocks.io"
      version: "v1alpha1"
      kind: "Component"
    - group: "dataprotection.kubeblocks.io"
      version: "v1alpha1"
      kind: "BackupPolicy"
    - group: "dataprotection.kubeblocks.io"
      version: "v1alpha1"
      kind: "BackupSchedule"
    - group: "dataprotection.kubeblocks.io"
      version: "v1alpha1"
      kind: "Backup"
    - group: "workloads.kubeblocks.io"
      version: "v1alpha1"
      kind: "ReplicatedStateMachine"
    - group: "workloads.kubeblocks.io"
      version: "v1alpha1"
      kind: "InstanceSet"
    - group: "apps.kubeblocks.io"
      version: "v1alpha1"
      kind: "Configuration"
    - group: "policy"
      version: "v1"
      kind: "PodDisruptionBudget"
    - group: ""
      version: "v1"
      kind: "Secret"
    - group: ""
      version: "v1"
      kind: "ConfigMap"
    - group: "dataprotection.kubeblocks.io"
      version: "v1alpha1"
      kind: "Restore"
    - group: ""
      version: "v1"
      kind: "ServiceAccount"
    - group: "rbac.authorization.k8s.io"
      version: "v1"
      kind: "RoleBinding"
    - group: "rbac.authorization.k8s.io"
      version: "v1"
      kind: "ClusterRoleBinding"
    - group: "batch"
      version: "v1"
      kind: "Job"
  totalExpression: "1"
  completedExpression: "target.message.endsWith(\"current phase is Running\")?1:0"
  progressCompleteOperation:
    mode: "Regex"
    regex: 'Cluster: (?P<name>[^\s]+) is ready, current phase is Running'
    messageTemplate: "Cluster: {{name}} is create successfully and ready now"
---
# Source: gemini/charts/kubeviewer/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-kubeviewer-test-connection"
  labels:
    helm.sh/chart: kubeviewer-0.1.14
    app.kubernetes.io/name: kubeviewer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-kubeviewer:80']
  restartPolicy: Never
---
# Source: gemini/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-gemini-test-connection"
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-gemini:9443']
  restartPolicy: Never
---
# Source: gemini/charts/cubetran/templates/pre-delete-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-removal-0
  labels:
    helm.sh/chart: cubetran-0.5.1
    app.kubernetes.io/name: cubetran
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.5.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-1"
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: my-release-removal-0
      labels:
         helm.sh/chart: cubetran-0.5.1
         app.kubernetes.io/name: cubetran
         app.kubernetes.io/instance: my-release
         app.kubernetes.io/version: "0.5.1"
         app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: my-release-cubetran
      securityContext:
        runAsNonRoot: true
      restartPolicy: OnFailure
      containers:
        - name: pre-delete-job
          image: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/kubeblocks-tools:0.8.2"
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
            - "-c"
            - |
              kubectl get trd | awk '{if(NR>1)print $1}' | xargs -I {} kubectl patch trd {} -p '{"metadata":{"finalizers":null, "annotations": {"apecloud.io/uninstall": "true"}}}' --type=merge
              kubectl get cpd | awk '{if(NR>1)print $1}' | xargs -I {} kubectl patch cpd {} -p '{"metadata":{"finalizers":null, "annotations": {"apecloud.io/uninstall": "true"}}}' --type=merge
              kubectl get tmd | awk '{if(NR>1)print $1}' | xargs -I {} kubectl patch tmd {} -p '{"metadata":{"finalizers":null, "annotations": {"apecloud.io/uninstall": "true"}}}' --type=merge
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: kb-controller
                operator: In
                values:
                - "true"
            weight: 100
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
---
# Source: gemini/templates/gemini-crd-upgrade-hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-upgrade-hook-job
  labels:
    helm.sh/chart: gemini-0.6.0-crd.1
    app.kubernetes.io/name: gemini
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0-crd.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: my-release-upgrade
      labels:
        helm.sh/chart: gemini-0.6.0-crd.1
        app.kubernetes.io/name: gemini
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "0.6.0-crd.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: my-release-gemini
      securityContext:
        {}
      restartPolicy: OnFailure
      containers:
        - name: crd-upgrade-job
          image: "infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/gemini-tools:0.6.0-crd.1"
          imagePullPolicy: IfNotPresent
          command:
            - kubectl
          args:
            - apply
            - -f '/gemini/crd/*.yaml'
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Exists
