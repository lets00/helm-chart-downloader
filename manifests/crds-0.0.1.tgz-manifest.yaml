---
# Source: crds/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-crds-controller-manager
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
---
# Source: crds/templates/streamdata-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: streamdata.mediastreams.media-streaming-mesh.io
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  labels:
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  group: mediastreams.media-streaming-mesh.io
  names:
    kind: Streamdata
    listKind: StreamdataList
    plural: streamdata
    singular: streamdata
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Streamdata is the Schema for the streamdata API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: StreamdataSpec defines the desired state of Streamdata
            properties:
              clientip:
                type: string
              clientport:
                description: The port that used by the client
                maximum: 65535
                minimum: 0
                type: integer
              serverip:
                type: string
              serverport:
                description: The port that used by the server.
                maximum: 65535
                minimum: 0
                type: integer
              streamstate:
                description: The stream state set my the controlplane
                enum:
                - create
                - play
                - teardown
                type: string
              stubip:
                type: string
            type: object
          status:
            description: StreamdataStatus defines the observed state of Streamdata
            properties:
              reason:
                description: If in error the most recent error will be shown
                type: string
              status:
                description: The current state of this stream
                enum:
                - PENDING
                - SUCCESS
                - ERROR
                type: string
              streamstatus:
                description: The current dataplane status as determined by this module
                enum:
                - PENDING
                - SUCCESS
                - ERROR
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: crds/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-crds-manager-role
  labels:
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - mediastreams.media-streaming-mesh.io
  resources:
  - streamdata
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - mediastreams.media-streaming-mesh.io
  resources:
  - streamdata/finalizers
  verbs:
  - update
- apiGroups:
  - mediastreams.media-streaming-mesh.io
  resources:
  - streamdata/status
  verbs:
  - get
  - patch
  - update
---
# Source: crds/templates/metrics-reader-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-crds-metrics-reader
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: crds/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-crds-proxy-role
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: crds/templates/manager-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-crds-manager-rolebinding
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'my-release-crds-manager-role'
subjects:
- kind: ServiceAccount
  name: 'my-release-crds-controller-manager'
  namespace: 'default'
---
# Source: crds/templates/proxy-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-crds-proxy-rolebinding
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'my-release-crds-proxy-role'
subjects:
- kind: ServiceAccount
  name: 'my-release-crds-controller-manager'
  namespace: 'default'
---
# Source: crds/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-crds-leader-election-role
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
# Source: crds/templates/leader-election-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-crds-leader-election-rolebinding
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: 'my-release-crds-leader-election-role'
subjects:
- kind: ServiceAccount
  name: 'my-release-crds-controller-manager'
  namespace: 'default'
---
# Source: crds/templates/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-crds-controller-manager-metrics-service
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    control-plane: controller-manager
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    control-plane: controller-manager
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
---
# Source: crds/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-crds-controller-manager
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: msm-nc
    app.kubernetes.io/part-of: msm-nc
    control-plane: controller-manager
    helm.sh/chart: crds-0.0.1
    app.kubernetes.io/name: crds
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: crds
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: crds
        app.kubernetes.io/instance: my-release
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: ciscolabs/msm-nc:07102023
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: false
      serviceAccountName: my-release-crds-controller-manager
      terminationGracePeriodSeconds: 10
