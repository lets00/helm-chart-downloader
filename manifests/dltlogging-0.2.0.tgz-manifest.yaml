---
# Source: dltlogging/templates/configmaps/buildersconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: buildersconfig
  namespace: default
data:
    detect: |
        #!/bin/sh

        # The bin/detect script is responsible for determining whether or not a buildpack 
        # should be used to build a chaincode package and launch it. 
        # 
        # The peer invokes detect with two arguments:
        # bin/detect CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR
        #
        # When detect is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and 
        # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer. 
        # The CHAINCODE_SOURCE_DIR and CHAINCODE_METADATA_DIR should be treated as read only inputs. 
        # If the buildpack should be applied to the chaincode source package, detect must return an exit code of 0; 
        # any other exit code will indicate that the buildpack should not be applied.

        CHAINCODE_METADATA_DIR="$2"

        set -euo pipefail

        # use jq to extract the chaincode type from metadata.json and exit with
        # success if the chaincode type is golang
        if [ "$(cat "$CHAINCODE_METADATA_DIR/metadata.json" | sed -e 's/[{}]/''/g' | awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'type'\042/){print $(i+1)}}}' | tr -d '"')" = "external" ]; then
            exit 0
        fi

        exit 1

    build: |
        #!/bin/sh

        # The bin/build script is responsible for building, compiling, or transforming the contents 
        # of a chaincode package into artifacts that can be used by release and run.
        #
        # The peer invokes build with three arguments:
        # bin/build CHAINCODE_SOURCE_DIR CHAINCODE_METADATA_DIR BUILD_OUTPUT_DIR
        #
        # When build is invoked, CHAINCODE_SOURCE_DIR contains the chaincode source and 
        # CHAINCODE_METADATA_DIR contains the metadata.json file from the chaincode package installed to the peer.
        # BUILD_OUTPUT_DIR is the directory where build must place artifacts needed by release and run. 
        # The build script should treat the input directories CHAINCODE_SOURCE_DIR and 
        # CHAINCODE_METADATA_DIR as read only, but the BUILD_OUTPUT_DIR is writeable.

        CHAINCODE_SOURCE_DIR="$1"
        CHAINCODE_METADATA_DIR="$2"
        BUILD_OUTPUT_DIR="$3"

        set -euo pipefail

        #external chaincodes expect connection.json file in the chaincode package
        if [ ! -f "$CHAINCODE_SOURCE_DIR/connection.json" ]; then
            >&2 echo "$CHAINCODE_SOURCE_DIR/connection.json not found"
            exit 1
        fi

        #simply copy the endpoint information to specified output location
        cp $CHAINCODE_SOURCE_DIR/connection.json $BUILD_OUTPUT_DIR/connection.json

        if [ -d "$CHAINCODE_SOURCE_DIR/metadata" ]; then
            cp -a $CHAINCODE_SOURCE_DIR/metadata $BUILD_OUTPUT_DIR/metadata
        fi

        exit 0

    release: |
        #!/bin/sh

        # The bin/release script is responsible for providing chaincode metadata to the peer. 
        # bin/release is optional. If it is not provided, this step is skipped. 
        #
        # The peer invokes release with two arguments:
        # bin/release BUILD_OUTPUT_DIR RELEASE_OUTPUT_DIR
        #
        # When release is invoked, BUILD_OUTPUT_DIR contains the artifacts 
        # populated by the build program and should be treated as read only input. 
        # RELEASE_OUTPUT_DIR is the directory where release must place artifacts to be consumed by the peer.

        set -euo pipefail

        BUILD_OUTPUT_DIR="$1"
        RELEASE_OUTPUT_DIR="$2"

        # copy indexes from metadata/* to the output directory
        # if [ -d "$BUILD_OUTPUT_DIR/metadata" ] ; then
        #    cp -a "$BUILD_OUTPUT_DIR/metadata/"* "$RELEASE_OUTPUT_DIR/"
        # fi

        #external chaincodes expect artifacts to be placed under "$RELEASE_OUTPUT_DIR"/chaincode/server
        if [ -f $BUILD_OUTPUT_DIR/connection.json ]; then
        mkdir -p "$RELEASE_OUTPUT_DIR"/chaincode/server
        cp $BUILD_OUTPUT_DIR/connection.json "$RELEASE_OUTPUT_DIR"/chaincode/server

        #if tls_required is true, copy TLS files (using above example, the fully qualified path for these fils would be "$RELEASE_OUTPUT_DIR"/chaincode/server/tls)

        exit 0
        fi

        exit 1
   
    core.yaml: |
        # Copyright IBM Corp. All Rights Reserved.
        #
        # SPDX-License-Identifier: Apache-2.0
        #

        ###############################################################################
        #
        #    Peer section
        #
        ###############################################################################
        peer:

            # The peer id provides a name for this peer instance and is used when
            # naming docker resources.
            id: jdoe

            # The networkId allows for logical separation of networks and is used when
            # naming docker resources.
            networkId: dev

            # The Address at local network interface this Peer will listen on.
            # By default, it will listen on all network interfaces
            listenAddress: 0.0.0.0:7051

            # The endpoint this peer uses to listen for inbound chaincode connections.
            # If this is commented-out, the listen address is selected to be
            # the peer's address (see below) with port 7052
            # chaincodeListenAddress: 0.0.0.0:7052

            # The endpoint the chaincode for this peer uses to connect to the peer.
            # If this is not specified, the chaincodeListenAddress address is selected.
            # And if chaincodeListenAddress is not specified, address is selected from
            # peer listenAddress.
            # chaincodeAddress: 0.0.0.0:7052

            # When used as peer config, this represents the endpoint to other peers
            # in the same organization. For peers in other organization, see
            # gossip.externalEndpoint for more info.
            # When used as CLI config, this means the peer's endpoint to interact with
            address: 0.0.0.0:7051

            # Whether the Peer should programmatically determine its address
            # This case is useful for docker containers.
            addressAutoDetect: false

            # Keepalive settings for peer server and clients
            keepalive:
                # Interval is the duration after which if the server does not see
                # any activity from the client it pings the client to see if it's alive
                interval: 7200s
                # Timeout is the duration the server waits for a response
                # from the client after sending a ping before closing the connection
                timeout: 20s
                # MinInterval is the minimum permitted time between client pings.
                # If clients send pings more frequently, the peer server will
                # disconnect them
                minInterval: 60s
                # Client keepalive settings for communicating with other peer nodes
                client:
                    # Interval is the time between pings to peer nodes.  This must
                    # greater than or equal to the minInterval specified by peer
                    # nodes
                    interval: 60s
                    # Timeout is the duration the client waits for a response from
                    # peer nodes before closing the connection
                    timeout: 20s
                # DeliveryClient keepalive settings for communication with ordering
                # nodes.
                deliveryClient:
                    # Interval is the time between pings to ordering nodes.  This must
                    # greater than or equal to the minInterval specified by ordering
                    # nodes.
                    interval: 60s
                    # Timeout is the duration the client waits for a response from
                    # ordering nodes before closing the connection
                    timeout: 20s


            # Gossip related configuration
            gossip:
                # Bootstrap set to initialize gossip with.
                # This is a list of other peers that this peer reaches out to at startup.
                # Important: The endpoints here have to be endpoints of peers in the same
                # organization, because the peer would refuse connecting to these endpoints
                # unless they are in the same organization as the peer.
                bootstrap: 127.0.0.1:7051

                # NOTE: orgLeader and useLeaderElection parameters are mutual exclusive.
                # Setting both to true would result in the termination of the peer
                # since this is undefined state. If the peers are configured with
                # useLeaderElection=false, make sure there is at least 1 peer in the
                # organization that its orgLeader is set to true.

                # Defines whenever peer will initialize dynamic algorithm for
                # "leader" selection, where leader is the peer to establish
                # connection with ordering service and use delivery protocol
                # to pull ledger blocks from ordering service. It is recommended to
                # use leader election for large networks of peers.
                useLeaderElection: true
                # Statically defines peer to be an organization "leader",
                # where this means that current peer will maintain connection
                # with ordering service and disseminate block across peers in
                # its own organization
                orgLeader: false

                # Interval for membershipTracker polling
                membershipTrackerInterval: 5s

                # Overrides the endpoint that the peer publishes to peers
                # in its organization. For peers in foreign organizations
                # see 'externalEndpoint'
                endpoint:
                # Maximum count of blocks stored in memory
                maxBlockCountToStore: 100
                # Max time between consecutive message pushes(unit: millisecond)
                maxPropagationBurstLatency: 10ms
                # Max number of messages stored until a push is triggered to remote peers
                maxPropagationBurstSize: 10
                # Number of times a message is pushed to remote peers
                propagateIterations: 1
                # Number of peers selected to push messages to
                propagatePeerNum: 3
                # Determines frequency of pull phases(unit: second)
                # Must be greater than digestWaitTime + responseWaitTime
                pullInterval: 4s
                # Number of peers to pull from
                pullPeerNum: 3
                # Determines frequency of pulling state info messages from peers(unit: second)
                requestStateInfoInterval: 4s
                # Determines frequency of pushing state info messages to peers(unit: second)
                publishStateInfoInterval: 4s
                # Maximum time a stateInfo message is kept until expired
                stateInfoRetentionInterval:
                # Time from startup certificates are included in Alive messages(unit: second)
                publishCertPeriod: 10s
                # Should we skip verifying block messages or not (currently not in use)
                skipBlockVerification: false
                # Dial timeout(unit: second)
                dialTimeout: 3s
                # Connection timeout(unit: second)
                connTimeout: 2s
                # Buffer size of received messages
                recvBuffSize: 20
                # Buffer size of sending messages
                sendBuffSize: 200
                # Time to wait before pull engine processes incoming digests (unit: second)
                # Should be slightly smaller than requestWaitTime
                digestWaitTime: 1s
                # Time to wait before pull engine removes incoming nonce (unit: milliseconds)
                # Should be slightly bigger than digestWaitTime
                requestWaitTime: 1500ms
                # Time to wait before pull engine ends pull (unit: second)
                responseWaitTime: 2s
                # Alive check interval(unit: second)
                aliveTimeInterval: 5s
                # Alive expiration timeout(unit: second)
                aliveExpirationTimeout: 25s
                # Reconnect interval(unit: second)
                reconnectInterval: 25s
                # This is an endpoint that is published to peers outside of the organization.
                # If this isn't set, the peer will not be known to other organizations.
                externalEndpoint:
                # Leader election service configuration
                election:
                    # Longest time peer waits for stable membership during leader election startup (unit: second)
                    startupGracePeriod: 15s
                    # Interval gossip membership samples to check its stability (unit: second)
                    membershipSampleInterval: 1s
                    # Time passes since last declaration message before peer decides to perform leader election (unit: second)
                    leaderAliveThreshold: 10s
                    # Time between peer sends propose message and declares itself as a leader (sends declaration message) (unit: second)
                    leaderElectionDuration: 5s

                pvtData:
                    # pullRetryThreshold determines the maximum duration of time private data corresponding for a given block
                    # would be attempted to be pulled from peers until the block would be committed without the private data
                    pullRetryThreshold: 60s
                    # As private data enters the transient store, it is associated with the peer's ledger's height at that time.
                    # transientstoreMaxBlockRetention defines the maximum difference between the current ledger's height upon commit,
                    # and the private data residing inside the transient store that is guaranteed not to be purged.
                    # Private data is purged from the transient store when blocks with sequences that are multiples
                    # of transientstoreMaxBlockRetention are committed.
                    transientstoreMaxBlockRetention: 1000
                    # pushAckTimeout is the maximum time to wait for an acknowledgement from each peer
                    # at private data push at endorsement time.
                    pushAckTimeout: 3s
                    # Block to live pulling margin, used as a buffer
                    # to prevent peer from trying to pull private data
                    # from peers that is soon to be purged in next N blocks.
                    # This helps a newly joined peer catch up to current
                    # blockchain height quicker.
                    btlPullMargin: 10
                    # the process of reconciliation is done in an endless loop, while in each iteration reconciler tries to
                    # pull from the other peers the most recent missing blocks with a maximum batch size limitation.
                    # reconcileBatchSize determines the maximum batch size of missing private data that will be reconciled in a
                    # single iteration.
                    reconcileBatchSize: 10
                    # reconcileSleepInterval determines the time reconciler sleeps from end of an iteration until the beginning
                    # of the next reconciliation iteration.
                    reconcileSleepInterval: 1m
                    # reconciliationEnabled is a flag that indicates whether private data reconciliation is enable or not.
                    reconciliationEnabled: true
                    # skipPullingInvalidTransactionsDuringCommit is a flag that indicates whether pulling of invalid
                    # transaction's private data from other peers need to be skipped during the commit time and pulled
                    # only through reconciler.
                    skipPullingInvalidTransactionsDuringCommit: false

                # Gossip state transfer related configuration
                state:
                    # indicates whenever state transfer is enabled or not
                    # default value is true, i.e. state transfer is active
                    # and takes care to sync up missing blocks allowing
                    # lagging peer to catch up to speed with rest network
                    enabled: true
                    # checkInterval interval to check whether peer is lagging behind enough to
                    # request blocks via state transfer from another peer.
                    checkInterval: 10s
                    # responseTimeout amount of time to wait for state transfer response from
                    # other peers
                    responseTimeout: 3s
                    # batchSize the number of blocks to request via state transfer from another peer
                    batchSize: 10
                    # blockBufferSize reflects the size of the re-ordering buffer
                    # which captures blocks and takes care to deliver them in order
                    # down to the ledger layer. The actually buffer size is bounded between
                    # 0 and 2*blockBufferSize, each channel maintains its own buffer
                    blockBufferSize: 100
                    # maxRetries maximum number of re-tries to ask
                    # for single state transfer request
                    maxRetries: 3

            # TLS Settings
            tls:
                # Require server-side TLS
                enabled:  false
                # Require client certificates / mutual TLS.
                # Note that clients that are not configured to use a certificate will
                # fail to connect to the peer.
                clientAuthRequired: false
                # X.509 certificate used for TLS server
                cert:
                    file: tls/server.crt
                # Private key used for TLS server (and client if clientAuthEnabled
                # is set to true
                key:
                    file: tls/server.key
                # Trusted root certificate chain for tls.cert
                rootcert:
                    file: tls/ca.crt
                # Set of root certificate authorities used to verify client certificates
                clientRootCAs:
                    files:
                      - tls/ca.crt
                # Private key used for TLS when making client connections.  If
                # not set, peer.tls.key.file will be used instead
                clientKey:
                    file:
                # X.509 certificate used for TLS when making client connections.
                # If not set, peer.tls.cert.file will be used instead
                clientCert:
                    file:

            # Authentication contains configuration parameters related to authenticating
            # client messages
            authentication:
                # the acceptable difference between the current server time and the
                # client's time as specified in a client request message
                timewindow: 15m

            # Path on the file system where peer will store data (eg ledger). This
            # location must be access control protected to prevent unintended
            # modification that might corrupt the peer operations.
            fileSystemPath: /var/hyperledger/production

            # BCCSP (Blockchain crypto provider): Select which crypto implementation or
            # library to use
            BCCSP:
                Default: SW
                # Settings for the SW crypto provider (i.e. when DEFAULT: SW)
                SW:
                    # TODO: The default Hash and Security level needs refactoring to be
                    # fully configurable. Changing these defaults requires coordination
                    # SHA2 is hardcoded in several places, not only BCCSP
                    Hash: SHA2
                    Security: 256
                    # Location of Key Store
                    FileKeyStore:
                        # If "", defaults to 'mspConfigPath'/keystore
                        KeyStore:
                # Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)
                PKCS11:
                    # Location of the PKCS11 module library
                    Library:
                    # Token Label
                    Label:
                    # User PIN
                    Pin:
                    Hash:
                    Security:

            # Path on the file system where peer will find MSP local configurations
            mspConfigPath: msp

            # Identifier of the local MSP
            # ----!!!!IMPORTANT!!!-!!!IMPORTANT!!!-!!!IMPORTANT!!!!----
            # Deployers need to change the value of the localMspId string.
            # In particular, the name of the local MSP ID of a peer needs
            # to match the name of one of the MSPs in each of the channel
            # that this peer is a member of. Otherwise this peer's messages
            # will not be identified as valid by other nodes.
            localMspId: SampleOrg

            # CLI common client config options
            client:
                # connection timeout
                connTimeout: 3s

            # Delivery service related config
            deliveryclient:
                # It sets the total time the delivery service may spend in reconnection
                # attempts until its retry logic gives up and returns an error
                reconnectTotalTimeThreshold: 3600s

                # It sets the delivery service <-> ordering service node connection timeout
                connTimeout: 3s

                # It sets the delivery service maximal delay between consecutive retries
                reConnectBackoffThreshold: 3600s

                # A list of orderer endpoint addresses which should be overridden
                # when found in channel configurations.
                addressOverrides:
                #  - from:
                #    to:
                #    caCertsFile:
                #  - from:
                #    to:
                #    caCertsFile:

            # Type for the local MSP - by default it's of type bccsp
            localMspType: bccsp

            # Used with Go profiling tools only in none production environment. In
            # production, it should be disabled (eg enabled: false)
            profile:
                enabled:     false
                listenAddress: 0.0.0.0:6060

            # Handlers defines custom handlers that can filter and mutate
            # objects passing within the peer, such as:
            #   Auth filter - reject or forward proposals from clients
            #   Decorators  - append or mutate the chaincode input passed to the chaincode
            #   Endorsers   - Custom signing over proposal response payload and its mutation
            # Valid handler definition contains:
            #   - A name which is a factory method name defined in
            #     core/handlers/library/library.go for statically compiled handlers
            #   - library path to shared object binary for pluggable filters
            # Auth filters and decorators are chained and executed in the order that
            # they are defined. For example:
            # authFilters:
            #   -
            #     name: FilterOne
            #     library: /opt/lib/filter.so
            #   -
            #     name: FilterTwo
            # decorators:
            #   -
            #     name: DecoratorOne
            #   -
            #     name: DecoratorTwo
            #     library: /opt/lib/decorator.so
            # Endorsers are configured as a map that its keys are the endorsement system chaincodes that are being overridden.
            # Below is an example that overrides the default ESCC and uses an endorsement plugin that has the same functionality
            # as the default ESCC.
            # If the 'library' property is missing, the name is used as the constructor method in the builtin library similar
            # to auth filters and decorators.
            # endorsers:
            #   escc:
            #     name: DefaultESCC
            #     library: /etc/hyperledger/fabric/plugin/escc.so
            handlers:
                authFilters:
                  -
                    name: DefaultAuth
                  -
                    name: ExpirationCheck    # This filter checks identity x509 certificate expiration
                decorators:
                  -
                    name: DefaultDecorator
                endorsers:
                  escc:
                    name: DefaultEndorsement
                    library:
                validators:
                  vscc:
                    name: DefaultValidation
                    library:

            #    library: /etc/hyperledger/fabric/plugin/escc.so
            # Number of goroutines that will execute transaction validation in parallel.
            # By default, the peer chooses the number of CPUs on the machine. Set this
            # variable to override that choice.
            # NOTE: overriding this value might negatively influence the performance of
            # the peer so please change this value only if you know what you're doing
            validatorPoolSize:

            # The discovery service is used by clients to query information about peers,
            # such as - which peers have joined a certain channel, what is the latest
            # channel config, and most importantly - given a chaincode and a channel,
            # what possible sets of peers satisfy the endorsement policy.
            discovery:
                enabled: true
                # Whether the authentication cache is enabled or not.
                authCacheEnabled: true
                # The maximum size of the cache, after which a purge takes place
                authCacheMaxSize: 1000
                # The proportion (0 to 1) of entries that remain in the cache after the cache is purged due to overpopulation
                authCachePurgeRetentionRatio: 0.75
                # Whether to allow non-admins to perform non channel scoped queries.
                # When this is false, it means that only peer admins can perform non channel scoped queries.
                orgMembersAllowedAccess: false

            # Limits is used to configure some internal resource limits.
            limits:
              # Concurrency limits the number of concurrently running system chaincode requests.
              # This option is only supported for qscc at this time.
              concurrency:
                qscc: 5000

        ###############################################################################
        #
        #    VM section
        #
        ###############################################################################
        vm:

            # Endpoint of the vm management system.  For docker can be one of the following in general
            # unix:///var/run/docker.sock
            # http://localhost:2375
            # https://localhost:2376
            endpoint: unix:///var/run/docker.sock

            # settings for docker vms
            docker:
                tls:
                    enabled: false
                    ca:
                        file: docker/ca.crt
                    cert:
                        file: docker/tls.crt
                    key:
                        file: docker/tls.key

                # Enables/disables the standard out/err from chaincode containers for
                # debugging purposes
                attachStdout: false

                # Parameters on creating docker container.
                # Container may be efficiently created using ipam & dns-server for cluster
                # NetworkMode - sets the networking mode for the container. Supported
                # standard values are: `host`(default),`bridge`,`ipvlan`,`none`.
                # Dns - a list of DNS servers for the container to use.
                # Note:  `Privileged` `Binds` `Links` and `PortBindings` properties of
                # Docker Host Config are not supported and will not be used if set.
                # LogConfig - sets the logging driver (Type) and related options
                # (Config) for Docker. For more info,
                # https://docs.docker.com/engine/admin/logging/overview/
                # Note: Set LogConfig using Environment Variables is not supported.
                hostConfig:
                    NetworkMode: host
                    Dns:
                      # - 192.168.0.1
                    LogConfig:
                        Type: json-file
                        Config:
                            max-size: "50m"
                            max-file: "5"
                    Memory: 2147483648

        ###############################################################################
        #
        #    Chaincode section
        #
        ###############################################################################
        chaincode:

            # The id is used by the Chaincode stub to register the executing Chaincode
            # ID with the Peer and is generally supplied through ENV variables
            # the `path` form of ID is provided when installing the chaincode.
            # The `name` is used for all other requests and can be any string.
            id:
                path:
                name:

            # Generic builder environment, suitable for most chaincode types
            builder: $(DOCKER_NS)/fabric-ccenv:$(PROJECT_VERSION)

            # Enables/disables force pulling of the base docker images (listed below)
            # during user chaincode instantiation.
            # Useful when using moving image tags (such as :latest)
            pull: false

            golang:
                # golang will never need more than baseos
                runtime: $(DOCKER_NS)/fabric-baseos:$(PROJECT_VERSION)

                # whether or not golang chaincode should be linked dynamically
                dynamicLink: false

            java:
                # This is an image based on java:openjdk-8 with addition compiler
                # tools added for java shim layer packaging.
                # This image is packed with shim layer libraries that are necessary
                # for Java chaincode runtime.
                runtime: $(DOCKER_NS)/fabric-javaenv:latest

            node:
                # This is an image based on node:$(NODE_VER)-alpine
                runtime: $(DOCKER_NS)/fabric-nodeenv:latest

            # List of directories to treat as external builders and launchers for
            # chaincode. The external builder detection processing will iterate over the
            # builders in the order specified below.
            externalBuilders:
              - name: external-builder
                path: /builders/external
                environmentWhitelist:
                   - GOPROXY

            # The maximum duration to wait for the chaincode build and install process
            # to complete.
            installTimeout: 300s

            # Timeout duration for starting up a container and waiting for Register
            # to come through.
            startuptimeout: 300s

            # Timeout duration for Invoke and Init calls to prevent runaway.
            # This timeout is used by all chaincodes in all the channels, including
            # system chaincodes.
            # Note that during Invoke, if the image is not available (e.g. being
            # cleaned up when in development environment), the peer will automatically
            # build the image, which might take more time. In production environment,
            # the chaincode image is unlikely to be deleted, so the timeout could be
            # reduced accordingly.
            executetimeout: 30s

            # There are 2 modes: "dev" and "net".
            # In dev mode, user runs the chaincode after starting peer from
            # command line on local machine.
            # In net mode, peer will run chaincode in a docker container.
            mode: net

            # keepalive in seconds. In situations where the communiction goes through a
            # proxy that does not support keep-alive, this parameter will maintain connection
            # between peer and chaincode.
            # A value <= 0 turns keepalive off
            keepalive: 0

            # system chaincodes whitelist. To add system chaincode "myscc" to the
            # whitelist, add "myscc: enable" to the list below, and register in
            # chaincode/importsysccs.go
            system:
                _lifecycle: enable
                cscc: enable
                lscc: enable
                escc: enable
                vscc: enable
                qscc: enable

            # Logging section for the chaincode container
            logging:
              # Default level for all loggers within the chaincode container
              level:  info
              # Override default level for the 'shim' logger
              shim:   warning
              # Format for the chaincode container logs
              format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'

        ###############################################################################
        #
        #    Ledger section - ledger configuration encompasses both the blockchain
        #    and the state
        #
        ###############################################################################
        ledger:

          blockchain:

          state:
            # stateDatabase - options are "goleveldb", "CouchDB"
            # goleveldb - default state database stored in goleveldb.
            # CouchDB - store state database in CouchDB
            stateDatabase: goleveldb
            # Limit on the number of records to return per query
            totalQueryLimit: 100000
            couchDBConfig:
              # It is recommended to run CouchDB on the same server as the peer, and
              # not map the CouchDB container port to a server port in docker-compose.
              # Otherwise proper security must be provided on the connection between
              # CouchDB client (on the peer) and server.
              couchDBAddress: 127.0.0.1:5984
              # This username must have read and write authority on CouchDB
              username:
              # The password is recommended to pass as an environment variable
              # during start up (eg CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD).
              # If it is stored here, the file must be access control protected
              # to prevent unintended users from discovering the password.
              password:
              # Number of retries for CouchDB errors
              maxRetries: 3
              # Number of retries for CouchDB errors during peer startup
              maxRetriesOnStartup: 12
              # CouchDB request timeout (unit: duration, e.g. 20s)
              requestTimeout: 35s
              # Limit on the number of records per each CouchDB query
              # Note that chaincode queries are only bound by totalQueryLimit.
              # Internally the chaincode may execute multiple CouchDB queries,
              # each of size internalQueryLimit.
              internalQueryLimit: 1000
              # Limit on the number of records per CouchDB bulk update batch
              maxBatchUpdateSize: 1000
              # Warm indexes after every N blocks.
              # This option warms any indexes that have been
              # deployed to CouchDB after every N blocks.
              # A value of 1 will warm indexes after every block commit,
              # to ensure fast selector queries.
              # Increasing the value may improve write efficiency of peer and CouchDB,
              # but may degrade query response time.
              warmIndexesAfterNBlocks: 1
              # Create the _global_changes system database
              # This is optional.  Creating the global changes database will require
              # additional system resources to track changes and maintain the database
              createGlobalChangesDB: false
              # CacheSize denotes the maximum mega bytes (MB) to be allocated for the in-memory state
              # cache. Note that CacheSize needs to be a multiple of 32 MB. If it is not a multiple
              # of 32 MB, the peer would round the size to the next multiple of 32 MB.
              # To disable the cache, 0 MB needs to be assigned to the cacheSize.
              cacheSize: 64

          history:
            # enableHistoryDatabase - options are true or false
            # Indicates if the history of key updates should be stored.
            # All history 'index' will be stored in goleveldb, regardless if using
            # CouchDB or alternate database for the state.
            enableHistoryDatabase: true

          pvtdataStore:
            # the maximum db batch size for converting
            # the ineligible missing data entries to eligible missing data entries
            collElgProcMaxDbBatchSize: 5000
            # the minimum duration (in milliseconds) between writing
            # two consecutive db batches for converting the ineligible missing data entries to eligible missing data entries
            collElgProcDbBatchesInterval: 1000

        ###############################################################################
        #
        #    Operations section
        #
        ###############################################################################
        operations:
            # host and port for the operations server
            listenAddress: 127.0.0.1:9443

            # TLS configuration for the operations endpoint
            tls:
                # TLS enabled
                enabled: false

                # path to PEM encoded server certificate for the operations server
                cert:
                    file:

                # path to PEM encoded server key for the operations server
                key:
                    file:

                # most operations service endpoints require client authentication when TLS
                # is enabled. clientAuthRequired requires client certificate authentication
                # at the TLS layer to access all resources.
                clientAuthRequired: false

                # paths to PEM encoded ca certificates to trust for client authentication
                clientRootCAs:
                    files: []

        ###############################################################################
        #
        #    Metrics section
        #
        ###############################################################################
        metrics:
            # metrics provider is one of statsd, prometheus, or disabled
            provider: disabled

            # statsd configuration
            statsd:
                # network type: tcp or udp
                network: udp

                # statsd server address
                address: 127.0.0.1:8125

                # the interval at which locally cached counters and gauges are pushed
                # to statsd; timings are pushed immediately
                writeInterval: 10s

                # prefix is prepended to all emitted statsd metrics
                prefix:
---
# Source: dltlogging/templates/configmaps/caclientconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: caclientconfig
data:
  config.json: |-
      {
      "request-timeout" : 30000,
      "tcert-batch-size" : 10,
      "crypto-hash-algo": "SHA2",
      "crypto-keysize": 256,
      "crypto-hsm": false,
      "connection-timeout": 30000
      }
---
# Source: dltlogging/templates/configmaps/fabrictools.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fabrictools
  namespace: default
data:
  createGenesis.sh: |

    sleep 20

    export FABRIC_CFG_PATH=${PWD}configtx

    configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./system-genesis-block/genesis.block
    
  createChannel.sh: |

    # sleep 20

    CHANNEL_NAME="$1"
    DELAY="$2"
    MAX_RETRY="$3"
    VERBOSE="$4"
    : ${CHANNEL_NAME:="mychannel"}
    : ${DELAY:="3"}
    : ${MAX_RETRY:="5"}
    : ${VERBOSE:="true"}
    FABRIC_CFG_PATH=${PWD}configtx

    createChannelTx() 
    {

        set -x
        configtxgen -profile TwoOrgsChannel -outputCreateChannelTx ./channel-artifacts/${CHANNEL_NAME}.tx -channelID $CHANNEL_NAME
        res=$?
        { set +x; } 2>/dev/null
        if [ $res -ne 0 ]; then
            fatalln "Failed to generate channel configuration transaction..."
        fi

    }

    createAncorPeerTx() 
    {

        for orgmsp in Org1MSP Org2MSP; do

        echo "Generating anchor peer update transaction for ${orgmsp}"
        set -x
        configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/${orgmsp}anchors.tx -channelID $CHANNEL_NAME -asOrg ${orgmsp}
        res=$?
        { set +x; } 2>/dev/null
        if [ $res -ne 0 ]; then
            fatalln "Failed to generate anchor peer update transaction for ${orgmsp}..."
        fi
        done
    }


    verifyResult() 
    {
    if [ $1 -ne 0 ]; then
        fatalln "$2"
    fi
    }


    ## Create channeltx
    echo "Generating channel create transaction '${CHANNEL_NAME}.tx'"
    createChannelTx

    ## Create anchorpeertx
    echo "Generating anchor peer update transactions"
    createAncorPeerTx



    exit 0
---
# Source: dltlogging/templates/configmaps/hlfcerts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hlfcerts
  namespace: default
data:
  orderer-certs.sh: |
  
    set -x

    sleep 20

    mkdir -p organizations/ordererOrganizations/example.com
  
    export FABRIC_CA_CLIENT_HOME=/organizations/ordererOrganizations/example.com
    echo $FABRIC_CA_CLIENT_HOME

    fabric-ca-client enroll -u https://admin:adminpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer --tls.certfiles "/organizations/fabric-ca/ordererOrg/tls-cert.pem"


    echo 'NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorderer-10054-my-release-dltlogging-caorderer.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorderer-10054-my-release-dltlogging-caorderer.pem
        OrganizationalUnitIdentifier: peer
      AdminOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorderer-10054-my-release-dltlogging-caorderer.pem
        OrganizationalUnitIdentifier: admin
      OrdererOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorderer-10054-my-release-dltlogging-caorderer.pem
        OrganizationalUnitIdentifier: orderer' > "/organizations/ordererOrganizations/example.com/msp/config.yaml"

    echo "Register orderer"
    fabric-ca-client register --caname my-release-dltlogging-caorderer --id.name orderer --id.secret ordererpw --id.type orderer --tls.certfiles "/organizations/fabric-ca/ordererOrg/tls-cert.pem"

    echo "Register orderer2"

    fabric-ca-client register --caname my-release-dltlogging-caorderer --id.name orderer2 --id.secret ordererpw --id.type orderer --tls.certfiles  "/organizations/fabric-ca/ordererOrg/tls-cert.pem"

    echo "Register orderer3"
    fabric-ca-client register --caname my-release-dltlogging-caorderer --id.name orderer3 --id.secret ordererpw --id.type orderer --tls.certfiles  "/organizations/fabric-ca/ordererOrg/tls-cert.pem"

    echo "Register the orderer admin"
    fabric-ca-client register --caname my-release-dltlogging-caorderer --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles "/organizations/fabric-ca/ordererOrg/tls-cert.pem"

    mkdir -p organizations/ordererOrganizations/example.com/orderers


    # -----------------------------------------------------------------------
    #  Orderer
    
    mkdir -p organizations/ordererOrganizations/example.com/orderers/orderer.example.com

    echo "Generate the orderer msp"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp --csr.hosts orderer.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer --csr.hosts my-release-dltlogging-orderer --tls.certfiles "/organizations/fabric-ca/ordererOrg/tls-cert.pem"

    cp /organizations/ordererOrganizations/example.com/msp/config.yaml /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/config.yaml

    echo "Generate the orderer-tls certificates"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls --enrollment.profile tls --csr.hosts orderer.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer --csr.hosts my-release-dltlogging-orderer --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/signcerts/* /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/keystore/* /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key

    mkdir -p /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    mkdir -p /organizations/ordererOrganizations/example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    mkdir -p organizations/ordererOrganizations/example.com/users
    mkdir -p organizations/ordererOrganizations/example.com/users/Admin@example.com


    # -----------------------------------------------------------------------
    #  Orderer 2

    mkdir -p organizations/ordererOrganizations/example.com/orderers/orderer2.example.com

    echo "Generate the orderer2 msp"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp --csr.hosts orderer2.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer2 --csr.hosts my-release-dltlogging-orderer2 --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/msp/config.yaml /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp/config.yaml

    echo "Generate the orderer2-tls certificates"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls --enrollment.profile tls --csr.hosts orderer2.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer2 --csr.hosts my-release-dltlogging-orderer2 --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/ca.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/signcerts/* /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/keystore/* /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key

    mkdir -p /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    mkdir -p /organizations/ordererOrganizations/example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    

    # -----------------------------------------------------------------------
    #  Orderer 3

    mkdir -p organizations/ordererOrganizations/example.com/orderers/orderer3.example.com

    echo "Generate the orderer3 msp"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp --csr.hosts orderer3.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer3 --csr.hosts my-release-dltlogging-orderer3 --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/msp/config.yaml /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp/config.yaml

    echo "Generate the orderer3-tls certificates"
    fabric-ca-client enroll -u https://orderer:ordererpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls --enrollment.profile tls --csr.hosts orderer3.example.com --csr.hosts localhost --csr.hosts my-release-dltlogging-caorderer --csr.hosts orderer3 --csr.hosts my-release-dltlogging-orderer3 --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/ca.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/signcerts/* /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
    cp /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/keystore/* /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key

    mkdir -p /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    mkdir -p /organizations/ordererOrganizations/example.com/msp/tlscacerts
    cp /organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/tlscacerts/* /organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    echo "Generate the admin msp"
    fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@my-release-dltlogging-caorderer:10054 --caname my-release-dltlogging-caorderer -M /organizations/ordererOrganizations/example.com/users/Admin@example.com/msp --tls.certfiles /organizations/fabric-ca/ordererOrg/tls-cert.pem

    cp /organizations/ordererOrganizations/example.com/msp/config.yaml /organizations/ordererOrganizations/example.com/users/Admin@example.com/msp/config.yaml

    { set +x; } 2>/dev/null
  
  org1-certs.sh: |

    set -x

    sleep 10

    mkdir -p /organizations/peerOrganizations/org1.example.com/

    export FABRIC_CA_CLIENT_HOME=/organizations/peerOrganizations/org1.example.com/


    fabric-ca-client enroll -u https://admin:adminpw@my-release-dltlogging-caorg1:7054 --caname my-release-dltlogging-caorg1 --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"

    echo 'NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg1-7054-my-release-dltlogging-caorg1.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg1-7054-my-release-dltlogging-caorg1.pem
        OrganizationalUnitIdentifier: peer
      AdminOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg1-7054-my-release-dltlogging-caorg1.pem
        OrganizationalUnitIdentifier: admin
      OrdererOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg1-7054-my-release-dltlogging-caorg1.pem
        OrganizationalUnitIdentifier: orderer' > "/organizations/peerOrganizations/org1.example.com/msp/config.yaml"


    fabric-ca-client register --caname my-release-dltlogging-caorg1 --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"


    fabric-ca-client register --caname my-release-dltlogging-caorg1 --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"


    fabric-ca-client register --caname my-release-dltlogging-caorg1 --id.name org1admin --id.secret org1adminpw --id.type admin --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"


    fabric-ca-client enroll -u https://peer0:peer0pw@my-release-dltlogging-caorg1:7054 --caname my-release-dltlogging-caorg1 -M "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp" --csr.hosts peer0.org1.example.com --csr.hosts peer0org1 --csr.hosts my-release-dltlogging-peer0org1  --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"


    cp "/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/config.yaml"

    fabric-ca-client enroll -u https://peer0:peer0pw@my-release-dltlogging-caorg1:7054 --caname my-release-dltlogging-caorg1 -M "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls" --enrollment.profile tls --csr.hosts peer0.org1.example.com --csr.hosts peer0org1 --csr.hosts my-release-dltlogging-caorg1 --csr.hosts localhost --csr.hosts my-release-dltlogging-peer0org1  --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"

    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/signcerts/"* "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt"
    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/keystore/"* "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key"

    mkdir -p "/organizations/peerOrganizations/org1.example.com/msp/tlscacerts"
    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org1.example.com/msp/tlscacerts/ca.crt"

    mkdir -p "/organizations/peerOrganizations/org1.example.com/tlsca"
    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"

    mkdir -p "/organizations/peerOrganizations/org1.example.com/ca"
    cp "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/cacerts/"* "/organizations/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem"


    fabric-ca-client enroll -u https://user1:user1pw@my-release-dltlogging-caorg1:7054 --caname my-release-dltlogging-caorg1 -M "/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp" --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"

    cp "/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "/organizations/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/config.yaml"

    fabric-ca-client enroll -u https://org1admin:org1adminpw@my-release-dltlogging-caorg1:7054 --caname my-release-dltlogging-caorg1 -M "/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" --tls.certfiles "/organizations/fabric-ca/org1/tls-cert.pem"

    cp "/organizations/peerOrganizations/org1.example.com/msp/config.yaml" "/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/config.yaml"

    { set +x; } 2>/dev/null

  org2-certs.sh: |
    
    set -x

    sleep 10

    mkdir -p /organizations/peerOrganizations/org2.example.com/
    export FABRIC_CA_CLIENT_HOME=/organizations/peerOrganizations/org2.example.com/

    fabric-ca-client enroll -u https://admin:adminpw@my-release-dltlogging-caorg2:8054 --caname my-release-dltlogging-caorg2 --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    echo 'NodeOUs:
      Enable: true
      ClientOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg2-8054-my-release-dltlogging-caorg2.pem
        OrganizationalUnitIdentifier: client
      PeerOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg2-8054-my-release-dltlogging-caorg2.pem
        OrganizationalUnitIdentifier: peer
      AdminOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg2-8054-my-release-dltlogging-caorg2.pem
        OrganizationalUnitIdentifier: admin
      OrdererOUIdentifier:
        Certificate: cacerts/my-release-dltlogging-caorg2-8054-my-release-dltlogging-caorg2.pem
        OrganizationalUnitIdentifier: orderer' > "/organizations/peerOrganizations/org2.example.com/msp/config.yaml"



    fabric-ca-client register --caname my-release-dltlogging-caorg2 --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    fabric-ca-client register --caname my-release-dltlogging-caorg2 --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    fabric-ca-client register --caname my-release-dltlogging-caorg2 --id.name org2admin --id.secret org2adminpw --id.type admin --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    fabric-ca-client enroll -u https://peer0:peer0pw@my-release-dltlogging-caorg2:8054 --caname my-release-dltlogging-caorg2 -M "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp" --csr.hosts peer0.org2.example.com --csr.hosts peer0org2 --csr.hosts my-release-dltlogging-peer0org2   --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    cp "/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/config.yaml"

    fabric-ca-client enroll -u https://peer0:peer0pw@my-release-dltlogging-caorg2:8054 --caname my-release-dltlogging-caorg2 -M "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls" --enrollment.profile tls --csr.hosts peer0.org2.example.com --csr.hosts peer0org2 --csr.hosts my-release-dltlogging-caorg2 --csr.hosts localhost --csr.hosts my-release-dltlogging-peer0org2   --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"


    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/signcerts/"* "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt"
    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/keystore/"* "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key"

    mkdir -p "/organizations/peerOrganizations/org2.example.com/msp/tlscacerts"
    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org2.example.com/msp/tlscacerts/ca.crt"

    mkdir -p "/organizations/peerOrganizations/org2.example.com/tlsca"
    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/tlscacerts/"* "/organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem"

    mkdir -p "/organizations/peerOrganizations/org2.example.com/ca"
    cp "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/cacerts/"* "/organizations/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem"


    fabric-ca-client enroll -u https://user1:user1pw@my-release-dltlogging-caorg2:8054 --caname my-release-dltlogging-caorg2 -M "/organizations/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp" --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    cp "/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "/organizations/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp/config.yaml"

    fabric-ca-client enroll -u https://org2admin:org2adminpw@my-release-dltlogging-caorg2:8054 --caname my-release-dltlogging-caorg2 -M "/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" --tls.certfiles "/organizations/fabric-ca/org2/tls-cert.pem"

    cp "/organizations/peerOrganizations/org2.example.com/msp/config.yaml" "/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/config.yaml"

    { set +x; } 2>/dev/null
---
# Source: dltlogging/templates/configmaps/hlfchaincode.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hlfchaincode
  namespace: default
data:
binaryData:
 loggingbasic1.tgz: |
   H4sIAAAAAAAAA0vOT0nVK0ks0kuvYqAVMAACMzMTEG1obmqITIOBiakpg6GJiamhkbG5OUidIZA2YlAwoJmLkEBpMdD3CgoMJVWZ+XmJxallONQRkh+iQL6bA8JgfnvJ0fuwgQTbg3m/tZ3OrzOJ3n0gL2q1SOIJiablQrcjFm89qCIa8uf9tuLWSLWvRikf7Kbrf6ir5Fy6c1X2xOiVWf8vrrhl2bLgaMQF31NKu6zNn02xMuFRtppraMY/t6FNZ5alisWJbDap5J1qRza+f2v+wG3Pv03m0+RX8k/fYhMnEiXxWLcjfOWmKaWWmlq35bd/7pOeqR17iZV70cryT7VbJ+w5taZGbNXGu7VSM+w2TT25pSJziZir9N3Ppzpyp4QHXTF73FsrEVkplB/7dknxtJhl3pOOPKmaem/OOuGiqXfymB79trs5Z9LTn/tY36dn6m2R3XLsZNbcuCWF1dn+Tw3e/t4SVJ8prVlsf/f/P0GMAHrwooaxro9vNYMGnWOGPiA3tSQxJbEkUS+rOD+PRnaA8ri5uQHO/G9gBs7/hiZGRsamBkB1hibGwCJhNP/TAVQrFSSWZChZKSnpKJVUFqQCWakVJalFeYk5QJGcxKTUHKBQTn56emZeelJicWayUi3XQDt6FIyCUTAKRsEoGAWjYBSMglEwCkbBKBgFo2AUjIJRMApGwSgYBaNgFIyCUTAKRsEoGAWjYBTAAQCIZVS3ACgAAA==
 loggingbasic2.tgz: |
   H4sIAAAAAAAAA0vOT0nVK0ks0kuvYqAVMAACMzMTEG1obmqITIOBiakpg6GJiamhkbG5OUidIZA2YlAwoJmLkEBpMdD3CgoMJVWZ+XmJxallONQRkh+iQL6bA8JgfnvJ0fuwgQTbg3nftZ3OrzOJ3X0gz2q1SOIJiablgrcjFm88qCIa8uf9tuLWSLWvRikf7Kbrf6ir5Fy6c53WROuVqx9cfHXKumXDwYgbfqeEdlmbL5tSZdInLOUrMftYnEfyNB8bIbknprZbS+8IPNr5/Zl0gXZc/U3pU/1XjneY1MSJuEW8Pt+xviTy1CoZ8VOlx9/ueRz27NaUiz2tnk/m18TrqoRnq89vXRdbPb9tW/ecTdnKcVmZLhddvsdEbuwtUnV9em1PGT+ztv+jtWtlt5+7dDrH8ZLlzrg08+Wrp8Qs3T67gcXRwWx5SeG+/IP/I2dxP65a+7lk5ym9TZXF2f6p9m9/9Vyrz5TWkK7t+/fbHSOAGhZ/Zq2P3tPJoEHnmKEPyE0tSUxJLEnUyyrOz6ORHaA8bm5ugDP/G5iB87+hiZGRsakBUJ2hiTGwSBjN/3QA1UoFiSUZSlZKSjpKJZUFqUBWakVJalFeYg5QJCcxKTUHKJSTn56emZeelFicmaxUyzXQjh4Fo2AUjIJRMApGwSgYBaNgFIyCUTAKRsEoGAWjYBSMglEwCkbBKBgFo2AUjIJRMApGwSgYBXAAANs1MvAAKAAA
---
# Source: dltlogging/templates/configmaps/hlfconfigtx.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hlfconfigtx
  namespace: default
data:
    configtx.yaml: |
        # Copyright IBM Corp. All Rights Reserved.
        #
        # SPDX-License-Identifier: Apache-2.0
        #

        ---
        ################################################################################
        #
        #   Section: Organizations
        #
        #   - This section defines the different organizational identities which will
        #   be referenced later in the configuration.
        #
        ################################################################################
        Organizations:

            # SampleOrg defines an MSP using the sampleconfig.  It should never be used
            # in production but may be used as a template for other definitions
            - &OrdererOrg
                # DefaultOrg defines the organization which is used in the sampleconfig
                # of the fabric.git development environment
                Name: OrdererOrg

                # ID to load the MSP definition as
                ID: OrdererMSP

                # MSPDir is the filesystem path which contains the MSP configuration
                MSPDir: ../organizations/ordererOrganizations/example.com/msp

                # Policies defines the set of policies at this level of the config tree
                # For organization policies, their canonical path is usually
                #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
                Policies:
                    Readers:
                        Type: Signature
                        Rule: "OR('OrdererMSP.member')"
                    Writers:
                        Type: Signature
                        Rule: "OR('OrdererMSP.member')"
                    Admins:
                        Type: Signature
                        Rule: "OR('OrdererMSP.admin')"
                    Endorsement:
                        Type: Signature
                        Rule: "OR('OrdererMSP.member')"

                OrdererEndpoints:
                    - my-release-dltlogging-orderer:7050
                    - my-release-dltlogging-orderer2:7050
                    - my-release-dltlogging-orderer3:7050

            - &Org1
                # DefaultOrg defines the organization which is used in the sampleconfig
                # of the fabric.git development environment
                Name: Org1MSP

                # ID to load the MSP definition as
                ID: Org1MSP

                MSPDir: ../organizations/peerOrganizations/org1.example.com/msp

                # Policies defines the set of policies at this level of the config tree
                # For organization policies, their canonical path is usually
                #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
                Policies:
                    Readers:
                        Type: Signature
                        Rule: "OR('Org1MSP.member')"
                    Writers:
                        Type: Signature
                        Rule: "OR('Org1MSP.member')"
                    Admins:
                        Type: Signature
                        Rule: "OR('Org1MSP.admin')"
                    Endorsement:
                        Type: Signature
                        Rule: "OR('Org1MSP.peer')"

                # leave this flag set to true.
                AnchorPeers:
                    # AnchorPeers defines the location of peers which can be used
                    # for cross org gossip communication.  Note, this value is only
                    # encoded in the genesis block in the Application section context
                    - Host: my-release-dltlogging-peer0org1
                      Port: 7051

            - &Org2
                # DefaultOrg defines the organization which is used in the sampleconfig
                # of the fabric.git development environment
                Name: Org2MSP

                # ID to load the MSP definition as
                ID: Org2MSP

                MSPDir: ../organizations/peerOrganizations/org2.example.com/msp

                # Policies defines the set of policies at this level of the config tree
                # For organization policies, their canonical path is usually
                #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
                Policies:
                    Readers:
                        Type: Signature
                        Rule: "OR('Org2MSP.member')"
                    Writers:
                        Type: Signature
                        Rule: "OR('Org2MSP.member')"
                    Admins:
                        Type: Signature
                        Rule: "OR('Org2MSP.admin')"
                    Endorsement:
                        Type: Signature
                        Rule: "OR('Org2MSP.peer')"

                AnchorPeers:
                    # AnchorPeers defines the location of peers which can be used
                    # for cross org gossip communication.  Note, this value is only
                    # encoded in the genesis block in the Application section context
                    - Host: my-release-dltlogging-peer0org2
                      Port: 7051

        ################################################################################
        #
        #   SECTION: Capabilities
        #
        #   - This section defines the capabilities of fabric network. This is a new
        #   concept as of v1.1.0 and should not be utilized in mixed networks with
        #   v1.0.x peers and orderers.  Capabilities define features which must be
        #   present in a fabric binary for that binary to safely participate in the
        #   fabric network.  For instance, if a new MSP type is added, newer binaries
        #   might recognize and validate the signatures from this type, while older
        #   binaries without this support would be unable to validate those
        #   transactions.  This could lead to different versions of the fabric binaries
        #   having different world states.  Instead, defining a capability for a channel
        #   informs those binaries without this capability that they must cease
        #   processing transactions until they have been upgraded.  For v1.0.x if any
        #   capabilities are defined (including a map with all capabilities turned off)
        #   then the v1.0.x peer will deliberately crash.
        #
        ################################################################################
        Capabilities:
            # Channel capabilities apply to both the orderers and the peers and must be
            # supported by both.
            # Set the value of the capability to true to require it.
            Channel: &ChannelCapabilities
                # V2_0 capability ensures that orderers and peers behave according
                # to v2.0 channel capabilities. Orderers and peers from
                # prior releases would behave in an incompatible way, and are therefore
                # not able to participate in channels at v2.0 capability.
                # Prior to enabling V2.0 channel capabilities, ensure that all
                # orderers and peers on a channel are at v2.0.0 or later.
                V2_0: true

            # Orderer capabilities apply only to the orderers, and may be safely
            # used with prior release peers.
            # Set the value of the capability to true to require it.
            Orderer: &OrdererCapabilities
                # V2_0 orderer capability ensures that orderers behave according
                # to v2.0 orderer capabilities. Orderers from
                # prior releases would behave in an incompatible way, and are therefore
                # not able to participate in channels at v2.0 orderer capability.
                # Prior to enabling V2.0 orderer capabilities, ensure that all
                # orderers on channel are at v2.0.0 or later.
                V2_0: true

            # Application capabilities apply only to the peer network, and may be safely
            # used with prior release orderers.
            # Set the value of the capability to true to require it.
            Application: &ApplicationCapabilities
                # V2_0 application capability ensures that peers behave according
                # to v2.0 application capabilities. Peers from
                # prior releases would behave in an incompatible way, and are therefore
                # not able to participate in channels at v2.0 application capability.
                # Prior to enabling V2.0 application capabilities, ensure that all
                # peers on channel are at v2.0.0 or later.
                V2_0: true

        ################################################################################
        #
        #   SECTION: Application
        #
        #   - This section defines the values to encode into a config transaction or
        #   genesis block for application related parameters
        #
        ################################################################################
        Application: &ApplicationDefaults

            # Organizations is the list of orgs which are defined as participants on
            # the application side of the network
            Organizations:

            # Policies defines the set of policies at this level of the config tree
            # For Application policies, their canonical path is
            #   /Channel/Application/<PolicyName>
            Policies:
                Readers:
                    Type: ImplicitMeta
                    Rule: "ANY Readers"
                Writers:
                    Type: ImplicitMeta
                    Rule: "ANY Writers"
                Admins:
                    Type: ImplicitMeta
                    Rule: "MAJORITY Admins"
                LifecycleEndorsement:
                    Type: ImplicitMeta
                    Rule: "MAJORITY Endorsement"
                Endorsement:
                    Type: ImplicitMeta
                    Rule: "MAJORITY Endorsement"

            Capabilities:
                <<: *ApplicationCapabilities
        ################################################################################
        #
        #   SECTION: Orderer
        #
        #   - This section defines the values to encode into a config transaction or
        #   genesis block for orderer related parameters
        #
        ################################################################################
        Orderer: &OrdererDefaults

            # Orderer Type: The orderer implementation to start
            OrdererType: etcdraft
            
            # Addresses used to be the list of orderer addresses that clients and peers
            # could connect to.  However, this does not allow clients to associate orderer
            # addresses and orderer organizations which can be useful for things such
            # as TLS validation.  The preferred way to specify orderer addresses is now
            # to include the OrdererEndpoints item in your org definition
            Addresses:
                - my-release-dltlogging-orderer:7050
                - my-release-dltlogging-orderer2:7050
                - my-release-dltlogging-orderer3:7050

            EtcdRaft:
                Consenters:
                - Host: my-release-dltlogging-orderer
                  Port: 7050
                  ClientTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
                  ServerTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt
                - Host: my-release-dltlogging-orderer2
                  Port: 7050
                  ClientTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
                  ServerTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt
                - Host: my-release-dltlogging-orderer3
                  Port: 7050
                  ClientTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
                  ServerTLSCert: ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt
            # Batch Timeout: The amount of time to wait before creating a batch
            BatchTimeout: 2s

            # Batch Size: Controls the number of messages batched into a block
            BatchSize:

                # Max Message Count: The maximum number of messages to permit in a batch
                MaxMessageCount: 10

                # Absolute Max Bytes: The absolute maximum number of bytes allowed for
                # the serialized messages in a batch.
                AbsoluteMaxBytes: 99 MB

                # Preferred Max Bytes: The preferred maximum number of bytes allowed for
                # the serialized messages in a batch. A message larger than the preferred
                # max bytes will result in a batch larger than preferred max bytes.
                PreferredMaxBytes: 512 KB

            # Organizations is the list of orgs which are defined as participants on
            # the orderer side of the network
            Organizations:

            # Policies defines the set of policies at this level of the config tree
            # For Orderer policies, their canonical path is
            #   /Channel/Orderer/<PolicyName>
            Policies:
                Readers:
                    Type: ImplicitMeta
                    Rule: "ANY Readers"
                Writers:
                    Type: ImplicitMeta
                    Rule: "ANY Writers"
                Admins:
                    Type: ImplicitMeta
                    Rule: "MAJORITY Admins"
                # BlockValidation specifies what signatures must be included in the block
                # from the orderer for the peer to validate it.
                BlockValidation:
                    Type: ImplicitMeta
                    Rule: "ANY Writers"

        ################################################################################
        #
        #   CHANNEL
        #
        #   This section defines the values to encode into a config transaction or
        #   genesis block for channel related parameters.
        #
        ################################################################################
        Channel: &ChannelDefaults
            # Policies defines the set of policies at this level of the config tree
            # For Channel policies, their canonical path is
            #   /Channel/<PolicyName>
            Policies:
                # Who may invoke the 'Deliver' API
                Readers:
                    Type: ImplicitMeta
                    Rule: "ANY Readers"
                # Who may invoke the 'Broadcast' API
                Writers:
                    Type: ImplicitMeta
                    Rule: "ANY Writers"
                # By default, who may modify elements at this config level
                Admins:
                    Type: ImplicitMeta
                    Rule: "MAJORITY Admins"

            # Capabilities describes the channel level capabilities, see the
            # dedicated Capabilities section elsewhere in this file for a full
            # description
            Capabilities:
                <<: *ChannelCapabilities

        ################################################################################
        #
        #   Profile
        #
        #   - Different configuration profiles may be encoded here to be specified
        #   as parameters to the configtxgen tool
        #
        ################################################################################
        Profiles:

            TwoOrgsOrdererGenesis:
                <<: *ChannelDefaults
                Orderer:
                    <<: *OrdererDefaults
                    Organizations:
                        - *OrdererOrg
                    Capabilities:
                        <<: *OrdererCapabilities
                Consortiums:
                    SampleConsortium:
                        Organizations:
                            - *Org1
                            - *Org2
            TwoOrgsChannel:
                Consortium: SampleConsortium
                <<: *ChannelDefaults
                Application:
                    <<: *ApplicationDefaults
                    Organizations:
                        - *Org1
                        - *Org2
                    Capabilities:
                        <<: *ApplicationCapabilities
---
# Source: dltlogging/templates/configmaps/hlfconnectionprofiles.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hlfconnectionprofiles
  namespace: default
data:
    ccp-template.json: |
        {
            "name": "test-network-org${ORG}",
            "version": "1.0.0",
            "client": {
                "organization": "Org${ORG}",
                "connection": {
                    "timeout": {
                        "peer": {
                            "endorser": "300"
                        }
                    }
                }
            },
            "organizations": {
                "Org${ORG}": {
                    "mspid": "Org${ORG}MSP",
                    "peers": [
                        "my-release-dltlogging-peer0org${ORG}"
                    ],
                    "certificateAuthorities": [
                        "my-release-dltlogging-caorg${ORG}"
                    ]
                }
            },
            "peers": {
                "my-release-dltlogging-peer0org${ORG}": {
                    "url": "grpcs://my-release-dltlogging-peer0org${ORG}:${P0PORT}",
                    "tlsCACerts": {
                        "pem": "${PEERPEM}"
                    },
                    "grpcOptions": {
                        "ssl-target-name-override": "my-release-dltlogging-peer0org${ORG}",
                        "hostnameOverride": "my-release-dltlogging-peer0org${ORG}"
                    }
                }
            },
            "certificateAuthorities": {
                "my-release-dltlogging-caorg${ORG}": {
                    "url": "https://my-release-dltlogging-caorg${ORG}:${CAPORT}",
                    "caName": "my-release-dltlogging-caorg${ORG}",
                    "tlsCACerts": {
                        "pem": ["${CAPEM}"]
                    },
                    "httpOptions": {
                        "verify": false
                    }
                }
            }
        }

    ccp-template.yaml: |
        ---
        name: test-network-org${ORG}
        version: 1.0.0
        client:
        organization: Org${ORG}
        connection:
            timeout:
            peer:
                endorser: '300'
        organizations:
        Org${ORG}:
            mspid: Org${ORG}MSP
            peers:
            - my-release-dltlogging-peer0org${ORG}
            certificateAuthorities:
            - my-release-dltlogging-caorg${ORG}
        peers:
        my-release-dltlogging-peer0org${ORG}:
            url: grpcs://my-release-dltlogging-peer0org${ORG}:${P0PORT}
            tlsCACerts:
            pem: "${PEERPEM}"
            grpcOptions:
            ssl-target-name-override: my-release-dltlogging-peer0org${ORG}
            hostnameOverride: my-release-dltlogging-peer0org${ORG}
        certificateAuthorities:
        my-release-dltlogging-caorg${ORG}:
            url: https://my-release-dltlogging-caorg${ORG}:${CAPORT}
            caName: my-release-dltlogging-caorg${ORG}
            tlsCACerts:
            pem:
            - "${CAPEM}"
            httpOptions:
            verify: false        
   
    ccp.sh: |
        #!/bin/bash

        function one_line_pem {
            echo "`awk 'NF {sub(/\\n/, ""); printf "%s\\\\\\\n",$0;}' $1`"
        }

        function json_ccp {
            local PP=$(one_line_pem $4)
            local CP=$(one_line_pem $5)
            sed -e "s/\${ORG}/$1/" \
                -e "s/\${P0PORT}/$2/" \
                -e "s/\${CAPORT}/$3/" \
                -e "s#\${PEERPEM}#$PP#" \
                -e "s#\${CAPEM}#$CP#" \
                connection-profiles/ccp-template.json
        }

        function yaml_ccp {
            local PP=$(one_line_pem $4)
            local CP=$(one_line_pem $5)
            sed -e "s/\${ORG}/$1/" \
                -e "s/\${P0PORT}/$2/" \
                -e "s/\${CAPORT}/$3/" \
                -e "s#\${PEERPEM}#$PP#" \
                -e "s#\${CAPEM}#$CP#" \
                connection-profiles/ccp-template.yaml | sed -e $'s/\\\\n/\\\n          /g'
        }

        ORG=1
        P0PORT=7051
        CAPORT=7054
        PEERPEM=organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
        CAPEM=organizations/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem

        echo "$(json_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)" > organizations/peerOrganizations/org1.example.com/connection-org1.json
        echo "$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)" > organizations/peerOrganizations/org1.example.com/connection-org1.yaml

        ORG=2
        P0PORT=7051
        CAPORT=8054
        PEERPEM=organizations/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
        CAPEM=organizations/peerOrganizations/org2.example.com/ca/ca.org2.example.com-cert.pem

        echo "$(json_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)" > organizations/peerOrganizations/org2.example.com/connection-org2.json
        echo "$(yaml_ccp $ORG $P0PORT $CAPORT $PEERPEM $CAPEM)" > organizations/peerOrganizations/org2.example.com/connection-org2.yaml
---
# Source: dltlogging/templates/configmaps/joinchannel.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: joinchannel
  namespace: default
data:
  create-channel.sh: |
  
    sleep 160

    export CHANNEL_NAME="mychannel"

    echo "Create application channel"

    peer channel create -o my-release-dltlogging-orderer:7050 -c ${CHANNEL_NAME} -f ./channel-artifacts/${CHANNEL_NAME}.tx --outputBlock ./channel-artifacts/${CHANNEL_NAME}.block --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

  org1join-upd.sh: |

    sleep 20

    export CHANNEL_NAME="mychannel"
    export FUNCTION_NAME="InitCCLogger"
    # export CC1_INIT_FUNCTION="InitCCLogger"
    # export CC2_INIT_FUNCTION="InitCCLogger"
    # export CC3_INIT_FUNCTION="InitCCLogger"
    # export CC4_INIT_FUNCTION="InitCCLogger"
    chaincodeNames=("loggingbasic")
   
    ##################### Join Channel Org1 #####################
    echo "Join channel Org1"
    peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 

    ##################### Update anchor peers Org1 #####################
    echo "Update anchors peers Org1"
    peer channel update -o my-release-dltlogging-orderer:7050  -c ${CHANNEL_NAME} -f ./channel-artifacts/Org1MSPanchors.tx --tls  --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    # peer channel update -o mylogging-dltlogging-orderer:7050  -c mychannel -f ./channel-artifacts/Org1MSPanchors.tx --tls  --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    for chaincodeName in "${chaincodeNames[@]}"
    do
      ##################### Install chaincode Org1 #####################
      echo "Install chaincode on Org1 $chaincodeName"
      peer lifecycle chaincode install /opt/gopath/src/github.com/chaincode/${chaincodeName}1.tgz 
      # echo "Install chaincode on Org1 loggingbasic"
      # peer lifecycle chaincode install /opt/gopath/src/github.com/chaincode/loggingbasic1.tgz 

      echo "Query installed chaincode for Org1"
      peer lifecycle chaincode queryinstalled --output json
      
      ##################### Calculate Package ID for Org1 #####################
      echo "Calculate packageID for Org1"
      export PACKAGE_ID_ORG1=$(peer lifecycle chaincode calculatepackageid /opt/gopath/src/github.com/chaincode/${chaincodeName}1.tgz)
      # export PACKAGE_ID_ORG1=$(peer lifecycle chaincode calculatepackageid /opt/gopath/src/github.com/chaincode/loggingbasic1.tgz)
      # echo $PACKAGE_ID_ORG1

      echo "$PACKAGE_ID_ORG1" > chaincodeids/${chaincodeName}1.txt
      
      echo "ftasame"

      ###### TWRA VGAINOUN TA DEPLOYMENTS ########
      
      sleep 4

      ##################### Approve chaincode for Org1 #####################
      echo "Approve chaincode $chaincodeName on Org1"
      peer lifecycle chaincode approveformyorg --channelID ${CHANNEL_NAME} --name ${chaincodeName} --version 1.0 --init-required --package-id ${PACKAGE_ID_ORG1} --sequence 1 -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 
      # echo "Approve chaincode loggingbasic on Org1"
      # peer lifecycle chaincode approveformyorg --channelID ${CHANNEL_NAME} --name loggingbasic --version 1.0 --init-required --package-id ${PACKAGE_ID_ORG1} --sequence 1 -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 

      sleep 4

      ##################### Query Approved chaincode #####################
      echo "Query Approved chaincode $chaincodeName on Org1"
      peer lifecycle chaincode queryapproved -C ${CHANNEL_NAME} -n ${chaincodeName} --sequence 1 --output json
      # echo "Query Approved chaincode loggingbasic on Org1"
      # peer lifecycle chaincode queryapproved -C ${CHANNEL_NAME} -n loggingbasic --sequence 1 --output json

      sleep 4

      ##################### Checkcommitreadiness #####################
      echo "Checkcommitreadiness $chaincodeName for Org1"
      peer lifecycle chaincode checkcommitreadiness --channelID ${CHANNEL_NAME} --name ${chaincodeName} --version 1.0 --sequence 1 --init-required -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json 
      # echo "Checkcommitreadiness loggingbasic for Org1"
      # peer lifecycle chaincode checkcommitreadiness --channelID ${CHANNEL_NAME} --name loggingbasic --version 1.0 --sequence 1 --init-required -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json   
      
      sleep 4

      ##################### Commit chaincodes (only in one Org) ##################### -> AYTO PAEI GIA TON ORG_2
      echo "Commit chaincode $chaincodeName"
      peer lifecycle chaincode commit -o my-release-dltlogging-orderer:7050 --channelID ${CHANNEL_NAME} --name ${chaincodeName} --version 1.0 --sequence 1 --init-required --tls true --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses my-release-dltlogging-peer0org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses my-release-dltlogging-peer0org2:7051 --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 
      # echo "Commit chaincode loggingbasic"
      # peer lifecycle chaincode commit -o my-release-dltlogging-orderer:7050 --channelID ${CHANNEL_NAME} --name loggingbasic --version 1.0 --sequence 1 --init-required --tls true --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --peerAddresses my-release-dltlogging-peer0org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses my-release-dltlogging-peer0org2:7051 --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt 

      sleep 4

      ##################### Query committed chaincodes #####################
      echo "Query committed chaincodes for Org1"
      peer lifecycle chaincode querycommitted -C ${CHANNEL_NAME} --output json

    done

    sleep 50

    for chaincodeName in "${chaincodeNames[@]}"
    do
      ##################### Init Ledger #####################
      echo "Init ledger for chaincode $chaincodeName and init function $FUNCTION_NAME"
      peer chaincode invoke -o my-release-dltlogging-orderer:7050 --isInit --tls true --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C ${CHANNEL_NAME} -n $chaincodeName --peerAddresses my-release-dltlogging-peer0org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses my-release-dltlogging-peer0org2:7051 --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["'"${FUNCTION_NAME}"'"]}' --waitForEvent
      # echo "Init ledger for chaincode loggingbasic and init function $CC1_INIT_FUNCTION"
      # peer chaincode invoke -o my-release-dltlogging-orderer:7050 --isInit --tls true --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C ${CHANNEL_NAME} -n loggingbasic --peerAddresses my-release-dltlogging-peer0org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses my-release-dltlogging-peer0org2:7051 --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["'"${CC1_INIT_FUNCTION}"'"]}' --waitForEvent

      # peer chaincode invoke -o my-release-dltlogging-orderer:7050  --tls true --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C ${CHANNEL_NAME} -n $chaincodeName --peerAddresses my-release-dltlogging-peer0org1:7051 --tlsRootCertFiles /organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses my-release-dltlogging-peer0org2:7051 --tlsRootCertFiles /organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c '{"Args":["'"${FUNCTION_NAME}"'"]}' --waitForEvent
    
    done


  org2join-upd.sh: |
    
    sleep 178

    export CHANNEL_NAME="mychannel"
    chaincodeNames=("loggingbasic")

    ##################### Join Channel Org2 #####################
    echo "Join channel Org2"
    peer channel join -b ./channel-artifacts/${CHANNEL_NAME}.block --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 

    ##################### Update anchor peers Org2 #####################
    echo "Update anchors peers Org2"
    peer channel update -o my-release-dltlogging-orderer:7050  -c ${CHANNEL_NAME} -f ./channel-artifacts/Org2MSPanchors.tx --tls  --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    
    for chaincodeName in "${chaincodeNames[@]}"
    do

      ##################### Install chaincode Org2 #####################
      echo "Install chaincode on Org2 $chaincodeName"
      peer lifecycle chaincode install /opt/gopath/src/github.com/chaincode/${chaincodeName}2.tgz 
      # echo "Install chaincode on Org2 loggingbasic"
      # peer lifecycle chaincode install /opt/gopath/src/github.com/chaincode/loggingbasic2.tgz 
      
      echo "Query installed chaincode for Org2"
      peer lifecycle chaincode queryinstalled --output json

      ##################### Calculate Package ID for Org2 #####################
      echo "Calculate packageID for Org2"
      export PACKAGE_ID_ORG2=$(peer lifecycle chaincode calculatepackageid /opt/gopath/src/github.com/chaincode/${chaincodeName}2.tgz)
      # export PACKAGE_ID_ORG2=$(peer lifecycle chaincode calculatepackageid /opt/gopath/src/github.com/chaincode/loggingbasic2.tgz)
      # echo $PACKAGE_ID_ORG2

      echo "$PACKAGE_ID_ORG2" > chaincodeids/${chaincodeName}2.txt
      
      echo "ftasame"

      ###### TWRA VGAINOUN TA DEPLOYMENTS ########

      sleep 4

      ##################### Approve chaincode for Org2 #####################
      echo "Approve chaincode $chaincodeName on Org2"
      peer lifecycle chaincode approveformyorg --channelID ${CHANNEL_NAME} --name ${chaincodeName} --version 1.0 --init-required --package-id ${PACKAGE_ID_ORG2} --sequence 1 -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 
      # echo "Approve chaincode loggingbasic on Org2"
      # peer lifecycle chaincode approveformyorg --channelID ${CHANNEL_NAME} --name loggingbasic --version 1.0 --init-required --package-id ${PACKAGE_ID_ORG2} --sequence 1 -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 

      sleep 4

      ##################### Query Approved chaincode #####################
      echo "Query Approved chaincode $chaincodeName on Org2"
      peer lifecycle chaincode queryapproved -C ${CHANNEL_NAME} -n ${chaincodeName} --sequence 1 --output json
      # echo "Query Approved chaincode loggingbasic on Org2"
      # peer lifecycle chaincode queryapproved -C ${CHANNEL_NAME} -n loggingbasic --sequence 1 --output json

      sleep 4

      ##################### Checkcommitreadiness #####################
      echo "Checkcommitreadiness $chaincodeName for Org2"
      peer lifecycle chaincode checkcommitreadiness --channelID ${CHANNEL_NAME} --name ${chaincodeName} --version 1.0 --sequence 1 --init-required -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json 
      # echo "Checkcommitreadiness loggingbasic for Org2"
      # peer lifecycle chaincode checkcommitreadiness --channelID ${CHANNEL_NAME} --name loggingbasic --version 1.0 --sequence 1 --init-required -o my-release-dltlogging-orderer:7050 --tls --cafile /organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --output json   
      
      ##################### Commit chaincodes (only in one Org) ##################### -> AYTO PAEI GIA TON ORG_2
      sleep 9

      ##################### Query committed chaincodes #####################
      echo "Query committed chaincodes for Org2"
      peer lifecycle chaincode querycommitted -C ${CHANNEL_NAME} --output json

      ##################### Init Ledger #####################
    done
---
# Source: dltlogging/templates/configmaps/orderercaconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: orderercaconfig 
  namespace: default 
data:
    fabric-ca-server-config.yaml: |
      #############################################################################
      #   This is a configuration file for the fabric-ca-server command.
      #
      #   COMMAND LINE ARGUMENTS AND ENVIRONMENT VARIABLES
      #   ------------------------------------------------
      #   Each configuration element can be overridden via command line
      #   arguments or environment variables.  The precedence for determining
      #   the value of each element is as follows:
      #   1) command line argument
      #      Examples:
      #      a) --port 443
      #         To set the listening port
      #      b) --ca.keyfile ../mykey.pem
      #         To set the "keyfile" element in the "ca" section below;
      #         note the '.' separator character.
      #   2) environment variable
      #      Examples:
      #      a) FABRIC_CA_SERVER_PORT=443
      #         To set the listening port
      #      b) FABRIC_CA_SERVER_CA_KEYFILE="../mykey.pem"
      #         To set the "keyfile" element in the "ca" section below;
      #         note the '_' separator character.
      #   3) configuration file
      #   4) default value (if there is one)
      #      All default values are shown beside each element below.
      #
      #   FILE NAME ELEMENTS
      #   ------------------
      #   The value of all fields whose name ends with "file" or "files" are
      #   name or names of other files.
      #   For example, see "tls.certfile" and "tls.clientauth.certfiles".
      #   The value of each of these fields can be a simple filename, a
      #   relative path, or an absolute path.  If the value is not an
      #   absolute path, it is interpretted as being relative to the location
      #   of this configuration file.
      #
      #############################################################################

      # Version of config file
      version: 1.2.0

      # Server's listening port (default: 7054)
      port: 7054

      # Enables debug logging (default: false)
      debug: false

      # Size limit of an acceptable CRL in bytes (default: 512000)
      crlsizelimit: 512000

      #############################################################################
      #  TLS section for the server's listening port
      #
      #  The following types are supported for client authentication: NoClientCert,
      #  RequestClientCert, RequireAnyClientCert, VerifyClientCertIfGiven,
      #  and RequireAndVerifyClientCert.
      #
      #  Certfiles is a list of root certificate authorities that the server uses
      #  when verifying client certificates.
      #############################################################################
      tls:
        # Enable TLS (default: false)
        enabled: true
        # TLS for the server's listening port
        certfile:
        keyfile:
        clientauth:
          type: noclientcert
          certfiles:

      #############################################################################
      #  The CA section contains information related to the Certificate Authority
      #  including the name of the CA, which should be unique for all members
      #  of a blockchain network.  It also includes the key and certificate files
      #  used when issuing enrollment certificates (ECerts) and transaction
      #  certificates (TCerts).
      #  The chainfile (if it exists) contains the certificate chain which
      #  should be trusted for this CA, where the 1st in the chain is always the
      #  root CA certificate.
      #############################################################################
      ca:
        # Name of this CA
        name: OrdererCA
        # Key file (is only used to import a private key into BCCSP)
        keyfile:
        # Certificate file (default: ca-cert.pem)
        certfile:
        # Chain file
        chainfile:

      #############################################################################
      #  The gencrl REST endpoint is used to generate a CRL that contains revoked
      #  certificates. This section contains configuration options that are used
      #  during gencrl request processing.
      #############################################################################
      crl:
        # Specifies expiration for the generated CRL. The number of hours
        # specified by this property is added to the UTC time, the resulting time
        # is used to set the 'Next Update' date of the CRL.
        expiry: 24h

      #############################################################################
      #  The registry section controls how the fabric-ca-server does two things:
      #  1) authenticates enrollment requests which contain a username and password
      #     (also known as an enrollment ID and secret).
      #  2) once authenticated, retrieves the identity's attribute names and
      #     values which the fabric-ca-server optionally puts into TCerts
      #     which it issues for transacting on the Hyperledger Fabric blockchain.
      #     These attributes are useful for making access control decisions in
      #     chaincode.
      #  There are two main configuration options:
      #  1) The fabric-ca-server is the registry.
      #     This is true if "ldap.enabled" in the ldap section below is false.
      #  2) An LDAP server is the registry, in which case the fabric-ca-server
      #     calls the LDAP server to perform these tasks.
      #     This is true if "ldap.enabled" in the ldap section below is true,
      #     which means this "registry" section is ignored.
      #############################################################################
      registry:
        # Maximum number of times a password/secret can be reused for enrollment
        # (default: -1, which means there is no limit)
        maxenrollments: -1

        # Contains identity information which is used when LDAP is disabled
        identities:
          - name: admin
            pass: adminpw
            type: client
            affiliation: ""
            attrs:
                hf.Registrar.Roles: "*"
                hf.Registrar.DelegateRoles: "*"
                hf.Revoker: true
                hf.IntermediateCA: true
                hf.GenCRL: true
                hf.Registrar.Attributes: "*"
                hf.AffiliationMgr: true

      #############################################################################
      #  Database section
      #  Supported types are: "sqlite3", "postgres", and "mysql".
      #  The datasource value depends on the type.
      #  If the type is "sqlite3", the datasource value is a file name to use
      #  as the database store.  Since "sqlite3" is an embedded database, it
      #  may not be used if you want to run the fabric-ca-server in a cluster.
      #  To run the fabric-ca-server in a cluster, you must choose "postgres"
      #  or "mysql".
      #############################################################################
      db:
        type: sqlite3
        datasource: fabric-ca-server.db
        tls:
            enabled: false
            certfiles:
            client:
              certfile:
              keyfile:

      #############################################################################
      #  LDAP section
      #  If LDAP is enabled, the fabric-ca-server calls LDAP to:
      #  1) authenticate enrollment ID and secret (i.e. username and password)
      #     for enrollment requests;
      #  2) To retrieve identity attributes
      #############################################################################
      ldap:
        # Enables or disables the LDAP client (default: false)
        # If this is set to true, the "registry" section is ignored.
        enabled: false
        # The URL of the LDAP server
        url: ldap://<adminDN>:<adminPassword>@<host>:<port>/<base>
        # TLS configuration for the client connection to the LDAP server
        tls:
            certfiles:
            client:
              certfile:
              keyfile:
        # Attribute related configuration for mapping from LDAP entries to Fabric CA attributes
        attribute:
            # 'names' is an array of strings containing the LDAP attribute names which are
            # requested from the LDAP server for an LDAP identity's entry
            names: ['uid','member']
            # The 'converters' section is used to convert an LDAP entry to the value of
            # a fabric CA attribute.
            # For example, the following converts an LDAP 'uid' attribute
            # whose value begins with 'revoker' to a fabric CA attribute
            # named "hf.Revoker" with a value of "true" (because the boolean expression
            # evaluates to true).
            #    converters:
            #       - name: hf.Revoker
            #         value: attr("uid") =~ "revoker*"
            converters:
              - name:
                value:
            # The 'maps' section contains named maps which may be referenced by the 'map'
            # function in the 'converters' section to map LDAP responses to arbitrary values.
            # For example, assume a user has an LDAP attribute named 'member' which has multiple
            # values which are each a distinguished name (i.e. a DN). For simplicity, assume the
            # values of the 'member' attribute are 'dn1', 'dn2', and 'dn3'.
            # Further assume the following configuration.
            #    converters:
            #       - name: hf.Registrar.Roles
            #         value: map(attr("member"),"groups")
            #    maps:
            #       groups:
            #          - name: dn1
            #            value: peer
            #          - name: dn2
            #            value: client
            # The value of the user's 'hf.Registrar.Roles' attribute is then computed to be
            # "peer,client,dn3".  This is because the value of 'attr("member")' is
            # "dn1,dn2,dn3", and the call to 'map' with a 2nd argument of
            # "group" replaces "dn1" with "peer" and "dn2" with "client".
            maps:
              groups:
                  - name:
                    value:

      #############################################################################
      # Affiliations section. Fabric CA server can be bootstrapped with the
      # affiliations specified in this section. Affiliations are specified as maps.
      # For example:
      #   businessunit1:
      #     department1:
      #       - team1
      #   businessunit2:
      #     - department2
      #     - department3
      #
      # Affiliations are hierarchical in nature. In the above example,
      # department1 (used as businessunit1.department1) is the child of businessunit1.
      # team1 (used as businessunit1.department1.team1) is the child of department1.
      # department2 (used as businessunit2.department2) and department3 (businessunit2.department3)
      # are children of businessunit2.
      # Note: Affiliations are case sensitive except for the non-leaf affiliations
      # (like businessunit1, department1, businessunit2) that are specified in the configuration file,
      # which are always stored in lower case.
      #############################################################################
      affiliations:
        org1:
            - department1
            - department2
        org2:
            - department1

      #############################################################################
      #  Signing section
      #
      #  The "default" subsection is used to sign enrollment certificates;
      #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
      #
      #  The "ca" profile subsection is used to sign intermediate CA certificates;
      #  the default expiration ("expiry" field) is "43800h" which is 5 years in hours.
      #  Note that "isca" is true, meaning that it issues a CA certificate.
      #  A maxpathlen of 0 means that the intermediate CA cannot issue other
      #  intermediate CA certificates, though it can still issue end entity certificates.
      #  (See RFC 5280, section 4.2.1.9)
      #
      #  The "tls" profile subsection is used to sign TLS certificate requests;
      #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
      #############################################################################
      signing:
          default:
            usage:
              - digital signature
            expiry: 8760h
          profiles:
            ca:
              usage:
                - cert sign
                - crl sign
              expiry: 43800h
              caconstraint:
                isca: true
                maxpathlen: 0
            tls:
              usage:
                  - signing
                  - key encipherment
                  - server auth
                  - client auth
                  - key agreement
              expiry: 8760h

      ###########################################################################
      #  Certificate Signing Request (CSR) section.
      #  This controls the creation of the root CA certificate.
      #  The expiration for the root CA certificate is configured with the
      #  "ca.expiry" field below, whose default value is "131400h" which is
      #  15 years in hours.
      #  The pathlength field is used to limit CA certificate hierarchy as described
      #  in section 4.2.1.9 of RFC 5280.
      #  Examples:
      #  1) No pathlength value means no limit is requested.
      #  2) pathlength == 1 means a limit of 1 is requested which is the default for
      #     a root CA.  This means the root CA can issue intermediate CA certificates,
      #     but these intermediate CAs may not in turn issue other CA certificates
      #     though they can still issue end entity certificates.
      #  3) pathlength == 0 means a limit of 0 is requested;
      #     this is the default for an intermediate CA, which means it can not issue
      #     CA certificates though it can still issue end entity certificates.
      ###########################################################################
      csr:
        cn: ca-org1
        names:
            - C: US
              ST: "New York"
              L: "New York"
              O: example.com
              OU:
        hosts:
          - localhost
          - example.com
          - caorderer
          - my-release-dltlogging-caorderer
          - my-release-dltlogging-caorderer.default.svc.cluster.local
        ca:
            expiry: 131400h
            pathlength: 1

      #############################################################################
      # BCCSP (BlockChain Crypto Service Provider) section is used to select which
      # crypto library implementation to use
      #############################################################################
      bccsp:
          default: SW
          sw:
              hash: SHA2
              security: 256
              filekeystore:
                  # The directory used for the software file-based keystore
                  keystore: msp/keystore

      #############################################################################
      # Multi CA section
      #
      # Each Fabric CA server contains one CA by default.  This section is used
      # to configure multiple CAs in a single server.
      #
      # 1) --cacount <number-of-CAs>
      # Automatically generate <number-of-CAs> non-default CAs.  The names of these
      # additional CAs are "ca1", "ca2", ... "caN", where "N" is <number-of-CAs>
      # This is particularly useful in a development environment to quickly set up
      # multiple CAs. Note that, this config option is not applicable to intermediate CA server
      # i.e., Fabric CA server that is started with intermediate.parentserver.url config
      # option (-u command line option)
      #
      # 2) --cafiles <CA-config-files>
      # For each CA config file in the list, generate a separate signing CA.  Each CA
      # config file in this list MAY contain all of the same elements as are found in
      # the server config file except port, debug, and tls sections.
      #
      # Examples:
      # fabric-ca-server start -b admin:adminpw --cacount 2
      #
      # fabric-ca-server start -b admin:adminpw --cafiles ca/ca1/fabric-ca-server-config.yaml
      # --cafiles ca/ca2/fabric-ca-server-config.yaml
      #
      #############################################################################

      cacount:

      cafiles:

      #############################################################################
      # Intermediate CA section
      #
      # The relationship between servers and CAs is as follows:
      #   1) A single server process may contain or function as one or more CAs.
      #      This is configured by the "Multi CA section" above.
      #   2) Each CA is either a root CA or an intermediate CA.
      #   3) Each intermediate CA has a parent CA which is either a root CA or another intermediate CA.
      #
      # This section pertains to configuration of #2 and #3.
      # If the "intermediate.parentserver.url" property is set,
      # then this is an intermediate CA with the specified parent
      # CA.
      #
      # parentserver section
      #    url - The URL of the parent server
      #    caname - Name of the CA to enroll within the server
      #
      # enrollment section used to enroll intermediate CA with parent CA
      #    profile - Name of the signing profile to use in issuing the certificate
      #    label - Label to use in HSM operations
      #
      # tls section for secure socket connection
      #   certfiles - PEM-encoded list of trusted root certificate files
      #   client:
      #     certfile - PEM-encoded certificate file for when client authentication
      #     is enabled on server
      #     keyfile - PEM-encoded key file for when client authentication
      #     is enabled on server
      #############################################################################
      intermediate:
        parentserver:
          url:
          caname:

        enrollment:
          hosts:
          profile:
          label:

        tls:
          certfiles:
          client:
            certfile:
            keyfile:
---
# Source: dltlogging/templates/configmaps/org1caconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org1caconfig 
  namespace: default 
data:
    fabric-ca-server-config.yaml: |
        #############################################################################
        #   This is a configuration file for the fabric-ca-server command.
        #
        #   COMMAND LINE ARGUMENTS AND ENVIRONMENT VARIABLES
        #   ------------------------------------------------
        #   Each configuration element can be overridden via command line
        #   arguments or environment variables.  The precedence for determining
        #   the value of each element is as follows:
        #   1) command line argument
        #      Examples:
        #      a) --port 443
        #         To set the listening port
        #      b) --ca.keyfile ../mykey.pem
        #         To set the "keyfile" element in the "ca" section below;
        #         note the '.' separator character.
        #   2) environment variable
        #      Examples:
        #      a) FABRIC_CA_SERVER_PORT=443
        #         To set the listening port
        #      b) FABRIC_CA_SERVER_CA_KEYFILE="../mykey.pem"
        #         To set the "keyfile" element in the "ca" section below;
        #         note the '_' separator character.
        #   3) configuration file
        #   4) default value (if there is one)
        #      All default values are shown beside each element below.
        #
        #   FILE NAME ELEMENTS
        #   ------------------
        #   The value of all fields whose name ends with "file" or "files" are
        #   name or names of other files.
        #   For example, see "tls.certfile" and "tls.clientauth.certfiles".
        #   The value of each of these fields can be a simple filename, a
        #   relative path, or an absolute path.  If the value is not an
        #   absolute path, it is interpretted as being relative to the location
        #   of this configuration file.
        #
        #############################################################################

        # Version of config file
        version: 1.2.0

        # Server's listening port (default: 7054)
        port: 7054

        # Enables debug logging (default: false)
        debug: false

        # Size limit of an acceptable CRL in bytes (default: 512000)
        crlsizelimit: 512000

        #############################################################################
        #  TLS section for the server's listening port
        #
        #  The following types are supported for client authentication: NoClientCert,
        #  RequestClientCert, RequireAnyClientCert, VerifyClientCertIfGiven,
        #  and RequireAndVerifyClientCert.
        #
        #  Certfiles is a list of root certificate authorities that the server uses
        #  when verifying client certificates.
        #############################################################################
        tls:
          # Enable TLS (default: false)
          enabled: true
          # TLS for the server's listening port
          certfile:
          keyfile:
          clientauth:
            type: noclientcert
            certfiles:

        #############################################################################
        #  The CA section contains information related to the Certificate Authority
        #  including the name of the CA, which should be unique for all members
        #  of a blockchain network.  It also includes the key and certificate files
        #  used when issuing enrollment certificates (ECerts) and transaction
        #  certificates (TCerts).
        #  The chainfile (if it exists) contains the certificate chain which
        #  should be trusted for this CA, where the 1st in the chain is always the
        #  root CA certificate.
        #############################################################################
        ca:
          # Name of this CA
          name: Org1CA
          # Key file (is only used to import a private key into BCCSP)
          keyfile:
          # Certificate file (default: ca-cert.pem)
          certfile:
          # Chain file
          chainfile:

        #############################################################################
        #  The gencrl REST endpoint is used to generate a CRL that contains revoked
        #  certificates. This section contains configuration options that are used
        #  during gencrl request processing.
        #############################################################################
        crl:
          # Specifies expiration for the generated CRL. The number of hours
          # specified by this property is added to the UTC time, the resulting time
          # is used to set the 'Next Update' date of the CRL.
          expiry: 24h

        #############################################################################
        #  The registry section controls how the fabric-ca-server does two things:
        #  1) authenticates enrollment requests which contain a username and password
        #     (also known as an enrollment ID and secret).
        #  2) once authenticated, retrieves the identity's attribute names and
        #     values which the fabric-ca-server optionally puts into TCerts
        #     which it issues for transacting on the Hyperledger Fabric blockchain.
        #     These attributes are useful for making access control decisions in
        #     chaincode.
        #  There are two main configuration options:
        #  1) The fabric-ca-server is the registry.
        #     This is true if "ldap.enabled" in the ldap section below is false.
        #  2) An LDAP server is the registry, in which case the fabric-ca-server
        #     calls the LDAP server to perform these tasks.
        #     This is true if "ldap.enabled" in the ldap section below is true,
        #     which means this "registry" section is ignored.
        #############################################################################
        registry:
          # Maximum number of times a password/secret can be reused for enrollment
          # (default: -1, which means there is no limit)
          maxenrollments: -1

          # Contains identity information which is used when LDAP is disabled
          identities:
            - name: admin
              pass: adminpw
              type: client
              affiliation: ""
              attrs:
                  hf.Registrar.Roles: "*"
                  hf.Registrar.DelegateRoles: "*"
                  hf.Revoker: true
                  hf.IntermediateCA: true
                  hf.GenCRL: true
                  hf.Registrar.Attributes: "*"
                  hf.AffiliationMgr: true

        #############################################################################
        #  Database section
        #  Supported types are: "sqlite3", "postgres", and "mysql".
        #  The datasource value depends on the type.
        #  If the type is "sqlite3", the datasource value is a file name to use
        #  as the database store.  Since "sqlite3" is an embedded database, it
        #  may not be used if you want to run the fabric-ca-server in a cluster.
        #  To run the fabric-ca-server in a cluster, you must choose "postgres"
        #  or "mysql".
        #############################################################################
        db:
          type: sqlite3
          datasource: fabric-ca-server.db
          tls:
              enabled: false
              certfiles:
              client:
                certfile:
                keyfile:

        #############################################################################
        #  LDAP section
        #  If LDAP is enabled, the fabric-ca-server calls LDAP to:
        #  1) authenticate enrollment ID and secret (i.e. username and password)
        #     for enrollment requests;
        #  2) To retrieve identity attributes
        #############################################################################
        ldap:
          # Enables or disables the LDAP client (default: false)
          # If this is set to true, the "registry" section is ignored.
          enabled: false
          # The URL of the LDAP server
          url: ldap://<adminDN>:<adminPassword>@<host>:<port>/<base>
          # TLS configuration for the client connection to the LDAP server
          tls:
              certfiles:
              client:
                certfile:
                keyfile:
          # Attribute related configuration for mapping from LDAP entries to Fabric CA attributes
          attribute:
              # 'names' is an array of strings containing the LDAP attribute names which are
              # requested from the LDAP server for an LDAP identity's entry
              names: ['uid','member']
              # The 'converters' section is used to convert an LDAP entry to the value of
              # a fabric CA attribute.
              # For example, the following converts an LDAP 'uid' attribute
              # whose value begins with 'revoker' to a fabric CA attribute
              # named "hf.Revoker" with a value of "true" (because the boolean expression
              # evaluates to true).
              #    converters:
              #       - name: hf.Revoker
              #         value: attr("uid") =~ "revoker*"
              converters:
                - name:
                  value:
              # The 'maps' section contains named maps which may be referenced by the 'map'
              # function in the 'converters' section to map LDAP responses to arbitrary values.
              # For example, assume a user has an LDAP attribute named 'member' which has multiple
              # values which are each a distinguished name (i.e. a DN). For simplicity, assume the
              # values of the 'member' attribute are 'dn1', 'dn2', and 'dn3'.
              # Further assume the following configuration.
              #    converters:
              #       - name: hf.Registrar.Roles
              #         value: map(attr("member"),"groups")
              #    maps:
              #       groups:
              #          - name: dn1
              #            value: peer
              #          - name: dn2
              #            value: client
              # The value of the user's 'hf.Registrar.Roles' attribute is then computed to be
              # "peer,client,dn3".  This is because the value of 'attr("member")' is
              # "dn1,dn2,dn3", and the call to 'map' with a 2nd argument of
              # "group" replaces "dn1" with "peer" and "dn2" with "client".
              maps:
                groups:
                    - name:
                      value:

        #############################################################################
        # Affiliations section. Fabric CA server can be bootstrapped with the
        # affiliations specified in this section. Affiliations are specified as maps.
        # For example:
        #   businessunit1:
        #     department1:
        #       - team1
        #   businessunit2:
        #     - department2
        #     - department3
        #
        # Affiliations are hierarchical in nature. In the above example,
        # department1 (used as businessunit1.department1) is the child of businessunit1.
        # team1 (used as businessunit1.department1.team1) is the child of department1.
        # department2 (used as businessunit2.department2) and department3 (businessunit2.department3)
        # are children of businessunit2.
        # Note: Affiliations are case sensitive except for the non-leaf affiliations
        # (like businessunit1, department1, businessunit2) that are specified in the configuration file,
        # which are always stored in lower case.
        #############################################################################
        affiliations:
          org1:
              - department1
              - department2
          org2:
              - department1
        #############################################################################
        #  Signing section
        #
        #  The "default" subsection is used to sign enrollment certificates;
        #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
        #
        #  The "ca" profile subsection is used to sign intermediate CA certificates;
        #  the default expiration ("expiry" field) is "43800h" which is 5 years in hours.
        #  Note that "isca" is true, meaning that it issues a CA certificate.
        #  A maxpathlen of 0 means that the intermediate CA cannot issue other
        #  intermediate CA certificates, though it can still issue end entity certificates.
        #  (See RFC 5280, section 4.2.1.9)
        #
        #  The "tls" profile subsection is used to sign TLS certificate requests;
        #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
        #############################################################################
        signing:
            default:
              usage:
                - digital signature
              expiry: 8760h
            profiles:
              ca:
                usage:
                  - cert sign
                  - crl sign
                expiry: 43800h
                caconstraint:
                  isca: true
                  maxpathlen: 0
              tls:
                usage:
                    - signing
                    - key encipherment
                    - server auth
                    - client auth
                    - key agreement
                expiry: 8760h

        ###########################################################################
        #  Certificate Signing Request (CSR) section.
        #  This controls the creation of the root CA certificate.
        #  The expiration for the root CA certificate is configured with the
        #  "ca.expiry" field below, whose default value is "131400h" which is
        #  15 years in hours.
        #  The pathlength field is used to limit CA certificate hierarchy as described
        #  in section 4.2.1.9 of RFC 5280.
        #  Examples:
        #  1) No pathlength value means no limit is requested.
        #  2) pathlength == 1 means a limit of 1 is requested which is the default for
        #     a root CA.  This means the root CA can issue intermediate CA certificates,
        #     but these intermediate CAs may not in turn issue other CA certificates
        #     though they can still issue end entity certificates.
        #  3) pathlength == 0 means a limit of 0 is requested;
        #     this is the default for an intermediate CA, which means it can not issue
        #     CA certificates though it can still issue end entity certificates.
        ###########################################################################
        csr:
          cn: ca-org1
          names:
              - C: US
                ST: "New York"
                L: "New York"
                O: ca-org1
                OU: ca-org1
          hosts:
            - localhost
            - example.com
            - caorg1
            - my-release-dltlogging-caorg1
            - my-release-dltlogging-caorg1.default.svc.cluster.local
          ca:
              expiry: 131400h
              pathlength: 1

        #############################################################################
        # BCCSP (BlockChain Crypto Service Provider) section is used to select which
        # crypto library implementation to use
        #############################################################################
        bccsp:
            default: SW
            sw:
                hash: SHA2
                security: 256
                filekeystore:
                    # The directory used for the software file-based keystore
                    keystore: msp/keystore

        #############################################################################
        # Multi CA section
        #
        # Each Fabric CA server contains one CA by default.  This section is used
        # to configure multiple CAs in a single server.
        #
        # 1) --cacount <number-of-CAs>
        # Automatically generate <number-of-CAs> non-default CAs.  The names of these
        # additional CAs are "ca1", "ca2", ... "caN", where "N" is <number-of-CAs>
        # This is particularly useful in a development environment to quickly set up
        # multiple CAs. Note that, this config option is not applicable to intermediate CA server
        # i.e., Fabric CA server that is started with intermediate.parentserver.url config
        # option (-u command line option)
        #
        # 2) --cafiles <CA-config-files>
        # For each CA config file in the list, generate a separate signing CA.  Each CA
        # config file in this list MAY contain all of the same elements as are found in
        # the server config file except port, debug, and tls sections.
        #
        # Examples:
        # fabric-ca-server start -b admin:adminpw --cacount 2
        #
        # fabric-ca-server start -b admin:adminpw --cafiles ca/ca1/fabric-ca-server-config.yaml
        # --cafiles ca/ca2/fabric-ca-server-config.yaml
        #
        #############################################################################

        cacount:

        cafiles:

        #############################################################################
        # Intermediate CA section
        #
        # The relationship between servers and CAs is as follows:
        #   1) A single server process may contain or function as one or more CAs.
        #      This is configured by the "Multi CA section" above.
        #   2) Each CA is either a root CA or an intermediate CA.
        #   3) Each intermediate CA has a parent CA which is either a root CA or another intermediate CA.
        #
        # This section pertains to configuration of #2 and #3.
        # If the "intermediate.parentserver.url" property is set,
        # then this is an intermediate CA with the specified parent
        # CA.
        #
        # parentserver section
        #    url - The URL of the parent server
        #    caname - Name of the CA to enroll within the server
        #
        # enrollment section used to enroll intermediate CA with parent CA
        #    profile - Name of the signing profile to use in issuing the certificate
        #    label - Label to use in HSM operations
        #
        # tls section for secure socket connection
        #   certfiles - PEM-encoded list of trusted root certificate files
        #   client:
        #     certfile - PEM-encoded certificate file for when client authentication
        #     is enabled on server
        #     keyfile - PEM-encoded key file for when client authentication
        #     is enabled on server
        #############################################################################
        intermediate:
          parentserver:
            url:
            caname:

          enrollment:
            hosts:
            profile:
            label:

          tls:
            certfiles:
            client:
              certfile:
              keyfile:
---
# Source: dltlogging/templates/configmaps/org2caconfig.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: org2caconfig
  namespace: default 
data:
    fabric-ca-server-config.yaml: |
        #############################################################################
        #   This is a configuration file for the fabric-ca-server command.
        #
        #   COMMAND LINE ARGUMENTS AND ENVIRONMENT VARIABLES
        #   ------------------------------------------------
        #   Each configuration element can be overridden via command line
        #   arguments or environment variables.  The precedence for determining
        #   the value of each element is as follows:
        #   1) command line argument
        #      Examples:
        #      a) --port 443
        #         To set the listening port
        #      b) --ca.keyfile ../mykey.pem
        #         To set the "keyfile" element in the "ca" section below;
        #         note the '.' separator character.
        #   2) environment variable
        #      Examples:
        #      a) FABRIC_CA_SERVER_PORT=443
        #         To set the listening port
        #      b) FABRIC_CA_SERVER_CA_KEYFILE="../mykey.pem"
        #         To set the "keyfile" element in the "ca" section below;
        #         note the '_' separator character.
        #   3) configuration file
        #   4) default value (if there is one)
        #      All default values are shown beside each element below.
        #
        #   FILE NAME ELEMENTS
        #   ------------------
        #   The value of all fields whose name ends with "file" or "files" are
        #   name or names of other files.
        #   For example, see "tls.certfile" and "tls.clientauth.certfiles".
        #   The value of each of these fields can be a simple filename, a
        #   relative path, or an absolute path.  If the value is not an
        #   absolute path, it is interpretted as being relative to the location
        #   of this configuration file.
        #
        #############################################################################

        # Version of config file
        version: 1.2.0

        # Server's listening port (default: 7054)
        port: 7054

        # Enables debug logging (default: false)
        debug: false

        # Size limit of an acceptable CRL in bytes (default: 512000)
        crlsizelimit: 512000

        #############################################################################
        #  TLS section for the server's listening port
        #
        #  The following types are supported for client authentication: NoClientCert,
        #  RequestClientCert, RequireAnyClientCert, VerifyClientCertIfGiven,
        #  and RequireAndVerifyClientCert.
        #
        #  Certfiles is a list of root certificate authorities that the server uses
        #  when verifying client certificates.
        #############################################################################
        tls:
          # Enable TLS (default: false)
          enabled: true
          # TLS for the server's listening port
          certfile:
          keyfile:
          clientauth:
            type: noclientcert
            certfiles:

        #############################################################################
        #  The CA section contains information related to the Certificate Authority
        #  including the name of the CA, which should be unique for all members
        #  of a blockchain network.  It also includes the key and certificate files
        #  used when issuing enrollment certificates (ECerts) and transaction
        #  certificates (TCerts).
        #  The chainfile (if it exists) contains the certificate chain which
        #  should be trusted for this CA, where the 1st in the chain is always the
        #  root CA certificate.
        #############################################################################
        ca:
          # Name of this CA
          name: Org2CA
          # Key file (is only used to import a private key into BCCSP)
          keyfile:
          # Certificate file (default: ca-cert.pem)
          certfile:
          # Chain file
          chainfile:

        #############################################################################
        #  The gencrl REST endpoint is used to generate a CRL that contains revoked
        #  certificates. This section contains configuration options that are used
        #  during gencrl request processing.
        #############################################################################
        crl:
          # Specifies expiration for the generated CRL. The number of hours
          # specified by this property is added to the UTC time, the resulting time
          # is used to set the 'Next Update' date of the CRL.
          expiry: 24h

        #############################################################################
        #  The registry section controls how the fabric-ca-server does two things:
        #  1) authenticates enrollment requests which contain a username and password
        #     (also known as an enrollment ID and secret).
        #  2) once authenticated, retrieves the identity's attribute names and
        #     values which the fabric-ca-server optionally puts into TCerts
        #     which it issues for transacting on the Hyperledger Fabric blockchain.
        #     These attributes are useful for making access control decisions in
        #     chaincode.
        #  There are two main configuration options:
        #  1) The fabric-ca-server is the registry.
        #     This is true if "ldap.enabled" in the ldap section below is false.
        #  2) An LDAP server is the registry, in which case the fabric-ca-server
        #     calls the LDAP server to perform these tasks.
        #     This is true if "ldap.enabled" in the ldap section below is true,
        #     which means this "registry" section is ignored.
        #############################################################################
        registry:
          # Maximum number of times a password/secret can be reused for enrollment
          # (default: -1, which means there is no limit)
          maxenrollments: -1

          # Contains identity information which is used when LDAP is disabled
          identities:
            - name: admin
              pass: adminpw
              type: client
              affiliation: ""
              attrs:
                  hf.Registrar.Roles: "*"
                  hf.Registrar.DelegateRoles: "*"
                  hf.Revoker: true
                  hf.IntermediateCA: true
                  hf.GenCRL: true
                  hf.Registrar.Attributes: "*"
                  hf.AffiliationMgr: true

        #############################################################################
        #  Database section
        #  Supported types are: "sqlite3", "postgres", and "mysql".
        #  The datasource value depends on the type.
        #  If the type is "sqlite3", the datasource value is a file name to use
        #  as the database store.  Since "sqlite3" is an embedded database, it
        #  may not be used if you want to run the fabric-ca-server in a cluster.
        #  To run the fabric-ca-server in a cluster, you must choose "postgres"
        #  or "mysql".
        #############################################################################
        db:
          type: sqlite3
          datasource: fabric-ca-server.db
          tls:
              enabled: false
              certfiles:
              client:
                certfile:
                keyfile:

        #############################################################################
        #  LDAP section
        #  If LDAP is enabled, the fabric-ca-server calls LDAP to:
        #  1) authenticate enrollment ID and secret (i.e. username and password)
        #     for enrollment requests;
        #  2) To retrieve identity attributes
        #############################################################################
        ldap:
          # Enables or disables the LDAP client (default: false)
          # If this is set to true, the "registry" section is ignored.
          enabled: false
          # The URL of the LDAP server
          url: ldap://<adminDN>:<adminPassword>@<host>:<port>/<base>
          # TLS configuration for the client connection to the LDAP server
          tls:
              certfiles:
              client:
                certfile:
                keyfile:
          # Attribute related configuration for mapping from LDAP entries to Fabric CA attributes
          attribute:
              # 'names' is an array of strings containing the LDAP attribute names which are
              # requested from the LDAP server for an LDAP identity's entry
              names: ['uid','member']
              # The 'converters' section is used to convert an LDAP entry to the value of
              # a fabric CA attribute.
              # For example, the following converts an LDAP 'uid' attribute
              # whose value begins with 'revoker' to a fabric CA attribute
              # named "hf.Revoker" with a value of "true" (because the boolean expression
              # evaluates to true).
              #    converters:
              #       - name: hf.Revoker
              #         value: attr("uid") =~ "revoker*"
              converters:
                - name:
                  value:
              # The 'maps' section contains named maps which may be referenced by the 'map'
              # function in the 'converters' section to map LDAP responses to arbitrary values.
              # For example, assume a user has an LDAP attribute named 'member' which has multiple
              # values which are each a distinguished name (i.e. a DN). For simplicity, assume the
              # values of the 'member' attribute are 'dn1', 'dn2', and 'dn3'.
              # Further assume the following configuration.
              #    converters:
              #       - name: hf.Registrar.Roles
              #         value: map(attr("member"),"groups")
              #    maps:
              #       groups:
              #          - name: dn1
              #            value: peer
              #          - name: dn2
              #            value: client
              # The value of the user's 'hf.Registrar.Roles' attribute is then computed to be
              # "peer,client,dn3".  This is because the value of 'attr("member")' is
              # "dn1,dn2,dn3", and the call to 'map' with a 2nd argument of
              # "group" replaces "dn1" with "peer" and "dn2" with "client".
              maps:
                groups:
                    - name:
                      value:

        #############################################################################
        # Affiliations section. Fabric CA server can be bootstrapped with the
        # affiliations specified in this section. Affiliations are specified as maps.
        # For example:
        #   businessunit1:
        #     department1:
        #       - team1
        #   businessunit2:
        #     - department2
        #     - department3
        #
        # Affiliations are hierarchical in nature. In the above example,
        # department1 (used as businessunit1.department1) is the child of businessunit1.
        # team1 (used as businessunit1.department1.team1) is the child of department1.
        # department2 (used as businessunit2.department2) and department3 (businessunit2.department3)
        # are children of businessunit2.
        # Note: Affiliations are case sensitive except for the non-leaf affiliations
        # (like businessunit1, department1, businessunit2) that are specified in the configuration file,
        # which are always stored in lower case.
        #############################################################################
        affiliations:
          org1:
              - department1
              - department2
          org2:
              - department1
        #############################################################################
        #  Signing section
        #
        #  The "default" subsection is used to sign enrollment certificates;
        #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
        #
        #  The "ca" profile subsection is used to sign intermediate CA certificates;
        #  the default expiration ("expiry" field) is "43800h" which is 5 years in hours.
        #  Note that "isca" is true, meaning that it issues a CA certificate.
        #  A maxpathlen of 0 means that the intermediate CA cannot issue other
        #  intermediate CA certificates, though it can still issue end entity certificates.
        #  (See RFC 5280, section 4.2.1.9)
        #
        #  The "tls" profile subsection is used to sign TLS certificate requests;
        #  the default expiration ("expiry" field) is "8760h", which is 1 year in hours.
        #############################################################################
        signing:
            default:
              usage:
                - digital signature
              expiry: 8760h
            profiles:
              ca:
                usage:
                  - cert sign
                  - crl sign
                expiry: 43800h
                caconstraint:
                  isca: true
                  maxpathlen: 0
              tls:
                usage:
                    - signing
                    - key encipherment
                    - server auth
                    - client auth
                    - key agreement
                expiry: 8760h

        ###########################################################################
        #  Certificate Signing Request (CSR) section.
        #  This controls the creation of the root CA certificate.
        #  The expiration for the root CA certificate is configured with the
        #  "ca.expiry" field below, whose default value is "131400h" which is
        #  15 years in hours.
        #  The pathlength field is used to limit CA certificate hierarchy as described
        #  in section 4.2.1.9 of RFC 5280.
        #  Examples:
        #  1) No pathlength value means no limit is requested.
        #  2) pathlength == 1 means a limit of 1 is requested which is the default for
        #     a root CA.  This means the root CA can issue intermediate CA certificates,
        #     but these intermediate CAs may not in turn issue other CA certificates
        #     though they can still issue end entity certificates.
        #  3) pathlength == 0 means a limit of 0 is requested;
        #     this is the default for an intermediate CA, which means it can not issue
        #     CA certificates though it can still issue end entity certificates.
        ###########################################################################
        csr:
          cn: ca-org2
          names:
              - C: US
                ST: "New York"
                L: "New York"
                O: ca-org2
                OU: ca-org2
          hosts:
            - localhost
            - example.com
            - caorg2
            - my-release-dltlogging-caorg2
            - my-release-dltlogging-caorg2.default.svc.cluster.local
          ca:
              expiry: 131400h
              pathlength: 1

        #############################################################################
        # BCCSP (BlockChain Crypto Service Provider) section is used to select which
        # crypto library implementation to use
        #############################################################################
        bccsp:
            default: SW
            sw:
                hash: SHA2
                security: 256
                filekeystore:
                    # The directory used for the software file-based keystore
                    keystore: msp/keystore

        #############################################################################
        # Multi CA section
        #
        # Each Fabric CA server contains one CA by default.  This section is used
        # to configure multiple CAs in a single server.
        #
        # 1) --cacount <number-of-CAs>
        # Automatically generate <number-of-CAs> non-default CAs.  The names of these
        # additional CAs are "ca1", "ca2", ... "caN", where "N" is <number-of-CAs>
        # This is particularly useful in a development environment to quickly set up
        # multiple CAs. Note that, this config option is not applicable to intermediate CA server
        # i.e., Fabric CA server that is started with intermediate.parentserver.url config
        # option (-u command line option)
        #
        # 2) --cafiles <CA-config-files>
        # For each CA config file in the list, generate a separate signing CA.  Each CA
        # config file in this list MAY contain all of the same elements as are found in
        # the server config file except port, debug, and tls sections.
        #
        # Examples:
        # fabric-ca-server start -b admin:adminpw --cacount 2
        #
        # fabric-ca-server start -b admin:adminpw --cafiles ca/ca1/fabric-ca-server-config.yaml
        # --cafiles ca/ca2/fabric-ca-server-config.yaml
        #
        #############################################################################

        cacount:

        cafiles:

        #############################################################################
        # Intermediate CA section
        #
        # The relationship between servers and CAs is as follows:
        #   1) A single server process may contain or function as one or more CAs.
        #      This is configured by the "Multi CA section" above.
        #   2) Each CA is either a root CA or an intermediate CA.
        #   3) Each intermediate CA has a parent CA which is either a root CA or another intermediate CA.
        #
        # This section pertains to configuration of #2 and #3.
        # If the "intermediate.parentserver.url" property is set,
        # then this is an intermediate CA with the specified parent
        # CA.
        #
        # parentserver section
        #    url - The URL of the parent server
        #    caname - Name of the CA to enroll within the server
        #
        # enrollment section used to enroll intermediate CA with parent CA
        #    profile - Name of the signing profile to use in issuing the certificate
        #    label - Label to use in HSM operations
        #
        # tls section for secure socket connection
        #   certfiles - PEM-encoded list of trusted root certificate files
        #   client:
        #     certfile - PEM-encoded certificate file for when client authentication
        #     is enabled on server
        #     keyfile - PEM-encoded key file for when client authentication
        #     is enabled on server
        #############################################################################
        intermediate:
          parentserver:
            url:
            caname:

          enrollment:
            hosts:
            profile:
            label:

          tls:
            certfiles:
            client:
              certfile:
              keyfile:
---
# Source: dltlogging/templates/pv/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:  
  name: hlfpvhelm
spec:
  storageClassName: standard 
  accessModes: # defines the rights of the volume we are creating
    - ReadWriteMany
  capacity: # defines the capacity of PV we are creating
    storage: 500Mi #the amount of storage we are tying to claim
  hostPath:
    path: "/mnt" # path to which we are creating the volume
  persistentVolumeReclaimPolicy: Delete
---
# Source: dltlogging/templates/pvc/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hlfpvchelm
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Mi
---
# Source: dltlogging/templates/api/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-api
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: api
    isMainInterface: "yes"
    tier: external
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 9899
      targetPort: 9899
      protocol: TCP
      nodePort: 31999
      
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: api
    isMainInterface: "yes"
    tier: external
---
# Source: dltlogging/templates/caserver/caorderer/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-caorderer
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorderer
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 10054
      targetPort: 10054
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorderer
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/caserver/caorg1/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-caorg1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7054
      targetPort: 7054
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg1
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/caserver/caorg2/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-caorg2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8054
      targetPort: 8054
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg2
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/chaincode/loggingbasic/loggingbasicorg1/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-loggingbasicorg1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7052
      targetPort: 7052
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg1
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/chaincode/loggingbasic/loggingbasicorg2/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-loggingbasicorg2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7052
      targetPort: 7052
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg2
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/orderers/orderer/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-orderer
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      #
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/orderers/orderer2/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-orderer2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      #
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer2
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/orderers/orderer3/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-orderer3
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer3
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 7050
      targetPort: 7050
      protocol: TCP
      #
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer3
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/peers/peer0org1/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-peer0org1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 7051
      targetPort: 7051 
      # nodePort: 30000
      protocol: TCP
    - name: event
      port: 7061
      targetPort: 7061
      protocol: TCP
      # nodePort: 30443
    - name: couchdb
      port: 5984
      targetPort: 5984
      # nodePort: 30001
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org1
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/peers/peer0org2/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dltlogging-peer0org2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 7051
      targetPort: 7051 
      # nodePort: 30000
      protocol: TCP
    - name: event
      port: 7061
      targetPort: 7061
      protocol: TCP
      # nodePort: 30443
    - name: couchdb
      port: 5984
      targetPort: 5984
      # nodePort: 30001
      protocol: TCP
  selector:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org2
    isMainInterface: "no"
    tier: internal
---
# Source: dltlogging/templates/api/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-api
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: api
    isMainInterface: "yes"
    tier: external
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: api
      isMainInterface: "yes"
      tier: external
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: api
        isMainInterface: "yes"
        tier: external
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: api
          stdin: true
          tty: true
          securityContext:
            {}
          image: "assistiot/dlt_api:2.0.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 9899
              protocol: TCP
          resources:
            {}
          command:           
          - /bin/sh
          - -c
          - |
            echo "waiting for blockchain deploy"
            sleep 260
            node app.js
            echo "hello?"
          env:
            - name: FABRIC_CA_SERVER_CA_NAME
              value: "my-release-dltlogging-caorg1"
          volumeMounts:
            - name: fabricfiles
              mountPath: /usr/src/app/connection-profile
              subPath: connection-profile
            - name: fabricfiles
              mountPath: /organizations
              subPath: organizations
            - name: fabricfiles
              mountPath: /components/userWallet/tms
              subPath: wallet
            - name: fabricfiles
              mountPath: /components/adminWallet
              subPath: wallet
            - mountPath: /usr/src/app/config.json
              name: caclientconfig
              subPath: config.json  
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: caclientconfig
          configMap:
            name: caclientconfig
            items:
              - key: config.json
                path: config.json
                mode: 0544
---
# Source: dltlogging/templates/caserver/caorderer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-caorderer
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorderer
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: caorderer
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: caorderer
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: caorderer
          securityContext:
            {}
          image: "hyperledger/fabric-ca:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 10054
              protocol: TCP
          resources:
            {}
          command: ["fabric-ca-server" ,"start", "-b" ,"admin:adminpw","--port","10054", "-d"]
          env:
            - name: FABRIC_CA_SERVER_CA_NAME
              value: "my-release-dltlogging-caorderer"
            - name: FABRIC_CA_SERVER_TLS_ENABLED
              value: "true"
            - name: FABRIC_CA_SERVER_CSR_CN
              value: "my-release-dltlogging-caorderer"
            - name: FABRIC_CA_SERVER_CSR_HOSTS
              value: "my-release-dltlogging-caorderer"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric-ca-server
              name: fabricfiles
              subPath: organizations/fabric-ca/ordererOrg 
            - mountPath: /etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml
              name: orderercaconfig-volume
              subPath: fabric-ca-server-config.yaml 
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: orderercaconfig-volume
          configMap:
            name: orderercaconfig
---
# Source: dltlogging/templates/caserver/caorg1/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-caorg1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: caorg1
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: caorg1
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: caorg1
          securityContext:
            {}
          image: "hyperledger/fabric-ca:1.4.9"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7054
              protocol: TCP
          resources:
            {}
          command: ["fabric-ca-server" , "start", "-b" ,"admin:adminpw","--port","7054", "-d"]
          env:
            - name: FABRIC_CA_SERVER_CA_NAME
              value: "my-release-dltlogging-caorg1"
            - name: FABRIC_CA_SERVER_TLS_ENABLED
              value: "true"
            - name: FABRIC_CA_SERVER_CSR_CN
              value: "my-release-dltlogging-caorg1"
            - name: FABRIC_CA_SERVER_CSR_HOSTS
              value: "my-release-dltlogging-caorg1"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric-ca-server
              name: fabricfiles
              subPath: organizations/fabric-ca/org1
            - mountPath: /etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml
              name: org1caconfig-volume
              subPath: fabric-ca-server-config.yaml   
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: org1caconfig-volume
          configMap:
            name: org1caconfig
---
# Source: dltlogging/templates/caserver/caorg2/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-caorg2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: caorg2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: caorg2
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: caorg2
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: caorg2
          securityContext:
            {}
          image: "hyperledger/fabric-ca:1.4.9"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8054
              protocol: TCP
          resources:
            {}
          command: ["fabric-ca-server" , "start", "-b" ,"admin:adminpw","--port","8054", "-d"]
          env:
            - name: FABRIC_CA_SERVER_CA_NAME
              value: "my-release-dltlogging-caorg2"
            - name: FABRIC_CA_SERVER_TLS_ENABLED
              value: "true"
            - name: FABRIC_CA_SERVER_CSR_CN
              value: "my-release-dltlogging-caorg2"
            - name: FABRIC_CA_SERVER_CSR_HOSTS
              value: "my-release-dltlogging-caorg2"
          volumeMounts:
            - mountPath: /etc/hyperledger/fabric-ca-server
              name: fabricfiles
              subPath: organizations/fabric-ca/org2
            - mountPath: /etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml
              name: org2caconfig-volume  
              subPath: fabric-ca-server-config.yaml 
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: org2caconfig-volume
          configMap:
            name: org2caconfig
---
# Source: dltlogging/templates/chaincode/loggingbasic/loggingbasicorg1/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-loggingbasicorg1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: loggingbasicorg1
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: loggingbasicorg1
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: loggingbasicorg1
          securityContext:
            {}
          image: "assistiot/logging_auditing:1.0.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 7052
              protocol: TCP
          resources:
            {}
          # command: ["CHAINCODE_ID=$(cat ../chaincodeids/chaincode_id.txt)"]
          # command: ["sleep", "infinity"]
          command:
          - /bin/sh
          - -c
          - |
            echo "waiting for CHAINCODE_ID"
            sleep 270
            export CHAINCODE_ID=$(cat ../chaincodeids/loggingbasic1.txt)
            echo "$CHAINCODE_ID"
            env
            ./loggingcc.out
            echo "teleiwse?"
          env:
            - name: CHAINCODE_SERVER_ADDRESS
              value: "0.0.0.0:7052"
          volumeMounts:
            - mountPath: /chaincodeids
              name: fabricfiles
              subPath: chaincodeids
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
---
# Source: dltlogging/templates/chaincode/loggingbasic/loggingbasicorg2/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-loggingbasicorg2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: loggingbasicorg2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: loggingbasicorg2
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: loggingbasicorg2
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: loggingbasicorg2
          securityContext:
            {}
          image: "assistiot/logging_auditing:1.0.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 7052
              protocol: TCP
          resources:
            {}
          command:
          - /bin/sh
          - -c
          - |
            echo "waiting for CHAINCODE_ID"
            sleep 270
            export CHAINCODE_ID=$(cat ../chaincodeids/loggingbasic2.txt)
            echo "$CHAINCODE_ID"
            env
            ./loggingcc.out
            echo "teleiwse?"
          env:
            - name: CHAINCODE_SERVER_ADDRESS
              value: "0.0.0.0:7052"
          volumeMounts:
            - mountPath: /chaincodeids
              name: fabricfiles
              subPath: chaincodeids
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
---
# Source: dltlogging/templates/orderers/orderer/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-orderer
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: orderer
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: orderer
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: orderer
          securityContext:
            {}
          image: "hyperledger/fabric-orderer:2.4"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7050
              protocol: TCP
          resources:
            {}
          env:
            - name: CONFIGTX_ORDERER_ADDRESSES
              value: "my-release-dltlogging-orderer"
            - name: ORDERER_GENERAL_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_LISTENPORT
              value: "7050"
            - name: ORDERER_GENERAL_LOGLEVEL
              value: "debug"
            - name: ORDERER_GENERAL_LOCALMSPDIR
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp"
            - name: ORDERER_GENERAL_LOCALMSPID
              value: "OrdererMSP"
            - name: ORDERER_GENERAL_GENESISMETHOD
              value: "file"
            - name: ORDERER_GENERAL_GENESISFILE
              value: "/system-genesis-block/genesis.block"
            - name: ORDERER_GENERAL_TLS_ENABLED
              value: "true"
            - name: ORDERER_GENERAL_TLS_PRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key"
            - name: ORDERER_GENERAL_TLS_CERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt"
            - name: ORDERER_GENERAL_TLS_ROOTCAS
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt"
          volumeMounts:
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /system-genesis-block
              name: fabricfiles
              subPath: system-genesis-block 
            - mountPath: /var/hyperledger/production/orderer
              name: fabricfiles
              subPath: ordererstate/orderer
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
---
# Source: dltlogging/templates/orderers/orderer2/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-orderer2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: orderer2
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: orderer2
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: orderer2
          securityContext:
            {}
          image: "hyperledger/fabric-orderer:2.4"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7050
              protocol: TCP
          resources:
            {}
          env:
            - name: CONFIGTX_ORDERER_ADDRESSES
              value: "my-release-dltlogging-orderer2"
            - name: ORDERER_GENERAL_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_LISTENPORT
              value: "7050"
            - name: ORDERER_GENERAL_LOGLEVEL
              value: "debug"
            - name: ORDERER_GENERAL_LOCALMSPDIR
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp"
            - name: ORDERER_GENERAL_LOCALMSPID
              value: "OrdererMSP"
            - name: ORDERER_GENERAL_GENESISMETHOD
              value: "file"
            - name: ORDERER_GENERAL_GENESISFILE
              value: "/system-genesis-block/genesis.block"
            - name: ORDERER_GENERAL_TLS_ENABLED
              value: "true"
            - name: ORDERER_GENERAL_TLS_PRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key"
            - name: ORDERER_GENERAL_TLS_CERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt"
            - name: ORDERER_GENERAL_TLS_ROOTCAS
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/ca.crt"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.key"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/server.crt"
          volumeMounts:
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /system-genesis-block
              name: fabricfiles
              subPath: system-genesis-block 
            - mountPath: /var/hyperledger/production/orderer
              name: fabricfiles
              subPath: ordererstate/orderer2
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
---
# Source: dltlogging/templates/orderers/orderer3/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-orderer3
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: orderer3
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: orderer3
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: orderer3
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: orderer3
          securityContext:
            {}
          image: "hyperledger/fabric-orderer:2.4"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7050
              protocol: TCP
          resources:
            {}
          command: 
          env:
            - name: CONFIGTX_ORDERER_ADDRESSES
              value: "my-release-dltlogging-orderer3"
            - name: ORDERER_GENERAL_LISTENADDRESS
              value: "0.0.0.0"
            - name: ORDERER_GENERAL_LISTENPORT
              value: "7050"
            - name: ORDERER_GENERAL_LOGLEVEL
              value: "debug"
            - name: ORDERER_GENERAL_LOCALMSPDIR
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp"
            - name: ORDERER_GENERAL_LOCALMSPID
              value: "OrdererMSP"
            - name: ORDERER_GENERAL_GENESISMETHOD
              value: "file"
            - name: ORDERER_GENERAL_GENESISFILE
              value: "/system-genesis-block/genesis.block"
            - name: ORDERER_GENERAL_TLS_ENABLED
              value: "true"
            - name: ORDERER_GENERAL_TLS_PRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key"
            - name: ORDERER_GENERAL_TLS_CERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt"
            - name: ORDERER_GENERAL_TLS_ROOTCAS
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/ca.crt"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.key"
            - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/server.crt"
          volumeMounts:
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /system-genesis-block
              name: fabricfiles
              subPath: system-genesis-block 
            - mountPath: /var/hyperledger/production/orderer
              name: fabricfiles
              subPath: ordererstate/orderer3
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
---
# Source: dltlogging/templates/peers/clipeer0org1/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-clipeer0org1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: clipeer0org1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: clipeer0org1
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: clipeer0org1
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: clipeer0org1
          stdin: true
          tty: true
          securityContext:
            {}
          image: "hyperledger/fabric-tools:2.4"
          imagePullPolicy: IfNotPresent
          workingDir: /
          resources:
            {}
          command:
          - /bin/bash
          - -c
          - |
            sleep 60
            echo "shell scripts in /join-channel"
            ls -lh /join-channel
            echo "copy scripts to /tmp"
            cp /join-channel/*.sh /tmp
            echo "apply 'chmod +x' to /tmp/*.sh"
            chmod +x /tmp/*.sh
            echo "execute shell scripts now"
            ./tmp/create-channel.sh &&
            ./tmp/org1join-upd.sh
            sleep infinity
          env:
            - name: ORDERER_CA
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"
            - name: CORE_PEER_ADDRESS
              value: my-release-dltlogging-peer0org1:7051
            - name: CORE_PEER_ID
              value: "cli.peer0.org1.example.com"
            - name: CORE_PEER_LOCALMSPID
              value: "Org1MSP"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
            - name: GOPATH
              value: "/opt/gopath"
            - name: SYS_CHANNEL
              value: "system-channel"
            - name: CORE_CHAINCODE_BUILDER
              value: "hyperledger/fabric-ccenv:1.4.8"             
            - name: FABRIC_LOGGING_SPEC
              value: "DEBUG"
          volumeMounts:
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /configtx
              name: hlfconfigtx-volume
            - mountPath: /channel-artifacts
              name: fabricfiles
              subPath: channel-artifacts
            - mountPath: /scripts
              name: fabricfiles
              subPath: scripts
            - mountPath: /opt/gopath/src/github.com/chaincode
              name: hlfchaincode-volume
            - mountPath: /join-channel
              name: joinchannel-config
            - mountPath: /chaincodeids
              name: fabricfiles
              subPath: chaincodeids
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: hlfchaincode-volume
          configMap:
            name: hlfchaincode
        - name: hlfconfigtx-volume
          configMap:
            name: hlfconfigtx
        - name: joinchannel-config
          configMap:
            name: joinchannel
---
# Source: dltlogging/templates/peers/clipeer0org2/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-clipeer0org2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: clipeer0org2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: clipeer0org2
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: clipeer0org2
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: clipeer0org2
          stdin: true
          tty: true
          securityContext:
            {}
          image: "hyperledger/fabric-tools:2.4"
          imagePullPolicy: IfNotPresent
          workingDir: /
          resources:
            {}
          command: 
          - /bin/bash
          - -c
          - |
            sleep 60
            echo "shell scripts in /join-channel"
            ls -lh /join-channel
            echo "copy scripts to /tmp"
            cp /join-channel/*.sh /tmp
            echo "apply 'chmod +x' to /tmp/*.sh"
            chmod +x /tmp/*.sh
            echo "execute shell scripts now"
            ./tmp/org2join-upd.sh
            sleep infinity
          env:
            - name: ORDERER_CA
              value: "/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"
            - name: CORE_PEER_ADDRESS
              value: my-release-dltlogging-peer0org2:7051
            - name: CORE_PEER_ID
              value: "cli.peer0.org2.example.com"
            - name: CORE_PEER_LOCALMSPID
              value: "Org2MSP"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
            - name: GOPATH
              value: "/opt/gopath"
            - name: SYS_CHANNEL
              value: "system-channel"
            - name: CORE_CHAINCODE_BUILDER
              value: "hyperledger/fabric-ccenv:1.4.8"             
            - name: FABRIC_LOGGING_SPEC
              value: "DEBUG"
          volumeMounts:
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /configtx
              name: hlfconfigtx-volume
            - mountPath: /channel-artifacts
              name: fabricfiles
              subPath: channel-artifacts
            - mountPath: /scripts
              name: fabricfiles
              subPath: scripts
            - mountPath: /opt/gopath/src/github.com/chaincode
              name: hlfchaincode-volume
            - mountPath: /join-channel
              name: joinchannel-config
            - mountPath: /chaincodeids
              name: fabricfiles
              subPath: chaincodeids
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: hlfchaincode-volume
          configMap:
            name: hlfchaincode
        - name: hlfconfigtx-volume
          configMap:
            name: hlfconfigtx
        - name: joinchannel-config
          configMap:
            name: joinchannel
---
# Source: dltlogging/templates/peers/peer0org1/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-peer0org1
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org1
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: peer0org1
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: peer0org1
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: peer0org1
          securityContext:
            {}
          image: "hyperledger/fabric-peer:2.4"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7051
              protocol: TCP
            - containerPort: 7052
              protocol: TCP
            - containerPort: 7053
              protocol: TCP
            - containerPort: 9443
              protocol: TCP
          resources:
            {}
          # command: ["sh", "-c", "peer node start"]
          command:
            - /bin/sh
            - -c
            - |
              sleep 180
              peer node start
          env:
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ID
              value: my-release-dltlogging-peer0org1
            - name: CORE_PEER_ADDRESS
              value: my-release-dltlogging-peer0org1:7051
            - name: CORE_PEER_LISTENADDRESS
              value: "0.0.0.0:7051"
            - name: CORE_PEER_EVENTS_ADDRESS
              value: "0.0.0.0:7061"
            - name: CORE_PEER_GOSSIP_BOOTSTRAP
              value: my-release-dltlogging-peer0org1:7051
            - name: CORE_PEER_GOSSIP_ENDPOINT
              value: my-release-dltlogging-peer0org1:7051
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: my-release-dltlogging-peer0org1:7051
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            - name: CORE_PEER_LOCALMSPID
              value: "Org1MSP"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp"
            - name: FABRIC_LOGGING_SPEC
              value: "debug"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
            - name: FABRIC_CFG_PATH
              value: "/etc/hyperledger/fabric"
            - name: CORE_OPERATIONS_LISTENADDRESS
              value: "0.0.0.0:9443"
          volumeMounts:
            - mountPath: /opt/gopath/src/github.com/chaincode/
              name: hlfchaincode-volume
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /var/hyperledger/production
              name: fabricfiles
              subPath: state/org1/peer0
            - mountPath: /etc/hyperledger/fabric/core.yaml
              name: buildersconfig
              subPath: core.yaml
            - mountPath: /builders/external/bin/detect
              name: external-builder-detect
              subPath: detect
            - mountPath: /builders/external/bin/build
              name: external-builder-build
              subPath: build
            - mountPath: /builders/external/bin/release
              name: external-builder-release
              subPath: release

        - name: couchdb
          securityContext:
            {}
          image: "hyperledger/fabric-couchdb:0.4.15"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /var/lib/couchdb
              name: fabricfiles
              subPath: state/org1/peer0-couchdb

      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: buildersconfig
          configMap:
            name: buildersconfig
            items:
              - key: core.yaml
                path: core.yaml
        - name: external-builder-detect
          configMap:
            name: buildersconfig
            items:
              - key: detect
                path: detect
                mode: 0544
        - name: external-builder-build
          configMap:
            name: buildersconfig
            items:
              - key: build
                path: build
                mode: 0544
        - name: external-builder-release
          configMap:
            name: buildersconfig
            items:
              - key: release
                path: release
                mode: 0544
        - name: hlfchaincode-volume
          configMap:
            name: hlfchaincode
---
# Source: dltlogging/templates/peers/peer0org2/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dltlogging-peer0org2
  namespace: "default"
  labels:
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: peer0org2
    isMainInterface: "no"
    tier: internal
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dltlogging
      app.kubernetes.io/instance: my-release
      enabler: dltlogging
      app.kubernetes.io/component: peer0org2
      isMainInterface: "no"
      tier: internal
  template:
    metadata:
      labels:
        helm.sh/chart: dltlogging-0.2.0
        app.kubernetes.io/name: dltlogging
        app.kubernetes.io/instance: my-release
        enabler: dltlogging
        app.kubernetes.io/component: peer0org2
        isMainInterface: "no"
        tier: internal
        app.kubernetes.io/version: "0.2.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
        - name: peer0org2
          securityContext:
            {}
          image: "hyperledger/fabric-peer:2.4"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7051
              protocol: TCP
            - containerPort: 7052
              protocol: TCP
            - containerPort: 7053
              protocol: TCP
            - containerPort: 9443
              protocol: TCP
          resources:
            {}
          # command: ["sh", "-c", "peer node start"]
          command:
            - /bin/sh
            - -c
            - |
              sleep 180
              peer node start
          env:
            - name: CORE_PEER_ADDRESSAUTODETECT
              value: "true"
            - name: CORE_PEER_ID
              value: my-release-dltlogging-peer0org2
            - name: CORE_PEER_ADDRESS
              value: my-release-dltlogging-peer0org2:7051
            - name: CORE_PEER_LISTENADDRESS
              value: "0.0.0.0:7051"
            - name: CORE_PEER_EVENTS_ADDRESS
              value: "0.0.0.0:7061"
            - name: CORE_PEER_GOSSIP_BOOTSTRAP
              value: my-release-dltlogging-peer0org2:7051
            - name: CORE_PEER_GOSSIP_ENDPOINT
              value: my-release-dltlogging-peer0org2:7051
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: my-release-dltlogging-peer0org2:7051
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            - name: CORE_PEER_LOCALMSPID
              value: "Org2MSP"
            - name: CORE_PEER_MSPCONFIGPATH
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp"
            - name: FABRIC_LOGGING_SPEC
              value: "debug"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_CERT_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt"
            - name: CORE_PEER_TLS_KEY_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key"
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: "/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
            - name: CORE_LEDGER_STATE_STATEDATABASE
              value: "CouchDB"
            - name: CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS
              value: "localhost:5984"
            - name: FABRIC_CFG_PATH
              value: "/etc/hyperledger/fabric"
            - name: CORE_OPERATIONS_LISTENADDRESS
              value: "0.0.0.0:9443"
          volumeMounts:
            - mountPath: /opt/gopath/src/github.com/chaincode/
              name: hlfchaincode-volume
            - mountPath: /organizations
              name: fabricfiles
              subPath: organizations
            - mountPath: /var/hyperledger/production
              name: fabricfiles
              subPath: state/org2/peer0
            - mountPath: /etc/hyperledger/fabric/core.yaml
              name: buildersconfig
              subPath: core.yaml
            - mountPath: /builders/external/bin/detect
              name: external-builder-detect
              subPath: detect
            - mountPath: /builders/external/bin/build
              name: external-builder-build
              subPath: build
            - mountPath: /builders/external/bin/release
              name: external-builder-release
              subPath: release

        - name: couchdb
          securityContext:
            {}
          image: "hyperledger/fabric-couchdb:0.4.15"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /var/lib/couchdb
              name: fabricfiles
              subPath: state/org2/peer0-couchdb

      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: buildersconfig
          configMap:
            name: buildersconfig
            items:
              - key: core.yaml
                path: core.yaml
        - name: external-builder-detect
          configMap:
            name: buildersconfig
            items:
              - key: detect
                path: detect
                mode: 0544
        - name: external-builder-build
          configMap:
            name: buildersconfig
            items:
              - key: build
                path: build
                mode: 0544
        - name: external-builder-release
          configMap:
            name: buildersconfig
            items:
              - key: release
                path: release
                mode: 0544
        - name: hlfchaincode-volume
          configMap:
            name: hlfchaincode
---
# Source: dltlogging/templates/jobs/artifacts.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-dltlogging-job-artifacts
  namespace: "default"
  labels:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: artifacts
    isMainInterface: "no"
    tier: internal
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    spec:
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: fabrictools-volume
          configMap:
            name: fabrictools
        - name: configtx-volume
          configMap:
            name: hlfconfigtx
        - name: connectionprofiles-volume
          configMap:
            name: hlfconnectionprofiles
      securityContext:
        {}
      containers:
      - name: artifacts
        workingDir: /
        securityContext:
            {}
        image: "hyperledger/fabric-tools:2.4"
        imagePullPolicy: IfNotPresent
        resources:
            {}
        volumeMounts:
          - mountPath: /organizations
            name: fabricfiles
            subPath: organizations
          - mountPath: /configtx
            name: configtx-volume
          - mountPath: /system-genesis-block
            name: fabricfiles
            subPath: system-genesis-block
          - mountPath: /channel-artifacts
            name: fabricfiles
            subPath: channel-artifacts
          - mountPath: /scriptshlftools
            name: fabrictools-volume
          - mountPath: /connection-profiles
            name: connectionprofiles-volume
        command: 
          - /bin/bash
          - -c
          - |
            CFILE=/channel-artifacts/mychannel.block
            if [ -f "$CFILE" ]; then
              echo "$CFILE exists."
              echo "Skipping artifact generation, artifacts already exists"
            else
              echo "$CFILE does not exist."
              sleep 80
              echo "config in /configtx" 
              ls -lh /configtx
              echo "copy configtx to /tmp"
              cp /configtx/*.yaml /tmp
              echo "shell scripts in /scriptshlftools"
              ls -lh /scriptshlftools
              echo "copy scripts to /tmp"
              cp /scriptshlftools/*.sh /tmp
              echo "connection-profiles in /connection-profiles" 
              ls -lh /connection-profiles
              echo "copy connection-profiles to /tmp"
              cp /connection-profiles/*.sh /tmp
              cp /connection-profiles/*.json /tmp
              cp /connection-profiles/*.yaml /tmp
              echo "apply 'chmod +x' to /tmp/*.sh"
              chmod +x /tmp/*.sh
              echo "execute shell scripts now"
              ./tmp/createGenesis.sh &&
              ./tmp/createChannel.sh ${CHANNEL_NAME} &&
              ./tmp/ccp.sh 
            fi
      restartPolicy: OnFailure
  backoffLimit: 10
---
# Source: dltlogging/templates/jobs/createcerts.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-dltlogging-job-createcerts
  namespace: "default"
  labels:
    app.kubernetes.io/name: dltlogging
    app.kubernetes.io/instance: my-release
    enabler: dltlogging
    app.kubernetes.io/component: createcerts
    isMainInterface: "no"
    tier: internal
    helm.sh/chart: dltlogging-0.2.0
    app.kubernetes.io/version: "0.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    spec:
      volumes:
        - name: fabricfiles
          persistentVolumeClaim:
            claimName: hlfpvchelm
        - name: hlfcerts-volume
          configMap:
            name: hlfcerts
      securityContext:
        {}
      containers:
      - name: createcerts
        securityContext:
            {}
        image: "hyperledger/fabric-ca-tools:latest"
        imagePullPolicy: IfNotPresent
        resources:
            {}
        volumeMounts:
          - mountPath: /organizations
            name: fabricfiles
            subPath: organizations
          - mountPath: /scriptshlfcerts
            name: hlfcerts-volume
        command:
          - /bin/sh
          - -c
          - |
            CFILE=/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/config.yaml
            if [ -f "$CFILE" ]; then
              echo "$CFILE exists."
              echo "Skipping certs generation, certs already exists"
            else
              echo "$CFILE does not exist."
              echo "shell scripts in /scriptshlfcerts"
              ls -lh /scriptshlfcerts
              echo "copy scripts to /tmp"
              cp /scriptshlfcerts/*.sh /tmp
              echo "apply 'chmod +x' to /tmp/*.sh"
              chmod +x /tmp/*.sh
              sleep 20
              echo "execute shell scripts now"
              ./tmp/orderer-certs.sh &&
              ./tmp/org1-certs.sh 
              ./tmp/org2-certs.sh 
            fi
      restartPolicy: OnFailure
  backoffLimit: 10
