---
# Source: geth/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-geth
  labels:
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
---
# Source: geth/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-geth
  labels:
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
data:
  jwt.hex: ""
---
# Source: geth/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geth-scripts
  labels:
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
data:
  readiness.sh: |-
    #!/usr/bin/env sh
    # shellcheck disable=SC3040
    
    # Node is ready when the latest block is fresh enough.
    # We are checking the timestamp of the latest block and compare it to current local time.
    
    set -e
    
    HTTP_PORT="8545"
    AGE_THRESHOLD=$1
    
    if [ -z "$AGE_THRESHOLD" ]; then
        echo "Usage: $0 <block age threshold>"; exit 1
    fi
    
    # expected output format: 0x65cb8ca8
    get_block_timestamp() {
        wget "http://localhost:$HTTP_PORT" -qO- \
            --header 'Content-Type: application/json' \
            --post-data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest", false],"id":1}' \
        | sed -r 's/.*"timestamp":"([^"]+)".*/\1/g'
    }
    
    # using $(()) converts hex string to number
    block_timestamp=$(($(get_block_timestamp)))
    current_timestamp=$(date +%s)
    
    if ! echo "$block_timestamp" | grep -qE '^[0-9]+$'; then
        echo "Error reading block timestamp"; exit 1
    fi
    
    age=$((current_timestamp - block_timestamp))
    
    if [ $age -le $AGE_THRESHOLD ]; then
        exit 0
    else
        echo "Latest block is $age seconds old. Threshold is $AGE_THRESHOLD seconds" && exit 1
    fi
  liveness.sh: |-
    #!/usr/bin/env sh
    # shellcheck disable=SC3040
    
    # Node is alive when new blocks are being imported.
    # We are checking the age when last block import event occured.
    
    set -e
    
    AGE_THRESHOLD=$1
    STATE_FILE=${2:-"/root/.ethereum/saved_block_number.txt"}
    HTTP_PORT="8545"
    
    if [ -z "${AGE_THRESHOLD}" ] || [ -z "${STATE_FILE}" ]; then
        echo "Usage: $0 <last block import age threshold> [state file]" 1>&2; exit 1
    fi
    
    
    # expected output format: 0x50938d
    get_block_number() {
        wget "http://localhost:$HTTP_PORT" -qO- \
            --header 'Content-Type: application/json' \
            --post-data '{"jsonrpc":"2.0","method":"eth_blockNumber","id":1}' \
        | sed -r 's/.*"result":"([^"]+)".*/\1/g'
    }
    
    # using $(()) converts hex string to number
    block_number=$(($(get_block_number)))
    saved_block_number=""
    
    if ! echo "$block_number" | grep -qE '^[0-9]+$'; then
        echo "Error reading block number"; exit 1
    fi
    
    if [ -f "${STATE_FILE}" ]; then
        saved_block_number=$(cat "${STATE_FILE}")
    fi
    
    if [ "${block_number}" != "${saved_block_number}" ]; then
      mkdir -p "$(dirname "${STATE_FILE}")"
      echo "${block_number}" > "${STATE_FILE}"
    fi
    
    current_timestamp=$(date +%s)
    last_import_timestamp=$(date -r "${STATE_FILE}" +%s)
    
    age=$((current_timestamp - last_import_timestamp))
    
    if [ $age -lt $AGE_THRESHOLD ]; then
        exit 0
    else
        echo "Last block import event was $age seconds ago. Threshold is $AGE_THRESHOLD seconds"; exit 1
    fi
---
# Source: geth/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geth-config
  labels:
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
data:
  config.toml: |-
    [Eth]
    SyncMode = "snap"
    NoPruning = false
    NoPrefetch = false
    TxLookupLimit = 2350000
    TransactionHistory = 2350000
    StateHistory = 90000
    StateScheme = "hash"
    LightPeers = 100
    DatabaseCache = 512
    DatabaseFreezer = ""
    TrieCleanCache = 154
    TrieDirtyCache = 256
    TrieTimeout = 3600000000000
    SnapshotCache = 102
    Preimages = false
    FilterLogCacheSize = 32
    EnablePreimageRecording = false
    RPCGasCap = 50000000
    RPCEVMTimeout = 5000000000
    RPCTxFeeCap = 1e+00
    
    [Eth.Miner]
    GasFloor = 0
    GasCeil = 30000000
    GasPrice = 1000000000
    Recommit = 2000000000
    NewPayloadTimeout = 2000000000
    
    [Eth.TxPool]
    Locals = []
    NoLocals = false
    Journal = "transactions.rlp"
    Rejournal = 3600000000000
    PriceLimit = 1
    PriceBump = 10
    AccountSlots = 16
    GlobalSlots = 5120
    AccountQueue = 64
    GlobalQueue = 1024
    Lifetime = 10800000000000
    
    [Eth.BlobPool]
    Datadir = "blobpool"
    Datacap = 10737418240
    PriceBump = 100
    
    [Eth.GPO]
    Blocks = 20
    Percentile = 60
    MaxHeaderHistory = 1024
    MaxBlockHistory = 1024
    MaxPrice = 500000000000
    IgnorePrice = 2
    
    [Node]
    DataDir = "/root/.ethereum"
    IPCPath = "geth.ipc"
    HTTPHost = "0.0.0.0"
    HTTPPort = 8545
    HTTPVirtualHosts = ["*"]
    HTTPModules = ["eth", "net", "web3"]
    HTTPCors = ["*"]
    AuthAddr = "0.0.0.0"
    AuthPort = 8551
    AuthVirtualHosts = ["*"]
    WSHost = ""
    WSPort = 8546
    WSModules = ["eth", "net", "web3"]
    WSOrigins = ["*"]
    GraphQLVirtualHosts = ["localhost"]
    BatchRequestLimit = 1000
    BatchResponseMaxSize = 25000000
    JWTSecret = "/secrets/jwt.hex"
    
    [Node.P2P]
    MaxPeers = 50
    NoDiscovery = false
    DiscoveryV4 = true
    StaticNodes = []
    TrustedNodes = []
    ListenAddr = ":30303"
    DiscAddr = ":30301"
    EnableMsgEvents = false
    
    [Node.HTTPTimeouts]
    ReadTimeout = 30000000000
    ReadHeaderTimeout = 30000000000
    WriteTimeout = 30000000000
    IdleTimeout = 120000000000
---
# Source: geth/templates/service-authrpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geth-authrpc
  labels:
    service-type: authrpc
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: authrpc
      port: 8551
      targetPort: authrpc
  selector:
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
---
# Source: geth/templates/service-p2p-disc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geth-p2p-discovery
  labels:
    service-type: p2p-discovery
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  publishNotReadyAddresses: true
  ports:
    - name: p2p-udp
      port: 30301
      targetPort: p2p-udp
      protocol: UDP
  selector:
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
---
# Source: geth/templates/service-p2p.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geth-p2p
  labels:
    service-type: p2p
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  publishNotReadyAddresses: true
  ports:
    - name: p2p-tcp
      port: 30303
      targetPort: p2p-tcp
      protocol: TCP
  selector:
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
---
# Source: geth/templates/service-rpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geth-rpc
  labels:
    service-type: rpc
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8545
      targetPort: http
  selector:
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
---
# Source: geth/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-geth
  labels:
    helm.sh/chart: geth-1.0.16
    app.kubernetes.io/name: geth
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.13.10"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: geth
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geth
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: a501d46a9061cead57797f917247ad18ddfc56762121daf3844da558810f18d7
      labels:
        app.kubernetes.io/name: geth
        app.kubernetes.io/instance: my-release
    spec:
      enableServiceLinks: false
      terminationGracePeriodSeconds: 300
      serviceAccountName: my-release-geth
      initContainers:
      containers:
      - name: geth
        image: "ethereum/client-go:v1.13.10"
        imagePullPolicy: "IfNotPresent"
        args:
        - --mainnet
        - --config=/config/config.toml
        - --cache=4096
        - --verbosity=3
        ports:
        - name: http
          containerPort: 8545
        - name: authrpc
          containerPort: 8551
        - name: p2p-tcp
          containerPort: 30303
          protocol: TCP
        - name: p2p-udp
          containerPort: 30301
          protocol: UDP
        volumeMounts:
        - name: config
          mountPath: /config
        - name: data
          mountPath: /root/.ethereum
        - name: secrets
          mountPath: /secrets
        - name: scripts
          mountPath: /scripts
        resources:
          {}
      volumes:
      - name: secrets
        secret:
          secretName: my-release-geth
      - name: scripts
        configMap:
          name: my-release-geth-scripts
      - name: config
        configMap:
          name: my-release-geth-config
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: geth
        app.kubernetes.io/instance: my-release
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "900Gi"
