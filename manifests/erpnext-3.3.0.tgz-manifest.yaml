---
# Source: erpnext/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-erpnext
  labels:

    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: erpnext/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-erpnext-redis
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: erpnext-redis
---
# Source: erpnext/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: erpnext
    chart: erpnext-3.3.0
    heritage: Helm
    release: my-release
  name: my-release-erpnext
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: erpnext/templates/pvc_logs.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  labels:
    app: erpnext
    chart: erpnext-3.3.0
    heritage: Helm
    release: my-release
  name: my-release-erpnext-logs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: erpnext/templates/redis-cache-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-erpnext-redis-cache
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 13000
      targetPort: 6379
  selector:
    app.kubernetes.io/name: erpnext-redis-cache
    app.kubernetes.io/instance: my-release-redis-cache
---
# Source: erpnext/templates/redis-queue-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-erpnext-redis-queue
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 12000
      targetPort: 6379
  selector:
    app.kubernetes.io/name: erpnext-redis-queue
    app.kubernetes.io/instance: my-release-redis-queue
---
# Source: erpnext/templates/redis-socketio-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-erpnext-redis-socketio
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 11000
      targetPort: 6379
  selector:
    app.kubernetes.io/name: erpnext-redis-socketio
    app.kubernetes.io/instance: my-release-redis-socketio
---
# Source: erpnext/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-erpnext
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: erpnext-backend
    app.kubernetes.io/instance: my-release-backend
---
# Source: erpnext/templates/socketio-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-erpnext-socketio
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: erpnext-socketio
    app.kubernetes.io/instance: my-release-socketio
---
# Source: erpnext/templates/deployment-erpnext.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-erpnext
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext-backend
      app.kubernetes.io/instance: my-release-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext-backend
        app.kubernetes.io/instance: my-release-backend
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      initContainers:
        - name: frappe-bench-ownership
          image: quay.io/libpod/alpine:3.2
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args: ['chown -R 1000:1000 /home/frappe/frappe-bench']
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
            capabilities:
              add: ["ALL"]
          volumeMounts:
            - name: sites-dir
              mountPath: /home/frappe/frappe-bench/sites
            - name: logs
              mountPath: /home/frappe/frappe-bench/logs
      containers:
        - name: erpnext-assets
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-nginx:v13.4.1"
          volumeMounts:
          - name: assets-cache
            mountPath: /assets
          - name: sites-dir
            mountPath: /var/www/html/sites
          imagePullPolicy: IfNotPresent
          env:
            - name: "FRAPPE_PY"
              value: "0.0.0.0"
            - name: "FRAPPE_PY_PORT"
              value: "8000"
            - name: "FRAPPE_SOCKETIO"
              value: my-release-erpnext-socketio
            - name: "SOCKETIO_PORT"
              value: "9000"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
        - name: erpnext-python
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-worker:v13.4.1"
          volumeMounts:
          - name: assets-cache
            mountPath: /home/frappe/frappe-bench/sites/assets
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          env:
            - name: "MARIADB_HOST"
              value: 
            - name: "REDIS_QUEUE"
              value: my-release-erpnext-redis-queue:12000
            - name: "REDIS_CACHE"
              value: my-release-erpnext-redis-cache:13000
            - name: "REDIS_SOCKETIO"
              value: my-release-erpnext-redis-socketio:11000
            - name: "SOCKETIO_PORT"
              value: "9000"
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 100
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            {}
      volumes:
        - name: assets-cache
          emptyDir: {}
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/deployment-redis-cache.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-redis-cache
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext-redis-cache
      app.kubernetes.io/instance: my-release-redis-cache
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext-redis-cache
        app.kubernetes.io/instance: my-release-redis-cache
    spec:
      serviceAccountName: my-release-erpnext-redis
      containers:
      - name: master
        image: "bitnami/redis:5.0.10-debian-10-r105"
        imagePullPolicy: IfNotPresent
        command: ["redis-server"]
        args:
          - "--bind 0.0.0.0"
          - "--maxmemory 292mb"
          - "--maxmemory-policy allkeys-lru"
          - "--appendonly no"
          - "--save \"\""
        resources: {}
        env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
        ports:
        - containerPort: 6379
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: erpnext/templates/deployment-redis-queue.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-redis-queue
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext-redis-queue
      app.kubernetes.io/instance: my-release-redis-queue
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext-redis-queue
        app.kubernetes.io/instance: my-release-redis-queue
    spec:
      serviceAccountName: my-release-erpnext-redis
      containers:
      - name: master
        image: "bitnami/redis:5.0.10-debian-10-r105"
        imagePullPolicy: IfNotPresent
        command: ["redis-server"]
        args: ["--bind 0.0.0.0"]
        resources:
        env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
        ports:
        - containerPort: 6379
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: erpnext/templates/deployment-redis-socketio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-redis-socketio
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext-redis-socketio
      app.kubernetes.io/instance: my-release-redis-socketio
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext-redis-socketio
        app.kubernetes.io/instance: my-release-redis-socketio
    spec:
      serviceAccountName: my-release-erpnext-redis
      containers:
      - name: master
        image: "bitnami/redis:5.0.10-debian-10-r105"
        imagePullPolicy: IfNotPresent
        command: ["redis-server"]
        args: ["--bind 0.0.0.0"]
        resources:
        env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
        ports:
        - containerPort: 6379
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: erpnext/templates/deployment-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-scheduler
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
        - name: erpnext
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-worker:v13.4.1"
          volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          args: ["schedule"]
          livenessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 15
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 15
            periodSeconds: 5
          resources:
            {}
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/deployment-socketio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-socketio
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext-socketio
      app.kubernetes.io/instance: my-release-socketio
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext-socketio
        app.kubernetes.io/instance: my-release-socketio
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
        - name: erpnext
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "frappe/frappe-socketio:v13.4.1"
          volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/deployment-worker-default.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-worker-d
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
        - name: erpnext
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-worker:v13.4.1"
          volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          args: ["worker"]
          env:
            - name: "WORKER_TYPE"
              value: "default"
          livenessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 100
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            {}
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/deployment-worker-long.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-worker-l
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
        - name: erpnext
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-worker:v13.4.1"
          volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          args: ["worker"]
          env:
            - name: "WORKER_TYPE"
              value: "long"
          livenessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 100
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            {}
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/deployment-worker-short.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-erpnext-worker-s
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: erpnext
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erpnext
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
        - name: erpnext
          securityContext:
            capabilities:
              add:
              - CAP_CHOWN
          image: "docker.io/improwised/erpnext-worker:v13.4.1"
          volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
          - name: logs
            mountPath: /home/frappe/frappe-bench/logs
          imagePullPolicy: IfNotPresent
          args: ["worker"]
          env:
            - name: "WORKER_TYPE"
              value: "short"
          livenessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 100
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - "healthcheck.sh"
            initialDelaySeconds: 20
            periodSeconds: 5
          resources:
            {}
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
        - name: logs
          persistentVolumeClaim:
            claimName: my-release-erpnext-logs
            readOnly: false
---
# Source: erpnext/templates/job-backup-sites.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: backup-sites-my-release-erpnext-20240615215853
  labels:
    helm.sh/chart: erpnext-3.3.0
    app.kubernetes.io/name: erpnext
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v13.4.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: my-release-erpnext
      securityContext:
        supplementalGroups:
        - 1000
      containers:
      - name: backup
        image: "docker.io/improwised/erpnext-worker:v13.4.1"
        args: ["backup"]
        imagePullPolicy: IfNotPresent
        env:
          - name: "WITH_FILES"
            value: "1"
        securityContext:
            capabilities:
              add:
              - CAP_CHOWN
        volumeMounts:
          - name: sites-dir
            mountPath: /home/frappe/frappe-bench/sites
      restartPolicy: Never
      volumes:
        - name: sites-dir
          persistentVolumeClaim:
            claimName: my-release-erpnext
            readOnly: false
