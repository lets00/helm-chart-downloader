---
# Source: stardog/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-stardog-password
  namespace: default
  labels:
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
type: Opaque
data:
  password: YWRtaW4=
---
# Source: stardog/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-zookeeper-scripts
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-8.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: stardog/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-stardog-log4j
  namespace: default
  labels:
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
data:
  log4j2.xml: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- Copyright (c) 2010
    - 2019, Stardog Union. <http://www.stardog.com> -->\n<!-- For more information about
    licensing and copyright of this software, please contact -->\n<!-- sales@stardog.com
    or visit http://stardog.com -->\n\n<Configuration status=\"ERROR\" name=\"default-config\">\n\t<Properties>\n\t\t<Property
    name=\"STARDOG_LOG\">stardog</Property><!-- do not edit -->\n\t\t<Property name=\"ZOOKEEPER_LOG\">zookeeper</Property>\n\t\t<Property
    name=\"LOG_DIR\">${sys:stardog.home}</Property>\n\t\t<Property name=\"ARCHIVE\">${LOG_DIR}/.logs_archive</Property><!--
    for use with RollingFile -->\n\t\t<Property name=\"PATTERN\">%-5level %d [%t] %c:%M(%L):
    %m%n</Property>\n\t</Properties>\n\t<Appenders>\n\t\t<Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n\t\t\t<JsonLayout
    compact=\"true\" eventEol=\"true\" includeStacktrace=\"true\" stacktraceAsString=\"true\"
    />\n\t\t</Console>\n\n\t\t<File name=\"stardogAppender\"\n\t\t\t  fileName=\"${LOG_DIR}/${STARDOG_LOG}.log\">\n\t\t\t<PatternLayout
    pattern=\"${PATTERN}\"/>\n\t\t</File>\n\t\t<File name=\"zookeeperAppender\"\n\t\t\t
    \ fileName=\"${LOG_DIR}/${ZOOKEEPER_LOG}.log\">\n\t\t\t<PatternLayout pattern=\"${PATTERN}\"/>\n\t\t</File>
    \n\t</Appenders>\n\t<Loggers>\n\t\t<Root level=\"WARN\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t</Root>\n\t\t<Logger
    name=\"com.complexible.stardog\" level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef
    ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!--
    ignore minor warnings from PDFBox about mis-named Unicode symbols -->\n\t\t<Logger
    name=\"org.apache.pdfbox.encoding.Encoding\" level=\"ERROR\" additivity=\"false\">\n\t\t\t<AppenderRef
    ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!--
    ignore warning from RIO about our replacing their TurtleWriter -->\n\t\t<Logger
    name=\"org.com.complexible.common.openrdf.rio.RDFWriterRegistry\" level=\"ERROR\"
    additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef ref=\"stardogAppender\"/>\n\t\t</Logger>\n\t\t<!--
    redirect all zookeeper records to its own log file -->\n\t\t<Logger name=\"org.apache.zookeeper\"
    level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef ref=\"STDOUT\"/>\n\t\t\t<AppenderRef
    ref=\"zookeeperAppender\"/> \n\t\t</Logger>\n\n\t\t<!-- do not edit -->\n\t\t<Logger
    name=\"com.complexible.stardog.Kernels\" level=\"INFO\" additivity=\"false\">\n\t\t\t<AppenderRef
    ref=\"STDOUT\"/>\n\t\t</Logger>\n\t</Loggers>\n</Configuration>"
---
# Source: stardog/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-stardog-properties
  namespace: default
  labels:
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest

data:
  stardog.properties: |
    logging.audit.enabled=true
    logging.audit.type=text
    pack.enabled=true
    pack.zookeeper.address=my-release-zookeeper-0.my-release-zookeeper-headless.default:2181,my-release-zookeeper-1.my-release-zookeeper-headless.default:2181,my-release-zookeeper-2.my-release-zookeeper-headless.default:2181
    pack.node.join.retry.count=15
    pack.node.join.retry.delay=1m
---
# Source: stardog/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-zookeeper-headless
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-8.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: stardog/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-zookeeper
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-8.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: stardog/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-stardog
  namespace: default
  labels:
    app: my-release-stardog
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
spec:
  ports:
  - port: 5820
    name: server
  type: LoadBalancer
  selector:
    app: my-release-stardog
---
# Source: stardog/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-zookeeper
  namespace: default
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-8.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: zookeeper
  serviceName: my-release-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-8.1.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.7.1-debian-11-r58
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 1
              memory: 2Gi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: my-release-zookeeper-0.my-release-zookeeper-headless.default.svc.cluster.local:2888:3888::1 my-release-zookeeper-1.my-release-zookeeper-headless.default.svc.cluster.local:2888:3888::2 my-release-zookeeper-2.my-release-zookeeper-headless.default.svc.cluster.local:2888:3888::3 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "INFO"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: my-release-zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
        storageClassName: standard
---
# Source: stardog/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-stardog
  namespace: default
  labels:
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
    app.kubernetes.io/component: server
spec:
  selector:
    matchLabels:
      app: my-release-stardog
  serviceName: my-release-stardog
  replicas: 3
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: my-release-stardog
        helm.sh/chart: stardog-2.0.10
        app.kubernetes.io/name: stardog
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: latest
        app.kubernetes.io/component: server
    spec:

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - my-release-stardog
            topologyKey: "kubernetes.io/hostname"

      initContainers:
      - name: wait-for-zk
        image: busybox:stable
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
        
         while :
          do
            echo "Checking for ZK followers"
            ZK_MNTR=$(echo mntr | nc my-release-zookeeper-headless.default 2181)
            ZK_FOLLOWERS=$(echo "${ZK_MNTR}" | grep zk_synced_followers | awk '{print $2}')
            echo "Currently ${ZK_FOLLOWERS} ZK followers"
            if [[ "${ZK_FOLLOWERS}" -gt "1" ]]; then
              echo "ZK has two sync'd followers (with the leader that makes 3)"
              exit 0
            fi
            sleep 1
          done
        

      containers:
      - name: my-release-stardog
        imagePullPolicy: IfNotPresent
        image: stardog/stardog:latest
        ports:
        - containerPort: 5820
          name: server
        volumeMounts:
        - name: my-release-stardog-password
          mountPath: /etc/stardog-password
          readOnly: true
        - name: stardog-license
          mountPath: /etc/stardog-license
          readOnly: true
        - name: data
          mountPath: /var/opt/stardog/
          readOnly: false
        - name: my-release-stardog-properties-vol
          mountPath: /etc/stardog-conf/stardog.properties
          subPath: stardog.properties
        - name: my-release-stardog-log4j-vol
          mountPath: /var/opt/stardog/log4j2.xml
          subPath: log4j2.xml
        env:
        - name: PORT
          value: "5820"
        - name: STARDOG_HOME
          value: "/var/opt/stardog/"
        - name: STARDOG_LICENSE_PATH
          value: "/etc/stardog-license/stardog-license-key.bin"
        - name: STARDOG_PROPERTIES
          value: "/etc/stardog-conf/stardog.properties"
        - name: STARDOG_SERVER_JAVA_ARGS
          value: "-XX:ActiveProcessorCount=2  -Djava.io.tmpdir=/tmp -Xmx2g -Xms2g -XX:MaxDirectMemorySize=1g"
        - name: STARDOG_PERF_JAVA_ARGS
          value: "-XX:SoftRefLRUPolicyMSPerMB=1 -XX:+UseG1GC -XX:+UseCompressedOops"
        - name: STARDOG_TMP_PATH
          value: "/tmp"
        - name: STARDOG_SERVER_START_ARGS
          value: ""
        resources:
          requests:
            cpu: 2
            memory: 4Gi
        command:
        - /bin/bash
        - -c
        - |
          set -ex
                    
          function wait_for_start {
              (
              HOST=${1}
              PORT=${2}
              DELAY=${3}
              # Wait for stardog to be running
              RC=1
              COUNT=0
              set +e
              while [[ ${RC} -ne 0 ]];
              do
                if [[ ${COUNT} -gt ${DELAY} ]]; then
                    return 1;
                fi
                COUNT=$(expr 1 + ${COUNT} )
                sleep 1
                curl -v  http://${HOST}:${PORT}/admin/healthcheck
                RC=$?
              done
          
              return 0
              )
          }
          
          function change_pw {
              (
              set +ex
              HOST=${1}
              PORT=${2}
          
              echo "/opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N xxxxxxxxxxxxxx"
              NEW_PW=$(cat /etc/stardog-password/adminpw)
              /opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N ${NEW_PW}
              if [[ $? -eq 0 ]];
              then
          	    echo "Password successfully changed"
          	    return 0
              else
              	curl --fail -u admin:${NEW_PW} http://${HOST}:${PORT}/admin/status
              	RC=$?
              	if [[ $RC -eq 0 ]];
                then
                  echo "Default password was already changed"
                  return 0
                elif [[ $RC -eq 22 ]]
                then
                  echo "HTTP 4xx error"
                  return $RC
                else
                  echo "Something else went wrong"
                  return $RC
                fi
              fi
              )
          }
          
          function make_temp {
              (
              set +e
              TEMP_PATH=${1}
          
              if [ ! -d "$TEMP_PATH" ]; then
                mkdir -p $TEMP_PATH
                if [ $? -ne 0 ]; then
                  echo "Could not create stardog tmp directory ${TEMP_PATH}" >&2
                  return 1
                fi
              fi
              )
          }
          make_temp ${STARDOG_TMP_PATH}
          /opt/stardog/bin/stardog-admin server start --foreground --port ${PORT} --home ${STARDOG_HOME} ${STARDOG_SERVER_START_ARGS}
        startupProbe:
          httpGet:
            path: /admin/alive
            port: server
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 720
        livenessProbe:
          httpGet:
            path: /admin/alive
            port: server
          periodSeconds: 30
          timeoutSeconds: 15
        readinessProbe:
          httpGet:
            path: /admin/healthcheck
            port: server
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                /opt/stardog/bin/stardog-admin server stop -u admin -p $(cat /etc/stardog-password/adminpw)
      terminationGracePeriodSeconds: 300
      volumes:
      - name: stardog-license
        secret:
          secretName: stardog-license
      - name: my-release-stardog-properties-vol
        configMap:
          name: my-release-stardog-properties
          items:
          - key: stardog.properties
            path: stardog.properties
      - name: my-release-stardog-log4j-vol
        configMap:
          name: my-release-stardog-log4j
          items:
          - key: log4j2.xml
            path: log4j2.xml
      - name: my-release-stardog-password
        secret:
          secretName: my-release-stardog-password
          items:
            - key: password
              path: adminpw
              mode: 444
      nodeSelector:
        {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
# Source: stardog/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-stardog
  namespace: default
  labels:
    helm.sh/chart: stardog-2.0.10
    app.kubernetes.io/name: stardog
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: latest
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: my-release-stardog
      labels:
        helm.sh/chart: stardog-2.0.10
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:

      restartPolicy: Never
      containers:
      - name: post-install-job
        imagePullPolicy: IfNotPresent
        image: stardog/stardog:latest
        volumeMounts:
        - name: my-release-stardog-password
          mountPath: /etc/stardog-password
          readOnly: true
        env:
        - name: PORT
          value: "5820"
        - name: HOST
          value: "my-release-stardog.default"
        - name: DELAY
          value: "300"
        command:
        - /bin/bash
        - -c
        - |
          set -ex
                    
          function wait_for_start {
              (
              HOST=${1}
              PORT=${2}
              DELAY=${3}
              # Wait for stardog to be running
              RC=1
              COUNT=0
              set +e
              while [[ ${RC} -ne 0 ]];
              do
                if [[ ${COUNT} -gt ${DELAY} ]]; then
                    return 1;
                fi
                COUNT=$(expr 1 + ${COUNT} )
                sleep 1
                curl -v  http://${HOST}:${PORT}/admin/healthcheck
                RC=$?
              done
          
              return 0
              )
          }
          
          function change_pw {
              (
              set +ex
              HOST=${1}
              PORT=${2}
          
              echo "/opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N xxxxxxxxxxxxxx"
              NEW_PW=$(cat /etc/stardog-password/adminpw)
              /opt/stardog/bin/stardog-admin --server http://${HOST}:${PORT} user passwd -N ${NEW_PW}
              if [[ $? -eq 0 ]];
              then
          	    echo "Password successfully changed"
          	    return 0
              else
              	curl --fail -u admin:${NEW_PW} http://${HOST}:${PORT}/admin/status
              	RC=$?
              	if [[ $RC -eq 0 ]];
                then
                  echo "Default password was already changed"
                  return 0
                elif [[ $RC -eq 22 ]]
                then
                  echo "HTTP 4xx error"
                  return $RC
                else
                  echo "Something else went wrong"
                  return $RC
                fi
              fi
              )
          }
          
          function make_temp {
              (
              set +e
              TEMP_PATH=${1}
          
              if [ ! -d "$TEMP_PATH" ]; then
                mkdir -p $TEMP_PATH
                if [ $? -ne 0 ]; then
                  echo "Could not create stardog tmp directory ${TEMP_PATH}" >&2
                  return 1
                fi
              fi
              )
          }
          wait_for_start ${HOST} ${PORT} ${DELAY}
          change_pw ${HOST} ${PORT}
      volumes:
      - name: my-release-stardog-password
        secret:
          secretName: my-release-stardog-password
          items:
            - key: password
              path: adminpw
              mode: 444
