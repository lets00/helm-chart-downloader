---
# Source: archive-node/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: "em8zbW9vbmc3bW9vZzRJZXA3ZU5nbzNpZWNhZXNhaEg="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: archive-node/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: archive-node/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: archive-node/templates/archive-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release
spec:
  type: ClusterIP
  # We want all pods to have their addresses published for the sake of the
  # other testnet pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  selector:
    app: my-release
  ports:
  - name: tcp-p2p
    port: 10909
    targetPort: external-port
  - name: tcp-archive
    port: 3086
    targetPort: archive-port
---
# Source: archive-node/templates/archive.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release
  labels:
    app: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release
  template:
    metadata:
      labels:
        app: my-release
        testnet: testnet
        role: archive-node
        syncStatus: INIT
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "10002"
        prometheus.io/path: '/metrics'
    spec:
      initContainers:
      - name: libp2p-perms
        image: "gcr.io/o1labs-192920/mina-daemon:1.3.2beta2-release-2.0.0-0b63498-bullseye-berkeley"
        command:
        - bash
        - -c
        - mina libp2p generate-keypair --privkey-path /root/libp2p-keys/key && /bin/chmod -R 0700 /root/libp2p-keys/
        volumeMounts:
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
        env:
          - name: MINA_LIBP2P_PASS
            value: "naughty blue worm"
      containers:
      - name: mina
        resources:
          limits:
          requests:
            memory: 12.0Gi
            cpu: 6
        image: gcr.io/o1labs-192920/mina-daemon:1.3.2beta2-release-2.0.0-0b63498-bullseye-berkeley
        
        args: [ "daemon",
          "-log-level", Info,
          "-log-json",
          "-peer", "/dns4/seed-one.genesis-redux.o1test.net/tcp/10002/p2p/12D3KooWP7fTKbyiUcYJGajQDpCFo2rDexgTHFJTxCH8jvcL1eAH",
          "-peer", "/dns4/seed-two.genesis-redux.o1test.net/tcp/10002/p2p/12D3KooWL9ywbiXNfMBqnUKHSB1Q1BaHFNUzppu6JLMVn9TTPFSA","-libp2p-keypair", "/root/libp2p-keys/key",
          "-config-directory", "/root/.mina-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-insecure-rest-server",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-archive-address", "$(DAEMON_ARCHIVE_PORT)","-generate-genesis-proof", "true"
        ]
        env:
        - name: DAEMON_REST_PORT
          value: "3085"
        - name: DAEMON_ARCHIVE_PORT
          value: "3086"
        - name: DAEMON_CLIENT_PORT
          value: "8301"
        - name: DAEMON_METRICS_PORT
          value: "10001"
        - name: DAEMON_EXTERNAL_PORT
          value: "10909"
        - name: MINA_CLIENT_TRUSTLIST
          value: "10.0.0.0/8"
        - name: MINA_LIBP2P_PASS
          value: "naughty blue worm"
        ports:
        - name: client-port
          protocol: TCP
          containerPort: 8301
        - name: graphql-port
          protocol: TCP
          containerPort: 3085
        - name: metrics-port
          protocol: TCP
          containerPort: 10001
        - name: external-port
          protocol: TCP
          containerPort: 10909
          hostPort: 10909  

        
        livenessProbe:
          tcpSocket:
            port: external-port  
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 60
        readinessProbe:
          exec:
            command: [
              "/bin/bash",
              "-c",
              "source /healthcheck/utilities.sh && isDaemonSynced && updateSyncStatusLabel my-release "
            ]  
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 60
        imagePullPolicy: Always
        volumeMounts:
        - name: config-dir
          mountPath: /root/.mina-config
        - name: actual-libp2p
          mountPath: /root/libp2p-keys
      # Archive Process
      - name: archive
        image: gcr.io/o1labs-192920/mina-archive:1.3.2beta2-release-2.0.0-0b63498-bullseye
        args: [
          "mina-archive",
          "run",
          "-metrics-port", "10002",
          "-postgres-uri", "postgres://mina:zo3moong7moog4Iep7eNgo3iecaesahH@my-release-postgresql:5432/archive",
          "-server-port", "3086"
        ]
        env:
        imagePullPolicy: Always
        volumeMounts:
        - name: config-dir
          mountPath: "/root/.mina-config/"
        ports:
        - name: archive-port
          protocol: TCP
          containerPort: 3086
        - name: postgres-port
          protocol: TCP
          containerPort: 5432
        - name: metrics-port
          protocol: TCP
          containerPort: 10002        
        livenessProbe:
          tcpSocket:
            port: archive-port  
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 60
        readinessProbe:
          exec:
            command: [
              "/bin/bash",
              "-c",
              "source /healthcheck/utilities.sh && isArchiveSynced --db-host my-release-postgresql --db-port 5432 --db-user mina --db-password zo3moong7moog4Iep7eNgo3iecaesahH"
            ]  
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 60      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "cloud.google.com/gke-spot"
                  operator: In
                  values: ["true"]
      volumes:
      - name: actual-libp2p
        emptyDir: {}
      - name: config-dir
        emptyDir: {}
---
# Source: archive-node/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.1.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "mina"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "archive"
            # Replication
            # Initdb
            - name: POSTGRESQL_INITSCRIPTS_USERNAME
              value: mina
            - name: POSTGRESQL_INITSCRIPTS_PASSWORD
              value: "zo3moong7moog4Iep7eNgo3iecaesahH"
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "mina" -d "dbname=archive" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "mina" -d "dbname=archive" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: archive-node/templates/db-bootstrap.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-db-bootstrap"
spec:
  template:
    spec:
      containers:
      - name: import-schema
        image: postgres:15-alpine
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "my-release-postgresql"
        command: ["bash", "-c"]
        args:
        - 'sleep 30
        && apk add curl
        && cd /tmp
        &&  curl -O https://raw.githubusercontent.com/MinaProtocol/mina/develop/src/app/archive/zkapp_tables.sql &&  curl -O https://raw.githubusercontent.com/MinaProtocol/mina/compatible/src/app/archive/create_schema.sql && 
        psql
        --username mina
        --host my-release-postgresql
        --port 5432
        --dbname archive
        -f /tmp/create_schema.sql
        && rm -f /tmp/*.sql
        && psql
        --username mina
        --host my-release-postgresql
        --port 5432
        --dbname archive
        -c "ALTER DATABASE archive SET DEFAULT_TRANSACTION_ISOLATION TO SERIALIZABLE;"'
      restartPolicy: Never
  backoffLimit: 10
---
# Source: archive-node/templates/dump-archive-cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "my-release-dump-cronjob"
spec:
  concurrencyPolicy: Replace
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - '
            apk add curl;
            apk add python3;
            curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-410.0.0-linux-x86_64.tar.gz;
            tar -xzf google-cloud-cli-410.0.0-linux-x86_64.tar.gz;
            ./google-cloud-sdk/install.sh --quiet;
            echo "installed gsutil";

            DATE="$(date +%F_%H%M)";
            FILENAME="testnet-archive-dump-${DATE}".sql;

            pg_dump --no-owner --create --username mina --host my-release-postgresql --port 5432 --dbname archive > $FILENAME;

            tar -czvf $FILENAME.tar.gz $FILENAME;

            echo "archive database dumped";

            ./google-cloud-sdk/bin/gsutil -o Credentials:gs_service_key_file=/gcloud/keyfile.json cp $FILENAME.tar.gz gs://mina-archive-dumps;

            echo "archive database uploaded to bucket";

            '
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: "my-release-postgresql"
            - name: GCLOUD_KEYFILE
              value: /gcloud/keyfile.json
            image: postgres:15-alpine
            imagePullPolicy: IfNotPresent
            name: "my-release-dump-cronjob"
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /gcloud/
              name: gcloud-keyfile
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - name: gcloud-keyfile
            secret:
              defaultMode: 256
              items:
              - key: keyfile
                path: keyfile.json
              secretName: gcloud-keyfile
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 3
  suspend: false
---
# Source: archive-node/templates/archive.yaml
---
