---
# Source: cloudflared/templates/service-dns.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cloudflared-dns
  labels:
    helm.sh/chart: cloudflared-2.0.4
    app.kubernetes.io/name: cloudflared
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2022.12.1"
    app.kubernetes.io/managed-by: Helm
    service: my-release-cloudflared-dns
spec:
  type: ClusterIP
  ports:
    - name: dns-tcp
      port: 5053
      targetPort: dns-tcp
      protocol: TCP
    - name: dns-udp
      port: 5053
      targetPort: dns-udp
      protocol: UDP
  selector:
    app.kubernetes.io/name: cloudflared
    app.kubernetes.io/instance: my-release
---
# Source: cloudflared/templates/controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cloudflared
  labels:
    helm.sh/chart: cloudflared-2.0.4
    app.kubernetes.io/name: cloudflared
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2022.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cloudflared
      app.kubernetes.io/instance: my-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloudflared
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: default
      containers:
        - name: cloudflared
          image: "ghcr.io/crazy-max/cloudflared:2022.12.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: dns-udp
              containerPort: 5053
              protocol: UDP
            - name: dns-tcp
              containerPort: 5053
              protocol: TCP
            - name: metrics
              containerPort: 49312
              protocol: TCP
          env:
            - name: "TZ"
              value: "UTC"
            - name: "TUNNEL_DNS_UPSTREAM"
              value: "https://1.1.1.1/dns-query,https://1.0.0.1/dns-query"
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
          resources: {}
