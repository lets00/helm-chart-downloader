---
# Source: datacube-explorer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-datacube-explorer
  labels:
    app: my-release
    app.kubernetes.io/name: datacube-explorer
    helm.sh/chart: datacube-explorer-0.5.29
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: my-release
    app.kubernetes.io/name: datacube-explorer
    app.kubernetes.io/instance: my-release
---
# Source: datacube-explorer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-datacube-explorer
  labels:
    app: my-release
    app.kubernetes.io/name: datacube-explorer
    helm.sh/chart: datacube-explorer-0.5.29
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release
      app.kubernetes.io/name: datacube-explorer
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app: my-release
        app.kubernetes.io/name: datacube-explorer
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/settings-configmap.yaml: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      # Turning single-request-reopen option on would fix issue where in two requests from the same port are
      # not handled correctly it will close the socket and open a new one before sending the second request.
      dnsConfig:
        options:
          - name: single-request-reopen
      terminationGracePeriodSeconds: 30
      containers:
        - name: datacube-explorer
          image: "docker.io/opendatacube/explorer:latest"
          imagePullPolicy: Always
          env:
          - name: DB_HOSTNAME
            value: "localhost"
          - name: DB_PORT
            value: "5432"
          - name: DB_DATABASE
            value: "datacube"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: explorer-reader
                key: postgres-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: explorer-reader
                key: postgres-password
          - name: VIRTUAL_HOST
            value: localhost,127.0.0.
          resources:
            limits:
              cpu: 300m
              memory: 1024Mi
          args: [ "gunicorn",  "-b",  "0.0.0.0:8080",  "-w",  "3",  "--threads=2",  "-k",  "gthread",  "-t",  "60",  "--pid",  "gunicorn.pid",  "--worker-tmp-dir",  "/dev/shm",  "--preload",  "--config",  "python:cubedash.gunicorn_config",  "cubedash:app",  "||",  "true", ]
          ports:
            # All http services
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /stac
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /stac
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
          startupProbe:
            failureThreshold: 5
            httpGet:
              path: /stac
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 60
status: {}
