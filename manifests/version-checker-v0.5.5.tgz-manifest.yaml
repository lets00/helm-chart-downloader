---
# Source: version-checker/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: version-checker
    helm.sh/chart: version-checker-v0.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.5.5"
    app.kubernetes.io/managed-by: Helm
  name: version-checker
---
# Source: version-checker/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/name: version-checker
    helm.sh/chart: version-checker-v0.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.5.5"
    app.kubernetes.io/managed-by: Helm
  name: version-checker
rules:
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "get"
  - "list"
  - "watch"
---
# Source: version-checker/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app.kubernetes.io/name: version-checker
    helm.sh/chart: version-checker-v0.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.5.5"
    app.kubernetes.io/managed-by: Helm
  name: version-checker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: version-checker
subjects:
- kind: ServiceAccount
  name: version-checker
  namespace: default
---
# Source: version-checker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: version-checker
  labels:
    app: version-checker
    
    app.kubernetes.io/name: version-checker
    helm.sh/chart: version-checker-v0.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.5.5"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: web
  selector:
    app.kubernetes.io/name: version-checker
    app.kubernetes.io/instance: my-release
---
# Source: version-checker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: version-checker
  labels:
    
    app.kubernetes.io/name: version-checker
    helm.sh/chart: version-checker-v0.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.5.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: version-checker
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: version-checker
        helm.sh/chart: version-checker-v0.5.5
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "v0.5.5"
        app.kubernetes.io/managed-by: Helm
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        enable.version-checker.io/version-checker: "true"
    spec:
      serviceAccountName: version-checker
      containers:
      - name: version-checker
        image: "quay.io/jetstack/version-checker:v0.5.5"
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 8080
        command: ["version-checker"]
        args:
          - "--image-cache-timeout=30m"
          - "--log-level=info"
          - "--metrics-serving-address=0.0.0.0:8080"
          - "--test-all-containers=true"
        resources:
            {}
        livenessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        env:
        # ACR

        # ECR

        # Docker

        # GCR

        # GHCR

        # Quay

        # Selfhosted
        
      volumes:
