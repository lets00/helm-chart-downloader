---
# Source: funkwhale/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
---
# Source: funkwhale/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "ZGtyaU5HNjZxUQ=="
  password: "ZnVua3doYWxl"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: funkwhale/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
type: Opaque
data:
  redis-password: "ZnVua3doYWxl"
---
# Source: funkwhale/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-funkwhale
  labels:
    app.kubernetes.io/name: funkwhale
    helm.sh/chart: funkwhale-2.0.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  CACHE_URL: cmVkaXM6Ly86ZnVua3doYWxlQG15LXJlbGVhc2UtcmVkaXMtbWFzdGVyOjYzNzkvMA==
  DATABASE_URL: cG9zdGdyZXM6Ly9mdW5rd2hhbGU6ZnVua3doYWxlQG15LXJlbGVhc2UtcG9zdGdyZXNxbDo1NDMyL2Z1bmt3aGFsZQ==
  DJANGO_SECRET_KEY: OTlhNWZiYjYtYWM2ZC00ZGNlLTkyM2ItYzkyZjEyYTQ3Nzhi
---
# Source: funkwhale/charts/postgresql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
data:
  pg_hba.conf: |
    local all all trust
    host all all localhost trust
    host all all 0.0.0.0/0 md5
    host all all ::/0 md5
---
# Source: funkwhale/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-init-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
data:
  enable_extensions.sh: |
    #!/bin/sh
  
    echo 'create extension unaccent;' | psql -U postgres $POSTGRESQL_DATABASE
    echo 'create extension citext;' | psql -U postgres $POSTGRESQL_DATABASE
---
# Source: funkwhale/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: funkwhale/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: funkwhale/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: funkwhale/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-funkwhale
  labels:
    app.kubernetes.io/name: funkwhale
    helm.sh/chart: funkwhale-2.0.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  FUNKWHALE_HOSTNAME: chart-example.local
  FUNKWHALE_PROTOCOL: http
  FUNKWHALE_SPA_HTML_ROOT: http://localhost/front/
  REVERSE_PROXY_TYPE: nginx
  MEDIA_ROOT: /srv/funkwhale/data/media
  STATIC_ROOT: /srv/funkwhale/data/static
  MUSIC_DIRECTORY_PATH: /srv/funkwhale/data/music
  MUSIC_DIRECTORY_SERVE_PATH: /srv/funkwhale/data/music
  DJANGO_SETTINGS_MODULE: config.settings.production
  FUNKWHALE_FRONTEND_PATH: /srv/funkwhale/front/dist
  NGINX_MAX_BODY_SIZE: 500M

  DJANGO_ALLOWED_HOSTS: '*'
---
# Source: funkwhale/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: funkwhale/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: funkwhale/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: funkwhale/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: funkwhale/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-funkwhale
  labels:
    app.kubernetes.io/name: funkwhale
    helm.sh/chart: funkwhale-2.0.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: funkwhale
    app.kubernetes.io/instance: my-release
    audio.funkwhale/component: app
---
# Source: funkwhale/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.12
    helm.sh/chart: redis-17.17.1
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.0.12
        helm.sh/chart: redis-17.17.1
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 0672b95d484b02d5a81a804995771b9c387e4591a95dcbe19e022d88e996206b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.12-debian-11-r34
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: funkwhale/templates/deployment-celerybeat.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-funkwhale-beat
  labels:
    app.kubernetes.io/name: funkwhale
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    audio.funkwhale/component: celery-beat
    helm.sh/chart: funkwhale-2.0.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
      app.kubernetes.io/instance: my-release
      audio.funkwhale/component: celery-beat
  template:
    metadata:
      annotations:
        checksum/configmap: 941a14cdcafd86472db0e07798e53fc21906572874b291ff2f4fccf98f804721
        checksum/secret: d25cc4d60abf211737ff922def91722fb0780934b009892a4bcf4fee5f882374
      labels:
        app.kubernetes.io/name: funkwhale
        app.kubernetes.io/instance: my-release
        audio.funkwhale/component: celery-beat
    spec:
      containers:
        - name: celery-beat
          image: "docker.io/funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              celery -A funkwhale_api.taskapp beat -l INFO
          envFrom:
          - configMapRef:
              name: my-release-funkwhale
          - secretRef:
              name: my-release-funkwhale
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 75Mi
---
# Source: funkwhale/templates/deployment-celeryworker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-funkwhale-worker
  labels:
    app.kubernetes.io/name: funkwhale
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    audio.funkwhale/component: celery-worker
    helm.sh/chart: funkwhale-2.0.5
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
      app.kubernetes.io/instance: my-release
      audio.funkwhale/component: celery-worker
  template:
    metadata:
      annotations:
        checksum/configmap: 941a14cdcafd86472db0e07798e53fc21906572874b291ff2f4fccf98f804721
        checksum/secret: 9ca7b1b8e275f1181b4ebe5414dde82a71b605d38cf2d2f11631ce12e492ee63
      labels:
        app.kubernetes.io/name: funkwhale
        app.kubernetes.io/instance: my-release
        audio.funkwhale/component: celery-worker
    spec:
      containers:
        - name: worker
          image: "docker.io/funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              celery -A funkwhale_api.taskapp worker -l INFO
          env:
            - name: C_FORCE_ROOT
              value: "true"
          envFrom:
          - configMapRef:
              name: my-release-funkwhale
          - secretRef:
              name: my-release-funkwhale
          volumeMounts:
            - mountPath: /srv/funkwhale/data
              name: data
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: my-release-funkwhale-front
        - name: data
          emptyDir: {}
---
# Source: funkwhale/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-funkwhale
  labels:
    app.kubernetes.io/name: funkwhale
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    audio.funkwhale/component: app
    helm.sh/chart: funkwhale-2.0.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
      app.kubernetes.io/instance: my-release
      audio.funkwhale/component: app
  template:
    metadata:
      annotations:
        checksum/configmap: 941a14cdcafd86472db0e07798e53fc21906572874b291ff2f4fccf98f804721
        checksum/secret: 443c64e7cc943a8c744b15267440c69eab97e7ae7a687e818f1a44d574171745
      labels:
        app.kubernetes.io/name: funkwhale
        app.kubernetes.io/instance: my-release
        audio.funkwhale/component: app
    spec:
      containers:
        - name: funkwhale
          image: "docker.io/funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          readinessProbe:
            
            httpGet:
              path: /
              port: api
              scheme: HTTP
          livenessProbe:
            
            httpGet:
              path: /
              port: api
              scheme: HTTP
          startupProbe:
            
            tcpSocket:
              port: api
          envFrom:
          - configMapRef:
              name: my-release-funkwhale
          - secretRef:
              name: my-release-funkwhale
          volumeMounts:
            - name: static
              mountPath: /srv/funkwhale/data/static/
            - name: data
              mountPath: /srv/funkwhale/data
          ports:
            - name: api
              containerPort: 5000
              protocol: TCP
          resources:
            {}
        - name: nginx
          image: "docker.io/funkwhale/front:1.4.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: FUNKWHALE_API_HOST
              value: localhost
            - name: FUNKWHALE_API_PORT
              value: '5000'
          envFrom:
          - configMapRef:
              name: my-release-funkwhale
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            
            httpGet:
              path: /
              port: http
              scheme: HTTP
          readinessProbe:
            
            httpGet:
              path: /
              port: http
              scheme: HTTP
          startupProbe:
            
            tcpSocket:
              port: http
          volumeMounts:
            - mountPath: /srv/funkwhale/data
              name: data
            - mountPath: /usr/share/nginx/html/staticfiles
              name: static
              readOnly: true
      volumes:
        - name: static
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: funkwhale/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
      annotations:
        checksum/configuration: b770f049e1358edabf55acf44f796ef517e51953e06ce17ceb6591785c75f3ab
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "funkwhale"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "funkwhale"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "funkwhale" -d "dbname=funkwhale" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "funkwhale" -d "dbname=funkwhale" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - name: postgresql-config
              mountPath: /bitnami/postgresql/conf
      volumes:
        - name: postgresql-config
          configMap:
            name: my-release-postgresql-configuration
        - name: custom-init-scripts
          configMap:
            name: my-release-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: funkwhale/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-funkwhale-test-connection"
  labels:
    app.kubernetes.io/name: funkwhale
    helm.sh/chart: funkwhale-2.0.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-funkwhale:80']
  restartPolicy: Never
