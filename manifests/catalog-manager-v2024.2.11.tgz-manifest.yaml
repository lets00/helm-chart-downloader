---
# Source: catalog-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-catalog-manager
  namespace: default
  labels:
    helm.sh/chart: catalog-manager-v2024.2.11
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: catalog-manager/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-catalog-manager
  labels:
    helm.sh/chart: catalog-manager-v2024.2.11
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - catalog.appscode.com
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - patch
- apiGroups:
  - kubedb.com
  resources:
  - elasticsearches
  - kafkas
  - mariadbs
  - memcacheds
  - mongodbs
  - mysqls
  - perconaxtradbs
  - pgbouncers
  - postgreses
  - proxysqls
  - redises
  - mariadbs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kubedb.com
  resources:
  - mysqls/status
  - elasticsearches/status
  - mongodbs/status
  - postgreses/status
  - mariadbs/status
  verbs:
  - get
  - list
  - watch
  - patch
  - update
- apiGroups:
  - kubevault.com
  resources:
  - vaultservers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - engine.kubevault.com
  resources:
  - elasticsearchroles
  - mariadbroles
  - mongodbroles
  - mysqlroles
  - postgresroles
  - redisroles
  - secretaccessrequests
  - secretengines
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - delete
- apiGroups:
  - engine.kubevault.com
  resources:
  - secretaccessrequests/status
  verbs:
  - get
  - list
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  - secrets
  - configmaps
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - catalog.kubedb.com
  resources:
  - elasticsearchversions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - httproutes
  - referencegrants
  - tcproutes
  - backendtlspolicies
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - delete
- apiGroups:
  - gateway.voyagermesh.com
  resources:
  - mysqlroutes
  - mongodbroutes
  - redisroutes
  - postgresroutes
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - delete
- apiGroups:
  - gateway.envoyproxy.io
  resources:
  - envoyproxies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - delete
- apiGroups:
  - notification.toolkit.fluxcd.io
  - source.toolkit.fluxcd.io
  - helm.toolkit.fluxcd.io
  - image.toolkit.fluxcd.io
  - kustomize.toolkit.fluxcd.io
  resources:
  - '*'
  verbs:
  - create
  - delete
  - deletecollection
  - patch
  - update
  - list
  - watch
---
# Source: catalog-manager/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-catalog-manager
  labels:
    helm.sh/chart: catalog-manager-v2024.2.11
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-catalog-manager
subjects:
- kind: ServiceAccount
  name: my-release-catalog-manager
  namespace: default
---
# Source: catalog-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-catalog-manager
  namespace: default
  labels:
    helm.sh/chart: catalog-manager-v2024.2.11
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
  # Port used to expose admission webhook apiserver
  - name: api
    port: 443
    targetPort: 8443
  selector:
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
---
# Source: catalog-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-catalog-manager
  namespace: default
  labels:
    helm.sh/chart: catalog-manager-v2024.2.11
    app.kubernetes.io/name: catalog-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: catalog-manager
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: catalog-manager
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: my-release-catalog-manager
      securityContext:
        {}
      containers:
        - name: catalog-manager
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            seccompProfile:
              type: RuntimeDefault
          image: ghcr.io/appscode/catalog-manager:v0.0.1
          imagePullPolicy: Always
          args:
            - run
            - --vault-server-name=vault
            - --vault-server-namespace=ace
            - --service-provider-service-account-name=service-provider
            - --service-provider-service-account-namespace=ace
            - --gwclass-name=ace
            - --gw-name=ace
            - --gw-nodeport-range=10000-12767
            - --gw-port-range=30000-32767
            - --frontend-tls-cert-name=service-presets-cert
            - --frontend-tls-cert-namespace=ace
            - --helmrepo-name=
            - --helmrepo-namespace=
            - --keda-proxyservice-name=keda
            - --keda-proxyservice-namespace=keda
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
          resources:
            {}
