---
# Source: mattermost/templates/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-release-mattermost
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  podSelector:
    matchLabels:
      app: mattermost
      release: my-release
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
      app.kubernetes.io/name: mattermost
      app.kubernetes.io/instance: my-release
      ports:
        - protocol: UDP
          port: 8074
        - protocol: TCP
          port: 8074
  egress:
    - to:
        - podSelector:
            matchLabels:
      app.kubernetes.io/name: mattermost
      app.kubernetes.io/instance: my-release
      ports:
        - protocol: UDP
          port: 8074
        - protocol: TCP
          port: 8074
---
# Source: mattermost/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mattermost
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: mattermost/templates/secret-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mattermost-config-json
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.json: 
---
# Source: mattermost/templates/tests/mattermost-config-test.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mattermost-tests
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  run.sh: |-
    #!/usr/bin/env bats
    @test "Testing Mattermost is accessible" {
      url="http://mattermost.default.svc.cluster.local:8065"
      code=$(wget --server-response --spider --timeout 10 --tries 1 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: mattermost/templates/pvc-plugins.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mattermost-plugins
  labels:
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-3.24.0
  annotations:
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
---
# Source: mattermost/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mattermost
  labels:
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: mattermost-3.24.0
  annotations:
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: mattermost/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: my-release-mattermost
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list"]
---
# Source: mattermost/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-mattermost
  namespace: default
subjects:
  - kind: ServiceAccount
    name: my-release-mattermost
    namespace: default
roleRef:
  kind: Role
  name: my-release-mattermost
  apiGroup: rbac.authorization.k8s.io
---
# Source: mattermost/templates/service-monitor-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "mattermost-monitor"
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
  type: ClusterIP
  ports:
    - port: 8067
      targetPort: metrics
      protocol: TCP
      name: "mattermost"
---
# Source: mattermost/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mattermost
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
  type: ClusterIP
  ports:
  - port: 8065
    targetPort: http
    protocol: TCP
    name: mattermost
  - port: 8074
    targetPort: gossip
    protocol: TCP
    name: mattermost-gossip
---
# Source: mattermost/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mattermost
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  minReadySeconds: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mattermost
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 495e858b2df9ef128b1da53b3307b729df3ffb96e8d6c21fe20e32ed53626b60
      labels:
        helm.sh/chart: mattermost-3.24.0
        app.kubernetes.io/name: mattermost
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "9.3.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      initContainers:
      - name: "init-mysql"
        image: "appropriate/curl:latest"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "until curl --max-time 10 http://my-release-mysql:3306; do echo waiting for my-release-mysql; sleep 5; done;"]
        resources: {}
      containers:
      - name: mattermost
        image: "phntom/mattermost-team-edition:9.3.0@sha256:51cf9da4aa2eb788019c00fba6a2e4ba3ebc955ad12ac6b02f9a95c6318b44ad"
        imagePullPolicy: IfNotPresent
        env:
          - name: NAMESPACE
            value: default
          - name: MM_CDN_DOMAIN
            value: cdn-integ.kix.co.il
        ports:
        - name: http
          containerPort: 8065
          protocol: TCP
        - name: metrics
          containerPort: 8067
          protocol: TCP
        - name: gossip
          containerPort: 8074
          protocol: TCP
        livenessProbe:
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          httpGet:
            path: /api/v4/system/ping
            port: http
        readinessProbe:
          initialDelaySeconds: 2
          timeoutSeconds: 2
          periodSeconds: 2
          httpGet:
            path: /api/v4/system/ping
            port: http
        startupProbe:
          initialDelaySeconds: 1
          timeoutSeconds: 1
          periodSeconds: 1
          failureThreshold: 180
          httpGet:
            path: /api/v4/system/ping
            port: http
        volumeMounts:
        - mountPath: /mattermost/config/config.json
          name: config-json
          subPath: config.json
        - mountPath: /mattermost/data
          name: mattermost-data
        - mountPath: /mattermost/plugins
          name: mattermost-plugins
        resources:
          null
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - "mattermost"
                topologyKey: "kubernetes.io/hostname"
      serviceAccountName: my-release-mattermost
      volumes:
      - name: config-json
        secret:
          secretName: my-release-mattermost-config-json
      - name: config-json-rw
        emptyDir:
          medium: Memory
      - name: mattermost-data
      
        persistentVolumeClaim:
          claimName: my-release-mattermost
      
      - name: mattermost-plugins
      
        persistentVolumeClaim:
          
          claimName: my-release-mattermost-plugins
---
# Source: mattermost/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mattermost
  namespace: default
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  endpoints:
    - port: metrics
      interval: 30s
      honorLabels: true
  namespaceSelector:
    matchNames:
      - default
  selector:
    matchLabels:
      app.kubernetes.io/name: mattermost
      app.kubernetes.io/instance: my-release
---
# Source: mattermost/templates/tests/mattermost-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-mattermost-test-dul85"
  labels:
    helm.sh/chart: mattermost-3.24.0
    app.kubernetes.io/name: mattermost
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "9.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: my-release-test
    image: bats/bats:v1.1.0
    command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
    volumeMounts:
    - mountPath: /tests
      name: tests
      readOnly: true
    - mountPath: /tools
      name: tools
  volumes:
  - name: tests
    configMap:
      name: my-release-mattermost-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
