---
# Source: falco/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-falco
  namespace: default
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: falco/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-falco
  namespace: default
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
data:
  falco.yaml: |-
    base_syscalls:
      custom_set: []
      repair: false
    buffered_outputs: false
    config_files:
    - /etc/falco/config.d
    engine:
      ebpf:
        buf_size_preset: 4
        drop_failed_exit: false
        probe: ${HOME}/.falco/falco-bpf.o
      kind: modern_ebpf
      kmod:
        buf_size_preset: 4
        drop_failed_exit: false
      modern_ebpf:
        buf_size_preset: 4
        cpus_for_each_buffer: 2
        drop_failed_exit: false
    falco_libs:
      thread_table_size: 262144
    file_output:
      enabled: false
      filename: ./events.txt
      keep_alive: false
    grpc:
      bind_address: unix:///run/falco/falco.sock
      enabled: false
      threadiness: 0
    grpc_output:
      enabled: false
    http_output:
      ca_bundle: ""
      ca_cert: ""
      ca_path: /etc/falco/certs/
      client_cert: /etc/falco/certs/client/client.crt
      client_key: /etc/falco/certs/client/client.key
      compress_uploads: false
      echo: false
      enabled: false
      insecure: false
      keep_alive: false
      mtls: false
      url: ""
      user_agent: falcosecurity/falco
    json_include_output_property: true
    json_include_tags_property: true
    json_output: false
    libs_logger:
      enabled: false
      severity: debug
    load_plugins: []
    log_level: info
    log_stderr: true
    log_syslog: true
    metrics:
      convert_memory_to_mb: true
      enabled: false
      include_empty_values: false
      interval: 1h
      kernel_event_counters_enabled: true
      libbpf_stats_enabled: true
      output_rule: true
      resource_utilization_enabled: true
      rules_counters_enabled: true
      state_counters_enabled: true
    output_timeout: 2000
    outputs:
      max_burst: 1000
      rate: 0
    outputs_queue:
      capacity: 0
    plugins:
    - init_config: null
      library_path: libk8saudit.so
      name: k8saudit
      open_params: http://:9765/k8s-audit
    - library_path: libcloudtrail.so
      name: cloudtrail
    - init_config: ""
      library_path: libjson.so
      name: json
    priority: debug
    program_output:
      enabled: false
      keep_alive: false
      program: 'jq ''{text: .output}'' | curl -d @- -X POST https://hooks.slack.com/services/XXX'
    rule_matching: first
    rules_file:
    - /etc/falco/falco_rules.yaml
    - /etc/falco/falco_rules.local.yaml
    - /etc/falco/rules.d
    stdout_output:
      enabled: true
    syscall_event_drops:
      actions:
      - log
      - alert
      max_burst: 1
      rate: 0.03333
      simulate_drops: false
      threshold: 0.1
    syscall_event_timeouts:
      max_consecutives: 1000
    syslog_output:
      enabled: true
    time_format_iso_8601: false
    watch_config_files: true
    webserver:
      enabled: true
      k8s_healthz_endpoint: /healthz
      listen_port: 8765
      prometheus_metrics_enabled: false
      ssl_certificate: /etc/falco/falco.pem
      ssl_enabled: false
      threadiness: 0
---
# Source: falco/templates/falcoctl-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-falco-falcoctl
  namespace: default
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
data:
  falcoctl.yaml: |-
    artifact:
      allowedTypes:
      - rulesfile
      - plugin
      follow:
        every: 6h
        falcoversions: http://localhost:8765/versions
        pluginsDir: /plugins
        refs:
        - falco-rules:3
        rulesfilesDir: /rulesfiles
      install:
        pluginsDir: /plugins
        refs:
        - falco-rules:3
        resolveDeps: true
        rulesfilesDir: /rulesfiles
    indexes:
    - name: falcosecurity
      url: https://falcosecurity.github.io/falcoctl/index.yaml
---
# Source: falco/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-falco
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - update
---
# Source: falco/templates/roleBinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-falco
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-falco
    namespace: default
roleRef:
  kind: Role
  name: my-release-falco
  apiGroup: rbac.authorization.k8s.io
---
# Source: falco/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-falco
  namespace: default
  labels:
    helm.sh/chart: falco-4.4.2
    app.kubernetes.io/name: falco
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.38.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: falco
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      name: my-release-falco
      labels:
        app.kubernetes.io/name: falco
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/config: a1c5070483ae67e50544abf2cc7c4971bbd405c731a23b3debd864085696cd7c
        checksum/rules: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/certs: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      serviceAccountName: my-release-falco
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      containers:
        - name: falco
          image: docker.io/falcosecurity/falco-no-driver:0.38.0
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            privileged: true
          args:
            - /usr/bin/falco        
            - --cri
            - /run/containerd/containerd.sock
            - --cri
            - /run/crio/crio.sock
            - -pk
          env:
            - name: HOST_ROOT
              value: /host
            - name: FALCO_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: FALCO_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          tty: false
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 15
            httpGet:
              path: /healthz
              port: 8765
          readinessProbe:
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 15
            httpGet:
              path: /healthz
              port: 8765
          volumeMounts:
            - mountPath: /etc/falco
              name: rulesfiles-install-dir
            - mountPath: /usr/share/falco/plugins
              name: plugins-install-dir
            - mountPath: /root/.falco
              name: root-falco-fs
            - mountPath: /host/proc
              name: proc-fs
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            - mountPath: /host/run/containerd/containerd.sock
              name: containerd-socket
            - mountPath: /host/run/crio/crio.sock
              name: crio-socket
            - mountPath: /etc/falco/falco.yaml
              name: falco-yaml
              subPath: falco.yaml
            
        - name: falcoctl-artifact-follow
          image: docker.io/falcosecurity/falcoctl:0.8.0
          imagePullPolicy: IfNotPresent
          args:
            - artifact
            - follow
            - --log-format=json
          securityContext:
          volumeMounts:
            - mountPath: /plugins
              name: plugins-install-dir
            - mountPath: /rulesfiles
              name: rulesfiles-install-dir
            - mountPath: /etc/falcoctl
              name: falcoctl-config-volume
          env:
      initContainers:
        - name: falco-driver-loader
          image: docker.io/falcosecurity/falco-driver-loader:0.38.0
          imagePullPolicy: IfNotPresent
          args:
            - auto
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /root/.falco
              name: root-falco-fs
            - mountPath: /host/proc
              name: proc-fs
              readOnly: true
            - mountPath: /host/boot
              name: boot-fs
              readOnly: true
            - mountPath: /host/lib/modules
              name: lib-modules
            - mountPath: /host/usr
              name: usr-fs
              readOnly: true
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
          env:
            - name: HOST_ROOT
              value: /host
            - name: FALCOCTL_DRIVER_CONFIG_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
        - name: falcoctl-artifact-install
          image: docker.io/falcosecurity/falcoctl:0.8.0
          imagePullPolicy: IfNotPresent
          args: 
            - artifact
            - install
            - --log-format=json
          securityContext:
          volumeMounts:
            - mountPath: /plugins
              name: plugins-install-dir
            - mountPath: /rulesfiles
              name: rulesfiles-install-dir
            - mountPath: /etc/falcoctl
              name: falcoctl-config-volume
          env:
      volumes:
        - name: plugins-install-dir
          emptyDir: {}
        - name: rulesfiles-install-dir
          emptyDir: {}
        - name: root-falco-fs
          emptyDir: {}  
        - name: boot-fs
          hostPath:
            path: /boot
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: usr-fs
          hostPath:
            path: /usr
        - name: etc-fs
          hostPath:
            path: /etc
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: containerd-socket
          hostPath:
            path: /run/containerd/containerd.sock
        - name: crio-socket
          hostPath:
            path: /run/crio/crio.sock
        - name: proc-fs
          hostPath:
            path: /proc
        - name: falcoctl-config-volume
          configMap: 
            name: my-release-falco-falcoctl
            items:
              - key: falcoctl.yaml
                path: falcoctl.yaml
        - name: falco-yaml
          configMap:
            name: my-release-falco
            items:
            - key: falco.yaml
              path: falco.yaml
        
  updateStrategy:
    type: RollingUpdate
