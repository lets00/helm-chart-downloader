---
# Source: bitpoke/templates/default-priority-classes.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: presslabs-dashboard-database
value: 50000
globalDefault: false
description: "This priority class is used for Presslabs Dashboard MySQL Cluster pods."
---
# Source: bitpoke/templates/default-priority-classes.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: presslabs-dashboard-memcached
value: 10000
globalDefault: false
description: "This priority class is used for Presslabs Dashboard Memcached pods."
---
# Source: bitpoke/templates/apiserver-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-bitpoke-apiserver
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apiserver
---
# Source: bitpoke/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-bitpoke-controller
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
---
# Source: bitpoke/templates/webhook-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: bitpoke-app-webhook
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhook
type: kubernetes.io/tls
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaakNDQWs2Z0F3SUJBZ0lSQU1YdGlwMmxyWkNRbXR2UzM3UHdhRkV3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVFltbDBjRzlyWlMxaGNIQXRkMlZpYUc5dmF6QWVGdzB5TkRBMk1UWXdNRFExTlRsYQpGdzB5TlRBMk1UWXdNRFExTlRsYU1CNHhIREFhQmdOVkJBTVRFMkpwZEhCdmEyVXRZWEJ3TFhkbFltaHZiMnN3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQxYzk1WFZjSlc5d1AvWThxS2pBSU0KbERVZmhBZ0FyUW5uUnM0UTgzZDQrYStjQTFLcjBnai9tMWc0NVJuOUJ5OTdwbHRBWVd5QnVENkNjcnVuSk5PTApCa2M5QnNxcTBiMStTTDNjbDJWWTl4TWVlZjU5M1J6Y2ZFUTZhVjRSRTFuRENjQmJTYUtvSGZITXU0WmM1YmF1Ck44bnFvTkc2Q0d6QjM1eTZHYmRMSXBTckZoODVBS1pZN29IME5qNm0xWXN1bUluUlRVLzNDWmM3Qy9QM0dlcEcKWEZ6YitpZlFSRlBsVG02eElFWlIwSGg4eGNRUkU1L05qelkvVEdEMjYxeWlYWitvMVlxeUlJT3BvTmJFdDJoRwpWWFZMVDhNSThKdURWaDdabGluODhnVnRES01hc1pnTlhhRFNlcWcxZ2NoUW95SVRvM2hveVhIZzF0VGFmUUhMCkFnTUJBQUdqZ1o0d2dac3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNRndHQTFVZEVRUlZNRk9DRTJKcGRIQnZhMlV0WVhCdwpMWGRsWW1odmIydUNHMkpwZEhCdmEyVXRZWEJ3TFhkbFltaHZiMnN1WkdWbVlYVnNkSUlmWW1sMGNHOXJaUzFoCmNIQXRkMlZpYUc5dmF5NWtaV1poZFd4MExuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBNzZUTTAzbWcKSTd4NE5TUWs3WWh3dnZxcWN4MFIyRHl5V2s4QXJBNmp3aG9mQWhWcVJsT3JCaTlNeUpaL3NTd29MZ1gzTkZPegppc3ZjNWI1MVhxekdTczZvMEVDb0IxSXdrYmtpSjIvSVM3Y3NybkpmQ0l5Tit5K2JzSmhqejNaSnZrK3hUNVhMCkxTTC9aMnpyN1lNMmpGbDF0N3VoVkVPR1NEd2pxOS9ySUxycE5RZ0p4UDVpN09Qby95VmMyUHR2OEFWeHd3bXgKbFR5VGlsTDhkYk81YzlhaURjc1FQNzUzSXVJTTlnbnVDcFBoWms0ZnREOTBISmVhU2RLczJIQUVmdUR6bHNTaAp0SzBYZTlKa1VjY0VUZ0F0dDUxQkE5b3VzY3M3ajducjluOWF2bFZFZENEdmxPb2s1QlF5SWhUeXJycXhScll6CmVJSFA4dlFyc3BIb1JnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaakNDQWs2Z0F3SUJBZ0lSQU1YdGlwMmxyWkNRbXR2UzM3UHdhRkV3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVFltbDBjRzlyWlMxaGNIQXRkMlZpYUc5dmF6QWVGdzB5TkRBMk1UWXdNRFExTlRsYQpGdzB5TlRBMk1UWXdNRFExTlRsYU1CNHhIREFhQmdOVkJBTVRFMkpwZEhCdmEyVXRZWEJ3TFhkbFltaHZiMnN3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUQxYzk1WFZjSlc5d1AvWThxS2pBSU0KbERVZmhBZ0FyUW5uUnM0UTgzZDQrYStjQTFLcjBnai9tMWc0NVJuOUJ5OTdwbHRBWVd5QnVENkNjcnVuSk5PTApCa2M5QnNxcTBiMStTTDNjbDJWWTl4TWVlZjU5M1J6Y2ZFUTZhVjRSRTFuRENjQmJTYUtvSGZITXU0WmM1YmF1Ck44bnFvTkc2Q0d6QjM1eTZHYmRMSXBTckZoODVBS1pZN29IME5qNm0xWXN1bUluUlRVLzNDWmM3Qy9QM0dlcEcKWEZ6YitpZlFSRlBsVG02eElFWlIwSGg4eGNRUkU1L05qelkvVEdEMjYxeWlYWitvMVlxeUlJT3BvTmJFdDJoRwpWWFZMVDhNSThKdURWaDdabGluODhnVnRES01hc1pnTlhhRFNlcWcxZ2NoUW95SVRvM2hveVhIZzF0VGFmUUhMCkFnTUJBQUdqZ1o0d2dac3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNRndHQTFVZEVRUlZNRk9DRTJKcGRIQnZhMlV0WVhCdwpMWGRsWW1odmIydUNHMkpwZEhCdmEyVXRZWEJ3TFhkbFltaHZiMnN1WkdWbVlYVnNkSUlmWW1sMGNHOXJaUzFoCmNIQXRkMlZpYUc5dmF5NWtaV1poZFd4MExuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBNzZUTTAzbWcKSTd4NE5TUWs3WWh3dnZxcWN4MFIyRHl5V2s4QXJBNmp3aG9mQWhWcVJsT3JCaTlNeUpaL3NTd29MZ1gzTkZPegppc3ZjNWI1MVhxekdTczZvMEVDb0IxSXdrYmtpSjIvSVM3Y3NybkpmQ0l5Tit5K2JzSmhqejNaSnZrK3hUNVhMCkxTTC9aMnpyN1lNMmpGbDF0N3VoVkVPR1NEd2pxOS9ySUxycE5RZ0p4UDVpN09Qby95VmMyUHR2OEFWeHd3bXgKbFR5VGlsTDhkYk81YzlhaURjc1FQNzUzSXVJTTlnbnVDcFBoWms0ZnREOTBISmVhU2RLczJIQUVmdUR6bHNTaAp0SzBYZTlKa1VjY0VUZ0F0dDUxQkE5b3VzY3M3ajducjluOWF2bFZFZENEdmxPb2s1QlF5SWhUeXJycXhScll6CmVJSFA4dlFyc3BIb1JnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOVhQZVYxWENWdmNELzJQS2lvd0NESlExSDRRSUFLMEo1MGJPRVBOM2VQbXZuQU5TCnE5SUkvNXRZT09VWi9RY3ZlNlpiUUdGc2diZytnbks3cHlUVGl3WkhQUWJLcXRHOWZraTkzSmRsV1BjVEhubisKZmQwYzNIeEVPbWxlRVJOWnd3bkFXMG1pcUIzeHpMdUdYT1cycmpmSjZxRFJ1Z2hzd2QrY3VobTNTeUtVcXhZZgpPUUNtV082QjlEWStwdFdMTHBpSjBVMVA5d21YT3d2ejl4bnFSbHhjMi9vbjBFUlQ1VTV1c1NCR1VkQjRmTVhFCkVST2Z6WTgyUDB4Zzl1dGNvbDJmcU5XS3NpQ0RxYURXeExkb1JsVjFTMC9EQ1BDYmcxWWUyWllwL1BJRmJReWoKR3JHWURWMmcwbnFvTllISVVLTWlFNk40YU1seDROYlUybjBCeXdJREFRQUJBb0lCQUZQc2NqRmFXVUJ5NVNNRgpjOU03VzlnQk5NaTUxQ0tuQjZQVVNkRHg3ZituSDZ3d1ZxdjQvS3FvNnRsSlBFR1BtMlNqMUwrR2tCc3FhL1VlClZac290RXZzc1o3a0c1ZWNielltbVFRN242TnpsMDNzV0YrZ29xV2d0NU5oUTVDREZVWGlwNnFPMnRhd3BtUmkKR2ViWmhFUzlQb1RDeC9MYnZwUHJhU01ZZDl0d0pBTVZzeVhhdldXeTM0RWg0MTE0bWtTcUpFVUttQ1JOcmN0UgprWTRnWjhORUd3cmgrSnM4NGNEckdTdkpKT3VBSnVPRGxkSW1tZnQwSDh2Z09vVGVCQjlZQlFnS2MybDFtQ3NMCjByNWF4SWx4SE1BaHJwd1hxejNySTUrMjE3cVpuTjAyNjZaWHMwRFpxS0pJUVJmb2xLSGxjVEFFYTZoMXVwNzAKdHdRaXpFRUNnWUVBOWtrcjBxUHFlSm9Zb1VrZlJMTE5ZS2ZWemsrNDRlZTNTcU5OQWV6WElqL1VPVzZXYjBVZgo5QzBxWjlZV1hBTXN1RHRFK2ZJaWFiNVNFcHJGUGdBaVlrYWtVWmxmQlVpdk5ic0tJSTVaaVpYMzJKd1J3blJsClhuVFg3ckliNm9lQXEwUS9WVndKUStrbTZoR0NoTEdnM1VyN0xBZis1UUhyMkhDVEpWRDRuL2NDZ1lFQS95SkkKdXpqa2JCS05FU2RmVDRIVlF2WFpCYnFmdEN4Um9xMGp5bmdZckFRejVBS1U4WVBiN21uWnNyRlY4dGhvSWpDLwoxbVRQUVkxTG9sRkVFZjlldzd2VE5oMHRvNTZJT2VpeG0zLzRCWk5VSUtWanEva1pYZVV6VVRUNTE4eWVnZ1Y2CjJzekpIeUFpM1MrN0k1ck13bEtXZUNHRGlqVGJNQmpPVzBLcUg4MENnWUVBOUEyNFJtaTJYY0pkNjkyWkJhdWwKaDBWcHdxTVBrNVRaOWpWeWh4amFhdzhUVDhJOWdvL2VSVXBJZmxNUkh5YnFOcnBNOU40enFkTzJZc2RKODlHUQpRUkM5bmpxOGhYRHNadk1zNnV3RTRDbGpUQndFSVV6VWN0Q1lkZW03YmlIT3FHamQxY2w1U1BtTzNWNXlsdW1xCmZmL2lmRlNFQ3cxblY3amVwNWpnZHlzQ2dZQU93Qit1VzFxeGVOMFpDY3F6NFJEQVgxQmR5VzFrVUUrajlSaWwKb3czaUhCZ1g3YUpJMkZQRjArN1hLdk9LSjhMVmZ6WUlJaW50WTBybEpvZWw5cnEyM0V3WXk5VVFxYUM4b0Z4cwpYaGlyMGRuQ1RXMld5cjhSczZlazRVZzBsc3J2UDN2YjNJMGdOSTV2ZFV2L2dmcW1uWG0vbGtoeG5CNjBDQ3NlCkVadWVYUUtCZ1FEY2xLS3g5d2JJVXloK0NvU01zWkR0MzFBWVV6MDZjOWwrNWUrN1BkemZQZlVWangzVzJrczAKWnAzanFWenA2MG1FWVBJRGo2aDFqYjIyVWhiVUJXNzNsRjNKR1Z5VklUcFlMVHovenh3eWRlcy83R2dSeUpaUApEeU4wU2oxeUZxRGRFcEFlM2x0eENYcnV1YUhkMjVUL0VId3BLdERQUHVNbWdpbDFrUW5qanc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
---
# Source: bitpoke/templates/storage-class-ssd.yaml
allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
    kubernetes.io/cluster-service: "true"
  name: ssd
parameters:
  type: pd-ssd
provisioner: kubernetes.io/gce-pd
reclaimPolicy: Delete
volumeBindingMode: Immediate
---
# Source: bitpoke/templates/controller-clusterrole-kubebuilder.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-bitpoke-controller-kubebuilder
  labels:
    rbac.bitpoke.io/aggregate-to-controller: "true"
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - apiextensions.k8s.io
  resources:
    - customresourcedefinitions
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - app.k8s.io
  resources:
    - applications
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - apps
  resources:
    - deployments
    - deployments/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - apps
  resources:
    - statefulsets
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - autoscaling
  resources:
    - autoscaling/status
    - horizontalpodautoscalers
  verbs:
    - create
    - delete
    - get
    - list
    - update
    - watch
- apiGroups:
    - cert-manager.io
  resources:
    - certificates
  verbs:
    - delete
    - get
    - list
    - watch
- apiGroups:
    - cert-manager.io
  resources:
    - certificates
    - certificates/status
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - configmaps
    - secrets
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - events
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - events
    - limitranges
    - namespaces
    - persistentvolumeclaims
    - resourcequotas
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - events
    - secrets
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - namespaces
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - pods
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - serviceaccounts
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - ""
  resources:
    - services
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - dashboard.presslabs.com
  resources:
    - accountbindings
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - dashboard.presslabs.com
  resources:
    - invites
    - invites/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - dashboard.presslabs.com
  resources:
    - mysqldatabases
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - dashboard.presslabs.com
  resources:
    - mysqlusers
    - mysqlusers/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - dashboard.presslabs.com
  resources:
    - projects
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - iam.cnrm.cloud.google.com
  resources:
    - iampolicies
    - iampolicymembers
    - iamserviceaccounts
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - metrics.k8s.io
  resources:
    - nodes
  verbs:
    - get
    - list
- apiGroups:
    - monitoring.coreos.com
  resources:
    - prometheuses
    - servicemonitors
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqlbackups
    - mysqlbackups/status
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - mysql.presslabs.org
  resources:
    - mysqlclusters
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - networking.k8s.io
  resources:
    - ingresses
  verbs:
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - networking.k8s.io
  resources:
    - ingresses
    - ingresses/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - rbac.authorization.k8s.io
  resources:
    - clusterrolebindings
    - clusterroles
    - rolebindings
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - rbac.authorization.k8s.io
  resources:
    - rolebindings
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - storage.cnrm.cloud.google.com
  resources:
    - storagebucketaccesscontrols
    - storagebuckets
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
- apiGroups:
    - wordpress.presslabs.org
  resources:
    - wordpresses
    - wordpresses/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
---
# Source: bitpoke/templates/controller-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-bitpoke-controller
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
rules: []
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      rbac.bitpoke.io/aggregate-to-controller: "true"
---
# Source: bitpoke/templates/default-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:organization::member
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
- apiGroups:
    - ""
  resources:
    - secrets
  verbs:
    - create
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - projects
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - invites
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - accountbindings
  verbs:
  - get
  - list
  - watch
---
# Source: bitpoke/templates/default-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:organization::owner
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - delete
  - update
  - patch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - projects
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
  - patch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - invites
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - accountbindings
  verbs:
  - get
  - list
  - watch
  - create
  - delete
---
# Source: bitpoke/templates/default-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:project::member
rules:
- apiGroups:
  - "apps"
  resources:
    - statefulsets
  verbs:
    - get
    - update
- apiGroups:
  - ""
  resources:
  - events
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - ""
  resources:
    - secrets
  verbs:
    - create
- apiGroups:
  - ""
  resources:
  - resourcequotas
  verbs:
  - get
  - update
- apiGroups:
  - "wordpress.presslabs.org"
  resources:
  - wordpresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - mysqlusers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "dashboard.presslabs.com"
  resources:
  - mysqldatabases
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "mysql.presslabs.org"
  resources:
  - mysqlclusters
  verbs:
  - get
  - update
  - list
  - watch
- apiGroups:
  - "mysql.presslabs.org"
  resources:
  - mysqlbackups
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "cert-manager.io"
  resources:
  - certificates
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "iam.cnrm.cloud.google.com"
  resources:
  - iamserviceaccounts
  verbs:
  - get
---
# Source: bitpoke/templates/default-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:project::owner
rules:
- apiGroups:
    - ""
  resources:
    - secrets
  verbs:
    - create
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "wordpress.presslabs.org"
  resources:
  - wordpresses
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
  - patch
---
# Source: bitpoke/templates/impersonator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-bitpoke-impersonator
  labels:
    rbac.bitpoke.io/aggregate-to-controller: "true"
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - users
  - groups
  - serviceaccounts
  verbs:
  - impersonate
---
# Source: bitpoke/templates/invite-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:organization::invites
  labels:
    rbac.bitpoke.io/aggregate-to-controller: "true"
rules:
- apiGroups:
  - dashboard.presslabs.com
  resources:
  - invites
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# Source: bitpoke/templates/prometheus-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dashboard.presslabs.com:project::prometheus
  labels:
    rbac.bitpoke.io/aggregate-to-controller: "true"
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Source: bitpoke/templates/apiserver-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-bitpoke-apiserver
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apiserver
subjects:
  - kind: ServiceAccount
    name: my-release-bitpoke-apiserver
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-bitpoke-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: bitpoke/templates/controller-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-bitpoke-controller
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
  - kind: ServiceAccount
    name: my-release-bitpoke-controller
    namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-bitpoke-controller
  apiGroup: rbac.authorization.k8s.io
---
# Source: bitpoke/templates/default-role-bindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dashboard.presslabs.com:dashboard:superadmin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: Group
    name: superadmins@dashboard.presslabs.com
---
# Source: bitpoke/templates/apiserver-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-bitpoke-apiserver
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apiserver
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 9000
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: apiserver
---
# Source: bitpoke/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bitpoke-app-webhook
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhook
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 9443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: controller
---
# Source: bitpoke/templates/apiserver-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-bitpoke-apiserver
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bitpoke
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: apiserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bitpoke
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: apiserver
    spec:
      serviceAccountName: my-release-bitpoke-apiserver
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      containers:
        - name: bitpoke-apiserver
          securityContext:
            {}
          image: "gcr.io/press-labs-public/dashboard:1.8.15"
          imagePullPolicy: IfNotPresent
          args:
            - apiserver
            - --http-addr=:8080
            - --grpc-addr=:9000
            - --base-url=http://localhost:8080
            - --stack.name=stack
            - --stack.namespace=bitpoke-stack
          env:
            - name: DASHBOARD_SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DASHBOARD_SYSTEM_RELEASE_NAME
              value: my-release
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9000
              protocol: TCP
          resources:
            {}
---
# Source: bitpoke/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-bitpoke-controller
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bitpoke
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  template:
    metadata:
      annotations:
        checksum/config: 0e1ebf1c49b3c54a0bda8bfec2bd300650fb4873f5d5b508ca89241140770a71
      labels:
        app.kubernetes.io/name: bitpoke
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: my-release-bitpoke-controller
      securityContext:
        {}
      containers:
        - name: bitpoke-controller
          securityContext:
            {}
          image: "gcr.io/press-labs-public/dashboard:1.8.15"
          imagePullPolicy: IfNotPresent
          args:
            - controller-manager
            - --base-url=http://localhost:8080
            - --webhook-port=9443
            - --webhook-cert-dir=/run/webhook-certs
            - --stack.name=stack
            - --stack.namespace=bitpoke-stack
          env:
            - name: DASHBOARD_SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DASHBOARD_SYSTEM_RELEASE_NAME
              value: my-release
          ports:
            - name: webhook-https
              containerPort: 9443
              protocol: TCP
          volumeMounts:
            - name: webhook-certs
              mountPath: /run/webhook-certs
          resources:
            {}
      volumes:
        - name: webhook-certs
          secret:
            secretName: bitpoke-app-webhook
---
# Source: bitpoke/templates/application.yaml
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: my-release-bitpoke
  labels:
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
spec:
  addOwnerRef: true
  componentKinds:
  - group: v1
    kind: PersistentVolumeClaim
  - group: apps
    kind: Deployment
  - group: apps
    kind: StatefulSet
  - group: batch
    kind: Job
  - group: v1
    kind: Service
  - group: Networking
    kind: Ingress
  - group: v1
    kind: ServiceAccount
  - group: v1
    kind: Secret
  - group: v1
    kind: ConfigMap
  # certificates CRDs are not installed so GCP Marketplace deployer cannot link them to the application and fails
  # miserably
  - group: cert-manager.io
    kind: Certificate
  descriptor:
    description: |
     The Bitpoke App for WordPress provides a versatile dashboard to create, deploy, scale, manage and
     monitor WordPress sites in a Kubernetes cluster. The app is developed as a horizontal scaling
     solution for WordPress agencies, big publishers, site owners, and hosting companies with millions
     of users per second struggling to find solutions that combine the Kubernetes flexibility and the
     security offered by Google Cloud Platform.
    links:
    - description: Bitpoke App
      url: https://www.bitpoke.io/wordpress
    - description: Bitpoke App Docs
      url: https://www.bitpoke.io/docs/app-for-wordpress/
    - description: Bitpoke Stack
      url: https://www.bitpoke.io/stack
    maintainers:
    - name: Bitpoke
      url: https://www.bitpoke.io
    notes: |-
      Create your organization, group sites in projects and launch with a click new sites that scale
      up and down automatically as needed. Give your team access and start working on your very own
      cloud-native hosting platform!

      ## How to

      Following guides provide information on how to manage your Bitpoke App.

      ### Upgrade your Bitpoke App

      In order to upgrade your Bitpoke App, you need to delete the currently installed
      version and install the new version using the same application name and in the same namespace.
      This **WILL NOT DELETE** sites created using the current instance.

      **NOTE**: You should upgrade only one patch version at a time. For example, you can safely upgrade
      from version 1.0 to 1.1, but not from version 1.0 to 1.2. You need to go from 1.0 to 1.1 and then to 1.2.

      ### Manually disable/enable the installer link

      Use the following command to enable the installer link:
      `kubectl label secret dashboard-jwt-install-link -n default dashboard.presslabs.com/enabled=true --overwrite`

      And this one to disable it:
      `kubectl label secret dashboard-jwt-install-link -n default dashboard.presslabs.com/enabled=false --overwrite`
      ```

    type: Bitpoke App
    version: 1.8.15
  info:
  # ingress
  - name: Ingress IP
    type: Reference
    valueFrom:
      serviceRef:
        namespace: bitpoke-stack
        name: stack-nginx-ingress-controller

  - name: Domain Name
    value: http://localhost:8080

  - name: Install Link
    type: Reference
    valueFrom:
      secretKeyRef:
        key: INSTALL_LINK
        name: dashboard-jwt-install-link

  selector:
    matchLabels:
      app.kubernetes.io/name: bitpoke
      app.kubernetes.io/instance: my-release
---
# Source: bitpoke/templates/webhook-pki.yaml
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bitpoke-app-webhook
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: bitpoke-app-webhook
  duration: 8760h # 1y
  issuerRef:
    name: bitpoke-app-webhook
  dnsNames:
  - bitpoke-app-webhook
  - bitpoke-app-webhook.default
  - bitpoke-app-webhook.default.svc
---
# Source: bitpoke/templates/webhook-pki.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: bitpoke-app-webhook
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
spec:
  selfSigned: {}
---
# Source: bitpoke/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: bitpoke-app-webhook
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/inject-ca-from: default/bitpoke-app-webhook
webhooks:
# NOTE: make sure to keep it in sync with config/webhook/manifests.yaml
- clientConfig:
    service:
      name: 'bitpoke-app-webhook'
      namespace: 'default'
      path: /validating-organization-dashboard
  failurePolicy: Fail
  name: validating-organization.presslabs.com
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
    - key: presslabs.com/kind
      operator: In
      values:
        - organization
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - namespaces
  admissionReviewVersions:
  - v1
  - v1beta1
  sideEffects: None
- clientConfig:
    service:
      name: 'bitpoke-app-webhook'
      namespace: 'default'
      path: /validating-project-dashboard
  failurePolicy: Fail
  name: validating-project.presslabs.com
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
    - key: presslabs.com/kind
      operator: In
      values:
        - project
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - namespaces
  admissionReviewVersions:
  - v1
  - v1beta1
  sideEffects: None
- clientConfig:
    service:
      name: 'bitpoke-app-webhook'
      namespace: 'default'
      path: /validating-site-dashboard
  failurePolicy: Fail
  name: validating-site.presslabs.com
  namespaceSelector:
    matchExpressions:
    - key: control-plane
      operator: DoesNotExist
  rules:
  - apiGroups:
    - wordpress.presslabs.org
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - wordpresses
  admissionReviewVersions:
  - v1
  - v1beta1
  sideEffects: None
---
# Source: bitpoke/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-bitpoke-test-connection"
  labels:
    helm.sh/chart: bitpoke-1.8.15
    app.kubernetes.io/name: bitpoke
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.15"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-bitpoke-apiserver:80']
  restartPolicy: Never
