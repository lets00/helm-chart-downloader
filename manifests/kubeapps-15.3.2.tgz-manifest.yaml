---
# Source: kubeapps/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: kubeapps/templates/apprepository/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
spec:
  policyTypes:
    - Ingress
    - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: apprepository
  egress:
    - {}
  ingress:
---
# Source: kubeapps/templates/dashboard/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kubeapps-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: dashboard
spec:
  policyTypes:
    - Ingress
    - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: dashboard
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 8080
---
# Source: kubeapps/templates/frontend/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kubeapps
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: frontend
spec:
  policyTypes:
    - Ingress
    - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: frontend
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 8080
---
# Source: kubeapps/templates/kubeappsapis/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kubeapps-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
spec:
  policyTypes:
    - Ingress
    - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: kubeappsapis
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 50051
---
# Source: kubeapps/charts/postgresql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
---
# Source: kubeapps/templates/apprepository/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: apprepository
---
# Source: kubeapps/templates/dashboard/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kubeapps-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: dashboard
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: dashboard
---
# Source: kubeapps/templates/frontend/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kubeapps
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: frontend
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: frontend
---
# Source: kubeapps/templates/kubeappsapis/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kubeapps-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: kubeappsapis
---
# Source: kubeapps/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
automountServiceAccountToken: false
---
# Source: kubeapps/templates/apprepository/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
automountServiceAccountToken: false
---
# Source: kubeapps/templates/kubeappsapis/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubeapps-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
automountServiceAccountToken: false
---
# Source: kubeapps/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
type: Opaque
data:
  postgres-password: "UUJDY1pOTEZKNA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: kubeapps/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubeapps-internal-dashboard-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: dashboard
data:
  vhost.conf: |-
    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      gzip on;
      gzip_static  on;

      location /custom_style.css {
        root /app/custom-css/;
      }

      location /custom_locale.json {
        root /app/custom-locale/;
      }

      location /custom_components.js {
        root /app/custom-components/;
      }

      location / {
        # Redirects are required to be relative otherwise the internal hostname will be exposed
        absolute_redirect off;

        # Trailing / is required in the path for the React app to be loaded correctly
        # The rewrite rule adds a trailing "/" to any path that does not contain "." neither "/".
        # i.e kubeapps => kubeapps/
        rewrite ^([^.]*[^/])$ $1/ permanent;

        # Support for ingress prefixes maintaining compatibility with the default /
        # 1 - Exactly two fragment URLs for files existing inside of the public/ dir
        # i.e /[prefix]/config.json => /config.json
        rewrite ^/[^/]+/([^/]+)$ /$1 break;

        # 2 - Any static files bundled by webpack referenced by 3 or more URL segments
        # i.e /[prefix]/static/main.js => static/main.js
        rewrite ^/[^/]+/static/(.*) /static/$1 break;

        try_files $uri /index.html;
      }
    }
  custom_style.css: |-
    
  custom_components.js: |-
    
  custom_locale.json: |-
    ""
  config.json: |-
    {
      "kubeappsCluster": "default",
      "kubeappsNamespace": "default",
      "helmGlobalNamespace": "default",
      "carvelGlobalNamespace": "kapp-controller-packaging-global",
      "appVersion": "v2.10.0",
      "authProxyEnabled": false,
      "oauthLoginURI": "/oauth2/start",
      "oauthLogoutURI": "/oauth2/sign_out",
      "authProxySkipLoginPage": false,
      "featureFlags": {"apiOnly":{"enabled":false,"grpc":{"annotations":{"nginx.ingress.kubernetes.io/backend-protocol":"GRPC"}}},"operators":false,"schemaEditor":{"enabled":false}},
      "clusters": ["default"],
      "theme": "",
      "remoteComponentsUrl": "",
      "customAppViews": [],
      "skipAvailablePackageDetails": false,
      "createNamespaceLabels": {}
    }
---
# Source: kubeapps/templates/frontend/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubeapps-frontend-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: frontend
data:
  k8s-api-proxy.conf: |-
    # Deactivate buffering for log streaming
    proxy_buffering off;
    # Hide Www-Authenticate to prevent it triggering a basic auth prompt in
    # the browser with some clusters
    proxy_hide_header Www-Authenticate;

    # Keep the connection open with the API server even if idle (the default is 60 seconds)
    # Setting it to 1 hour which should be enough for our current use case of deploying/upgrading apps
    # If we enable other use-cases in the future we might need to bump this value
    # More info here https://github.com/vmware-tanzu/kubeapps/issues/766
    proxy_read_timeout 1h;
  vhost.conf: |-
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    # Allow websocket connections
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      location /healthz {
        access_log off;
        default_type text/plain;
        return 200 "healthy\n";
      }

      # Only proxy to k8s API endpoints if operators are enabled.

      location ~* /apis {
        rewrite ^ $request_uri; # pass the encoded url downstream as is,
        rewrite /apis/([^?]*) /$1 break;
        rewrite /apis / break;

        proxy_pass http://my-release-kubeapps-internal-kubeappsapis:8080;
      }
      location / {
        # Add the Authorization header if exists
        add_header Authorization $http_authorization;
        proxy_pass http://my-release-kubeapps-internal-dashboard:8080;
      }
    }
---
# Source: kubeapps/templates/kubeappsapis/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubeapps-internal-kubeappsapis-configmap
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
data:
  plugins.conf: |-
    {
      "core": {
        "packages": {
          "v1alpha1": {
            "timeoutSeconds": 300,
            "versionsInSummary": {
              "major": 3,
              "minor": 3,
              "patch": 3
            }
          }
        }
      },
      "flux": {
        "packages": {
          "v1alpha1": {
            "defaultUpgradePolicy": "none",
            "noCrossNamespaceRefs": false
          }
        }
      },
      "helm": {
        "packages": {
          "v1alpha1": {
            "globalPackagingNamespace": ""
          }
        }
      },
      "kappController": {
        "packages": {
          "v1alpha1": {
            "defaultAllowDowngrades": false,
            "defaultPrereleasesVersionSelection": null,
            "defaultUpgradePolicy": "none",
            "globalPackagingNamespace": "kapp-controller-packaging-global"
          }
        }
      },
      "resources": {
        "packages": {
          "v1alpha1": {
            "trustedNamespaces": {
              "headerName": "",
              "headerPattern": ""
            }
          }
        }
      }
    }
---
# Source: kubeapps/templates/shared/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubeapps-clusters-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
data:
  clusters.conf: |-
    [
      {
        "domain": "cluster.local",
        "name": "default"
      }
    ]
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# ClusterRole for managing AppRepository objects in every namespace,
# so that we can update the finalizers on AppRepository objects
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubeapps-default-internal-apprepository-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# The Kubeapps app repository controller can read and watch its own
# AppRepository resources cluster-wide. The read and write cluster-roles can
# also be bound to users in specific namespaces as required.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-read"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-write"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - '*'
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-refresh"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - get
      - update
---
# Source: kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# ClusterRoleBinding for the apprepository controller SA
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubeapps-default-internal-apprepository-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kubeapps-default-internal-apprepository-controller
subjects:
  - kind: ServiceAccount
    name: my-release-kubeapps-internal-apprepository-controller
    namespace: default
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:controller:default:apprepositories-read"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:apprepositories-read"
subjects:
  - kind: ServiceAccount
    name: my-release-kubeapps-internal-apprepository-controller
    namespace: default
---
# Source: kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:default:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:kubeappsapis-ns-discovery"
subjects:
  - kind: ServiceAccount
    name: my-release-kubeapps-internal-kubeappsapis
    namespace: default
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# Role for managing events, jobs and cronjobs in the release namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - create
      - get
      - list
      - update
      - watch
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-repositories-read
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - list
      - get
---
# Source: kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-repositories-write
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-kubeapps-internal-apprepository-controller
subjects:
  - kind: ServiceAccount
    name: my-release-kubeapps-internal-apprepository-controller
    namespace: default
---
# Source: kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "kubeapps:default:global-repos-read"
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:apprepositories-read"
subjects:
  - kind: Group
    name: system:authenticated
---
# Source: kubeapps/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: kubeapps/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: kubeapps/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubeapps-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: dashboard
---
# Source: kubeapps/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubeapps
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: frontend
---
# Source: kubeapps/templates/kubeappsapis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubeapps-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: grpc-http
      protocol: TCP
      name: grpc-http
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: kubeappsapis
---
# Source: kubeapps/templates/apprepository/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubeapps-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: apprepository
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: apprepository
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        app.kubernetes.io/version: 2.10.0
        helm.sh/chart: kubeapps-15.3.2
        app.kubernetes.io/component: apprepository
    spec:      
      serviceAccountName: my-release-kubeapps-internal-apprepository-controller
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: apprepository
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: controller
          image: docker.io/bitnami/kubeapps-apprepository-controller:2.10.0-debian-12-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /apprepository-controller
          args:
            - --user-agent-comment=kubeapps/2.10.0
            - --repo-sync-image=$(REPO_SYNC_IMAGE)
            - --repo-sync-cmd=/asset-syncer
            - --namespace=default
            - --global-repos-namespace=default
            - --database-secret-name=my-release-postgresql
            - --database-secret-key=postgres-password
            - --database-url=my-release-postgresql:5432
            - --database-user=postgres
            - --database-name=assets
            - --repos-per-namespace=true
          env:
            - name: REPO_SYNC_IMAGE
              value: docker.io/bitnami/kubeapps-asset-syncer:2.10.0-debian-12-r5
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: kubeapps/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubeapps-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: dashboard
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      annotations:
        checksum/config: d839fb367ae70ddfbb853ec227eb2bd96ac1a902af0f5a01042912c6229c506c
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        app.kubernetes.io/version: 2.10.0
        helm.sh/chart: kubeapps-15.3.2
        app.kubernetes.io/component: dashboard
    spec:      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: dashboard
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: dashboard
          image: docker.io/bitnami/kubeapps-dashboard:2.10.0-debian-12-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          startupProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /app/config.json
              subPath: config.json
            - mountPath: /app/custom-css
              name: custom-css
            - mountPath: /app/custom-locale
              name: custom-locale
            - mountPath: /app/custom-components
              name: custom-components
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: vhost
          configMap:
            name: my-release-kubeapps-internal-dashboard-config
            items:
              - key: vhost.conf
                path: vhost.conf
        - name: config
          configMap:
            name: my-release-kubeapps-internal-dashboard-config
            items:
              - key: config.json
                path: config.json
        - name: custom-css
          configMap:
            name: my-release-kubeapps-internal-dashboard-config
            items:
              - key: custom_style.css
                path: custom_style.css
        - name: custom-locale
          configMap:
            name: my-release-kubeapps-internal-dashboard-config
            items:
              - key: custom_locale.json
                path: custom_locale.json
        - name: custom-components
          configMap:
            name: my-release-kubeapps-internal-dashboard-config
            items:
              - key: custom_components.js
                path: custom_components.js
---
# Source: kubeapps/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubeapps
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: frontend
  template:
    metadata:
      annotations:
        checksum/config: e3a15e682ab83fab02ea82f5e4d061212bb9a56b8cc637ecaa111f0076add548
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        app.kubernetes.io/version: 1.27.0
        helm.sh/chart: kubeapps-15.3.2
        app.kubernetes.io/component: frontend
    spec:      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: frontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.27.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/logs
              subPath: app-logs-dir
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: vhost
          configMap:
            name: my-release-kubeapps-frontend-config
---
# Source: kubeapps/templates/kubeappsapis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubeapps-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
    app.kubernetes.io/component: kubeappsapis
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: kubeappsapis
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        app.kubernetes.io/version: 2.10.0
        helm.sh/chart: kubeapps-15.3.2
        app.kubernetes.io/component: kubeappsapis
    spec:      
      serviceAccountName: my-release-kubeapps-internal-kubeappsapis
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: kubeappsapis
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      # Increase termination timeout to let remaining operations to finish before ending the pods
      # This is because new releases/upgrades/deletions are synchronous operations
      terminationGracePeriodSeconds: 300
      containers:
        - name: kubeappsapis
          image: docker.io/bitnami/kubeapps-apis:2.10.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /kubeapps-apis
          args:
            - --plugin-dir
            - /plugins/helm-packages
            - --plugin-dir
            - /plugins/resources
            - --clusters-config-path=/config/clusters.conf
            - --plugin-config-path=/config/kubeapps-apis/plugins.conf
            - --global-repos-namespace=default
            - --kube-api-qps=50.0
            - --kube-api-burst=100
          env:
            - name: GOGC
              value: "50" # default is 100. 50 means increasing x2 the frequency of GC
            - name: PORT
              value: "50051"
            # TODO(agamez): pass this configuration using a separated config file
            # These env vars are currently (and temporarily) required by the 'helm' plugin
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ASSET_SYNCER_DB_URL
              value: my-release-postgresql-hl:5432
            - name: ASSET_SYNCER_DB_NAME
              value: "assets"
            - name: ASSET_SYNCER_DB_USERNAME
              value: "postgres"
            - name: ASSET_SYNCER_DB_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: my-release-postgresql
          envFrom:
          ports:
            - name: grpc-http
              containerPort: 50051
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: grpc-http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ["grpc_health_probe", "-addr=:50051"]
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: clusters-config
              mountPath: /config
            - name: ca-certs
              mountPath: /etc/additional-clusters-cafiles
            - name: plugins-config
              mountPath: /config/kubeapps-apis
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: clusters-config
          configMap:
            name: my-release-kubeapps-clusters-config
        - name: ca-certs
          emptyDir: {}
        - name: plugins-config
          configMap:
            name: my-release-kubeapps-internal-kubeappsapis-configmap
---
# Source: kubeapps/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.3.0
    helm.sh/chart: postgresql-15.5.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.3.0
        helm.sh/chart: postgresql-15.5.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.3.0-debian-12-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "assets"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: kubeapps/templates/apprepository/apprepositories.yaml
apiVersion: kubeapps.com/v1alpha1
kind: AppRepository
metadata:
  name: bitnami
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/version: 2.10.0
    helm.sh/chart: kubeapps-15.3.2
spec:
  type: helm
  url: https://charts.bitnami.com/bitnami
  syncJobPodTemplate:
    spec:
      containers:
        -
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
