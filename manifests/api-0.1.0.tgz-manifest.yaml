---
# Source: api/charts/controller/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-controller
  namespace: default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
---
# Source: api/charts/gateway/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-gateway
  namespace: default
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
---
# Source: api/charts/controller/templates/admission-webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-controller-validation-webhook-ca-keypair
  namespace:  default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
type: kubernetes.io/tls
data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lRZkgremtremtuNENBQW1KNHgzVHgzekFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGcmIyNW5MV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOREEyTVRZd01EUXlNemRhRncwegpOREEyTVRRd01EUXlNemRhTUJ3eEdqQVlCZ05WQkFNVEVXdHZibWN0WVdSdGFYTnphVzl1TFdOaE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdJSWh1TjFUZFdrVkNzbWZzd1hSOXFFcDN2a3oKVUlvWEdDYVVVTngvQmZKcEhwd0c0S2lnQjR4d0pmVW5wd1J6N2loakR1cjk3WEgxKzg3ejF1TjhSQnIvQTZ5MQpYMHk3K2dtTkN4NTJWSXFKaVhDaGlGSDlzTks1QVRMdVFnY2hTeTFUVzB2RUZ6eTB4Tkk4TlNlOVRRZTIrUGEwClRTS0E0Zno3OVd1K0hUNFpLYy9rY3dGZ1N0QU1LYUgyUzk4RFM0UDZ0ZzJYLzZ1SjZDQVVtMDlZczRLd05tL2oKQXBUOXdnT0ZxRGI0djJyaWtEWnYyeUplaStIb1ZLWFpaUmkrQ2dVUVE5eWNjd1BKcW52RkoxakxLMUl2cThiegptbXlQRWZkekVQb0lhdmJlWXQ5eklBa1I0dEF6K2RDMEkwa3RTQlRqVDJKNzhMbzhuVXNZSTQ3S1Z3SURBUUFCCm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFUTcrSkkwU09GZmcyeWpsT2lmVGtucwpITldITUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBNkRBLzQ1anEwWVFmZ0RHd3lGUEdIZG5xK2UxandxUHJXCmJRb20vNXQ2cDdWT3NLQ2JBQjhZeVZSeE5ocFdPYS9idW1HOUQ3V2ZmUW5rWE9nOExLVW1QRm14T01LRHBVdksKTU5nc0FvQUdEQVFvSnFlZ0tHRE5SQ1M1L2FTUDlRUHRsVjdaSkE1bWQzMDFuY1lyejI4ckc1cXJONmtPMTFobwp4c3FycVFnUHlFNy9KUkUyd2NmTEhtdG1WZW5DT1k1eGM0OENTSzVBN05qdkJzRWVyWm9EYmxhejNBYTlwMktMCis0aU42VXhtOUloT3VYVndBS2hPMENER2oyeVJ5SU5Sd3pUT2ZMVmJTVWczMkNRWEU5RzFQaTRyL20zZWo2TzYKbEJBa0ZUSWhWZU1GV09UR0NtY0d6bjZnODBtU1p5SWgrb1hEVVpOZksvczRYRGphWWlCTwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0lJaHVOMVRkV2tWQ3NtZnN3WFI5cUVwM3ZrelVJb1hHQ2FVVU54L0JmSnBIcHdHCjRLaWdCNHh3SmZVbnB3Uno3aWhqRHVyOTdYSDErODd6MXVOOFJCci9BNnkxWDB5NytnbU5DeDUyVklxSmlYQ2gKaUZIOXNOSzVBVEx1UWdjaFN5MVRXMHZFRnp5MHhOSThOU2U5VFFlMitQYTBUU0tBNGZ6NzlXdStIVDRaS2Mvawpjd0ZnU3RBTUthSDJTOThEUzRQNnRnMlgvNnVKNkNBVW0wOVlzNEt3Tm0vakFwVDl3Z09GcURiNHYycmlrRFp2CjJ5SmVpK0hvVktYWlpSaStDZ1VRUTl5Y2N3UEpxbnZGSjFqTEsxSXZxOGJ6bW15UEVmZHpFUG9JYXZiZVl0OXoKSUFrUjR0QXorZEMwSTBrdFNCVGpUMko3OExvOG5Vc1lJNDdLVndJREFRQUJBb0lCQUEwWkRZaFJicnMvVWhJdwowNi9QaHBDY09JZ1dObnFWV3FybS9SSmZYamtlWEM2YitRL1NDVWxhTWNzeldlWlFORDhRK21ScWNxcDBKWU5qCmVrMjFucC9Yb21BeW9RaUI1UXhIR0JTWWx2NTdpbzRTWHJzeXNPc1YrMFpzbTY5Y1l0U0ZtZlZOTzJORld4dEYKSHBtVFFacjdHbVRvREM1dldZdUd0ZkhseWNLZGQ3TGN3c2pKakV2RXZrNGlzYmVTOXdESmZpSDJaWjBpeTJDcgp5eGwxZ0lidXpNNGdKNnJqNWg5ODAyYVhZdTJEc0l6cEcvZlpsNGVyTFJvZzVjMytjcGFiTnRBRUU4K3IycFZYCkF6UHgyQTJLVEF0d1o4ckRCOXgrY3U1V3hOanlnd1NlUXdBM1VyRDM2VU1KK1IyWUxZbHNYTi9McGk4UXZmdEYKVlN3TG5Ta0NnWUVBOFNtVlZGZVppa2NDMWdNVGxKa1hQY0wybHNoVE9HdGgrOUdwQ2E4THBFcTEyVVBZVkZXSgpObXlnNHdqQmNocWdtUC9nRkErREFGa2o1Vk9lSXd6c1Y1eURxQU00aG5OWUsyMTk2UlFoRGZydHJlNW1wbFo5CmgyN0ZTb2picEhYVWtLQjlGMEtiL1ZjRldVTkFqZlAzd001QjQvNUZQNmpqKzBvZnUwNERsMzBDZ1lFQXpGbzUKYjFuTEdMV2FyMHY5STBheEhqL0lhaHBkTjlIUFBQQWFuMkF6dnJmejFtQzE0ZnBub3hXYWdPWHFjY0Jlc1k5Uwp6bFdxaXA3QVE1TXpkc3VyL2xZMUk5eVVCVCswTngxKzVBQVl5MHBTbmpzeWgvejdrVGxQZUxEbUFFNkErbVBBCjBzdU5hSlNaYU0rR0Y5dE90OFFRUzlhQ2REZGRLNjRJMVNYZ0dXTUNnWUFSejJoZjJqaFVwZm5ucEVLRjd1aHcKZnoyRzFUU1FMaDRHWXUyQThaU0NoYUg0Y2JKQVNERGgvQlBGc0pmWXZXNnUzZmJHaEg3QVA5VU8wcVlUSUpregp2ek5aN1NMM2l2MHY5OTRjb0lmd2FGKzFRSzRFQ3M4cWVWdklyV0xMT29pQVJkbjNKY3d2WVlYYm1jUGl0K25NCksyOWlUeHorSHBMM3MvbXo4NGNBWVFLQmdRQ3d4MlJrTlhPQ2ZxZS8rYWFVZTdVQkRBQmQrVXltMnpQQjdadTYKUDhqRHRmS1VnN2tVTWtDeFRpRUlYTjBCWm44RWI0NGN2UEw1VS9mUy9XWko0RXQ3akN3UVIrTXMzejBSYU15NgpoSEx1ZWU4YXZ1OHB3T29IYVdLY2I3dW9qRUQ3V293V1RzeVhxZVZFVERJZU5UUFZ1U0MzMm11a0NianA3blhwCm5naE5MUUtCZ1FEUGphZnp0WndFVmtHQ0tMbTlQaDlsd3pHVUZpalowQXJ4UnB4U1IxUFhnVjh3YWhQUTg5aWYKTm5iclNlY1VzdDVOZ1hHK3lkdUNuZTN2dExMek1rYloyem9POVBGQU9yN05SM2k2SlZHWm05cXc4Rm9TdnZaTQp0TElna3VncHJleDJXSFZvSVVoU2FrUzRwZVpTczRoZkdhQUpQektiTmxRQ3ByU0FxZU93a0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: api/charts/controller/templates/admission-webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-controller-validation-webhook-keypair
  namespace:  default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpRENDQW5DZ0F3SUJBZ0lRV2s4VnhIeWY2R2RDUjdZN1RNcFFDVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGcmIyNW5MV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOREEyTVRZd01EUXlNemRhRncwegpOREEyTVRRd01EUXlNemRhTUQ4eFBUQTdCZ05WQkFNVE5HMTVMWEpsYkdWaGMyVXRZMjl1ZEhKdmJHeGxjaTEyCllXeHBaR0YwYVc5dUxYZGxZbWh2YjJzdVpHVm1ZWFZzZEM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQzRGTk9zUERWV2N6YXN1UDU3YVhyTlA2Z0pUczNkTUxXOVV6RXM0Q0tNSlhxUQp3R2dIc2hGcUZXVE1QZ1ZvWUhoVjI4WisvWUM3VVg2OEc1cm94ZmFTTUo5QVEwK3MxeENJT0ozUlB3a0RqYm5PCitlSE54aDd6ZUlRZ3N0WXdBcmtlTU1oTjlmT3RwOG5UTnlsRWk0bUNNZDVMR2h2RXFDQ2hjRzNjTmQzR3dkdEYKVlNpZFNBNDV6U0wweEJzMGZQU2RydE5pZGszM3dNUDE5N1FNekhOUjM5WTBEdUtibHNWRDc0d0xkMERQNCs2QQpYTHBmUENFYmQ0QTBYWSttQXJVK0VPVnhkdStkTXYxaWFxWTZsTWY3Z3BSdG5wcjNmcFZSUnc0cVM0SWo4V0NqCjV4RXIrV21VQmZoanZ6Y0FBbmp5UGRVRFNkRHc4Y3lVZENDV1ZJZXRBZ01CQUFHamdhSXdnWjh3RGdZRFZSMFAKQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQgpBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRVE3K0pJMFNPRmZnMnlqbE9pZlRrbnNITldITUQ4R0ExVWRFUVE0Ck1EYUNORzE1TFhKbGJHVmhjMlV0WTI5dWRISnZiR3hsY2kxMllXeHBaR0YwYVc5dUxYZGxZbWh2YjJzdVpHVm0KWVhWc2RDNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUtyYXRpUkYwZk5Lc3YyWXh1TVBVdURHd2JpMgpyUDJ6RDdJRVB4aXJPd3NCVzQreWVXem1EN3BpTUZlN0NPS3BzUzRSeXV0RFJRSWtXSko2aHJVNUNmSHJBbjNXClNiRnFyS1JRYUFESDVjNFg4eFdOZ3VaWlZWVW1wRll5QlFlUjZ2UXhucWVJVldGU0lxb3pMOWxkdnFmbkFOTXUKbUVETkdDb1VQRGdyZXVPTk1xTFRuNVNHMjJTcDFpR1duU2x1bEFzRzNuZU5vSUNIanB2cDlSNW0yS2ZGK2ZCWgpxUnplNXZCbHpjejUweEFEcGQzSjd2SEhHNFFjWnk5Rnh6UGpkNkl2WWtFWDZoblVIb1ZwalZKblhMRG4xcFhjCllYbWpzdFhudTc2N3lMYlhoYXhoM0NHMHU5SU1jY3hwdGt5NGxnNWNhNXZEbUhrOURjc3MyWHhqNkFBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdUJUVHJEdzFWbk0yckxqK2UybDZ6VCtvQ1U3TjNUQzF2Vk14TE9BaWpDVjZrTUJvCkI3SVJhaFZrekQ0RmFHQjRWZHZHZnYyQXUxRit2QnVhNk1YMmtqQ2ZRRU5Qck5jUWlEaWQwVDhKQTQyNXp2bmgKemNZZTgzaUVJTExXTUFLNUhqRElUZlh6cmFmSjB6Y3BSSXVKZ2pIZVN4b2J4S2dnb1hCdDNEWGR4c0hiUlZVbwpuVWdPT2MwaTlNUWJOSHowbmE3VFluWk45OEREOWZlMERNeHpVZC9XTkE3aW01YkZRKytNQzNkQXorUHVnRnk2Clh6d2hHM2VBTkYyUHBnSzFQaERsY1hidm5UTDlZbXFtT3BUSCs0S1ViWjZhOTM2VlVVY09La3VDSS9GZ28rY1IKSy9scGxBWDRZNzgzQUFKNDhqM1ZBMG5ROFBITWxIUWdsbFNIclFJREFRQUJBb0lCQVFDa3NIVmtEWVhHcjFORwpHa2dMRDZaL1JLbElrb2xaai8rNHYxb3FoT2hEckRCSW11czNuMWMzS3FiQWwraHNwb3BpZmpyTFdHKzRwc09VCjlibVU4YStVd1ExcENBK2JXZG4vbFcrVVNpbjlWT25jdy9FQ0VYT1ZiY2dBSFIvRldscFdLVnk3YXdVMDR2Mk4KQ3pmUGpHdGM0Tks1TEVXVm5ybDYxY1JrRklrekRLeHdBMkZ0WTdxM0pac3VQM1VCR0ZqMDVIRnVmOTVVTlB5VQp1bm45U2Z0MC9tTDFHSlF2b3dMZW9MbEtCQWFzdlJSWGJtVFQ5ZFdUYjRlOVFjaFNuMjEyV3dyOU5mUmpBMWZSCmxsSktTelFiMEdwaHFSMDZDTWowVy9WSFpiOXhlaVpRNGdXbU1KNGFuL3BVVUlpb0k0K3FwUTRSZUkzMUh4KzIKai9nMGZ2YTlBb0dCQVBCK2NPdkJMRlJkb3dHb29vYzBjOVE0L01Qa1RtNnpkc095YnNub3Fad0hMb2ZHZ1I1MgpoS212NmdlQnhRc1FOZ1d2czZ5RTVaOTArY0szQ084QzEydCs0OTdINGpaYmpIbk96eFkyMHEyelV3Q0VaclEyCm5WZ3pkN2VPVDg1TzZ5SHpvNWJidTdOR2hkSmtMMWh6bWgvWStvRk9oRUhTUjZxYkRqejdacFZ6QW9HQkFNUHoKUDN2YkFlSGlqaUY1QU9zVWx3Um1wVDEzOFFEcWtWM1YrWmZHWUxCQkV4M3NJRG9wSW43NnVDZUlEWmNkWDVveQpNMzJBbCtWVUJNYUZDZldtRlJnMzNOR0l1dmZzZjY2bk81emRyTEI1Q21xc0pyNHcrd0RlRDIwV3lpRkcrQ2tkCmd2K2JRU3hXQVdaSG03azVSNWswc2xtNWlXMDdNQy9sRkZGRm5DWmZBb0dCQU5MNDJPNjRZNzhPOWJTNnp2bDEKRmplU1Zvc3llV3U3bS9CSlU4OWtmNFlVOXNpOVp2L21VTExiVTU2S1JPVlRyMUNGdGtVZHdLS0Y1NlRkRk1VMwo1T3EwUWdwcHB4U3djeWRZT1dydlpScGtPZWcyUGpMUnhtNWRtQ1E2ZitBb2N6VXhtc3o0cmt5ekRTcG9JUENqCldRMmZOd0xBY2wyYnJxc0hveEgwS1NYcEFvR0FLbTFLdTVpSjZjelNGWEZMdjVxdnNDWkJkUE81WFFkcy9qSk0KWG81M2RQSkNIMkoyLytEVU5VWTRCV2N4K2h4RURQRDlzUmpjeXF6TWMrZHVacC9WUlc4akFzTm1LRFF1MlRRZwpkakNSS1l5cnNya2ZrbUtzbGwxK1haSm5wWmptTnBETFFtanRUWm81cDFtdDRBY0U5Nmt2VExvZGhXY2hZZDFwCjdzYnhybVVDZ1lCVzhuenVNSmhtNEtrMnBLNDBNelJSK0dnMDUxT1ZjeTFSVlJCY3JFNlFVM0thQzRZVjYvamgKR2tGUjNsUmRWMk1aVXpPNCtjTWY4OFdiSUQza3ZTSFNRRkZQTHNaR2IzUng2d0lzV1E2MmhZT3VvNkJRNmpuVQpESGNLK1RBRUxaK1o2RlNMdUtMYVlNYThIc2tmaEpqY3JMWlpDWE5hOXNlcXU3eWt4WFVHNmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: api/templates/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: origin-ca-key
  namespace: default
type: Opaque
data:
  key: ""
---
# Source: api/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-plugin-custom-auth
  namespace: default
data:
  access.lua: |-
    local ngx = require "ngx"
    local cjson = require "cjson"
    local http = require "resty.http"
    
    return function(self, conf)
        local method = kong.request.get_method()
        if method == "OPTIONS" then
            return  -- skip verify preflight requests
        end
    
        local path = kong.request.get_path()
        local public_paths = conf.public_paths
        for i, pub_path in ipairs(public_paths) do
            if path:match("^/?" .. pub_path) then
                return  -- skip verify public paths
            end
        end
    
        local client = http.new()
        local auth = conf.auth
    
        local res, err = client:request_uri(auth.endpoint, {
            method = auth.method,
            ssl_verify = auth.ssl_verify,
            headers = {
                ["Content-Type"] = "application/json",
                ["Authorization"] = kong.request.get_header(auth.header),
            },
            body = '{}',
        })
    
        if not res then
            kong.log.err("Invalid Authentication Response: ", err)
            return kong.response.exit(500, { ok = false, error = "server_error" })
        end
    
        if res.status ~= 200 then
            return kong.response.exit(403, { ok = false, error = "access_denied" })
        end
    
        local json = cjson.encode(res.body)
        local auth_data = cjson.decode(json)
        kong.service.request.set_header("X-Auth-Data", ngx.encode_base64(auth_data))
    end
    
  handler.lua: |-
    local access = require "kong.plugins.custom-auth.access"
    
    local AuthHandler = {
        VERSION = "1.0.0",
        PRIORITY = 1000,
    }
    
    AuthHandler.access = access
    
    return AuthHandler
    
  schema.lua: |-
    local typedefs = require "kong.db.schema.typedefs"
    
    return {
        name = "custom-auth",
        fields = {
            { protocols = typedefs.protocols_http },
            { consumer = typedefs.no_consumer },
            { config = {
                type = "record",
                fields = {
                    { auth = {
                        type = "record",
                        fields = {
                            { endpoint = typedefs.url({ required = true }) },
                            { method = { type = "string", required = true, default = "POST" } },
                            { ssl_verify = { type = "boolean", required = false, default = false } },
                            { header = typedefs.header_name { required = true, default = "Authorization" } },
                        },
                    } },
                    { public_paths = { type = "array", elements = { type = "string" } } },
                },
            } },
        },
    }
---
# Source: api/charts/controller/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
  name: my-release-controller
rules:

- apiGroups:
  - configuration.konghq.com
  resources:
  - kongupstreampolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongupstreampolicies/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumergroups
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumergroups/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - ingressclassparameterses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongconsumers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - tcpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - udpingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - konglicenses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - konglicenses/status
  verbs:
  - get
  - patch
  - update

- apiGroups:
  - configuration.konghq.com
  resources:
  - kongvaults
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongvaults/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - configuration.konghq.com
  resources:
  - kongclusterplugins/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
---
# Source: api/charts/controller/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-controller
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-controller
subjects:
  - kind: ServiceAccount
    name: my-release-controller
    namespace: default
---
# Source: api/charts/controller/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-controller
  namespace: default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<kong-ingress-controller-leader-nginx>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "kong-ingress-controller-leader-kong-kong"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  # Begin KIC 2.x leader permissions
  - apiGroups:
      - ""
      - coordination.k8s.io
    resources:
      - configmaps
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
---
# Source: api/charts/controller/templates/controller-rbac-resources.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-controller
  namespace: default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-controller
subjects:
  - kind: ServiceAccount
    name: my-release-controller
    namespace: default
---
# Source: api/charts/controller/templates/admission-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-controller-validation-webhook
  namespace: default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
spec:
  ports:
  - name: webhook
    port: 443
    protocol: TCP
    targetPort: webhook
  selector:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
    app.kubernetes.io/component: app
---
# Source: api/charts/gateway/templates/service-kong-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gateway-admin
  namespace: default
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
spec:
  type: ClusterIP
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: kong-admin-tls
    port: 8444
    targetPort: 8444
    protocol: TCP
  clusterIP: None
  selector:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "my-release"
---
# Source: api/charts/gateway/templates/service-kong-manager.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gateway-manager
  namespace: default
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
spec:
  type: NodePort
  ports:
  - name: kong-manager
    port: 8002
    targetPort: 8002
    protocol: TCP
  - name: kong-manager-tls
    port: 8445
    targetPort: 8445
    protocol: TCP
  selector:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "my-release"
---
# Source: api/charts/gateway/templates/service-kong-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gateway-proxy
  namespace: default
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
    enable-metrics: "true"
spec:
  type: LoadBalancer
  ports:
  - name: kong-proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-tls
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: "my-release"
---
# Source: api/charts/controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-controller
  namespace:  default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: controller
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "my-release"

  template:
    metadata:
      annotations:
        kuma.io/service-account-token-volume: my-release-controller-token
        kuma.io/gateway: "enabled"
        traffic.kuma.io/exclude-outbound-ports: "8444"
        traffic.sidecar.istio.io/excludeOutboundPorts: "8444"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app.kubernetes.io/name: controller
        helm.sh/chart: controller-2.37.1
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "3.6"
        app.kubernetes.io/component: app
        app: my-release-controller
        version: "3.6"
    spec:
      serviceAccountName: my-release-controller
      automountServiceAccountToken: false
      
      containers:
      - name: ingress-controller
        securityContext:
      
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        args:
        
        ports:
        - name: webhook
          containerPort: 8080
          protocol: TCP
        - name: cmetrics
          containerPort: 10255
          protocol: TCP
        - name: cstatus
          containerPort: 10254
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace  
        
        
        
        
        
        
        - name: CONTROLLER_ADMISSION_WEBHOOK_LISTEN
          value: "0.0.0.0:8080"
        - name: CONTROLLER_ELECTION_ID
          value: "kong-ingress-controller-leader-kong"
        - name: CONTROLLER_INGRESS_CLASS
          value: "kong"
        - name: CONTROLLER_KONG_ADMIN_SVC
          value: "default/my-release-gateway-admin"
        - name: CONTROLLER_KONG_ADMIN_TLS_SKIP_VERIFY
          value: "true"
        - name: CONTROLLER_PUBLISH_SERVICE
          value: "default/my-release-controller-proxy"
        
        image: kong/kubernetes-ingress-controller:3.1
        imagePullPolicy: IfNotPresent
      
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
        volumeMounts:
        - name: webhook-cert
          mountPath: /admission-webhook
          readOnly: true
        - name: my-release-controller-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
        
        
       
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: my-release-controller-prefix-dir
          emptyDir:
            sizeLimit: 256Mi
        - name: my-release-controller-tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: my-release-controller-token
          projected:
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: webhook-cert
          secret:
            secretName: my-release-controller-validation-webhook-keypair
---
# Source: api/charts/gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gateway
  namespace:  default
  labels:
    app.kubernetes.io/name: gateway
    helm.sh/chart: gateway-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: "my-release"

  template:
    metadata:
      annotations:
        kuma.io/service-account-token-volume: my-release-gateway-token
        kuma.io/gateway: "enabled"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app.kubernetes.io/name: gateway
        helm.sh/chart: gateway-2.37.1
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/version: "3.6"
        app.kubernetes.io/component: app
        app: my-release-gateway
        version: "3.6"
    spec:
      serviceAccountName: my-release-gateway
      automountServiceAccountToken: false
      
      initContainers:
      - name: clear-stale-pid
        image: kong:3.6
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        resources:
          {}
        command:
        - "rm"
        - "-vrf"
        - "$KONG_PREFIX/pids"
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled,custom-auth"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "traditional"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        
        volumeMounts:
        - name: my-release-gateway-prefix-dir
          mountPath: /kong_prefix/
        - name: my-release-gateway-tmp
          mountPath: /tmp
        - name:  kong-plugin-custom-auth
          mountPath: /opt/kong/plugins/custom-auth
          readOnly: true
      containers:
      - name: "proxy"
        image: kong:3.6
        imagePullPolicy: IfNotPresent
        securityContext:
        
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        env:
         
        
        
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_GUI_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_GUI_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, [::]:8001, 0.0.0.0:8444 http2 ssl, [::]:8444 http2 ssl"
        - name: KONG_CLUSTER_LISTEN
          value: "off"
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_LUA_PACKAGE_PATH
          value: "/opt/?.lua;/opt/?/init.lua;;"
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PLUGINS
          value: "bundled,custom-auth"
        - name: KONG_PORTAL_API_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PORTAL_API_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PORT_MAPS
          value: "80:8000, 443:8443"
        - name: KONG_PREFIX
          value: "/kong_prefix/"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, [::]:8000, 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl"
        - name: KONG_PROXY_STREAM_ACCESS_LOG
          value: "/dev/stdout basic"
        - name: KONG_PROXY_STREAM_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ROLE
          value: "traditional"
        - name: KONG_ROUTER_FLAVOR
          value: "traditional"
        - name: KONG_STATUS_ACCESS_LOG
          value: "off"
        - name: KONG_STATUS_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_STATUS_LISTEN
          value: "0.0.0.0:8100, [::]:8100"
        - name: KONG_STREAM_LISTEN
          value: "off"
        - name: KONG_NGINX_DAEMON
          value: "off"
        
        lifecycle:
          preStop:
            exec:
              command:
              - kong
              - quit
              - --wait=15
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-tls
          containerPort: 8444
          protocol: TCP
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-tls
          containerPort: 8443
          protocol: TCP
        - name: status
          containerPort: 8100
          protocol: TCP
        volumeMounts:
          - name: my-release-gateway-prefix-dir
            mountPath: /kong_prefix/
          - name: my-release-gateway-tmp
            mountPath: /tmp
          - name:  kong-plugin-custom-auth
            mountPath: /opt/kong/plugins/custom-auth
            readOnly: true
          
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status/ready
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: status
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {} 
      securityContext:
        {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: my-release-gateway-prefix-dir
          emptyDir:
            sizeLimit: 256Mi
        - name: my-release-gateway-tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: my-release-gateway-token
          projected:
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - name: kong-plugin-custom-auth
          configMap:
            name: kong-plugin-custom-auth
---
# Source: api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api
  namespace: default
  labels:
    helm.sh/chart: api-0.1.0
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    konghq.com/strip-path: "false"
spec:
  ingressClassName: kong
  tls:
    - hosts:
        - 
      secretName: origin-ca-secret
  rules:
    - http:
        paths:
          - pathType: ImplementationSpecific
            path: /healthcheck
            backend:
              service:
                name: admin
                port:
                  number: 8010
---
# Source: api/templates/cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: origin-ca-certificate
  namespace: default
spec:
  dnsNames:
    - 
  secretName: origin-ca-secret
  duration: 168h
  renewBefore: 24h
  issuerRef:
    group: cert-manager.k8s.cloudflare.com
    name: origin-ca-issuer
    kind: OriginIssuer
---
# Source: api/templates/plugins.yaml
apiVersion: configuration.konghq.com/v1
kind: KongClusterPlugin
metadata:
  name: default-custom-auth
  annotations:
    kubernetes.io/ingress.class: kong
  labels:
    global: "true"
config:
  auth:
    endpoint: http://:/auth/verify
    header: Authorization
    method: POST
  public_paths:
    - public
    - oauth2
    - auth
    - ws
plugin: custom-auth
---
# Source: api/templates/plugins.yaml
apiVersion: configuration.konghq.com/v1
kind: KongClusterPlugin
metadata:
  name: default-request-transformer
  annotations:
    kubernetes.io/ingress.class: kong
  labels:
    global: "true"
config:
  remove:
    headers:
      - x-internal
plugin: request-transformer
---
# Source: api/templates/plugins.yaml
apiVersion: configuration.konghq.com/v1
kind: KongClusterPlugin
metadata:
  name: default-cors
  annotations:
    kubernetes.io/ingress.class: kong
  labels:
    global: "true"
config:
  origins:
    - "http://localhost:3000"
    - "https://localhost:3000"
  headers:
    - Accept
    - Accept-Encoding
    - Accept-Language
    - Accept-Version
    - Authorization
    - Cache-Control
    - Connection
    - Content-Length
    - Content-MD5
    - Content-Type
    - Host
    - Origin
    - Pragma
    - Referer
    - User-Agent
    - X-Requested-With
  preflight_continue: true
  credentials: true
  max_age: 3600
plugin: cors
---
# Source: api/templates/cert.yaml
apiVersion: cert-manager.k8s.cloudflare.com/v1
kind: OriginIssuer
metadata:
  name: origin-ca-issuer
  namespace: default
spec:
  requestType: OriginECC
  auth:
    serviceKeyRef:
      name: origin-ca-key
      key: key
---
# Source: api/charts/controller/templates/admission-webhook.yaml
kind: ValidatingWebhookConfiguration
apiVersion: admissionregistration.k8s.io/v1
metadata:
  name: my-release-controller-validations
  namespace: default
  labels:
    app.kubernetes.io/name: controller
    helm.sh/chart: controller-2.37.1
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "3.6"
webhooks:
- name: validations.kong.konghq.com
  objectSelector:
    matchExpressions:
    - key: owner
      operator: NotIn
      values:
      - helm
  failurePolicy: Ignore
  sideEffects: None
  admissionReviewVersions: ["v1beta1"]
  rules:
  - apiGroups:
    - configuration.konghq.com
    apiVersions:
    - '*'
    operations:
    - CREATE
    - UPDATE
    resources:
    - kongconsumers
    - kongplugins
    - kongclusterplugins
    - kongingresses
  - apiGroups:
    - ''
    apiVersions:
    - 'v1'
    operations:
    - CREATE
    - UPDATE
    resources:
    - secrets
    - services
  - apiGroups:
    - networking.k8s.io
    apiVersions:
      - 'v1'
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingresses
  - apiGroups:
    - gateway.networking.k8s.io
    apiVersions:
    - 'v1alpha2'
    - 'v1beta1'
    - 'v1'
    operations:
    - CREATE
    - UPDATE
    resources:
    - gateways
    - httproutes
  clientConfig:
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJekNDQWd1Z0F3SUJBZ0lRZkgremtremtuNENBQW1KNHgzVHgzekFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGcmIyNW5MV0ZrYldsemMybHZiaTFqWVRBZUZ3MHlOREEyTVRZd01EUXlNemRhRncwegpOREEyTVRRd01EUXlNemRhTUJ3eEdqQVlCZ05WQkFNVEVXdHZibWN0WVdSdGFYTnphVzl1TFdOaE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdJSWh1TjFUZFdrVkNzbWZzd1hSOXFFcDN2a3oKVUlvWEdDYVVVTngvQmZKcEhwd0c0S2lnQjR4d0pmVW5wd1J6N2loakR1cjk3WEgxKzg3ejF1TjhSQnIvQTZ5MQpYMHk3K2dtTkN4NTJWSXFKaVhDaGlGSDlzTks1QVRMdVFnY2hTeTFUVzB2RUZ6eTB4Tkk4TlNlOVRRZTIrUGEwClRTS0E0Zno3OVd1K0hUNFpLYy9rY3dGZ1N0QU1LYUgyUzk4RFM0UDZ0ZzJYLzZ1SjZDQVVtMDlZczRLd05tL2oKQXBUOXdnT0ZxRGI0djJyaWtEWnYyeUplaStIb1ZLWFpaUmkrQ2dVUVE5eWNjd1BKcW52RkoxakxLMUl2cThiegptbXlQRWZkekVQb0lhdmJlWXQ5eklBa1I0dEF6K2RDMEkwa3RTQlRqVDJKNzhMbzhuVXNZSTQ3S1Z3SURBUUFCCm8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUYKQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFUTcrSkkwU09GZmcyeWpsT2lmVGtucwpITldITUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBNkRBLzQ1anEwWVFmZ0RHd3lGUEdIZG5xK2UxandxUHJXCmJRb20vNXQ2cDdWT3NLQ2JBQjhZeVZSeE5ocFdPYS9idW1HOUQ3V2ZmUW5rWE9nOExLVW1QRm14T01LRHBVdksKTU5nc0FvQUdEQVFvSnFlZ0tHRE5SQ1M1L2FTUDlRUHRsVjdaSkE1bWQzMDFuY1lyejI4ckc1cXJONmtPMTFobwp4c3FycVFnUHlFNy9KUkUyd2NmTEhtdG1WZW5DT1k1eGM0OENTSzVBN05qdkJzRWVyWm9EYmxhejNBYTlwMktMCis0aU42VXhtOUloT3VYVndBS2hPMENER2oyeVJ5SU5Sd3pUT2ZMVmJTVWczMkNRWEU5RzFQaTRyL20zZWo2TzYKbEJBa0ZUSWhWZU1GV09UR0NtY0d6bjZnODBtU1p5SWgrb1hEVVpOZksvczRYRGphWWlCTwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    service:
      name: my-release-controller-validation-webhook
      namespace: default
