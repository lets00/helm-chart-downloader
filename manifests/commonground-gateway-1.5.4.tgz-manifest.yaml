---
# Source: commonground-gateway/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: commonground-gateway/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: my-release-rabbitmq
---
# Source: commonground-gateway/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: commonground-gateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-commonground-gateway
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: commonground-gateway/charts/gateway-ui/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-gateway-ui
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
---
# Source: commonground-gateway/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "IUNoYW5nZU1lIQ=="
---
# Source: commonground-gateway/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "YjVFMnhJakhPdg=="
  password: "IUNoYW5nZU1lIQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: commonground-gateway/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCiMjCmRlZmF1bHRfdXNlciA9IGV4YW1wbGUKIyMgQ2x1c3RlcmluZwojIwpjbHVzdGVyX2Zvcm1hdGlvbi5wZWVyX2Rpc2NvdmVyeV9iYWNrZW5kICA9IHJhYmJpdF9wZWVyX2Rpc2NvdmVyeV9rOHMKY2x1c3Rlcl9mb3JtYXRpb24uazhzLmhvc3QgPSBrdWJlcm5ldGVzLmRlZmF1bHQKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLmludGVydmFsID0gMTAKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLm9ubHlfbG9nX3dhcm5pbmcgPSB0cnVlCmNsdXN0ZXJfcGFydGl0aW9uX2hhbmRsaW5nID0gYXV0b2hlYWwKIyBxdWV1ZSBtYXN0ZXIgbG9jYXRvcgpxdWV1ZV9tYXN0ZXJfbG9jYXRvciA9IG1pbi1tYXN0ZXJzCiMgZW5hYmxlIGxvb3BiYWNrIHVzZXIKbG9vcGJhY2tfdXNlcnMuZXhhbXBsZSA9IGZhbHNlCiNkZWZhdWx0X3Zob3N0ID0gZGVmYXVsdC12aG9zdAojZGlza19mcmVlX2xpbWl0LmFic29sdXRlID0gNTBNQg==
---
# Source: commonground-gateway/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: "IWNoYW5nZU1lIQ=="
  
  rabbitmq-erlang-cookie: "cGhzMDBNd0RPcE54U3VPd3Z0ZWpZMkoyZ2NoenRNTk8="
---
# Source: commonground-gateway/templates/certificate.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-commonground-gateway-certificate
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
stringData:
  tls.crt: ""
  tls.key: ""
---
# Source: commonground-gateway/templates/certificate.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-commonground-gateway-idpcertificate
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
  idp.crt: ""
---
# Source: commonground-gateway/templates/dependencies-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-commonground-gateway-dependencies
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
stringData:
  dependencies.yaml: |
    parameters:
---
# Source: commonground-gateway/templates/rootca-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-commonground-gateway-rootca
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
stringData:
    ca.crt: |
        
        -----BEGIN CERTIFICATE-----
        MIIFhDCCA2ygAwIBAgIEAJimITANBgkqhkiG9w0BAQsFADBiMQswCQYDVQQGEwJO
        TDEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMTMwMQYDVQQDDCpTdGFh
        dCBkZXIgTmVkZXJsYW5kZW4gUHJpdmF0ZSBSb290IENBIC0gRzEwHhcNMTMxMTE0
        MTM0ODU1WhcNMjgxMTEzMjMwMDAwWjBiMQswCQYDVQQGEwJOTDEeMBwGA1UECgwV
        U3RhYXQgZGVyIE5lZGVybGFuZGVuMTMwMQYDVQQDDCpTdGFhdCBkZXIgTmVkZXJs
        YW5kZW4gUHJpdmF0ZSBSb290IENBIC0gRzEwggIiMA0GCSqGSIb3DQEBAQUAA4IC
        DwAwggIKAoICAQDaIMh56ynwnEhE7Ey54KpX5j1XDoxbHDCgXctute55RjmG2hy6
        fuq++q/dCSsj38Pi/KYn/PN13EF05k39IRvakb0AQNVyHifNKXfta6Tzi5QcM4BK
        09DB4Ckb6TdZTNUtWyEcAtRblYaVSQ4Xr5QODNqu2FGQucraVXqCIx81azlOE2Jb
        Zli9AZKn94pP57A11dUYhxMsh70YosJEKVB8Ue4ROksHhb/nnOISG+2y9FD5M8u8
        jYhp00TGZGVu5z0IFgtqX0i8GmrH0ub9AWjf/iU4MWjGVRSq0cwUHEeKRj/UD9a8
        xIEn9TxIfYj+6+s4tn9dW/4PV5jc6iGJx6ExTPfOR7VHpxS4XujrZb5Ba/+oj/ON
        dOfR0JSm2itCytbtjQBBL0oocIIqaqOna1cufHkcn9VleF7Zvz/8njQIpAU4J4nJ
        4pE5pQ3k4ORAGNnq5R9hAqqUQGDlo3Uj8PBou0nPzQ7JNgGkN+my/lGr4rceUNK/
        8CoGnYFUH+UyFtJkvlLlEkb688/IdNdGgY+vuXCAB6xfKlJjAGChFUBb6swbNeNc
        tVEdUj7Weg4Jt5gXu78C2mjs9x5lcHOgMO4ZmvYJ3Ejp4k3nNa45HOIVkYrfQrrB
        HzBhR0BuReAagurcbtUjJFd7BtufGVLfU3CUn1l6u3/9eG4DGH6pq+dSKQIDAQAB
        o0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU
        Kv25Kx76w4SHBtuB/4aXdQ3rAYswDQYJKoZIhvcNAQELBQADggIBAEvpmXMOOKdQ
        wUPysrsdIkGJUFF+dvmsJDiOuAqV0A1nNTooL3esvDLEZAWZwKTOwRomnHzeCfS/
        QxRKTkVX21pfrHf9ufDKykpzjl9uAILTS76FJ6//R0RTIPMrzknQpG2fCLR5DFEb
        HWU/jWAxGmncfx6HQYl/azHaWbv0dhZOUjPdkGAQ6EPvHcyNU9yMkETdw0X6ioxq
        zMwkGM893oBrMmtduiqIf3/H6HTXoRKAc+/DXZIq/pAc6eVMa6x43kokluaam9L7
        8yDrlHbGd2VYAr/HZ0TjDZTtI2t2/ySTb7JjC8wL8rSqxYmLpNrnhZzPW87sl2OC
        FC3re3ZhtJkIHNP85jj1gqewTC7DCW6llZdB3hBzfHWby0EX2RlcwgaMfNBEV5U0
        IogccdXV+S6zWK4F+yBr0sXUrdbdMFu+g3I9CbXxt0q4eVJtoaun4M2Z+bZMqZvy
        9FryBdSfhpgmJqwFz2luOhPOVCblCPhLrUeewrvuBXoZQWt1ZjuHfwJZ1dgjszVE
        qwY9S0SdqCg2ZlL9s3vDIrrd3wLWrcHLQMd9gwsppNv9c7JfIJdlcZLTmF9EuL6e
        CvVVrqBVqLHjva4erqYol6K/jbSfUtRCy8IlFU7LYu1KLehZKYvj3vekj3Cn08Aq
        ljr/Q8Pw+OfUZTzKg4PVDQVfFqKtyosv
        -----END CERTIFICATE-----
---
# Source: commonground-gateway/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-commonground-gateway
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  database-url: "cGdzcWw6Ly9jb21tb25ncm91bmQtZ2F0ZXdheTohQ2hhbmdlTWUhQG15LXJlbGVhc2UtcG9zdGdyZXNxbC9jb21tb25ncm91bmQtZ2F0ZXdheT9zZXJ2ZXJWZXJzaW9uPTEx"
  
  saml-enabled: "ZmFsc2U="
  digid-enabled: "ZmFsc2U="
  githubKey: ""

  rabbitmq-username: "ZXhhbXBsZQ=="
  rabbitmq-password: "IWNoYW5nZU1lIQ=="
    
  
  mongodb-url: "bW9uZ29kYjovL2FwaS1wbGF0Zm9ybTohQ2hhbmdlTWUhQG15LXJlbGVhc2UtbW9uZ29kYg=="
---
# Source: commonground-gateway/charts/gateway-ui/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-gateway-ui
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  properties: |-
    window.sessionStorage.setItem("GATSBY_ME_URL", "https://api.localhost/api/users/me");
    
    window.sessionStorage.setItem("GATSBY_API_URL", "https://api.localhost/api");
    
    window.sessionStorage.setItem("GATSBY_ADMIN_URL", "https://api.localhost/admin");
    
    window.sessionStorage.setItem("GATSBY_BASE_URL", "https://api.localhost");
    
    window.sessionStorage.setItem("GATSBY_FRONTEND_URL", "https://localhost");
    
    window.sessionStorage.setItem("GATSBY_ORGANIZATION", "");
    window.sessionStorage.setItem("GATSBY_LOGIN_REDIRECT", "vault");
---
# Source: commonground-gateway/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: commonground-gateway/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: commonground-gateway/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: commonground-gateway/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: commonground-gateway/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-commonground-gateway
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
data:
  auth-enabled: "true"
  session-duration: "900"
  app-version: "V1.0"
  app-cors-allow-origin: "[*]"
  cache: "true"
  debug: "0"
  trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  trusted-hosts: "^.+$"
  global-domain: "localhost"
  url: "https://api.localhost/"
  redis-host: "my-release-redis-headless"
  redis-port: "6379"
  cron-runner-enabled: "true"
  cron-runner-crontab: "*/5 * * * *"
  cron-runner-concurrencyPolicy: "Forbid"
  cron-runner-activeDeadlineSeconds: "600"
  cron-runner-appAuth: "false"

  rabbitmq-host: "my-release-rabbitmq"
  rabbitmq-port: "5672"
---
# Source: commonground-gateway/templates/framework-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-commonground-gateway-framework
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
data:
    framework.yaml: |
        # see https://symfony.com/doc/current/reference/configuration/framework.html
        framework:
            session:
                handler_id: Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler
                cookie_secure: true
                cookie_samesite: lax
                storage_factory_id: session.storage.factory.native
        parameters:
            samesite: lax
---
# Source: commonground-gateway/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: commonground-gateway/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-commonground-gateway-vendor
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
spec:
    storageClassName: nfs
    accessModes:
        - ReadWriteMany
    resources:
        requests:
            storage: 1Gi
---
# Source: commonground-gateway/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: commonground-gateway/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-rabbitmq-endpoint-reader
---
# Source: commonground-gateway/charts/gateway-ui/templates/pwa-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-gateway-ui
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: gateway-ui-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
---
# Source: commonground-gateway/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: commonground-gateway/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: commonground-gateway/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: commonground-gateway/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
  publishNotReadyAddresses: true
---
# Source: commonground-gateway/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: commonground-gateway/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: commonground-gateway/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: commonground-gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-commonground-gateway
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
---
# Source: commonground-gateway/charts/gateway-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-gateway-ui
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway-ui-pwa
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/part-of: gateway-ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway-ui-pwa
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/part-of: gateway-ui
    spec:
      securityContext:
        {}
      volumes:
          - name: tmpfs
            emptyDir: {}
          - name: tmpfs2
            emptyDir: {}
          - name: env
            configMap:
                name: my-release-gateway-ui
                items:
                    - key: "properties"
                      path: "env.js"
      containers:
        - name: gateway-ui-pwa
          securityContext:
            {}
          image: "ghcr.io/conductionnl/gateway-ui:stag"
          imagePullPolicy: Always
          volumeMounts:
            -   mountPath: /var/cache/nginx/client_temp
                name: tmpfs
            -   mountPath: /var/run
                name: tmpfs2
            -   name: env
                mountPath: "/usr/share/nginx/html/env.js"
                subPath: "env.js"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 10m
              memory: 128Mi
---
# Source: commonground-gateway/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "default"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.4.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.4.4
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_USER
              value: "api-platform"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests:
              cpu: 1
              memory: 6Gi
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: commonground-gateway/templates/consumer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-commonground-gateway-worker
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: commonground-gateway
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        prometheus.io/interval: 600s
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: commonground-gateway
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-commonground-gateway
      securityContext:
        {}
      volumes:
        - name: dependencies
          secret:
            secretName: my-release-commonground-gateway-dependencies
            defaultMode: 420
        - name: app-certificates
          secret:
            
            secretName: my-release-commonground-gateway-certificate
            
            defaultMode: 420
        - name: vendor
          persistentVolumeClaim:
              claimName: my-release-commonground-gateway-vendor
      initContainers:
          - name: my-release-commonground-gateway-init
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - all
              privileged: false
              readOnlyRootFilesystem: false
              runAsNonRoot: false
              runAsUser: 101
            image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
            imagePullPolicy: Always
            volumeMounts:
                - mountPath: /tmp/vendor
                  name: vendor
                  readOnly: false
            command:
                - bash
                - /srv/api/docker/php/online-copy-vendor.sh
      containers:
        - name: my-release-commonground-gateway-worker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 101
          image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /srv/api/config/packages/dependencies.yaml
              subPath: dependencies.yaml
              name: dependencies
              readOnly: true
            - mountPath: /var/run/certs
              name: app-certificates
              readOnly: true            
            - mountPath: /srv/api/vendor
              subPath: vendor
              name: vendor
              readOnly: false
            - mountPath: /srv/api/composer.json
              subPath: composer.json
              name: vendor
              readOnly: false
            - mountPath: /srv/api/composer.lock
              subPath: composer.lock
              name: vendor
              readOnly: false
            - mountPath: /srv/api/symfony.lock
              subPath: symfony.lock
              name: vendor
              readOnly: false
            - mountPath: /srv/api/config/bundles.php
              subPath: bundles.php
              name: vendor
              readOnly: false
          args:
              - bin/console
              - messenger:consume
              - async
              - -vvv
          env:
            - name: APP_ENV
              value: prod
            - name: APP_INIT
              value: 'false'
            - name: APP_AUTH
              valueFrom:
                configMapKeyRef:
                  key: auth-enabled
                  name: my-release-commonground-gateway
            - name: AUTH_ENABLED
              value: 'true'
            - name: APP_REPRO
              value: 'https://github.com/ConductionNL/commonground-gateway'
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  key: trusted-hosts
                  name: my-release-commonground-gateway
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  key: trusted-proxies
                  name: my-release-commonground-gateway
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: app-cors-allow-origin
                  name: my-release-commonground-gateway
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: app-version
                  name: my-release-commonground-gateway
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: my-release-commonground-gateway
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  key: cache
                  name: my-release-commonground-gateway
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: my-release-commonground-gateway
            - name: CACHE_URL
              valueFrom:
                  secretKeyRef:
                      key: mongodb-url
                      name: my-release-commonground-gateway
            - name: GLOBAL_DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: global-domain
                  name: my-release-commonground-gateway
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: my-release-commonground-gateway
            - name: APP_SESSION_DURATION
              valueFrom:
                configMapKeyRef:
                  key: session-duration
                  name: my-release-commonground-gateway
            - name: READ_ONLY
              value: "true"
            - name: CRON_RUNNER_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-enabled
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_CRONTAB
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-crontab
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_CONCURRENCY_POLICY
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-concurrencyPolicy
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_ACTIVE_DEADLINE_SECONDS
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-activeDeadlineSeconds
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_APP_AUTH
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-appAuth
                  name: my-release-commonground-gateway
            - name: RABBITMQ_HOST
              valueFrom:
                  configMapKeyRef:
                      name: my-release-commonground-gateway
                      key: rabbitmq-host
            - name: RABBITMQ_PORT
              valueFrom:
                  configMapKeyRef:
                      name: my-release-commonground-gateway
                      key: rabbitmq-port
            - name: RABBITMQ_USERNAME
              valueFrom:
                  secretKeyRef:
                      name: my-release-commonground-gateway
                      key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                  secretKeyRef:
                      name: my-release-commonground-gateway
                      key: rabbitmq-password
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: redis-host
                  name: my-release-commonground-gateway
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: redis-port
                  name: my-release-commonground-gateway
            - name: SAML_ENABLED
              valueFrom:
                secretKeyRef:
                  key: saml-enabled
                  name: my-release-commonground-gateway
            - name: DIGID_ENABLED
              valueFrom:
                secretKeyRef:
                  key: digid-enabled
                  name: my-release-commonground-gateway
            - name: GITHUB_KEY
              valueFrom:
                secretKeyRef:
                    key: githubKey
                    name: my-release-commonground-gateway

          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
---
# Source: commonground-gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-commonground-gateway
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: commonground-gateway
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        prometheus.io/interval: 600s
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: commonground-gateway
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-commonground-gateway
      securityContext:
        {}
      volumes:
        - name: dependencies
          secret:
            secretName: my-release-commonground-gateway-dependencies
            defaultMode: 420
        - name: app-certificates
          secret:
            
            secretName: my-release-commonground-gateway-certificate
            
            defaultMode: 420
        - name: framework
          configMap:
            name: my-release-commonground-gateway-framework
            defaultMode: 420
        - name: vendor
          persistentVolumeClaim:
              claimName: my-release-commonground-gateway-vendor
        - name: tmpfsnginx
          emptyDir: {}
        - name: tmpfsnginx2
          emptyDir: {}
        - name: tmpfsphp
          emptyDir: {}
        - name: certificates
          projected:
            sources:
            - secret:  
                name: my-release-commonground-gateway-rootca
            - secret:
                name: my-release-commonground-gateway-tls
      initContainers:
          - name: my-release-commonground-gateway-init          
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - all
              privileged: false
              readOnlyRootFilesystem: false
              runAsNonRoot: false
              runAsUser: 101
            image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
            imagePullPolicy: Always
            volumeMounts:
              - mountPath: /tmp/vendor
                name: vendor
                readOnly: false
            command:
              - bash
              - /srv/api/docker/php/online-copy-vendor.sh
      containers:
        - name: my-release-commonground-gateway-php
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 101
          image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /srv/api/config/packages/dependencies.yaml
              subPath: dependencies.yaml
              name: dependencies
              readOnly: true
            - mountPath: /srv/api/var
              name: tmpfsphp
              readOnly: false
            - mountPath: /var/run/certs
              name: app-certificates
              readOnly: true
            - mountPath: /srv/api/config/packages/prod/framework.additions.yaml
              subPath: framework.yaml
              name: framework
              readOnly: true
            - mountPath: /srv/api/vendor
              subPath: vendor
              name: vendor
              readOnly: false
            - mountPath: /srv/api/composer.json
              subPath: composer.json
              name: vendor
              readOnly: false
            - mountPath: /srv/api/composer.lock
              subPath: composer.lock
              name: vendor
              readOnly: false
            - mountPath: /srv/api/symfony.lock
              subPath: symfony.lock
              name: vendor
              readOnly: false
            - mountPath: /srv/api/config/bundles.php
              subPath: bundles.php
              name: vendor
              readOnly: false
          env:
            - name: APP_ENV
              value: prod
            - name: LOG_LEVEL
              value: warning
            - name: APP_AUTH
              valueFrom:
                configMapKeyRef:
                  key: auth-enabled
                  name: my-release-commonground-gateway
            - name: APP_INIT
              value: 'true'
            - name: AUTH_ENABLED
              value: 'true'
            - name: APP_REPRO
              value: 'https://github.com/ConductionNL/commonground-gateway'
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  key: trusted-hosts
                  name: my-release-commonground-gateway
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  key: trusted-proxies
                  name: my-release-commonground-gateway
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: app-cors-allow-origin
                  name: my-release-commonground-gateway
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: app-version
                  name: my-release-commonground-gateway
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: my-release-commonground-gateway
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  key: cache
                  name: my-release-commonground-gateway
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: my-release-commonground-gateway
            - name: CACHE_URL
              valueFrom:
                secretKeyRef:
                  key: mongodb-url
                  name: my-release-commonground-gateway
            - name: GLOBAL_DOMAIN
              valueFrom:
                configMapKeyRef:
                  key: global-domain
                  name: my-release-commonground-gateway
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: my-release-commonground-gateway
            - name: APP_SESSION_DURATION
              valueFrom:
                configMapKeyRef:
                  key: session-duration
                  name: my-release-commonground-gateway
            - name: READ_ONLY
              value: "true"
            - name: CRON_RUNNER_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-enabled
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_CRONTAB
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-crontab
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_CONCURRENCY_POLICY
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-concurrencyPolicy
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_ACTIVE_DEADLINE_SECONDS
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-activeDeadlineSeconds
                  name: my-release-commonground-gateway
            - name: CRON_RUNNER_APP_AUTH
              valueFrom:
                configMapKeyRef:
                  key: cron-runner-appAuth
                  name: my-release-commonground-gateway
            - name: APP_DEFAULT_REDIRECT_URL
              value: "https://localhost/login/oidc/dex"
              
            - name: APP_DEFAULT_BACK_URL
              value: "https://localhost"
              
          #RabbitMQ
            - name: RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: my-release-commonground-gateway
                  key: rabbitmq-host
            - name: RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: my-release-commonground-gateway
                  key: rabbitmq-port
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-release-commonground-gateway
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-commonground-gateway
                  key: rabbitmq-password
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: redis-host
                  name: my-release-commonground-gateway
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: redis-port
                  name: my-release-commonground-gateway
            - name: SAML_ENABLED
              valueFrom:
                secretKeyRef:
                  key: saml-enabled
                  name: my-release-commonground-gateway
            - name: DIGID_ENABLED
              valueFrom:
                secretKeyRef:
                  key: digid-enabled
                  name: my-release-commonground-gateway
            - name: GITHUB_KEY
              valueFrom:
                secretKeyRef:
                  key: githubKey
                  name: my-release-commonground-gateway

          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 1
              memory: 1Gi
        - name: my-release-commonground-gateway-nginx
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            privileged: false
            runAsNonRoot: false
            runAsUser: 101
          image: "ghcr.io/conductionnl/commonground-gateway-nginx:latest"
          imagePullPolicy: Always
          volumeMounts:
              - mountPath: /var/cache/nginx
                name: tmpfsnginx
              - mountPath: /var/run
                name: tmpfsnginx2
          env:
            - name: PHP_SERVICE
              value: localhost
            - name: NGINX_HOST
              value: localhost
            - name: BACKENDS
              value: localhost
            - name: NGINX_ENV
              value: prod
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 300
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 300
          resources:
            limits:
              cpu: 200m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
---
# Source: commonground-gateway/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "commonground-gateway"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "commonground-gateway"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "commonground-gateway" -d "dbname=commonground-gateway" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "commonground-gateway" -d "dbname=commonground-gateway" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: commonground-gateway/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-11.9.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-release-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-11.9.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 606d9fee8869e75e809ff6c0b13d86653115badbf6e76fb9d9330660f7de7c7d
        checksum/secret: 2b6935a64f98d9473379a20b1f20e1227a232bf4d5e50148fcff4793f1081110
    spec:
      
      serviceAccountName: my-release-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: my-release
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 120
      initContainers:
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.11.9-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: my-release-rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FEATURE_FLAGS
              value: 
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "example"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
          resources:
            limits: {}
            requests:
              cpu: 200m
              memory: 256Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          projected:
            sources:
              - secret:
                  name: my-release-rabbitmq-config
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/name: rabbitmq
          app.kubernetes.io/instance: my-release
      spec:
        accessModes:
            - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: commonground-gateway/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.11
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: ef42ab852c5b41b4fb0d6ba4b2934faec8baecbd09c6411a8b6af17e9b4ef149
        checksum/health: 587b09bd2f776951eecb214d6ea0b311c5655bf466093b440c2cf52284052bac
        checksum/scripts: c7189b754dd495288bfa4924a1cbf15751779bab2f91c53009dfe9d322cc4aa4
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.5-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests:
              cpu: 20m
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: commonground-gateway/templates/cron-runner.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-commonground-gateway-runner
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
spec:
  # concurrencyPolicy: Forbid: The cron job does not allow concurrent runs; if it is time for a new job run and the previous job run hasn’t finished yet, the cron job skips the new job run
  concurrencyPolicy: "Forbid"
  # this cronjob runs every 5 minutes https://crontab.guru/#*_*_*_*_*
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      # activeDeadlineSeconds Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
      activeDeadlineSeconds: 600
      template:
          spec:
              serviceAccountName: my-release-commonground-gateway
              securityContext:
                {}
              restartPolicy: Never
              volumes:
                  - name: dependencies
                    secret:
                        secretName: "my-release-commonground-gateway-dependencies"
                        defaultMode: 420
                  - name: app-certificates
                    secret:
                        
                        secretName: my-release-commonground-gateway-certificate
                        
                        defaultMode: 420
                  - name: vendor
                    persistentVolumeClaim:
                        claimName: my-release-commonground-gateway-vendor
                  
              initContainers:
                  - name: my-release-commonground-gateway-init
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - all
                      privileged: false
                      readOnlyRootFilesystem: false
                      runAsNonRoot: false
                      runAsUser: 101
                    image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
                    imagePullPolicy: Always
                    volumeMounts:
                        - mountPath: /tmp/vendor
                          name: vendor
                          readOnly: false
                    command:
                        - bash
                        - /srv/api/docker/php/online-copy-vendor.sh
              containers:
                  - name: my-release-commonground-gateway-php
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - all
                      privileged: false
                      readOnlyRootFilesystem: false
                      runAsNonRoot: false
                      runAsUser: 101
                    image: "ghcr.io/conductionnl/commonground-gateway-php:latest"
                    imagePullPolicy: Always
                    ports:
                        - containerPort: 9000
                    volumeMounts:
                        - mountPath: /srv/api/config/packages/dependencies.yaml
                          subPath: dependencies.yaml
                          name: dependencies
                          readOnly: true
                        - mountPath: /var/run/certs
                          name: app-certificates
                          readOnly: true
                        - mountPath: /srv/api/vendor
                          subPath: vendor
                          name: vendor
                          readOnly: false
                        - mountPath: /srv/api/composer.json
                          subPath: composer.json
                          name: vendor
                          readOnly: false
                        - mountPath: /srv/api/composer.lock
                          subPath: composer.lock
                          name: vendor
                          readOnly: false
                        - mountPath: /srv/api/symfony.lock
                          subPath: symfony.lock
                          name: vendor
                          readOnly: false
                        - mountPath: /srv/api/config/bundles.php
                          subPath: bundles.php
                          name: vendor
                          readOnly: false
                    args:
                        - bin/console
                        - cronjob:command
                    env:
                        - name: APP_ENV
                          value: prod
                        - name: APP_AUTH
                          value: 'false'
                        - name: APP_INIT
                          value: 'false'
                        - name: AUTH_ENABLED
                          value: 'true'
                        - name: APP_REPRO
                          value: 'https://github.com/ConductionNL/commonground-gateway'
                        - name: TRUSTED_HOSTS
                          valueFrom:
                              configMapKeyRef:
                                  key: trusted-hosts
                                  name: my-release-commonground-gateway
                        - name: TRUSTED_PROXIES
                          valueFrom:
                              configMapKeyRef:
                                  key: trusted-proxies
                                  name: my-release-commonground-gateway
                        - name: CORS_ALLOW_ORIGIN
                          valueFrom:
                              configMapKeyRef:
                                  key: app-cors-allow-origin
                                  name: my-release-commonground-gateway
                        - name: APP_VERSION
                          valueFrom:
                              configMapKeyRef:
                                  key: app-version
                                  name: my-release-commonground-gateway
                        - name: APP_DEBUG
                          valueFrom:
                              configMapKeyRef:
                                  key: debug
                                  name: my-release-commonground-gateway
                        - name: APP_CACHE
                          valueFrom:
                              configMapKeyRef:
                                  key: cache
                                  name: my-release-commonground-gateway
                        - name: DATABASE_URL
                          valueFrom:
                              secretKeyRef:
                                  key: database-url
                                  name: my-release-commonground-gateway
                        - name: CACHE_URL
                          valueFrom:
                              secretKeyRef:
                                  key: mongodb-url
                                  name: my-release-commonground-gateway
                        - name: GLOBAL_DOMAIN
                          valueFrom:
                              configMapKeyRef:
                                  key: global-domain
                                  name: my-release-commonground-gateway
                        - name: APP_URL
                          valueFrom:
                              configMapKeyRef:
                                  key: url
                                  name: my-release-commonground-gateway
                        - name: APP_SESSION_DURATION
                          valueFrom:
                            configMapKeyRef:
                              key: session-duration
                              name: my-release-commonground-gateway
                        - name: READ_ONLY
                          value: "true"
                        - name: CRON_RUNNER_ENABLED
                          valueFrom:
                              configMapKeyRef:
                                  key: cron-runner-enabled
                                  name: my-release-commonground-gateway
                        - name: CRON_RUNNER_CRONTAB
                          valueFrom:
                              configMapKeyRef:
                                  key: cron-runner-crontab
                                  name: my-release-commonground-gateway
                        - name: CRON_RUNNER_CONCURRENCY_POLICY
                          valueFrom:
                              configMapKeyRef:
                                  key: cron-runner-concurrencyPolicy
                                  name: my-release-commonground-gateway
                        - name: CRON_RUNNER_ACTIVE_DEADLINE_SECONDS
                          valueFrom:
                              configMapKeyRef:
                                  key: cron-runner-activeDeadlineSeconds
                                  name: my-release-commonground-gateway
                        - name: CRON_RUNNER_APP_AUTH
                          valueFrom:
                              configMapKeyRef:
                                  key: cron-runner-appAuth
                                  name: my-release-commonground-gateway
        
                        #RabbitMQ
                        - name: RABBITMQ_HOST
                          valueFrom:
                              configMapKeyRef:
                                  name: my-release-commonground-gateway
                                  key: rabbitmq-host
                        - name: RABBITMQ_PORT
                          valueFrom:
                              configMapKeyRef:
                                  name: my-release-commonground-gateway
                                  key: rabbitmq-port
                        - name: RABBITMQ_USERNAME
                          valueFrom:
                              secretKeyRef:
                                  name: my-release-commonground-gateway
                                  key: rabbitmq-username
                        - name: RABBITMQ_PASSWORD
                          valueFrom:
                              secretKeyRef:
                                  name: my-release-commonground-gateway
                                  key: rabbitmq-password
                        - name: REDIS_HOST
                          valueFrom:
                              configMapKeyRef:
                                  key: redis-host
                                  name: my-release-commonground-gateway
                        - name: REDIS_PORT
                          valueFrom:
                              configMapKeyRef:
                                  key: redis-port
                                  name: my-release-commonground-gateway
                        - name: SAML_ENABLED
                          valueFrom:
                              secretKeyRef:
                                  key: saml-enabled
                                  name: my-release-commonground-gateway
                        - name: DIGID_ENABLED
                          valueFrom:
                              secretKeyRef:
                                  key: digid-enabled
                                  name: my-release-commonground-gateway
                        - name: GITHUB_KEY
                          valueFrom:
                              secretKeyRef:
                                  key: githubKey
                                  name: my-release-commonground-gateway
---
# Source: commonground-gateway/charts/gateway-ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-gateway-ui
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm

  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - admin.localhost
      secretName: my-release-gateway-ui-tls
  rules:
    - host: admin.localhost
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-gateway-ui
                port:
                  number: 80
---
# Source: commonground-gateway/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    name: my-release-commonground-gateway
    labels:
        helm.sh/chart: commonground-gateway-1.5.4
        app.kubernetes.io/name: commonground-gateway
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.2"
        app.kubernetes.io/managed-by: Helm
    annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
    




        nginx.ingress.kubernetes.io/proxy-body-size: 50m
    
    
spec:
    ingressClassName: nginx
    tls:
        - hosts:
              - api.localhost
          secretName: my-release-commonground-gateway-tls
    rules:
        - host: api.localhost
          http:
              paths:
                  - path: /
                    pathType: ImplementationSpecific
                    backend:
                        service:
                            name: my-release-commonground-gateway
                            port:
                                number: 80
---
# Source: commonground-gateway/charts/gateway-ui/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-gateway-ui-test-connection"
  labels:
    helm.sh/chart: gateway-ui-0.1.7
    app.kubernetes.io/name: gateway-ui
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: gateway-ui
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-gateway-ui:80']
  restartPolicy: Never
---
# Source: commonground-gateway/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-commonground-gateway-test-connection"
  labels:
    helm.sh/chart: commonground-gateway-1.5.4
    app.kubernetes.io/name: commonground-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-commonground-gateway:80']
  restartPolicy: Never
