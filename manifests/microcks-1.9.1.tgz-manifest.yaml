---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-grpc-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURuRENDQW9TZ0F3SUJBZ0lRT1FaNTVQSW1PNEsxOVZvaVlSL1NIakFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkdGFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdOakUyTURBd016STNXaGNOTXpRd05qRTBNREF3TXpJM1dqQXlNVEF3TGdZRFZRUURFeWR0CmFXTnliMk5yY3kxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGw0RDVCb2dXUjVvaURaT21zZEpFdXZ6S3F4S1RDY0hmMAprT0tlN0lpUXJ6TVNNdXNBY2JGajVXdTJDTUdSVVUyc0R2RUs5bHF3dVFEeThsTGVid1BRYTk0QWZqb2wvTDJFClFZZHk5ZUw4d240bEo5VHFVMFpua3BIWUI5MGVyMFRPQ0ZLSWw3R3NmTE4vN3JoaDZDOTcvREkzUTdZaWgrK0QKVmFhOXNUTXI2TFFMMDBoWlFqQmhmb3JaYkRjeGUyTkVPZ1I2Uzc4WUlNV2FYTTl2TTdZVnRMakNPTklPcmNRNQpkSUdRUG9objh4YUwrWTFKVXV1OWJQWlRVcExZS0p4YUN5QmcvdzlXdTI0c1dRaS9ZLzA4SFRLYUtGTitQVC9ZClJuY3lyeUVHYjZPQ2FHcWNueU1BK1lIM1BMazRFSmFJM0NqVndTTVN0YkJ6aDY0RXdOZWhBZ01CQUFHamdhMHcKZ2Fvd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjRApBakFNQmdOVkhSTUJBZjhFQWpBQU1Hc0dBMVVkRVFSa01HS0NMRzFwWTNKdlkydHpMV2R5Y0dNdGJXbGpjbTlqCmEzTXVNVGt5TGpFMk9DNDVPUzR4TURBdWJtbHdMbWx2Z2lkdGFXTnliMk5yY3kxbmNuQmpMbVJsWm1GMWJIUXUKYzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDQ1d4dlkyRnNhRzl6ZERBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQQoycVV3b09kL1RzV01KZnpndnBXcVBBa0Z4NEREU3dUUnpFNUJjVURLWmxIY2NFekRYV0pkWlZRcnpjZWxQVHAvCkdhNGFjSGJJeTkwSmt5WHlMWGQ2UE1QS0lIdTd2c2d2bituWlBIWjFmK3J6WjN5N1JoaEV1SmJCS0pYempidG0KbkZ2NU16S3ltOGdDVDNXSVN4alJpd1h4SzRrSDdhTjNGYzVJVlNFVHR0TkRxZS9OTWlqVVp6cUdON2NidkVXTgphLzMxeWdpSHIrTk9VVEc3U3cyQWE4a3o3VkJKNFNKdkN1WmVmU3JoTUpzMWo4RVkxRGZGUlhHcEJUV0hxUnNHCnByb2dvR1FwdHFFTFhOZ1c3TnF5Q1FOM0JkaFpldEVPSWZtaUt0K2QvQ29wMlB2Y1c5dktXQ0xpN3hnamR0OHcKb2h5ai9ReWErYyswWVBLQjNwT204Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNWVBK1FhSUZrZWFJZzJUcHJIU1JMcjh5cXNTa3duQjM5SkRpbnV5SWtLOHpFakxyCkFIR3hZK1ZydGdqQmtWRk5yQTd4Q3ZaYXNMa0E4dkpTM204RDBHdmVBSDQ2SmZ5OWhFR0hjdlhpL01KK0pTZlUKNmxOR1o1S1IyQWZkSHE5RXpnaFNpSmV4ckh5emYrNjRZZWd2ZS93eU4wTzJJb2Z2ZzFXbXZiRXpLK2kwQzlOSQpXVUl3WVg2SzJXdzNNWHRqUkRvRWVrdS9HQ0RGbWx6UGJ6TzJGYlM0d2pqU0RxM0VPWFNCa0Q2SVovTVdpL21OClNWTHJ2V3oyVTFLUzJDaWNXZ3NnWVA4UFZydHVMRmtJdjJQOVBCMHltaWhUZmowLzJFWjNNcThoQm0ramdtaHEKbko4akFQbUI5enk1T0JDV2lOd28xY0VqRXJXd2M0ZXVCTURYb1FJREFRQUJBb0lCQVFDSVpGM3NDVnN1cjA4TwpUd0RLdnpzcE5tNjBuZ3A0QjgxVXdlYUVqeW1VVnkrQk84N3RxNGVxRXdTdXRGRk5qS1QrVXJzNFd1V0NkN0tWCmM2d3hxRUxtRmlwWnRvdC80STc5K3ZlSUFWYlZ5L3lXeFNSeWlFaDh5WjFaUllrd1hLUUJielN4TVBoTnRJdTQKZTRiUktMZUw1QjVUWmd5YVBuZWhRRiszcTMwR0xtTVdiaDk0VDZjOEtRbmwrdVRoUlZWVk1tQldiQ3ZPY0x5OApTdmU5UFZPNUUzc1JCV3hRQ2ViSExmN1p4Z3lYektlVTArYmxlOTFMMDFvSTlCQ0xoNllJcmtYOVVOaTU3VVh4CmdGRHZJRW1EcE0zdUxRTUVwbUNtZWtwZFFqZmJoekxnSnlDQ3ZaWlRoazVYeFdGQllIbVA2M0Z3dCsxUzVMY20KZDZyaEhxOXhBb0dCQU9sT2RWV21OU1lUK3FFSHJpN3NuOHZjUVI3QzdMTDlNbUc1aGF2cUVzS2dZREowK1BFTQpqMklSc2ZRRGpZSnFDeEhEVDY5c09jNnB3S2RoL3I1NnUvK290YmUxaXNFbS81L1hYOTR6QTFGajY2Yk8vRG13CmU5VW5IaWV0Q2VaLzdDNk9HbTRNSlZFa05tQ3AwYkhuMDJQRTk3K2JLRis2YzZrOXQwR2luOFRsQW9HQkFQdzgKWEpLZmtjc1J3VUlYU1F6OC8wOUNyMlU3MWJoZzdHOEdJMUQvWWxobWxPNGlOMmtNQ0RSclNlQjd6K0MvOTR2MApFbktXM2VJVmdXLzd2RDlXS1UvSjJ1NXFwQVFRYkNQRWgzNExUbXlUenZlaHVyczcxNngwcVhRenFEWE9oZ3hRClNHejhQMU1tRU1VMk1YbXRZbWlpc1FmcXVSMDdEWjNUb1BsRDd2Z05Bb0dBR2dlMjc2ZHJwcVAwQXFOb3U3T0sKNEtQaVlCdy9iSGp6ZGhQTTVqRm5obTkrVENMZzQ0UVRPMDNlSE91SWpsUm1oOFRTenkrMEEyck5JOSs3SEdWMQpORUVPaFVDc0NvRGZaR1lUUENkVTUyL09pdjN0QmtLNmpqMmZENjR1dkpqcE1RaUp5bDF3akcwTjVCc09XbHNUCktyNS9KZEdaMzVSZDh6UC9qa01tc0VFQ2dZQkhXaC9wemova3pQbjVZekxqL0xHUVQxSGtkaituNzZzU1lROGUKZTQvclorRmJWOHlLNTc5dWJLY3lYSFBhcFJNMndPMXpBdUJ6Y3hmeGdLbW8xUXZNcVZKSVBWeDJWZHJ4WjBmWQp6UVA3VFBpd0xrenZhQ2REZnFEczRTd0ZSSTNBNy9qODg0SktXQ3RJVG1OQ2cxeWlNdHVYWEx2TzNBU25EOVdxCmphQU5CUUtCZ1FEUFdlQXdyMVBZVWN6c25zaUdlMWoyTWlDbFF6THJHVU90WEo5emlCcHpGWVU5aTV0MFRsOW8KdW5SeEIybDB4SlZSemRNdnVVRWg4b0x2MEJ5cVJKTU16V2gyczBwWVJZUWNUV2htTzhGa0s3RFc1UjFSdVpaRQpqZ0R5Q1NNTUovZFIvUmZqdUZsZnhNWUhDd2hnQmp4WExhWmNKWmlVSDFTeEZHbU1zR1RwRlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-microcks-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhhZ0F3SUJBZ0lSQU5uQS9GRy9seXM4bHJncDdHVmszRzR3RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNbmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sdwpMbWx2TUI0WERUSTBNRFl4TmpBd01ETXlOMW9YRFRJMU1EWXhOakF3TURNeU4xb3dNakV3TUM0R0ExVUVBeE1uCmJXbGpjbTlqYTNNdGJXbGpjbTlqYTNNdU1Ua3lMakUyT0M0NU9TNHhNREF1Ym1sd0xtbHZNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyK24xdUNFSU0zSjY4N1ZRdm5mWWMrdFZMTUNWTi9QTQpGbHlHOGcyY1ZTbG1QNGV6V2cyYkd1aVhlTk15ejlGdFZQb3dDS053TGFpckwva3FHV3dmd1dvRk9HcVhrOE9xClQyQmJCU0pISlJydy8yZHBnZkl1OER6blVYcnAzWmFKNzhHM1p3T0tBc3huMlZtdklSenNvSXlwQUVKVXhsZEgKME1qZmRqTmQ3eE53S3BGWEpxWnpUUWtpQ3BYcTNKRUNObHdzZ3ZwNm5hTXVXaEhXdlJFNTJrc0V4aU4rWDI0UworR3psWVRhLzNMTEZtZFNjZFBmclQxU050VUVrVUZkMGFVNHFzcUt3Z3pHT3M5Q2NpMWpUQUFZQzZycDBKeW9jCituUFFxNnRnZmhJWWFSM0prakZkQkVSc2F2akNLalplQUhBZmRoMzZvemoxY0NBZmVablpvUUlEQVFBQm96OHcKUFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFEeXdJRGM3UTlrakZMVERRQTNrCksra2pDTmorYlEydDdUVXA0MUZSeXBJc0ZZUlpkT0lFcFpTTmE5NmpYcmdKWVpkWGhtQUE4NHdsVjJlZUZVNVIKMUdyVTV5TkRSQzhhVE1ZKzc5UEJaaXpZa0l0dUdWeWViN0FtTXVSVkRxNTRhYmVGN29NV3RSY3JtQTBFQkNjQwpYRmdPZG11OG9nNnpGNUhmaThqTEZMakcwVjhpbkdzVVpXN3I0T3cvdVF3aVhtdHpJVm1vRG1aQzlXZzJkdzhSCis0YVE2T0FkL2R1K0JFbXlWV2pET29Uc0E4ZzFsSitwTkV0MTNjUHlDNU14QTVoWFF4eEE1d3pwem1FdTBkdEkKQ3dPektMdXRveE5QaEhOK2ZhMzBmRmZiT1RVeHRSaks2NVNaSXdjYTBJQVYxRU1jeGRFYjBDNGgxYm9UL3M5LwovSkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcituMXVDRUlNM0o2ODdWUXZuZlljK3RWTE1DVk4vUE1GbHlHOGcyY1ZTbG1QNGV6CldnMmJHdWlYZU5NeXo5RnRWUG93Q0tOd0xhaXJML2txR1d3ZndXb0ZPR3FYazhPcVQyQmJCU0pISlJydy8yZHAKZ2ZJdThEem5VWHJwM1phSjc4RzNad09LQXN4bjJWbXZJUnpzb0l5cEFFSlV4bGRIME1qZmRqTmQ3eE53S3BGWApKcVp6VFFraUNwWHEzSkVDTmx3c2d2cDZuYU11V2hIV3ZSRTUya3NFeGlOK1gyNFMrR3psWVRhLzNMTEZtZFNjCmRQZnJUMVNOdFVFa1VGZDBhVTRxc3FLd2d6R09zOUNjaTFqVEFBWUM2cnAwSnlvYytuUFFxNnRnZmhJWWFSM0oKa2pGZEJFUnNhdmpDS2paZUFIQWZkaDM2b3pqMWNDQWZlWm5ab1FJREFRQUJBb0lCQUJsMFJoemxrclUzREhsMQpOQURMZ0tPTld0N0Y0eEdja2x4dCtRelBVVjYxUmRsTmZuTTZZc1lxLzdmNC8zSTR3SlE2TzNjVWh5ZmtMeGthCithK0NDTHBJNkFaNHpnUVFuUFV0WVI1R0RudGRBYUJEUzI0RktDdVU5SGZDekZKRzlTQ2ZMRFdZdW9DYktTKzMKSFhNeUp6ODMrMEJSV01qMldpcm8xZ1RaZSs4YTZGaFhtVzMvQlBuV2wvSWlSMzZiaHlYVGUwQTVnVWlKd25TVwp4K2QrYWhiUnVlbmtreXFiTkFyQ3B5WGVGNEphMmNJWGlqMmlMNXJVU0NwQzFOWHRjdkZncGorMTJEMVpNQW1RCkhWM1JIc1BKR3ZRZlphL3FZQVByaGVDYytKTGZ0OTV4K3hzWHUwdTI4MkVCakFjeDF0T2QrUGsxVEoxaWdtNGMKalJtL1dFRUNnWUVBNVRxQ1BrSnp5ZGxuSUlsQ0FManE0T1pDOGhQQUovOXhpblQrTDVST0ErMzdIWnBLcUZ4bApUVitoMExnY1VZVlcydkhwN285by9WakN1ODZTZkFPZmZIZFhyWWViSWxkc0U1WFZIZ0RsWXd5Vkh0Mnd6NVJHCk15SXI3ZHJqSlUwa0J2QUlPelRESlREY0cwUi9ZUUJLT3lJcHFFMWsrTTRRU2Z5WnhzS1hkR2tDZ1lFQXhIVnkKTkZ0ZkpzdmtzT2RJeldzOXFkanpHN2lwbzZGOGVPOXZ6WW9uZ3NZQ255Rk9OaXBpVEl5WmR4S2ZkSjZDaTF6YwpWZW5DRkhWbCtxWmc3eXQ2c1J6NlhBSDNjTGFuRXNrYW1HQ21BdkhuM2lqalFwa1kvU09IdkhwZmdvdCtHTjJLCkJ3K0dnUEh1MVh2NHNMTXk4ZjVuMFBFYXJxcmhXaWFJbThPYXRIa0NnWUJSMUNBWVg1cDc3TnJPbDVEek53L0oKdHdrZzU0SUtCVHNmNVFHME5HbmhKendrWmliT2tTVXNpTDM0QnpFOHZLK3p1dlg2VGtGNVp3MGxBK253MFU1RwpuVWUwVDV0R21CU2hyVFFGNE9ZQ0JNVGEzdUsyUjBVRURlZkdvZ1BDRmhhTlQzUnd4algvZWNDcER6dTFnZWY5CjBnVXk2bVhvRjQ5akNnUlBHcm44T1FLQmdCUlA4RmJwZTVVUFQ3M2FxL1JST2pidGIzVldTblBZcG4zNmc1ekUKeEFFSmFBdjc3Wkk4SDUyNmk4Tjc4WENsVXVvRjErSXFJUjdzWkhiZDdQZk5qd253N1JIR1FrY3RHMmtkMGRvZgpaQXE1NkRkWUV1YzMzUldQTHVHVjVYb2g0Zy9BR0IxU3haMWZaa284WHlJbDVRYVFQenVqTWhjTkkrK21QRW1lCmw4aEJBb0dBWTVNRkpCTzZWaWlvZnZXNjVRUmlLT2dEVGR3QXlyYS91SGZ0S2xnMjZJZzYxeWlubDVZVUlZbDMKc2ZRTy85RTF1cjRyOE5qYUNwTTE5alRqTHFDSFNmVDVLWUc3U0xqS0s5OGNLOEJJTmxkbGc2TUNUZnZDZkI3VApsemJVNjZDWVVCMnhabWVLWDRaUzI2eFpleTZqTVdiVFpWTUQwaGFBVFY3STRyMklsM2c9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-mongodb-connection"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
type: kubernetes.io/basic-auth
stringData:
  username: "userM"
data:
  password: "UjRudGtxSEFjTDlCdUxURnpFUGdPUHN6cmJUclVPeWk="
  adminPassword: "RDY3eWFSbVNqbnhuTENNU0xDRWZycG84VDFVY2t5M1VnQ0tHeTZDWQ=="
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-ingress-secret"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMVENDQWhXZ0F3SUJBZ0lRYWZ4bkhOak96MUhzV08zeWx1SWJEREFOQmdrcWhraUc5dzBCQVFzRkFEQXkKTVRBd0xnWURWUVFERXlkclpYbGpiRzloYXkxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdQphVzh3SGhjTk1qUXdOakUyTURBd016STRXaGNOTWpVd05qRTJNREF3TXpJNFdqQXlNVEF3TGdZRFZRUURFeWRyClpYbGpiRzloYXkxdGFXTnliMk5yY3k0eE9USXVNVFk0TGprNUxqRXdNQzV1YVhBdWFXOHdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3l4VE55ZEJsL2VpUm1Oc1oySkdiOWxPNVM4Qms5d3J5WQpyQXNYdkZlc2YzLzBjNXA2ektIZm80OHlIYUdLMXI5TXd2OUUzcnY0aUFwNnFyMEx5alM1aW5qM3BYQ1NhSkZUCmh2bXNBQnVrbmJWL09YL0pISEVtdHNJZEtNcUV0dUdjckF1WDFmNjltb0NidlVjT2QwajVzTitaekpMdkxWak8Ka0Z3cFVKWWNhQ2tnWDBlZjZwRjR2czc2UHVZM2dacDZjOGNNaDBNNHBKb2svaEtwdlNEVWtGRERZeW1JT1JkTwpTdFd0eW9RbjZiUnJ0SVo4Y2VGM1pHUm5DRDhQcUpTbmo3L3BqWnVTMHN1Y3hZQ2p4MG41ZzZVNE8wVFhCTCtFCnNVU1RPeng3R2NSQ0J5ekFZWlNWTGpCenVmcDVEcVhpTGNhczBDVldUMTFTUmZub2piSEZBZ01CQUFHalB6QTkKTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJdwpEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVRldHZSWGxxMXByWXAyamVEOEhJCnU0Q3hMVS9VRlQ5bjNMODAvTGJQNUJOMGwrV2F5UnlCYWpJMUR6ZkxhL1pLK2ZZYTJjak44aWlrSlFQRmlCOVMKWi9xK1QzTGg1UFRtZGJPNm5mU0lJK2I5WklGYXZqdmhsa0dmZFFaSW5IVVVFSGJPRS8vMW5EdHh6dmx1QmpvbQpWblRaRVlFazN5dkRvRTZQT1hNWVMwQ0JOM1JUVEd3dEprNkZLNGNTUkxDR3NoRXB6N2tsbG10MFRjMzRtek01CmdsOG9uT1pLcWgvYmxKRU9Hc2h2c2lEWndQNnc2bStKOHB6MEVQdlY4cjE1WnI1dXVXWVVFN0VXc0haU2g2R2kKS3oxeDB0R0d5VEMwbXhBT0t2bUtodEpmZlZmYk5kdHl1VWNwOWxUUmJTeUdnWm1HR3puRXpXMUNyQzZhT1VUWgpnUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3NVemNuUVpmM29rWmpiR2RpUm0vWlR1VXZBWlBjSzhtS3dMRjd4WHJIOS85SE9hCmVzeWgzNk9QTWgyaGl0YS9UTUwvUk42NytJZ0tlcXE5QzhvMHVZcDQ5NlZ3a21pUlU0YjVyQUFicEoyMWZ6bC8KeVJ4eEpyYkNIU2pLaExiaG5Ld0xsOVgrdlpxQW03MUhEbmRJK2JEZm1jeVM3eTFZenBCY0tWQ1dIR2dwSUY5SApuK3FSZUw3TytqN21ONEdhZW5QSERJZERPS1NhSlA0U3FiMGcxSkJRdzJNcGlEa1hUa3JWcmNxRUorbTBhN1NHCmZISGhkMlJrWndnL0Q2aVVwNCsvNlkyYmt0TExuTVdBbzhkSitZT2xPRHRFMXdTL2hMRkVrenM4ZXhuRVFnY3MKd0dHVWxTNHdjN242ZVE2bDRpM0dyTkFsVms5ZFVrWDU2STJ4eFFJREFRQUJBb0lCQUYrQjlaTnZMWFFxaUNuSApsODNrY3RXRmJMSUlyaU9OMTM1bFkrUEJic0dzdUdxY0hHc0F5bmFWaGxwSzlGUWRtTVJrNVVZaERTR2haSi9XCmVmdERnMW1nL2pHb1JIVWp3b2h5Y3c4T1c3WmR2MnFDQ0tBa1B0dGxCbDNYdmlLYkpmdXkrdHFhckdjVmxTSWYKUkVnWk9IYVZwVkFndUZ0cHlhbEovTUxoMStEQ2JGUXNNMURUTldaVXZ6UFRZZ29vSzJwK0daOUwzQ0tHRll5RgpwK3BsWEpVTzBHcjZZL0ZZREYxWWcwa0VOT1h6MXpyQ2NNUnBkd3JFY0pjZjR0TjJpSERaOXRtazJGSGNXcmRoCnBXVDdta0tCM1BQWVU4L3BDbjFyM081NE5odEJWYUlaVVVaaGpJOEwxK0p6YkkwaDJiOHRjWHhQMG5vQkNpS0MKUEpsQjEvMENnWUVBNGI1RVNDdHRaYXpFR3ZINUpHeURyb0YzZXczMVJrR1J4VFdkN0ZLOTlFK2NLL1A5ZjJEaAorWGtPdVRpejhyQmJGNm9LRSt5cXcyTkVqMSttQTdzU2V4bytjdm5QdVJKOTIwY2E1K1AwT2RFZWV6TTFvVCswCjJObnBVeWppdzhWcnBUa0N2bUlaVXRSSUJFVUZmRHBGL1pKcjJNYmpmcHk1SlZjbGJUMjhUTThDZ1lFQXlyc3gKYlJ0Qk5RNTkyTlBIU0U2b04vcVZQeXJDQThNWUVQc0ZlNnc3cDhaVXNtaFR5N2M1aVRyTzIyam5TdEJzZnNaUgpnWGEwYVVNRWFVQ09oSzlSL2tVTjYxWlRSbWlqS3h0aUdxWTl4aEdnUkh0NWg2aThsYWlxVjl6WjNoTHFBUGxrCmtYZE53VzVjK0xNVUtqN3hGWUo0SFRodENXTjNwQU5CUU50M1JTc0NnWUE0VDVvQTFyUm5WSDFtcTAyV3hHcmsKc083NUJ6WlQzQzljbms5U2tDRktQRUdjeFRSSy9nUGdrMDRVN2d3VlVlQ25Pb2RoQ1B4ZjJQZFZQR3JSSzIwawp3QnNyMnh6eDhhYnJlQVZDS3g3VS9WRTVNa0VDaEQyOGlqOGx1MkUxckoxNWpZc2RxcUxlZ28ya1l3TkhSZElICnV1cWtISmpMRUpVdXQxcGlzYSt6Q1FLQmdRREZWSVljckczQkpoVHE2K0RMQ2YwRlYvelQybHUwNjc1T01QZzYKVkFCUkkyU25yNUw0OUtTbFpiK1pvN2VXZzk5SFd1UlUvdVZHbkR2Nzh5R0dGMXpaQWdBMWRQWmp6MUFia25EZwpmYllkU0dUV285VThiY3I2WlkxQkxyQkdUK1RFQS95Vzl5aVJRa3B1cldqUVlpbXFCUy9EU1h3Z3FsZjNKay9xCndIU010d0tCZ0hVUGd6czl5L2RyV2lob25jVVdJcWQydnNVQmUwUGY3OWt1UG9NanRVYmg4YS9EVVZxNHBQU1MKSGZTbThsSEJJdmZvZWgybncvTmZNTW1QRWs1RXhoT2loeitZMGJRaU1LcnBDRDhuL2l1WXFUZHlITzhWVzg4UQppYTYzQXhTbi9SK0ZrRkd5dlRtRWNEUDJUaXlNTnZRRFVvWXR4UDhlUHhzTngyVTMrL2lJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: microcks/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "microcks-keycloak-admin"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
type: kubernetes.io/basic-auth
stringData:
  username: "admin"
  postgresUsername: "userP"
data:
  password: "QzNaUU5ZSlJ3MUo2VHJ2YXdLbkVDYVBvcUx0MUVTVk5uc0dralE5Vw=="
  postgresPassword: "bFkxcTB2NWNTbHRXRk1WVlo4QnZZQ3Q3ajYwNDlETnc="
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-config"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
data:
  features.properties: |-
    features.feature.microcks-hub.enabled=true
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles=admin,manager,manager-any

    features.feature.repository-filter.enabled=false
    features.feature.repository-filter.label-key=app
    features.feature.repository-filter.label-label=Application
    features.feature.repository-filter.label-list=app,status

    features.feature.repository-tenancy.enabled=false
    features.feature.repository-tenancy.artifact-import-allowed-roles=admin,manager,manager-any

    features.feature.async-api.enabled=false
    features.feature.async-api.default-binding=KAFKA
    features.feature.async-api.endpoint-WS=microcks-ws-microcks.192.168.99.100.nip.io
    features.feature.async-api.endpoint-KAFKA=microcks-kafka.192.168.99.100.nip.io:443

    features.feature.ai-copilot.enabled=false
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://microcks-microcks.192.168.99.100.nip.io/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm=microcks
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled=false
    async-api.default-binding=KAFKA
    async-api.default-frequency=10

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
    
    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key

    # AI Copilot configuration properties
    ai-copilot.enabled=false
    ai-copilot.implementation=openai
    ai-copilot.openai.api-key=sk-my-openai-api-token
    ai-copilot.openai.timeout=20
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="INFO"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.codahale.metrics" level="WARN"/>
      <logger name="com.ryantenney" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="com.zaxxer" level="WARN"/>
      <logger name="io.undertow" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.hibernate.validator" level="WARN"/>
      <logger name="org.hibernate" level="WARN"/>
      <logger name="org.hibernate.ejb.HibernatePersistence" level="OFF"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
---
# Source: microcks/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "microcks-keycloak-config"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "users" : [
        {
          "username" : "user",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user" ]
          }
        },
        {
          "username" : "manager",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user", "manager" ]
          }
        },
        {
          "username" : "admin",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "realm-management": [ "manage-users", "manage-clients" ],
            "account": [ "manage-account" ],
            "microcks-app": [ "user", "manager", "admin" ]
          }
        }
      ],
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "groups": [
        {
          "name": "microcks",
          "path": "/microcks",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": [
            {
              "name": "manager",
              "path": "/microcks/manager",
              "attributes": {},
              "realmRoles": [],
              "clientRoles": {},
              "subGroups": []
            }
          ]
        }
      ],
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ],
        "realm-management": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manage-users",
              "manage-clients"
            ]
          }
        ]
      },
      "clients": [
        {
          "clientId": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "redirectUris": [
            "https://microcks-microcks.192.168.99.100.nip.io/*"
          ],
          "webOrigins": [
            "+"
          ],
          "fullScopeAllowed": false,
          "protocolMappers": [
            {
              "name": "microcks-group-mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "microcks-groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "microcks-serviceaccount",
          "secret": "ab54d329-e435-41ae-a900-ec6b3fe15c54",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "keycloakVersion": "10.0.1"
    }
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
# Source: microcks/templates/claim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    

spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: spring
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: spring-grpc
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: spring
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 3000
    name: postman-runtime
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: postman-runtime
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: mongodb
    protocol: TCP
    port: 27017
    targetPort: 27017
    nodePort: 0
  selector:
    app: "microcks"
    container: mongodb
    group: microcks
  type: ClusterIP
  sessionAffinity: None
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    name: keycloak
  type: "ClusterIP"
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak
    group: microcks
---
# Source: microcks/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  ports:
  - name: postgresql
    protocol: TCP
    port: 5432
    targetPort: 5432
    nodePort: 0
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    container: spring
    group: microcks
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks"
        container: spring
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: spring
        image: quay.io/microcks/microcks:1.9.1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod
          - name: SPRING_DATA_MONGODB_URI
            value: mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@microcks-mongodb:27017/${SPRING_DATA_MONGODB_DATABASE}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "microcks-mongodb-connection"
          - name: SPRING_DATA_MONGODB_DATABASE
            value: microcks
          - name: POSTMAN_RUNNER_URL
            value: http://microcks-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://microcks:8080
          - name: KEYCLOAK_ENABLED
            value: "true"
          - name: KEYCLOAK_URL
            value: https://keycloak-microcks.192.168.99.100.nip.io
          - name: KAFKA_BOOTSTRAP_SERVER
            value: "microcks-kafka-kafka-bootstrap:9092"
          - name: SERVICES_UPDATE_INTERVAL
            value: 0 0 0/2 * * *
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "microcks-config"
            mountPath: "/deployments/config"
          - name: "microcks-grpc-certs"
            mountPath: "/deployments/config/grpc"
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "microcks-config"
          configMap:
            name: "microcks-config"
        - name: "microcks-grpc-certs"
          secret:
            secretName: "microcks-microcks-grpc-secret"
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-postman-runtime"
  labels:
    app: "microcks"
    container: postman-runtime
    group: microcks
    
  annotations:
    

spec:
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: "microcks-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: "microcks-postman-runtime"
        container: postman-runtime
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: postman-runtime
        image: quay.io/microcks/microcks-postman-runtime:latest
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          limits:
            memory: 256Mi
          requests:
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-mongodb"
  labels:
    app: "microcks"
    container: mongodb
    group: microcks
    
  annotations:
    

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 184
        runAsGroup: 184
        fsGroup: 184
      containers:
      - name: mongodb
        image: centos/mongodb-36-centos7:latest
        ports:
        - containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-mongodb-connection"
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "microcks-mongodb-connection"
        - name: MONGODB_DATABASE
          value: "microcks"
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 512Mi
        volumeMounts:
        - name: "microcks-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "microcks-mongodb-data"
        persistentVolumeClaim:
          claimName: "microcks-mongodb"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    container: keycloak
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
        
      annotations:
        checksum/config: ef053aea2292a06ff0adcf574e7fef79e87f3fa5bd8f35aea03b55fcc2d7cbeb
        
    spec:
      containers:
      - name: keycloak-server
        image: quay.io/keycloak/keycloak:22.0.3
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 400m
            memory: 512Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        - '--hostname=keycloak-microcks.192.168.99.100.nip.io'
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              key: username
              name: "microcks-keycloak-admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "microcks-keycloak-admin"
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "microcks-keycloak-postgresql"
        - name: KC_PROXY
          value: "edge"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: microcks-keycloak-config
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "microcks-keycloak-config"
        configMap:
          name: "microcks-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
# Source: microcks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "microcks-keycloak-postgresql"
  labels:
    app: "microcks"
    container: keycloak-postgresql
    group: microcks
    
  annotations:
    
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "microcks"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "microcks"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
        
      annotations:
        
    spec:
      securityContext:
        runAsUser: 26
        runAsGroup: 26
        fsGroup: 26
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: centos/postgresql-95-centos7:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
              -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "microcks-keycloak-admin"
        - name: POSTGRESQL_DATABASE
          value: root
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: '100'
        - name: POSTGRESQL_SHARED_BUFFERS
          value: 12MB
        volumeMounts:
          - name: "microcks-keycloak-postgresql-data"
            mountPath: "/var/lib/pgsql/data"
      volumes:
      - name: "microcks-keycloak-postgresql-data"
        persistentVolumeClaim:
          claimName: "microcks-keycloak-postgresql"
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "microcks-microcks.192.168.99.100.nip.io"
    secretName: microcks-microcks-ingress-secret
  rules:
  - host: "microcks-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks"
            port:
              number: 8080
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-grpc"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
spec:
  tls:
  - hosts:
     - "microcks-grpc-microcks.192.168.99.100.nip.io"
  rules:
  - host: "microcks-grpc-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-grpc"
            port:
              number: 9090
---
# Source: microcks/templates/ingress.yaml
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "microcks-keycloak"
  labels:
    app: "microcks"
    group: microcks
    
  annotations:
    
    ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - "keycloak-microcks.192.168.99.100.nip.io"
    secretName: microcks-keycloak-ingress-secret
  rules:
  - host: "keycloak-microcks.192.168.99.100.nip.io"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "microcks-keycloak"
            port:
              number: 8080
