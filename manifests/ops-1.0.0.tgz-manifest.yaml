---
# Source: ops/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-ops
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: ops/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  name: my-release-ops
rules:
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - clusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - clusters/finalizers
  verbs:
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - clusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - hosts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - hosts/finalizers
  verbs:
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - hosts/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - tasks
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - tasks/finalizers
  verbs:
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - tasks/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - taskruns
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - taskruns/finalizers
  verbs:
  - update
- apiGroups:
  - crd.chenshaowen.com
  resources:
  - taskruns/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups: 
  - ""
  resources:
  - events
  - nodes
  - pods
  - pods/status
  - pods/log
  - secrets
  - namespaces
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# Source: ops/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  name: my-release-ops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-ops
subjects:
  - kind: ServiceAccount
    name: my-release-ops
    namespace: default
---
# Source: ops/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  name: my-release-ops-leader-election-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# Source: ops/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  name: my-release-ops-leader-election-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-ops
subjects:
  - kind: ServiceAccount
    name: my-release-ops-leader-election-role
    namespace: default
---
# Source: ops/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ops-server
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ops-server
    app.kubernetes.io/instance: my-release
---
# Source: ops/templates/deployment-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ops-server
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ops-server
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ops-server
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-ops
      securityContext:
        runAsUser: 0
      containers:
        - name: ops-server
          securityContext:
            runAsUser: 0
          image: "shaowenchen/ops-server:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              port: 80
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
              port: 80
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: ops/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ops
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ops
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ops
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-ops
      securityContext:
        {}
      containers:
        - args:
          - --health-probe-bind-address=:8081
          - --metrics-bind-address=:8080
          - --leader-elect
          command:
          - /app/ops-controller-manager
          name: ops
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          image: "shaowenchen/ops-controller-manager:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
              port: 8081
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
              port: 8081
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: ACTIVE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
---
# Source: ops/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-ops-test-connection"
  labels:
    helm.sh/chart: ops-1.0.0
    app.kubernetes.io/name: ops
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-ops:80']
  restartPolicy: Never
