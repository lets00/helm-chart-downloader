---
# Source: nifi-registry/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-nifi-registry
  labels:
    helm.sh/chart: nifi-registry-1.14.0-r002
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: nifi-registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nifi-registry-config
  labels:
    helm.sh/chart: nifi-registry-1.14.0-r002
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
data:
  authorizers.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <authorizers>
        <userGroupProvider>
            <identifier>file-user-group-provider</identifier>
            <class>org.apache.nifi.registry.security.authorization.file.FileUserGroupProvider</class>
            <property name="Users File">./mutatable-conf/users.xml</property>
            
            
            
            
        </userGroupProvider>
        
        <userGroupProvider>
            <identifier>database-user-group-provider</identifier>
            <class>org.apache.nifi.registry.security.authorization.database.DatabaseUserGroupProvider</class>
            
            
            
            <property name="Initial User Identity Node0">CN=my-release-nifi-registry-0.my-release-nifi-registry-headless.default.svc.cluster.local, OU=NIFI</property>
            
        </userGroupProvider>

        

        
        
        <userGroupProvider>
            <identifier>composite-configurable-user-group-provider</identifier>
            <class>org.apache.nifi.registry.security.authorization.CompositeConfigurableUserGroupProvider</class>
            <property name="Configurable User Group Provider">file-user-group-provider</property>
            
            
            
        </userGroupProvider>

        <accessPolicyProvider>
            <identifier>file-access-policy-provider</identifier>
            <class>org.apache.nifi.registry.security.authorization.file.FileAccessPolicyProvider</class>
            <property name="User Group Provider">composite-configurable-user-group-provider</property>
            <property name="Authorizations File">./mutatable-conf/authorizations.xml</property>
            
            
            <property name="Node Group"></property>
        </accessPolicyProvider>

        <accessPolicyProvider>
            <identifier>database-access-policy-provider</identifier>
            <class>org.apache.nifi.registry.security.authorization.database.DatabaseAccessPolicyProvider</class>
            <property name="User Group Provider">database-user-group-provider</property>
            
            
            <property name="NiFi Group Name"></property>
        </accessPolicyProvider>

        <authorizer>
            <identifier>managed-authorizer</identifier>
            <class>org.apache.nifi.registry.security.authorization.StandardManagedAuthorizer</class>
            <property name="Access Policy Provider">file-access-policy-provider</property>
        </authorizer>

    </authorizers>
  bootstrap.conf: |
    
    conf.dir=./conf
    
    docs.dir=./docs
    
    graceful.shutdown.seconds=20
    
    java=java
    
    java.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true
    
    java.arg.2=-Xms512m
    
    java.arg.3=-Xmx512m
    
    java.arg.4=-Djava.net.preferIPv4Stack=true
    
    java.arg.5=-Dsun.net.http.allowRestrictedHeaders=true
    
    java.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol
    
    lib.dir=./lib
    
    nifi.registry.bootstrap.sensitive.key=
    
    run.as=
    
    working.dir=
    
  registry-aliases.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <aliases>
    </aliases>
  identity-providers.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <identityProviders>
        
        
    </identityProviders>
  providers.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <providers>
        
        <flowPersistenceProvider>
            <class>org.apache.nifi.registry.provider.flow.FileSystemFlowPersistenceProvider</class>
            <property name="Flow Storage Directory">./flow_storage</property>
        </flowPersistenceProvider>
        

        



        

        

        
        <extensionBundlePersistenceProvider>
            <class>org.apache.nifi.registry.provider.extension.FileSystemBundlePersistenceProvider</class>
            <property name="Extension Bundle Storage Directory">./extension_bundles</property>
        </extensionBundlePersistenceProvider>
        

        
    </providers>
  nifi-registry.properties: |
    
    nifi.registry.db.directory=
    
    nifi.registry.db.driver.class=org.h2.Driver
    
    nifi.registry.db.driver.directory=
    
    nifi.registry.db.maxConnections=5
    
    nifi.registry.db.password=nifireg
    
    nifi.registry.db.sql.debug=false
    
    nifi.registry.db.url=jdbc:h2:./database/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE
    
    nifi.registry.db.url.append=
    
    nifi.registry.db.username=nifireg
    
    nifi.registry.extension.dir.aws=./ext/aws/lib
    
    nifi.registry.extensions.working.directory=./work/extensions
    
    nifi.registry.kerberos.krb5.file=
    
    nifi.registry.kerberos.spnego.authentication.expiration=12 hours
    
    nifi.registry.kerberos.spnego.keytab.location=
    
    nifi.registry.kerberos.spnego.principal=
    
    nifi.registry.providers.configuration.file=./conf/providers.xml
    
    nifi.registry.registry.alias.configuration.file=./conf/registry-aliases.xml
    
    nifi.registry.revisions.enabled=false
    
    nifi.registry.security.authorizer=managed-authorizer
    
    nifi.registry.security.authorizers.configuration.file=./conf/authorizers.xml
    
    nifi.registry.security.identity.provider=
    
    nifi.registry.security.identity.providers.configuration.file=./conf/identity-providers.xml
    
    nifi.registry.security.keyPasswd=
    
    nifi.registry.security.keystore=
    
    nifi.registry.security.keystorePasswd=
    
    nifi.registry.security.keystoreType=
    
    nifi.registry.security.needClientAuth=
    
    nifi.registry.security.truststore=
    
    nifi.registry.security.truststorePasswd=
    
    nifi.registry.security.truststoreType=
    
    nifi.registry.security.user.oidc.client.id=
    
    nifi.registry.security.user.oidc.client.secret=
    
    nifi.registry.security.user.oidc.connect.timeout=
    
    nifi.registry.security.user.oidc.discovery.url=
    
    nifi.registry.security.user.oidc.preferred.jwsalgorithm=
    
    nifi.registry.security.user.oidc.read.timeout=
    
    nifi.registry.web.http.host=0.0.0.0
    
    nifi.registry.web.http.port=18080
    
    nifi.registry.web.https.host=
    
    nifi.registry.web.https.port=
    
    nifi.registry.web.jetty.threads=200
    
    nifi.registry.web.jetty.working.directory=./work/jetty
    
    nifi.registry.web.should.send.server.version=true
    
    nifi.registry.web.war.directory=./lib
---
# Source: nifi-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nifi-registry
  labels:
    helm.sh/chart: nifi-registry-1.14.0-r002
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 18080
      name: web-http
      targetPort: 18080
  selector:
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
---
# Source: nifi-registry/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-nifi-registry
  labels:
    helm.sh/chart: nifi-registry-1.14.0-r002
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nifi-registry
      app.kubernetes.io/instance: my-release
  serviceName: my-release-nifi-registry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nifi-registry
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-nifi-registry
      containers:
        - name: nifi-registry
          image: "apache/nifi-registry:1.14.0"
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -ce
            - |
              scripts_dir='/opt/nifi-registry/scripts'

              [ -f "${scripts_dir}/common.sh" ] && . "${scripts_dir}/common.sh"

              cat /opt/nifi-registry/nifi-registry-current/./conf/providers.xml

              # Establish baseline properties
              FQDN=$(hostname -f)
              cp "${NIFI_REGISTRY_HOME}/conf/nifi-registry.properties.base" "${NIFI_REGISTRY_HOME}/conf/nifi-registry.properties"

              prop_replace 'registry.web.http.host'      "$FQDN"

              # Continuously provide logs so that 'docker logs' can produce them
              tail -F "${NIFI_REGISTRY_HOME}/logs/nifi-registry-app.log" &
              "${NIFI_REGISTRY_HOME}/bin/nifi-registry.sh" run &
              nifi_registry_pid="$!"

              trap "echo Received trapped signal, beginning shutdown...;" KILL TERM HUP INT EXIT;

              echo NiFi-Registry running with PID ${nifi_registry_pid}.
              wait ${nifi_registry_pid}
          ports:
            - name: web-http
              containerPort: 18080
              protocol: TCP
          env:
          volumeMounts:
            - name: "database"
              mountPath: /opt/nifi-registry/nifi-registry-current/database
            - name: "flow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/flow_storage
            - name: "mutatable-conf"
              mountPath: /opt/nifi-registry/nifi-registry-current/mutatable-conf
            - name: "extension-bundle"
              mountPath: /opt/nifi-registry/nifi-registry-current/extension_bundles
            - name: "bootstrap-conf"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/bootstrap.conf
              subPath: "bootstrap.conf"
            - name: "nifi-registry-properties"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/nifi-registry.properties.base
              subPath: "nifi-registry.properties"
            - name: "authorizers-xml"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/authorizers.xml
              subPath: "authorizers.xml"
            - name: "identity-providers-xml"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/identity-providers.xml.base
              subPath: "identity-providers.xml"
            - name: "registry-aliases-xml"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/registry-aliases.xml
              subPath: "registry-aliases.xml"
            - name: "providers-xml"
              mountPath: /opt/nifi-registry/nifi-registry-current/conf/providers.xml
              subPath: "providers.xml"
          resources:
            {}
          readinessProbe:
            tcpSocket:
              port: 18080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 2
            failureThreshold: 3
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-registry-properties"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "nifi-registry.properties"
              path: "nifi-registry.properties"
      - name: "authorizers-xml"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.xml"
      - name: "identity-providers-xml"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "identity-providers.xml"
              path: "identity-providers.xml"
      - name: "providers-xml"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "providers.xml"
              path: "providers.xml"
      - name: "registry-aliases-xml"
        configMap:
          name: my-release-nifi-registry-config
          items:
            - key: "registry-aliases.xml"
              path: "registry-aliases.xml"
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
  
  volumeClaimTemplates:
  - metadata:
      name: database
    spec:
      accessModes:
      - ReadWriteOnce
      
      resources:
        requests:
          storage: "1Gi"
  - metadata:
      name: flow-storage
    spec:
      accessModes:
      - ReadWriteOnce
      
      resources:
        requests:
          storage: "1Gi"
  - metadata:
      name: mutatable-conf
    spec:
      accessModes:
        - "ReadWriteOnce"
      storageClassName: 
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: extension-bundle
    spec:
      accessModes:
        - "ReadWriteOnce"
      storageClassName: 
      resources:
        requests:
          storage: 10Gi
---
# Source: nifi-registry/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-nifi-registry-test-connection"
  labels:
    helm.sh/chart: nifi-registry-1.14.0-r002
    app.kubernetes.io/name: nifi-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-nifi-registry:/nifi-registry']
  restartPolicy: Never
