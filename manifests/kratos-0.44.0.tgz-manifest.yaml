---
# Source: kratos/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kratos
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: false
---
# Source: kratos/templates/configmap-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kratos-config
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  # Render the kratos config:
  "kratos.yaml": |
    courier:
      smtp: {}
    serve:
      admin:
        port: 4434
      public:
        port: 4433
  # Render the identity schemas to disk:
---
# Source: kratos/templates/service-admin.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kratos-admin
  namespace: default
  labels:
    app.kubernetes.io/component: admin
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-admin
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: my-release
---
# Source: kratos/templates/service-public.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kratos-public
  namespace: default
  labels:
    app.kubernetes.io/component: public
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http-public
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos
    app.kubernetes.io/instance: my-release
---
# Source: kratos/templates/statefulset-svc.yaml
# Headless Service for StatefulSet. See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#limitations 
# and https://kubernetes.io/docs/concepts/services-networking/service/#headless-services for details.
apiVersion: v1
kind: Service
metadata:
  name: my-release-kratos-courier
  namespace: default
  labels:
    app.kubernetes.io/component: courier
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 80
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: my-release-kratos-courier
    app.kubernetes.io/instance: my-release
---
# Source: kratos/templates/deployment-kratos.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kratos
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  progressDeadlineSeconds: 3600
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos
        helm.sh/chart: kratos-0.44.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "v1.1.0"
        app.kubernetes.io/managed-by: Helm
      annotations:        
        checksum/kratos-config: 1025e831ba82e6137413a0434f8c7d778d98a66b879b1dada2a5e6f1f497bb52
        checksum/kratos-templates: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/kratos-secrets: ca83ad854c99cd9838d04861c503f02661e781c93261662f46b368efd6b10638
    spec:
      initContainers:
      volumes:
        - name: kratos-config-volume
          configMap:
            name: my-release-kratos-config
      automountServiceAccountToken: false
      serviceAccountName: my-release-kratos
      terminationGracePeriodSeconds: 60
      containers:
        - name: kratos
          image: oryd/kratos:v1.1.0
          imagePullPolicy: IfNotPresent
          command:
            - kratos
          args:
            - serve
            - all
            - --config
            - /etc/config/kratos.yaml
          volumeMounts:
            - name: kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsCipher
                  optional: true
          ports:
            - name: http-admin
              containerPort: 4434
              protocol: TCP
            - name: http-public
              containerPort: 4433
              protocol: TCP
          lifecycle:
            {}
          livenessProbe:
            httpGet:
              path: /admin/health/alive
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /admin/health/ready
              port: 4434
              httpHeaders:
                - name: Host
                  value: '127.0.0.1'
            failureThreshold: 60
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
            seLinuxOptions:
              level: s0:c123,c456
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
---
# Source: kratos/templates/statefulset-mail.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-kratos-courier
  namespace: default
  labels:
    app.kubernetes.io/component: courier
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-kratos-courier
      app.kubernetes.io/instance: my-release
  serviceName: my-release-kratos-courier
  replicas: 1
  revisionHistoryLimit: 5
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-kratos-courier
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: courier
      annotations:        
        checksum/kratos-config: 1025e831ba82e6137413a0434f8c7d778d98a66b879b1dada2a5e6f1f497bb52
        checksum/kratos-templates: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/kratos-secrets: 640bf587bb7655b7bb7ff176ef7329260b6e90ae79b3d029808b58f7343c302b
    spec:
      serviceAccountName: my-release-kratos
      terminationGracePeriodSeconds: 60
      containers:
        - name: my-release-kratos-courier
          image: oryd/kratos:v1.1.0
          imagePullPolicy: IfNotPresent
          args:
            - courier
            - watch 
            - --config
            - /etc/config/kratos.yaml
            - --expose-metrics-port
            - "4434"
          volumeMounts:
            - name: my-release-kratos-config-volume
              mountPath: /etc/config
              readOnly: true
          env:
            - name: LOG_FORMAT
              value: json
            - name: LOG_LEVEL
              value: trace
            - name: SECRETS_DEFAULT
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsDefault
                  optional: true
            - name: SECRETS_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsCookie
                  optional: true
            - name: SECRETS_CIPHER
              valueFrom:
                secretKeyRef:
                  name: my-release-kratos
                  key: secretsCipher
                  optional: true
          ports:
            - name: http-metrics
              containerPort: 4434
              protocol: TCP
          resources:
            null
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65534
            runAsNonRoot: true
            runAsUser: 65534
            seLinuxOptions:
              level: s0:c123,c456
            seccompProfile:
              type: RuntimeDefault
      volumes:
        - name: my-release-kratos-config-volume
          configMap:
            name: my-release-kratos-config
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
---
# Source: kratos/templates/job-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kratos-job
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
automountServiceAccountToken: false
---
# Source: kratos/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kratos
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
    helm.sh/resource-policy: keep
type: Opaque
data:
  dsn: ""
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsDefault: "TEtscW1aMjZ2Y3hlZ1lxaUwzdDVkUnk3NW93QVF4UDA="
  secretsCookie: "c0NyeW41cHgwVzV4anVnYXZtNGFoV0hlOGRNdHZMVTI="
  secretsCipher: "UnQxVTk5a0kzZTBmY2tvb3ZCcGdLQnhZeHhpdUVlR3A="
---
# Source: kratos/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-kratos-test-connection"
  namespace: default
  labels:
    app.kubernetes.io/name: kratos
    helm.sh/chart: kratos-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: "busybox:1"
      command: ['wget']
      args:  ['my-release-kratos-admin:80/admin/health/ready']
  restartPolicy: Never
