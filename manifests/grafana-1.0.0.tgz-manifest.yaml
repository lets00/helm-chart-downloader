---
# Source: grafana/templates/configmap-datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-grafana-datasources
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
  annotations:
    helm.sh/hook-weight: "0"
data:
  IDO_icinga.json: |
    {
      "orgId": 1,
      "name": "IDO_icinga",
      "type": "mysql",
      "typeLogoUrl": "public/app/plugins/datasource/mysql/img/mysql_logo.svg",
      "access": "proxy",
      "url": "mariadb:3306",
      "password": "juniper@123",
      "user": "root",
      "database": "icinga",
      "basicAuth": false,
      "isDefault": false,
      "jsonData": {
        "keepCookies": []
      },
      "readOnly": false
    }
  audit_config.json: "{\r\n    \"orgId\": 1,\r\n    \"name\": \"Audit_Config\",\r\n
    \   \"type\": \"mysql\",\r\n    \"typeLogoUrl\": \"public/app/plugins/datasource/mysql/img/mysql_logo.svg\",\r\n
    \   \"access\": \"proxy\",\r\n    \"url\": \"mariadb:3306\",\r\n    \"password\":
    \"juniper@123\",\r\n    \"user\": \"root\",\r\n    \"database\": \"audit_config\",\r\n
    \   \"basicAuth\": false,\r\n    \"isDefault\": false,\r\n    \"jsonData\": {},\r\n
    \   \"readOnly\": false\r\n}\r\n"
  grafana_thruk.json: |-
    {
      "orgId": 1,
      "name": "grafana_thruk",
      "type": "icinga2-report-datasource",
      "typeLogoUrl": "public/plugins/icinga2-report-datasource/logo_small.png",
      "access": "proxy",
      "url": "http://icinga2-report:8888/api/v1/grafana_thruk",
      "password": "",
      "user": "",
      "database": "",
      "basicAuth": false,
      "isDefault": false,
      "jsonData": {
        "keepCookies": []
      },
      "readOnly": false
    }
  hardware_inventory.json: |
    {
      "orgId": 1,
      "name": "junos_tableview",
      "type": "mysql",
      "typeLogoUrl": "public/app/plugins/datasource/mysql/img/mysql_logo.svg",
      "access": "proxy",
      "url": "mariadb:3306",
      "password": "juniper@123",
      "user": "root",
      "database": "junos_tableview",
      "basicAuth": false,
      "isDefault": false,
      "jsonData": {},
      "readOnly": false
    }
  influxdb_nms.json: |-
    {
      "orgId": 1,
      "name": "influxdb_nms",
      "type": "influxdb",
      "typeLogoUrl": "public/app/plugins/datasource/influxdb/img/influxdb_logo.svg",
      "access": "proxy",
      "url": "http://influxdb:8086",
      "password": "juniper@123",
      "user": "juniper",
      "database": "influxdb_nms",
      "basicAuth": false,
      "isDefault": false,
      "jsonData": {
        "keepCookies": []
      },
      "readOnly": false
    }
  report.json: |
    {
      "orgId": 1,
      "name": "Report",
      "type": "icinga2-report-datasource",
      "typeLogoUrl": "public/plugins/icinga2-report-datasource/logo_small.png",
      "access": "proxy",
      "url": "http://icinga2-report:8888/api/v1",
      "password": "",
      "user": "",
      "database": "",
      "basicAuth": false,
      "isDefault": false,
      "jsonData": {
        "keepCookies": []
      },
      "readOnly": false
    }
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: grafana
      port: 3000
      targetPort: grafana
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-release
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 7200
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-1.0.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
  annotations:
    helm.sh/hook-weight: "0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        helm.sh/chart: grafana-1.0.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: grafana
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana
                    app.kubernetes.io/instance: my-release
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      initContainers:
        - name: wait-for-mariadb
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
              until nc -zvw5 mariadb 3306; do echo "Waiting for MariaDB..."; sleep 2; done

      containers:
        - name: grafana
          image: svtechnmaa/svtech_grafana:v1.2.2
          imagePullPolicy: "IfNotPresent"

          env:
            - name: MYSQL_HOST
              value: "mariadb"
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DB
              value: "grafana"
            - name: MYSQL_USER
              value: "grafana"
            - name: MYSQL_PASSWORD
              value: "juniper@123"
            - name: ADMIN_USER
              value: "thrukadmin"
            - name: ADMIN_PASSWORD
              value: "thrukadmin"
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: GF_INSTALL_PLUGINS
              value: briangann-datatable-panel

          ports:
            - name: grafana
              containerPort: 3000
      imagePullSecrets:
      - name: ghcr-pull-secret
---
# Source: grafana/templates/init-data.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "init-grafana-data"
  annotations:
    helm.sh/hook-weight: "0"

spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-init-repo
          image: docker.io/busybox:1.33
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -c
            - |
                until [ `ls -A /opt/SVTECH-Junos-Automation | grep 'completed' | wc -l` != 0 ];
                do
                  echo "Waiting for Init Repo...";
                  sleep 2;
                done

          volumeMounts:      
      containers:
      - name: init-data
        image: svtechnmaa/svtech_grafana:v1.2.2
        imagePullPolicy: "IfNotPresent"
        command:
          - bash
          - -ec
          - |
              GRAFANA_HOST=grafana
              TIMEOUT=${TIMEOUT:-360}
              result=false
              grafana_stats=""
              function grafana_is_up {
                  sleep 1
                  if [ "${TIMEOUT}" == 0 ]; then
                      echo "Timeout Waiting grafana Up !"
                      result="timeout"
                      return 0;
                  fi
                  echo "Waiting grafana Up ..."
                  grafana_stats=`curl -X GET -u thrukadmin:thrukadmin http://$GRAFANA_HOST:3000/api/admin/stats`
                  if [ $? == 0 ]; then
                      result="up"
                      echo "Grafana is Up"
                      true
                  else
                      TIMEOUT=$(expr $TIMEOUT - 1)
                      false
                  fi

                  return $?;
              }
              function import_grafana_entities {
                  while ! grafana_is_up ; do true; done
                  grafana_dashboard_number=`echo $grafana_stats | python2 -c "import sys, json; print json.load(sys.stdin)['dashboards']"`
                  grafana_datasource_number=`echo $grafana_stats | python2 -c "import sys, json; print json.load(sys.stdin)['datasources']"`
                  if [ "${result}" == "up" ]; then
                      if [[ ${grafana_dashboard_number} == 0 && ${grafana_datasource_number} == 0 ]]; then

                          echo "Init wizzy configuration"
                          cd /opt/grafana-entities && \
                            wizzy set grafana url http://$GRAFANA_HOST:3000 && \
                            wizzy set grafana username thrukadmin && \
                            wizzy set grafana password thrukadmin

                          echo "No Dashboard and Datasource. Import Dashboards:"
                          cd /opt/grafana-entities && wizzy export dashboards

                          echo "No Dashboard and Datasource. Import Datasource:"
                          mkdir -p /tmp/grafana-entities/datasources
                          # cp -rf /opt/grafana-entities/datasources/..data/* /tmp/grafana-entities/datasources
                          cp -rf /opt/grafana-entities/datasources/* /tmp/grafana-entities/datasources

                          cp -rf /opt/grafana-entities/conf /tmp/grafana-entities
                          # sed -i 's,%ReleaseName,my-release,g' /tmp/grafana-entities/datasources/*
                          cd /tmp/grafana-entities && wizzy export datasources
                      else
                          echo "There are ${grafana_dashboard_number} dasboards and ${grafana_datasource_number} datasources exists. Take no action !"
                      fi
                  fi
              }

              rm -rf /opt/grafana-entities/dashboards
              cp -rf /opt/SVTECH-Junos-Automation/grafana-entities/datasources /opt/grafana-entities
              cp -rf /opt/SVTECH-Junos-Automation/grafana-entities/dashboards /opt/grafana-entities

              for file in `grep -lr /opt/grafana-entities/* -e "\"refresh\": 1"`;do sed -i 's/"refresh": 1,/"refresh": 2,/g' $file ;done
              import_grafana_entities
        volumeMounts:
          # - name: grafana-datasources
          #   mountPath: /opt/grafana-entities/datasources
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana
                    app.kubernetes.io/instance: my-release
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
              

      imagePullSecrets:
      - name: ghcr-pull-secret        

      volumes:
        # - name: grafana-datasources
        #   configMap:
        #     name: my-release-grafana-datasources
---
# Source: grafana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: default
  rules:
  - http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
