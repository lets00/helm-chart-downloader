---
# Source: dex-k8s-authenticator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dex-k8s-authenticator
  labels:
    helm.sh/chart: dex-k8s-authenticator-0.0.3
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: dex-k8s-authenticator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-dex-k8s-authenticator
  labels:
    helm.sh/chart: dex-k8s-authenticator-0.0.3
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.yaml: "bGlzdGVuOiBodHRwOi8vMC4wLjAuMDo4MA=="
---
# Source: dex-k8s-authenticator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dex-k8s-authenticator
  labels:
    helm.sh/chart: dex-k8s-authenticator-0.0.3
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
      appProtocol: http
  selector:
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
---
# Source: dex-k8s-authenticator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dex-k8s-authenticator
  labels:
    helm.sh/chart: dex-k8s-authenticator-0.0.3
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dex-k8s-authenticator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dex-k8s-authenticator
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-dex-k8s-authenticator
      securityContext:
        {}
      containers:
        - name: dex-k8s-authenticator
          securityContext:
            {}
          image: "mintel/dex-k8s-authenticator:1.4.0"
          imagePullPolicy: IfNotPresent
          args: ["--config", "/etc/dex-k8s-authenticator/config.yaml"]
          env:
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/dex-k8s-authenticator
              readOnly: true
      volumes:
        - name: config
          secret:
            secretName: my-release-dex-k8s-authenticator
---
# Source: dex-k8s-authenticator/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-dex-k8s-authenticator-test-connection"
  labels:
    helm.sh/chart: dex-k8s-authenticator-0.0.3
    app.kubernetes.io/name: dex-k8s-authenticator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-dex-k8s-authenticator:80/test']
  restartPolicy: Never
