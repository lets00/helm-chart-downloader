---
# Source: docker-certs-ca-installer/templates/psp.yml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: my-release-docker-certs-ca-installer
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes:
    - 'hostPath'
    - 'secret'
    - 'configMap'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
  allowedHostPaths:
    - pathPrefix: /etc/docker/certs.d
---
# Source: docker-certs-ca-installer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-docker-certs-ca-installer
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: docker-certs-ca-installer/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-docker-certs-ca-installer
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: docker-certs-ca-installer/templates/psp-clusterrole.yml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-docker-certs-ca-installer-psp
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - my-release-docker-certs-ca-installer
---
# Source: docker-certs-ca-installer/templates/psp-clusterrolebinding.yml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-docker-certs-ca-installer-psp
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-docker-certs-ca-installer-psp
subjects:
  - kind: ServiceAccount
    name: my-release-docker-certs-ca-installer
    namespace: default
---
# Source: docker-certs-ca-installer/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-docker-certs-ca-installer
  labels:
    helm.sh/chart: docker-certs-ca-installer-1.0.0
    app.kubernetes.io/name: docker-certs-ca-installer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.33.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: docker-certs-ca-installer
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-certs-ca-installer
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-docker-certs-ca-installer
      securityContext:
        {}
      containers:
        - name: docker-certs-ca-installer
          securityContext:
            {}
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          command: [ 'sh' ]
          args:
            - '-c'
            - >
              echo "> CA installation started.";
              for FILENAME in /opt/docker-certs-configmap/*.crt; do
                  DOCKER_REGISTRY_HOST=$(basename $FILENAME .crt);
                  echo ">> Installing CA for $DOCKER_REGISTRY_HOST.";
                  mkdir -p "/etc/docker/certs.d/$DOCKER_REGISTRY_HOST";
                  cp "/opt/docker-certs-configmap/$DOCKER_REGISTRY_HOST.crt" "/etc/docker/certs.d/$DOCKER_REGISTRY_HOST/ca.crt";
              done;
              echo "> CA installation completed.";
              exec tail -f /dev/null
          volumeMounts:
          - name: etc-docker-certs-d
            mountPath: /etc/docker/certs.d
          - name: docker-certs-configmap
            mountPath: /opt/docker-certs-configmap
          resources:
            limits:
              cpu: 50m
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
      terminationGracePeriodSeconds: 5
      volumes:
        - name: etc-docker-certs-d
          hostPath:
            path: /etc/docker/certs.d
        - name: docker-certs-configmap
          configMap:
            name: my-release-docker-certs-ca-installer
