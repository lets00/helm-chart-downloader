---
# Source: vechr-iiot/charts/nats/templates/pod-disruption-budget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app.kubernetes.io/component: nats
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nats
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-nginx-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
---
# Source: vechr-iiot/charts/nats/templates/nats-box/contexts-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: nats-box
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats-box-contexts
stringData:
  default.json: |
    {
      "ca": "/etc/nats-cert/ca/ca.crt",
      "url": "nats://my-release-nats-headless"
    }
type: Opaque
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-nginx-ingress-default-server-tls
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN2akNDQWFZQ0NRREFPRjl0THNhWFhEQU5CZ2txaGtpRzl3MEJBUXNGQURBaE1SOHdIUVlEVlFRRERCWk8KUjBsT1dFbHVaM0psYzNORGIyNTBjbTlzYkdWeU1CNFhEVEU0TURreE1qRTRNRE16TlZvWERUSXpNRGt4TVRFNApNRE16TlZvd0lURWZNQjBHQTFVRUF3d1dUa2RKVGxoSmJtZHlaWE56UTI5dWRISnZiR3hsY2pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwvN2hIUEtFWGRMdjNyaUM3QlBrMTNpWkt5eTlyQ08KR2xZUXYyK2EzUDF0azIrS3YwVGF5aGRCbDRrcnNUcTZzZm8vWUk1Y2Vhbkw4WGM3U1pyQkVRYm9EN2REbWs1Qgo4eDZLS2xHWU5IWlg0Rm5UZ0VPaStlM2ptTFFxRlBSY1kzVnNPazFFeUZBL0JnWlJVbkNHZUtGeERSN0tQdGhyCmtqSXVuektURXUyaDU4Tlp0S21ScUJHdDEwcTNRYzhZT3ExM2FnbmovUWRjc0ZYYTJnMjB1K1lYZDdoZ3krZksKWk4vVUkxQUQ0YzZyM1lma1ZWUmVHd1lxQVp1WXN2V0RKbW1GNWRwdEMzN011cDBPRUxVTExSakZJOTZXNXIwSAo1TmdPc25NWFJNV1hYVlpiNWRxT3R0SmRtS3FhZ25TZ1JQQVpQN2MwQjFQU2FqYzZjNGZRVXpNQ0F3RUFBVEFOCkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpLb2tRdGRPcEsrTzhibWVPc3lySmdJSXJycVFVY2ZOUitjb0hZVUoKdGhrYnhITFMzR3VBTWI5dm15VExPY2xxeC9aYzJPblEwMEJCLzlTb0swcitFZ1U2UlVrRWtWcitTTFA3NTdUWgozZWI4dmdPdEduMS9ienM3bzNBaS9kclkrcUI5Q2k1S3lPc3FHTG1US2xFaUtOYkcyR1ZyTWxjS0ZYQU80YTY3Cklnc1hzYktNbTQwV1U3cG9mcGltU1ZmaXFSdkV5YmN3N0NYODF6cFErUyt1eHRYK2VBZ3V0NHh3VlI5d2IyVXYKelhuZk9HbWhWNThDd1dIQnNKa0kxNXhaa2VUWXdSN0diaEFMSkZUUkk3dkhvQXprTWIzbjAxQjQyWjNrN3RXNQpJUDFmTlpIOFUvOWxiUHNoT21FRFZkdjF5ZytVRVJxbStGSis2R0oxeFJGcGZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdi91RWM4b1JkMHUvZXVJTHNFK1RYZUprckxMMnNJNGFWaEMvYjVyYy9XMlRiNHEvClJOcktGMEdYaVN1eE9ycXgrajlnamx4NXFjdnhkenRKbXNFUkJ1Z1B0ME9hVGtIekhvb3FVWmcwZGxmZ1dkT0EKUTZMNTdlT1l0Q29VOUZ4amRXdzZUVVRJVUQ4R0JsRlNjSVo0b1hFTkhzbysyR3VTTWk2Zk1wTVM3YUhudzFtMApxWkdvRWEzWFNyZEJ6eGc2clhkcUNlUDlCMXl3VmRyYURiUzc1aGQzdUdETDU4cGszOVFqVUFQaHpxdmRoK1JWClZGNGJCaW9CbTVpeTlZTW1hWVhsMm0wTGZzeTZuUTRRdFFzdEdNVWozcGJtdlFmazJBNnljeGRFeFpkZFZsdmwKMm82MjBsMllxcHFDZEtCRThCay90elFIVTlKcU56cHpoOUJUTXdJREFRQUJBb0lCQVFDZklHbXowOHhRVmorNwpLZnZJUXQwQ0YzR2MxNld6eDhVNml4MHg4Mm15d1kxUUNlL3BzWE9LZlRxT1h1SENyUlp5TnUvZ2IvUUQ4bUFOCmxOMjRZTWl0TWRJODg5TEZoTkp3QU5OODJDeTczckM5bzVvUDlkazAvYzRIbjAzSkVYNzZ5QjgzQm9rR1FvYksKMjhMNk0rdHUzUmFqNjd6Vmc2d2szaEhrU0pXSzBwV1YrSjdrUkRWYmhDYUZhNk5nMUZNRWxhTlozVDhhUUtyQgpDUDNDeEFTdjYxWTk5TEI4KzNXWVFIK3NYaTVGM01pYVNBZ1BkQUk3WEh1dXFET1lvMU5PL0JoSGt1aVg2QnRtCnorNTZud2pZMy8yUytSRmNBc3JMTnIwMDJZZi9oY0IraVlDNzVWYmcydVd6WTY3TWdOTGQ5VW9RU3BDRkYrVm4KM0cyUnhybnhBb0dCQU40U3M0ZVlPU2huMVpQQjdhTUZsY0k2RHR2S2ErTGZTTXFyY2pOZjJlSEpZNnhubmxKdgpGenpGL2RiVWVTbWxSekR0WkdlcXZXaHFISy9iTjIyeWJhOU1WMDlRQ0JFTk5jNmtWajJTVHpUWkJVbEx4QzYrCk93Z0wyZHhKendWelU0VC84ajdHalRUN05BZVpFS2FvRHFyRG5BYWkyaW5oZU1JVWZHRXFGKzJyQW9HQkFOMVAKK0tZL0lsS3RWRzRKSklQNzBjUis3RmpyeXJpY05iWCtQVzUvOXFHaWxnY2grZ3l4b25BWlBpd2NpeDN3QVpGdwpaZC96ZFB2aTBkWEppc1BSZjRMazg5b2pCUmpiRmRmc2l5UmJYbyt3TFU4NUhRU2NGMnN5aUFPaTVBRHdVU0FkCm45YWFweUNweEFkREtERHdObit3ZFhtaTZ0OHRpSFRkK3RoVDhkaVpBb0dCQUt6Wis1bG9OOTBtYlF4VVh5YUwKMjFSUm9tMGJjcndsTmVCaWNFSmlzaEhYa2xpSVVxZ3hSZklNM2hhUVRUcklKZENFaHFsV01aV0xPb2I2NTNyZgo3aFlMSXM1ZUtka3o0aFRVdnpldm9TMHVXcm9CV2xOVHlGanIrSWhKZnZUc0hpOGdsU3FkbXgySkJhZUFVWUNXCndNdlQ4NmNLclNyNkQrZG8wS05FZzFsL0FvR0FlMkFVdHVFbFNqLzBmRzgrV3hHc1RFV1JqclRNUzRSUjhRWXQKeXdjdFA4aDZxTGxKUTRCWGxQU05rMXZLTmtOUkxIb2pZT2pCQTViYjhibXNVU1BlV09NNENoaFJ4QnlHbmR2eAphYkJDRkFwY0IvbEg4d1R0alVZYlN5T294ZGt5OEp0ek90ajJhS0FiZHd6NlArWDZDODhjZmxYVFo5MWpYL3RMCjF3TmRKS2tDZ1lCbyt0UzB5TzJ2SWFmK2UwSkN5TGhzVDQ5cTN3Zis2QWVqWGx2WDJ1VnRYejN5QTZnbXo5aCsKcDNlK2JMRUxwb3B0WFhNdUFRR0xhUkcrYlNNcjR5dERYbE5ZSndUeThXczNKY3dlSTdqZVp2b0ZpbmNvVlVIMwphdmxoTUVCRGYxSjltSDB5cDBwWUNaS2ROdHNvZEZtQktzVEtQMjJhTmtsVVhCS3gyZzR6cFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: vechr-iiot/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "dmVjaHIxMjM="
  password: "dmVjaHIxMjM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: vechr-iiot/templates/nats/tls.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: nats-vechr-cert
  namespace: default
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIekNDQXdlZ0F3SUJBZ0lVWWZsYWh1RFkrTXhSVndVb3NIU2hORzNsM3M4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBa2xFTVJNd0VRWURWUVFJREFwS1lYZGhJRUpoY21GME1ROHdEUVlEVlFRSApEQVpEYVcxaGFHa3hFVEFQQmdOVkJBb01DRlpsWTJoeUlFTkJNUjR3SEFZRFZRUUxEQlZEWlhKMGFXWnBZMkYwClpTQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTU1EV0Z3Y0M1MlpXTm9jaTVqYjIweEhqQWNCZ2txaGtpRzl3MEIKQ1FFV0QyRmtiV2x1UUhabFkyaHlMbU52YlRBZUZ3MHlNakV5TVRFeE56SXdNelZhRncweU56RXlNVEF4TnpJdwpNelZhTUlHZU1Rc3dDUVlEVlFRR0V3SkpSREVUTUJFR0ExVUVDQXdLU21GM1lTQkNZWEpoZERFUE1BMEdBMVVFCkJ3d0dRMmx0WVdocE1SRXdEd1lEVlFRS0RBaFdaV05vY2lCRFFURWVNQndHQTFVRUN3d1ZRMlZ5ZEdsbWFXTmgKZEdVZ1FYVjBhRzl5YVhSNU1SWXdGQVlEVlFRRERBMWhjSEF1ZG1WamFISXVZMjl0TVI0d0hBWUpLb1pJaHZjTgpBUWtCRmc5aFpHMXBia0IyWldOb2NpNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURIZjJlSkp4bG03b1hqaUNKZFdvT3dydlRGQkJtRHd5RUgyQlFlZExHck1GRThTZEFkT2EwcHk0UCsKYnZlTUxMWHF4ZDMvTFN3Y3FkcU1QZHNUSytYdWJacjJEeGlWa2FJVzlTMEw4aHlPekNaR0s4eTZFRVVRVDBPYwo5YkRsTHUyaStFZHNYUVZrWVlndjJnaVE3WjNTNTNxSHN4S3o0ZjFIRjl2N2ZsZDZYVXVFTm5Eak9relRvSTRFCmRSTUtId3FxM1lJOUJXdUY2VVQ1N1NqdFFMNGhBWWhER3F2VHRHUE1DWm1HZ2V6OS9ieFU0dVk0d053bm1tRysKdjFDNkJSRnFaandEOFlzbmRRd2ZkV0RKTVJ0dFRueDkyUGpSVkxBWThCd3Vuams4MXByR2JlUW5kNjJEMldPSwpFbGtlUG4zc2xCSlFKc1RzcVFnV3hDY0M0RE1wQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJUUjJKN1Q1d21nCnhVRmdMSmZ3V1BndldzQ1BQREFmQmdOVkhTTUVHREFXZ0JUUjJKN1Q1d21neFVGZ0xKZndXUGd2V3NDUFBEQVAKQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzUENTcTFlODdUbERhRGJzaApvbDJJY2s2c05tOWwxL1NMcmxWdUxsVU1NcmlQL3YxZmorYTAvV3MyS2ZXaXYzWFJtbGg2aHptNFFSdmN2a3N0CmpNb1A2NitzWU1EZ2kyUUZWamQ4ZzZuZkpiMXkzL2o4dFVLZFc1N3g2QTVwNlpNY3FubWFKWElSWjJ2VUlNMmoKdk5Qa0s3OWFxMUJJSEZBeVVLMksvenlkUjBvY21GL2F5dE41K2xnM0FtWXhtWHE3RGZRU0Z5L3ZOSHZZU3dCaQpxV3U5c0VFQUk1aG5yc0Q2SDFsWnczVFBLd2dxK0JMM0RIS0pLbmM5clpkc3FMMHBSODFEaFo3U2E1R2p2TGRPCmtUeWdyTmpYSU5QZ3RUQzFpTURnUjFxU3hlMXBscTllVWZpZU4yZ0pDL2R1VDZSMU1sc244Sm1YaHVFQXJ6QzcKbndjUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDakNDQS9LZ0F3SUJBZ0lVYzJVWXV4cy8vR25oWTZPMUtRR0xKa0FYTFNvd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBa2xFTVJNd0VRWURWUVFJREFwS1lYZGhJRUpoY21GME1ROHdEUVlEVlFRSApEQVpEYVcxaGFHa3hFVEFQQmdOVkJBb01DRlpsWTJoeUlFTkJNUjR3SEFZRFZRUUxEQlZEWlhKMGFXWnBZMkYwClpTQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTU1EV0Z3Y0M1MlpXTm9jaTVqYjIweEhqQWNCZ2txaGtpRzl3MEIKQ1FFV0QyRmtiV2x1UUhabFkyaHlMbU52YlRBZUZ3MHlNekEyTURrd09UUTNNalJhRncweU5EQTJNRGd3T1RRMwpNalJhTUlHTU1Rc3dDUVlEVlFRR0V3SkpSREVUTUJFR0ExVUVDQXdLU21GM1lTQkNZWEpoZERFUE1BMEdBMVVFCkJ3d0dRMmx0WVdocE1RNHdEQVlEVlFRS0RBVldaV05vY2pFUE1BMEdBMVVFQ3d3R1JHVjJUM0J6TVJZd0ZBWUQKVlFRRERBMWhjSEF1ZG1WamFISXVZMjl0TVI0d0hBWUpLb1pJaHZjTkFRa0JGZzloWkcxcGJrQjJaV05vY2k1agpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3BrRDgwaFpXK3hNbWZUSndCClRPcnJBMkxkdG43NGUxREtYbkFtSlE3eGNCVk8xUnBDaU1PNWNDSmo4NWFRNm5ZVjVJSkR3S3FVNHFaeHRwbjMKK0d6ZzNRWGFySVVQVGtxbm5BR09DeXZTUktDT0VEYjVyZUk5SjhjS0JOeEh6QTFEUWRncUVKUXAvKzRWeVJEbgo1STNTT0xwWnZxSFhZRnU1QWxsM0pNWm1kSU9RMGxDLzI5bHFVZHg0L0dMN0lxNU5uek9vUDI4QUZCN0htT2FaCjg2RHBaaWk4bGtxU28rUFdjY0I0NEtuQmY2UWVGaitZTHRvbExUaFhjVjQ0TE9xWGFuSG1RK1FOOUtJVndHQUkKcjN6cTNGZVhzc1JVZkw1VVNXS2JVS0JhVEg2QTE1VWxEY1FlNHV3YVluRnFESDEwdWN6TG9iL1R0Rk4zSHhrMwpYZkV6QWdNQkFBR2pnZ0ZPTUlJQlNqQWZCZ05WSFNNRUdEQVdnQlRSMko3VDV3bWd4VUZnTEpmd1dQZ3ZXc0NQClBEQUpCZ05WSFJNRUFqQUFNQXNHQTFVZER3UUVBd0lFOERDQjd3WURWUjBSQklIbk1JSGtnZzFoY0hBdWRtVmoKYUhJdVkyOXRnZzV1WVhSekxuWmxZMmh5TG1OdmJZSUpiRzlqWVd4b2IzTjBnZ3R1WVhSekxYTmxjblpsY29JaApibUYwY3kxc1lpNWtaV1poZFd4MExuTjJZeTVqYkhWemRHVnlMbXh2WTJGc2dpUnVZWFJ6TFd4aUxuQnliMlIxClkzUnBiMjR1YzNaakxtTnNkWE4wWlhJdWJHOWpZV3lDSVc1aGRITXRiR0l1YzNSaFoybHVaeTV6ZG1NdVkyeDEKYzNSbGNpNXNiMk5oYklJaGJtRjBjeTFzWWk1MFpYTjBhVzVuTG5OMll5NWpiSFZ6ZEdWeUxteHZZMkZzZ2h4dQpZWFJ6TFd4aUxuRmhMbk4yWXk1amJIVnpkR1Z5TG14dlkyRnNNQjBHQTFVZERnUVdCQlRpVnVrUklpTjRpZzB4CmNYUmIyaXRXWDR4cUd6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFtUmJUbDJhSVVxNlNsNWVmVXYyV3JnekgKU3M2QTZlWEVBb2VyQ05KdTkzS0Jnc0JoYlhBZ2tmd2VwVGF3OTI2V3NkV0JoT3ZRWkxiVmxCcVkyeHZITWdzeQppTmFzUHI5WFA2UVA1QVEwdGpQWlJYNStzWFA2SURVN0JPMmZZdFNXUTd5K2syV09tL3RIS2gyNWU5TVR0cDB1Ck84a3B6U3VFZnMxQjI0SUYzZDRsNmJWVStvSGVDNDVQNFJieGNtd21BOXFDaGdJblJBQWl4NzBEWGh6Y01vbjAKOHpOenF4MUp3MzZVOC9yRjZzRCtGVXVyZTJtWTRCWWp3dFJUVnJ6aEg0MnBCazdrYWo0UVpnM3lhN1VudENxUwpzdUFPWWF4czhramQzM05Ka0g2dHQ5emhpT3d4VlRNY2I1bi9wTHhValRZKzRvVHJ3WTVHZklOL1JJYy9EUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ3BrRDgwaFpXK3hNbWYKVEp3QlRPcnJBMkxkdG43NGUxREtYbkFtSlE3eGNCVk8xUnBDaU1PNWNDSmo4NWFRNm5ZVjVJSkR3S3FVNHFaeAp0cG4zK0d6ZzNRWGFySVVQVGtxbm5BR09DeXZTUktDT0VEYjVyZUk5SjhjS0JOeEh6QTFEUWRncUVKUXAvKzRWCnlSRG41STNTT0xwWnZxSFhZRnU1QWxsM0pNWm1kSU9RMGxDLzI5bHFVZHg0L0dMN0lxNU5uek9vUDI4QUZCN0gKbU9hWjg2RHBaaWk4bGtxU28rUFdjY0I0NEtuQmY2UWVGaitZTHRvbExUaFhjVjQ0TE9xWGFuSG1RK1FOOUtJVgp3R0FJcjN6cTNGZVhzc1JVZkw1VVNXS2JVS0JhVEg2QTE1VWxEY1FlNHV3YVluRnFESDEwdWN6TG9iL1R0Rk4zCkh4azNYZkV6QWdNQkFBRUNnZ0VBQmNkYU9CYURZM1IrY0pUaVRqTUtZSWNGaEF2WHFPMCs5QjZpME5IN2YrUHoKZmZQS1NORXpabXI1YVJHZ3BJQ3hGSTdzbDVXRjJyd2Nzd3huaytsZUFJM1h5THVQYjFXYU9yc1kzSGZwL3VrQwoxY1Njc3dhbmlyRUQyZ1lQWWMwRStMRlNSaUM1Zy9McWNNaWc4RjQ4TFJsczFHa29SOWhMVi9OS0RFTHZGZ2U5ClJLbG9BRVA2eGJDL2c0OFkvZVZ4NkhXSk5hMCt1SUhwaFpmZFFGSGQ2VEdiZEo4aExrUHZIMGtrdHZ1bDBRZzkKNnNpMVE0RUhRcFkrZE90V2J0YVlLbFBRMDNaVlFLZHVYQ0pWK0d3OThsQmdXNFZ0cDhlZk1sdldiU29yeWxpUwpNdVdJU2EvWFo2OW04NjlOaXZxY1FuaXQ0QWV1b1J5NEFqcm9nRFZ5SFFLQmdRREJlU3JGcUEwNkxWMW9kV0t1ClB1M3RVZ1MvY1U4T2I5QnQwT2p4djEvMVNzNzFURUxrZmdFc252ZFM3VCs5b2pGOTBFQ0JHQTY3R3pwS0k5QksKbkpmNnJrTXRQdFlDaTBYTC9tRXN4dUpzbmF3cE1jeHUyUm9HbFk2eUJnQS9Ja3RseEhwN2NLZEZZM2JGOHUxagoyZHZBV2RSRlRWVFJaSmRZK3RtUW9ucWREUUtCZ1FEZ1hPdldVZnBtNGp0dmtPbDVlbXdqREw3RXhGTnJUd2dICmNVamdCNDBOcXlPbUIrWVRWcFhWZ2hCMmxmWERUQ3Z4SGtFRmUzTXdjcGhSMS9WSDJvRU02d3Y0c0FIaXhkUUgKUVV5OEZPZFRoTXhpNTZ3V2F3Vk9lR2d3Y0pGUThPWkZVM1lmbFJoQjdJNzZNQ09YTUFJUHl2VVQ0SGJydE83agpWcUVIbjJHM1B3S0JnUUNneVpMN1d6Tks4eUtheWx0dFZnMGoyckxwYTBCNVRnR1pFakpWbm1jZ0VzQzJhVjk2ClJ5R3d0SmYwaWdrY0R5dzBWQnNYYmlmbjViUG1vNmJhS3hPL0dJM3BqendLTnphVlZ0M3BlWXY1R254V2EvVnEKOWZCRUlvekpkR1ZHRXJrNFpUWXBXakVaWUpUMzQzRFlOOWtDSFdWbEJ1U0RkS2EzSXhvbXNuRldEUUtCZ1FDaQpQby9NekR0bmF2SFFHOXE2SGUxVTYwS0l4L0FMQ1h1azVpYnMyb2tGK1Z3dUZFZ3NjOUNtTlFmeXVUNmZtOVdxCjUxWGR3UWZyWVBNRlBFWURUOTlDbURadi85ZGRSZkd0eldyUUY4MndkN2ZWVGZNRHd5QnpQbDhacUUxdFdzY3EKR3RDd3hnQmtxOHc0MzliYzNicWY4UVNJK3lrRUNqTTE4czgvMCtHMXdRS0JnQnhYMHpYZUFDU0xlNFJlbnZ0aApMQ0MwdUpFaklyM3pIcVhTb2ZBZklNMWFqQWVRVHRLVkUxK2pUaEtxWG5YSDRHdjRMa01PTTRXdFkxK2FpaGFCCkJNVDhpcVl4RGU2MHhScldOQXFHZldqWFZ5b3hQK21kalRHblkrRXh6STdraW01dE5Ed1d2dllGbzNSUnNzRHMKNEVSYlZIUGNXaTgwWCtQd0wrZ1lZTzBjCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: vechr-iiot/templates/nginx/tls.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: vechr-ingress
    app.kubernetes.io/instance: vechr-ingress-vechr-ingress
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: vechr-iiot
  name: nginx-vechr-cert-dev
  namespace: default
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVIekNDQXdlZ0F3SUJBZ0lVWWZsYWh1RFkrTXhSVndVb3NIU2hORzNsM3M4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBa2xFTVJNd0VRWURWUVFJREFwS1lYZGhJRUpoY21GME1ROHdEUVlEVlFRSApEQVpEYVcxaGFHa3hFVEFQQmdOVkJBb01DRlpsWTJoeUlFTkJNUjR3SEFZRFZRUUxEQlZEWlhKMGFXWnBZMkYwClpTQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTU1EV0Z3Y0M1MlpXTm9jaTVqYjIweEhqQWNCZ2txaGtpRzl3MEIKQ1FFV0QyRmtiV2x1UUhabFkyaHlMbU52YlRBZUZ3MHlNakV5TVRFeE56SXdNelZhRncweU56RXlNVEF4TnpJdwpNelZhTUlHZU1Rc3dDUVlEVlFRR0V3SkpSREVUTUJFR0ExVUVDQXdLU21GM1lTQkNZWEpoZERFUE1BMEdBMVVFCkJ3d0dRMmx0WVdocE1SRXdEd1lEVlFRS0RBaFdaV05vY2lCRFFURWVNQndHQTFVRUN3d1ZRMlZ5ZEdsbWFXTmgKZEdVZ1FYVjBhRzl5YVhSNU1SWXdGQVlEVlFRRERBMWhjSEF1ZG1WamFISXVZMjl0TVI0d0hBWUpLb1pJaHZjTgpBUWtCRmc5aFpHMXBia0IyWldOb2NpNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURIZjJlSkp4bG03b1hqaUNKZFdvT3dydlRGQkJtRHd5RUgyQlFlZExHck1GRThTZEFkT2EwcHk0UCsKYnZlTUxMWHF4ZDMvTFN3Y3FkcU1QZHNUSytYdWJacjJEeGlWa2FJVzlTMEw4aHlPekNaR0s4eTZFRVVRVDBPYwo5YkRsTHUyaStFZHNYUVZrWVlndjJnaVE3WjNTNTNxSHN4S3o0ZjFIRjl2N2ZsZDZYVXVFTm5Eak9relRvSTRFCmRSTUtId3FxM1lJOUJXdUY2VVQ1N1NqdFFMNGhBWWhER3F2VHRHUE1DWm1HZ2V6OS9ieFU0dVk0d053bm1tRysKdjFDNkJSRnFaandEOFlzbmRRd2ZkV0RKTVJ0dFRueDkyUGpSVkxBWThCd3Vuams4MXByR2JlUW5kNjJEMldPSwpFbGtlUG4zc2xCSlFKc1RzcVFnV3hDY0M0RE1wQWdNQkFBR2pVekJSTUIwR0ExVWREZ1FXQkJUUjJKN1Q1d21nCnhVRmdMSmZ3V1BndldzQ1BQREFmQmdOVkhTTUVHREFXZ0JUUjJKN1Q1d21neFVGZ0xKZndXUGd2V3NDUFBEQVAKQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJzUENTcTFlODdUbERhRGJzaApvbDJJY2s2c05tOWwxL1NMcmxWdUxsVU1NcmlQL3YxZmorYTAvV3MyS2ZXaXYzWFJtbGg2aHptNFFSdmN2a3N0CmpNb1A2NitzWU1EZ2kyUUZWamQ4ZzZuZkpiMXkzL2o4dFVLZFc1N3g2QTVwNlpNY3FubWFKWElSWjJ2VUlNMmoKdk5Qa0s3OWFxMUJJSEZBeVVLMksvenlkUjBvY21GL2F5dE41K2xnM0FtWXhtWHE3RGZRU0Z5L3ZOSHZZU3dCaQpxV3U5c0VFQUk1aG5yc0Q2SDFsWnczVFBLd2dxK0JMM0RIS0pLbmM5clpkc3FMMHBSODFEaFo3U2E1R2p2TGRPCmtUeWdyTmpYSU5QZ3RUQzFpTURnUjFxU3hlMXBscTllVWZpZU4yZ0pDL2R1VDZSMU1sc244Sm1YaHVFQXJ6QzcKbndjUAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVMakNDQXhhZ0F3SUJBZ0lVYzJVWXV4cy8vR25oWTZPMUtRR0xKa0FYTFNVd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2daNHhDekFKQmdOVkJBWVRBa2xFTVJNd0VRWURWUVFJREFwS1lYZGhJRUpoY21GME1ROHdEUVlEVlFRSApEQVpEYVcxaGFHa3hFVEFQQmdOVkJBb01DRlpsWTJoeUlFTkJNUjR3SEFZRFZRUUxEQlZEWlhKMGFXWnBZMkYwClpTQkJkWFJvYjNKcGRIa3hGakFVQmdOVkJBTU1EV0Z3Y0M1MlpXTm9jaTVqYjIweEhqQWNCZ2txaGtpRzl3MEIKQ1FFV0QyRmtiV2x1UUhabFkyaHlMbU52YlRBZUZ3MHlNakV5TVRFeU1UQTJNRE5hRncweU16RXlNVEV5TVRBMgpNRE5hTUlHTU1Rc3dDUVlEVlFRR0V3SkpSREVUTUJFR0ExVUVDQXdLU21GM1lTQkNZWEpoZERFUE1BMEdBMVVFCkJ3d0dRMmx0WVdocE1RNHdEQVlEVlFRS0RBVldaV05vY2pFUE1BMEdBMVVFQ3d3R1JHVjJUM0J6TVJZd0ZBWUQKVlFRRERBMWhjSEF1ZG1WamFISXVZMjl0TVI0d0hBWUpLb1pJaHZjTkFRa0JGZzloWkcxcGJrQjJaV05vY2k1agpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFVLNVJBSXlYd2NXUTBBWXVHCnhWbENUd1dIYzE3WmwxWnR1b2RLbVNWdzFOTlA2ZitSYnEzQ0VJbkxpaVdYMHdocks3RlM2WEJIQ2piMEhJcTAKTVRCWERSdEhHRWVXUGdXSmlTUkhFeUQ1Nm13cDBKdnpSajFYN0RVcWV2RHMzU2piRFBSdjY4c1BxekRIUkx3NQo3emRUSEFFbG5zU3dwb2hDRjNZaTBLTENGRTVvUkU3NnNUeVZHSW5BZ1FXUXNMUlJEL1hpbFRDQ3ltL1hZMTEwClJyRUpXT3V5QnNPWW1kYVNpdVMyempKNlVsZXJhOWJFTUJ5WTAvT1JDWGV1UmdCR0ljcjAzSEcxV3VjZFNHbHoKaHg1dERqY3BQRmh2UkltbUFON2tiZVY2bGh6dXRGQWxOaFlwNmdvT3k0V1NuVngranlzVXg5UVpkZU9BS0ltbAoxNDZaQWdNQkFBR2pkREJ5TUI4R0ExVWRJd1FZTUJhQUZOSFludFBuQ2FERlFXQXNsL0JZK0M5YXdJODhNQWtHCkExVWRFd1FDTUFBd0N3WURWUjBQQkFRREFnVHdNQmdHQTFVZEVRUVJNQStDRFdGd2NDNTJaV05vY2k1amIyMHcKSFFZRFZSME9CQllFRk5vVzAvYVF4a24zbWpKZU5uaFk1bjdFSDZZU01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQgpBUUNuTmZvQXZMbWk2TUZpenE5czMrUmN2YmROekd6WnZCc3hXYjR1Z0J4WHpLMmZ2MDl4ZDRaQjJNejlkY1BlCkM4Ui9HbVdjS3owaUVzNWRqSDRGbmEzSHJqbWNYZnYvck1WUDdsUjFDOWRTL2tTTEptRW1laUhzVFZ0M2ptNTcKUXc0UkpMM013RXdTQ1Qxbnl3RVlKZlROTXB1bmtVdmhvVVc0QVhyNGpralR4ZTd5THhMU1cvZWtTOTRCYldmcQpSY3kwc0R5a3M2VGJ3MDA5K0owWXFBWk9VSUYyWWhub2U4MzlXV2hPem4xcHFXRXFKcFVIaWRYaFBXRnpTQS9MCjBqc3hlQ0wrWkRMSmJZa2g1QWQzdEhDNExwRkg5U2NWTlVQYmF1M0NlcUJNZVovVFd3UXhTbUpIMEs3TGx5RmUKRVVHeE5DNm16UE1SaVpWdXlrOTJ4cXl4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRFVLNVJBSXlYd2NXUTAKQVl1R3hWbENUd1dIYzE3WmwxWnR1b2RLbVNWdzFOTlA2ZitSYnEzQ0VJbkxpaVdYMHdocks3RlM2WEJIQ2piMApISXEwTVRCWERSdEhHRWVXUGdXSmlTUkhFeUQ1Nm13cDBKdnpSajFYN0RVcWV2RHMzU2piRFBSdjY4c1BxekRIClJMdzU3emRUSEFFbG5zU3dwb2hDRjNZaTBLTENGRTVvUkU3NnNUeVZHSW5BZ1FXUXNMUlJEL1hpbFRDQ3ltL1gKWTExMFJyRUpXT3V5QnNPWW1kYVNpdVMyempKNlVsZXJhOWJFTUJ5WTAvT1JDWGV1UmdCR0ljcjAzSEcxV3VjZApTR2x6aHg1dERqY3BQRmh2UkltbUFON2tiZVY2bGh6dXRGQWxOaFlwNmdvT3k0V1NuVngranlzVXg5UVpkZU9BCktJbWwxNDZaQWdNQkFBRUNnZ0VBRllMcUcrTWNaMytObythMHMyZzZvNm9Rb3RJd0Q1SmtHMG0yU2hwVEpSaVUKNktVdVNkdmRmdCt2b3R6NXNRWWUxRVBZclpINHRlRXJuMjR0NDNWWncvZXltRytXSVgzZUVKcmduRnFzaFI0dgpFNEhBc0FhQzlYRS8xalBqRGJiaUc2eDVjNGdGL1d1VFRWN1RFVEluYXpRYml5bUk0bXF1QmJwc2VqenFSWkE3ClltMXRiV294VXRsY0hCZWlCVkUrVlB0T3gvSUpGYWJNTEdkRFBjazk4MlNuMWJGbGpGbFBVQTNtMTdIWlhjbHIKZTlwcXB4eWZJR3djdVJzOXNyRDBCWmdtM1U3WXYvaGtXUlhZSzBDcDNSM3FyR3drMXZ2Ni9EckhkcWliWmtaZQozYkhPRHI5YnFLbmxpbkYvWmFScjEyelRSUmZkdXVMM1FKb3RKZ2FYVVFLQmdRRDVENXQ1bE5MTEZUM3BzbjlWClE3cXNwdWt6V2ttcjFmZ1hEYVF5QmxVZ2pkdDcrNlZ3bDFWeWU5SUhPSEFtanBpY0Q1aHVwMVkyN2lkakd3ckwKMU82MHRNM01weXdzK29mcTFDY1M4enE3N2QzdzY5MkpTVmNYbzdpdXc2TEpsd080MDJGMXVOaHUzRlJENmVLegp4TWVtQUU4cjlXNnNmdVFGWVgzWkcwbXpDUUtCZ1FEYUZOcVBDeHA1YWtwMlQraHdjcjhKTmlaVGNyMjl2STlRCjRKMSs5dTdrWGFDT0VEb0x3T2htajB1QklCVmZOM0hqVzhJME9GUnl4L3E1MXkwNy9mNTFFSTJqQVRmUGRhRGEKbXA0cjE4SFY5NCsyKzFzY0xjQXRSZFdab2dhbFhUQUQvUEF2UEFnYmFnUWd0L1VWREZhS0YybjZwWlBGYzBzUQpQSW13M2FFVEVRS0JnQnRraEEwVE9UdnMwaXBwMzJkWlU2YTVsTng1Q2JGRWoweTV5MTFWSlBlM29uUTRjVEc0CjgwVHNLV1Z4NTZQVit5THU5Q3ozYXB3UUJYVDQvRzcrdEdKYm9HYnAzQW4yWkF5SDJPUlVyQmtQU0dHL0QxYVMKSW1vUEw3akkrNWFBYllCZWYxR2JTdkttZVA0Zk16ZmlaTEwxUmIvbjlvd3lTSkh1N3hCNTE5bEJBb0dBWXlIOQpvKzU1TDE0STBUVkx4T24wT3h5NVdVK2NQc2FiSXptbmZsS0RqNTJiNFZndytxekxOK3ZGZDhIODFSYWdGNmpiClk5K0RTOVhwL0ZaN0FuMVlFU0RnTVl2Wk1kNFhxNmVEWlF5ajJUNjZ2b1FPQzRZa2lLL3BBL2hxS3Z0c1d6TzgKZnN3OEp6SVBCRXg3QlFGaHlVNFJaOVdpa2F2eUlFUlVsdWg0VXZFQ2dZQjI4LzRJVkxOTGFGOGM4RVRqdDJWZwppcWQ5T1doVnIvRUl3U2YvUVRNMEdzbWh4RGRLSk1NaE1kTW1aMmhkUFZNaFRUUHRxbFRRM3hDVUF3Y2tVd0lrCldFRjRvWnBkNXoraUFVRkxjTjRHWmk4ZWpFWnNWemF1VkdrVmlrbTVrc1BaVFM3b04xZDdqTUJsQU5aRnh5THQKbE5iNzRWeGROOU9aWEdxZ3hyb2Jtdz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: vechr-iiot/charts/nats/templates/config-map.yaml
apiVersion: v1
data:
  nats.conf: |
    {
      "cluster": {
        "name": "my-release-nats",
        "no_advertise": true,
        "port": 6222,
        "routes": [
          "tls://my-release-nats-0.my-release-nats-headless:6222",
          "tls://my-release-nats-1.my-release-nats-headless:6222",
          "tls://my-release-nats-2.my-release-nats-headless:6222"
        ],
        "tls": {
          "ca_file": "/etc/nats-cert/ca/ca.crt",
          "cert_file": "/etc/nats-certs/cluster/tls.crt",
          "key_file": "/etc/nats-certs/cluster/tls.key"
        }
      },
      "http_port": 8222,
      "jetstream": {
        "max_file_store": 5Gi,
        "max_memory_store": 0,
        "store_dir": "/data"
      },
      "lame_duck_duration": "30s",
      "lame_duck_grace_period": "10s",
      "mqtt": {
        "port": 1883,
        "tls": {
          "ca_file": "/etc/nats-cert/ca/ca.crt",
          "cert_file": "/etc/nats-certs/mqtt/tls.crt",
          "key_file": "/etc/nats-certs/mqtt/tls.key"
        }
      },
      "pid_file": "/var/run/nats/nats.pid",
      "port": 4222,
      "server_name": $SERVER_NAME,
      "tls": {
        "ca_file": "/etc/nats-cert/ca/ca.crt",
        "cert_file": "/etc/nats-certs/nats/tls.crt",
        "key_file": "/etc/nats-certs/nats/tls.key"
      },
      "websocket": {
        "allowed_origins": [],
        "compression": true,
        "no_tls": false,
        "port": 9090,
        "same_origin": false,
        "tls": {
          "ca_file": "/etc/nats-cert/ca/ca.crt",
          "cert_file": "/etc/nats-certs/websocket/tls.crt",
          "key_file": "/etc/nats-certs/websocket/tls.key",
          "verify": false
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: nats
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats-config
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nginx-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
data:
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-leader-election-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-nginx-ingress-leader-election
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
---
# Source: vechr-iiot/templates/influx/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: influxdb-config
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-influxdb
    app.kubernetes.io/instance: influxdb
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: 2.1.0-alpine
data:
  DOCKER_INFLUXDB_INIT_MODE: setup
  DOCKER_INFLUXDB_INIT_USERNAME: admin
  DOCKER_INFLUXDB_INIT_PASSWORD: vehcr123
  DOCKER_INFLUXDB_INIT_ORG: Vechr
  DOCKER_INFLUXDB_INIT_BUCKET: Vechr
  DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: vechr-token
---
# Source: vechr-iiot/charts/nginx-ingress/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-nginx-ingress
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - update
  - create
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - list
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - update
  - create
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers
  - virtualserverroutes
  - globalconfigurations
  - transportservers
  - policies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - k8s.nginx.org
  resources:
  - virtualservers/status
  - virtualserverroutes/status
  - policies/status
  - transportservers/status
  verbs:
  - update
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:aggregated-metrics-reader
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
# Source: vechr-iiot/charts/nginx-ingress/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-nginx-ingress
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
subjects:
- kind: ServiceAccount
  name: my-release-nginx-ingress
  namespace: default
roleRef:
  kind: ClusterRole
  name: my-release-nginx-ingress
  apiGroup: rbac.authorization.k8s.io
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
# Source: vechr-iiot/charts/nats/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: nats
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats-headless
spec:
  clusterIP: None
  ports:
  - appProtocol: tls
    name: nats
    port: 4222
    targetPort: nats
  - appProtocol: https
    name: websocket
    port: 9090
    targetPort: websocket
  - appProtocol: tls
    name: mqtt
    port: 1883
    targetPort: mqtt
  - appProtocol: tls
    name: cluster
    port: 6222
    targetPort: cluster
  - appProtocol: http
    name: monitor
    port: 8222
    targetPort: monitor
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/component: nats
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: nats
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-nginx-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: my-release-nginx-ingress
---
# Source: vechr-iiot/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: vechr-iiot/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: vechr-iiot/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vechr-frontend-web-app
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-frontend
    app.kubernetes.io/instance: vechr-frontend-web-app
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  type: NodePort
  selector:
    app.kubernetes.io/component: vechr-frontend
    app.kubernetes.io/instance: vechr-frontend-web-app
    app.kubernetes.io/name: frontend
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort:  80
      nodePort: 30035
---
# Source: vechr-iiot/templates/influx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-influxdb
    app.kubernetes.io/instance: influxdb
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: 2.1.0-alpine
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/component: vechr-influxdb
    app.kubernetes.io/instance: influxdb
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/part-of: vechr-iiot
  ports:
    - protocol: TCP
      name: http
      port: 8086
      targetPort: 8086
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    k8s-app: metrics-server
---
# Source: vechr-iiot/templates/microservice/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vechr-microservice-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
  annotations:
    
spec:
  type: NodePort
  selector:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
  ports:
    - port: 81
      name: "port-nothing"
      targetPort: 81
    
    
    - port: 3004
      targetPort: 3004
      nodePort: 30036
      protocol: TCP
      name: "http-audit-service"
    
    
    
    - port: 3005
      targetPort: 3005
      nodePort: 30037
      protocol: TCP
      name: "http-auth-service"
    
    
    
    - port: 3003
      targetPort: 3003
      nodePort: 30038
      protocol: TCP
      name: "http-db-logger-service"
    
    
    
    - port: 3002
      targetPort: 3002
      nodePort: 30039
      protocol: TCP
      name: "http-notification-service"
    
    
    
    - port: 3001
      targetPort: 3001
      nodePort: 30040
      protocol: TCP
      name: "http-things-service"
---
# Source: vechr-iiot/templates/nats/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: nats-lb
  namespace: default
  
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: nats
  ports:
    - protocol: TCP
      port: 4222
      targetPort: 4222
      name: nats
    - protocol: TCP
      port: 1833
      targetPort: 1833
      name: mqtt
    - protocol: TCP
      port: 9090
      targetPort: 9090
      name: websocket
---
# Source: vechr-iiot/templates/service/service-external.yaml
apiVersion: v1
kind: Service
metadata:
  name: gmail-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-external-service
    app.kubernetes.io/instance: vechr-external-service-gmail-service
    app.kubernetes.io/name: external-service
    app.kubernetes.io/part-of: vechr-iiot
spec:
  type: ExternalName
  externalName: smtp.gmail.com
  ports:
  
  - port: 587
---
# Source: vechr-iiot/templates/service/service-external.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-external-service
    app.kubernetes.io/instance: vechr-external-service-postgres-service
    app.kubernetes.io/name: external-service
    app.kubernetes.io/part-of: vechr-iiot
spec:
  type: ExternalName
  externalName: host.docker.internal
  ports:
  
  - port: 5432
---
# Source: vechr-iiot/templates/service/service-external.yaml
apiVersion: v1
kind: Service
metadata:
  name: influx-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-external-service
    app.kubernetes.io/instance: vechr-external-service-influx-service
    app.kubernetes.io/name: external-service
    app.kubernetes.io/part-of: vechr-iiot
spec:
  type: ExternalName
  externalName: host.docker.internal
  ports:
  
  - port: 8086
---
# Source: vechr-iiot/charts/nats/templates/nats-box/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: nats-box
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats-box
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: nats-box
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nats
  template:
    metadata:
      labels:
        app.kubernetes.io/component: nats-box
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nats
        app.kubernetes.io/version: 2.9.20
        helm.sh/chart: nats-1.0.0
    spec:
      containers:
      - args:
        - trap true INT TERM; sleep infinity & wait
        command:
        - sh
        - -ec
        - |
          work_dir="$(pwd)"
          mkdir -p "$XDG_CONFIG_HOME/nats"
          cd "$XDG_CONFIG_HOME/nats"
          if ! [ -s context ]; then
            ln -s /etc/nats-contexts context
          fi
          if ! [ -f context.txt ]; then
            echo -n "default" > context.txt
          fi
          cd "$work_dir"
          exec sh -ec "$0"
        image: natsio/nats-box:0.13.5
        name: nats-box
        volumeMounts:
        - mountPath: /etc/nats-contexts
          name: contexts
        - mountPath: /etc/nats-cert/ca
          name: tls-ca
      enableServiceLinks: false
      volumes:
      - name: contexts
        secret:
          secretName: my-release-nats-box-contexts
      - name: tls-ca
        secret:
          secretName: nats-ca
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-nginx-ingress
  namespace: default
  labels:
    app.kubernetes.io/name: my-release-nginx-ingress
    helm.sh/chart: nginx-ingress-0.15.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-nginx-ingress
  template:
    metadata:
      labels:
        app: my-release-nginx-ingress
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/scheme: "http"
    spec:
      serviceAccountName: my-release-nginx-ingress
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 30
      hostNetwork: false
      containers:
      - image: nginx/nginx-ingress:2.4.2
        name: my-release-nginx-ingress
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443

        - name: prometheus
          containerPort: 9113
        - name: readiness-port
          containerPort: 8081
        readinessProbe:
          httpGet:
            path: /nginx-ready
            port: readiness-port
          periodSeconds: 1
          initialDelaySeconds: 0
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 101 #nginx
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
          - -nginx-plus=false
          - -nginx-reload-timeout=60000
          - -enable-app-protect=false
          - -enable-app-protect-dos=false
          - -nginx-configmaps=$(POD_NAMESPACE)/my-release-nginx-ingress
          - -default-server-tls-secret=$(POD_NAMESPACE)/my-release-nginx-ingress-default-server-tls
          - -ingress-class=nginx
          - -health-status=false
          - -health-status-uri=/nginx-health
          - -nginx-debug=false
          - -v=1
          - -nginx-status=true
          - -nginx-status-port=8080
          - -nginx-status-allow-cidrs=127.0.0.1
          - -report-ingress-status
          - -external-service=my-release-nginx-ingress
          - -enable-leader-election=true
          - -leader-election-lock-name=my-release-nginx-ingress-leader-election
          - -enable-prometheus-metrics=true
          - -prometheus-metrics-listen-port=9113
          - -prometheus-tls-secret=
          - -enable-custom-resources=true
          - -enable-snippets=false
          - -include-year=false
          - -disable-ipv6=false
          - -enable-tls-passthrough=false
          - -enable-preview-policies=false
          - -enable-cert-manager=false
          - -enable-oidc=false
          - -enable-external-dns=false
          - -ready-status=true
          - -ready-status-port=8081
          - -enable-latency-metrics=false
---
# Source: vechr-iiot/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-frontend-web-app
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-frontend
    app.kubernetes.io/instance: vechr-frontend-web-app
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-frontend
      app.kubernetes.io/instance: vechr-frontend-web-app
      app.kubernetes.io/name: frontend
  template:
    metadata:
      name: vechr-frontend-web-app
      labels:
        app.kubernetes.io/component: vechr-frontend
        app.kubernetes.io/instance: vechr-frontend-web-app
        app.kubernetes.io/name: frontend
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-frontend-web-app
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/web-app:latest
          
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          
          imagePullPolicy: Always

          # Resource Allocation
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "1024Mi"
              cpu: "1"
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      containers:
      - args:
        - --cert-dir=/tmp
        - --secure-port=4443
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --kubelet-insecure-tls
        image: k8s.gcr.io/metrics-server/metrics-server:v0.6.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
        name: metrics-server
        ports:
        - containerPort: 4443
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-dir
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      serviceAccountName: metrics-server
      volumes:
      - emptyDir: {}
        name: tmp-dir
---
# Source: vechr-iiot/templates/microservice/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-audit-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-audit-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-audit-service
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-audit-service
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-audit-service
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/audit-service:latest
          
          ports:
            - name: http
              containerPort: 3004
              protocol: TCP
          
          imagePullPolicy: Always
          
          env:
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.default.svc.cluster.local:4222"
            - name: APP_PORT
              value: "3004"
            
            
            
            
            - name: DB_URL
              value: "postgresql://vechrUser:vechr123@my-release-postgresql.default.svc.cluster.local:5432/audit_db?schema=public&connect_timeout=300"
            
            
            
            - name: JWT_SECRET
              value: "secretvechr"
            
            - name: ECRYPTED_SECRET
              value: "usersecret"
            
            - name: JWT_EXPIRES_IN
              value: "3d"
            
          
          # Resource Allocation
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "1024Mi"
              cpu: "1"
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: nats-vechr-cert
---
# Source: vechr-iiot/templates/microservice/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-auth-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-auth-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-auth-service
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-auth-service
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-auth-service
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/auth-service:latest
          
          ports:
            - name: http
              containerPort: 3005
              protocol: TCP
          
          imagePullPolicy: Always
          
          env:
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.default.svc.cluster.local:4222"
            - name: APP_PORT
              value: "3005"
            
            
            
            
            - name: DB_URL
              value: "postgresql://vechrUser:vechr123@my-release-postgresql.default.svc.cluster.local:5432/auth_db?schema=public&connect_timeout=300"
            
            
            
            - name: JWT_SECRET
              value: "secretvechr"
            
            - name: ECRYPTED_SECRET
              value: "usersecret"
            
            - name: JWT_EXPIRES_IN
              value: "3d"
            
            - name: JWT_REFRESH_EXPIRES_IN
              value: "30d"
            
            - name: INITIAL_SITE
              value: "{\"code\":\"ST1\",\"name\":\"Site Default\",\"location\":\"Server Default\"}"
            
            - name: INITIAL_SUPERUSER
              value: "{\"fullName\":\"root\",\"username\": \"root\",\"emailAddress\":\"root@vechr.id\",\"phoneNumber\":\"+62\",\"password\":\"password123\"}"
            
          
          # Resource Allocation
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "1024Mi"
              cpu: "1"
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: nats-vechr-cert
---
# Source: vechr-iiot/templates/microservice/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-db-logger-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-db-logger-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-db-logger-service
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-db-logger-service
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-db-logger-service
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/db-logger-service:latest
          
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          
          imagePullPolicy: Always
          
          env:
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.default.svc.cluster.local:4222"
            - name: APP_PORT
              value: "3003"
            
            
            - name: INFLUX_URL
              value: "http://influxdb-service.default.svc.cluster.local:8086/"
            
            
            
            
            
            - name: JWT_SECRET
              value: "secretvechr"
            
            - name: ECRYPTED_SECRET
              value: "usersecret"
            
            - name: JWT_EXPIRES_IN
              value: "3d"
            
            - name: INFLUX_TOKEN
              value: "vechr-token"
            
            - name: INFLUX_ORG
              value: "Vechr"
            
            - name: INFLUX_BUCKET
              value: "Vechr"
            
          
          # Resource Allocation
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "1024Mi"
              cpu: "1"
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: nats-vechr-cert
---
# Source: vechr-iiot/templates/microservice/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-notification-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-notification-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-notification-service
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-notification-service
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-notification-service
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/notification-service:latest
          
          ports:
            - name: http
              containerPort: 3002
              protocol: TCP
          
          imagePullPolicy: Always
          
          env:
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.default.svc.cluster.local:4222"
            - name: APP_PORT
              value: "3002"
            
            
            - name: EMAIL_HOST
              value: "gmail-service.default.svc.cluster.local"
            - name: EMAIL_PORT
              value: "587"
            
            
            
            - name: DB_URL
              value: "postgresql://vechrUser:vechr123@my-release-postgresql.default.svc.cluster.local:5432/notification_db?schema=public&connect_timeout=300"
            
            
            
            - name: JWT_SECRET
              value: "secretvechr"
            
            - name: ECRYPTED_SECRET
              value: "usersecret"
            
            - name: JWT_EXPIRES_IN
              value: "3d"
            
            - name: EMAIL_ID
              value: "isnaen71@gmail.com"
            
            - name: EMAIL_PASS
              value: "ofhbzrgtvmzbgrlh"
            
          
          # Resource Allocation
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "1024Mi"
              cpu: "1"
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: nats-vechr-cert
---
# Source: vechr-iiot/templates/microservice/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vechr-microservice-things-service
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-things-service
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-microservice
      app.kubernetes.io/instance: vechr-microservice-things-service
      app.kubernetes.io/name: microservice
      app.kubernetes.io/part-of: vechr-iiot
  template:
    metadata:
      name: vechr-microservice-service
      labels:
        app.kubernetes.io/component: vechr-microservice
        app.kubernetes.io/instance: vechr-microservice-things-service
        app.kubernetes.io/name: microservice
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: latest
    spec:
      restartPolicy: Always
      containers:
        - name: vechr-microservice-things-service
          image: asia-southeast2-docker.pkg.dev/vechr-iiot-389413/vechr-iiot-repository/things-service:latest
          
          ports:
            - name: http
              containerPort: 3001
              protocol: TCP
          
          imagePullPolicy: Always
          
          env:
            - name: NATS_CA
              value: "/certificate/ca.crt"
            - name: NATS_KEY
              value: "/certificate/tls.key"
            - name: NATS_CERT
              value: "/certificate/tls.crt"
            - name: NATS_URL
              value: "nats://nats-lb.default.svc.cluster.local:4222"
            - name: APP_PORT
              value: "3001"
            
            
            
            
            - name: DB_URL
              value: "postgresql://vechrUser:vechr123@my-release-postgresql.default.svc.cluster.local:5432/things_db?schema=public&connect_timeout=300"
            
            
            
            - name: JWT_SECRET
              value: "secretvechr"
            
            - name: ECRYPTED_SECRET
              value: "usersecret"
            
            - name: JWT_EXPIRES_IN
              value: "3d"
            
          
          # Resource Allocation
          resources:
            requests:
              memory: "300Mi"
              cpu: "300m"
            limits:
              memory: "1024Mi"
              cpu: "1"
          volumeMounts:
            - name: secret-nats
              mountPath: "/certificate/ca.crt"
              subPath: ca.crt
            - name: secret-nats
              mountPath: "/certificate/tls.crt"
              subPath: tls.crt
            - name: secret-nats
              mountPath: "/certificate/tls.key"
              subPath: tls.key

      volumes:
        - name: secret-nats
          secret:
            secretName: nats-vechr-cert
---
# Source: vechr-iiot/templates/microservice/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: vechr-microservice-db-logger-service-hpa
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-microservice
    app.kubernetes.io/instance: vechr-microservice-db-logger-service-hpa
    app.kubernetes.io/name: microservice
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: latest
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: vechr-microservice-db-logger-service
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# Source: vechr-iiot/charts/nats/templates/stateful-set.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: nats
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/component: nats
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: nats
  serviceName: my-release-nats-headless
  template:
    metadata:
      annotations:
        checksum/config: 31ef624a4a8849ac90dea48abe903252c28125d0768fb5bd810934bd954e3666
      labels:
        app.kubernetes.io/component: nats
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nats
        app.kubernetes.io/version: 2.9.20
        helm.sh/chart: nats-1.0.0
    spec:
      containers:
      - args:
        - --config
        - /etc/nats-config/nats.conf
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SERVER_NAME
          value: $(POD_NAME)
        image: nats:2.9.20-alpine
        lifecycle:
          preStop:
            exec:
              command:
              - nats-server
              - -sl=ldm=/var/run/nats/nats.pid
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz?js-enabled-only=true
            port: monitor
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: nats
        ports:
        - containerPort: 4222
          name: nats
        - containerPort: 9090
          name: websocket
        - containerPort: 1883
          name: mqtt
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz?js-server-only=true
            port: monitor
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 90
          httpGet:
            path: /healthz
            port: monitor
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /etc/nats-config
          name: config
        - mountPath: /var/run/nats
          name: pid
        - mountPath: /data
          name: my-release-nats-js
        - mountPath: /etc/nats-cert/ca
          name: tls-ca
        - mountPath: /etc/nats-certs/nats
          name: nats-tls
        - mountPath: /etc/nats-certs/websocket
          name: websocket-tls
        - mountPath: /etc/nats-certs/mqtt
          name: mqtt-tls
        - mountPath: /etc/nats-certs/cluster
          name: cluster-tls
      - args:
        - -pid
        - /var/run/nats/nats.pid
        - -config
        - /etc/nats-config/nats.conf
        - -config
        - /etc/nats-cert/ca/ca.crt
        - -config
        - /etc/nats-certs/cluster/tls.crt
        - -config
        - /etc/nats-certs/cluster/tls.key
        - -config
        - /etc/nats-cert/ca/ca.crt
        - -config
        - /etc/nats-certs/mqtt/tls.crt
        - -config
        - /etc/nats-certs/mqtt/tls.key
        - -config
        - /etc/nats-cert/ca/ca.crt
        - -config
        - /etc/nats-certs/nats/tls.crt
        - -config
        - /etc/nats-certs/nats/tls.key
        - -config
        - /etc/nats-cert/ca/ca.crt
        - -config
        - /etc/nats-certs/websocket/tls.crt
        - -config
        - /etc/nats-certs/websocket/tls.key
        image: natsio/nats-server-config-reloader:0.11.0
        name: reloader
        volumeMounts:
        - mountPath: /var/run/nats
          name: pid
        - mountPath: /etc/nats-config
          name: config
        - mountPath: /etc/nats-cert/ca
          name: tls-ca
        - mountPath: /etc/nats-certs/nats
          name: nats-tls
        - mountPath: /etc/nats-certs/websocket
          name: websocket-tls
        - mountPath: /etc/nats-certs/mqtt
          name: mqtt-tls
        - mountPath: /etc/nats-certs/cluster
          name: cluster-tls
      enableServiceLinks: false
      shareProcessNamespace: true
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/component: nats
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/name: nats
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      volumes:
      - configMap:
          name: my-release-nats-config
        name: config
      - emptyDir: {}
        name: pid
      - name: tls-ca
        secret:
          secretName: nats-ca
      - name: nats-tls
        secret:
          secretName: nats-vechr-cert
      - name: websocket-tls
        secret:
          secretName: nats-vechr-cert
      - name: mqtt-tls
        secret:
          secretName: nats-vechr-cert
      - name: cluster-tls
        secret:
          secretName: nats-routes-tls
  volumeClaimTemplates:
  - metadata:
      name: my-release-nats-js
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
---
# Source: vechr-iiot/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.1.0-debian-11-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "vechrUser"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "vechrUser" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "vechrUser" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: vechr-iiot/templates/influx/statefull.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: influxdb
  namespace: default
  labels:
    app.kubernetes.io/component: vechr-influxdb
    app.kubernetes.io/instance: influxdb
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/part-of: vechr-iiot
    app.kubernetes.io/version: 2.1.0-alpine
spec:
  serviceName: influxdb-service
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: vechr-influxdb
      app.kubernetes.io/instance: influxdb
      app.kubernetes.io/name: influxdb
      app.kubernetes.io/part-of: vechr-iiot
  volumeClaimTemplates:
    - metadata:
        name: influxdb-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 2Gi
  template:
    metadata:
      name: influxdb
      labels:
        app.kubernetes.io/component: vechr-influxdb
        app.kubernetes.io/instance: influxdb
        app.kubernetes.io/name: influxdb
        app.kubernetes.io/part-of: vechr-iiot
        app.kubernetes.io/version: 2.1.0-alpine
    spec:
      containers:
        - name: influxdb
          image: influxdb:2.1.0-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
          - containerPort: 8086
          envFrom:
            - configMapRef:
                name: influxdb-config
          volumeMounts:
            - mountPath: /var/lib/influxdb
              name: influxdb-pvc
---
# Source: vechr-iiot/charts/nginx-ingress/templates/controller-ingress-class.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
spec:
  controller: nginx.org/ingress-controller
---
# Source: vechr-iiot/templates/nginx/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/component: vechr-ingress
    app.kubernetes.io/instance: vechr-ingress-vechr-ingress
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: vechr-iiot
  name: vechr-ingress
  namespace: default
  annotations:
    
    # Ingress using Cert Manager Let's Encrypt
    
spec:
  
  ingressClassName: nginx
  
  
  tls:
  - hosts: 
      
      
      - app.vechr.com
      
      
    secretName: nginx-vechr-cert-dev
  
  rules:
  
  
  - host: app.vechr.com
    http:
      
      paths:
        
        - path: /api/v2/audit
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3004
        
        - path: /api/v1/audit
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3004
        
        - path: /api/audit
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3004
        
        - path: /api/v2/auth
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3005
        
        - path: /api/v1/auth
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3005
        
        - path: /api/auth
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3005
        
        - path: /api/v2/notification
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3002
        
        - path: /api/v1/notification
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3002
        
        - path: /api/notification
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3002
        
        - path: /api/v2/things
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3001
        
        - path: /api/v1/things
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3001
        
        - path: /api/things
          pathType: Prefix
          backend:
            service:
              name: vechr-microservice-service
              port:
                number: 3001
        
        - path: /
          pathType: Prefix
          backend:
            service:
              name: vechr-frontend-web-app
              port:
                number: 80
---
# Source: vechr-iiot/templates/metrics-server/components.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  labels:
    k8s-app: metrics-server
  name: v1beta1.metrics.k8s.io
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: metrics-server
    namespace: kube-system
  version: v1beta1
  versionPriority: 100
---
# Source: vechr-iiot/templates/nats/self-signed.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: nats-ca
  namespace: default
spec:
  secretName: nats-ca
  duration: 8736h # 1 year
  renewBefore: 240h # 10 days
  issuerRef:
    name: selfsigning
    kind: ClusterIssuer
  commonName: nats-ca
  usages:
  - cert sign
  subject:
    organizations:
      - vechr.com
  isCA: true
---
# Source: vechr-iiot/templates/nats/self-signed.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: nats-routes-tls
  namespace: default
spec:
  secretName: nats-routes-tls
  duration: 2160h # 90 days
  renewBefore: 240h # 10 days
  issuerRef:
    name: nats-ca
    kind: Issuer
  usages:
  - signing
  - key encipherment
  - server auth
  - client auth
  subject:
    organizations:
      - vechr.com
  dnsNames:
    
    
    - "my-release-nats-0.my-release-nats-headless"
    
    - "my-release-nats-1.my-release-nats-headless"
    
    - "my-release-nats-2.my-release-nats-headless"
    
    - "*.my-release-nats-headless"
---
# Source: vechr-iiot/templates/nats/self-signed.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: selfsigning
  namespace: default
spec:
  selfSigned: {}
---
# Source: vechr-iiot/templates/nats/self-signed.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  labels:
    app.kubernetes.io/name: nats
  name: nats-ca
  namespace: default
spec:
  ca:
    secretName: nats-ca
---
# Source: vechr-iiot/charts/nats/templates/tests/request-reply.yaml
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/component: test-request-reply
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nats
    app.kubernetes.io/version: 2.9.20
    helm.sh/chart: nats-1.0.0
  name: my-release-nats-test-request-reply
spec:
  containers:
  - args:
    - nats reply --echo echo & pid="$!"; sleep 1; nats request echo hi > /tmp/resp;
      kill "$pid"; wait; grep -qF hi /tmp/resp
    command:
    - sh
    - -ec
    - |
      work_dir="$(pwd)"
      mkdir -p "$XDG_CONFIG_HOME/nats"
      cd "$XDG_CONFIG_HOME/nats"
      if ! [ -s context ]; then
        ln -s /etc/nats-contexts context
      fi
      if ! [ -f context.txt ]; then
        echo -n "default" > context.txt
      fi
      cd "$work_dir"
      exec sh -ec "$0"
    image: natsio/nats-box:0.13.5
    name: nats-box
    volumeMounts:
    - mountPath: /etc/nats-contexts
      name: contexts
    - mountPath: /etc/nats-cert/ca
      name: tls-ca
  enableServiceLinks: false
  restartPolicy: Never
  volumes:
  - name: contexts
    secret:
      secretName: my-release-nats-box-contexts
  - name: tls-ca
    secret:
      secretName: nats-ca
