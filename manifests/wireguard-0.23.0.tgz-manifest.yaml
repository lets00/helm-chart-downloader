---
# Source: wireguard/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: "my-release-wireguard"
---
# Source: wireguard/templates/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-sa
automountServiceAccountToken: false
---
# Source: wireguard/templates/config.yaml
kind: Secret
apiVersion: v1
metadata:
  name: "my-release-wg-config"
data:
  wg0.conf: W0ludGVyZmFjZV0KQWRkcmVzcyA9IDEwLjM0LjAuMS8yNApMaXN0ZW5Qb3J0ID0gNTE4MjAKUG9zdFVwID0gd2cgc2V0IHdnMCBwcml2YXRlLWtleSAvZXRjL3dpcmVndWFyZC9wcml2YXRla2V5ICYmIGlwdGFibGVzIC10IG5hdCAtQSBQT1NUUk9VVElORyAtcyAxMC4zNC4wLjAvMjQgLW8gZXRoMCAtaiBNQVNRVUVSQURFClBvc3REb3duID0gaXB0YWJsZXMgLXQgbmF0IC1EIFBPU1RST1VUSU5HIC1zIC1zIDEwLjM0LjAuMC8yNCAtbyBldGgwIC1qIE1BU1FVRVJBREUKCiMgQ2xpZW50cwojIEVuZCBDbGllbnRz
---
# Source: wireguard/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "my-release-wireguard"
  labels:
    app: "my-release-wireguard"
spec:
  type: LoadBalancer
  ports:
    - name: wg
      protocol: UDP
      port: 51820
      targetPort: 51820
  selector:
    app: "my-release-wireguard"
---
# Source: wireguard/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-wireguard"
  labels:
    role: vpn

spec:
  selector:
    matchLabels:
      app: "my-release-wireguard"
  strategy: 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 3ddf6e2d73fcf8c2abbdc2a215cb91e938cf328d487872e4942cb50a77dac770
      labels:
        app: "my-release-wireguard"
        role: vpn
    spec:      
      serviceAccountName: my-release-sa
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: "my-release-wireguard"
          matchLabelKeys:
            - pod-template-hash
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        runAsNonRoot: true        
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: 'my-release-wireguard'
                role: vpn
            topologyKey: kubernetes.io/hostname
      initContainers:
        - name: sysctls
          image: busybox:stable
          command:
          - sh
          - -c
          - sysctl -w net.ipv4.ip_forward=1 && sysctl -w net.ipv4.conf.all.forwarding=1
          securityContext: 
            
            capabilities:
              drop:
                - ALL
              add:
                - NET_ADMIN
                - NET_RAW
                - SETUID
                - SETGID
            runAsNonRoot: false
            privileged: true
          resources:
            requests:
              memory: 64Mi
              cpu: "100m"
            limits:
              memory: 64Mi
              cpu: "100m"
      containers:
        - name: wireguard
          image: "ghcr.io/bryopsida/wireguard:main"
          imagePullPolicy: "Always"
          ports:
          - containerPort: 51820
            protocol: UDP
            name: wireguard
          env:
          - name: LOG_LEVEL
            value: info
          securityContext: 
            
            capabilities:
              drop:
                - ALL
              add:
                - NET_ADMIN
                - NET_RAW
                - SETUID
                - SETGID
            runAsNonRoot: true
            runAsUser: 1000
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: true
            privileged: false
          resources: 
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          startupProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - 'ip link show dev wg0 | grep -s up'
            periodSeconds: 2
            failureThreshold: 15
          readinessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - 'ip link show dev wg0 | grep -s up'
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - 'ip link show dev wg0 | grep -s up'
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
          - name: run
            mountPath: /run
          - name: config
            mountPath: /etc/wireguard/wg0.conf
            subPath: "wg0.conf"
          - name: privatekey
            mountPath: /etc/wireguard/privatekey
            subPath: privatekey
      volumes:
      - name: run
        emptyDir: {}
      - name: config
        secret:
          secretName: "my-release-wg-config"
      - name: privatekey
        secret:
          secretName: "my-release-wg-generated"
---
# Source: wireguard/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-release-wireguard
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-release-wireguard
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 75
---
# Source: wireguard/templates/privatekey-gen-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: my-release-pre-install-job-sa
  labels:
    helm.sh/chart: wireguard-0.23.0
    app.kubernetes.io/name: wireguard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": keep
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: wireguard/templates/privatekey-gen-job.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-wg-gen-scripts
  namespace: default
  labels:
    helm.sh/chart: wireguard-0.23.0
    app.kubernetes.io/name: wireguard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
data:
  gen-key.sh: |
    #!/usr/bin/env sh
    kubectl --namespace $RELEASE_NAMESPACE create secret generic $SECRET_NAME --from-literal=privatekey=$(wg genkey)
---
# Source: wireguard/templates/privatekey-gen-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: my-release-secret-creator
  labels:
    helm.sh/chart: wireguard-0.23.0
    app.kubernetes.io/name: wireguard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
# Source: wireguard/templates/privatekey-gen-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-hook-create-secret
  namespace: default
  labels:
    helm.sh/chart: wireguard-0.23.0
    app.kubernetes.io/name: wireguard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
subjects:
- kind: ServiceAccount
  name:  my-release-pre-install-job-sa
  namespace: default
roleRef:
  kind: Role 
  name: my-release-secret-creator
  apiGroup: rbac.authorization.k8s.io
---
# Source: wireguard/templates/privatekey-gen-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-wg-gen"
  namespace: "default"
  labels:
    helm.sh/chart: wireguard-0.23.0
    app.kubernetes.io/name: wireguard
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/resource-policy": delete
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  ttlSecondsAfterFinished: 60
  template:
    spec:      
      serviceAccountName: my-release-pre-install-job-sa
      restartPolicy: Never
      securityContext: 
        fsGroup: 1000
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: script
          configMap:
            name: my-release-wg-gen-scripts
            items:
              - key: gen-key.sh
                path: entry-point.sh
                mode: 0755
      containers:
      - volumeMounts:
          - name: script
            mountPath: /job/
        name: keygen-job
        image: "ghcr.io/curium-rocks/wg-kubectl:latest"
        imagePullPolicy: "Always"
        securityContext: 
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        resources:
          requests:
            memory: 64Mi
            cpu: "100m"
          limits:
            memory: 64Mi
            cpu: "100m"
        env:
          - name: SECRET_NAME
            value: "my-release-wg-generated"
          - name: RELEASE_NAMESPACE
            value: "default"
          - name: RELEASE_NAME
            value: "my-release"
        command: 
          - /job/entry-point.sh
