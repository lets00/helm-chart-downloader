---
# Source: aws-fsx-csi-driver/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fsx-csi-controller-sa
  labels:
    helm.sh/chart: aws-fsx-csi-driver-0.1.0
    app.kubernetes.io/name: aws-fsx-csi-driver
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: aws-fsx-csi-driver/templates/serviceaccount.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fsx-csi-external-provisioner-role
  labels:
    helm.sh/chart: aws-fsx-csi-driver-0.1.0
    app.kubernetes.io/name: aws-fsx-csi-driver
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
# Source: aws-fsx-csi-driver/templates/serviceaccount.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: fsx-csi-external-provisioner-binding
  labels:
    helm.sh/chart: aws-fsx-csi-driver-0.1.0
    app.kubernetes.io/name: aws-fsx-csi-driver
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: fsx-csi-controller-sa
    namespace: default
roleRef:
  kind: ClusterRole
  name: fsx-csi-external-provisioner-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: aws-fsx-csi-driver/templates/node.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-aws-fsx-csi-driver-daemonset
  labels:
    helm.sh/chart: aws-fsx-csi-driver-0.1.0
    app.kubernetes.io/name: aws-fsx-csi-driver
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-fsx-csi-driver
      app.kubernetes.io/instance: my-release-daemonset
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-fsx-csi-driver
        app.kubernetes.io/instance: my-release-daemonset
    spec:
      securityContext:
        {}
      hostNetwork: true
      containers:
        - name: fsx-plugin
          securityContext:
            privileged: true
          image: "amazon/aws-fsx-csi-driver:latest"
          imagePullPolicy: IfNotPresent
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=5
          env:
            - name: CSI_ENDPOINT
              value: unix:/csi/csi.sock
          volumeMounts:
            - name: kubelet-dir
              mountPath: /var/lib/kubelet
              mountPropagation: "Bidirectional"
            - name: plugin-dir
              mountPath: /csi
          ports:
            - containerPort: 9810
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
          resources:
            {}
        - name: csi-driver-registrar
          securityContext:
            {}
          image: "quay.io/k8scsi/csi-node-driver-registrar:v1.1.0"
          imagePullPolicy: IfNotPresent
          args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
            - --v=5
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/fsx.csi.aws.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources:
            {}
        - name: liveness-probe
          imagePullPolicy: Always
          image: "quay.io/k8scsi/livenessprobe:v1.1.0"
          args:
            - --csi-address=/csi/csi.sock
            - --health-port=9810
          volumeMounts:
            - mountPath: /csi
              name: plugin-dir
          resources:
            {}
      volumes:
        - name: kubelet-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/fsx.csi.aws.com/
            type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: aws-fsx-csi-driver/templates/controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-aws-fsx-csi-driver-controller
  labels:
    helm.sh/chart: aws-fsx-csi-driver-0.1.0
    app.kubernetes.io/name: aws-fsx-csi-driver
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-fsx-csi-driver
      app.kubernetes.io/instance: my-release-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-fsx-csi-driver
        app.kubernetes.io/instance: my-release-controller
    spec:
      serviceAccountName: fsx-csi-controller-sa
      securityContext:
        {}
      priorityClassName: system-cluster-critical
      tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
      containers:
        - name: fsx-plugin
          securityContext:
            {}
          image: "amazon/aws-fsx-csi-driver:latest"
          imagePullPolicy: IfNotPresent
          args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=5
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-secret
                  key: key_id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-secret
                  key: access_key
                  optional: true
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources:
            {}
        - name: csi-provisioner
          image: "quay.io/k8scsi/csi-provisioner:v1.3.0"
          args:
            - --csi-address=$(ADDRESS)
            - --timeout=5m
            - --v=5
            - --enable-leader-election
            - --leader-election-type=leases
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
          resources:
            {}

      volumes:
        - name: socket-dir
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: aws-fsx-csi-driver/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: fsx.csi.aws.com
spec:
  attachRequired: false
