---
# Source: ai-chatbot-framework/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
---
# Source: ai-chatbot-framework/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password:  "cm9vdA=="
  mongodb-password:  "cm9vdA=="
---
# Source: ai-chatbot-framework/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: ai-chatbot-framework/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: ai-chatbot-framework/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ai-chatbot-framework-backend
  labels:
    app: "ai-chatbot-framework"
    name: "ai-chatbot-framework-backend"
    helm.sh/chart: ai-chatbot-framework-0.1.0
    app.kubernetes.io/name: ai-chatbot-framework
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http-backend
  selector:
    name: "ai-chatbot-framework-backend"
---
# Source: ai-chatbot-framework/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ai-chatbot-framework-frontend
  labels:
    app: "ai-chatbot-framework"
    name: "ai-chatbot-framework-frontend"
    helm.sh/chart: ai-chatbot-framework-0.1.0
    app.kubernetes.io/name: ai-chatbot-framework
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http-frontend
  selector:
    name: "ai-chatbot-framework-frontend"
---
# Source: ai-chatbot-framework/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.3.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.3-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_USERNAME
              value: "root"
            - name: MONGODB_DATABASE
              value: "ai_chatbot_framework"
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-password
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: ai-chatbot-framework/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ai-chatbot-framework-backend
  labels:
    app: "ai-chatbot-framework"
    name: "ai-chatbot-framework-backend"
    helm.sh/chart: ai-chatbot-framework-0.1.0
    app.kubernetes.io/name: ai-chatbot-framework
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: "ai-chatbot-framework"
      name: "ai-chatbot-framework-backend"
  template:
    metadata:
      labels:
        app: "ai-chatbot-framework"
        name: "ai-chatbot-framework-backend"
    spec:
      initContainers:
        - name: ai-chatbot-framework-init
          image: "alfredfrancis/ai-chatbot-framework_backend:latest"
          imagePullPolicy: Always
          command: ["python","manage.py","migrate"]
          env:
            - name: MONGO_URL
              value: mongodb://root:root@ai-chatbot-framework-mongodb:27017/ai_chatbot_framework
            - name: APPLICATION_ENV
              value: 'Helm'
      containers:
        - name: ai-chatbot-framework
          image: "alfredfrancis/ai-chatbot-framework_backend:latest"
          imagePullPolicy: Always
          command: ["gunicorn", "run:app" ,"--log-level=debug", "--timeout", "90","--bind", "0.0.0.0:80" ]
          env:
            - name: MONGO_URL
              value: mongodb://root:root@ai-chatbot-framework-mongodb:27017/ai_chatbot_framework
            - name: APPLICATION_ENV
              value: 'Helm'
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 120
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            initialDelaySeconds: 120
            httpGet:
              path: /ready
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 2048Mi
            requests:
              cpu: 100m
              memory: 1024Mi
---
# Source: ai-chatbot-framework/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-ai-chatbot-framework-frontend
  labels:
    app: "ai-chatbot-framework"
    name: "ai-chatbot-framework-frontend"
    helm.sh/chart: ai-chatbot-framework-0.1.0
    app.kubernetes.io/name: ai-chatbot-framework
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app: "ai-chatbot-framework"
      name: "ai-chatbot-framework-frontend"
  template:
    metadata:
      labels:
        app: "ai-chatbot-framework"
        name: "ai-chatbot-framework-frontend"
    spec:
      containers:
        - name: ai-chatbot-framework
          image: "alfredfrancis/ai-chatbot-framework_frontend:latest"
          imagePullPolicy: Always
          command: ["nginx", "-g", "daemon off;"]
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
---
# Source: ai-chatbot-framework/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-ai-chatbot-framework
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  labels:
    app: "ai-chatbot-framework"
    name: "ai-chatbot-framework-ingress"
    helm.sh/chart: ai-chatbot-framework-0.1.0
    app.kubernetes.io/name: ai-chatbot-framework
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /(.*)
        backend:
          service:
            name: my-release-ai-chatbot-framework-frontend
            port: 
              number: 80
      - pathType: Prefix
        path: /gateway/(.*)
        backend:
          service:
            name: my-release-ai-chatbot-framework-backend
            port: 
              number: 80
