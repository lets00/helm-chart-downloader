---
# Source: opencve/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "my-release"
    heritage: "Helm"
  name: my-release-postgresql
---
# Source: opencve/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: opencve/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opencve
  labels:
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: opencve/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "my-release"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "b3BlbmN2ZQ=="
---
# Source: opencve/templates/gunicorn-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gunicorn-config
type: Opaque
stringData:
  config.py: |+
    import os  
  
    bind = '0.0.0.0:8000'
    backlog = 2048
    #
    ## Worker processes
    ##
    #
    #   workers - The number of worker processes that this server
    #   #       should keep alive for handling requests.
    #   #
    #   #       A positive integer generally in the 2-4 x $(NUM_CORES)
    #   #       range. You'll want to vary this a bit to find the best
    #   #       for your particular application's work load.
    #   #
    #   #   worker_class - The type of workers to use. The default
    #   #       sync class should handle most 'normal' types of work
    #   #       loads. You'll want to read
    #   #       http://docs.gunicorn.org/en/latest/design.html#choosing-a-worker-type
    #   #       for information on when you might want to choose one
    #   #       of the other worker classes.
    #   #
    #   #       A string referring to a Python path to a subclass of
    #   #       gunicorn.workers.base.Worker. The default provided values
    #   #       can be seen at
    #   #       http://docs.gunicorn.org/en/latest/settings.html#worker-class
    #   #
    #   #   worker_connections - For the eventlet and gevent worker classes
    #   #       this limits the maximum number of simultaneous clients that
    #   #       a single process can handle.
    #   #
    #   #       A positive integer generally set to around 1000.
    #   #
    #   #   timeout - If a worker does not notify the master process in this
    #   #       number of seconds it is killed and a new worker is spawned
    #   #       to replace it.
    #   #
    #   #       Generally set to thirty seconds. Only set this noticeably
    #   #       higher if you're sure of the repercussions for sync workers.
    #   #       For the non sync workers it just means that the worker
    #   #       process is still communicating and is not tied to the length
    #   #       of time required to handle a single request.
    #   #
    #   #   keepalive - The number of seconds to wait for the next request
    #   #       on a Keep-Alive HTTP connection.
    #   #
    #   #       A positive integer. Generally set in the 1-5 seconds range.
    #   #
    workers = 9
    #workers = len(os.sched_getaffinity(0)) * 2 + 1
    worker_class = 'sync'
    worker_connections = 1000
    graceful_timeout = 30
    timeout = 30
    keepalive = 5
    #
    ##   spew - Install a trace function that spews every line of Python
    ##       that is executed when running the server. This is the
    ##       nuclear option.
    ##
    ##       True or False
    ##
    spew = 'false'
    #   
    #   user - Switch worker processes to run as this user.
    #   #
    #   #       A valid user id (as an integer) or the name of a user that
    #   #       can be retrieved with a call to pwd.getpwnam(value) or None
    #   #       to not change the worker process user.
    #   #
    #   #   group - Switch worker process to run as this group.
    #   #
    #   #       A valid group id (as an integer) or the name of a user that
    #   #       can be retrieved with a call to pwd.getgrnam(value) or None
    #   #       to change the worker processes group.
    user = 'opencve'
    group = 'opencve'
    #
    ##   Logging
    ##
    ##   logfile - The path to a log file to write to.
    ##
    ##       A path string. "-" means log to stdout.
    ##
    ##   loglevel - The granularity of log output
    ##
    ##       A string of "debug", "info", "warning", "error", "critical"
    ##
    #
    errorlog = '-'
    loglevel = 'error'
    accesslog = '-'
    access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'
    #
    #
    max_requests = 1000
    max_requests_jitter = 50
    preload_app = 'true'
    threads = 1
---
# Source: opencve/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: opencve
type: Opaque
stringData:
  opencve.cfg: |+
    [core]
    ; The name and the port of OpenCVE server. Change it if you launch the
    ; webserver with a different value (ie opencve webserver -b 0.0.0.0:80).
    ;server_name = 0.0.0.0:8000
    ; leaving server_name empty for it to work with k8s 
    server_name = 
    
    ; Used for securely signing the session cookie, keep it secret !
    secret_key = TqleI1sm3eEwa2uw9qwPeyWi23q823u4923jd7qeq0wYt3jadC 

    ; OpenCVE only supports PostgreSQL as database.
    
    database_uri = postgresql://postgres:opencve@my-release-postgresql.default.svc.cluster.local:5432/opencve
     

    ; see https://kombu.readthedocs.io/en/latest/userguide/connections.html#connection-urls
    celery_broker_url = redis://opencve-redis-master.default.svc.cluster.local:6379/0
    celery_result_backend = redis://opencve-redis-master.default.svc.cluster.local:6379/1
    celery_lock_url = redis://opencve-redis-master.default.svc.cluster.local:6379/2

    ; Display the static frontpage. If False the user will be redirect to the
    ; vulnerabilitites (CVE) page.
    display_welcome = false
    
    ; Display the terms of service page.
    display_terms = false

    ; Include a HTML analytics code in all pages.
    include_analytics = false

    ; Number of items to display in tables.
    cves_per_page = 20
    vendors_per_page = 20
    products_per_page = 20
    cwes_per_page = 20
    reports_per_page = 20
    alerts_per_page = 20
    tags_per_page = 20
    activities_per_page = 20

    ; Use the werkzeug middleware for reverse proxy
    ; see https://werkzeug.palletsprojects.com/en/1.0.x/middleware/proxy_fix/
    use_reverse_proxy = True

    ; Cleanup the database by keeping the N last days of reports
    ; Set the value to 0 to disable the cleanup
    reports_cleanup_days = 0

    ; Display a reCAPTCHA form in register page.
    display_recaptcha = false
    recaptcha_site_key = 
    recaptcha_secret_key = 

    [api]
    ; Enable the API ratelimit
    ratelimit_enabled = false

    ; Default value accross all API routes
    ; see https://flask-limiter.readthedocs.io/en/stable/#rate-limit-string-notation
    ratelimit_value = 3600/hour

    ; Ratelimit storage URI
    ; see https://limits.readthedocs.io/en/latest/storage.html
    ratelimit_storage_url = redis://opencve-redis-master.default.svc.cluster.local:6379/2

    [mail]
    ; Choices are 'smtp' or 'sendmail'
    email_adapter = smtp

    ; The 'From' field of the sent emails
    email_from = no-reply@opencve.io
    
    ; Configuration to set up SMTP mails.
    smtp_server = my.mail.server
    smtp_port = 587
    smtp_use_tls = true
    smtp_use_ssl = false
    smtp_username = login@user.name
    smtp_password = mysecretpassword
---
# Source: opencve/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    appendonly no
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: opencve/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: opencve/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: opencve/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "my-release"
---
# Source: opencve/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "my-release"
    role: master
---
# Source: opencve/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: opencve/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: opencve/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-opencve
  labels:
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000 
      protocol: TCP
  selector:
    app: webserver
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
---
# Source: opencve/templates/deployment-celery-beat.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencve-celery-beat
  labels:
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opencve
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opencve
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: opencve
      securityContext:
        {}
      containers:
        - name: opencve-celery-beat
          env:
            - name: OPENCVE_CONFIG
              value: "/app/conf/opencve.cfg" 
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["./run.sh"]
          args: ["celery-beat"]
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /app/conf
      initContainers:
        - name: opencve-sleep
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["sleep"]
          args: ["150"]
          resources:
            {}
        - name: opencve-import-data
          env:
            - name: OPENCVE_CONFIG
              value: "/app/conf/opencve.cfg"
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["opencve"]
          args: ["import-data", "--confirm"]
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /app/conf/opencve.cfg
              subPath: opencve.cfg
              readOnly: true
      volumes:
        - name: config-volume
          secret:
            secretName: opencve
---
# Source: opencve/templates/deployment-celery-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencve-celery-worker
  labels:
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opencve
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opencve
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: opencve
      securityContext:
        {}
      containers:
        - name: opencve-celery-worker
          env:
            - name: OPENCVE_CONFIG
              value: "/app/conf/opencve.cfg"
          securityContext:
            null
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["./run.sh"]
          args: ["celery-worker"]
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /app/conf
      volumes:
        - name: config-volume
          secret:
            secretName: opencve
---
# Source: opencve/templates/deployment-webserver.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencve-webserver
  labels:
    app: webserver
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webserver
      app.kubernetes.io/name: opencve
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app: webserver
        app.kubernetes.io/name: opencve
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: opencve
      securityContext:
        {}
      initContainers:
        - name: opencve-sleep
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["sleep"]
          args: ["100"]
          resources:
            {}
        - name: opencve-upgrade-db
          env:
            - name: OPENCVE_CONFIG
              value: "/app/conf/opencve.cfg"
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["opencve"]
          args: ["upgrade-db"]
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /app/conf
      containers:
        - name: opencve-webserver
          env:
            - name: OPENCVE_CONFIG
              value: "/app/conf/opencve.cfg" 
          securityContext:
            {}
          image: "cleveritcz/opencve:1.5.0"
          imagePullPolicy: IfNotPresent
          command: ["./run.sh"]
          args: ["webserver", "-c", "/app/config/config.py"]
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            periodSeconds: 30
            initialDelaySeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6 
            successThreshold: 1
            httpGet:
              path: /cve
              port: 8000
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
            periodSeconds: 30
            httpGet:
              path: /cve
              port: 8000
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /app/conf
            - name: gunicorn-volume
              mountPath: /app/config
      volumes:
        - name: config-volume
          secret:
            secretName: opencve
        - name: gunicorn-volume
          secret:
            secretName: gunicorn-config
---
# Source: opencve/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "my-release"
    heritage: "Helm"
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "my-release"
      role: master
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "my-release"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-postgresql
      initContainers:
        # - name: do-something
        #   image: busybox
        #   command: ['do', 'something']
        
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:11.18.0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "opencve"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "opencve" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "opencve" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: opencve/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.4.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.4.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 4fd505ebf7a4e1ca44f8b7b0e676d576adaec263db4274b097e5c0d8d9fd867d
        checksum/health: 40dd5b7021b943537b86e4b088ad37b2ca2fd7af9c441d338fe7f77f22aed8e3
        checksum/scripts: b8f366f2d153111fb6aa23cb2aaed36aba4a9d72142f67bbd6368ea90509ff19
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 5
            initialDelaySeconds: 20
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 30
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: opencve/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-opencve
  labels:
    helm.sh/chart: opencve-1.2.0
    app.kubernetes.io/name: opencve
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.5.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
spec:
  tls:
    - hosts:
        - "opencve.cleverit.cz"
      secretName: opencve-ssl-secret
  rules:
    - host: "opencve.cleverit.cz"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-opencve
                port:
                  number: 8000
