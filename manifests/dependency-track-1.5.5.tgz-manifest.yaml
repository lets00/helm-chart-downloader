---
# Source: dependency-track/templates/backend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dependency-track-apiserver
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
---
# Source: dependency-track/templates/frontend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dependency-track-frontend
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
---
# Source: dependency-track/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "Zk80UlZLU3NnUw=="
  postgresql-password: "ZGVwdHJhY2s="
---
# Source: dependency-track/templates/backend/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
  name: my-release-dependency-track-apiserver
spec:
  accessModes: 
  - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: dependency-track/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
---
# Source: dependency-track/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    role: primary
---
# Source: dependency-track/templates/backend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dependency-track-apiserver
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: api
  selector:
    app.kubernetes.io/name: dependency-track
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: dependency-track/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dependency-track-frontend
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: dependency-track
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: frontend
---
# Source: dependency-track/templates/backend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dependency-track-apiserver
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: dependency-track
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dependency-track
        helm.sh/chart: dependency-track-1.5.5
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: backend
    spec:
      serviceAccountName: my-release-dependency-track-apiserver
      securityContext:
        fsGroup: 1000
      containers:
      - name: dependency-track-apiserver
        securityContext:
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
        image: docker.io/dependencytrack/apiserver:4.6.3
        imagePullPolicy: IfNotPresent
        resources: 
          limits:
            cpu: 4
            memory: 16Gi
          requests:
            cpu: 2
            memory: 4608Mi
        env:
        - name: ALPINE_DATA_DIRECTORY
          value: "/data"
        - name: ALPINE_DATABASE_MODE
          value: "external"
        - name: ALPINE_DATABASE_DRIVER
          value: "org.postgresql.Driver"
        - name: ALPINE_DATABASE_URL
          value: jdbc:postgresql://my-release-postgresql/deptrack
        - name: ALPINE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-postgresql
              key: postgresql-password
        - name: ALPINE_DATABASE_USERNAME
          value: deptrack
        volumeMounts:
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        ports:
        - name: api
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            port: api
            path: /api/version
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            port: api
            path: /
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: tmp
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: my-release-dependency-track-apiserver
---
# Source: dependency-track/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dependency-track-frontend
  labels:
    app.kubernetes.io/name: dependency-track
    helm.sh/chart: dependency-track-1.5.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dependency-track
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dependency-track
        helm.sh/chart: dependency-track-1.5.5
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: frontend
    spec:
      serviceAccountName: my-release-dependency-track-frontend
      securityContext:
        null
      containers:
      - name: dependency-track-frontend
        securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 101
        resources: 
          limits:
            cpu: 1
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        image: docker.io/dependencytrack/frontend:4.6.1
        imagePullPolicy: IfNotPresent
        env:
        - name: API_BASE_URL
          value: ""
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        #- name: config
        #  mountPath: /app/static
        livenessProbe:
          httpGet:
            port: http
            path: /
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            port: http
            path: /
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: tmp
        emptyDir: {}
      # https://github.com/DependencyTrack/frontend/issues/60
      # - name: config
      #  configMap:
      #    name: my-release-dependency-track-frontend
      #    items:
      #    - key: config.json
      #      path: config.json
---
# Source: dependency-track/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      role: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.10.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r40
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "deptrack"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "deptrack"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "deptrack" -d "dbname=deptrack" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "deptrack" -d "dbname=deptrack" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
