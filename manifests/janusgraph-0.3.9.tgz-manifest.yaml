---
# Source: janusgraph/charts/cassandra/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9042
        - port: 7199
        - port: 7001
        - port: 7000
---
# Source: janusgraph/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: janusgraph
      app.kubernetes.io/component: janusgraph
      app.kubernetes.io/part-of: janusgraph
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8182
---
# Source: janusgraph/charts/cassandra/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
---
# Source: janusgraph/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: janusgraph
      app.kubernetes.io/component: janusgraph
      app.kubernetes.io/part-of: janusgraph
---
# Source: janusgraph/charts/cassandra/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
automountServiceAccountToken: false
---
# Source: janusgraph/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
automountServiceAccountToken: false
---
# Source: janusgraph/charts/cassandra/templates/cassandra-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
type: Opaque
data:
  cassandra-password: "SHAySXplR1hCdw=="
---
# Source: janusgraph/charts/cassandra/templates/metrics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-cassandra-metrics-conf
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
    app.kubernetes.io/part-of: cassandra
    app.kubernetes.io/component: cassandra-exporter
data:
  config.yml: |-
    host: localhost:7199
    ssl: False
    user:
    password:
    listenPort: 8080
    blacklist:
      # To profile the duration of jmx call you can start the program with the following options
      # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
      #
      # To get intuition of what is done by cassandra when something is called you can look in cassandra
      # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
      # Please avoid to scrape frequently those calls that are iterating over all sstables
    
      # Unaccessible metrics (not enough privilege)
      - java:lang:memorypool:.*usagethreshold.*
    
      # Leaf attributes not interesting for us but that are presents in many path
      - .*:999thpercentile
      - .*:95thpercentile
      - .*:fifteenminuterate
      - .*:fiveminuterate
      - .*:durationunit
      - .*:rateunit
      - .*:stddev
      - .*:meanrate
      - .*:mean
      - .*:min
    
      # Path present in many metrics but uninterresting
      - .*:viewlockacquiretime:.*
      - .*:viewreadtime:.*
      - .*:cas[a-z]+latency:.*
      - .*:colupdatetimedeltahistogram:.*
    
      # Mostly for RPC, do not scrap them
      - org:apache:cassandra:db:.*
    
      # columnfamily is an alias for Table metrics
      # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
      - org:apache:cassandra:metrics:columnfamily:.*
    
      # Should we export metrics for system keyspaces/tables ?
      - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*
    
      # Don't scrap us
      - com:criteo:nosql:cassandra:exporter:.*
    
    maxScrapFrequencyInSec:
      50:
        - .*
    
      # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
      3600:
        - .*:snapshotssize:.*
        - .*:estimated.*
        - .*:totaldiskspaceused:.*
---
# Source: janusgraph/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
data:
  janusgraph.properties: |-
    storage.backend=cql
    storage.hostname=my-release-cassandra
    storage.port=9043
    cache.db-cache=true
---
# Source: janusgraph/charts/cassandra/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cassandra-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9043
      targetPort: cql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cassandra
---
# Source: janusgraph/charts/cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: cql
      port: 9043
      targetPort: cql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cassandra
---
# Source: janusgraph/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: gremlin
      port: 8182
      targetPort: gremlin
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
---
# Source: janusgraph/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-janusgraph
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: janusgraph
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: janusgraph-0.3.9
    app.kubernetes.io/component: janusgraph
    app.kubernetes.io/part-of: janusgraph
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: janusgraph
      app.kubernetes.io/component: janusgraph
      app.kubernetes.io/part-of: janusgraph
  template:
    metadata:
      annotations:
        checksum/config: bfb7ba26ff5a07163309fd34e971e5ae091bfdb2082475a13f69a00f655d61fc
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: janusgraph
        app.kubernetes.io/version: 1.0.0
        helm.sh/chart: janusgraph-0.3.9
        app.kubernetes.io/component: janusgraph
        app.kubernetes.io/part-of: janusgraph
    spec:
      serviceAccountName: my-release-janusgraph
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: janusgraph
                    app.kubernetes.io/component: janusgraph
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-storage
          image: docker.io/bitnami/janusgraph:1.0.0-debian-12-r5
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
        
              # HACK: Gremlin console interactive mode won't work unless its history file is writable at /opt/bitnami/janusgraph
              # To be able to run with readOnlyRootFilesystem, we create the file and mount it as a volume
              # Additionally copy the default content of the ext directory for console plugins installation
              touch /base-dir/.gremlin_groovy_history
              cp /opt/bitnami/janusgraph/ext/* /ext-dir
        
              # Load env variables
              [[ -f /opt/bitnami/scripts/janusgraph-env.sh ]] && . /opt/bitnami/scripts/janusgraph-env.sh
        
              # Copy Janusgraph configmap
              cp "/bitnami/janusgraph/conf/janusgraph.properties" "${JANUSGRAPH_PROPERTIES}"
        
              # Configure libnss_wrapper
              if [[ -f /opt/bitnami/scripts/libos.sh ]]; then
                . /opt/bitnami/scripts/libos.sh
                if ! am_i_root; then
                    export LNAME="janusgraph"
                    export LD_PRELOAD="/opt/bitnami/common/lib/libnss_wrapper.so"
                    if ! user_exists "$(id -u)" && [[ -f "$LD_PRELOAD" ]]; then
                        info "Configuring libnss_wrapper"
                        NSS_WRAPPER_PASSWD="$(mktemp)"
                        export NSS_WRAPPER_PASSWD
                        NSS_WRAPPER_GROUP="$(mktemp)"
                        export NSS_WRAPPER_GROUP
                        echo "janusgraph:x:$(id -u):$(id -g):JanusGraph:${JANUSGRAPH_BASE_DIR}:/bin/false" > "$NSS_WRAPPER_PASSWD"
                        echo "janusgraph:x:$(id -g):" > "$NSS_WRAPPER_GROUP"
                        chmod 400 "$NSS_WRAPPER_PASSWD" "$NSS_WRAPPER_GROUP"
                    fi
                fi
              fi
        
              # Configure from environment variables
              if [[ -f "/opt/bitnami/scripts/libjanusgraph.sh" ]]; then
                . /opt/bitnami/scripts/libjanusgraph.sh
                janusgraph_properties_configure_from_environment_variables
              fi
        
              # Check storage
              echo "graph = JanusGraphFactory.open('${JANUSGRAPH_PROPERTIES}')" > "/tmp/check-storage.groovy"
              info "Waiting for Storage backend to be ready..."
        
              if ! retry_while "${JANUSGRAPH_BIN_DIR}/gremlin.sh -e /tmp/check-storage.groovy"; then
                  error "Storage backend is not ready yet."
                  exit 1
              fi
        
              # Cleanup
              rm "/tmp/check-storage.groovy" "${JANUSGRAPH_PROPERTIES}"
              info "Storage is ready"
          env:
            - name: JANUSGRAPH_PROPERTIES
              value: /tmp/janusgraph.properties
            - name: JANUSGRAPH_CFG_STORAGE_USERNAME
              value: "bn_janusgraph"
            - name: JANUSGRAPH_CFG_STORAGE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-cassandra
                  key: cassandra-password
            - name: JANUSGRAPH_CFG_STORAGE_CQL_KEYSPACE
              value: "bitnami_janusgraph"
          envFrom:
          resources:
            limits:
              cpu: "3.0"
              ephemeral-storage: 1024Mi
              memory: 6144Mi
            requests:
              cpu: "1.5"
              ephemeral-storage: 50Mi
              memory: 4096Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: janusgraph-properties
              mountPath: /bitnami/janusgraph/conf/janusgraph.properties
              subPath: janusgraph.properties
            - name: empty-dir
              mountPath: /ext-dir
              subPath: app-ext-dir
            - name: empty-dir
              mountPath: /base-dir
              subPath: app-base-dir
      containers:
        - name: janusgraph
          image: docker.io/bitnami/janusgraph:1.0.0-debian-12-r5
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: JANUSGRAPH_PORT_NUMBER
              value: "8182"
            - name: JAVA_OPTIONS
              value: ""
            - name: JANUSGRAPH_JMX_METRICS_ENABLED
              value: "false"
            - name: GREMLIN_AUTOCONFIGURE_POOL
              value: "true"
            - name: JANUSGRAPH_CFG_STORAGE_USERNAME
              value: "bn_janusgraph"
            - name: JANUSGRAPH_CFG_STORAGE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-cassandra
                  key: cassandra-password
            - name: JANUSGRAPH_CFG_STORAGE_CQL_KEYSPACE
              value: "bitnami_janusgraph"
          envFrom:
          resources:
            limits:
              cpu: "3.0"
              ephemeral-storage: 1024Mi
              memory: 6144Mi
            requests:
              cpu: "1.5"
              ephemeral-storage: 50Mi
              memory: 4096Mi
          ports:
            - name: gremlin
              containerPort: 8182
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - gremlin
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: gremlin
          volumeMounts:
            - name: data
              mountPath: /bitnami/janusgraph/data
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/janusgraph/.gremlin_groovy_history
              subPath: app-base-dir/.gremlin_groovy_history
            - name: empty-dir
              mountPath: /opt/bitnami/janusgraph/ext
              subPath: app-ext-dir
            - name: janusgraph-conf
              mountPath: /opt/bitnami/janusgraph/conf
            - name: janusgraph-properties
              mountPath: /bitnami/janusgraph/conf/janusgraph.properties
              subPath: janusgraph.properties
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: janusgraph-conf
          emptyDir: {}
        - name: janusgraph-properties
          configMap:
            name: my-release-janusgraph
        - name: data
          emptyDir: {}
---
# Source: janusgraph/charts/cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-cassandra
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
  serviceName: my-release-cassandra-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cassandra
        app.kubernetes.io/version: 4.1.5
        helm.sh/chart: cassandra-11.3.1
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: my-release-cassandra
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: cassandra
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                  echo "Setting node as password seeder"
                  export CASSANDRA_PASSWORD_SEEDER=yes
              else
                  # Only node 0 will execute the startup initdb scripts
                  export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          image: docker.io/bitnami/cassandra:4.1.5-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: cassandra
            - name: CASSANDRA_SEEDS
              value: "my-release-cassandra-0.my-release-cassandra-headless.default.svc.cluster.local"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-cassandra
                  key: cassandra-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASSANDRA_USER
              value: "bn_janusgraph"
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: CASSANDRA_RACK
              value: rack1
            - name: MAX_HEAP_SIZE
              value: "768M"
            - name: HEAP_NEWSIZE
              value: "256M"
            - name: CASSANDRA_TRANSPORT_PORT_NUMBER
              value: "7000"
            - name: CASSANDRA_JMX_PORT_NUMBER
              value: "7199"
            - name: CASSANDRA_CQL_PORT_NUMBER
              value: "9042"
          envFrom:
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool info | grep "Native Transport active: true"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - nodetool drain
          ports:
            - name: intra
              containerPort: 7000
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 1024Mi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/cassandra
            
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/logs
              subPath: app-logs-dir
      volumes:
        - name: metrics-conf
          configMap:
            name: my-release-cassandra-metrics-conf
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: cassandra
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
