---
# Source: datawolf/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-datawolf
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: datawolf/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-postgres-password: "YlJSbDBSWXRLZA=="
  postgresql-password: "ZGF0YXdvbGY="
---
# Source: datawolf/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-datawolf-config
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
data:
  log4j.properties: |-
    # Root logger option
    log4j.rootLogger=INFO, stdout

    # Detailed log levels
    log4j.logger.edu.illinois.ncsa.datawolf=INFO
    log4j.logger.edu.illinois.ncsa.datawolf.Engine=INFO

    # Direct log messages to stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.Target=System.out
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} [%t] %5p %50.50c:%4L - %m%n
---
# Source: datawolf/templates/persistence.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-datawolf
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: "20Gi"
---
# Source: datawolf/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-datawolf-jobs
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["batch"]
    resources: ["jobs", "jobs/status"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["list", "get"]
---
# Source: datawolf/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-datawolf-jobs
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-datawolf-jobs
subjects:
  - name: my-release-datawolf
    namespace: default
    kind: ServiceAccount
---
# Source: datawolf/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
---
# Source: datawolf/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    role: primary
---
# Source: datawolf/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-datawolf
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8888
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
---
# Source: datawolf/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-datawolf
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: datawolf
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/config: 992e28ba3385621c679013a16fa82232fe88af628c2dbec397e46e6aab1a47e9
      labels:
        app.kubernetes.io/name: datawolf
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-datawolf
      securityContext:
        {}
      initContainers:
        - name: check-postgresql
          image: "ncsa/checks:1.0.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGURI
              value: "postgresql://datawolf-postgresql-headless/datawolf"
            - name: PGUSER
              value: "datawolf"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-datawolf-postgresql
                  key: postgresql-password              
      containers:
        - name: datawolf
          securityContext:
            {}
          image: "ncsa/datawolf:4.6.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: DATAWOLF_ADMINS
              value: "datawolf@example.com"
            - name: DATAWOLF_USE_AUTH
              value: "false"
            - name: DATASET_PERMISSIONS
              value: "private"
            - name: DB_SOURCE_URL
              value: "jdbc:postgresql://datawolf-postgresql-headless/datawolf"
            - name: DB_MAX_POOLSIZE
              value: "20"
            - name: DB_IDLE_TIMEOUT
              value: "30000"
            - name: DB_USER
              value: "datawolf"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-datawolf-postgresql
                  key: postgresql-password
            - name: ENGINE_STORELOGS
              value: "false"
            - name: ENGINE_TIMEOUT
              value: "3600"
            - name: ENGINE_EXTRALOCALEXECUTOR
              value: "1"
            - name: ENGINE_LOCALEXECUTORTHREADS
              value: "8"
            - name: ENGINE_PAGESIZE
              value: "250"
            - name: KUBERNETES_NAMESPACE
              value: "default"
            - name: KUBERNETES_PVC
              value: "my-release-datawolf"
            - name: KUBERNETES_DATA
              value: "/home/datawolf/data"
            - name: KUBERNETES_CPU
              value: "2"
            - name: KUBERNETES_MEMORY
              value: "4"
          volumeMounts:
            - name: my-release-datawolf
              mountPath: /home/datawolf/data
            - name: log4j
              mountPath: /home/datawolf/conf/log4j.properties
              subPath: log4j.properties
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /datawolf/persons
              port: http
          readinessProbe:
            httpGet:
              path: /datawolf/persons
              port: http
          resources:
            {}
      volumes:
        - name: log4j
          configMap:
            name: my-release-datawolf-config
            items:
              - key: log4j.properties
                path: log4j.properties
        - name: my-release-datawolf
          persistentVolumeClaim:
            claimName: my-release-datawolf
---
# Source: datawolf/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      role: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "datawolf"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "datawolf"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "datawolf" -d "dbname=datawolf" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "datawolf" -d "dbname=datawolf" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: datawolf/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-datawolf-test-connection"
  labels:
    helm.sh/chart: datawolf-1.0.1
    app.kubernetes.io/name: datawolf
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.6.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-datawolf:8888']
  restartPolicy: Never
