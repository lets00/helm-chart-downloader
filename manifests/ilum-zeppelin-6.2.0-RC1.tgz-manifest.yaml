---
# Source: ilum-zeppelin/templates/zeppelin-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ilum-zeppelin
  labels:
    helm.sh/chart: ilum-zeppelin-6.2.0-RC1
    app.kubernetes.io/name: ilum-zeppelin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: ilum-zeppelin/templates/zeppelin-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: zeppelin
data:
  FLINK_HOME: "/opt/flink"
  SERVICE_DOMAIN: ""
  SPARK_HOME: "/spark"
  SPARK_MASTER: "k8s://https://kubernetes.default.svc"
  ZEPPELIN_HOME: "/opt/zeppelin"
  ZEPPELIN_K8S_CONTAINER_IMAGE: "apache/zeppelin:0.10.1"
  ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: "gcr.io/spark-operator/spark:v3.1.1"
  ZEPPELIN_PORT: "8080"
  ZEPPELIN_SERVER_RPC_PORTRANGE: "12320:12320"
  interpreter-setting.json: |-
      [
      {
       "group": "livy",
       "name": "spark",
       "className": "org.apache.zeppelin.livy.LivySparkInterpreter",
       "defaultInterpreter": true,
       "properties": {
         "zeppelin.livy.url": {
           "envName": "ZEPPELIN_LIVY_HOST_URL",
           "propertyName": "zeppelin.livy.url",
           "defaultValue": "http://ilum-livy-proxy:8998",
           "description": "The URL for Livy Server.",
           "type": "url"
         },
         "zeppelin.livy.session.create_timeout": {
           "envName": "ZEPPELIN_LIVY_SESSION_CREATE_TIMEOUT",
           "propertyName": "zeppelin.livy.session.create_timeout",
           "defaultValue": "360",
           "description": "Livy Server create session timeout (seconds).",
           "type": "number"
         },
         "livy.spark.driver.cores": {
           "propertyName": "livy.spark.driver.cores",
           "defaultValue": "",
           "description": "Driver cores. ex) 1, 2",
           "type": "number"
         },
         "livy.spark.driver.memory": {
           "propertyName": "livy.spark.driver.memory",
           "defaultValue": "",
           "description": "Driver memory. ex) 512m, 32g",
           "type": "string"
         },
         "livy.spark.executor.instances": {
           "propertyName": "livy.spark.executor.instances",
           "defaultValue": "",
           "description": "Executor instances. ex) 1, 4",
           "type": "number"
         },
         "livy.spark.executor.cores": {
           "propertyName": "livy.spark.executor.cores",
           "defaultValue": "",
           "description": "Num cores per executor. ex) 1, 4",
           "type": "number"
         },
         "livy.spark.executor.memory": {
           "propertyName": "livy.spark.executor.memory",
           "defaultValue": "",
           "description": "Executor memory per worker instance. ex) 512m, 32g",
           "type": "string"
         },
         "livy.spark.dynamicAllocation.enabled": {
           "propertyName": "livy.spark.dynamicAllocation.enabled",
           "defaultValue": false,
           "description": "Use dynamic resource allocation",
           "type": "checkbox"
         },
         "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout": {
           "propertyName": "livy.spark.dynamicAllocation.cachedExecutorIdleTimeout",
           "defaultValue": "",
           "description": "Remove an executor which has cached data blocks",
           "type": "string"
         },
         "livy.spark.dynamicAllocation.minExecutors": {
           "propertyName": "livy.spark.dynamicAllocation.minExecutors",
           "defaultValue": "",
           "description": "Lower bound for the number of executors if dynamic allocation is enabled.",
           "type": "number"
         },
         "livy.spark.dynamicAllocation.initialExecutors": {
           "propertyName": "livy.spark.dynamicAllocation.initialExecutors",
           "defaultValue": "",
           "description": "Initial number of executors to run if dynamic allocation is enabled.",
           "type": "number"
         },
         "livy.spark.dynamicAllocation.maxExecutors": {
           "propertyName": "livy.spark.dynamicAllocation.maxExecutors",
           "defaultValue": "",
           "description": "Upper bound for the number of executors if dynamic allocation is enabled.",
           "type": "number"
         },
         "zeppelin.livy.principal": {
           "propertyName": "zeppelin.livy.principal",
           "defaultValue": "",
           "description": "Kerberos principal to authenticate livy",
           "type": "string"
         },
         "zeppelin.livy.keytab": {
           "propertyName": "zeppelin.livy.keytab",
           "defaultValue": "",
           "description": "Kerberos keytab to authenticate livy",
           "type": "textarea"
         },
         "zeppelin.livy.pull_status.interval.millis": {
           "propertyName": "zeppelin.livy.pull_status.interval.millis",
           "defaultValue": "1000",
           "description": "The interval for checking paragraph execution status",
           "type": "number"
         },
         "zeppelin.livy.maxLogLines": {
           "propertyName": "zeppelin.livy.maxLogLines",
           "defaultValue": "1000",
           "description": "Max number of lines of logs",
           "type": "number"
         },
         "livy.spark.jars.packages": {
           "propertyName": "livy.spark.jars.packages",
           "defaultValue": "",
           "description": "Adding extra libraries to livy interpreter",
           "type": "textarea"
         },
         "zeppelin.livy.displayAppInfo": {
           "propertyName": "zeppelin.livy.displayAppInfo",
           "defaultValue": true,
           "description": "Whether display app info",
           "type": "checkbox"
         },
         "zeppelin.livy.restart_dead_session": {
           "propertyName": "zeppelin.livy.restart_dead_session",
           "defaultValue": false,
           "description": "Whether restart a dead session",
           "type": "checkbox"
         }
       },
       "option": {
         "remote": true,
         "port": -1,
         "perNote": "shared",
         "perUser": "scoped",
         "isExistingProcess": false,
         "setPermission": false,
         "users": []
       },
       "editor": {
         "language": "scala",
         "editOnDblClick": false,
         "completionKey": "TAB",
         "completionSupport": true
       }
       },
       {
       "group": "livy",
       "name": "sql",
       "className": "org.apache.zeppelin.livy.LivySparkSQLInterpreter",
       "properties": {
         "zeppelin.livy.spark.sql.maxResult": {
           "envName": "ZEPPELIN_LIVY_MAXRESULT",
           "propertyName": "zeppelin.livy.spark.sql.maxResult",
           "defaultValue": "1000",
           "description": "Max number of Spark SQL result to display.",
           "type": "number"
         },
         "zeppelin.livy.spark.sql.field.truncate": {
           "propertyName": "zeppelin.livy.spark.sql.field.truncate",
           "defaultValue": true,
           "description": "If true, truncate field values longer than 20 characters.",
           "type": "checkbox"
         },
         "zeppelin.livy.concurrentSQL": {
           "propertyName": "zeppelin.livy.concurrentSQL",
           "defaultValue": false,
           "description": "Execute multiple SQL concurrently if set true.",
           "type": "checkbox"
         },
         "zeppelin.livy.tableWithUTFCharacter": {
           "propertyName": "zeppelin.livy.tableWithUTFCharacter",
           "defaultValue": false,
           "description": "If database contains UTF characters then set this as true.",
           "type": "checkbox"
         }
       },
       "option": {
         "remote": true,
         "port": -1,
         "perNote": "shared",
         "perUser": "scoped",
         "isExistingProcess": false,
         "setPermission": false,
         "users": []
       },
       "editor": {
         "language": "sql",
         "editOnDblClick": false,
         "completionKey": "TAB",
         "completionSupport": true
       }
       },
       {
       "group": "livy",
       "name": "pyspark",
       "className": "org.apache.zeppelin.livy.LivyPySparkInterpreter",
       "properties": {
       },
       "option": {
         "remote": true,
         "port": -1,
         "perNote": "shared",
         "perUser": "scoped",
         "isExistingProcess": false,
         "setPermission": false,
         "users": []
       },
       "editor": {
         "language": "python",
         "editOnDblClick": false,
         "completionKey": "TAB",
         "completionSupport": true
       }
       },
       {
       "group": "livy",
       "name": "pyspark3",
       "className": "org.apache.zeppelin.livy.LivyPySpark3Interpreter",
       "properties": {
       },
       "option": {
         "remote": true,
         "port": -1,
         "perNote": "shared",
         "perUser": "scoped",
         "isExistingProcess": false,
         "setPermission": false,
         "users": []
       },
       "editor": {
         "language": "python",
         "editOnDblClick": false,
         "completionKey": "TAB",
         "completionSupport": true
       }
       },
       {
       "group": "livy",
       "name": "sparkr",
       "className": "org.apache.zeppelin.livy.LivySparkRInterpreter",
       "properties": {
       },
       "option": {
         "remote": true,
         "port": -1,
         "perNote": "shared",
         "perUser": "scoped",
         "isExistingProcess": false,
         "setPermission": false,
         "users": []
       },
       "editor": {
         "language": "r",
         "editOnDblClick": false,
         "completionKey": "TAB",
         "completionSupport": true
       }
       }
       ]
---
# Source: ilum-zeppelin/templates/zeppelin-rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ilum-zeppelin-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["create", "get", "update", "patch", "list", "delete", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["bind", "create", "get", "update", "patch", "list", "delete", "watch"]
---
# Source: ilum-zeppelin/templates/zeppelin-rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ilum-zeppelin-role-binding
subjects:
- kind: ServiceAccount
  name: ilum-zeppelin
roleRef:
  kind: Role
  name: ilum-zeppelin-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: ilum-zeppelin/templates/zeppelin-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: ilum-zeppelin
  labels:
    helm.sh/chart: ilum-zeppelin-6.2.0-RC1
    app.kubernetes.io/name: ilum-zeppelin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: ilum-zeppelin
    app.kubernetes.io/instance: my-release
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 8443
      targetPort: https
      protocol: TCP
      name: https
    - port: 12320
      name: rpc
---
# Source: ilum-zeppelin/templates/zeppelin-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ilum-zeppelin
  labels:
    helm.sh/chart: ilum-zeppelin-6.2.0-RC1
    app.kubernetes.io/name: ilum-zeppelin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.1"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ilum-zeppelin
      app.kubernetes.io/instance: my-release
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ilum-zeppelin
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: ilum-zeppelin
      containers:
      - name: zeppelin-server
        image: apache/zeppelin:0.10.1
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/zeppelin.sh"]
        lifecycle:
          preStop:
            exec:
              # SIGTERM triggers a quick exit; gracefully terminate instead
              command: ["sh", "-c", "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"]
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        - name: rpc
          containerPort: 12320
        env:
        - name: SERVICE_DOMAIN
          value: ilum-zeppelin
        - name: POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: ZEPPELIN_K8S_SERVICE_NAME
          value: ilum-zeppelin
        envFrom:
        - configMapRef:
            name: zeppelin
        resources:
          limits:
            memory: 1Gi
          requests:
            memory: 1Gi
        livenessProbe:
          tcpSocket:
            port: http
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: http
          periodSeconds: 30
        volumeMounts:
          - name: interpreter-config-map-volume
            mountPath: /opt/zeppelin/interpreter/livy/interpreter-setting.json
            subPath: interpreter-setting.json
      volumes:
        - name: interpreter-config-map-volume
          configMap:
            name: zeppelin
            items:
                - key: interpreter-setting.json
                  path: interpreter-setting.json
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
