---
# Source: daskhub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: my-release
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: my-release
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: my-release
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: daskhub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: my-release
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: my-release
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: my-release
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: daskhub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: my-release
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: my-release
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: my-release
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: my-release
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: my-release
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: my-release
---
# Source: daskhub/charts/dask-gateway/templates/controller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: controller-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
---
# Source: daskhub/charts/dask-gateway/templates/gateway/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
---
# Source: daskhub/charts/dask-gateway/templates/traefik/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: traefik-my-release-dask-gateway
---
# Source: daskhub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
---
# Source: daskhub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.
  hub.services.dask-gateway.apiToken: "NzViNjk5NTViMjdmZWRlMzMzOGRmZDZlNThlYTk4OTA4YjRmMTNiNzA3YTYyMDgyYjI3NTAzN2QwYWJiOTAyYQ=="

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "clFJd25GbXpJMm9FSjFYUGpUbzhzQ0x4eUhFWFh6UGRkQkVQVlJUZzY1c2trMFFUMGt4THJ6cGQ4T2lzUURTYQ=="
  hub.config.JupyterHub.cookie_secret: "YTljOWJlZWMwNGNmYjczNjE1OGY3YzExMzYxNzBjNThlMWY3YWUzMGEwOGRmZGQwZDk4YTkyYTI0NTgyZWZjMw=="
  hub.config.CryptKeeper.keys: "MThkYmU5NmFkYzQ5OTFmODRiZTkzZDAyMGM3MTgyNjk0ZTQxNDNlZjhiZGEwMmE1ZTdiODdiODczNmI2OTQzNw=="
---
# Source: daskhub/charts/dask-gateway/templates/controller/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: controller-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
data:
  dask_gateway_config.py: |-
    # Configure addresses
    c.KubeController.address = ":8000"
    c.KubeController.api_url = 'http://api-my-release-dask-gateway.default:8000/api'
    c.KubeController.gateway_instance = 'my-release-dask-gateway'
    c.KubeController.proxy_prefix = "/services/dask-gateway"
    c.KubeController.proxy_web_middlewares = [
      {"name": 'clusters-prefix-my-release-dask-gateway',
      "namespace": 'default'}
    ]
    c.KubeController.log_level = "INFO"
    c.KubeController.completed_cluster_max_age = 86400
    c.KubeController.completed_cluster_cleanup_period = 600
    c.KubeController.backoff_base_delay = 0.1
    c.KubeController.backoff_max_delay = 300
    c.KubeController.k8s_api_rate_limit = 50
    c.KubeController.k8s_api_rate_limit_burst = 100
    c.KubeController.proxy_tcp_entrypoint = "web"
---
# Source: daskhub/charts/dask-gateway/templates/gateway/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
data:
  dask_gateway_config.py: |-
    import os
    import json
    import sys

    # Add this directory to path to support extension modules
    sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)))

    _PROPERTIES = json.loads("{\"gateway\":{\"affinity\":{},\"annotations\":{},\"auth\":{\"custom\":{\"config\":{}},\"jupyterhub\":{\"apiTokenFromSecretKey\":\"hub.services.dask-gateway.apiToken\",\"apiTokenFromSecretName\":\"hub\"},\"kerberos\":{},\"simple\":{},\"type\":\"jupyterhub\"},\"backend\":{\"environment\":{},\"image\":{\"name\":\"ghcr.io/dask/dask-gateway\",\"tag\":\"2024.1.0\"},\"imagePullSecrets\":[],\"scheduler\":{\"cores\":{},\"extraContainerConfig\":{},\"extraPodConfig\":{},\"memory\":{}},\"worker\":{\"cores\":{},\"extraContainerConfig\":{},\"extraPodConfig\":{},\"memory\":{}}},\"env\":[],\"image\":{\"name\":\"ghcr.io/dask/dask-gateway-server\",\"tag\":\"2024.1.0\"},\"imagePullSecrets\":[],\"livenessProbe\":{\"enabled\":true,\"failureThreshold\":6,\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":2},\"loglevel\":\"INFO\",\"nodeSelector\":{},\"prefix\":\"/services/dask-gateway\",\"readinessProbe\":{\"enabled\":true,\"failureThreshold\":3,\"initialDelaySeconds\":5,\"periodSeconds\":10,\"timeoutSeconds\":2},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{}},\"tolerations\":[]}}")

    def get_property(key, default=None):
        """Read a property from the configured helm values."""
        value = _PROPERTIES
        for key2 in key.split("."):
            if not isinstance(value, dict) or key2 not in value:
                return default
            value = value[key2]
        return value

    c.DaskGateway.log_level = "INFO"

    # Configure addresses
    c.DaskGateway.address = ":8000"
    c.KubeBackend.api_url = 'http://api-my-release-dask-gateway.default:8000/api'

    # Configure the backend
    c.DaskGateway.backend_class = "dask_gateway_server.backends.kubernetes.KubeBackend"
    c.KubeBackend.gateway_instance = "my-release-dask-gateway"

    # Configure the dask cluster image
    image_name = get_property("gateway.backend.image.name")
    if image_name:
        image_tag = get_property("gateway.backend.image.tag")
        c.KubeClusterConfig.image = (
            "%s:%s" % (image_name, image_tag) if image_tag else image_name
        )
        c.KubeClusterConfig.image_pull_secrets = get_property("gateway.backend.imagePullSecrets")

    # Forward dask cluster configuration
    for field, prop_name in [
        # Scheduler config
        ("scheduler_cores", "scheduler.cores.request"),
        ("scheduler_cores_limit", "scheduler.cores.limit"),
        ("scheduler_memory", "scheduler.memory.request"),
        ("scheduler_memory_limit", "scheduler.memory.limit"),
        ("scheduler_extra_container_config", "scheduler.extraContainerConfig"),
        ("scheduler_extra_pod_config", "scheduler.extraPodConfig"),
        # Worker config
        ("worker_cores", "worker.cores.request"),
        ("worker_cores_limit", "worker.cores.limit"),
        ("worker_memory", "worker.memory.request"),
        ("worker_memory_limit", "worker.memory.limit"),
        ("worker_threads", "worker.threads"),
        ("worker_extra_container_config", "worker.extraContainerConfig"),
        ("worker_extra_pod_config", "worker.extraPodConfig"),
        # Additional fields
        ("image_pull_policy", "image.pullPolicy"),
        ("environment", "environment"),
        ("namespace", "namespace"),
    ]:
        value = get_property("gateway.backend." + prop_name)
        if value is not None:
            setattr(c.KubeClusterConfig, field, value)

    # Authentication
    auth_type = get_property("gateway.auth.type")
    if auth_type == "simple":
        c.DaskGateway.authenticator_class = "dask_gateway_server.auth.SimpleAuthenticator"
        password = get_property("gateway.auth.simple.password")
        if password is not None:
            c.SimpleAuthenticator.password = password
    elif auth_type == "kerberos":
        c.DaskGateway.authenticator_class = "dask_gateway_server.auth.KerberosAuthenticator"
        keytab = get_property("gateway.auth.kerberos.keytab")
        if keytab is not None:
            c.KerberosAuthenticator.keytab = keytab
    elif auth_type == "jupyterhub":
        c.DaskGateway.authenticator_class = "dask_gateway_server.auth.JupyterHubAuthenticator"
        api_url = get_property("gateway.auth.jupyterhub.apiUrl")
        if api_url is None:
            try:
                api_url = "http://{HUB_SERVICE_HOST}:{HUB_SERVICE_PORT}/hub/api".format(**os.environ)
            except Exception:
                raise ValueError(
                    "Failed to infer JupyterHub API url from environment, "
                    "please specify `gateway.auth.jupyterhub.apiUrl` in "
                    "your config file"
                )
        c.DaskGateway.JupyterHubAuthenticator.jupyterhub_api_url = api_url
    elif auth_type == "custom":
        auth_cls = get_property("gateway.auth.custom.class")
        c.DaskGateway.authenticator_class = auth_cls
        auth_cls_name = auth_cls.rsplit('.', 1)[-1]
        auth_config = c[auth_cls_name]
        auth_config.update(get_property("gateway.auth.custom.config") or {})
    else:
        raise ValueError("Unknown authenticator type %r" % auth_type)
---
# Source: daskhub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "my-release-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "my-release-default-priority"
  user-placeholder-priority: "my-release-user-placeholder-priority"
  user-scheduler: "my-release-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "7bbc1cfe1ae42deddd91eaad7789f372c29a89f9d6f8dee7c9f188fe04696bd0"
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "default"
    profiles:
      - schedulerName: my-release-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit
---
# Source: daskhub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
# Source: daskhub/charts/dask-gateway/templates/controller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: controller-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
rules:
  - apiGroups: ["gateway.dask.org"]
    resources: ["daskclusters", "daskclusters/status"]
    verbs: ["*"]
  - apiGroups: ["traefik.io"]
    resources: ["ingressroutes", "ingressroutetcps"]
    verbs: ["get", "create", "delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets", "services"]
    verbs: ["create", "delete"]
---
# Source: daskhub/charts/dask-gateway/templates/gateway/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: ["gateway.dask.org"]
    resources: ["daskclusters"]
    verbs: ["*"]
---
# Source: daskhub/charts/dask-gateway/templates/traefik/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-my-release-dask-gateway
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.io
      - traefik.containo.us
    resources:
      - ingressroutes
      - ingressroutetcps
      - ingressrouteudps
      - middlewares
      - middlewaretcps
      - serverstransports
      - tlsoptions
      - tlsstores
      - traefikservices
    verbs:
      - get
      - list
      - watch
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
# Source: daskhub/charts/dask-gateway/templates/controller/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: controller-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
subjects:
  - kind: ServiceAccount
    name: controller-my-release-dask-gateway
    namespace: default
roleRef:
  kind: ClusterRole
  name: controller-my-release-dask-gateway
  apiGroup: rbac.authorization.k8s.io
---
# Source: daskhub/charts/dask-gateway/templates/gateway/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
subjects:
  - kind: ServiceAccount
    name: api-my-release-dask-gateway
    namespace: default
roleRef:
  kind: ClusterRole
  name: api-my-release-dask-gateway
  apiGroup: rbac.authorization.k8s.io
---
# Source: daskhub/charts/dask-gateway/templates/traefik/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-my-release-dask-gateway
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-my-release-dask-gateway
subjects:
- kind: ServiceAccount
  name: traefik-my-release-dask-gateway
  namespace: default
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: my-release-user-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: daskhub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
# Source: daskhub/charts/jupyterhub/templates/hub/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "default"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io
---
# Source: daskhub/charts/dask-gateway/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: dask-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: gateway
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
# Source: daskhub/charts/dask-gateway/templates/traefik/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: dask-gateway
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: traefik
  ports:
    - name: web
      targetPort: 8000
      port: 80
---
# Source: daskhub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: my-release
  ports:
    - name: hub
      port: 8081
      targetPort: http
---
# Source: daskhub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: my-release
  ports:
    - port: 8001
      targetPort: api
---
# Source: daskhub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: proxy
    app: jupyterhub
    release: my-release
  ports:
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: my-release
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: my-release
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.2.1
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: pangeo/base-notebook:2024.01.15
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: daskhub/charts/dask-gateway/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: dask-gateway
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dask-gateway
        helm.sh/chart: dask-gateway-2024.1.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2024.1.0"
        app.kubernetes.io/managed-by: Helm
        gateway.dask.org/instance: my-release-dask-gateway
        app.kubernetes.io/component: controller
      annotations:
        checksum/configmap: e6e52c455fb063a3b63f13389494a9f2ef16bcea7898453747ec6029dee8e198
    spec:
      serviceAccountName: controller-my-release-dask-gateway
      volumes:
        - name: configmap
          configMap:
            name: controller-my-release-dask-gateway
      containers:
        - name: controller
          image: ghcr.io/dask/dask-gateway-server:2024.1.0
          imagePullPolicy: 
          args:
            - dask-gateway-server
            - kube-controller
            - --config
            - /etc/dask-gateway/dask_gateway_config.py
          volumeMounts:
            - mountPath: /etc/dask-gateway/
              name: configmap
          ports:
            - containerPort: 8000
              name: api
---
# Source: daskhub/charts/dask-gateway/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dask-gateway
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dask-gateway
        helm.sh/chart: dask-gateway-2024.1.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2024.1.0"
        app.kubernetes.io/managed-by: Helm
        gateway.dask.org/instance: my-release-dask-gateway
        app.kubernetes.io/component: gateway
        hub.jupyter.org/network-access-hub: "true"
      annotations:
        checksum/configmap: cba0a1e3b5a46060646e30035aa8eb8f215d46d68a372b9963061f6372bc51f0
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      serviceAccountName: api-my-release-dask-gateway
      volumes:
        - name: configmap
          configMap:
            name: api-my-release-dask-gateway
      containers:
        - name: gateway
          image: ghcr.io/dask/dask-gateway-server:2024.1.0
          imagePullPolicy: 
          args:
            - dask-gateway-server
            - --config
            - /etc/dask-gateway/dask_gateway_config.py
          volumeMounts:
            - mountPath: /etc/dask-gateway/
              name: configmap
          env:
            - name: JUPYTERHUB_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "hub"
                  key: "hub.services.dask-gateway.apiToken"
          ports:
            - containerPort: 8000
              name: api
          livenessProbe:
            httpGet:
              path: /api/health
              port: api
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/health
              port: api
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
---
# Source: daskhub/charts/dask-gateway/templates/traefik/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dask-gateway
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: traefik
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dask-gateway
        helm.sh/chart: dask-gateway-2024.1.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2024.1.0"
        app.kubernetes.io/managed-by: Helm
        gateway.dask.org/instance: my-release-dask-gateway
        app.kubernetes.io/component: traefik
    spec:
      serviceAccountName: traefik-my-release-dask-gateway
      terminationGracePeriodSeconds: 60
      containers:
        - name: traefik
          image: traefik:2.10.6
          imagePullPolicy: 
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          # The Dockerfile's entrypoint is traefik the CLI, and we provide args
          # to it as documented here:
          # https://doc.traefik.io/traefik/reference/static-configuration/cli/
          #
          args:
            - "--global.checknewversion=false"
            - "--global.sendanonymoususage=false"
            - "--ping=true"
            - "--providers.kubernetescrd"
            - "--providers.kubernetescrd.allowcrossnamespace=true"
            - '--providers.kubernetescrd.labelselector=gateway.dask.org/instance=my-release-dask-gateway'
            - "--providers.kubernetescrd.throttleduration=2"
            - "--log.level=WARN"
            - "--entrypoints.traefik.address=:9000"
            - "--entrypoints.web.address=:8000"
          ports:
            - name: traefik
              containerPort: 9000
            - name: web
              containerPort: 8000
          readinessProbe:
            httpGet:
              path: /ping
              port: 9000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /ping
              port: 9000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
---
# Source: daskhub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: my-release
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 9067c27bf95d424402dfe0380563b18cfc273e62496aa8e1d88ce07e176486b5
        checksum/secret: 038e37f2020fa6ee53df4e7c808d623bf8f1703393abc69f3753ecf84f4cc86f
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.2.1
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "my-release"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /hub/health
              port: http
---
# Source: daskhub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: my-release
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: my-release
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "1cf6"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: my-release
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: my-release
      annotations:
        checksum/config-map: 407937701af97f5bd9a91f5940f10659de43b106ea01c5cc186c9be4cd7aa428
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.11
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: daskhub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: my-release
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: my-release
    spec:
      schedulerName: my-release-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              memory: 1G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: daskhub/charts/dask-gateway/templates/gateway/ingressroute.yaml
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: api-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  entryPoints:
    - web
  routes:
  - match: PathPrefix(`/services/dask-gateway`)
    kind: Rule
    services:
    - name: api-my-release-dask-gateway
      port: 8000
    middlewares:
    - name: 'api-prefix-my-release-dask-gateway'
---
# Source: daskhub/charts/dask-gateway/templates/gateway/middleware.yaml
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: clusters-prefix-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  stripPrefixRegex:
    regex:
      - '/services/dask-gateway/clusters/[a-zA-Z0-9.-]+'
---
# Source: daskhub/charts/dask-gateway/templates/gateway/middleware.yaml
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: api-prefix-my-release-dask-gateway
  labels:
    app.kubernetes.io/name: dask-gateway
    helm.sh/chart: dask-gateway-2024.1.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2024.1.0"
    app.kubernetes.io/managed-by: Helm
    gateway.dask.org/instance: my-release-dask-gateway
spec:
  stripPrefix:
    prefixes:
      - '/services/dask-gateway'
    forceSlash: false
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "default"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: my-release
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: my-release
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.2.1
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: pangeo/base-notebook:2024.01.15
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: daskhub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: my-release
    chart: jupyterhub-3.2.1
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "7bbc1cfe1ae42deddd91eaad7789f372c29a89f9d6f8dee7c9f188fe04696bd0" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: my-release
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.2.1
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=default
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
