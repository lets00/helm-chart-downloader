---
# Source: kuberay/templates/apiserver/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kuberay-apiserver
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/component: apiserver
    app.kubernetes.io/part-of: kuberay
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: apiserver
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8888
        - port: 8887
---
# Source: kuberay/templates/operator/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-kuberay-operator
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: kuberay
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: operator
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: kuberay/templates/apiserver/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kuberay-apiserver
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: apiserver
---
# Source: kuberay/templates/operator/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-kuberay-operator
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: operator
---
# Source: kuberay/templates/apiserver/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kuberay-apiserver
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
automountServiceAccountToken: false
---
# Source: kuberay/templates/cluster/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kuberay-cluster
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 2.24.0
    helm.sh/chart: kuberay-1.2.3
automountServiceAccountToken: false
---
# Source: kuberay/templates/operator/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kuberay-operator
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
automountServiceAccountToken: false
---
# Source: kuberay/templates/apiserver/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-apiserver
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
rules:
  - apiGroups:
      - ray.io
    resources:
      - rayclusters
      - rayjobs
      - rayservices
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
---
# Source: kuberay/templates/operator/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/status
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
      - delete
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayclusters
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayclusters/finalizers
    verbs:
      - update
  - apiGroups:
      - ray.io
    resources:
      - rayclusters/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ray.io
    resources:
      - rayjobs
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayjobs/finalizers
    verbs:
      - update
  - apiGroups:
      - ray.io
    resources:
      - rayjobs/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ray.io
    resources:
      - rayservices
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayservices/finalizers
    verbs:
      - update
  - apiGroups:
      - ray.io
    resources:
      - rayservices/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs:
      - create
      - delete
      - get
      - list
      - watch
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
    verbs:
      - create
      - delete
      - get
      - list
      - update
      - watch
  - apiGroups:
      - route.openshift.io
    resources:
      - routes
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
# Source: kuberay/templates/operator/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-edit-rayjob
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - ray.io
    resources:
      - rayservices
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayservices/status
    verbs:
      - get
---
# Source: kuberay/templates/operator/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-view-rayjob
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - ray.io
    resources:
      - rayservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayservices/status
    verbs:
      - get
---
# Source: kuberay/templates/operator/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-edit-rayservice
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - ray.io
    resources:
      - rayservices
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayservices/status
    verbs:
      - get
---
# Source: kuberay/templates/operator/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-view-rayservice
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - ray.io
    resources:
      - rayservices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ray.io
    resources:
      - rayservices/status
    verbs:
      - get
---
# Source: kuberay/templates/apiserver/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-apiserver
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-apiserver
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-apiserver
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-operator
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-edit-rayjob
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-operator-edit-rayjob
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-view-rayjob
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-operator-view-rayjob
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-edit-rayservice
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-operator-edit-rayservice
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-kuberay-operator-view-rayservice
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kuberay-kuberay-operator-view-rayservice
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/operator/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-operator-leader-election
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - configmaps/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - list
      - update
---
# Source: kuberay/templates/operator/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-kuberay-operator-leader-election
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-kuberay-operator-leader-election
subjects:
  - kind: ServiceAccount
    name: my-release-kuberay-operator
    namespace: "kuberay"
---
# Source: kuberay/templates/apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kuberay-apiserver
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: http
    - name: grpc
      port: 8887
      protocol: TCP
      nodePort: null
      targetPort: grpc
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
---
# Source: kuberay/templates/operator/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kuberay-operator
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-metrics
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: http-metrics
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
---
# Source: kuberay/templates/apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kuberay-apiserver
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: apiserver
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: apiserver
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kuberay
        app.kubernetes.io/version: 1.1.1
        helm.sh/chart: kuberay-1.2.3
        app.kubernetes.io/part-of: kuberay
        app.kubernetes.io/component: apiserver
    spec:
      serviceAccountName: my-release-kuberay-apiserver
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kuberay
                    app.kubernetes.io/component: apiserver
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: kuberay-apiserver
          image: docker.io/bitnami/kuberay-apiserver:1.1.1-debian-12-r3
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -rpcPortFlag=:8887
            - -httpPortFlag=:8888
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8888
            - name: grpc
              containerPort: 8887
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: kuberay/templates/operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kuberay-operator
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 1.1.1
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: operator
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: kuberay
      app.kubernetes.io/part-of: kuberay
      app.kubernetes.io/component: operator
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kuberay
        app.kubernetes.io/version: 1.1.1
        helm.sh/chart: kuberay-1.2.3
        app.kubernetes.io/part-of: kuberay
        app.kubernetes.io/component: operator
    spec:
      serviceAccountName: my-release-kuberay-operator
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: kuberay
                    app.kubernetes.io/component: operator
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: kuberay-operator
          image: docker.io/bitnami/kuberay-operator:1.1.1-debian-12-r3
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - --metrics-addr=:8080
            - --health-probe-bind-address=:8082
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http-metrics
              containerPort: 8080
            - name: http-health
              containerPort: 8082
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-health
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http-health
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: kuberay/templates/cluster/raycluster.yaml
apiVersion: ray.io/v1
kind: RayCluster
metadata:
  name: my-release-kuberay-cluster
  namespace: "kuberay"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kuberay
    app.kubernetes.io/version: 2.24.0
    helm.sh/chart: kuberay-1.2.3
    app.kubernetes.io/part-of: kuberay
    app.kubernetes.io/component: cluster
spec:
  headGroupSpec:
    serviceType: LoadBalancer
    rayStartParams: {}
    template:
      metadata:
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kuberay
          app.kubernetes.io/version: 1.1.1
          helm.sh/chart: kuberay-1.2.3
          app.kubernetes.io/part-of: kuberay
          app.kubernetes.io/component: cluster-head
      spec:
        
        serviceAccountName: my-release-kuberay-cluster
        automountServiceAccountToken: false
        affinity:
          podAffinity:
            
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/instance: my-release
                      app.kubernetes.io/name: kuberay
                      app.kubernetes.io/component: cluster-head
                  topologyKey: kubernetes.io/hostname
                weight: 1
          nodeAffinity:
            
        securityContext:
          fsGroup: 1001
          fsGroupChangePolicy: Always
          supplementalGroups: []
          sysctls: []
        containers:
          - name: ray-head
            image: docker.io/bitnami/ray:2.24.0-debian-12-r0
            imagePullPolicy: IfNotPresent
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              privileged: false
              readOnlyRootFilesystem: true
              runAsGroup: 1001
              runAsNonRoot: true
              runAsUser: 1001
              seLinuxOptions: {}
              seccompProfile:
                type: RuntimeDefault
            envFrom:
            resources:
              limits:
                cpu: 750m
                ephemeral-storage: 1024Mi
                memory: 1536Mi
              requests:
                cpu: 500m
                ephemeral-storage: 50Mi
                memory: 1024Mi
            volumeMounts:
              - name: tmp
                mountPath: /tmp
        volumes:
          - name: tmp
            emptyDir: {}
  workerGroupSpecs:
    - groupName: default
      rayStartParams: {}
      replicas: 1
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: kuberay
            app.kubernetes.io/version: 1.1.1
            helm.sh/chart: kuberay-1.2.3
            app.kubernetes.io/part-of: kuberay
            app.kubernetes.io/component: cluster-worker-default
        spec:
          
          serviceAccountName: my-release-kuberay-cluster
          affinity:
            podAffinity:
              
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/instance: my-release
                        app.kubernetes.io/name: kuberay
                        app.kubernetes.io/component: cluster-worker-default
                    topologyKey: kubernetes.io/hostname
                  weight: 1
            nodeAffinity:
            
          securityContext:
            fsGroup: 1001
            fsGroupChangePolicy: Always
            supplementalGroups: []
            sysctls: []
          containers:
            - name: ray-worker
              image: docker.io/bitnami/ray:2.24.0-debian-12-r0
              imagePullPolicy: IfNotPresent
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
                privileged: false
                readOnlyRootFilesystem: true
                runAsGroup: 1001
                runAsNonRoot: true
                runAsUser: 1001
                seLinuxOptions: {}
                seccompProfile:
                  type: RuntimeDefault
              envFrom:
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
          volumes:
            - name: tmp
              emptyDir: {}
