---
# Source: csi-vault/templates/controller.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: my-release-csi-vault-controller
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
---
# Source: csi-vault/templates/node.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-csi-vault-node
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
---
# Source: csi-vault/templates/apiserver-cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-csi-vault-apiserver-cert
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVFVENDQXZtZ0F3SUJBZ0lSQU1jb1ZHRTJhU3BUN1dkM2greHduS2d3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpRd05qSXdNVFExTlRVMVdoY05NelF3TmpFNE1UUTFOVFUxV2pBZgpNUjB3R3dZRFZRUURFeFJ0ZVMxeVpXeGxZWE5sTFdOemFTMTJZWFZzZERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtiRVpyYm9LNVFONHUyMXRxQWx1Vm5qdHJ4YjRYMHQ3QjFPRVc0bTF6RU0KU1RJam9WT1BzTDIvWDBXRExIT2Z1akdTTUhweFdCTmgwaVkvUENaM2lnb0g2OEZROGZ6NHlkZUZqd0hyVGpUSwptcWZ0SERRQXpNZ3NRU1dyRWk4bW9ST1JISjdnVTMzSEJMejF3dnlLM2ZuZHgwUHJBOEszT2xPZmxOSlBZbkpQCnZNTERyZVJCTHhlUDVIWEZJVUhvbHlIejdBVFJqczhFd3hKVWNIUkZWTEJva3Z4eUNQb3V1WUl5NjVQY0s4RkgKUlhkdnhRUUFpSG05N2JRYXZpenRoRVBRcEcvMVN6VXQ0d2J4WWY0d1UzWGh2R2NWUmg4MHlMSk1wQUNlNjNFdwpTZmIwc0NNaVJjMHBBOU83QU1RRk5rTEpqcm5kZWFCb1NrMjdiL29PRm9rQ0F3RUFBYU9DQVZnd2dnRlVNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUUV2VTNYT29oQXRmUjRWc2dJcCtTL0I4M3E1ekNCOHdZRApWUjBSQklIck1JSG9namx0ZVMxeVpXeGxZWE5sTFdOemFTMTJZWFZzZEMxamIyNTBjbTlzYkdWeUxtTnphUzEyCllYVnNkQzEyTUM0MExqQXRjbU11TUM1MFozcUNQVzE1TFhKbGJHVmhjMlV0WTNOcExYWmhkV3gwTFdOdmJuUnkKYjJ4c1pYSXVZM05wTFhaaGRXeDBMWFl3TGpRdU1DMXlZeTR3TG5SbmVpNXpkbU9DTTIxNUxYSmxiR1ZoYzJVdApZM05wTFhaaGRXeDBMVzV2WkdVdVkzTnBMWFpoZFd4MExYWXdMalF1TUMxeVl5NHdMblJuZW9JM2JYa3RjbVZzClpXRnpaUzFqYzJrdGRtRjFiSFF0Ym05a1pTNWpjMmt0ZG1GMWJIUXRkakF1TkM0d0xYSmpMakF1ZEdkNkxuTjIKWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUxVM3lJRnNVYW5WY0xhekFFZVc4K0lKNHp0ajNjUmdjRnkrVQpYdEY3K2pSaHdKUGpKdVNaMFFRYXhjMmhtQmlmTTQyak1DRi8vNDhMUDhydzluUURvL0tDNVdzbUhMZ1AvT2NRCjVJUFoyRDZ3T1A4RHpReDFpOWRDVWdaY0RjcENJdWFiQVd2UmZFSFNnMitiYjF2dTVJVklhMmpGNmRVVGFZUjkKYlhVWW1QVk9Rc3dINWN2N2lCY3dUV3hRbXF5RzB3QUg3cHNnalovMkF5elFZdUtUY3BidUVUUlIyN1VtemZZcgppTWQvRGZOellJU3YwaUI4WmF3YnI3WTlXMlROUlM0UE5JUTBsVktrL0R1WXptKzlubUdQRXNvcVhuTHRmbGNSCkprdTlxOTFnbTlqbmN6aTZYeVdlU3hPaDFQS0hJbDJQM0tVVElnWXAwM2NRQlBRRjVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcHNSbXR1Z3JsQTNpN2JXMm9DVzVXZU8ydkZ2aGZTM3NIVTRSYmliWE1ReEpNaU9oClU0K3d2YjlmUllNc2M1KzZNWkl3ZW5GWUUySFNKajg4Sm5lS0NnZnJ3VkR4L1BqSjE0V1BBZXRPTk1xYXArMGMKTkFETXlDeEJKYXNTTHlhaEU1RWNudUJUZmNjRXZQWEMvSXJkK2QzSFErc0R3cmM2VTUrVTBrOWljays4d3NPdAo1RUV2RjQva2RjVWhRZWlYSWZQc0JOR096d1RERWxSd2RFVlVzR2lTL0hJSStpNjVnakxyazl3cndVZEZkMi9GCkJBQ0llYjN0dEJxK0xPMkVROUNrYi9WTE5TM2pCdkZoL2pCVGRlRzhaeFZHSHpUSXNreWtBSjdyY1RCSjl2U3cKSXlKRnpTa0QwN3NBeEFVMlFzbU91ZDE1b0doS1RidHYrZzRXaVFJREFRQUJBb0lCQVFDQmx4YzJSUjR3RThabQo4QkQxUzd0SDFjTVhoZEtvZ3JuN1g4SDl0ZUw4ODA0aHp6dzdBZXJXMkZLQll0aDFGUWNNSkV6VnFTUkhFM25KClROUkNGQnhKaFRRM2FkNVJ0VWFyMnRaeEtGZ0NmL3BFU2VYanAwZDZ1YUQ2VTRCeThYSzBFTXlMelVnejhpYUYKYS9qVVpGandKTjRHc2lhZTllRTJRRWpXVU9md2FUSnBEK0RFRWJZT2NyV05UY3poWjZCeTNzdkw1emlyQSs1bgoyQitrc0FaakpGVXhWY0RVWXpKeG5WRkxwdmczcFpkNHp5UWxkK0F1NmdIU3UzS2RxTHdMTmJQOVFKczZwZHpPCmgrSUU1TkZtdXozSjZWb3lxdDdhaE14RHYwc0gvTnVSQjRvODlJelN2TGRWaXcyVCtIZmhMUGQxeDh3RmZjbjEKTHBBeFNKK3RBb0dCQU1PQlkrRVpYbHV2RkowQ0VjTG5DSWxZYUVQSTdFTW5oZUZHbThaTmxHUVhFc0h3bENsagpJeXFPMnphbEdxNm1yS2RuWCtZY1BtQUdGbG1ESlNLeDlIMTlwamtYSkdRY2dJdzRiS3p5R3M2a0h0c1FUVDV3CnpENGh5ZjV6TDYzWmN6NEpraWYxSGRJL0plQmZWZWRnWTM2S3dhaUEwcFJreXZqSEs0UEFTZ08vQW9HQkFOcGUKa0R2czQ5U2VhUWdrOHZFT1lUcDFQcXhncUJkaEhneHdkUUx3eFRQWGQ4azU4QWVGc1VjaU1aQlh1cTJUQkZoNApQQUJTQjZ1ZlNwUk5teFU2bjNYYlRmOS9RZzI3S3dXZk1wZDBuZ1BoRGZrWVN0OUN1cGRWN0xrdk51Qk1nMDVTClplRGlvRisyWm1DVmxiOTZ5NFFxYjhldnJ4SmpId0g2QStPa0FOZTNBb0dBR0ZobmVLTnhGWmV5eUc1MmliKzkKVjJVVDdzVDViczlnSTVKb1dZUlZvelVnVjlnK2l2eldaemxNNFB3a1czVlQ4TEMxeDNEaTc1QXlma2tQZWNlUgpPNE5IRExydUJDMXNjSW1pTnRNYk5YcElnVjBCVVhJNGJOQkdXQkk5OExjd1c1eFRmL2hORTE1YnVCb0hGMzN3ClJkUy9rdDBmMit6RlBiK0hrcXVDUy84Q2dZRUExaXlsWG9FTFBBQmFsNmhWdHVRWnJKSk45QmVoQmIwMUVaSkMKMGEyQVhVWlpzRDFwRkplbHRsVHRNOXMzdHdKWTRzU2FaTjRQczk0NThaYmtJa0FySWhjRU96Ri9nYVF2b0FYeQpRdVlZRFVud3dIMTVBZHlhMGM5dXJIcUlZaG5wTnlwTnpmRzR4ZWRLSmpUUWVNdGhUTEdxakxuZEJqVzl0ZHlYCmIrL3MrNlVDZ1lCUzU3MW52cmU4ODdBY0p0TXY0NXlKT2Z3K1BCYTlEa2p5RmNWZTMwOVFIQ3YwcWRaSzd4VFkKSFk3dFlCRUNUbXJLdDRDMHVyMzlndDYrQkhUS2pTQzVSSUkvS3RZZGJud2d4Z3lIcUFpUm1FcVdwdHkyY1lDagphUWtTTTQ0Z1JpQ0FpR1g0bFd1ZklZTU9YbU55c24rYTlab3hPTWRvQmZIMTlkM1IzVGs4WHc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["get", "list"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csidrivers", "csinodes"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
# Source: csi-vault/templates/controller.yaml
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
---
# Source: csi-vault/templates/controller.yaml
# Provisioner must be able to work with PVCs, storageClasses, nodes and csiNodes
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["create", "delete", "get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "patch", "update", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "get", "list", "patch", "update", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources: ["csinodes"]
  verbs: ["get", "list", "watch"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-controller
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-controller
  namespace: csi-vault-v0.4.0-rc.0.tgz
roleRef:
    kind: ClusterRole
    name: my-release-csi-vault-controller
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-attacher
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-controller
  namespace: csi-vault-v0.4.0-rc.0.tgz
roleRef:
    kind: ClusterRole
    name: my-release-csi-vault-attacher
    apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-provisioner
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
subjects:
  - kind: ServiceAccount
    name: my-release-csi-vault-controller
    namespace: csi-vault-v0.4.0-rc.0.tgz
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-node
  namespace: csi-vault-v0.4.0-rc.0.tgz
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-node
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/node.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-csi-vault-node-registrar
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
subjects:
- kind: ServiceAccount
  name: my-release-csi-vault-node
  namespace: csi-vault-v0.4.0-rc.0.tgz
roleRef:
  kind: ClusterRole
  name: my-release-csi-vault-node-registrar
  apiGroup: rbac.authorization.k8s.io
---
# Source: csi-vault/templates/controller.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-release-csi-vault-controller
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: controller
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: my-release-csi-vault-node
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: node
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
# Source: csi-vault/templates/node.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: my-release-csi-vault-node
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: node
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: node
      annotations:
        checksum/apiserver-cert.yaml: 2ad9218027a7cd3cd7a893631d9a5b709b1a172d5db3bcdc5de4f568320191b3
    spec:
      serviceAccount: my-release-csi-vault-node
      containers:
      - name: node-driver-registrar
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.1.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/secrets.csi.kubevault.com/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.4.0-rc.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - "--node=$(NODE_NAME)"
        - "--v=3"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: kubelet-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: kubelet-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/secrets.csi.kubevault.com/
          type: DirectoryOrCreate
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-release-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/controller.yaml
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: my-release-csi-vault-controller
  namespace: csi-vault-v0.4.0-rc.0.tgz
  labels:
    helm.sh/chart: csi-vault-v0.4.0-rc.0
    app.kubernetes.io/name: csi-vault
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0-rc.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  serviceName: my-release-csi-vault-controller
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: csi-vault
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: csi-vault
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: controller
      annotations:
        checksum/apiserver-cert.yaml: 5e61d908e50f0fd860aadc20759f1c6a6db046e632a6798598ffe7d27f9346f9
    spec:
      serviceAccount: my-release-csi-vault-controller
      containers:
      - name: csi-provisioner
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-provisioner:v2.2.0
        args:
        - --csi-address=/csi/csi.sock
        - --v=3
        imagePullPolicy: IfNotPresent
        resources:
                        null
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-attacher
        securityContext:
          {}
        image: k8s.gcr.io/sig-storage/csi-attacher:v3.1.0
        args:
        - --v=3
        - --csi-address=/csi/csi.sock
        imagePullPolicy: IfNotPresent
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
      - name: csi-vault-plugin
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - SYS_ADMIN
          privileged: true
        image: kubevault/csi-vault:v0.4.0-rc.0
        args :
        - run
        - --csi-address=unix:/csi/csi.sock
        - --node=$(NODE_NAME)
        - --v=3
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=true
        - --enable-analytics=true
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            port: 8443
            path: /healthz
            scheme: HTTPS
          initialDelaySeconds: 10
        resources:
          {}
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: serving-cert
          mountPath: /var/serving-cert
      volumes:
      - name: socket-dir
        emptyDir: {}
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: my-release-csi-vault-apiserver-cert
      securityContext:
        {}
      nodeSelector:
        beta.kubernetes.io/arch: amd64
        beta.kubernetes.io/os: linux
---
# Source: csi-vault/templates/csidriver.yaml
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: secrets.csi.kubevault.com
spec:
  attachRequired: false
  podInfoOnMount: true
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: appscode:appcatalog:admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["*"]
---
# Source: csi-vault/templates/appcatalog-user-roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: appscode:appcatalog:view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
rules:
- apiGroups:
  - appcatalog.appscode.com
  resources:
  - "*"
  verbs: ["get", "list", "watch"]
