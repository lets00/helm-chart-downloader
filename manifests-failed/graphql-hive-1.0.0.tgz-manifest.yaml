---
# Source: graphql-hive/charts/clickhouse/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clickhouse
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
automountServiceAccountToken: true
---
# Source: graphql-hive/charts/kafka/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-19.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
  annotations:
automountServiceAccountToken: true
---
# Source: graphql-hive/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: redis
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: graphql-hive/charts/supertokens/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: supertokens
  labels:
    helm.sh/chart: supertokens-1.0.0
    app.kubernetes.io/name: supertokens
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.14.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: graphql-hive/charts/clickhouse/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clickhouse
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
type: Opaque
data:
  admin-password: "bXJNUWl5OUpvcQ=="
---
# Source: graphql-hive/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "eFVIc3hFeXNtRA=="
---
# Source: graphql-hive/charts/clickhouse/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-zookeeper-scripts
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: graphql-hive/charts/clickhouse/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
data:
  00_default_overrides.xml: |
    <clickhouse>
      <!-- Macros -->
      <macros>
        <shard from_env="CLICKHOUSE_SHARD_ID"></shard>
        <replica from_env="CLICKHOUSE_REPLICA_ID"></replica>
        <layer>clickhouse</layer>
      </macros>
      <!-- Log Level -->
      <logger>
        <level>information</level>
      </logger>
      <!-- Zookeeper configuration -->
      <zookeeper>
        
        <node>
          <host>clickhouse-zookeeper-0.clickhouse-zookeeper-headless.graphql-hive-1.0.0.tgz.svc.cluster.local</host>
          <port>2181</port>
        </node>
        <node>
          <host>clickhouse-zookeeper-1.clickhouse-zookeeper-headless.graphql-hive-1.0.0.tgz.svc.cluster.local</host>
          <port>2181</port>
        </node>
      </zookeeper>
    </clickhouse>
---
# Source: graphql-hive/charts/hive-app/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-app
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  APP_BASE_URL: 'http://base.url.io'

  SUPERTOKENS_CONNECTION_URI: 'http://supertokens:3567'

  EMAILS_ENDPOINT: 'http://emails-svc:80'
  GRAPHQL_ENDPOINT: 'http://server-svc:80/graphql'
  SERVER_ENDPOINT: 'http://server-svc:80'

  AUTH_GOOGLE: '0'

  AUTH_REQUIRE_EMAIL_VERIFICATION: '0'
---
# Source: graphql-hive/charts/hive-emails/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: emails-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-emails
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  REDIS_HOST: 'redis-master'
  REDIS_PORT: '6379'

  BULLMQ_COMMANDS_FROM_ROOT: 'true'

  EMAIL_FROM: 'no-reply@yourDomain.com'
  EMAIL_PROVIDER: 'sendmail'
  EMAIL_PROVIDER_SMTP_PROTOCOL: ''
  EMAIL_PROVIDER_SMTP_HOST: ''
  EMAIL_PROVIDER_SMTP_PORT: ''
  EMAIL_PROVIDER_SMTP_AUTH_USERNAME: ''
  EMAIL_PROVIDER_SMTP_AUTH_PASSWORD: ''
  EMAIL_PROVIDER_POSTMARK_TOKEN: ''
  EMAIL_PROVIDER_POSTMARK_MESSAGE_STREAM: ''
  EMAIL_PROVIDER_SMTP_REJECT_UNAUTHORIZED: ''

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''

  RATE_LIMIT_ENDPOINT: ''
---
# Source: graphql-hive/charts/hive-schema/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-schema
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  REDIS_HOST: 'redis-master'
  REDIS_PORT: '6379'

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''

  REQUEST_BROKER: '0'
  REQUEST_BROKER_ENDPOINT: ''
  REQUEST_BROKER_SIGNATURE: ''
---
# Source: graphql-hive/charts/hive-server/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-server
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  POSTGRES_HOST: 'postgres-postgresql'
  POSTGRES_PORT: '5432'
  POSTGRES_DB: 'graphql-hive'
  POSTGRES_USER: 'hive'

  ROARR_LOG: 'true'

  CLICKHOUSE_PROTOCOL: 'http'
  CLICKHOUSE_HOST: 'clickhouse'
  CLICKHOUSE_PORT: '8123'
  CLICKHOUSE_USERNAME: 'default'

  REDIS_HOST: 'redis-master'
  REDIS_PORT: '6379'

  TOKENS_ENDPOINT: 'http://tokens-svc:80'
  WEBHOOKS_ENDPOINT: 'http://webhooks-svc:80'
  SCHEMA_ENDPOINT: 'http://schema-svc:80'
  EMAILS_ENDPOINT: 'http://emails-svc:80'

  WEB_APP_URL: 'http://app-svc:80'

  SUPERTOKENS_CONNECTION_URI: 'http://supertokens:3567'

  INTEGRATION_GITHUB: '0'
  INTEGRATION_GITHUB_GITHUB_APP_ID: ''
  INTEGRATION_GITHUB_GITHUB_APP_PRIVATE_KEY: ''

  AUTH_ORGANIZATION_OIDC: '0'

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''

  RATE_LIMIT_ENDPOINT: ''
---
# Source: graphql-hive/charts/hive-storage/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: storage-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-storage
    release: my-release
data:
  MIGRATOR: up
  CLICKHOUSE_MIGRATOR: up

  POSTGRES_HOST: postgres-postgresql
  POSTGRES_PORT: '5432'
  POSTGRES_DB: graphql-hive
  POSTGRES_USER: hive

  CLICKHOUSE_PROTOCOL: http
  CLICKHOUSE_HOST: clickhouse
  CLICKHOUSE_PORT: '8123'
  CLICKHOUSE_USERNAME: default

  SENTRY_DNS: ''
  SENTRY_ENABLED: '0'
---
# Source: graphql-hive/charts/hive-tokens/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tokens-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-tokens
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  POSTGRES_HOST: 'postgres-postgresql'
  POSTGRES_USER: 'hive'
  POSTGRES_PORT: '5432'
  POSTGRES_DB: 'graphql-hive'

  ROARR_LOG: 'true'

  SENTRY: '0'
  SENTRY_DSN: ''

  RATE_LIMIT_ENDPOINT: ''
---
# Source: graphql-hive/charts/hive-usage-ingestor/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: usage-ingestor-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage-ingestor
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  KAFKA_CONNECTION_MODE: 'hosted'
  KAFKA_BROKER: 'kafka:9092'
  KAFKA_CONCURRENCY: '1'
  KAFKA_CONSUMER_GROUP: 'usage-ingestor-v2'
  KAFKA_TOPIC: 'usage_reports_v2'

  CLICKHOUSE_PROTOCOL: 'http'
  CLICKHOUSE_HOST: 'clickhouse'
  CLICKHOUSE_PORT: '8123'
  CLICKHOUSE_USERNAME: 'default'

  HEARTBEAT_ENDPOINT: ''

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''
---
# Source: graphql-hive/charts/hive-usage/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: usage-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  TOKENS_ENDPOINT: 'http://tokens-svc:80'

  KAFKA_CONNECTION_MODE: 'hosted'
  KAFKA_TOPIC: 'usage_reports_v2'
  KAFKA_BROKER: 'kafka:9092'
  KAFKA_BUFFER_SIZE: '350'
  KAFKA_BUFFER_INTERVAL: '1000'
  KAFKA_BUFFER_DYNAMIC: '1'

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''
---
# Source: graphql-hive/charts/hive-webhooks/templates/environment-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: webhooks-env-cm
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-webhooks
    release: my-release
data:
  NODE_ENV: 'production'
  PORT: '8080'

  REDIS_HOST: 'redis-master'
  REDIS_PORT: '6379'

  BULLMQ_COMMANDS_FROM_ROOT: 'true'

  SENTRY: '0'
  SENTRY_DSN: ''

  PROMETHEUS_METRICS: '0'
  PROMETHEUS_METRICS_LABEL_INSTANCE: ''

  REQUEST_BROKER: '0'
  REQUEST_BROKER_ENDPOINT: ''
  REQUEST_BROKER_SIGNATURE: ''
---
# Source: graphql-hive/charts/kafka/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-zookeeper-scripts
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: graphql-hive/charts/kafka/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-scripts
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-19.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  setup.sh: |-
    #!/bin/bash

    ID="${MY_POD_NAME#"kafka-"}"
    if [[ -f "/bitnami/kafka/data/meta.properties" ]]; then
        export KAFKA_CFG_BROKER_ID="$(grep "broker.id" "/bitnami/kafka/data/meta.properties" | awk -F '=' '{print $2}')"
    else
        export KAFKA_CFG_BROKER_ID="$((ID + 1))"
    fi

    # Configure zookeeper client

    exec /entrypoint.sh /run.sh
---
# Source: graphql-hive/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configuration
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: graphql-hive/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-health
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: graphql-hive/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: graphql-hive/charts/clickhouse/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-zookeeper-headless
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: graphql-hive/charts/clickhouse/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-zookeeper
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: graphql-hive/charts/clickhouse/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-headless
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
    - name: mysql
      targetPort: mysql
      port: 9004
      protocol: TCP
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
  selector:
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: clickhouse
---
# Source: graphql-hive/charts/clickhouse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clickhouse
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      targetPort: http
      port: 8123
      protocol: TCP
      nodePort: null
    - name: tcp
      targetPort: tcp
      port: 9000
      protocol: TCP
      nodePort: null
    - name: tcp-mysql
      targetPort: tcp-mysql
      port: 9004
      protocol: TCP
      nodePort: null
    - name: tcp-postgresql
      targetPort: tcp-postgresql
      port: 9005
      protocol: TCP
      nodePort: null
    - name: http-intersrv
      targetPort: http-intersrv
      port: 9009
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: clickhouse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: clickhouse
---
# Source: graphql-hive/charts/hive-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: app-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-app
    release: my-release

spec:
  selector:
    app: hive
    service: hive-app
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-emails/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: emails-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-emails
    release: my-release

spec:
  selector:
    app: hive
    service: hive-emails
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-schema/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: schema-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-schema
    release: my-release

spec:
  selector:
    app: hive
    service: hive-schema
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: server-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-server
    release: my-release

spec:
  selector:
    app: hive
    service: hive-server
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-tokens/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: tokens-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-tokens
    release: my-release

spec:
  selector:
    app: hive
    service: hive-tokens
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-usage-ingestor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: usage-ingestor-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage-ingestor
    release: my-release

spec:
  selector:
    app: hive
    service: hive-usage-ingestor
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-usage/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: usage-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage
    release: my-release

spec:
  selector:
    app: hive
    service: hive-usage
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/hive-webhooks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: webhooks-svc
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-webhooks
    release: my-release

spec:
  selector:
    app: hive
    service: hive-webhooks
    release: my-release
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http-main
---
# Source: graphql-hive/charts/kafka/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-zookeeper-headless
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: graphql-hive/charts/kafka/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-zookeeper
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: graphql-hive/charts/kafka/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-19.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
    - name: tcp-internal
      port: 9093
      protocol: TCP
      targetPort: kafka-internal
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: kafka
---
# Source: graphql-hive/charts/kafka/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-19.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: kafka-client
      nodePort: null
  selector:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: kafka
---
# Source: graphql-hive/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql-hl
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: graphql-hive/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgres-postgresql
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: graphql-hive/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: graphql-hive/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-master
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: graphql-hive/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-replicas
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: replica
---
# Source: graphql-hive/charts/supertokens/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: supertokens
  labels: 
    helm.sh/chart: supertokens-1.0.0
    app.kubernetes.io/name: supertokens
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3567
      targetPort: 3567
      
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: supertokens
    app.kubernetes.io/instance: my-release
---
# Source: graphql-hive/charts/hive-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-app-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-app
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-app
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-app
        release: my-release
    spec:
      containers:
        - name: hive-app
          image: "ghcr.io/kamilkisiela/graphql-hive/app:59b64c36c866b3555c135c70de76a884e63f8619"
          imagePullPolicy: "Always"
          envFrom:
            - configMapRef:
                name: app-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SUPERTOKENS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: supertokens-secret
                  key: supertokens-api-key
            - name: AUTH_GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: auth-google-secret
                  key: auth-google-client-id
            - name: AUTH_GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: auth-google-secret
                  key: auth-google-client-secret
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-emails/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-emails-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-emails
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-emails
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-emails
        release: my-release
    spec:
      containers:
        - name: hive-emails
          image: 'ghcr.io/kamilkisiela/graphql-hive/emails:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: emails-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-schema/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-schema-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-schema
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-schema
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-schema
        release: my-release
    spec:
      containers:
        - name: hive-schema
          image: 'ghcr.io/kamilkisiela/graphql-hive/schema:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: schema-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  name: encryption-secret
                  key: encryption-secret
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-server-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-server
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-server
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-server
        release: my-release
    spec:
      containers:
        - name: hive-server
          image: 'ghcr.io/kamilkisiela/graphql-hive/server:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: server-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
            - name: SUPERTOKENS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: supertokens-secret
                  key: supertokens-api-key
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  name: encryption-secret
                  key: encryption-secret
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-tokens/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-tokens-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-tokens
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-tokens
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-tokens
        release: my-release
    spec:
      containers:
        - name: hive-tokens
          image: 'ghcr.io/kamilkisiela/graphql-hive/tokens:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: tokens-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-usage-ingestor/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-usage-ingestor-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage-ingestor
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-usage-ingestor
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-usage-ingestor
        release: my-release
    spec:
      containers:
        - name: hive-usage-ingestor
          image: 'ghcr.io/kamilkisiela/graphql-hive/usage-ingestor:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: usage-ingestor-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-usage/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-usage-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-usage
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-usage
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-usage
        release: my-release
    spec:
      containers:
        - name: hive-usage
          image: 'ghcr.io/kamilkisiela/graphql-hive/usage:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: usage-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/hive-webhooks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hive-webhooks-deploy
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-webhooks
    release: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hive
      service: hive-webhooks
      release: my-release
  template:
    metadata:
      labels:
        app: hive
        service: hive-webhooks
        release: my-release
    spec:
      containers:
        - name: hive-webhooks
          image: 'ghcr.io/kamilkisiela/graphql-hive/webhooks:59b64c36c866b3555c135c70de76a884e63f8619'
          imagePullPolicy: 'Always'
          envFrom:
            - configMapRef:
                name: webhooks-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/charts/supertokens/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: supertokens
  labels:
    helm.sh/chart: supertokens-1.0.0
    app.kubernetes.io/name: supertokens
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supertokens
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supertokens
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: supertokens  
      containers:
        - name: supertokens 
          # securityContext:
          #   readOnlyRootFilesystem: true
          image: "supertokens/supertokens-postgresql:3.14"
          imagePullPolicy: IfNotPresent
          env:
            - name: "POSTGRESQL_DATABASE_NAME"
              value: "graphql-hive"
            - name: "POSTGRESQL_PORT"
              value: "5432"
            - name: "POSTGRESQL_HOST"
              value: "postgres-postgresql"
            - name: "POSTGRESQL_USER"
              value: "hive"
            - name: "POSTGRESQL_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: "POSTGRESQL_TABLE_SCHEMA"
              value: 
            - name: "POSTGRESQL_CONNECTION_POOL_SIZE"
              value: 
            - name: "SUPERTOKENS_PORT"
              value: "3567"
            - name: "ACCESS_TOKEN_VALIDITY"
              value: "3600"
            - name: "ACCESS_TOKEN_BLACKLISTING"
              value: "true"
            - name: "ACCESS_TOKEN_SIGNING_KEY_DYNAMIC"
              value: "true"
            - name: "ACCESS_TOKEN_SIGNING_KEY_UPDATE_INTERVAL"
              value: "168"
            - name: "REFRESH_TOKEN_VALIDITY"
              value: "144000"
            - name: "PASSWORD_RESET_TOKEN_LIFETIME"
              value: "3.6e+06"
            - name: "EMAIL_VERIFICATION_TOKEN_LIFETIME"
              value: "8.64e+07"
            - name: "PASSWORDLESS_MAX_CODE_INPUT_ATTEMPTS"
              value: "5"
            - name: "PASSWORDLESS_CODE_LIFETIME"
              value: "900000"
            - name: "BASE_PATH"
              value: ""
            - name: "DISABLE_TELEMETRY"
              value: "false"
            - name: "MAX_SERVER_POOL_SIZE"
              value: "10"
            - name: "API_KEYS"
              valueFrom:
                secretKeyRef:
                  name: supertokens-secret
                  key: supertokens-api-key
          ports:
            - name: http
              containerPort: 3567
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /hello
              port: http
          readinessProbe:
            httpGet:
              path: /hello
              port: http
---
# Source: graphql-hive/charts/clickhouse/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse-zookeeper
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: zookeeper
  serviceName: clickhouse-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-10.2.4
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r47
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: clickhouse-zookeeper-0.clickhouse-zookeeper-headless.graphql-hive-1.0.0.tgz.svc.cluster.local:2888:3888::1 clickhouse-zookeeper-1.clickhouse-zookeeper-headless.graphql-hive-1.0.0.tgz.svc.cluster.local:2888:3888::2 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: clickhouse-zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/clickhouse/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse-shard0
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: clickhouse
    helm.sh/chart: clickhouse-1.0.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: clickhouse
spec:
  replicas: 1
  podManagementPolicy: "Parallel"
  selector:
    matchLabels: 
      app.kubernetes.io/name: clickhouse
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: clickhouse
  serviceName: clickhouse-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clickhouse
        helm.sh/chart: clickhouse-1.0.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: clickhouse
    spec:
      serviceAccountName: clickhouse
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: clickhouse
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: clickhouse
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      containers:
        - name: clickhouse
          image: docker.io/bitnami/clickhouse:22.9.4-debian-11-r1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CLICKHOUSE_HTTP_PORT
              value: "8123"
            - name: CLICKHOUSE_TCP_PORT
              value: "9000"
            - name: CLICKHOUSE_MYSQL_PORT
              value: "9004"
            - name: CLICKHOUSE_POSTGRESQL_PORT
              value: "9005"
            - name: CLICKHOUSE_INTERSERVER_HTTP_PORT
              value: "9009"
            - name: CLICKHOUSE_ADMIN_USER
              value: "default"
            - name: CLICKHOUSE_SHARD_ID
              value: "shard0"
            - name: CLICKHOUSE_REPLICA_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8123
            - name: tcp
              containerPort: 9000
            - name: tcp-postgresql
              containerPort: 9005
            - name: tcp-mysql
              containerPort: 9004
            - name: http-intersrv
              containerPort: 9009
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: data
              mountPath: /bitnami/clickhouse
            - name: config
              mountPath: /bitnami/clickhouse/etc/conf.d/default
      volumes:
        - name: config
          configMap:
            name: clickhouse
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-zookeeper
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.2.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: zookeeper
  serviceName: kafka-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-10.2.4
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r47
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: kafka-zookeeper-0.kafka-zookeeper-headless.graphql-hive-1.0.0.tgz.svc.cluster.local:2888:3888::1 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: kafka-zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: kafka
    helm.sh/chart: kafka-19.1.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: kafka
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: kafka
  serviceName: kafka-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        helm.sh/chart: kafka-19.1.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: kafka
      annotations:
    spec:
      
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: kafka
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      serviceAccountName: kafka
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3.3.1-debian-11-r11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "kafka-zookeeper"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "INTERNAL://:9093,CLIENT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "INTERNAL://$(MY_POD_NAME).kafka-headless.graphql-hive-1.0.0.tgz.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.graphql-hive-1.0.0.tgz.svc.cluster.local:9092"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: PLAINTEXT
            - name: KAFKA_VOLUME_DIR
              value: "/bitnami/kafka"
            - name: KAFKA_LOG_DIR
              value: "/opt/bitnami/kafka/logs"
            - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
              value: "false"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx1024m -Xms1024m"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
              value: "10000"
            - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
              value: "1000"
            - name: KAFKA_CFG_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: "1000012"
            - name: KAFKA_CFG_LOG_SEGMENT_BYTES
              value: "1073741824"
            - name: KAFKA_CFG_LOG_DIRS
              value: "/bitnami/kafka/data"
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_CFG_NUM_IO_THREADS
              value: "8"
            - name: KAFKA_CFG_NUM_NETWORK_THREADS
              value: "3"
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: "1"
            - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
              value: "1"
            - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
              value: "104857600"
            - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
              value: "102400"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
              value: "6000"
            - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
              value: ""
            - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
              value: "true"
            - name: KAFKA_CFG_SUPER_USERS
              value: "User:admin"
          ports:
            - name: kafka-client
              containerPort: 9092
            - name: kafka-internal
              containerPort: 9093
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: kafka-client
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: kafka-client
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
      volumes:
        - name: scripts
          configMap:
            name: kafka-scripts
            defaultMode: 0755
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-postgresql
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.1.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: postgres-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: postgres-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.1.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.1.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "hive"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
            - name: POSTGRES_DB
              value: "graphql-hive"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "hive" -d "dbname=graphql-hive" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "hive" -d "dbname=graphql-hive" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.11
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 76d8d7e8d908e57b3d1a9ee614898953cefbe7cb12c01a3fc09bad53d3199715
        checksum/health: fb57727453a58e6669e7d184c676e53750561ae5cfec5133982ec94f981d4524
        checksum/scripts: 9379c054dda988583455e08f7b5d21afd1f2cef9a9e4e8c6b105ee87dc07c2a3
        checksum/secret: 8ee7f917971e54f3e23947b908a52bb1e24be4d12394675ece231b78fa8587bb
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.5-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replicas
  namespace: "graphql-hive-1.0.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.11
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: replica
  serviceName: redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.11
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 76d8d7e8d908e57b3d1a9ee614898953cefbe7cb12c01a3fc09bad53d3199715
        checksum/health: fb57727453a58e6669e7d184c676e53750561ae5cfec5133982ec94f981d4524
        checksum/scripts: 9379c054dda988583455e08f7b5d21afd1f2cef9a9e4e8c6b105ee87dc07c2a3
        checksum/secret: 6a837d527563fb8cde38a612d872552326077bb7b29b5a987210a773bf6b72ed
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: replica
                namespaces:
                  - "graphql-hive-1.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.5-debian-11-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: redis-master-0.redis-headless.graphql-hive-1.0.0.tgz.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: graphql-hive/charts/hive-storage/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hive-storage-job
  namespace: graphql-hive-1.0.0.tgz
  labels:
    app: hive
    service: hive-storage
    release: my-release

spec:
  backoffLimit: 6
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: hive-storage-job
      namespace: graphql-hive-1.0.0.tgz
      labels:
        app: hive
        tier: hive-storage
        release: my-release
    spec:
      initContainers:
        - name: wait-for-postgres
          image: actions/pg_isready
          command: [ 'sh', '-c', 'pg_isready -h postgres-postgresql -p 5432' ]
        - name: wait-for-clickhouse
          image: curlimages/curl
          command: [ 'sh', '-c', 'curl clickhouse:8123' ]
      restartPolicy: OnFailure
      containers:
        - name: hive-storage-job
          image: 'ghcr.io/kamilkisiela/graphql-hive/storage:59b64c36c866b3555c135c70de76a884e63f8619'
          envFrom:
            - configMapRef:
                name: storage-env-cm
          env:
            - name: APP_INSTANCE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CLICKHOUSE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: clickhouse
                  key: admin-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: postgres-password
          ports:
            - containerPort: 8080
---
# Source: graphql-hive/templates/api-ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-hive-api-ingress
  namespace: graphql-hive
  annotations:
spec:
  ingressClassName: private
  rules:
    - host: api-base.url.io
      http:
        paths:
          - backend:
              service:
                name: server-svc
                port:
                  number: 80
            path: /
            pathType: Prefix
---
# Source: graphql-hive/templates/root-ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-hive-root-ingress
  namespace: graphql-hive
  annotations:
spec:
  ingressClassName: private
  rules:
    - host: base.url.io
      http:
        paths:
          - backend:
              service:
                name: app-svc
                port:
                  number: 80
            path: /
            pathType: Prefix
          - backend:
              service:
                name: server-svc
                port:
                  number: 80
            path: /graphql
            pathType: Prefix
---
# Source: graphql-hive/templates/usage-ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-hive-usage-ingress
  namespace: graphql-hive
  annotations:
spec:
  ingressClassName: private
  rules:
    - host: usage-base.url.io
      http:
        paths:
          - backend:
              service:
                name: usage-svc
                port:
                  number: 80
            path: /
            pathType: Prefix
---
# Source: graphql-hive/charts/supertokens/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "supertokens-test-connection"
  labels:
    helm.sh/chart: supertokens-1.0.0
    app.kubernetes.io/name: supertokens
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['supertokens:3567/hello']
      securityContext:
        readOnlyRootFilesystem: true
  restartPolicy: Never
