---
# Source: geoserver-cloud/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-rabbitmq
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-rabbitmq
---
# Source: geoserver-cloud/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-geoserver-cloud
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
---
# Source: geoserver-cloud/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: geoserver-cloud-0.0.5.tgz
type: Opaque
data:
  postgresql-postgres-password: "enRqNTFubnhacA=="
  postgresql-password: "cGFzc3dvcmQ="
---
# Source: geoserver-cloud/charts/postgresql/templates/tls-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql-crt
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/tls
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRRzA2SFppeWVkVmNMWXV3Z1ZGbFVhekFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJME1EWXlNREUwTlRZME1Gb1hEVEkxTURZeQpNREUwTlRZME1Gb3dHREVXTUJRR0ExVUVBeE1OY0c5emRHZHlaWE54YkMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFObWtFcHdxcUJvVkI5S0UrWFZoTlgyMVJzOFZ2ek41SVZlbDkwamIKYm9ROVdHZWxRalFJQVdaSmJHTVNxc0VWcHVuSldjYk51Ykw0TSsxZTRvMWNGOGlobEF6ei9JTHlUUEljNllRRQpjTWtJS3hvenRVazdHUXYxWnBEcjRzRUVHazB3a3ZBYkd1cmNyaEtjbThMYTVnRXVEcGg2S2hJMTg1eUNLZlBPClI1amxLR0RlQjRYZ3lKVzlmWEVTalp4a0RkWFVDeU1mbDZEV1JvVnozbkh3MmFFRm9zbTBtNnR0SUZqNkVmblAKV092SUdtY3M0UGRlVHZIbldCcHlTamRZWjhiMmM2UmVDS2ZYbzRCMmdsZm9Xb0tCenUrSEFYbU1sYnhYYzZNUgpWV1ozVDhiZHZpS2NoMEdvVmFPcUVPWmFuQzFpR3hsbCswdk1TMlUva0hnakFKc0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUWxpbHlQenNLTHNzeEw2M0N1NXdZNXA5dFhQREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQU5UcjJSOHE1NDAxa2FCbXcrQXg2YTVyN0pLL1NzNTFOSUM4K3UzOW80K1RqCndRb2RsZEt2QnNQSXBXUWxyV1N2b1JTWWRNWmt2ckQ0ZG00bFUwaUFYZGRwVHZqclBESklZdDFhK1ppRzJ5amIKeXlaKzY4a2RYU3NUd3pMWjc3aTlUa0czbEEyRTd6UzY1dWRtRDk5Nm8xYzRMcXBPTElISk8wbFdMUlFIbVBkaQpTUVUvVWs2V21MTnlDN0JHcTVPemR0dFAzY0kva21MTWpEOVk0YUhYMWVDbTc5NlVvL3pVdEl6YlUzSmM1amFYCjZNRmlYd3VQQm51dmVvMWRIVFZhd1FrSFNHM05nZ3NsSVRoa0NWM01IdWVtREM5VXh2ekQ0WFJvVkJ5anJzR1oKT3YwUXZmNDBwRzN1RXVqZnBxTzVETzdjeThKOTFCVTZXbUtkODYyamtnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaRENDQTB5Z0F3SUJBZ0lRUVFOSU1ybFZSbW02NmlFcXVuVW5IREFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxd2IzTjBaM0psYzNGc0xXTmhNQjRYRFRJME1EWXlNREUwTlRZME1Gb1hEVEkxTURZeQpNREUwTlRZME1Gb3dJREVlTUJ3R0ExVUVBeE1WYlhrdGNtVnNaV0Z6WlMxd2IzTjBaM0psYzNGc01JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXZnZHVLNWwyektPWEhKdkQxTHdodnU5YVcrZ2oKYmhoYmhTaW0rdlNVREwzYVRCbGl5UW5MRFJJcjVtaTRZL3lWaFlhWmpXY3pydnhmYXVQd3hHSFh5Y3o1am43dwplQ0VGaEFKSGpiVk5OR1Y4cmkrbGZnRDNjNTA3aW1PaDRuQ2ZCVE1FRXpJb2tJRWo2T0pyNHNBVUNHdjFyekJmCk84RGJYS0NqT01QbityMDEzSTkvYzZBL3lTTDJwRHVqbG01LzRta1Z5RmVpemtpSEZ2eVhZR2ROOWcyUmxIZFUKWjQ0bUxBaXVNU25INm9nWGR6NVZCMEFnMjRjeVBMZDdjSnpkZ3ZTY0RoRjU3N0JaQzZhNndjUnZRbUZVMG5XTgozcnpCUnUzWXhUMlY0ZVk1QkxqK09IZGxHMnVPZU9UcjNzZ3UrWWxpZDNxbEpzV2hTWU9sTVJVcmRRSURBUUFCCm80SUJvRENDQVp3d0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQ1dLWEkvT3dvdXl6RXZyY0s3bgpCam1uMjFjOE1JSUJPZ1lEVlIwUkJJSUJNVENDQVMyQ1FDb3ViWGt0Y21Wc1pXRnpaUzF3YjNOMFozSmxjM0ZzCkxtZGxiM05sY25abGNpMWpiRzkxWkMwd0xqQXVOUzUwWjNvdWMzWmpMaVVoY3lnOGJtbHNQaW1DUG0xNUxYSmwKYkdWaGMyVXRjRzl6ZEdkeVpYTnhiQzVuWlc5elpYSjJaWEl0WTJ4dmRXUXRNQzR3TGpVdWRHZDZMbk4yWXk0bApJWE1vUEc1cGJENHBna2txTG0xNUxYSmxiR1ZoYzJVdGNHOXpkR2R5WlhOeGJDMW9aV0ZrYkdWemN5NW5aVzl6ClpYSjJaWEl0WTJ4dmRXUXRNQzR3TGpVdWRHZDZMbk4yWXk0bElYTW9QRzVwYkQ0cGdrZHRlUzF5Wld4bFlYTmwKTFhCdmMzUm5jbVZ6Y1d3dGFHVmhaR3hsYzNNdVoyVnZjMlZ5ZG1WeUxXTnNiM1ZrTFRBdU1DNDFMblJuZWk1egpkbU11SlNGektEeHVhV3crS1lJVmJYa3RjbVZzWldGelpTMXdiM04wWjNKbGMzRnNNQTBHQ1NxR1NJYjNEUUVCCkN3VUFBNElCQVFCUkhPeWlCZ1AwYzFDWWlXblc2cHBJY3I3MjEvY0NBbW9vdGN0WjdNU29GUXY3UVBFUFhMM1IKSllhYmF6OFhZY3dBMjV0SklDekxZc2E2NXZNeVY0c0VIQWpzYVRsN3NMMjY3dlZtcE1xc2RjcjdJMnlZVDlaNgo1VUNPOWV0NUdCcmpUeSs3d3ZTc2UwNGQ0ZnYwK2pKZ2pqQTN6ZExKcHg2WVBDSzEwTlhjQ0pVWXdTdytEUUlGClpWWkJwaXhiQklreHM4cGV0WGYrYkpsK3pYY1pxQUhXZHNKcVJDS3B3NFRsUlFlbXpKNWtKbUROemlqNWROcloKcnVCTit0QnYxd1g0WXpHSFlKZFNmbVpweElBdnUxckNRL05TS2lnR0c3c0RkQjc4Vk91UC95Uk5XbXdGVjM3LwpOcis5RGJWQlNRbVJ5THVvYjdYNUVXU2cxL3NoaitNQQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdmdkdUs1bDJ6S09YSEp2RDFMd2h2dTlhVytnamJoaGJoU2ltK3ZTVURMM2FUQmxpCnlRbkxEUklyNW1pNFkveVZoWWFaaldjenJ2eGZhdVB3eEdIWHljejVqbjd3ZUNFRmhBSkhqYlZOTkdWOHJpK2wKZmdEM2M1MDdpbU9oNG5DZkJUTUVFeklva0lFajZPSnI0c0FVQ0d2MXJ6QmZPOERiWEtDak9NUG4rcjAxM0k5LwpjNkEveVNMMnBEdWpsbTUvNG1rVnlGZWl6a2lIRnZ5WFlHZE45ZzJSbEhkVVo0NG1MQWl1TVNuSDZvZ1hkejVWCkIwQWcyNGN5UExkN2NKemRndlNjRGhGNTc3QlpDNmE2d2NSdlFtRlUwbldOM3J6QlJ1M1l4VDJWNGVZNUJMaisKT0hkbEcydU9lT1RyM3NndStZbGlkM3FsSnNXaFNZT2xNUlVyZFFJREFRQUJBb0lCQUU5T1hJMDNtOXZsdmhBRApkZVFYcStHNmxMUmNta1M5UjV5NERaQVllSjBrc3JFbHV4TjUwZE1mclZDWWpiTzAyMVlCaVozNDN4bjlXM2tKCnJoYlhXcTV1ckF2ck1FS0NUWUg5VFkxM2g4UUJRdHFUS2ZiL1FrWnU3VVZoTlZPQ2V1czVrazdNbFI5UnRnSGcKVlBRcUEzSk1WQm1NRDRLcGh5TU9LM0JxV2l0TENaaG9VK2Q4OUhXSVAyaXl3ZnZlY2ZDT0k4T2NvTWdrcHUwYwp4V2VFeWdJTVRHdVFUc2xVNEVCMFErREJLU0NZZzRDWlJjOVRsdTlubEFrNGxTKzhVblNwcXJvWVc0d1ZxM3JLCnB6NWZ3aTFOZk8reDVlMkYwaDFRaTh5ZDdDSUhXK0VFdTN3MlVYeVN1dzk3azRWVHN0SjBaOEE0Z2xNT0lpYTMKTVpwTUx6VUNnWUVBMGdRTkFUNnMyNnVxbkFQVlZqUTB6dC8rMGhMQ0FZYzlocEdKTm8wcFprTjA2bVUvdVJ6VAo3R1NPcVNHaEZ6d2pWWFQ5UTRLdE1vcTh1QzU4Q081NS9UVE5OSXZONWdyTVFyYzNiMUZCbjI4U3oxekR0a2FuCjVHb2tDYzNnTDdVc05DaGFpY21RVUF3NHp5bjlmQTc1R3BoODVnOTk4VXBaVFQ3elY3NHNva3NDZ1lFQTU2TVEKNDkvdjNPaC9FeXlnYTVkZHhuaXh0dGk2RlM2ZWd3dkVSNDl5YXdJQzZSano2Y2xlWm90SFpocGFnQ21MUEM1bwpEcnQrV0tTY3ptRkVRRVZ6clhhRmlFQnRJM3FOWFFVbGg1MEpHZU9UdzA3QUJwcTdrSEtmakVIbVNlRm5XRDVvClBZNmt3dkpqQUNIWmJ6a1YvMWlmY1R2dGx6dkVadkNyMWdxTzBUOENnWUFVaG1yUzlWSWxnZWlCcU9vL3E0aUIKczJpUEZXQTZrQUlXVmNEb1FQR0wyZ25pSXBVUXZWMkUyK3NKWW8wQTNWTEN0bFZPTk1aQ2kwYVlaWXFmd05iUgpSVWpNMnVEN201Q004S1VOVHc2dnkwWTJWK1dVdWVFTXRNYmk0bWtIb0pnNlhMdEVmaHVKaHpoQ0h1TjBMVzV4CkIvZ2s3OXlxS1U4QytxVURyVVZsY3dLQmdRQ0l6QlM5ZnhMNU01VllqWkp2K0FTNW9hM1Nma3ZuRnBFbWMxeUgKcG4rOEVvUUZoV2NIT3BVMW1pdWdjUS9oZ0tkcDh6NGc5VG00di82YkkzWmJQcWtDV0d5ait1aDVlM2JnNkpreApiZHhpSGJTMk0xdlVpcTBhc1pib0RrTWlmcXU1d2FGdU9UKzBvZEUxMHNmR2w4QVYvUkNzbnVmQjJObzBzUTNLCmFwSE5vUUtCZ0VxNzdyN1V6TmJYWEduMlduNU1aR1NQVDZseFRKck5TTldVZWFzcXZUSTRockpHdVA0blhQRkoKM1k3dVhWMFNJRGU3VExBS09FZWVDNVpESEhiWGJWTE5Mem5vMmZVUG4xRlZIeEhYdWdSZzRhZm1YR1NZekRDawo0bk1jcTFkZjZGcks2WlNhWkJtRmo1VFJQM0FLYzJ5M1Fwdk0xeHp2NFlkSWc5K2IyWlZuCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
---
# Source: geoserver-cloud/templates/secrets/secret_postgres.yaml
apiVersion: v1
data:
  DATABASE_NAME: Y29uZmln
  HOST: bXktcmVsZWFzZS1wb3N0Z3Jlc3Fs
  ROLE: dXNlcm5hbWU=
  PASSWORD: cGFzc3dvcmQ=
kind: Secret
metadata:
  name: jdbcconfig-my-release-geoserver-cloud
  #namespace: sig-dev
type: Opaque
---
# Source: geoserver-cloud/templates/secrets/secret_rabbitmq.yaml
apiVersion: v1
data:
  rabbitmq-erlang-cookie: UDQ1UXdPNEJaZFBOZkFLNGhMVnZnQ0tUbVFoZ1pn
  rabbitmq-password: Z2Vvc2VydmVy
kind: Secret
metadata:
  name: geoserver-rabbitmq
  #namespace: sig-dev
type: Opaque
---
# Source: geoserver-cloud/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-rabbitmq-config
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    default_user = geoserver
    default_pass = CHANGEME
    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = geoserver-cloud-0.0.5.tgz-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
# Source: geoserver-cloud/templates/config/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-geoserver-cloud-config-configs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: "config"
data:
  application.yml: |
    server:
      tomcat:
        # Maximum number of connections that the server accepts and processes at any given time.
        # Once the limit has been reached, the operating system may still accept connections based on the "acceptCount" property.
        max-connections: 1000 # default: 8192
        # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
        accept-count: 100 # default: 100
        accesslog:
          enabled: false
          directory: logs
          encoding: UTF-8
        threads:
          # Minimum amount of worker threads.
          min-spare: 2 #default: 10
          # Maximum amount of worker threads.
          max: 20 #default: 200

    # Common configuration for all services. Override or add service specific config
    # properties on each <service-name>-service.yml file
    geoserver:
      security.enabled: true
      servlet.filter.session-debug.enabled: false # until the NPE is fixed
      catalog:
        advertised: true
        localWorkspace: true
        secure: true
        # enable caching if using the catalog-service as backend
        caching.enabled: ${geoserver.backend.catalog-service.enabled}
      bus:
        # whether to send distributed events (i.e. acts as master). All instances receive remote events.
        send-events: true
        # whether to send the object (CatalogInfo/config info) as payload with the event. Set to false,
        # not all possible payload types are properly tested, and full object payload is not needed.
        send-object: ${geoserver.backend.data-directory.enabled}
        # whether to send a diff of changes as payload with the event. Set to false, not all possible payload types are properly tested nor needed.
        send-diff: ${geoserver.backend.data-directory.enabled}
      backend:
        # configure catalog backends and decide which backend to use on this service.
        # All backends are disabled, enable the required one on each service. For example, the catalog microservice
        # will enable one backend type, and the front services the catalog-service backend.
        # revisit: Could be split into profiles
        catalog-service:
          enabled: ${backend.catalog:false}
          # Base URI of the catalog service. If not set, will be automatically determined using the discovery service, looking for "catalog-service"
          # This allows to explicitly set a fixed location for the catalog service.
          # uri: http://catalog:8080
          cache-directory: ${java.io.tmpdir}/cngs/catalog-client/resource_store
          fallback-resource-directory: ${java.io.tmpdir}/cngs/catalog-client/fallback_resource_store
        data-directory:
          enabled: ${backend.data-directory:false}
          location: ${GEOSERVER_DATA_DIR:/opt/app/data_directory}
        jdbcconfig:
          enabled: ${backend.jdbcconfig:false}
          initdb: true
          web.enabled: true
          cache-directory: ${jdbcconfig.cachedir:${java.io.tmpdir}/cngs/jdbcconfig/cache}
          datasource:
            jdbcUrl: "jdbc:postgresql://${jdbcconfig.host}:5432/${jdbcconfig.database}"
            username: ${jdbcconfig.username:geoserver}
            password: ${jdbcconfig.password:geo5erver}
            driverClassname: ${jdbcconfig.driverClassname:org.postgresql.Driver}
            # optional:
            schema: ${jdbcconfig.schema:public}
            minimumIdle: ${jdbcconfig.minConnections:2}
            maximumPoolSize: ${jdbcconfig.maxConnections:8}

    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    spring:
      rabbitmq: 
        host: my-release-rabbitmq
        port: 5672
        username: geoserver
        password: ${RABBITMQ_PASSWORD}
      cloud:
        bus:
          enabled: true
          id: ${server.instance-id} # use the same instance id for eureka (see service's' bootstrap.yml) and cloud-bus' rabbitmq instance id
          trace.enabled: false #switch on tracing of acks (default off).
        stream:
          bindings:
            springCloudBusOutput:
              destination: gscatalog
            springCloudBusInput:
              destination: gscatalog
      jackson:
        default-property-inclusion: non_empty
        serialization.indent_output: false #set to true if doing manual testing and want formatted output

    reactive.feign.cloud.enabled: true
    reactive.feign.hystrix.enabled: false

    logging:
      level:
        root: WARN
        org.springframework: ERROR
        org.springframework.cloud.bus: INFO
        org.springframework.retry: INFO
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: INFO
        org.geoserver.wms: WARN #don't flood the logs with every request details
        org.geoserver.wfs: WARN
        org.geoserver.jackson: INFO
        org.geotools.jackson: INFO
        org.geoserver.platform: INFO
        org.geoserver.platform.resource: INFO
        org.geoserver.jdbcconfig: INFO
        oshi.hardware.platform.linux: ERROR
        oshi.software.os: ERROR
        # gs-cloud roots
        org.geoserver.cloud: INFO
        org.geoserver.cloud.autoconfigure: INFO
        org.geoserver.cloud.config.factory: INFO
        # bus debugging
        org.geoserver.cloud.bus: INFO
        org.springframework.cloud.bus.BusAutoConfiguration: INFO
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: INFO
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN

    ---
    spring.profiles: local
    # provide environment variables that otherwise would be given by docker-compose.yml
    rabbitmq.host: localhost

    jdbcconfig.url: jdbc:postgresql://localhost:5432/geoserver_config
    jdbcconfig.username: geoserver
    jdbcconfig.password: geo5erver
    ---
    spring.profiles: datadir
    backend.jdbcconfig: false
    backend.catalog: false
    backend.data-directory: true
    ---
    spring.profiles: jdbcconfig
    backend.jdbcconfig: true
    backend.catalog: false
    backend.data-directory: false
    ---
    spring.profiles: catalog
    backend.catalog: true
    backend.jdbcconfig: false
    backend.data-directory: false
    ---
    spring.profiles: debug

    logging:
      level:
        root: WARN
        org.springframework: INFO
        # geoserver roots
        org.geoserver: INFO
        org.geoserver.catalog.plugin: DEBUG
        org.geoserver.wms: WARN
        org.geoserver.wfs: WARN
        org.geoserver.jackson: DEBUG
        org.geotools.jackson: DEBUG
        org.geoserver.platform: ERROR
        org.geoserver.jdbcconfig: INFO
        # gs-cloud roots
        org.geoserver.cloud: DEBUG
        org.geoserver.cloud.autoconfigure: DEBUG
        org.geoserver.cloud.config.factory: DEBUG
        # bus debugging
        org.geoserver.cloud.bus: TRACE
        org.springframework.cloud.bus: DEBUG
        org.springframework.cloud.bus.BusAutoConfiguration: DEBUG
        org.springframework.cloud.bus.DefaultBusPathMatcher: INFO
        # reactivefeign:
        reactivefeign.client.log: DEBUG

  config-service.yml: |
    spring:
      profiles:
        active: native #use native filesystem config by default instead of git. REVISIT.
      config.server.native.searchLocations: ${config.path:file:./config}

    logging:
      level:
        root: WARN
        org.springframework.cloud.config.server.environment.NativeEnvironmentRepository: WARN

  gateway-service.yml: |
    # Defines the root base path at which the gateway exposes all geoserver request paths
    # We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
    # work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
    # For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
    # under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
    # Examples:
    #geoserver.base-path:
    #geoserver.base-path: /geoserver-cloud
    #geoserver.base-path: /geoserver/cloud
    # Leave it empty for no additional path, setting it to / won't work currently
    #
    # Please note any other prefix than the empty string will require a trailing slash in the root URL
    # for the redirection to the web-ui to work. This is something we need to fix. For example:
    # http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.
    geoserver.base-path:  /geoserver-cloud 

    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    server:
      compression:
        enabled: true

    management:
      endpoint.gateway.enabled: true # default value
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"

    spring:
      cloud:
        gateway:
          default-filters:
          - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests
          actuator:
            verbose:
              enabled: true
          routes:
          - id: catalog
            uri: lb://catalog-service
            predicates:
            - Path=${geoserver.base-path}/api/v1/**
            filters: # Expose the catalog and configuration API only if the dev profile is active
            - RouteProfile=dev,403
    # WFS routes
          - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
            uri: lb://wfs-service #load balanced to the wfs-service instances
            predicates:
            - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
    # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
          - id: wfs_ows
            uri: lb://wfs-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
    # WMS routes
          - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
            uri: lb://wms-service #load balanced to the wms-service instances
            predicates:
            - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
          - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
            uri: lb://wms-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
    # WCS routes
          - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
            uri: lb://wcs-service #load balanced to the wps-service instances
            predicates:
            - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
          - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
            uri: lb://wcs-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
            - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
    # WPS routes
          - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
            uri: lb://wps-service #load balanced to the wps-service instances
            predicates:
            - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**
          - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
            uri: lb://wps-service
            predicates:
            - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows
            - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
    # REST configuration routes
          - id: restconfig
            uri: lb://restconfig-v1 #load balanced to the restconfig-v1 instances
            predicates:
            - Path=${geoserver.base-path}/rest/**
    # Web UI configuration routes
          - id: webui
            uri: lb://web-ui
            predicates:
            - Path=${geoserver.base-path}/**
            #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout

    logging:
      level:
        root: WARN
        com.netflix.discovery: WARN
        com.netflix.eureka: WARN
        org.springframework.cloud.gateway: info
        reactor.netty: INFO
    ---
    spring.profiles: local
    server.port: 9000



  web-ui.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
      web-ui:
        file-browser.hide-file-system: true
        # These are all default values, here just for reference. You can omit them and add only the ones to disable or further configure
        security.enabled: true
        wfs.enabled: true
        wms.enabled: true
        wcs.enabled: true
        wps.enabled: false # not working yet
        gwc.enabled: false # not ready yet
        extensions:
          importer.enabled: true
        demos:
          enabled: true
          wps-request-builder: true
          wcs-request-builder: true
          demo-requests: true
          srs-list: true
          reprojection-console: true
          layer-preview-page:
            enabled: true
            common-formats:
              open-layers: true
              gml: true
              kml: false #kml links are broken
        tools:
          enabled: true
          resource-browser: true
          catalog-bulk-load: true
    ---
    spring.profiles: local
    server.port: 9106

  restconfig-v1.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9105

  wfs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9101

  wms-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9102

  wcs-service.yml: |
    geoserver:
      backend.catalog-service.enabled: ${backend.catalog:true}
    ---
    spring.profiles: local
    server.port: 9103
---
# Source: geoserver-cloud/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: geoserver-cloud/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-rabbitmq-endpoint-reader
---
# Source: geoserver-cloud/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: geoserver-cloud-0.0.5.tgz
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
---
# Source: geoserver-cloud/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: geoserver-cloud-0.0.5.tgz
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    role: primary
---
# Source: geoserver-cloud/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq-headless
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: geoserver-cloud/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: geoserver-cloud/templates/config/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-config
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: config
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: config
---
# Source: geoserver-cloud/templates/discovery/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-discovery
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: discovery
spec:
  type: ClusterIP
  ports:
    - port: 8761
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: discovery
---
# Source: geoserver-cloud/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-gateway
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: gateway
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: gateway
---
# Source: geoserver-cloud/templates/rest/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-rest
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: rest
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: rest
---
# Source: geoserver-cloud/templates/wcs/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-wcs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wcs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: wcs
---
# Source: geoserver-cloud/templates/webui/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-webui
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: webui
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: webui
---
# Source: geoserver-cloud/templates/wfs/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-wfs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wfs
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: wfs
---
# Source: geoserver-cloud/templates/wms/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-geoserver-cloud-wms
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wms
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    gs-service: wms
---
# Source: geoserver-cloud/templates/config/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-config
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: "config"
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: "config"
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: "config"
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-config
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-config:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: SPRING_PROFILES_ACTIVE
              value: native
            - name: CONFIG_NATIVE_PATH
              value: /opt/app/config
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password

          volumeMounts:
            - name: configs
              mountPath: /opt/app/config

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 300Mi
      volumes:
        - name: configs
          configMap:
            name: my-release-geoserver-cloud-config-configs
---
# Source: geoserver-cloud/templates/discovery/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-discovery
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: discovery
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: discovery
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: discovery
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-discovery
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-discovery:1.0-RC3"
          imagePullPolicy: IfNotPresent
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: my-release-geoserver-cloud-discovery
            - name: SERVER_PORT
              value: "8761"

          ports:
            - name: http
              containerPort: 8761
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              cpu: 300m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 300Mi
---
# Source: geoserver-cloud/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-gateway
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: gateway
  annotations:
    argocd.argoproj.io/sync-wave: "3"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: gateway
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: gateway
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-gateway
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-gateway:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:

            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
---
# Source: geoserver-cloud/templates/rest/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-rest
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: rest
  annotations:
    argocd.argoproj.io/sync-wave: "9"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: rest
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: rest
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-rest
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-rest:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: my-release-geoserver-cloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
---
# Source: geoserver-cloud/templates/wcs/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-wcs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wcs
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: wcs
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: wcs
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wcs
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-wcs:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
---
# Source: geoserver-cloud/templates/webui/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-webui
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: webui
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: webui
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: webui
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-webui
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-webui:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_HOST
              value: my-release-geoserver-cloud-rabbitmq

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 300m
              memory: 512Mi
---
# Source: geoserver-cloud/templates/wfs/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-wfs
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wfs
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: wfs
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: wfs
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wfs
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-wfs:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 200m
              memory: 400Mi
---
# Source: geoserver-cloud/templates/wms/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-geoserver-cloud-wms
  labels:
    helm.sh/chart: geoserver-cloud-0.0.5
    deployed_by: argocd
    app.kubernetes.io/app_environment: "master"
    app.kubernetes.io/base_environment: "dev"
    app.kubernetes.io/name: geoserver-cloud
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0-RC3"
    app.kubernetes.io/managed-by: Helm
    gs-service: wms
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver-cloud
      app.kubernetes.io/instance: my-release
      gs-service: wms
  template:
    metadata:
      annotations:
        checksum/config: 6d7bec0f3182688e5ef980a2617c4dd8407febd296c25fccb32ffff2e5423a7a
      labels:
        app.kubernetes.io/name: geoserver-cloud
        app.kubernetes.io/instance: my-release
        gs-service: wms
    spec:
      serviceAccountName: my-release-geoserver-cloud
      securityContext:
        runAsUser: 630
      containers:
        - name: geoserver-cloud-wms
          securityContext:
            {}
          image: "geoservercloud/geoserver-cloud-wms:1.0-RC3"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - java org.springframework.boot.loader.JarLauncher
          env:
            - name: EUREKA_SERVER_URL
              value: http://my-release-geoserver-cloud-discovery:8761/eureka
            - name: BACKEND_CATALOG
              value: "false"
            - name: BACKEND_DATA_DIRECTORY
              value: "false"
            - name: BACKEND_JDBCCONFIG
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "jdbcconfig"
            - name: JDBCCONFIG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: DATABASE_NAME
            - name: JDBCCONFIG_HOST
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: HOST
            - name: JDBCCONFIG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: ROLE
            - name: JDBCCONFIG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jdbcconfig-my-release-geoserver-cloud
                  key: PASSWORD
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          startupProbe:
            httpGet:
              path: /actuator/health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 10
            failureThreshold: 10
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
            periodSeconds: 5

          resources:
            limits:
              memory: 800Mi
            requests:
              cpu: 100m
              memory: 400Mi
---
# Source: geoserver-cloud/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.13.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: geoserver-cloud-0.0.5.tgz
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      role: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.13.8
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "geoserver-cloud-0.0.5.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r248
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chmod -R 777 /dev/shm
              cp /tmp/certs/* /opt/bitnami/postgresql/certs/
              chown -R 1001:1001 /opt/bitnami/postgresql/certs/
              chmod 600 /opt/bitnami/postgresql/certs/tls.key
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: raw-certificates
              mountPath: /tmp/certs
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "username"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "config"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "yes"
            - name: POSTGRESQL_TLS_PREFER_SERVER_CIPHERS
              value: "yes"
            - name: POSTGRESQL_TLS_CERT_FILE
              value: /opt/bitnami/postgresql/certs/tls.crt
            - name: POSTGRESQL_TLS_KEY_FILE
              value: /opt/bitnami/postgresql/certs/tls.key
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "username" -d "dbname=config" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "username" -d "dbname=config sslcert=/opt/bitnami/postgresql/certs/tls.crt sslkey=/opt/bitnami/postgresql/certs/tls.key" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: postgresql-certificates
              mountPath: /opt/bitnami/postgresql/certs
              readOnly: true
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: raw-certificates
          secret:
            secretName: my-release-postgresql-crt
        - name: postgresql-certificates
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: geoserver-cloud/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rabbitmq
  namespace: "geoserver-cloud-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.0.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-release-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.0.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      
      serviceAccountName: my-release-rabbitmq
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.8.9-debian-10-r37
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "my-release-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
              value: "geoserver"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: geoserver-rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits: {}
            requests: {}
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - rabbitmqctl stop_app
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: my-release-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
# Source: geoserver-cloud/templates/ingress.yaml
# apiVersion: networking.k8s.io/v1beta1 # for k3s < v1.19
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
  - http:
      paths:
      - path:  /geoserver-cloud/ 
        pathType: Prefix
        backend:
          service:
            name: my-release-geoserver-cloud-gateway
            port:
              number: 8080
