---
# Source: kubevious/templates/backend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubevious-backend
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/parser/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-kubevious-parser
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/mysql/secret-root.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kubevious-mysql-secret-root
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: "a3ViZXZpb3Vz"
---
# Source: kubevious/templates/mysql/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kubevious-mysql-secret
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
type: Opaque
data:
  MYSQL_PASS: "a3ViZXZpb3Vz"
---
# Source: kubevious/templates/worldvious/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kubevious-worldvious
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-worldvious
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
type: Opaque
data:
  WORLDVIOUS_ID: "OGIwM2NmNDMtYzkzZi00NTMzLTg5YjgtZDRiOTM0YTRhNjE2"
---
# Source: kubevious/templates/mysql/configmap-db.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-mysql-conf
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin
  slave.cnf: |
    # Apply this config only on slaves.
    [mysqld]
    super-read-only
---
# Source: kubevious/templates/mysql/configmap-init-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-mysql-init-script
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  initdb.sql: |
    USE kubevious;

    SET NAMES utf8;
---
# Source: kubevious/templates/mysql/configmap-mysql-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-mysql-config
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  MYSQL_HOST: "my-release-kubevious-mysql"
  MYSQL_PORT: "3306"
  MYSQL_DB: "kubevious"
  MYSQL_USER: "kubevious"
---
# Source: kubevious/templates/redis/configmap-redis-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-redis-config
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-redis
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  REDIS_HOST: "my-release-kubevious-redis"
  REDIS_PORT: "6379"
---
# Source: kubevious/templates/ui/configmap-caddy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-ui-caddy
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-ui
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  Caddyfile: |
    {
      admin :5555
    }

    :4000 {

        handle /api/v1/* {
            reverse_proxy my-release-kubevious-backend-clusterip:4000
        }

        handle /socket/* {
            reverse_proxy my-release-kubevious-backend-clusterip:4000
        }

        handle /* {
            root * /caddy/www
            try_files {path} /index.html
            file_server
        }

    }
---
# Source: kubevious/templates/worldvious/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubevious-worldvious
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-worldvious
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
data:
  WORLDVIOUS_URL: https://api.kubevious.io/api/v1/oss
---
# Source: kubevious/templates/crds/ChangePackage.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: changepackages.kubevious.io
spec:
  group: kubevious.io
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            data:
              type: object
              properties:
                charts:
                  type: array
                  items:
                    type: object
                    properties:
                      namespace:
                        type: string
                      name:
                        type: string
                    required:
                      - namespace
                      - name
                changes:
                  type: array
                  items:
                    type: object
                    properties:
                      data:
                        type: string
                    required:
                      - data
                deletions:
                  type: array
                  items:
                    type: object
                    properties:
                      apiVersion:
                        type: string
                      kind:
                        type: string
                      namespace:
                        type: string
                      name:
                        type: string
                    required:
                      - apiVersion
                      - kind
                      - name
          required:
            - data
  scope: Namespaced
  names:
    plural: changepackages
    singular: changepackage
    kind: ChangePackage
---
# Source: kubevious/templates/crds/ValidationState.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: validationstates.kubevious.io
spec:
  group: kubevious.io
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            status:
              type: object
              properties:
                state:
                  type: string
                date:
                  type: string
                  format: datetime
                success:
                  type: boolean
                summary:
                  type: object
                  properties:
                    issues:
                      type: object
                      properties:
                        raised:
                          type: object
                          properties:
                            errors: 
                              type: number
                            warnings: 
                              type: number
                          required:
                            - errors
                            - warnings
                        cleared:
                          type: object
                          properties:
                            errors: 
                              type: number
                            warnings: 
                              type: number
                          required:
                            - errors
                            - warnings
                      required:
                        - raised
                        - cleared
                  required:
                    - issues
                raisedIssues:
                  type: array
                  items:
                    type: object
                    properties:
                      dn:
                        type: string
                      msg:
                        type: string
                      severity:
                        type: string
                    required:
                      - dn
                      - msg
                      - severity
                clearedIssues:
                  type: array
                  items:
                    type: object
                    properties:
                      dn:
                        type: string
                      msg:
                        type: string
                      severity:
                        type: string
                    required:
                      - dn
                      - msg
                      - severity                      
              required:
                - state
                - date
          required:
            - status
  scope: Namespaced
  names:
    plural: validationstates
    singular: validationstate
    kind: ValidationState
---
# Source: kubevious/templates/backend/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubevious-backend
  labels:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
rules:
  - apiGroups:
      - kubevious.io
    resources:
      - changepackages
    verbs:
      - get
      - list
      - watch
      - delete
  - apiGroups:
      - kubevious.io
    resources:
      - validationstates
    verbs:
      - get
      - list
      - create
      - delete
      - update
---
# Source: kubevious/templates/parser/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-kubevious-parser
  labels:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: kubevious/templates/backend/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubevious-backend
  labels:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kubevious-backend
subjects:
- kind: ServiceAccount
  name: my-release-kubevious-backend
  namespace: kubevious-1.2.2.tgz
---
# Source: kubevious/templates/parser/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-kubevious-parser
  labels:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kubevious-parser
subjects:
- kind: ServiceAccount
  name: my-release-kubevious-parser
  namespace: kubevious-1.2.2.tgz
---
# Source: kubevious/templates/backend/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-backend-clusterip
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/collector/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-collector-clusterip
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-collector
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: my-release-kubevious-collector
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/guard/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-guard-clusterip
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-guard
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: my-release-kubevious-guard
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/mysql/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-mysql
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    app.kubernetes.io/component: my-release-kubevious-mysql
---
# Source: kubevious/templates/parser/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-parser-clusterip
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/redis/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-redis
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-redis
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/component: my-release-kubevious-redis
---
# Source: kubevious/templates/ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-kubevious-ui-clusterip
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-ui
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: my-release-kubevious-ui
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
---
# Source: kubevious/templates/backend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubevious-backend
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-backend
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-backend
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-backend
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.2.2"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: kubevious-1.2.2
    spec:
      securityContext:
        {}
      containers:
        - name: kubevious
          securityContext:
            {}
          image: "kubevious/backend:1.2.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: SERVER_PORT
              value: "4001"
            - name: COLLECTOR_BASE_URL
              value: http://my-release-kubevious-collector-clusterip:4000
            - name: PARSER_BASE_URL
              value: http://my-release-kubevious-parser-clusterip:4000
            - name: GUARD_BASE_URL
              value: http://my-release-kubevious-guard-clusterip:4000
          envFrom:
            - configMapRef:
                name: my-release-kubevious-mysql-config
            - secretRef:
                name: my-release-kubevious-mysql-secret
            - configMapRef:
                name: my-release-kubevious-redis-config
            - secretRef:
                name: my-release-kubevious-worldvious
            - configMapRef:
                name: my-release-kubevious-worldvious
          ports:
            - name: http
              containerPort: 4001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      serviceAccountName: my-release-kubevious-backend
---
# Source: kubevious/templates/collector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubevious-collector
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-collector
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-collector
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-collector
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.2.2"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: kubevious-1.2.2
    spec:
      securityContext:
        {}
      containers:
        - name: kubevious
          securityContext:
            {}
          image: "kubevious/collector:1.2.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: SERVER_PORT
              value: "4002"          
            - name: BACKEND_BASE_URL
              value: http://my-release-kubevious-backend-clusterip:4000
            - name: COLLECTOR_HISTORY_RETENTION_DAYS
              value: "15"        
          envFrom:
            - configMapRef:
                name: my-release-kubevious-mysql-config
            - secretRef:
                name: my-release-kubevious-mysql-secret
            - configMapRef:
                name: my-release-kubevious-redis-config
            - secretRef:
                name: my-release-kubevious-worldvious
            - configMapRef:
                name: my-release-kubevious-worldvious
          ports:
            - name: http
              containerPort: 4002
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      serviceAccountName: default
---
# Source: kubevious/templates/guard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubevious-guard
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-guard
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-guard
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-guard
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.2.2"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: kubevious-1.2.2
    spec:
      securityContext:
        {}
      containers:
        - name: kubevious
          securityContext:
            {}
          image: "kubevious/guard:1.2.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: SERVER_PORT
              value: "4004"          
            - name: BACKEND_BASE_URL
              value: http://my-release-kubevious-backend-clusterip:4000              
          envFrom:
            - configMapRef:
                name: my-release-kubevious-mysql-config
            - secretRef:
                name: my-release-kubevious-mysql-secret
            - configMapRef:
                name: my-release-kubevious-redis-config
            - secretRef:
                name: my-release-kubevious-worldvious
            - configMapRef:
                name: my-release-kubevious-worldvious
          ports:
            - name: http
              containerPort: 4004
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      serviceAccountName: default
---
# Source: kubevious/templates/parser/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubevious-parser
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-parser
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-parser
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-parser
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.2.2"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: kubevious-1.2.2
    spec:
      serviceAccountName: my-release-kubevious-parser
      securityContext:
        {}
      containers:
        - name: kubevious
          securityContext:
            {}
          image: "kubevious/parser:1.2.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: LOG_LEVEL
              value: "info"
            - name: KUBEVIOUS_COLLECTOR
              value: "http://my-release-kubevious-collector-clusterip:4000/api/v1/collect"
            - name: KUBEVIOUS_API_SKIP_EVENTS
              value: "true"
            - name: SERVER_PORT
              value: "4003"
          envFrom:  
            - configMapRef:
                name: my-release-kubevious-worldvious
            - secretRef:
                name: my-release-kubevious-worldvious
          ports:
            - name: http
              containerPort: 4003
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
---
# Source: kubevious/templates/ui/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubevious-ui
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-ui
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-ui
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-ui
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "1.2.2"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: kubevious-1.2.2
    spec:
      securityContext:
        {}
      containers:
        - name: kubevious
          securityContext:
            {}
          image: "kubevious/ui:1.2.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_ENV
              value: "production"
            - name: KUBEVIOUS_VERSION
              value: 1.2.2              
          ports:
            - name: http
              containerPort: 4000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 25m
              memory: 50Mi
          volumeMounts:
          - name: caddy-config
            mountPath: /etc/caddy/Caddyfile
            subPath: Caddyfile
      volumes:
        - name: caddy-config
          configMap:
            name: my-release-kubevious-ui-caddy
      serviceAccountName: default
---
# Source: kubevious/templates/mysql/statefulset.yaml
# source: https://chart.io/docs/tasks/run-application/run-replicated-stateful-application/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-kubevious-mysql
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-mysql
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-mysql
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  serviceName: my-release-kubevious-mysql
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-mysql
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      initContainers:
      - name: init-mysql
        image: mysql:8.0.30
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - "-c"
        - |
          set -ex
          echo "[mysqld]" > /mnt/conf.d/server-id.cnf
          echo "server-id=1" >> /mnt/conf.d/server-id.cnf
          echo "[mysqld]" > /mnt/conf.d/bin-logs.cnf
          echo "binlog_expire_logs_seconds=259200" >> /mnt/conf.d/bin-logs.cnf
          cp /mnt/config-map/master.cnf /mnt/conf.d/
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: mysql
        image: "mysql:8.0.30"
        imagePullPolicy: IfNotPresent
        env:
        - name: NODE_ENV
          value: "production"
        - name: MYSQL_DATABASE
          value: "kubevious"
        - name: MYSQL_USER
          value: "kubevious"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-kubevious-mysql-secret
              key: MYSQL_PASS
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-kubevious-mysql-secret-root
              key: MYSQL_ROOT_PASSWORD
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: "data"
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            
            command: ["mysqladmin", "ping", "-u$MYSQL_USER", "-p$MYSQL_PASSWORD"]
            
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command:
              - bash 
              - "-c"
            
              - | 
                mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h 127.0.0.1 -e 'SELECT 1'
            
              
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
        resources:
            requests:
              cpu: 250m
              memory: 1000Mi
      serviceAccountName: default
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: my-release-kubevious-mysql-conf
      - name: init-script
        configMap:
          name: my-release-kubevious-mysql-init-script
  volumeClaimTemplates:
  - metadata:
      name: "data"
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
# Source: kubevious/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-kubevious-redis
  namespace: kubevious-1.2.2.tgz
  labels:
    app.kubernetes.io/component: my-release-kubevious-redis
    app.kubernetes.io/name: kubevious
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.2"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: kubevious-1.2.2
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: my-release-kubevious-redis
      app.kubernetes.io/name: kubevious
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
  serviceName: my-release-kubevious-redis
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/component: my-release-kubevious-redis
        app.kubernetes.io/name: kubevious
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        {}
      containers:
      - name: redis
        image: "redislabs/redisearch:2.4.14"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          protocol: TCP
          name: redis
        resources:
            requests:
              cpu: 100m
              memory: 128Mi
      serviceAccountName: default
