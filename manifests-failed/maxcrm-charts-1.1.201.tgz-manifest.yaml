---
# Source: maxcrm-charts/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-chatwoot-redis
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: maxcrm-charts/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-maxcrm-charts
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
---
# Source: maxcrm-charts/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-chatwoot-postgresql
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "bkhNd1phWHpBTA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: maxcrm-charts/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-chatwoot-redis
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "cmVkaXM="
---
# Source: maxcrm-charts/templates/env-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
  name: my-release-maxcrm-charts-env
data:
  POSTGRES_HOST: "bXktcmVsZWFzZS1jaGF0d29vdC1wb3N0Z3Jlc3Fs"
  POSTGRES_PORT: "NTQzMg=="
  POSTGRES_USERNAME: "cG9zdGdyZXM="
  POSTGRES_PASSWORD: "cG9zdGdyZXM="
  POSTGRES_DATABASE: "Y2hhdHdvb3RfcHJvZHVjdGlvbg=="
  REDIS_HOST: "bXktcmVsZWFzZS1jaGF0d29vdC1yZWRpcy1tYXN0ZXI="
  REDIS_PORT: "NjM3OQ=="
  REDIS_PASSWORD: "cmVkaXM="
  REDIS_URL: "cmVkaXM6Ly86cmVkaXNAbXktcmVsZWFzZS1jaGF0d29vdC1yZWRpcy1tYXN0ZXI6NjM3OQ=="
  ACTIVE_STORAGE_SERVICE: "bG9jYWw="
  ANDROID_BUNDLE_ID: "Y29tLmNoYXR3b290LmFwcA=="
  ANDROID_SHA256_CERT_FINGERPRINT: "QUM6NzM6OEU6REU6RUI6NTY6RUE6Q0M6MTA6ODc6MDI6QTc6NjU6Mzc6N0I6Mzg6RDQ6NUQ6RDQ6NTM6Rjg6M0I6RkI6RDM6QzY6Mjg6NjQ6MUQ6QUE6MDg6MUU6RDg="
  ASSET_CDN_HOST: ""
  AWS_ACCESS_KEY_ID: ""
  AWS_REGION: ""
  AWS_SECRET_ACCESS_KEY: ""
  ENABLE_ACCOUNT_SIGNUP: "ZmFsc2U="
  FB_APP_ID: ""
  FB_APP_SECRET: ""
  FB_VERIFY_TOKEN: ""
  FORCE_SSL: "ZmFsc2U="
  FRONTEND_URL: "aHR0cDovLzAuMC4wLjA6MzAwMA=="
  INSTALLATION_ENV: "aGVsbQ=="
  IOS_APP_ID: "NkM5NTNGM1JYMi5jb20uY2hhdHdvb3QuYXBw"
  LOG_LEVEL: "aW5mbw=="
  LOG_SIZE: "NTAw"
  MAILER_INBOUND_EMAIL_DOMAIN: ""
  MAILER_SENDER_EMAIL: ""
  MAILGUN_INGRESS_SIGNING_KEY: ""
  MANDRILL_INGRESS_API_KEY: ""
  RAILS_ENV: "cHJvZHVjdGlvbg=="
  RAILS_INBOUND_EMAIL_PASSWORD: ""
  RAILS_INBOUND_EMAIL_SERVICE: ""
  RAILS_LOG_TO_STDOUT: "dHJ1ZQ=="
  RAILS_MAX_THREADS: "NQ=="
  REDIS_SENTINELS: ""
  REDIS_SENTINEL_MASTER_NAME: ""
  REDIS_TLS: "ZmFsc2U="
  S3_BUCKET_NAME: ""
  SECRET_KEY_BASE: "cmVwbGFjZV93aXRoX3lvdXJfc3VwZXJfZHVwZXJfc2VjcmV0X2tleV9iYXNl"
  SENTRY_DSN: ""
  SLACK_CLIENT_ID: ""
  SLACK_CLIENT_SECRET: ""
  SMTP_ADDRESS: ""
  SMTP_AUTHENTICATION: "cGxhaW4="
  SMTP_ENABLE_STARTTLS_AUTO: "dHJ1ZQ=="
  SMTP_OPENSSL_VERIFY_MODE: "bm9uZQ=="
  SMTP_PASSWORD: ""
  SMTP_PORT: "NTg3"
  SMTP_USERNAME: ""
  TWITTER_APP_ID: ""
  TWITTER_CONSUMER_KEY: ""
  TWITTER_CONSUMER_SECRET: ""
  TWITTER_ENVIRONMENT: ""
  USE_INBOX_AVATAR_FOR_BOT: "dHJ1ZQ=="
---
# Source: maxcrm-charts/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-chatwoot-redis-configuration
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: maxcrm-charts/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-chatwoot-redis-health
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: maxcrm-charts/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-chatwoot-redis-scripts
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        echo "${hostname}.${HEADLESS_SERVICE}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: maxcrm-charts/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-chatwoot-postgresql-hl
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: chatwoot-postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: maxcrm-charts/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-chatwoot-postgresql
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: maxcrm-charts/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-chatwoot-redis-headless
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: my-release
---
# Source: maxcrm-charts/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-chatwoot-redis-master
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: maxcrm-charts/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-chatwoot-redis-replicas
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: chatwoot-redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: replica
---
# Source: maxcrm-charts/templates/web-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-maxcrm-charts
  creationTimestamp: null
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
spec:
  ports:
    - name: "chatwoot"
      port: 3000
      targetPort: 3000
  type: LoadBalancer
  selector:
    app: my-release-maxcrm-charts
    role: web
status:
  loadBalancer: {}
---
# Source: maxcrm-charts/templates/web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-maxcrm-charts-web
  creationTimestamp: null
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-maxcrm-charts
      release: "my-release"
      role: web
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: my-release-maxcrm-charts
        release: "my-release"
        role: web
      annotations:
        checksum/config: 3f0e2445ad6e3f8249a8fd98cb1c6abe7e13a4bdfabd1b70efa5324916c6d802
    spec:
      containers:
        - args:
            - bundle
            - exec
            - rails
            - s
            - -p
            - "3000"
            - -b
            - 0.0.0.0
          command:
            - docker/entrypoints/rails.sh
          env:
          envFrom:
            - secretRef:
                name: my-release-maxcrm-charts-env
          image: "chatwoot/chatwoot:v3.1.0"
          name: maxcrm-charts-web
          ports:
            - containerPort: 3000
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: my-release-maxcrm-charts
      volumes:
        - name: cache
          emptyDir: {}
---
# Source: maxcrm-charts/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-maxcrm-charts-worker
  creationTimestamp: null
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-release-maxcrm-charts
      release: "my-release"
      role: worker
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: my-release-maxcrm-charts
        release: "my-release"
        role: worker
      annotations:
        checksum/config: 3f0e2445ad6e3f8249a8fd98cb1c6abe7e13a4bdfabd1b70efa5324916c6d802
    spec:
      containers:
        - args:
            - bundle
            - exec
            - sidekiq
            - -C
            - config/sidekiq.yml
          env:
          envFrom:
            - secretRef:
                name: my-release-maxcrm-charts-env
          image: "chatwoot/chatwoot:v3.1.0"
          name: maxcrm-charts-workers
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: my-release-maxcrm-charts
      volumes:
        - name: cache
          emptyDir: {}
---
# Source: maxcrm-charts/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-chatwoot-postgresql
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-postgresql
    helm.sh/chart: postgresql-11.6.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-chatwoot-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-chatwoot-postgresql
      labels:
        app.kubernetes.io/name: chatwoot-postgresql
        helm.sh/chart: postgresql-11.6.7
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "maxcrm-charts-1.1.201.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-chatwoot-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "chatwoot_production"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=chatwoot_production" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=chatwoot_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: maxcrm-charts/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-chatwoot-redis-master
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-chatwoot-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatwoot-redis
        helm.sh/chart: redis-16.12.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: bd256364e441c661493f7b1e320c6db7177fa262dce03197a6dc8f664870ee36
        checksum/health: a50e8407350d4ad4ad1c61da19ebc11c3ac96f95068298c8ecb07f445a5c2a8a
        checksum/scripts: a89726c0929901d80a6fb5fae724591c51544d5dc6ebee3959fc51b0b0e0da38
        checksum/secret: dfddc395e64e1da15abd887f36708fac3a8613bed968ad4103a43496a5e6eac9
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-chatwoot-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "maxcrm-charts-1.1.201.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-chatwoot-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-chatwoot-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-chatwoot-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-chatwoot-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: chatwoot-redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: maxcrm-charts/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-chatwoot-redis-replicas
  namespace: "maxcrm-charts-1.1.201.tgz"
  labels:
    app.kubernetes.io/name: chatwoot-redis
    helm.sh/chart: redis-16.12.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chatwoot-redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: replica
  serviceName: my-release-chatwoot-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatwoot-redis
        helm.sh/chart: redis-16.12.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: bd256364e441c661493f7b1e320c6db7177fa262dce03197a6dc8f664870ee36
        checksum/health: a50e8407350d4ad4ad1c61da19ebc11c3ac96f95068298c8ecb07f445a5c2a8a
        checksum/scripts: a89726c0929901d80a6fb5fae724591c51544d5dc6ebee3959fc51b0b0e0da38
        checksum/secret: dfddc395e64e1da15abd887f36708fac3a8613bed968ad4103a43496a5e6eac9
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-chatwoot-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chatwoot-redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: replica
                namespaces:
                  - "maxcrm-charts-1.1.201.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.7-debian-11-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: my-release-chatwoot-redis-master-0.my-release-chatwoot-redis-headless.maxcrm-charts-1.1.201.tgz.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-chatwoot-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-chatwoot-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-chatwoot-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-chatwoot-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-chatwoot-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: chatwoot-redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: maxcrm-charts/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-maxcrm-charts-test-connection"
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded  
spec:
  containers:
    - name: wget
      image: busybox
      imagePullPolicy: IfNotPresent
      command: ['wget']
      args: ['my-release-maxcrm-charts:3000']
  restartPolicy: Never
---
# Source: maxcrm-charts/templates/migrations-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-migrate"
  labels:
    app: my-release-maxcrm-charts
    chart: "maxcrm-charts-1.1.201"
    release: "my-release"
    heritage: "Helm"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "-1"
spec:
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: init-postgres
        image: "chatwoot/chatwoot:v3.1.0"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
          - -c
          - >-
            PG_READY="pg_isready -h my-release-chatwoot-postgresql -p 5432";
            until $PG_READY;
            do
              sleep 2;
            done;
            echo "Database ready to accept connections."  ;
      - name: init-redis
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c", "until nslookup my-release-chatwoot-redis-master ; do echo waiting for my-release-chatwoot-redis-master ; sleep 2; done;"]
      containers:
      - name: "db-migrate-job"
        image: "chatwoot/chatwoot:v3.1.0"
        args:
        - bundle
        - exec
        - rails
        - db:chatwoot_prepare
        env:
        envFrom:
          - secretRef:
              name: my-release-maxcrm-charts-env
        imagePullPolicy: IfNotPresent
        volumeMounts:
            - name: cache
              mountPath: /app/tmp
      serviceAccountName: my-release-maxcrm-charts
      volumes:
        - name: cache
          emptyDir: {}
