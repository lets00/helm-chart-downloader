---
# Source: confluence-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: confluence-server-db
  namespace: "confluence-server-3.7.3.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "cjdoM2tKNjFCNw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: confluence-server/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-confluence-server
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ATL_JDBC_PASSWORD: "Q0hBTkdFTUU="
---
# Source: confluence-server/templates/configmap-db-helper.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  my-release-db-helper-cm
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
data:
  setup.sql: |
    CREATE USER confluenceuser WITH ENCRYPTED PASSWORD 'CHANGEME';
    CREATE DATABASE confluencedb WITH OWNER confluenceuser
      ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' TEMPLATE template0;
---
# Source: confluence-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-confluence-server-cm
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
data:
  ATL_JDBC_URL: "jdbc:postgresql://confluence-server-db:5432/confluencedb"
  ATL_JDBC_USER: "confluenceuser"
  ATL_DB_TYPE: "postgresql"
---
# Source: confluence-server/templates/pvc-home.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-confluence-server-home
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: confluence-server/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluence-server-db-hl
  namespace: "confluence-server-3.7.3.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: confluence-server/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: confluence-server-db
  namespace: "confluence-server-3.7.3.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: confluence-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-confluence-server
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8090
    protocol: TCP
  selector:
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
---
# Source: confluence-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-confluence-server
  labels:
    helm.sh/chart: confluence-server-3.7.3
    app.kubernetes.io/name: confluence-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "8.7.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: confluence-server
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: confluence-server
        app.kubernetes.io/instance: my-release
    spec:
      initContainers:
        - name: init-postgres
          image: "postgres:9.6.11-alpine"
          imagePullPolicy: IfNotPresent
          command: [
            "sh",
            "-c",
            "until pg_isready -h confluence-server-db -p 5432 ; do echo waiting for confluence-server-db; sleep 5; done;"]
      serviceAccountName: default
      securityContext:
        fsGroup: 2002
      hostAliases:
        []
      containers:
        - name: confluence-server
          image: "atlassian/confluence-server:8.7.1"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: my-release-confluence-server-cm
          env:
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-confluence-server
                  key: ATL_JDBC_PASSWORD
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              value: "\
                "
          ports:
            - name: http
              containerPort: 8090
              protocol: TCP
            - name: synchrony
              containerPort: 8091
              protocol: TCP
          volumeMounts:
            - mountPath: /var/atlassian/application-data/confluence
              name: my-release-confluence-server-home
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: my-release-confluence-server-home
          persistentVolumeClaim:
            claimName: my-release-confluence-server-home
---
# Source: confluence-server/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: confluence-server-db
  namespace: "confluence-server-3.7.3.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: confluence-server-db-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: confluence-server-db
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: confluence-server-db
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
