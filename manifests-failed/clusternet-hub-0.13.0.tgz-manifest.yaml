---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: clusternet-reserved
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: cluster-bootstrap-use
  namespace: clusternet-hub-0.13.0.tgz
---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: clusternet-hub
  namespace: clusternet-hub-0.13.0.tgz
  annotations:
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: clusternet-hub-proxy
  namespace: clusternet-hub-0.13.0.tgz
  annotations:
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clusternet-hub-proxy
  namespace: clusternet-hub-0.13.0.tgz
  annotations:
    kubernetes.io/service-account.name: clusternet-hub-proxy
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: kubernetes.io/service-account-token
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_bases.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: bases.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Base
    listKind: BaseList
    plural: bases
    singular: base
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Base represents the referenced resources/templates before rendering.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BaseSpec defines the desired state of Base
            properties:
              feeds:
                description: Feeds
                items:
                  description: Feed defines the resource to be selected.
                  properties:
                    apiVersion:
                      description: APIVersion defines the versioned schema of this
                        representation of an object.
                      type: string
                    kind:
                      description: Kind is a string value representing the REST resource
                        this object represents. In CamelCase.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace of the target resource.
                      type: string
                  required:
                  - apiVersion
                  - kind
                  - name
                  type: object
                type: array
            required:
            - feeds
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_descriptions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: descriptions.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Description
    listKind: DescriptionList
    plural: descriptions
    shortNames:
    - desc
    singular: description
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.deployer
      name: DEPLOYER
      type: string
    - jsonPath: .status.phase
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Description is the Schema for the resources to be installed
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DescriptionSpec defines the spec of Description
            properties:
              chartRaw:
                description: ChartRaw is the underlying serialization of all helm
                  chart objects.
                items:
                  format: byte
                  type: string
                type: array
              charts:
                description: Charts describe all the helm charts to be installed
                items:
                  properties:
                    name:
                      description: Name of the HelmChart.
                      type: string
                    namespace:
                      description: Namespace of the HelmChart.
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              deployer:
                description: Deployer indicates the deployer for this Description
                enum:
                - Helm
                - Generic
                type: string
              raw:
                description: Raw is the underlying serialization of all objects.
                items:
                  format: byte
                  type: string
                type: array
            required:
            - deployer
            type: object
          status:
            description: DescriptionStatus defines the observed state of Description
            properties:
              manifestStatuses:
                description: ManifestStatuses contains a list of running statuses
                  of manifests in DescriptionSpec.
                items:
                  description: ManifestStatus contains details for the current status
                    of this feed.
                  properties:
                    apiVersion:
                      description: APIVersion defines the versioned schema of this
                        representation of an object.
                      type: string
                    kind:
                      description: Kind is a string value representing the REST resource
                        this object represents. In CamelCase.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace of the target resource.
                      type: string
                    observedStatus:
                      description: ObservedStatus reflects observed status of current
                        feed.
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - apiVersion
                  - kind
                  - name
                  type: object
                type: array
              phase:
                description: Phase denotes the phase of Description
                enum:
                - Pending
                - Success
                - Failure
                - Installing
                - Upgrading
                - Uninstalling
                - Superseded
                - Unknown
                type: string
              reason:
                description: Reason indicates the reason of DescriptionPhase
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_feedinventories.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: feedinventories.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: FeedInventory
    listKind: FeedInventoryList
    plural: feedinventories
    shortNames:
    - finv
    singular: feedinventory
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: FeedInventory defines a group of feeds which correspond to a
          subscription.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: FeedInventorySpec defines the desired state of FeedInventory.
            properties:
              feeds:
                items:
                  description: FeedOrder defines the scheduling requirements of a
                    Feed.
                  properties:
                    apiVersion:
                      description: APIVersion defines the versioned schema of this
                        representation of an object.
                      type: string
                    desiredReplicas:
                      description: DesiredReplicas specifies the number of desired
                        replica. This is a pointer to distinguish between explicit
                        zero and not specified.
                      format: int32
                      type: integer
                    kind:
                      description: Kind is a string value representing the REST resource
                        this object represents. In CamelCase.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace of the target resource.
                      type: string
                    replicaJsonPath:
                      description: ReplicaJsonPath specifies the JSONPath for replica
                        settings, such as `/spec/replicas` for Deployment/StatefulSet/ReplicaSet.
                        Should not be empty when DesiredReplicas is non-nil.
                      type: string
                    replicaRequirements:
                      description: ReplicaRequirements describes the scheduling requirements
                        for a new replica.
                      properties:
                        affinity:
                          description: Affinity specifies the scheduling constraints
                            of a new replica.
                          properties:
                            nodeAffinity:
                              description: Describes node affinity scheduling rules
                                for the pod.
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node matches the corresponding
                                    matchExpressions; the node(s) with the highest
                                    sum are the most preferred.
                                  items:
                                    description: An empty preferred scheduling term
                                      matches all objects with implicit weight 0 (i.e.
                                      it's a no-op). A null preferred scheduling term
                                      matches no objects (i.e. is also a no-op).
                                    properties:
                                      preference:
                                        description: A node selector term, associated
                                          with the corresponding weight.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      weight:
                                        description: Weight associated with matching
                                          the corresponding nodeSelectorTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - preference
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the affinity requirements specified by this field
                                    cease to be met at some point during pod execution
                                    (e.g. due to an update), the system may or may
                                    not try to eventually evict the pod from its node.
                                  properties:
                                    nodeSelectorTerms:
                                      description: Required. A list of node selector
                                        terms. The terms are ORed.
                                      items:
                                        description: A null or empty node selector
                                          term matches no objects. The requirements
                                          of them are ANDed. The TopologySelectorTerm
                                          type implements a subset of the NodeSelectorTerm.
                                        properties:
                                          matchExpressions:
                                            description: A list of node selector requirements
                                              by node's labels.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchFields:
                                            description: A list of node selector requirements
                                              by node's fields.
                                            items:
                                              description: A node selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: The label key that
                                                    the selector applies to.
                                                  type: string
                                                operator:
                                                  description: Represents a key's
                                                    relationship to a set of values.
                                                    Valid operators are In, NotIn,
                                                    Exists, DoesNotExist. Gt, and
                                                    Lt.
                                                  type: string
                                                values:
                                                  description: An array of string
                                                    values. If the operator is In
                                                    or NotIn, the values array must
                                                    be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. If
                                                    the operator is Gt or Lt, the
                                                    values array must have a single
                                                    element, which will be interpreted
                                                    as an integer. This array is replaced
                                                    during a strategic merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      type: array
                                  required:
                                  - nodeSelectorTerms
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                            podAffinity:
                              description: Describes pod affinity scheduling rules
                                (e.g. co-locate this pod in the same node, zone, etc.
                                as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node has pods which
                                    matches the corresponding podAffinityTerm; the
                                    node(s) with the highest sum are the most preferred.
                                  items:
                                    description: The weights of all of the matched
                                      WeightedPodAffinityTerm fields are added per-node
                                      to find the most preferred node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term,
                                          associated with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set
                                              of resources, in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaceSelector:
                                            description: A label query over the set
                                              of namespaces that the term applies
                                              to. The term is applied to the union
                                              of the namespaces selected by this field
                                              and the ones listed in the namespaces
                                              field. null selector and null or empty
                                              namespaces list means "this pod's namespace".
                                              An empty selector ({}) matches all namespaces.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaces:
                                            description: namespaces specifies a static
                                              list of namespace names that the term
                                              applies to. The term is applied to the
                                              union of the namespaces listed in this
                                              field and the ones selected by namespaceSelector.
                                              null or empty namespaces list and null
                                              namespaceSelector means "this pod's
                                              namespace".
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located
                                              (affinity) or not co-located (anti-affinity)
                                              with the pods matching the labelSelector
                                              in the specified namespaces, where co-located
                                              is defined as running on a node whose
                                              value of the label with key topologyKey
                                              matches that of any node on which any
                                              of the selected pods is running. Empty
                                              topologyKey is not allowed.
                                            type: string
                                        required:
                                        - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching
                                          the corresponding podAffinityTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - podAffinityTerm
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the affinity requirements specified by this field
                                    cease to be met at some point during pod execution
                                    (e.g. due to a pod label update), the system may
                                    or may not try to eventually evict the pod from
                                    its node. When there are multiple elements, the
                                    lists of nodes corresponding to each podAffinityTerm
                                    are intersected, i.e. all terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those
                                      matching the labelSelector relative to the given
                                      namespace(s)) that this pod should be co-located
                                      (affinity) or not co-located (anti-affinity)
                                      with, where co-located is defined as running
                                      on a node whose value of the label with key
                                      <topologyKey> matches that of any node on which
                                      a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaceSelector:
                                        description: A label query over the set of
                                          namespaces that the term applies to. The
                                          term is applied to the union of the namespaces
                                          selected by this field and the ones listed
                                          in the namespaces field. null selector and
                                          null or empty namespaces list means "this
                                          pod's namespace". An empty selector ({})
                                          matches all namespaces.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        description: namespaces specifies a static
                                          list of namespace names that the term applies
                                          to. The term is applied to the union of
                                          the namespaces listed in this field and
                                          the ones selected by namespaceSelector.
                                          null or empty namespaces list and null namespaceSelector
                                          means "this pod's namespace".
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located
                                          (affinity) or not co-located (anti-affinity)
                                          with the pods matching the labelSelector
                                          in the specified namespaces, where co-located
                                          is defined as running on a node whose value
                                          of the label with key topologyKey matches
                                          that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not
                                          allowed.
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  type: array
                              type: object
                            podAntiAffinity:
                              description: Describes pod anti-affinity scheduling
                                rules (e.g. avoid putting this pod in the same node,
                                zone, etc. as some other pod(s)).
                              properties:
                                preferredDuringSchedulingIgnoredDuringExecution:
                                  description: The scheduler will prefer to schedule
                                    pods to nodes that satisfy the anti-affinity expressions
                                    specified by this field, but it may choose a node
                                    that violates one or more of the expressions.
                                    The node that is most preferred is the one with
                                    the greatest sum of weights, i.e. for each node
                                    that meets all of the scheduling requirements
                                    (resource request, requiredDuringScheduling anti-affinity
                                    expressions, etc.), compute a sum by iterating
                                    through the elements of this field and adding
                                    "weight" to the sum if the node has pods which
                                    matches the corresponding podAffinityTerm; the
                                    node(s) with the highest sum are the most preferred.
                                  items:
                                    description: The weights of all of the matched
                                      WeightedPodAffinityTerm fields are added per-node
                                      to find the most preferred node(s)
                                    properties:
                                      podAffinityTerm:
                                        description: Required. A pod affinity term,
                                          associated with the corresponding weight.
                                        properties:
                                          labelSelector:
                                            description: A label query over a set
                                              of resources, in this case pods.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaceSelector:
                                            description: A label query over the set
                                              of namespaces that the term applies
                                              to. The term is applied to the union
                                              of the namespaces selected by this field
                                              and the ones listed in the namespaces
                                              field. null selector and null or empty
                                              namespaces list means "this pod's namespace".
                                              An empty selector ({}) matches all namespaces.
                                            properties:
                                              matchExpressions:
                                                description: matchExpressions is a
                                                  list of label selector requirements.
                                                  The requirements are ANDed.
                                                items:
                                                  description: A label selector requirement
                                                    is a selector that contains values,
                                                    a key, and an operator that relates
                                                    the key and values.
                                                  properties:
                                                    key:
                                                      description: key is the label
                                                        key that the selector applies
                                                        to.
                                                      type: string
                                                    operator:
                                                      description: operator represents
                                                        a key's relationship to a
                                                        set of values. Valid operators
                                                        are In, NotIn, Exists and
                                                        DoesNotExist.
                                                      type: string
                                                    values:
                                                      description: values is an array
                                                        of string values. If the operator
                                                        is In or NotIn, the values
                                                        array must be non-empty. If
                                                        the operator is Exists or
                                                        DoesNotExist, the values array
                                                        must be empty. This array
                                                        is replaced during a strategic
                                                        merge patch.
                                                      items:
                                                        type: string
                                                      type: array
                                                  required:
                                                  - key
                                                  - operator
                                                  type: object
                                                type: array
                                              matchLabels:
                                                additionalProperties:
                                                  type: string
                                                description: matchLabels is a map
                                                  of {key,value} pairs. A single {key,value}
                                                  in the matchLabels map is equivalent
                                                  to an element of matchExpressions,
                                                  whose key field is "key", the operator
                                                  is "In", and the values array contains
                                                  only "value". The requirements are
                                                  ANDed.
                                                type: object
                                            type: object
                                            x-kubernetes-map-type: atomic
                                          namespaces:
                                            description: namespaces specifies a static
                                              list of namespace names that the term
                                              applies to. The term is applied to the
                                              union of the namespaces listed in this
                                              field and the ones selected by namespaceSelector.
                                              null or empty namespaces list and null
                                              namespaceSelector means "this pod's
                                              namespace".
                                            items:
                                              type: string
                                            type: array
                                          topologyKey:
                                            description: This pod should be co-located
                                              (affinity) or not co-located (anti-affinity)
                                              with the pods matching the labelSelector
                                              in the specified namespaces, where co-located
                                              is defined as running on a node whose
                                              value of the label with key topologyKey
                                              matches that of any node on which any
                                              of the selected pods is running. Empty
                                              topologyKey is not allowed.
                                            type: string
                                        required:
                                        - topologyKey
                                        type: object
                                      weight:
                                        description: weight associated with matching
                                          the corresponding podAffinityTerm, in the
                                          range 1-100.
                                        format: int32
                                        type: integer
                                    required:
                                    - podAffinityTerm
                                    - weight
                                    type: object
                                  type: array
                                requiredDuringSchedulingIgnoredDuringExecution:
                                  description: If the anti-affinity requirements specified
                                    by this field are not met at scheduling time,
                                    the pod will not be scheduled onto the node. If
                                    the anti-affinity requirements specified by this
                                    field cease to be met at some point during pod
                                    execution (e.g. due to a pod label update), the
                                    system may or may not try to eventually evict
                                    the pod from its node. When there are multiple
                                    elements, the lists of nodes corresponding to
                                    each podAffinityTerm are intersected, i.e. all
                                    terms must be satisfied.
                                  items:
                                    description: Defines a set of pods (namely those
                                      matching the labelSelector relative to the given
                                      namespace(s)) that this pod should be co-located
                                      (affinity) or not co-located (anti-affinity)
                                      with, where co-located is defined as running
                                      on a node whose value of the label with key
                                      <topologyKey> matches that of any node on which
                                      a pod of the set of pods is running
                                    properties:
                                      labelSelector:
                                        description: A label query over a set of resources,
                                          in this case pods.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaceSelector:
                                        description: A label query over the set of
                                          namespaces that the term applies to. The
                                          term is applied to the union of the namespaces
                                          selected by this field and the ones listed
                                          in the namespaces field. null selector and
                                          null or empty namespaces list means "this
                                          pod's namespace". An empty selector ({})
                                          matches all namespaces.
                                        properties:
                                          matchExpressions:
                                            description: matchExpressions is a list
                                              of label selector requirements. The
                                              requirements are ANDed.
                                            items:
                                              description: A label selector requirement
                                                is a selector that contains values,
                                                a key, and an operator that relates
                                                the key and values.
                                              properties:
                                                key:
                                                  description: key is the label key
                                                    that the selector applies to.
                                                  type: string
                                                operator:
                                                  description: operator represents
                                                    a key's relationship to a set
                                                    of values. Valid operators are
                                                    In, NotIn, Exists and DoesNotExist.
                                                  type: string
                                                values:
                                                  description: values is an array
                                                    of string values. If the operator
                                                    is In or NotIn, the values array
                                                    must be non-empty. If the operator
                                                    is Exists or DoesNotExist, the
                                                    values array must be empty. This
                                                    array is replaced during a strategic
                                                    merge patch.
                                                  items:
                                                    type: string
                                                  type: array
                                              required:
                                              - key
                                              - operator
                                              type: object
                                            type: array
                                          matchLabels:
                                            additionalProperties:
                                              type: string
                                            description: matchLabels is a map of {key,value}
                                              pairs. A single {key,value} in the matchLabels
                                              map is equivalent to an element of matchExpressions,
                                              whose key field is "key", the operator
                                              is "In", and the values array contains
                                              only "value". The requirements are ANDed.
                                            type: object
                                        type: object
                                        x-kubernetes-map-type: atomic
                                      namespaces:
                                        description: namespaces specifies a static
                                          list of namespace names that the term applies
                                          to. The term is applied to the union of
                                          the namespaces listed in this field and
                                          the ones selected by namespaceSelector.
                                          null or empty namespaces list and null namespaceSelector
                                          means "this pod's namespace".
                                        items:
                                          type: string
                                        type: array
                                      topologyKey:
                                        description: This pod should be co-located
                                          (affinity) or not co-located (anti-affinity)
                                          with the pods matching the labelSelector
                                          in the specified namespaces, where co-located
                                          is defined as running on a node whose value
                                          of the label with key topologyKey matches
                                          that of any node on which any of the selected
                                          pods is running. Empty topologyKey is not
                                          allowed.
                                        type: string
                                    required:
                                    - topologyKey
                                    type: object
                                  type: array
                              type: object
                          type: object
                        nodeSelector:
                          additionalProperties:
                            type: string
                          description: NodeSelector specifies hard node constraints
                            that must be met for a new replica to fit on a node. Selector
                            which must match a node's labels for a new replica to
                            be scheduled on that node.
                          type: object
                          x-kubernetes-map-type: atomic
                        resources:
                          description: Resources describes the compute resource requirements.
                          properties:
                            claims:
                              description: "Claims lists the names of resources, defined
                                in spec.resourceClaims, that are used by this container.
                                \n This is an alpha field and requires enabling the
                                DynamicResourceAllocation feature gate. \n This field
                                is immutable. It can only be set for containers."
                              items:
                                description: ResourceClaim references one entry in
                                  PodSpec.ResourceClaims.
                                properties:
                                  name:
                                    description: Name must match the name of one entry
                                      in pod.spec.resourceClaims of the Pod where
                                      this field is used. It makes that resource available
                                      inside a container.
                                    type: string
                                required:
                                - name
                                type: object
                              type: array
                              x-kubernetes-list-map-keys:
                              - name
                              x-kubernetes-list-type: map
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of
                                compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount
                                of compute resources required. If Requests is omitted
                                for a container, it defaults to Limits if that is
                                explicitly specified, otherwise to an implementation-defined
                                value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                        tolerations:
                          description: Tolerations specifies the tolerations of a
                            new replica.
                          items:
                            description: The pod this Toleration is attached to tolerates
                              any taint that matches the triple <key,value,effect>
                              using the matching operator <operator>.
                            properties:
                              effect:
                                description: Effect indicates the taint effect to
                                  match. Empty means match all taint effects. When
                                  specified, allowed values are NoSchedule, PreferNoSchedule
                                  and NoExecute.
                                type: string
                              key:
                                description: Key is the taint key that the toleration
                                  applies to. Empty means match all taint keys. If
                                  the key is empty, operator must be Exists; this
                                  combination means to match all values and all keys.
                                type: string
                              operator:
                                description: Operator represents a key's relationship
                                  to the value. Valid operators are Exists and Equal.
                                  Defaults to Equal. Exists is equivalent to wildcard
                                  for value, so that a pod can tolerate all taints
                                  of a particular category.
                                type: string
                              tolerationSeconds:
                                description: TolerationSeconds represents the period
                                  of time the toleration (which must be of effect
                                  NoExecute, otherwise this field is ignored) tolerates
                                  the taint. By default, it is not set, which means
                                  tolerate the taint forever (do not evict). Zero
                                  and negative values will be treated as 0 (evict
                                  immediately) by the system.
                                format: int64
                                type: integer
                              value:
                                description: Value is the taint value the toleration
                                  matches to. If the operator is Exists, the value
                                  should be empty, otherwise just a regular string.
                                type: string
                            type: object
                          type: array
                      type: object
                  required:
                  - apiVersion
                  - kind
                  - name
                  type: object
                type: array
            required:
            - feeds
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_globalizations.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: globalizations.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Globalization
    listKind: GlobalizationList
    plural: globalizations
    shortNames:
    - glob
    - global
    singular: globalization
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Globalization represents the cluster-scoped override config for
          a group of resources.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GlobalizationSpec defines the desired state of Globalization
            properties:
              clusterAffinity:
                description: ClusterAffinity is a label query over managed clusters
                  by labels. If no labels are specified, all clusters will be selected.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
                x-kubernetes-map-type: atomic
              feed:
                description: Feed holds references to the objects the Globalization
                  applies to.
                properties:
                  apiVersion:
                    description: APIVersion defines the versioned schema of this representation
                      of an object.
                    type: string
                  kind:
                    description: Kind is a string value representing the REST resource
                      this object represents. In CamelCase.
                    type: string
                  name:
                    description: Name of the target resource.
                    type: string
                  namespace:
                    description: Namespace of the target resource.
                    type: string
                required:
                - apiVersion
                - kind
                - name
                type: object
              overridePolicy:
                default: ApplyLater
                description: OverridePolicy specifies the override policy for this
                  Globalization.
                enum:
                - ApplyNow
                - ApplyLater
                type: string
              overrides:
                description: Overrides holds all the OverrideConfig.
                items:
                  description: OverrideConfig holds information that describes a override
                    config.
                  properties:
                    name:
                      description: Name indicate the OverrideConfig name.
                      type: string
                    overrideChart:
                      description: OverrideChart indicates whether the override value
                        for the HelmChart CR.
                      type: boolean
                    type:
                      description: Type specifies the override type for override value.
                      enum:
                      - Helm
                      - JSONPatch
                      - MergePatch
                      type: string
                    value:
                      description: Value represents override value.
                      type: string
                  required:
                  - type
                  - value
                  type: object
                type: array
              priority:
                default: 500
                description: Priority is an integer defining the relative importance
                  of this Globalization compared to others. Lower numbers are considered
                  lower priority. And these Globalization(s) will be applied by order
                  from lower priority to higher. That means override values in lower
                  Globalization will be overridden by those in higher Globalization.
                format: int32
                maximum: 1000
                minimum: 0
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_helmcharts.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: helmcharts.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: HelmChart
    listKind: HelmChartList
    plural: helmcharts
    shortNames:
    - chart
    - charts
    singular: helmchart
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The helm chart name
      jsonPath: .spec.chart
      name: CHART
      type: string
    - description: The helm chart version
      jsonPath: .spec.version
      name: VERSION
      type: string
    - description: The helm repo url
      jsonPath: .spec.repo
      name: REPO
      type: string
    - description: The helm chart status
      jsonPath: .status.phase
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmChart is the Schema for the helm chart
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmChartSpec defines the spec of HelmChart
            properties:
              atomic:
                description: Atomic, for install case, if true, will uninstall failed
                  release.
                type: boolean
              chart:
                description: Chart is the name of a Helm Chart in the Repository.
                type: string
              chartPullSecret:
                description: ChartPullSecret is the name of the secret that contains
                  the auth information for the chart repository.
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                type: object
              createNamespace:
                default: true
                description: CreateNamespace create namespace when install helm release
                type: boolean
              disableHooks:
                description: DisableHooks disables hook processing if set to true.
                type: boolean
              force:
                description: Force will, if set to `true`, ignore certain warnings
                  and perform the upgrade anyway. This should be used with caution.
                type: boolean
              replace:
                description: Replace will re-use the given name, only if that name
                  is a deleted release that remains in the history. This is unsafe
                  in production.
                type: boolean
              replaceCRDs:
                description: ReplaceCRDs replace all crds in chart and sub charts
                  before upgrade and install, not working when SkipCRDs true
                type: boolean
              repo:
                description: a Helm Repository to be used. OCI-based registries are
                  also supported. For example, https://charts.bitnami.com/bitnami
                  or oci://localhost:5000/helm-charts
                pattern: ^(http|https|oci)?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$
                type: string
              skipCRDs:
                description: SkipCRDs skips installing CRDs when install flag is enabled
                  during upgrade
                type: boolean
              targetNamespace:
                description: TargetNamespace specifies the namespace to install this
                  HelmChart
                type: string
              timeoutSeconds:
                default: 300
                description: TimeoutSeconds is the timeout of the chart to be install/upgrade/rollback/uninstall
                format: int32
                type: integer
              upgradeAtomic:
                description: UpgradeAtomic, for upgrade case, if true, will roll back
                  failed release.
                type: boolean
              version:
                description: ChartVersion is the version of the chart to be deployed.
                  It will be defaulted with current latest version if empty.
                type: string
              wait:
                description: Wait determines whether the wait operation should be
                  performed after helm install, upgrade or uninstall is requested.
                type: boolean
              waitForJob:
                description: WaitForJobs determines whether the wait operation for
                  the Jobs should be performed after the upgrade is requested.
                type: boolean
            required:
            - chart
            - repo
            - targetNamespace
            type: object
          status:
            description: HelmChartStatus defines the observed state of HelmChart
            properties:
              phase:
                description: Phase denotes the phase of HelmChart
                enum:
                - Found
                - NotFound
                type: string
              reason:
                description: Reason indicates the reason of HelmChartPhase
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_helmreleases.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: helmreleases.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: HelmRelease
    listKind: HelmReleaseList
    plural: helmreleases
    shortNames:
    - hr
    singular: helmrelease
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The helm chart name
      jsonPath: .spec.chart
      name: CHART
      type: string
    - description: The helm chart version
      jsonPath: .spec.version
      name: VERSION
      type: string
    - description: The helm repo url
      jsonPath: .spec.repo
      name: REPO
      type: string
    - description: The helm release status
      jsonPath: .status.phase
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: HelmRelease is the Schema for the helm release
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: HelmReleaseSpec defines the spec of HelmRelease
            properties:
              atomic:
                description: Atomic, for install case, if true, will uninstall failed
                  release.
                type: boolean
              chart:
                description: Chart is the name of a Helm Chart in the Repository.
                type: string
              chartPullSecret:
                description: ChartPullSecret is the name of the secret that contains
                  the auth information for the chart repository.
                properties:
                  name:
                    type: string
                  namespace:
                    type: string
                type: object
              createNamespace:
                default: true
                description: CreateNamespace create namespace when install helm release
                type: boolean
              disableHooks:
                description: DisableHooks disables hook processing if set to true.
                type: boolean
              force:
                description: Force will, if set to `true`, ignore certain warnings
                  and perform the upgrade anyway. This should be used with caution.
                type: boolean
              overrides:
                description: Overrides specifies the override values for this release.
                format: byte
                type: string
              releaseName:
                description: ReleaseName specifies the desired release name in child
                  cluster. If nil, the default release name will be in the format
                  of "{Description Name}-{HelmChart Namespace}-{HelmChart Name}"
                type: string
              replace:
                description: Replace will re-use the given name, only if that name
                  is a deleted release that remains in the history. This is unsafe
                  in production.
                type: boolean
              replaceCRDs:
                description: ReplaceCRDs replace all crds in chart and sub charts
                  before upgrade and install, not working when SkipCRDs true
                type: boolean
              repo:
                description: a Helm Repository to be used. OCI-based registries are
                  also supported. For example, https://charts.bitnami.com/bitnami
                  or oci://localhost:5000/helm-charts
                pattern: ^(http|https|oci)?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$
                type: string
              skipCRDs:
                description: SkipCRDs skips installing CRDs when install flag is enabled
                  during upgrade
                type: boolean
              targetNamespace:
                description: TargetNamespace specifies the namespace to install the
                  chart
                type: string
              timeoutSeconds:
                default: 300
                description: TimeoutSeconds is the timeout of the chart to be install/upgrade/rollback/uninstall
                format: int32
                type: integer
              upgradeAtomic:
                description: UpgradeAtomic, for upgrade case, if true, will roll back
                  failed release.
                type: boolean
              version:
                description: ChartVersion is the version of the chart to be deployed.
                  It will be defaulted with current latest version if empty.
                type: string
              wait:
                description: Wait determines whether the wait operation should be
                  performed after helm install, upgrade or uninstall is requested.
                type: boolean
              waitForJob:
                description: WaitForJobs determines whether the wait operation for
                  the Jobs should be performed after the upgrade is requested.
                type: boolean
            required:
            - chart
            - repo
            - targetNamespace
            type: object
          status:
            description: HelmReleaseStatus defines the observed state of HelmRelease
            properties:
              description:
                description: Description is human-friendly "log entry" about this
                  release.
                type: string
              firstDeployed:
                description: FirstDeployed is when the release was first deployed.
                type: string
              lastDeployed:
                description: LastDeployed is when the release was last deployed.
                type: string
              notes:
                description: Contains the rendered templates/NOTES.txt if available
                type: string
              phase:
                description: Phase is the current state of the release
                type: string
              version:
                description: Version is an int which represents the revision of the
                  release.
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_localizations.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: localizations.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Localization
    listKind: LocalizationList
    plural: localizations
    shortNames:
    - loc
    - local
    singular: localization
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Localization represents the override config for a group of resources.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LocalizationSpec defines the desired state of Localization
            properties:
              feed:
                description: Feed holds references to the objects the Localization
                  applies to.
                properties:
                  apiVersion:
                    description: APIVersion defines the versioned schema of this representation
                      of an object.
                    type: string
                  kind:
                    description: Kind is a string value representing the REST resource
                      this object represents. In CamelCase.
                    type: string
                  name:
                    description: Name of the target resource.
                    type: string
                  namespace:
                    description: Namespace of the target resource.
                    type: string
                required:
                - apiVersion
                - kind
                - name
                type: object
              overridePolicy:
                default: ApplyLater
                description: OverridePolicy specifies the override policy for this
                  Localization.
                enum:
                - ApplyNow
                - ApplyLater
                type: string
              overrides:
                description: Overrides holds all the OverrideConfig.
                items:
                  description: OverrideConfig holds information that describes a override
                    config.
                  properties:
                    name:
                      description: Name indicate the OverrideConfig name.
                      type: string
                    overrideChart:
                      description: OverrideChart indicates whether the override value
                        for the HelmChart CR.
                      type: boolean
                    type:
                      description: Type specifies the override type for override value.
                      enum:
                      - Helm
                      - JSONPatch
                      - MergePatch
                      type: string
                    value:
                      description: Value represents override value.
                      type: string
                  required:
                  - type
                  - value
                  type: object
                type: array
              priority:
                default: 500
                description: Priority is an integer defining the relative importance
                  of this Localization compared to others. Lower numbers are considered
                  lower priority. And these Localization(s) will be applied by order
                  from lower priority to higher. That means override values in lower
                  Localization will be overridden by those in higher Localization.
                format: int32
                maximum: 1000
                minimum: 0
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_manifests.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: manifests.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Manifest
    listKind: ManifestList
    plural: manifests
    singular: manifest
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Manifest stores the raw object
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          template:
            description: Template defines the raw Kubernetes resource
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - template
        type: object
    served: true
    storage: true
    subresources: {}
---
# Source: clusternet-hub/templates/crds/apps.clusternet.io_subscriptions.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: subscriptions.apps.clusternet.io
spec:
  group: apps.clusternet.io
  names:
    categories:
    - clusternet
    kind: Subscription
    listKind: SubscriptionList
    plural: subscriptions
    shortNames:
    - sub
    - subs
    singular: subscription
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Subscription represents the policy that install a group of resources
          to one or more clusters.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: SubscriptionSpec defines the desired state of Subscription
            properties:
              clusterTolerations:
                description: ClusterTolerations tolerates any matched taints of ManagedCluster.
                items:
                  description: The pod this Toleration is attached to tolerates any
                    taint that matches the triple <key,value,effect> using the matching
                    operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a pod
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoExecute, otherwise
                        this field is ignored) tolerates the taint. By default, it
                        is not set, which means tolerate the taint forever (do not
                        evict). Zero and negative values will be treated as 0 (evict
                        immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      type: string
                  type: object
                type: array
              dividingScheduling:
                description: Dividing scheduling config params. Present only if SchedulingStrategy
                  = Dividing.
                properties:
                  dynamicDividing:
                    description: DynamicDividing describes how to divide replicas
                      into target clusters dynamically.
                    properties:
                      maxClusters:
                        description: MaxClusters describes the upper bound number
                          of target clusters.
                        format: int32
                        type: integer
                      minClusters:
                        description: MinClusters describes the lower bound number
                          of target clusters.
                        format: int32
                        type: integer
                      preferredClusters:
                        description: PreferredClusters describes the assigning preference.
                          If we have a preference for cluster group A compared to
                          cluster group B (i.e., group A has a larger Weight), desired
                          replicas will be assigned to cluster group A as many as
                          possible, while the rest ones will be assigned to cluster
                          group B.
                        items:
                          description: An empty preferred scheduling term matches
                            all objects with implicit weight 0 (i.e. it's a no-op).
                            A null preferred scheduling term matches no objects (i.e.
                            is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the
                                corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements
                                    by node's labels.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements
                                    by node's fields.
                                  items:
                                    description: A node selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector
                                          applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists, DoesNotExist. Gt, and
                                          Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If
                                          the operator is In or NotIn, the values
                                          array must be non-empty. If the operator
                                          is Exists or DoesNotExist, the values array
                                          must be empty. If the operator is Gt or
                                          Lt, the values array must have a single
                                          element, which will be interpreted as an
                                          integer. This array is replaced during a
                                          strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                              x-kubernetes-map-type: atomic
                            weight:
                              description: Weight associated with matching the corresponding
                                nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      strategy:
                        default: Spread
                        description: Type of dynamic dividing replica strategy.
                        enum:
                        - Spread
                        - Binpack
                        type: string
                      topologySpreadConstraints:
                        description: TopologySpreadConstraints describes how a group
                          of replicas ought to spread across topology domains. Scheduler
                          will schedule pods in a way which abides by the constraints.
                          All topologySpreadConstraints are ANDed. Present only for
                          spread divided scheduling.
                        items:
                          description: TopologySpreadConstraint specifies how to spread
                            matching pods among the given topology.
                          properties:
                            labelSelector:
                              description: LabelSelector is used to find matching
                                pods. Pods that match this label selector are counted
                                to determine the number of pods in their corresponding
                                topology domain.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the
                                          selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string
                                          values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the
                                          operator is Exists or DoesNotExist, the
                                          values array must be empty. This array is
                                          replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value}
                                    pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions,
                                    whose key field is "key", the operator is "In",
                                    and the values array contains only "value". The
                                    requirements are ANDed.
                                  type: object
                              type: object
                              x-kubernetes-map-type: atomic
                            matchLabelKeys:
                              description: MatchLabelKeys is a set of pod label keys
                                to select the pods over which spreading will be calculated.
                                The keys are used to lookup values from the incoming
                                pod labels, those key-value labels are ANDed with
                                labelSelector to select the group of existing pods
                                over which spreading will be calculated for the incoming
                                pod. Keys that don't exist in the incoming pod labels
                                will be ignored. A null or empty list means only match
                                against labelSelector.
                              items:
                                type: string
                              type: array
                              x-kubernetes-list-type: atomic
                            maxSkew:
                              description: 'MaxSkew describes the degree to which
                                pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`,
                                it is the maximum permitted difference between the
                                number of matching pods in the target topology and
                                the global minimum. The global minimum is the minimum
                                number of matching pods in an eligible domain or zero
                                if the number of eligible domains is less than MinDomains.
                                For example, in a 3-zone cluster, MaxSkew is set to
                                1, and pods with the same labelSelector spread as
                                2/2/1: In this case, the global minimum is 1. | zone1
                                | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew
                                is 1, incoming pod can only be scheduled to zone3
                                to become 2/2/2; scheduling it onto zone1(zone2) would
                                make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1).
                                - if MaxSkew is 2, incoming pod can be scheduled onto
                                any zone. When `whenUnsatisfiable=ScheduleAnyway`,
                                it is used to give higher precedence to topologies
                                that satisfy it. It''s a required field. Default value
                                is 1 and 0 is not allowed.'
                              format: int32
                              type: integer
                            minDomains:
                              description: "MinDomains indicates a minimum number
                                of eligible domains. When the number of eligible domains
                                with matching topology keys is less than minDomains,
                                Pod Topology Spread treats \"global minimum\" as 0,
                                and then the calculation of Skew is performed. And
                                when the number of eligible domains with matching
                                topology keys equals or greater than minDomains, this
                                value has no effect on scheduling. As a result, when
                                the number of eligible domains is less than minDomains,
                                scheduler won't schedule more than maxSkew Pods to
                                those domains. If value is nil, the constraint behaves
                                as if MinDomains is equal to 1. Valid values are integers
                                greater than 0. When value is not nil, WhenUnsatisfiable
                                must be DoNotSchedule. \n For example, in a 3-zone
                                cluster, MaxSkew is set to 2, MinDomains is set to
                                5 and pods with the same labelSelector spread as 2/2/2:
                                | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  |
                                The number of domains is less than 5(MinDomains),
                                so \"global minimum\" is treated as 0. In this situation,
                                new pod with the same labelSelector cannot be scheduled,
                                because computed skew will be 3(3 - 0) if new Pod
                                is scheduled to any of the three zones, it will violate
                                MaxSkew. \n This is a beta field and requires the
                                MinDomainsInPodTopologySpread feature gate to be enabled
                                (enabled by default)."
                              format: int32
                              type: integer
                            nodeAffinityPolicy:
                              description: "NodeAffinityPolicy indicates how we will
                                treat Pod's nodeAffinity/nodeSelector when calculating
                                pod topology spread skew. Options are: - Honor: only
                                nodes matching nodeAffinity/nodeSelector are included
                                in the calculations. - Ignore: nodeAffinity/nodeSelector
                                are ignored. All nodes are included in the calculations.
                                \n If this value is nil, the behavior is equivalent
                                to the Honor policy. This is a beta-level feature
                                default enabled by the NodeInclusionPolicyInPodTopologySpread
                                feature flag."
                              type: string
                            nodeTaintsPolicy:
                              description: "NodeTaintsPolicy indicates how we will
                                treat node taints when calculating pod topology spread
                                skew. Options are: - Honor: nodes without taints,
                                along with tainted nodes for which the incoming pod
                                has a toleration, are included. - Ignore: node taints
                                are ignored. All nodes are included. \n If this value
                                is nil, the behavior is equivalent to the Ignore policy.
                                This is a beta-level feature default enabled by the
                                NodeInclusionPolicyInPodTopologySpread feature flag."
                              type: string
                            topologyKey:
                              description: TopologyKey is the key of node labels.
                                Nodes that have a label with this key and identical
                                values are considered to be in the same topology.
                                We consider each <key, value> as a "bucket", and try
                                to put balanced number of pods into each bucket. We
                                define a domain as a particular instance of a topology.
                                Also, we define an eligible domain as a domain whose
                                nodes meet the requirements of nodeAffinityPolicy
                                and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname",
                                each Node is a domain of that topology. And, if TopologyKey
                                is "topology.kubernetes.io/zone", each zone is a domain
                                of that topology. It's a required field.
                              type: string
                            whenUnsatisfiable:
                              description: 'WhenUnsatisfiable indicates how to deal
                                with a pod if it doesn''t satisfy the spread constraint.
                                - DoNotSchedule (default) tells the scheduler not
                                to schedule it. - ScheduleAnyway tells the scheduler
                                to schedule the pod in any location, but giving higher
                                precedence to topologies that would help reduce the
                                skew. A constraint is considered "Unsatisfiable" for
                                an incoming pod if and only if every possible node
                                assignment for that pod would violate "MaxSkew" on
                                some topology. For example, in a 3-zone cluster, MaxSkew
                                is set to 1, and pods with the same labelSelector
                                spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P
                                |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule,
                                incoming pod can only be scheduled to zone2(zone3)
                                to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3)
                                satisfies MaxSkew(1). In other words, the cluster
                                can still be imbalanced, but scheduler won''t make
                                it *more* imbalanced. It''s a required field.'
                              type: string
                          required:
                          - maxSkew
                          - topologyKey
                          - whenUnsatisfiable
                          type: object
                        type: array
                    required:
                    - strategy
                    type: object
                  type:
                    default: Static
                    description: Type of dividing replica scheduling.
                    enum:
                    - Static
                    - Dynamic
                    type: string
                required:
                - type
                type: object
              feeds:
                description: Feeds
                items:
                  description: Feed defines the resource to be selected.
                  properties:
                    apiVersion:
                      description: APIVersion defines the versioned schema of this
                        representation of an object.
                      type: string
                    kind:
                      description: Kind is a string value representing the REST resource
                        this object represents. In CamelCase.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace of the target resource.
                      type: string
                  required:
                  - apiVersion
                  - kind
                  - name
                  type: object
                type: array
              schedulerName:
                default: default
                description: If specified, the Subscription will be handled by specified
                  scheduler. If not specified, the Subscription will be handled by
                  default scheduler.
                type: string
              schedulingBySubGroup:
                description: If specified, the Subscription will be handled with SchedulingBySubGroup.
                  Used together with SubGroupStrategy in every Subscriber. Can work
                  with all supported SchedulingStrategy, such as Replication, Dividing.
                type: boolean
              schedulingStrategy:
                default: Replication
                description: If specified, the Subscription will be handled with specified
                  SchedulingStrategy. Otherwise, with generic SchedulingStrategy.
                enum:
                - Replication
                - Dividing
                type: string
              subscribers:
                description: Subscribers subscribes
                items:
                  description: Subscriber defines
                  properties:
                    clusterAffinity:
                      description: ClusterAffinity is a label query over managed clusters
                        by labels.
                      properties:
                        matchExpressions:
                          description: matchExpressions is a list of label selector
                            requirements. The requirements are ANDed.
                          items:
                            description: A label selector requirement is a selector
                              that contains values, a key, and an operator that relates
                              the key and values.
                            properties:
                              key:
                                description: key is the label key that the selector
                                  applies to.
                                type: string
                              operator:
                                description: operator represents a key's relationship
                                  to a set of values. Valid operators are In, NotIn,
                                  Exists and DoesNotExist.
                                type: string
                              values:
                                description: values is an array of string values.
                                  If the operator is In or NotIn, the values array
                                  must be non-empty. If the operator is Exists or
                                  DoesNotExist, the values array must be empty. This
                                  array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                        matchLabels:
                          additionalProperties:
                            type: string
                          description: matchLabels is a map of {key,value} pairs.
                            A single {key,value} in the matchLabels map is equivalent
                            to an element of matchExpressions, whose key field is
                            "key", the operator is "In", and the values array contains
                            only "value". The requirements are ANDed.
                          type: object
                      type: object
                      x-kubernetes-map-type: atomic
                    subGroupStrategy:
                      description: SubGroupStrategy defines the subgroup strategy
                        for the clusters matched by this subscriber. During the scheduling,
                        all the matching clusters will be treated as a subgroup instead
                        of individual clusters. With subgroup, we can describe clusters
                        with different regions, zones, etc. Present only when SchedulingBySubGroup
                        is set.
                      properties:
                        minClusters:
                          description: MinClusters is the minimum number of clusters
                            to be selected in this subgroup. If this value is more
                            than the total number of clusters in this subgroup, then
                            all clusters will be selected.
                          format: int32
                          minimum: 0
                          type: integer
                      type: object
                    weight:
                      description: Static weight of subscriber when dividing replicas.
                        Present only for static divided scheduling.
                      format: int32
                      minimum: 0
                      type: integer
                  required:
                  - clusterAffinity
                  type: object
                type: array
            required:
            - feeds
            - subscribers
            type: object
          status:
            description: SubscriptionStatus defines the observed state of Subscription
            properties:
              aggregatedStatuses:
                description: AggregatedStatuses shows the aggregated statuses of feeds
                  that are running in each child cluster.
                items:
                  description: AggregatedStatus contains aggregated status of current
                    feed.
                  properties:
                    apiVersion:
                      description: APIVersion defines the versioned schema of this
                        representation of an object.
                      type: string
                    feedStatusDetails:
                      description: FeedStatusDetails shows the feed statuses in each
                        child cluster.
                      items:
                        description: FeedStatusPerCluster shows the feed status running
                          in current cluster.
                        properties:
                          available:
                            description: Available indicates whether the feed status
                              is synced successfully to corresponding Description.
                            type: boolean
                          clusterId:
                            description: ClusterID indicates the id of current cluster.
                            pattern: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
                            type: string
                          clusterName:
                            description: ClusterName is the cluster name.
                            maxLength: 30
                            pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?([a-z0-9]([-a-z0-9]*[a-z0-9]))*'
                            type: string
                          replicaStatus:
                            description: ReplicaStatus indicates the replica status
                              of workload-type feed, such as Deployment/StatefulSet/Job.
                            properties:
                              active:
                                description: The number of pending and running pods.
                                format: int32
                                type: integer
                              availableReplicas:
                                description: Total number of available pods (ready
                                  for at least minReadySeconds) targeted by this workload.
                                format: int32
                                type: integer
                              currentReplicas:
                                description: currentReplicas is the number of Pods
                                  created by the workload controller from the StatefulSet
                                  version indicated by currentRevision.
                                format: int32
                                type: integer
                              failed:
                                description: The number of pods which reached phase
                                  Failed.
                                format: int32
                                type: integer
                              observedGeneration:
                                description: The generation observed by the workload
                                  controller.
                                format: int64
                                type: integer
                              readyReplicas:
                                description: readyReplicas is the number of pods targeted
                                  by this workload with a Ready Condition.
                                format: int32
                                type: integer
                              replicas:
                                description: Total number of non-terminated pods targeted
                                  by this workload (their labels match the selector).
                                format: int32
                                type: integer
                              succeeded:
                                description: The number of pods which reached phase
                                  Succeeded.
                                format: int32
                                type: integer
                              unavailableReplicas:
                                description: Total number of unavailable pods targeted
                                  by this workload. This is the total number of pods
                                  that are still required for the workload to have
                                  100% available capacity. They may either be pods
                                  that are running but not yet available or pods that
                                  still have not been created.
                                format: int32
                                type: integer
                              updatedReplicas:
                                description: Total number of non-terminated pods targeted
                                  by this workload that have the desired template
                                  spec.
                                format: int32
                                type: integer
                            type: object
                        type: object
                      type: array
                    feedStatusSummary:
                      description: FeedStatusSummary aggregates the feed statuses
                        from each child cluster.
                      properties:
                        available:
                          description: Available indicates whether the feed status
                            is synced successfully to corresponding Description.
                          type: boolean
                        replicaStatus:
                          description: ReplicaStatus indicates the replica status
                            of workload-type feed, such as Deployment/StatefulSet/Job.
                          properties:
                            active:
                              description: The number of pending and running pods.
                              format: int32
                              type: integer
                            availableReplicas:
                              description: Total number of available pods (ready for
                                at least minReadySeconds) targeted by this workload.
                              format: int32
                              type: integer
                            currentReplicas:
                              description: currentReplicas is the number of Pods created
                                by the workload controller from the StatefulSet version
                                indicated by currentRevision.
                              format: int32
                              type: integer
                            failed:
                              description: The number of pods which reached phase
                                Failed.
                              format: int32
                              type: integer
                            observedGeneration:
                              description: The generation observed by the workload
                                controller.
                              format: int64
                              type: integer
                            readyReplicas:
                              description: readyReplicas is the number of pods targeted
                                by this workload with a Ready Condition.
                              format: int32
                              type: integer
                            replicas:
                              description: Total number of non-terminated pods targeted
                                by this workload (their labels match the selector).
                              format: int32
                              type: integer
                            succeeded:
                              description: The number of pods which reached phase
                                Succeeded.
                              format: int32
                              type: integer
                            unavailableReplicas:
                              description: Total number of unavailable pods targeted
                                by this workload. This is the total number of pods
                                that are still required for the workload to have 100%
                                available capacity. They may either be pods that are
                                running but not yet available or pods that still have
                                not been created.
                              format: int32
                              type: integer
                            updatedReplicas:
                              description: Total number of non-terminated pods targeted
                                by this workload that have the desired template spec.
                              format: int32
                              type: integer
                          type: object
                      type: object
                    kind:
                      description: Kind is a string value representing the REST resource
                        this object represents. In CamelCase.
                      type: string
                    name:
                      description: Name of the target resource.
                      type: string
                    namespace:
                      description: Namespace of the target resource.
                      type: string
                  required:
                  - apiVersion
                  - kind
                  - name
                  type: object
                type: array
              bindingClusters:
                description: Namespaced names of targeted clusters that Subscription
                  binds to.
                items:
                  type: string
                type: array
              completedReleases:
                description: Total number of completed releases targeted by this Subscription.
                type: integer
              desiredReleases:
                description: Total number of Helm releases desired by this Subscription.
                type: integer
              replicas:
                additionalProperties:
                  items:
                    format: int32
                    type: integer
                  type: array
                description: Desired replicas of targeted clusters for each feed.
                type: object
              specHash:
                description: SpecHash calculates the hash value of current SubscriptionSpec.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/crds/clusters.clusternet.io_clusterregistrationrequests.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: clusterregistrationrequests.clusters.clusternet.io
spec:
  group: clusters.clusternet.io
  names:
    categories:
    - clusternet
    kind: ClusterRegistrationRequest
    listKind: ClusterRegistrationRequestList
    plural: clusterregistrationrequests
    shortNames:
    - clsrr
    singular: clusterregistrationrequest
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: The unique id for the cluster
      jsonPath: .spec.clusterId
      name: CLUSTER ID
      type: string
    - description: The status of current cluster registration request
      jsonPath: .status.result
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ClusterRegistrationRequest is the Schema for the clusterregistrationrequests
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterRegistrationRequestSpec defines the desired state
              of ClusterRegistrationRequest
            properties:
              clusterId:
                description: ClusterID, a Random (Version 4) UUID, is a unique value
                  in time and space value representing for child cluster. It is typically
                  generated by the clusternet agent on the successful creation of
                  a "clusternet-agent" Lease in the child cluster. Also it is not
                  allowed to change on PUT operations.
                pattern: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
                type: string
              clusterLabels:
                additionalProperties:
                  type: string
                description: ClusterLabels is the labels of the child cluster.
                type: object
              clusterName:
                description: ClusterName is the cluster name. a lower case alphanumeric
                  characters or '-', and must start and end with an alphanumeric character
                maxLength: 30
                pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?([a-z0-9]([-a-z0-9]*[a-z0-9]))*'
                type: string
              clusterNamespace:
                description: ClusterNamespace is the dedicated namespace of the cluster.
                maxLength: 63
                pattern: '[a-z0-9]([-a-z0-9]*[a-z0-9])?'
                type: string
              clusterType:
                description: ClusterType denotes the type of the child cluster.
                type: string
              syncMode:
                default: Pull
                description: SyncMode decides how to sync resources from parent cluster
                  to child cluster.
                enum:
                - Push
                - Pull
                - Dual
                type: string
            required:
            - clusterId
            type: object
          status:
            description: ClusterRegistrationRequestStatus defines the observed state
              of ClusterRegistrationRequest
            properties:
              caCertificate:
                description: CACertificate is the public certificate that is the root
                  of trust for parent cluster The certificate is encoded in PEM format.
                format: byte
                type: string
              dedicatedNamespace:
                description: DedicatedNamespace is a dedicated namespace for the child
                  cluster, which is created in the parent cluster.
                type: string
              errorMessage:
                description: ErrorMessage tells the reason why the request is not
                  approved successfully.
                type: string
              managedClusterName:
                description: ManagedClusterName is the name of ManagedCluster object
                  in the parent cluster corresponding to the child cluster
                type: string
              result:
                description: Result indicates whether this request has been approved.
                  When all necessary objects have been created and ready for child
                  cluster registration, this field will be set to "Approved". If any
                  illegal updates on this object, "Illegal" will be set to this filed.
                type: string
              token:
                description: DedicatedToken is populated by clusternet-hub when Result
                  is RequestApproved. With this token, the client could have full
                  access on the resources created in DedicatedNamespace.
                format: byte
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/crds/clusters.clusternet.io_managedclusters.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: managedclusters.clusters.clusternet.io
spec:
  group: clusters.clusternet.io
  names:
    categories:
    - clusternet
    kind: ManagedCluster
    listKind: ManagedClusterList
    plural: managedclusters
    shortNames:
    - mcls
    singular: managedcluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The unique id for the cluster
      jsonPath: .spec.clusterId
      name: CLUSTER ID
      type: string
    - description: The type of the cluster
      jsonPath: .spec.clusterType
      name: CLUSTER TYPE
      priority: 100
      type: string
    - description: The cluster sync mode
      jsonPath: .spec.syncMode
      name: SYNC MODE
      type: string
    - jsonPath: .status.k8sVersion
      name: KUBERNETES
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: STATUS
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: ManagedCluster is the Schema for the managedclusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ManagedClusterSpec defines the desired state of ManagedCluster
            properties:
              clusterId:
                description: ClusterID, a Random (Version 4) UUID, is a unique value
                  in time and space value representing for child cluster. It is typically
                  generated by the clusternet agent on the successful creation of
                  a "clusternet-agent" Lease in the child cluster. Also it is not
                  allowed to change on PUT operations.
                pattern: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
                type: string
              clusterType:
                description: ClusterType denotes the type of the child cluster.
                type: string
              syncMode:
                description: SyncMode decides how to sync resources from parent cluster
                  to child cluster.
                enum:
                - Push
                - Pull
                - Dual
                type: string
              taints:
                description: Taints has the "effect" on any resource that does not
                  tolerate the Taint.
                items:
                  description: The node this Taint is attached to has the "effect"
                    on any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: Required. The effect of the taint on pods that
                        do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule
                        and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: TimeAdded represents the time at which the taint
                        was added. It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
            required:
            - clusterId
            - syncMode
            type: object
          status:
            description: ManagedClusterStatus defines the observed state of ManagedCluster
            properties:
              allocatable:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Allocatable is the sum of allocatable resources for nodes
                  in the cluster
                type: object
              apiserverURL:
                description: APIServerURL indicates the advertising url/address of
                  managed Kubernetes cluster
                type: string
              appPusher:
                description: AppPusher indicates whether to allow parent cluster deploying
                  applications in Push or Dual Mode. Mainly for security concerns.
                type: boolean
              capacity:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Capacity is the sum of capacity resources for nodes in
                  the cluster
                type: object
              clusterCIDR:
                description: ClusterCIDR is the CIDR range of the cluster
                type: string
              conditions:
                description: Conditions is an array of current cluster conditions.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              healthz:
                description: Healthz indicates the healthz status of the cluster which
                  is deprecated since Kubernetes v1.16. Please use Livez and Readyz
                  instead. Leave it here only for compatibility.
                type: boolean
              heartbeatFrequencySeconds:
                description: heartbeatFrequencySeconds is the frequency at which the
                  agent reports current cluster status
                format: int64
                type: integer
              k8sVersion:
                description: k8sVersion is the Kubernetes version of the cluster
                type: string
              kubeBurst:
                description: KubeBurst allows extra queries to accumulate when a client
                  is exceeding its rate. Used by deployer in Clusternet to control
                  the burst to current child cluster.
                format: int32
                type: integer
              kubeQPS:
                description: KubeQPS controls the number of queries per second allowed
                  for this connection. Used by deployer in Clusternet to control the
                  qps to current child cluster.
                type: number
              lastObservedTime:
                description: lastObservedTime is the time when last status from the
                  series was seen before last heartbeat. RFC 3339 date and time at
                  which the object was acknowledged by the Clusternet Agent.
                format: date-time
                type: string
              livez:
                description: Livez indicates the livez status of the cluster
                type: boolean
              nodeStatistics:
                description: NodeStatistics is the info summary of nodes in the cluster
                properties:
                  lostNodes:
                    description: LostNodes is the number of states lost nodes in the
                      cluster
                    format: int32
                    type: integer
                  notReadyNodes:
                    description: NotReadyNodes is the number of not ready nodes in
                      the cluster
                    format: int32
                    type: integer
                  readyNodes:
                    description: ReadyNodes is the number of ready nodes in the cluster
                    format: int32
                    type: integer
                  unknownNodes:
                    description: UnknownNodes is the number of unknown nodes in the
                      cluster
                    format: int32
                    type: integer
                type: object
              platform:
                description: platform indicates the running platform of the cluster
                type: string
              podStatistics:
                description: PodStatistics is the info summary of pods in the cluster
                properties:
                  runningPods:
                    description: RunningPods is the number of running pods in the
                      cluster
                    format: int32
                    type: integer
                  totalPods:
                    description: TotalPods is the number of all pods in the cluster
                    format: int32
                    type: integer
                type: object
              predictorAddress:
                description: PredictorAddress shows the predictor address
                type: string
              predictorDirectAccess:
                description: PredictorDirectAccess indicates whether the predictor
                  can be accessed directly by clusternet-scheduler
                type: boolean
              predictorEnabled:
                description: PredictorEnabled indicates whether predictor is enabled.
                type: boolean
              readyz:
                description: Readyz indicates the readyz status of the cluster
                type: boolean
              resourceUsage:
                description: ResourceUsage is the cpu(m) and memory(Mi) already used
                  in the cluster
                properties:
                  cpuUsage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: CpuUsage is the total cpu(m) already used in the
                      whole cluster, k8s reserved not include
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  memoryUsage:
                    anyOf:
                    - type: integer
                    - type: string
                    description: MemoryUsage is the total memory(Mi) already used
                      in the whole cluster, k8s reserved not include
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                type: object
              serviceCIDR:
                description: ServcieCIDR is the CIDR range of the services
                type: string
              useSocket:
                description: UseSocket indicates whether to use socket proxy when
                  connecting to child cluster.
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clusternet:system:bootstrapping
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - "clusters.clusternet.io"
    resources:
      - clusterregistrationrequests
    verbs:
      - get
      - create
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clusternet:system:socketsproxy
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - "proxies.clusternet.io"
    resources:
      - "sockets/proxy"
    verbs: ["*"]
  - apiGroups:
      - ""
    resources:
      - "users"
    resourceNames:
      - "clusternet"
    verbs:
      - impersonate
  - apiGroups:
      - "authentication.k8s.io"
    resources:
      - "userextras/clusternet-token"
      - "userextras/clusternet-certificate"
      - "userextras/clusternet-privatekey"
    verbs:
      - impersonate
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusternet:system:bootstrapping
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clusternet:system:bootstrapping
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:bootstrappers:clusternet:register-cluster-token
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusternet:system:socketsproxy
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clusternet:system:socketsproxy
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:unauthenticated
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:authenticated
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:anonymous
  - kind: ServiceAccount
    name: clusternet-hub-proxy
    namespace: clusternet-hub-0.13.0.tgz
---
# Source: clusternet-hub/templates/bootstrap_rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusternet:system:bootstrapping:sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clusternet:system:bootstrapping
subjects:
  - kind: ServiceAccount
    name: cluster-bootstrap-use
    namespace: clusternet-hub-0.13.0.tgz
---
# Source: clusternet-hub/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusternet:hub:admin
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: clusternet-hub
    namespace: clusternet-hub-0.13.0.tgz
---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-clusternet-hub
  namespace: clusternet-hub-0.13.0.tgz
  annotations:
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app: my-release-clusternet-hub
spec:
  ports:
    - port: 443
      name: https
      protocol: TCP
      targetPort: 443
  selector:
    app.kubernetes.io/name: clusternet-hub
    app.kubernetes.io/instance: my-release
    app: my-release-clusternet-hub
---
# Source: clusternet-hub/templates/clusternet_hub_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clusternet-hub
  namespace: clusternet-hub-0.13.0.tgz
  annotations:
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app: my-release-clusternet-hub
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: clusternet-hub
      app.kubernetes.io/instance: my-release
      app: my-release-clusternet-hub
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clusternet-hub
        helm.sh/chart: clusternet-hub-0.13.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app: my-release-clusternet-hub
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: clusternet-hub
                    app.kubernetes.io/instance: my-release
                namespaces:
                  - "clusternet-hub-0.13.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      serviceAccountName: clusternet-hub
      volumes:
        - hostPath:
            path: /etc/clusternet
            type: DirectoryOrCreate
          name: clusternet
      containers:
        - name: clusternet-hub
          image: ghcr.io/clusternet/clusternet-hub:v0.16.0
          imagePullPolicy: IfNotPresent
          resources:
            limits: {}
            requests: {}
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: RESERVED_NAMESPACE
              value: clusternet-reserved
          ports:
            - name: peer
              containerPort: 8123
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          command:
            - /usr/local/bin/clusternet-hub
          args:
            - --secure-port=443
            - --leader-elect=true
            - --leader-elect-resource-namespace=$(SYSTEM_NAMESPACE)
            - --reserved-namespace=$(RESERVED_NAMESPACE)
            - --peer-port=8123
            - --feature-gates=SocketConnection=true,ShadowAPI=true
            - --kube-api-burst=100
            - --kube-api-qps=50.0
          volumeMounts:
            - mountPath: /etc/clusternet
              name: clusternet
              readOnly: true
---
# Source: clusternet-hub/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.proxies.clusternet.io
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  insecureSkipTLSVerify: true
  group: proxies.clusternet.io
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: my-release-clusternet-hub
    namespace: clusternet-hub-0.13.0.tgz
  version: v1alpha1
---
# Source: clusternet-hub/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.shadow
  labels:
    app.kubernetes.io/name: clusternet-hub
    helm.sh/chart: clusternet-hub-0.13.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  insecureSkipTLSVerify: true
  group: shadow
  groupPriorityMinimum: 1
  versionPriority: 1
  service:
    name: my-release-clusternet-hub
    namespace: clusternet-hub-0.13.0.tgz
  version: v1alpha1
