---
# Source: doccano/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "doccano-2.0.8.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "UHJQYnNzalpKQQ=="
  password: "NThzZGY5aGdkMWdzOHNkZnplckpIRmRm"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: doccano/templates/password.yaml
apiVersion: v1
kind: Secret
type: Opaque
data:
  ADMIN_PASSWORD: cGFzc3dvcmQ=
metadata:
  name: doccano-password
  namespace: doccano-2.0.8.tgz
---
# Source: doccano/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-conf
  namespace: doccano-2.0.8.tgz
data:
  bootstrap.sh: |-
    #!/bin/bash
    cd /doccano
    export PATH=$PATH:/home/doccano/.local/bin
    # install dependency
    python -m pip install doccano==1.8.0
    python -m pip install 'doccano[postgresql]==1.8.0'
    # Initialize database.
    doccano init
    # Create a super user.
    doccano createuser --username admin --password password

    # Start Task Thread
    doccano task &

    # Start web server.
    doccano webserver --port 8000
---
# Source: doccano/templates/volume.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "my-release-data"
  namespace: doccano-2.0.8.tgz
  annotations:
    helm.sh/resource-policy: "keep"
    helm.sh/resource-policy: keep
  labels:
    app: "my-release"
    chart: "doccano-2.0.8"
    release: "my-release"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: doccano/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "doccano-2.0.8.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: doccano/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "doccano-2.0.8.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: doccano/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-doccano"
spec:
  type: ClusterIP
  ports:
    - name: 8000tcp
      port: 8000
      protocol: TCP
      targetPort: 8000
  selector:
    app: "my-release-doccano"
    release: my-release
---
# Source: doccano/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "my-release-doccano"
  labels:
    app: "my-release-doccano"
    chart: "doccano-2.0.8"
    heritage: Helm
    release: my-release
    app.kubernetes.io/name: doccano
    helm.sh/chart: doccano-2.0.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "my-release-doccano"
      release: my-release
  template:
    metadata:
      labels:
        app: "my-release-doccano"
        release: my-release
      annotations:
        rollme: "uEgdC"
    spec:
      containers:
      - args:
        - /bin/bash
        - /config/bootstrap.sh
        env:
        - name: ADMIN_EMAIL
          value: admin@localhost
        - name: ADMIN_USERNAME
          value: admin
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ADMIN_PASSWORD
              name: doccano-password
              optional: false
        - name: DATABASE_URL
          value: "postgres://doccano:58sdf9hgd1gs8sdfzerJHFdf@my-release-postgresql:5432/doccano?sslmode=disable"
        DEBUG: false
        name: doccano
        image: "doccano/doccano:1.8.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: 8000tcp
          protocol: TCP
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /config
          name: bootstrap
      initContainers:
      - args:
        - chown
        - "1000:1000"
        - /data
        image: "busybox:latest"
        imagePullPolicy: IfNotPresent
        name: init
        volumeMounts:
        - mountPath: /data
          name: data
        resources:
        limits:
          cpu: 100m
          memory: 64M
        requests:
          cpu: 50m
          memory: 32M
      volumes:
      - configMap:
          defaultMode: 0777
          items:
          - key: bootstrap.sh
            path: ./bootstrap.sh
          name: my-release-conf
          optional: false
        name: bootstrap
      - name: data
        persistentVolumeClaim:
          claimName: "my-release-data"
      resources:
        limits:
          cpu: 500m
          memory: 2G
        requests:
          cpu: 100m
          memory: 1G
---
# Source: doccano/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "doccano-2.0.8.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.8.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "doccano-2.0.8.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r28
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "doccano"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "doccano"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "doccano" -d "dbname=doccano" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "doccano" -d "dbname=doccano" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: doccano/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: doccano
  labels:
    app: doccano
    chart: "doccano-2.0.8"
    heritage: Helm
    release: my-release
spec:
  tls:
    - hosts:
      - doccano.localhost
      secretName: doccano
  rules:
  - host: "doccano.localhost"
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: my-release-doccano
              port:
                name: 8000tcp
