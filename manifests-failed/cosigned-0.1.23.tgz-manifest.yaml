---
# Source: cosigned/templates/policy-webhook/sa_policy_webhook.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
---
# Source: cosigned/templates/webhook/sa_webhook.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
---
# Source: cosigned/templates/policy-webhook/secret_certs_policy_webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
  name: policy-webhook-certs
  namespace: cosigned-0.1.23.tgz
# The data is populated at install time.
---
# Source: cosigned/templates/webhook/secret_certs_webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: webhook-certs
  namespace: cosigned-0.1.23.tgz
# The data is populated at install time.
---
# Source: cosigned/templates/policy-webhook/configmap-clusterimagepolicy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-image-policies
  namespace: cosigned-0.1.23.tgz
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################
    cluster-image-policy-json: '{"images":[{"glob":"ghcr.io/example/*","regex":""}],"authorities":[{"key":{"data":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExB6+H6054/W1SJgs5JR6AJr6J35J\\nRCTfQ5s1kD+hGMSE1rH7s46hmXEeyhnlRnaGF8eMU/SBJE/2NKPnxE7WzQ==\\n-----END PUBLIC KEY-----"}}]}'
---
# Source: cosigned/templates/policy-webhook/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
  name: my-release-cosigned-policy-webhook-logging
  namespace: cosigned-0.1.23.tgz
data:
  zap-logger-config: |-
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
  # Log level overrides
  # Changes are be picked up immediately.
  loglevel.controller: "info"
  loglevel.webhook: "info"
---
# Source: cosigned/templates/webhook/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: my-release-cosigned-webhook-logging
  namespace: cosigned-0.1.23.tgz
data:
  zap-logger-config: |-
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
  # Log level overrides
  # Changes are be picked up immediately.
  loglevel.controller: "info"
  loglevel.webhook: "info"
---
# Source: cosigned/templates/crds/clusterimagepolicy.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusterimagepolicies.cosigned.sigstore.dev
spec:
  group: cosigned.sigstore.dev
  names:
    kind: ClusterImagePolicy
    plural: clusterimagepolicies
    singular: clusterimagepolicy
    categories:
      - all
      - sigstore
    shortNames:
      - cip
  scope: Cluster
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              description: Spec holds the desired state of the ClusterImagePolicy (from the client).
              type: object
              properties:
                authorities:
                  type: array
                  items:
                    type: object
                    properties:
                      attestations:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              description: Name of the attestation. These can then be referenced at the CIP level policy.
                              type: string
                            policy:
                              type: object
                              properties:
                                configMapRef:
                                  type: object
                                  properties:
                                    name:
                                      description: Name is unique within a namespace to reference a configmap resource.
                                      type: string
                                    namespace:
                                      description: Namespace defines the space within which the configmap name must be unique.
                                      type: string
                                data:
                                  type: string
                                type:
                                  description: Which kind of policy this is, currently only rego or cue are supported. Furthermore, only cue is tested :)
                                  type: string
                                url:
                                  type: string
                            predicateType:
                              description: Which predicate type to verify. Matches cosign verify-attestation options.
                              type: string
                      ctlog:
                        type: object
                        properties:
                          url:
                            type: string
                      key:
                        type: object
                        properties:
                          data:
                            description: Data contains the inline public key
                            type: string
                          kms:
                            description: KMS contains the KMS url of the public key
                            type: string
                          secretRef:
                            type: object
                            properties:
                              name:
                                description: Name is unique within a namespace to reference a secret resource.
                                type: string
                              namespace:
                                description: Namespace defines the space within which the secret name must be unique.
                                type: string
                      keyless:
                        type: object
                        properties:
                          ca-cert:
                            type: object
                            properties:
                              data:
                                description: Data contains the inline public key
                                type: string
                              kms:
                                description: KMS contains the KMS url of the public key
                                type: string
                              secretRef:
                                type: object
                                properties:
                                  name:
                                    description: Name is unique within a namespace to reference a secret resource.
                                    type: string
                                  namespace:
                                    description: Namespace defines the space within which the secret name must be unique.
                                    type: string
                          identities:
                            type: array
                            items:
                              type: object
                              properties:
                                issuer:
                                  type: string
                                subject:
                                  type: string
                          url:
                            type: string
                      name:
                        description: Name is the name for this authority. Used by the CIP Policy validator to be able to reference matching signature or attestation verifications. If not specified, the name will be authority-<index in array>
                        type: string
                      source:
                        type: array
                        items:
                          type: object
                          properties:
                            oci:
                              type: string
                            signaturePullSecrets:
                              description: SignaturePullSecrets is an optional list of references to secrets in the same namespace as the deploying resource for pulling any of the signatures used by this Source.
                              type: array
                              items:
                                type: object
                                properties:
                                  name:
                                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      glob:
                        type: string
                      regex:
                        type: string  
                policy:
                  description: Policy is an optional policy that can be applied against all the successfully validated Authorities. If no authorities pass, this does not even get evaluated, as the Policy is considered failed.
                  type: object
                  properties:
                    configMapRef:
                      type: object
                      properties:
                        name:
                          description: Name is unique within a namespace to reference a configmap resource.
                          type: string
                        namespace:
                          description: Namespace defines the space within which the configmap name must be unique.
                          type: string
                    data:
                      type: string
                    type:
                      description: Which kind of policy this is, currently only rego or cue are supported. Furthermore, only cue is tested :)
                      type: string
                    url:
                      type: string
---
# Source: cosigned/templates/policy-webhook/clusterrole_policy_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cosigned-policy-webhook
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # Allow the reconciliation of exactly our validating webhook.
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["list", "watch"]

  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "update", "delete"]
    resourceNames:
    - "cosigned.sigstore.dev"
    - "defaulting.clusterimagepolicy.sigstore.dev"
    - "validating.clusterimagepolicy.sigstore.dev"

  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations/finalizers", "mutatingwebhookconfigurations/finalizers"]
    verbs: ["update"]
    resourceNames:
    - "cosigned.sigstore.dev"
    - "defaulting.clusterimagepolicy.sigstore.dev"
    - "validating.clusterimagepolicy.sigstore.dev"

  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
    # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
    # which requires we can Get the system namespace.
    resourceNames: [ "cosigned-0.1.23.tgz" ]

  - apiGroups: [""]
    resources: ["namespaces/finalizers"]
    verbs: ["update"]
    # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
    # which requires we can Get the system namespace.
    resourceNames: [ "cosigned-0.1.23.tgz" ]

  # This is needed by k8schain to support fetching pull secrets attached to pod specs
  # or their service accounts.  If pull secrets aren't used, the "secrets" below can
  # be safely dropped, but the logic will fetch the service account to check for pull
  # secrets.
  - apiGroups: [""]
    resources: ["serviceaccounts", "secrets"]
    verbs: ["get"]

  # Allow reconciliation of the ClusterImagePolic CRDs.
  - apiGroups: ["cosigned.sigstore.dev"]
    resources: ["clusterimagepolicies"]
    verbs: ["get", "list", "update", "watch", "patch"]
---
# Source: cosigned/templates/webhook/clusterrole_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cosigned-webhook
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
  # Allow the reconciliation of exactly our validating webhook.
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["list", "watch"]

  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "update", "delete"]
    resourceNames: ["cosigned.sigstore.dev"]

  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
    # The webhook configured the namespace as the OwnerRef on various cluster-scoped resources,
    # which requires we can Get the system namespace.
    resourceNames: [ "cosigned-0.1.23.tgz" ]

  - apiGroups: [""]
    resources: ["namespaces/finalizers"]
    verbs: ["update"]
    resourceNames: [ "cosigned-0.1.23.tgz" ]

  # This is needed by k8schain to support fetching pull secrets attached to pod specs
  # or their service accounts.  If pull secrets aren't used, the "secrets" below can
  # be safely dropped, but the logic will fetch the service account to check for pull
  # secrets.
  - apiGroups: [""]
    resources: ["serviceaccounts", "secrets"]
    verbs: ["get"]
---
# Source: cosigned/templates/policy-webhook/clusterrolebindings_policy_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cosigned-policy-webhook
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cosigned-policy-webhook
subjects:
- kind: ServiceAccount
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
---
# Source: cosigned/templates/webhook/clusterrolebindings_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cosigned-webhook
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cosigned-webhook
subjects:
- kind: ServiceAccount
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
---
# Source: cosigned/templates/policy-webhook/role_policy_webhook.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
rules:
  # Needed to watch and load configuration and secret data.
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "update", "watch"]

  # Needed for leader election
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]

  # This is needed to create / patch ConfigMap that is created by the reconciler
  # to consolidate various CIP configuration into a policy ConfigMap.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["config-image-policies"]
    verbs: ["get", "list", "create", "update", "patch", "watch"]
---
# Source: cosigned/templates/webhook/role_webhook.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
rules:
  # Needed to watch and load configuration and secret data.
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "update", "watch"]

  # Needed for leader election
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
---
# Source: cosigned/templates/policy-webhook/rolebinding_policy_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
subjects:
- kind: ServiceAccount
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
roleRef:
  kind: Role
  name: my-release-cosigned-policy-webhook
  apiGroup: rbac.authorization.k8s.io
---
# Source: cosigned/templates/webhook/rolebinding_webhook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
subjects:
- kind: ServiceAccount
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
roleRef:
  kind: Role
  name: my-release-cosigned-webhook
  apiGroup: rbac.authorization.k8s.io
---
# Source: cosigned/templates/policy-webhook/service_policy_webhook.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
  name: policy-webhook
  namespace: cosigned-0.1.23.tgz
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    control-plane: my-release-cosigned-policy-webhook
---
# Source: cosigned/templates/policy-webhook/service_policy_webhook.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
  name: my-release-cosigned-policy-webhook-metrics
  namespace: cosigned-0.1.23.tgz
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: metrics
  selector:
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    control-plane: my-release-cosigned-policy-webhook
---
# Source: cosigned/templates/webhook/service_webhook.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: webhook
  namespace: cosigned-0.1.23.tgz
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    control-plane: my-release-cosigned-webhook
---
# Source: cosigned/templates/webhook/service_webhook.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: my-release-cosigned-webhook-metrics
  namespace: cosigned-0.1.23.tgz
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 9090
    protocol: TCP
    targetPort: metrics
  selector:
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    control-plane: my-release-cosigned-webhook
---
# Source: cosigned/templates/policy-webhook/deployment_policy_webhook.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cosigned-policy-webhook
  namespace: cosigned-0.1.23.tgz
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-policy-webhook
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cosigned
      app.kubernetes.io/instance: my-release
      control-plane: my-release-cosigned-policy-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cosigned
        app.kubernetes.io/instance: my-release
        control-plane: my-release-cosigned-policy-webhook
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      serviceAccountName: my-release-cosigned-policy-webhook
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  control-plane: my-release-cosigned-policy-webhook
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - name: policy-webhook
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: "gcr.io/projectsigstore/policy-webhook@sha256:82940e8c3e0d3d5dd92b4779f4378e664f91b790db0d799b03535648eddc141d"
        imagePullPolicy: "IfNotPresent"
        args:
        - -mutating-webhook-name=defaulting.clusterimagepolicy.sigstore.dev
        - -validating-webhook-name=validating.clusterimagepolicy.sigstore.dev
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: my-release-cosigned-policy-webhook-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: my-release-cosigned-policy-webhook-observability
        - name: METRICS_DOMAIN
          value: sigstore.dev/cosigned
        - name: WEBHOOK_NAME
          value: policy-webhook
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        volumeMounts:
          # Failing to provide a writable $HOME can cause TUF client initialization to panic
          - mountPath: /home/nonroot
            name: writable-home-dir
        readinessProbe: &probe
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "policy-webhook"
        livenessProbe: *probe

      # Our webhook should gracefully terminate by lame ducking first, set this to a sufficiently
      # high value that we respect whatever value it has configured for the lame duck grace period.
      terminationGracePeriodSeconds: 300
      volumes:
      - emptyDir: {}
        name: writable-home-dir
---
# Source: cosigned/templates/webhook/deployment_webhook.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: cosigned-0.1.23
    app.kubernetes.io/name: cosigned
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.8.0"
    app.kubernetes.io/managed-by: Helm
    control-plane: my-release-cosigned-webhook
  name: my-release-cosigned-webhook
  namespace: cosigned-0.1.23.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cosigned
      app.kubernetes.io/instance: my-release
      control-plane: my-release-cosigned-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cosigned
        app.kubernetes.io/instance: my-release
        control-plane: my-release-cosigned-webhook
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      serviceAccountName: my-release-cosigned-webhook
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  control-plane: my-release-cosigned-webhook
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - name: cosigned-webhook
        image: "gcr.io/projectsigstore/cosigned@sha256:784518ff3ee755ce42e174e61036094af771c43bdc76b65a8f0e52481ed450ac"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: my-release-cosigned-webhook-logging
        - name: CONFIG_OBSERVABILITY_NAME
          value: my-release-cosigned-webhook-observability
        - name: METRICS_DOMAIN
          value: sigstore.dev/cosigned
        - name: WEBHOOK_NAME
          value: webhook
        args:
        - -webhook-name=cosigned.sigstore.dev
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 1
          httpGet:
            port: 8443
            scheme: HTTPS
            path: /healthz
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 1
          httpGet:
            port: 8443
            scheme: HTTPS
            path: /readyz
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
          runAsUser: 1000
---
# Source: cosigned/templates/policy-webhook/clusterrole_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/clusterrolebindings_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/configmap-clusterimagepolicy.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/configmap.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/deployment_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/policy_webhook_configurations.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/role_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/rolebinding_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/sa_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/secret_certs_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/service_policy_webhook.yaml
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# Source: cosigned/templates/policy-webhook/policy_webhook_configurations.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.clusterimagepolicy.sigstore.dev
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: policy-webhook
        namespace: cosigned-0.1.23.tgz
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: defaulting.clusterimagepolicy.sigstore.dev
    sideEffects: None
---
# Source: cosigned/templates/webhook/webhook_mutating.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: cosigned.sigstore.dev
webhooks:
- name: cosigned.sigstore.dev
  namespaceSelector:
    # The webhook should only apply to things that opt-in
    matchExpressions:
    - key: cosigned.sigstore.dev/include
      operator: In
      values: ["true"]
  admissionReviewVersions: [v1]
  clientConfig:
    service:
      name: webhook
      namespace: cosigned-0.1.23.tgz
  failurePolicy: Fail
  sideEffects: None
---
# Source: cosigned/templates/policy-webhook/policy_webhook_configurations.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: validating.clusterimagepolicy.sigstore.dev
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: policy-webhook
        namespace: cosigned-0.1.23.tgz
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: defaulting.clusterimagepolicy.sigstore.dev
    sideEffects: None
---
# Source: cosigned/templates/webhook/webhook_validating.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: cosigned.sigstore.dev
webhooks:
- name: cosigned.sigstore.dev
  namespaceSelector:
    # The webhook should only apply to things that opt-in
    matchExpressions:
    - key: cosigned.sigstore.dev/include
      operator: In
      values: ["true"]
  admissionReviewVersions: [v1]
  clientConfig:
    service:
      name: webhook
      namespace: cosigned-0.1.23.tgz
  failurePolicy: Fail
  sideEffects: None
