---
# Source: fpga-operator/charts/fpga-discovery/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fpga-discovery
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: fpga-operator/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
---
# Source: fpga-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
stringData:
type: Opaque
---
# Source: fpga-operator/charts/fpga-discovery/templates/nfd-worker-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fpga-discovery-worker-conf
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
data:
  nfd-worker.conf: |-
    core:
      sources:
      - custom
    sources:
      custom:
      - matchOn:
        - pciId:
            device:
            - "0070"
            - "0071"
            vendor:
            - 12ba
        - pciId:
            device:
            - 09c4
            - 0b2b
            vendor:
            - "8086"
        - pciId:
            vendor:
            - 10ee
        - pciId:
            device:
            - "1042"
            - f010
            vendor:
            - 1d0f
        name: inaccel/fpga
        value: enabled
---
# Source: fpga-operator/charts/fpga-discovery/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fpga-discovery
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  # when using command line flag --resource-labels to create extended resources
  # you will need to uncomment "- nodes/status"
  # - nodes/status
  verbs:
  - get
  - patch
  - update
  - list
- apiGroups:
  - nfd.k8s-sigs.io
  resources:
  - nodefeaturerules
  verbs:
  - get
  - list
  - watch
---
# Source: fpga-operator/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["patch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["get", "update"]
---
# Source: fpga-operator/charts/fpga-discovery/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fpga-discovery
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fpga-discovery
subjects:
- kind: ServiceAccount
  name: fpga-discovery
  namespace: fpga-operator-2.8.2.tgz
---
# Source: fpga-operator/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fpga-operator
subjects:
- kind: ServiceAccount
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
---
# Source: fpga-operator/charts/fpga-discovery/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fpga-discovery-master
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
    role: master
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
---
# Source: fpga-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
spec:
  ports:
  - port: 443
  publishNotReadyAddresses: true
  selector:
    kind: Deployment
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
---
# Source: fpga-operator/charts/fpga-discovery/templates/worker.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name:  fpga-discovery-worker
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
    role: worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fpga-discovery
      app.kubernetes.io/instance: my-release
      role: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fpga-discovery
        app.kubernetes.io/instance: my-release
        role: worker
      annotations:
        {}
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      securityContext:
        {}
      containers:
      - name: worker
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
        image: "k8s.gcr.io/nfd/node-feature-discovery:v0.10.0-minimal"
        imagePullPolicy: IfNotPresent
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
            {}
        command:
        - "nfd-worker"
        args:
        - "--server=fpga-discovery-master:8080"
        volumeMounts:
        - name: host-boot
          mountPath: "/host-boot"
          readOnly: true
        - name: host-os-release
          mountPath: "/host-etc/os-release"
          readOnly: true
        - name: host-sys
          mountPath: "/host-sys"
          readOnly: true
        - name: host-usr-lib
          mountPath: "/host-usr/lib"
          readOnly: true
        - name: source-d
          mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
          readOnly: true
        - name: features-d
          mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
          readOnly: true
        - name: nfd-worker-conf
          mountPath: "/etc/kubernetes/node-feature-discovery"
          readOnly: true
      volumes:
        - name: host-boot
          hostPath:
            path: "/boot"
        - name: host-os-release
          hostPath:
            path: "/etc/os-release"
        - name: host-sys
          hostPath:
            path: "/sys"
        - name: host-usr-lib
          hostPath:
            path: "/usr/lib"
        - name: source-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/source.d/"
        - name: features-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/features.d/"
        - name: nfd-worker-conf
          configMap:
            name: fpga-discovery-worker-conf
            items:
              - key: nfd-worker.conf
                path: nfd-worker.conf
---
# Source: fpga-operator/templates/daemon-set.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
spec:
  selector:
    matchLabels:
      kind: DaemonSet
      app.kubernetes.io/name: fpga-operator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: coral
      labels:
        kind: DaemonSet
        helm.sh/chart: fpga-operator-2.8.2
        app.kubernetes.io/name: fpga-operator
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - env:
        - name: LOG_LEVEL
          value: info
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: inaccel/coral:2.1
        imagePullPolicy: Always
        name: coral
        ports:
        - containerPort: 55677
        readinessProbe:
          exec:
            command:
            - get
            - coral
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/localtime
          name: localtime
          readOnly: true
        - mountPath: /sys
          name: sys
        - mountPath: /var/lib/inaccel
          mountPropagation: HostToContainer
          name: state-root
        - mountPath: /var/lib/kubelet/plugins_registry
          name: kubelet
          subPath: plugins_registry
        - mountPath: /var/opt/inaccel/runtimes
          name: data-root
          readOnly: true
          subPath: runtimes
      - args:
        - --debug=false
        env:
        - name: DOCKER
          value: disabled
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: inaccel/daemon:latest
        name: daemon
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /var/lib/inaccel
          mountPropagation: Bidirectional
          name: state-root
        - mountPath: /var/lib/kubelet/plugins_registry
          name: kubelet
          subPath: plugins_registry
        - mountPath: /var/lib/kubelet
          mountPropagation: Bidirectional
          name: kubelet
      - image: inaccel/monitor:2.1
        imagePullPolicy: Always
        name: monitor
        ports:
        - containerPort: 19999
      hostAliases:
      - hostnames:
        - coral
        - daemon
        - monitor
        ip: 127.0.0.1
      hostPID: true
      initContainers:
      - env:
        - name: DRIVER_SYSROOT_DIR
          value: /host
        image: inaccel/driver:latest
        name: driver
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host
          name: host
      - env:
        - name: MKRT_CONFIG_PATH
          value: /etc/inaccel/runtimes
        - name: MKRT_SYSROOT_DIR
          value: /host
        image: inaccel/mkrt:latest
        name: mkrt
        volumeMounts:
        - mountPath: /host
          name: host
          readOnly: true
        - mountPath: /var/opt/inaccel/runtimes
          name: data-root
          subPath: runtimes
      nodeSelector:
        inaccel/fpga: enabled
      priorityClassName: system-node-critical
      serviceAccountName: fpga-operator
      volumes:
      - emptyDir: {}
        name: data-root
      - hostPath:
          path: /
        name: host
      - hostPath:
          path: /var/lib/kubelet
        name: kubelet
      - hostPath:
          path: /etc/localtime
        name: localtime
      - hostPath:
          path: /var/lib/inaccel
          type: DirectoryOrCreate
        name: state-root
      - hostPath:
          path: /sys
        name: sys
---
# Source: fpga-operator/charts/fpga-discovery/templates/master.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  fpga-discovery-master
  labels:
    helm.sh/chart: fpga-discovery-0.10.0
    app.kubernetes.io/name: fpga-discovery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.10.0"
    app.kubernetes.io/managed-by: Helm
    role: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fpga-discovery
      app.kubernetes.io/instance: my-release
      role: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fpga-discovery
        app.kubernetes.io/instance: my-release
        role: master
      annotations:
        {}
    spec:
      serviceAccountName: fpga-discovery
      securityContext:
        {}
      containers:
        - name: master
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          image: "k8s.gcr.io/nfd/node-feature-discovery:v0.10.0-minimal"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - "/usr/bin/grpc_health_probe"
              - "-addr=:8080"
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - "/usr/bin/grpc_health_probe"
              - "-addr=:8080"
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 10
          ports:
          - containerPort: 8080
            name: grpc
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          command:
            - "nfd-master"
          resources:
            {}
          args:
            - "--instance=fpga-discovery"
            - "--extra-label-ns=inaccel"
            ## By default, disable NodeFeatureRules controller for other than the default instances
            - "-featurerules-controller=false"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: In
                values:
                - ""
            weight: 1
          - preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: In
                values:
                - ""
            weight: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Equal
          value: ""
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
          value: ""
---
# Source: fpga-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
  namespace: fpga-operator-2.8.2.tgz
spec:
  selector:
    matchLabels:
      kind: Deployment
      app.kubernetes.io/name: fpga-operator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: reef
      labels:
        kind: Deployment
        helm.sh/chart: fpga-operator-2.8.2
        app.kubernetes.io/name: fpga-operator
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "2.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - args:
        - --debug=false
        image: inaccel/reef:latest
        name: reef
        volumeMounts:
        - mountPath: /etc/inaccel
          name: config-root
          readOnly: true
      hostAliases:
      - hostnames:
        - reef
        ip: 127.0.0.1
      initContainers:
      - args:
        - init
        env:
        - name: MUTATING_WEBHOOK_CONFIGURATION_NAME
          value: fpga-operator
        image: inaccel/reef:latest
        name: reef-init
        volumeMounts:
        - mountPath: /etc/inaccel
          name: config-root
      priorityClassName: system-cluster-critical
      serviceAccountName: fpga-operator
      volumes:
      - emptyDir: {}
        name: config-root
---
# Source: fpga-operator/templates/csi-driver.yaml
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: inaccel
spec:
  attachRequired: false
  volumeLifecycleModes:
  - Ephemeral
---
# Source: fpga-operator/templates/mutating-webhook-configuration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: fpga-operator-2.8.2
    app.kubernetes.io/name: fpga-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.1"
    app.kubernetes.io/managed-by: Helm
  name: fpga-operator
webhooks:
- admissionReviewVersions: ["v1"]
  clientConfig:
    service:
      name: fpga-operator
      namespace: fpga-operator-2.8.2.tgz
  name: reef.inaccel.com
  objectSelector:
    matchLabels:
      inaccel/fpga: enabled
  sideEffects: None
