---
# Source: apisix/charts/etcd/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-etcd
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 2379
        - port: 2380
---
# Source: apisix/templates/control-plane/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-control-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9180
        - port: 9280
        - port: 9090
        - port: 9099
---
# Source: apisix/templates/dashboard/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: apisix/templates/data-plane/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-data-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9080
        - port: 9443
        - port: 9090
        - port: 9099
---
# Source: apisix/templates/ingress-controller/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: apisix/charts/etcd/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-etcd
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  minAvailable: 51%
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
---
# Source: apisix/templates/control-plane/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-control-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
---
# Source: apisix/templates/dashboard/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
---
# Source: apisix/templates/data-plane/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-data-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
---
# Source: apisix/templates/ingress-controller/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
---
# Source: apisix/charts/etcd/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-etcd
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
---
# Source: apisix/templates/control-plane/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-control-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/dashboard/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/data-plane/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-data-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/templates/ingress-controller/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
automountServiceAccountToken: false
---
# Source: apisix/charts/etcd/templates/token-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-etcd-jwt-token
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
type: Opaque
data:
  jwt-token.pem: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBNVFuQ3E0OVlUa0h6aVY1YzU2Mmpvd1ZQc3NJZFhjNlFOV2ZBMDlySjhzVlhkOWFzCjM3eGVzOFpabXhzRTVpd21jZFE3SzdyY3dvaVBCTU51aXFpbTJnU3JiNjlyeWpEUndsMFFpSVJ6MnpGT1Y3S04KZWNSTGpyOGdpUTdyTEpMTkU4dUpRNWFaMWE4RDE4SlFiaURhSEpXajFDQnZhVUE5TjdXRjVRR2NQSURwQ0dTQQpHZHhVRkVhZEw4Mmg1M1NIWlNkYUM3ME9VRTFJNVRneUoyZEc3d3VESUd4dCtHeDN6Q05pd2thYUFMSnkvYTBuClRXT0laaWNjclhMWG5MTGdkZk92cSs0SnMwS1VJWFg3aHc4ZVIwT3AyYW1iV2NOcmZWZE8yZjVZTjBqZ09lWFEKOHp2bzBGTmpYcTJISWlkL0lzUmFUcUhONWh0YnRzck01WSsrWEE5Z3kzb2NTeU85N2hFRE8ycEJqUFJCNFJjUgpFd3ExT1lObThuNkFnUlR0cFpVd3YwYWc2ZjRMdmd6cnYzQUJqSXR3ZVQyNGZGSUpBOSt2Wm9pRHBhdm1tdzM5CmVJazNSWktrRjgvRXdFem1YK1VyY2NzK1E3LzBVYlpaZENQanNiaWxFQnFsTTZLcldEYTg0dlM0V05GQ2FGT3oKTjZpcEpzMTdyZlZpalVJRWJGbm92U2tDMWhPZXpXRFQ5Tjl4Qjh0cXpybFVWY0NPUllJZDR2ZUZXUkpJeTQ1cQpReWFIeVg3NkY1QjZNUjRqZTQ3VDdMN2hCRnZkd0FkZm5DRFFPTGpHb0lJNGtsUmdjUEJQSmNXYzYvTzF3ZWFsClMraFhjUGRFRUpiMkRhSVN6akRoZngvWUJrTStrWE5reXpUQWI3U2tLWDR5NE5pVDQ5YXNCVHplVkhrQ0F3RUEKQVFLQ0FnQXhEbThndWRvcklOc2R3QlZjRmdmbmdkcTVLZlNLUkJVRkswelUwNWJQcGM3L1B2N1dDUTJycWI5RgpobnI5SmRXeUtjZm1yT1pkMEV2NXREWTRBcm1DRnQvMVV2aGVYU2lBWGRpTnRQanZxTmJqMTcyUHFDaWEwWHNSCmdCMkU5WWh4UmZZSGdQbEFHSFZWUUN4aitpdGRWZnU2RXB4cVNiVVMrcEZNSkpVbkxHRTlSL0ZjR0tIMW1jNVAKRDljdXNQblRBNk80d2V5UDdJM0JjdERqT2E2cXdxZDZTVjhnaDNMOVNWTDgwNHhtdTlIL1haZitibVFucFJieQpXNWVzMjI5U05EaWJOYWZrT2sxcUFWQTNkRmlDNFE0L0xhRzFqeksxclA2Wm1HMmlvYnhOQ2xrL3o4UWs0c2QwCjN1d0R0N3YyWVdJS1Y0TzNWb0xGV3hpWnpyanhyU2xNV2Q1b3oxY295aENSOUhXMFJZL0lSNG9VazJpSDVaSDYKQm9FRGRXRVBmV1p3MFZnL2tDWU5VT0xNQ095ZWgwMExoQmN1cjBpUGg3VWx2NnJrcW9sa2UvV3lVeDhRS2tXVgplNFVCdmRja1pwTEFnVWVFRU9SeFBScEwwYlBkTGZVWjcwT21SRWZoV1BYcjhCM1ZTZzBRV3ZzL2Fzai9QNFpOCmNzcnJua1JKTWlFWHpSN3BSZWI1T21SRloyOVdzQ0s5dytuZFY3QkFqTkRMcVVvRGdjczk0Vk11cjNsSWRTNTQKYW9NWTRNK2MrUEE0bU9rNHZyc1hycjlvRjRhSnlJUmhoZitkbjdBcjRKaE95dW1oK2NtdzlMWXJaQnlFREg5aQpNbU55VjdNRFk3NExzQVBKajhmclBkOHZDMEpMSVljUnVPWWJrNjJKZldxVGZxTmpBUUtDQVFFQTlPMDhnWjEzClFyWElvM21vakpmUm5vaTVsc2d3RW1uN21nV2liSGVneGVCdW8wQS84bEl6MFVVaCtOYmZUc1o0djdyMncxeW8Kam5IZGJoMDczb3l4eTVKd212RmJwU1NoT1VZSmFMcXcxOFZmcjRWcVNvbU1ON1NOM0JJNDFlMHg2ckhHMlpYdQo3ei9BOXRoY21yaG96UkNZUU9MV0FSRkExM2pCZzh6MlNQTnpPamc0VkpUMlkyYkJMUGNOUUtNTERZNlk1emZlClZwMjVESHdUMWRXamcyQVYrME5neGkxU2gra1lQWmtpdVI3S0RnODEzdEhXOHQ3VkVJOGIzRWFwQlhTNHdKUXUKNWZXTWJGYUxUTVRNUk1mRXNjUjFrbExxazhYVXVta2NsR2FXTlh3Q1YvbUVEcFF1QWZYQ3dmRGZlTzd5bC8wUQp0ZlZFYmtoYlpRblcyUUtDQVFFQTcyU2hmemhtZFdCWEtGSEk1ekJ3WDdLODB2TGxCWlpOU0xXOTJmMTEwQktVCkwySUZuYlpXdjcyZzI1a1AvWGtxOVhaa21qbWl6bGlaVVIwemZvZUltR3JNVmwvb3QzbWJGQTBhdXFycEZxM08KNnpOQ1dzb3RHaDhuYTJjVFpxQXpreThXeEJxUTRWYno1aWpBMGdHOFZWaFhXOG9lWk9RbUV4Y1lSRWFQSUp0agpMNE94Ty9nRUNnUVdLLzVSMHA5Q3NTMWpJUWdiMVVzRlNDUXkyaytIUFF1ZkwrSks5T0Zad2lSMjBQYkZIakZ2CkZ4UVhyWFFYZ2Z2d0JORzUwNWxpeDh3MGtOOWJjQkFLa0MvV2VDNFBtNy8yVjRiNnFQYXVCTDNIWnFJZXlsb0EKbVdGTm5nOWtrOS80U0lUcmFBSU9WS2MwRjEwSWd1UzAxbk9XSDlvbW9RS0NBUUE0NVVOQStNdFRlOWIzNHJMOAp0ZWZENUE3NHI5ZzY3dE83bThOM1h2TENCTGl1dzZZWExIRk5FN29vakFHajB3Y0p3dXkveFM2Q3FJQy9xNXJVCnYrb3RWLzlBZndEREJCZFBycTFRM3MxbDBqdkFFa1gydXEwUDQ2bHdqZXNXQnR1cG9WS0lDUVJRSDRjNzBGYnkKdWhQZVR4U1BQaUpvYlJHYS9EbzMyOHo2ZFZNM0d3ZzYzYisrcDRnSVlmdDZJR1hZNkY4c2x4WFhHUng3Z2ZjNQpuVDgycllOdHN1RXdLQ2NiMjFIK1BTeUx4Rk03b056cXZlUW8xd3EzcGdiYXpLOUd6UzU5emU1M0RPdHAzMURNCnJJcW5ENkRwaXJHbEpBM0o5aExNbXM1QXl2UHB5THppb3R2Q1p6bW95dVpMRnlGU2ZtOXNUeVVxbjZjZDEwRWoKMzMxQkFvSUJBUURya1pEQnlkUTQ2SWFickc4UDRNQ1R5eVM0U0VCSmtTK1h2dytGTlQ3N2MyelNlNWlmSzFDTgorYUlTdGJuZ2FaMTJVZnlKTHZJZ0wxc2ZVS2JkZWExV25yRll4YVFROTk4OGlmQ2xnNDArdmVZQjJEMFJiaVdYCnNOUnZnY3k3amlWeVRrSU8wejJDSUxoODRkbHNUanp2bHJEUUtFSmtjWVZ0LzZubmRhOWVITW9yZFdHd2EwdysKTnV0Q2UwNDAvbmI0Tm50M2c2MHY1RlRjT3BLMzlNNVZxZHdKbUpxK0FncjdXanA1UW51U1RIN09yUHpudUhkeApkMk1tdXVJcmNLS2RqVHFrM01YenJqVlcwVnd3Z3RMbEpxN1lUb0RXUjNmU1BwVzdUd2tSZ2lOWXkwRS9xbElFCm1iNk9UZzRBR1JYVkEzdmxDYTFZY0luckJXN1RCUzVCQW9JQkFBc0J3b0FmY3kzZjYzOHFTa1lyOE51ejdIUnIKY3BHeGZuajByd2tEQkNSbk5xUkxmT3JHTWxXc29ka3EzdHk0NGhjekdyNHdLMFZSZjBLQVh5SFg1WVNrUXNkNQpkeXU2ZXNuUERjcTRmNm43WHFtWjltbHdhK2tZWDlYYnl6Zmt6TGFQd3R2QnRjY1FmRWFadFF3Y1F4c2FQMkFuCkdEVUFLSzdMQjZSbnlPTGw4cVJ4Y21YTzEzTG91WXBEUS9YanVwV3N4NldobnB5OFB6WkRiMi9CVjRlWHNzYWsKRkRXMVlNOC9IVGxVMUNCbFNoa0tGYUZJdkd0K1J6NDNRMkxWZVRTRlJjbkpTV1FXT1JLVHB2aDZlS0ErdVJGZgorckJwNVNjVW9UcTlzQlp3NEVOaC9sQ01QekI1YjQ5Nm1kd1lCTG82aUJrNXFjd1NuSGprRFZ6T0NNOD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
---
# Source: apisix/templates/control-plane/api-token-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-control-plane-api-token
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
type: Opaque
data:
  admin-token: "YThpMVgyUFpiUDZQbGRPZGRXTGVjclNVN0JwcUZnb24="
  viewer-token: "NFNTRHZBVnN4dUVWVkxmWllnOXkxNDlsMFN6OTB2ZzM="
---
# Source: apisix/templates/dashboard/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
type: Opaque
data:
  password: "Wk5DTk1qbm1Xaw=="
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-control-plane-tls
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVDRENDQXZDZ0F3SUJBZ0lSQU5JUnVhZjR0U2hvejZzVXdSYSt4Zmd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0tqRW9NQ1lHQTFVRUF4TWZiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RZMjl1ZEhKdmJDMXdiR0Z1ClpUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUt0T05JcjRxOUZhYWVZcnN5VTkKS3M3RVlHOUN2elFwU1B4cy9ESWNKQk8wbmRYRnpMZUJKMzI4UTdJZGY0VTM1aGJvdEtZZk9FRlNTblVHZVJJWQpGL1Z4ZVdxVTBnRlpaelVJTGlPZzRucjJValgyMjRvdjJMREZPbFhjRHlFdU8xNmQ5VHJCMDk5RDA0UVRrekl4CjF1b3F5Y2w4ZzlqU2ZqRnhlNGR0ZGtxbWlQaWVwY2xLVlJyc1J4K08wUG0xRXBvQ0ZHVCtNQnZlRnREbWFXc20KaFB6UEpqVTdzaFZ4alQwb2V5TTVkOGtsZjY2SE83VFdkcUR4bXJJbWhZczB0ZTViNy9PRGlaTUhBREFBVHpHcgphc0dQbkRTRDBsRnRITzVXSUUySnkxUG5mQnk2SG5TN3A3azJiQ0s3L1VoYUloN1AyREEwdGlOVUlkRmN4bExPClQ2TUNBd0VBQWFPQ0FUMHdnZ0U1TUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUYKQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCU0hEM2d4bkRrRApmK0twTXBrNXJKekp3TFlqeFRDQjJBWURWUjBSQklIUU1JSE5naDl0ZVMxeVpXeGxZWE5sTFdGd2FYTnBlQzFqCmIyNTBjbTlzTFhCc1lXNWxnakJ0ZVMxeVpXeGxZWE5sTFdGd2FYTnBlQzFqYjI1MGNtOXNMWEJzWVc1bExtRncKYVhOcGVDMHpMakl1TWk1MFozcUNORzE1TFhKbGJHVmhjMlV0WVhCcGMybDRMV052Ym5SeWIyd3RjR3hoYm1VdQpZWEJwYzJsNExUTXVNaTR5TG5SbmVpNXpkbU9DUW0xNUxYSmxiR1ZoYzJVdFlYQnBjMmw0TFdOdmJuUnliMnd0CmNHeGhibVV1WVhCcGMybDRMVE11TWk0eUxuUm5laTV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUcKOXcwQkFRc0ZBQU9DQVFFQXJ2VWNnS1cvQXU5YWo4M2VOUUVsdVJKdWsweE9INVpTQVF0WnJiN1dUY05nMktZOQpvbUJjWVE3UTJjTTF5ay9EUnRDYjJQd1VycWRWdyttMmxtcXEzWkxsaExuOURSamZwL28xdkYxNm5XOGU3bXUvClNyZkZRUDhTeC9sUWZtcHJXOFNyY0w5bWdlcnFkaVpUOVM3VHJJTTB3WXRTY2t6eG9iMG54ckNwUmFqT3VpTkcKd3c2ZnBTRTB2cHhubXdBNHpGTVRncGtEQnpTTThwbW15TTJhU0lYbnFDK1c0SEw1NzczREhOd0dYYndoWVNHRApjdk5kOTF1ZmozOTdJV2ljd0NBdVUweFV0SEFyU09KT2gwOHM3bHk5TDV2amFVYTBjZTRiN0VKaGdTUVhHNTJiClJnakdYVERSS2hZYTNNTXp3YUxES1g2Q09VMEluR21aSDRickF3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcTA0MGl2aXIwVnBwNWl1ekpUMHF6c1JnYjBLL05DbEkvR3o4TWh3a0U3U2QxY1hNCnQ0RW5mYnhEc2gxL2hUZm1GdWkwcGg4NFFWSktkUVo1RWhnWDlYRjVhcFRTQVZsbk5RZ3VJNkRpZXZaU05mYmIKaWkvWXNNVTZWZHdQSVM0N1hwMzFPc0hUMzBQVGhCT1RNakhXNmlySnlYeUQyTkorTVhGN2gyMTJTcWFJK0o2bAp5VXBWR3V4SEg0N1ErYlVTbWdJVVpQNHdHOTRXME9acGF5YUUvTThtTlR1eUZYR05QU2g3SXpsM3lTVi9yb2M3CnROWjJvUEdhc2lhRml6UzE3bHZ2ODRPSmt3Y0FNQUJQTWF0cXdZK2NOSVBTVVcwYzdsWWdUWW5MVStkOEhMb2UKZEx1bnVUWnNJcnY5U0ZvaUhzL1lNRFMySTFRaDBWekdVczVQb3dJREFRQUJBb0lCQUVnclNHT0w1QWJ0Q2xSWAo4TDh0aDgxWVdqQkZkSHdyTUg1NEE3K3dyMXBGNjREV05pclJGS3dhRm9NQmZtbkhaUDRkeDQxODlady9hUExvCmFUVkFSVWU0S0tqSVRia1h5eTFDWnYzSGwrS3B4M1RJclRFSWUwZnRyMmZncjljUXZSNWRlYVRwWjdOVnhkU00KMHFTQTdzUDBodEtGeko0Wi8rUWdwU1FtNzREKysxMEpORDdwMUJuRDZCWE9meWFHS3ZOYmdIQ3FGaGVPUm9sNwp4K1hKTmZiRUhEMysxUGs0NEZIRTNJRS9jUCtmZ0VLZ29OUkhsL1ZWRDNHWVlSejdsSERRVVA0Z2FvSHdrUFV4CnVwT0FYckRHV0dlWW02WUROak9tTURCYTU3OEl0M0tucjhhck81Q0JrMi8xQmhBV1FEZVVGWnMraHNBTDQ4cFcKeDgvcnhyRUNnWUVBeG5QOEJzaFhnVnRDRUNRd1JOd3RxNmtyS05nM1cyeFUxUS9GcktQZWVCRHVQOVZjaEtBeQp5dWkwTTFtL25KazM4NXpWSUowUUhhUElwaVRYTVUrQzJ6d2tPdUxlVy9BZmNUK2l4eHI3ZVBXdGFQbnlkZU5ICkdrUEZsUDZaZDV4RkRWaWtvbEc5VnNLQ215d3ByZVd4QWRLMC9FYU1xd0VvZWhydGhtWWwwSlVDZ1lFQTNQcncKMCsxZGlkckdzeUwrRXBHSEtua2lQMnhEbi95b1F2WkZwVTVGZ3lQQVBBdjh2d3ZsNW9XVnV6UXlmeC81dG8xZwpRZlBqWXFSSnBDT2NWZkgxRk9ieklpTUNYK01tU003R21xUEhwRmlWL2VwUmlpS3ZXR2ZnYzZqaXR2dmtCTE0zCmh4ZklrdFdiL054MUVPWjhzU0NuVE9PWFgxcmtCV25TOE4xbWVWY0NnWUFjM3JhbFRmUGM3NmUyclcwUU4yKzEKYjFER0NsNVRRSGsrM2FLR01QaW1RdUJHRFFYK2pVZVdXVEFONEZxTnI0U0NQaWlMTEE0eUlhZUk5QWNTTjF6MApBOVhKYzBPaDRGYlNwTTFMWmRON2oxSUEyWXU2TnF3YldBeWdWa0dCTXd5Z21tcW82bmMrN2VFT0xlaUtVY1hrClhBRFVTbmNnVVhUUC9xYmJUSFRuMlFLQmdENHpTRHh1OE1oUDAyUXk4azhwdFdFb0xaS3FsN0pkdk1MMGJSQWwKb3YxUnY5ZG5ER0orSjkwbU5zbzEzQXphWkVDVk5NWDdyMEpodWZUQXJVMm55SE4wdW5VZVk1bTM1MXZSRUNnUQo5NjN6M1d4V1cxTkZoaE9kVVpsY3JVd1NSTkZwM0xSaTVtc21RenorbE5rSDk0c29CTTlvdEgvN3BuazdtMHQvCkZrd0xBb0dCQUtQQWZCZzBIMlFjWmE3N0IxZTFmTHNubDg3NGlScVNHcnBDcXFMUnZpY2hYMkhkdzNhQnk5a2kKTWc3L0QxK1F6clV0OS93U2RxNW9Gck9ZREQ1SDV3ei8vUEkwZ0N1ek1ha2orY1laeXJTWDRnTmpsSExqeUxpTgpsWWl5cmxseUVLWThvRjVuKytzUEV1ZlVaVGZveWpERFhZSWN0WDRUNG5Rd1liV3J6WTJSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpFYTJ2a2l3UjVwRUp0VUlZK0ZiRFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OFlqNkNGdHRCMlp2cDBsR29ZVmVQM1dVNnI3MFZWZUJ4NzdTUFRkajU1L1VZYTcKdHBKYnUzb0JnMDhjOWhHZU0wNTBOU3pyRnQrTGJDWlYrR21OWjhmQ0NyQWxOb2lZZ2NQaldHYVhRRHZRcldxcApZM1VubDRNUGRHTkkxdzV1TFE1cjRVNkZ3R0tPbGFhZis3bGNDSXFHc2ltVFROUFplMThXMFpTYjdFZFZpMldEClU1S2xPc1dHYnM4dDlNZVlQc2NUQkl4azI5REhhQjFNdm9mb2h3ZTN3Mm10KzlQNmhHRkRzM3FYRHdDUmNIWXMKbnJUWnUwSEVLbWtvdDJ0SThoTmxoSDBwT05zKzd3R2ZFZWk0MVd6Y0tTSXB5Wk1QaDNhK1hraGt0T2R3RGpGZQpWVkkwWFZwTk9jMW9ZcXdQamxROVQ1VHpqVXVvREo5MlZmR3NZd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSWNQZURHY09RTi80cWt5bVRtc25NbkF0aVBGTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmsxbUJ6M2NzTHE5U3A2ZklhclA3Y2lwOUlhV1M2aDBwWjgwSWFsTXFUTmQ5QTJnc3dMejFqCm52N0Zid29KUUs0QnhtUjV1Q0IwSTkwV2l0QmdyeVJxMkZFWVpHeE5CSUhMTmVJeVlxK3hpVFdLTHVBNkR0eS8KZG1UYmZxcW1wQVhOK2ZMeUpLZ1BUcE5vRTRKU3h4WTRIVWcrYzVCS3l3MmM1SURrY0hwanJabWdrMGUzRWs2QgorbXI0b2tzSkVKWjFWcTR3Qng4V1BCUDFnZlB6KzMrMDFTaG5Ma0NUZGpsZS9PcHQrWU96cTlNWTg2T3loanZ5ClY5QmZGVTgzN1pZbk1odkxicXI2OTd3VzMxRDkzb1hTTlJac2pab29zemxPQkpidVFxY2d1eW84TjVQdDFXbG8KSUFCWjlCL2JmcnVGUmFyVnFCbE53OTBlQWJLajV4amIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-data-plane-tls
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQrVENDQXVHZ0F3SUJBZ0lSQUxXby9KVmtTL2hFRC9WYWNTSnYvSzh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0p6RWxNQ01HQTFVRUF4TWNiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RaR0YwWVMxd2JHRnVaVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTVAyVXVGYUhYZWczN3dsY2RkZGJXKzYKbkNjZzFwbmhSQUpsQVc5bHhoMThhV3JYUVVmcDFsS2JxalBBOFJYUDRNdjc3TVhxQ1dVcVBkOGVobFBqblppSgpQNm8zYmhieC80Y1MzWDRRSzZoVnpFU29aTkRCanQ0VnAvMlhzZWxoUmpKa3ZtWGZXZ05KK2JJbit2OFFUTHlXClcwVmVESXc5YnRWeGg4NU1xSEZXNzgvSi9nRFVSMDJ1UVRCT0tybFJXRGFNVmVVNWk4T3Foa2IwdVBhQ043WjcKNS82bE41ZTZPQnBwdlFWcDUwY3NzQ1d3ZElIQ3BKeG1WNXhrR1FWZ2pGQ2ZrWThJZEQzMzd1Mjg5SWJWMFZXZApaOVIvMFJmbnQvcWhvemN6Z3NsbDJrU0MwOTBXVEkrU3N2dHFSMzdHMHN6Ym1PektRVnB1S3RJS0RIcEl4NzBDCkF3RUFBYU9DQVRFd2dnRXRNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTSEQzZ3huRGtEZitLcApNcGs1ckp6SndMWWp4VENCekFZRFZSMFJCSUhFTUlIQmdoeHRlUzF5Wld4bFlYTmxMV0Z3YVhOcGVDMWtZWFJoCkxYQnNZVzVsZ2kxdGVTMXlaV3hsWVhObExXRndhWE5wZUMxa1lYUmhMWEJzWVc1bExtRndhWE5wZUMwekxqSXUKTWk1MFozcUNNVzE1TFhKbGJHVmhjMlV0WVhCcGMybDRMV1JoZEdFdGNHeGhibVV1WVhCcGMybDRMVE11TWk0eQpMblJuZWk1emRtT0NQMjE1TFhKbGJHVmhjMlV0WVhCcGMybDRMV1JoZEdFdGNHeGhibVV1WVhCcGMybDRMVE11Ck1pNHlMblJuZWk1emRtTXVZMngxYzNSbGNpNXNiMk5oYkRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQUdLL1UKYkRZaUlHcEl2RDZkTEhDdGpPZ2xpS3J6WVNNUlpNWGd1YTJjQVJ5V2wwalBOSGx5WTkxY2dEdjRySWFWOGszVApQZFlnTE11RXlhZk1UVjR6dmFWZ2VHMTFWeGh2ZlVrR3d0SEVIeHliVXJyRFF2ZzNVRENFNDVFNTZITE5qamZnCjNRemZucVFNOWEwMUIyMUg3WmhPNVBKRTFZNVlNdEJUbjYzSFVtQ2Q2OXkwTDBLWFpjUUQ1anEvTjBZTE0yZUMKQWVFK1pHUkx4ZVpDV1R6YzRpUWtPMDJiWmQ2R2hVc25HcGhBTGJuaTloek5YUmlVS3pzRDZDRTMxNU5sbVpMVwp2ZGlKdzdlNHlrbFU2eUNjUExjeXNKWmk5Q0EvUjVOcis2ajVCZmxhSDgycU44YXVPQkZPdFMvOEJVWkk0cjhFCjlFNDc5WFc2M01LdHRTOHlNdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdy9aUzRWb2RkNkRmdkNWeDExMXRiN3FjSnlEV21lRkVBbVVCYjJYR0hYeHBhdGRCClIrbldVcHVxTThEeEZjL2d5L3ZzeGVvSlpTbzkzeDZHVStPZG1Jay9xamR1RnZIL2h4TGRmaEFycUZYTVJLaGsKME1HTzNoV24vWmV4NldGR01tUytaZDlhQTBuNXNpZjYveEJNdkpaYlJWNE1qRDF1MVhHSHpreW9jVmJ2ejhuKwpBTlJIVGE1Qk1FNHF1VkZZTm94VjVUbUx3NnFHUnZTNDlvSTN0bnZuL3FVM2w3bzRHbW05QldublJ5eXdKYkIwCmdjS2tuR1pYbkdRWkJXQ01VSitSandoMFBmZnU3YnowaHRYUlZaMW4xSC9SRitlMytxR2pOek9DeVdYYVJJTFQKM1JaTWo1S3krMnBIZnNiU3pOdVk3TXBCV200cTBnb01la2pIdlFJREFRQUJBb0lCQUZhdm5ZUkF0KzVXaFFLVwowZUJDWFFuaTAvYmZLTytUWGVGdFN4QTdSa04rNktjeHA1Z25VZjdqQzR5dldqYWE2Y2R5bnhBQjhyd0V6cS9uCnNlWmtOeS9sN3ZyZVlGM1lHWUJvRVFFV0tDbmtJbU53MW9BZVQ1UGdvcHFrd3pnSkp1TmQrM2ZYTU50cG13SjcKZXlYZjBRSlB4UHBQbTE5aVFhZzcrNlovOUxlRnhUOXRKNzRkQUFQcVRwZVhPdDR4T21wV1lOZTEvaHZvYkFmMAptQ1lIcVVRTGY1YnhmeVhiSy9QclFtc2Z1V0NhU3QvVUZPRWRtd0FpaWlhbDk3SW1VTDZ3RCtVZm1FbnV4MjdnCmJuUm1ySjBSZ1BXNUltRGtPdTkzdlVDNlIzaGZPLzY5bG9SNVpuK3pqMkpFdVp6Q25XS3BNYTN3WkVjRlNHT2kKVm9QbGZVVUNnWUVBeDVtclQ5MHhscHBJR1lEaGZKSWpkdWc3SGNyd1ArUkpmcXErTDllM1RyWnBPL25iZDN6MQozYURuelpBanpqVUZPQ2dYYWlqWXMvUG9uOXZnZ3BEWjRzUkY1RkkyMDhWWENEK3pEOEtZN2wrcmM1OWdISVhBCkVrMkJNSUR3dW5JZU92UGdwWmh5aTdianpOTmdsSVBVTU9oZG9qQ2hYd1BQUnhXMkF4ZWJIcThDZ1lFQSsxVjkKalVDd2hyYWNSWWhjV1ZXQzF4Tk9Wc0NBUWdjVFVzbk1hVzU2cXBjUzE4dXArQ0UrNG56RG1vSEkvb2hyOFpWSgpHaUFZWUxNYjlHZm1rRld3djZJRFJwRFRoWTkvbTRjbzhDaStWSWVpdWwzclMrVmdGVlJnUWkwbHp2d0RHc1doClZLdXd0Mm9yeitXTGFLczFPcnYyN1cwNWk0aFpIaGlVd3Zxc3UxTUNnWUJzRWd2clpmd2ZhdEYyM1kwNUFYY3EKUG5zam1tbVNibXhNcE8zc3dZT0Nuc2xEcS9qa0xVaUNBMGoreC9oYkFlSWRrYmQ3eHpudDFUWXl0NzVMYzFwRgpxYmVkODlXenU3bHZ3ZTJWcnV0V3hYM3pVR3VkaGQyRkMyblRkVHpoOWovZjg0UENwVlAveWJwMWdFMWVuREliCmVQU1ppSE1YR3R6enhCR1Vnd2QrQ1FLQmdINXZsbmFkeVhBcm8xZlRibW0rZTlESXRJc3QwaGZsU1ZKSGxGNmgKcG5IMUNCU3BMenRWTmpabi8xclYyWkE2ZnRzTWQ3YjkyR1dsRlBZUjRzcFBZVmcySDZHN0w3MnIzODBVNUlKVQpiTk5IWEpTV3RNejhlaWFneUwvaHlIaGxEUWJGenhBeVF2Y3lJUkkzN3JiY0VpNFc2dlNzRXR2ZjNyMG1Mb2diCjVSTmpBb0dCQUo0L1l2MFI4YWdIMUlxOTBQT0srTmhCSEV0N3pkWXFscS8xNVExb3Vuek1tNXFidUcrOFFQTWMKZGwyc3dEMHFKUk5uenJTdnZKaVhsMGlEc25uUVZQYVVUemd3d285MDNwTU94RTFSWVIvSGtxK2VWV2tzbXdUbQplRTh1eDkvM1VKSDdjSXNWSVpPRkpOT25DU01WWVFEQUFHYUZYSGFsVkViOHpGVUNRNHNJCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpFYTJ2a2l3UjVwRUp0VUlZK0ZiRFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OFlqNkNGdHRCMlp2cDBsR29ZVmVQM1dVNnI3MFZWZUJ4NzdTUFRkajU1L1VZYTcKdHBKYnUzb0JnMDhjOWhHZU0wNTBOU3pyRnQrTGJDWlYrR21OWjhmQ0NyQWxOb2lZZ2NQaldHYVhRRHZRcldxcApZM1VubDRNUGRHTkkxdzV1TFE1cjRVNkZ3R0tPbGFhZis3bGNDSXFHc2ltVFROUFplMThXMFpTYjdFZFZpMldEClU1S2xPc1dHYnM4dDlNZVlQc2NUQkl4azI5REhhQjFNdm9mb2h3ZTN3Mm10KzlQNmhHRkRzM3FYRHdDUmNIWXMKbnJUWnUwSEVLbWtvdDJ0SThoTmxoSDBwT05zKzd3R2ZFZWk0MVd6Y0tTSXB5Wk1QaDNhK1hraGt0T2R3RGpGZQpWVkkwWFZwTk9jMW9ZcXdQamxROVQ1VHpqVXVvREo5MlZmR3NZd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSWNQZURHY09RTi80cWt5bVRtc25NbkF0aVBGTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmsxbUJ6M2NzTHE5U3A2ZklhclA3Y2lwOUlhV1M2aDBwWjgwSWFsTXFUTmQ5QTJnc3dMejFqCm52N0Zid29KUUs0QnhtUjV1Q0IwSTkwV2l0QmdyeVJxMkZFWVpHeE5CSUhMTmVJeVlxK3hpVFdLTHVBNkR0eS8KZG1UYmZxcW1wQVhOK2ZMeUpLZ1BUcE5vRTRKU3h4WTRIVWcrYzVCS3l3MmM1SURrY0hwanJabWdrMGUzRWs2QgorbXI0b2tzSkVKWjFWcTR3Qng4V1BCUDFnZlB6KzMrMDFTaG5Ma0NUZGpsZS9PcHQrWU96cTlNWTg2T3loanZ5ClY5QmZGVTgzN1pZbk1odkxicXI2OTd3VzMxRDkzb1hTTlJac2pab29zemxPQkpidVFxY2d1eW84TjVQdDFXbG8KSUFCWjlCL2JmcnVGUmFyVnFCbE53OTBlQWJLajV4amIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-ingress-controller-tls
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVJVENDQXdtZ0F3SUJBZ0lSQUk4OG1GWm5PR3prZTYwUHN2bzZYQ0l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0x6RXRNQ3NHQTFVRUF4TWtiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RhVzVuY21WemN5MWpiMjUwCmNtOXNiR1Z5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE2WTRjdmJaWVRqUXIKZ0Z5eExITHFUNkdsVXlLbDNnT0lTRERSZjRIRXN3dWdCRHB0TWZORFVZRXE1VDl6WVk3R0lid3gyY0VLTXVVdApjYzd4eHFKdUpLWlo3bFNvZjlLRWRGSmJzejRkZ1B6V1EvNjhJOHVVOEdvbTBZT1gxbWkvbFlXeEtpVkJBM0p3CjQxU0kyZ05VWFpNdXViQ3hyMjVMT2Y2NkExNTIra3NLbnYxT1lsdE41NVdoV2s0WFkwQzU1UGtmM2lPR1ZxY3EKaWlYRXlGU25JVHhlVjRoc2N0bW9FVlZlUUV5ZUxQZzBnY1NHMzZKQ2xmclhONlFYQkNlL1M3RmdFNThQNnlVVwp4Zk9GVFB6b0hNUEpTd2ZHYk5lOUNrc3dQN0lqK2Z6QXZrUGdkZkJrUWhNR1kwdEdOZ25qSW9wN0JwQjUyMHBpCnJNNG1mRlFqTHdJREFRQUJvNElCVVRDQ0FVMHdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkljUAplREdjT1FOLzRxa3ltVG1zbk1uQXRpUEZNSUhzQmdOVkhSRUVnZVF3Z2VHQ0pHMTVMWEpsYkdWaGMyVXRZWEJwCmMybDRMV2x1WjNKbGMzTXRZMjl1ZEhKdmJHeGxjb0kxYlhrdGNtVnNaV0Z6WlMxaGNHbHphWGd0YVc1bmNtVnoKY3kxamIyNTBjbTlzYkdWeUxtRndhWE5wZUMwekxqSXVNaTUwWjNxQ09XMTVMWEpsYkdWaGMyVXRZWEJwYzJsNApMV2x1WjNKbGMzTXRZMjl1ZEhKdmJHeGxjaTVoY0dsemFYZ3RNeTR5TGpJdWRHZDZMbk4yWTRKSGJYa3RjbVZzClpXRnpaUzFoY0dsemFYZ3RhVzVuY21WemN5MWpiMjUwY205c2JHVnlMbUZ3YVhOcGVDMHpMakl1TWk1MFozb3UKYzNaakxtTnNkWE4wWlhJdWJHOWpZV3d3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUhhYTNKMk5HOXFJS1BMSQpyU2lCMXoyZERSNFVCL2pTc0VRZU9NSnZLWTRYVWJQWkZ0eUoxK2RLTXhTUUh6U1YxZmpKcS82N2wxZWxSakVlCmxmSm5VY2RnS0tDbVQvckZDR2JSckN4aTlUUFgxMlVOU09lbzh4WVlzZXdBaTBRc1dWcmpsZmF5TFhZdHB4TnQKeW1CTDVNc2tKeG41cGxMamVYaE11OE5oNjNHaTYwaHdhZU5FK1NFcm9HaGIxckxVdWFYbEVWRHUxZTVpUUR0TQprS3lqWDg4ZnlZUzZweVVTOWh1TVhFNjNjMEtUOE41QTFxSUJ5Y3YzOWF0TGhiRTZLK3U1RzlRUG1BZ1lsTGJrCjRuVnV6ZWIrWTV5aGRHVnVhdWNxVWFFN3dmOHYwaGx2VERiVUZUeHFHaGJraUxaR3BWajdoVGVoeEpBVmZoOFIKUklTbUJGbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNlk0Y3ZiWllUalFyZ0Z5eExITHFUNkdsVXlLbDNnT0lTRERSZjRIRXN3dWdCRHB0Ck1mTkRVWUVxNVQ5ellZN0dJYnd4MmNFS011VXRjYzd4eHFKdUpLWlo3bFNvZjlLRWRGSmJzejRkZ1B6V1EvNjgKSTh1VThHb20wWU9YMW1pL2xZV3hLaVZCQTNKdzQxU0kyZ05VWFpNdXViQ3hyMjVMT2Y2NkExNTIra3NLbnYxTwpZbHRONTVXaFdrNFhZMEM1NVBrZjNpT0dWcWNxaWlYRXlGU25JVHhlVjRoc2N0bW9FVlZlUUV5ZUxQZzBnY1NHCjM2SkNsZnJYTjZRWEJDZS9TN0ZnRTU4UDZ5VVd4Zk9GVFB6b0hNUEpTd2ZHYk5lOUNrc3dQN0lqK2Z6QXZrUGcKZGZCa1FoTUdZMHRHTmduaklvcDdCcEI1MjBwaXJNNG1mRlFqTHdJREFRQUJBb0lCQVFDYTBKcjRubEIydGxwSApvaW5IWHYwMmY5NEk5NlNmUUJRc1ZqL29sMnA5akswcllGZFZqdjBHbitxQlA4Z0oyUXc0L0hqRzhSRURuNnE2CkVBVndOK2R1Mzk0by8zRWFHYiszSTRpcGpma2NzWHlPWWVMd2oxaFE3T3lDWVFwYkUrQTdDdjNmQkFiT2RDT2sKYlRxeDJSY3BXQkRYQWVzbWNLUG84NUwxL0w0OU5oQ0VYZlRHbUVXa0hWdEk3RTE5S2hkUGZVbXJlV1plZEtHaAphc2M2Y3R4T2szaEJRN2ZubWlneWdKdkpLZnE4QXIyTmN0NlgzQUdRNkFiQm5QanoreUEwVi80K2prVUI4MDhXCmQ0eWNxQm9tZHhhZWt4SFp1bEtML3A4VXZoS2ZOZFdFeVRmWUdsSjJBYkQwczBHeXV3Ri9hU09ZVUdxVmNoaHMKY2pwVFhrdmhBb0dCQU9wbjQrYTZIaXlhNWYwT2NBSTV3bnlJZ2pzdkErODVwZFBDTjdEQ1p2LzRCTVFjbzRYcwpzdG1hNGhTbjZCL1hvd0ZxNG02cDlsZUJoR0M0c1R2N1lJZUxnV1JEZzBqT1ZGMGNXU3pjQy9haXB1TTZIeVNLCjMrck1yZFdqdWNVeXdpdFc5WTcvUEUyRGJrRFI0ci9iTDRKOHF4ejJ0KzNPYWtvd0ZCMFU2bXVYQW9HQkFQOFMKS045Ni82UmJEeFpEZ0lNMW9vK1IzOURTQ2R1dkliL2YrNEtnUFZzb1VxSmVwd3FqeXViYkFKWUtIWXNiOW1XZApOekFoYm9kKy8weGdIbGVMdy9PMjJoWEdISEM3b0tVTTZCUVZCL1RNR1g5Nzh3OXdaaFo5bE0ySllJeUY5TXVnCllWOUgycFA2bnU2ZG9RTVBrcUxHbVJncDBtQzI4TjRlMzArT08xZ3BBb0dCQU43Mnh4NzJ0akR6ZmdTQk1TWE0KenlRcHJNYWk1L2tyT29MOFlJQ3Z5YzE4bXZ2M3ljdGY1SmQ3N2NSOEdoMy92VHRoOGRRVnN3NTFVZmUyZGs5NQp3czNyY3I1dVFYaUZXbFhlMnl3Q2V4YTBqRTNqUVRBL01OSmtzbzFlV1J3c05lbUhvN2ZMTEE4SEQxNTB4bHg4Ckh1cmRydDIwQ0N3WmhaemZzcUllL1FRdEFvR0FJWXFYeVZ0NVJubWE4RWlNRzdUdjNZVkhNMFNMZTFINlZDcjEKL2VWb2JCWlBWMzZ1NUoxSlR6WTVTNEdsQk9mMmJNSlJ3WWlENmxsdTVQSTJ5emhiMmk2UFd4R2tKOGJraHcrOQpiUGFmQnpmWG1vWUlIbDJmYnhHd2daNnhEWW1IK1Vicnh3WEIzbmUwY3BoVDFmMDBRU2R3ZGxiNWpUSkJWbFFrCjlXYzBzcEVDZ1lFQW1qYzR3cDh0YW12ZXJsbENERHVFZGVrYnZnNElEank4SkJTQU5KQlZ1V0J3ekxBc1R4TnoKcnl1a0tJbTkvc0dQejZsY2w5T3JZOTdXK1NkeVFzdG9GZGlRR1p3Ly9jbi9XanhHUnZ0WWdrRlNYbDk4bjBzWApNK2RjeWtDSXB6Yml4UmRIbFZzT1pSYXJFY2RBdEpOWmo1U3BwcUNPY0xxVE9SOHhob2dHUGVnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpFYTJ2a2l3UjVwRUp0VUlZK0ZiRFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OFlqNkNGdHRCMlp2cDBsR29ZVmVQM1dVNnI3MFZWZUJ4NzdTUFRkajU1L1VZYTcKdHBKYnUzb0JnMDhjOWhHZU0wNTBOU3pyRnQrTGJDWlYrR21OWjhmQ0NyQWxOb2lZZ2NQaldHYVhRRHZRcldxcApZM1VubDRNUGRHTkkxdzV1TFE1cjRVNkZ3R0tPbGFhZis3bGNDSXFHc2ltVFROUFplMThXMFpTYjdFZFZpMldEClU1S2xPc1dHYnM4dDlNZVlQc2NUQkl4azI5REhhQjFNdm9mb2h3ZTN3Mm10KzlQNmhHRkRzM3FYRHdDUmNIWXMKbnJUWnUwSEVLbWtvdDJ0SThoTmxoSDBwT05zKzd3R2ZFZWk0MVd6Y0tTSXB5Wk1QaDNhK1hraGt0T2R3RGpGZQpWVkkwWFZwTk9jMW9ZcXdQamxROVQ1VHpqVXVvREo5MlZmR3NZd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSWNQZURHY09RTi80cWt5bVRtc25NbkF0aVBGTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmsxbUJ6M2NzTHE5U3A2ZklhclA3Y2lwOUlhV1M2aDBwWjgwSWFsTXFUTmQ5QTJnc3dMejFqCm52N0Zid29KUUs0QnhtUjV1Q0IwSTkwV2l0QmdyeVJxMkZFWVpHeE5CSUhMTmVJeVlxK3hpVFdLTHVBNkR0eS8KZG1UYmZxcW1wQVhOK2ZMeUpLZ1BUcE5vRTRKU3h4WTRIVWcrYzVCS3l3MmM1SURrY0hwanJabWdrMGUzRWs2QgorbXI0b2tzSkVKWjFWcTR3Qng4V1BCUDFnZlB6KzMrMDFTaG5Ma0NUZGpsZS9PcHQrWU96cTlNWTg2T3loanZ5ClY5QmZGVTgzN1pZbk1odkxicXI2OTd3VzMxRDkzb1hTTlJac2pab29zemxPQkpidVFxY2d1eW84TjVQdDFXbG8KSUFCWjlCL2JmcnVGUmFyVnFCbE53OTBlQWJLajV4amIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-apisix-dashboard-tls
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQ5RENDQXR5Z0F3SUJBZ0lSQUtMbys4bjk4UnlqelVNNS91V2N5R3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0pqRWtNQ0lHQTFVRUF4TWJiWGt0Y21Wc1pXRnpaUzFoY0dsemFYZ3RaR0Z6YUdKdllYSmtNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4UFpQWUlMYkxvU05ES2JQMkFVQ1RoUk4KOHF3R1hOcklKOGlwbjVBUTVWUDVFMUVOdkl2R1I1KzVXdCs2MGM2YWxxN3FvdlF3QUZjWndYODg3VjFPblhKQgpaNXlJY3BIa1lvYUE4c0ticjBNMXdxMUlra2N3MlBIbjFwUHVwRmtvSmxqejNmUDNWMytIeDYyNk1HRWYwU0lxCjBBNnFwQkZ2a2JXaG1IUzk1UzFFL2VaRDZoRmZXVjZEVXgyT3BTZGdqZHRtYzdPQm1FTjQycURUS0Y1R1BpT28Ka2hUZ3lDTjFJT0lYdTFCTjBmcmkzVTl4aDYvdjR2NWh0S3JOU2pveHNyRGNtNVUrbkpTa1dhMkxNTzVON01TQwpHUGc5ajZnbkxSanR4ZnAxSHFVODh6VUFianFOVVhlUnMzRkR5V213alVoNkZHTnUvdC9XRkppdG9KVUxGUUlECkFRQUJvNElCTFRDQ0FTa3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUIKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkljUGVER2NPUU4vNHFreQptVG1zbk1uQXRpUEZNSUhJQmdOVkhSRUVnY0F3Z2IyQ0cyMTVMWEpsYkdWaGMyVXRZWEJwYzJsNExXUmhjMmhpCmIyRnlaSUlzYlhrdGNtVnNaV0Z6WlMxaGNHbHphWGd0WkdGemFHSnZZWEprTG1Gd2FYTnBlQzB6TGpJdU1pNTAKWjNxQ01HMTVMWEpsYkdWaGMyVXRZWEJwYzJsNExXUmhjMmhpYjJGeVpDNWhjR2x6YVhndE15NHlMakl1ZEdkNgpMbk4yWTRJK2JYa3RjbVZzWldGelpTMWhjR2x6YVhndFpHRnphR0p2WVhKa0xtRndhWE5wZUMwekxqSXVNaTUwClozb3VjM1pqTG1Oc2RYTjBaWEl1Ykc5allXd3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSm9IOEVKeWlDVUkKM2cxSXhKYnpVZzFSc3ZUZVhUU2I2MDIzQlRjSlB6MS9Jdm5NcUEvd01XN0Z2a3gwSWtGK1dWSmpZVk1RY25GZgpJMnMwTFVEWnB6ZUJma3pCWDdKUVlMZUd1K2VJdGR3WENLUnI1amhlazNMUi84SStaMTMyb2g0RzREZzhYbFR4Ck8xTC9XS3VqZ2FoVzkrNTgvUDdqSXNyL2RtTzBIVm85Y0V4N1ZhVnUwZURYTWFYUjVuV1JZelZsTTRJdVhwd3EKVHcvc29hY0JFMUxKazYzN01QMS9RbFR5Tk5yeEFwc0l0NnZTcUdPSnJFWnRXU0REUTA1bER1WXh3Tzc4RWJiZwovb2QrWDVxVkZkd2l3eTlaS2h3WEFDUjlTdGhFS3RaS1pESXJTZllINjM4TFAwNDllZElDOFdWOEt0S0xXNXg1ClVydHNzYzdhMjJBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeFBaUFlJTGJMb1NOREtiUDJBVUNUaFJOOHF3R1hOcklKOGlwbjVBUTVWUDVFMUVOCnZJdkdSNSs1V3QrNjBjNmFscTdxb3ZRd0FGY1p3WDg4N1YxT25YSkJaNXlJY3BIa1lvYUE4c0ticjBNMXdxMUkKa2tjdzJQSG4xcFB1cEZrb0psanozZlAzVjMrSHg2MjZNR0VmMFNJcTBBNnFwQkZ2a2JXaG1IUzk1UzFFL2VaRAo2aEZmV1Y2RFV4Mk9wU2RnamR0bWM3T0JtRU40MnFEVEtGNUdQaU9va2hUZ3lDTjFJT0lYdTFCTjBmcmkzVTl4Cmg2L3Y0djVodEtyTlNqb3hzckRjbTVVK25KU2tXYTJMTU81TjdNU0NHUGc5ajZnbkxSanR4ZnAxSHFVODh6VUEKYmpxTlVYZVJzM0ZEeVdtd2pVaDZGR051L3QvV0ZKaXRvSlVMRlFJREFRQUJBb0lCQUQ3MHpDSjVNVDRKT0Z5Vwo1VkNUS1UxenlBYU5YZXRJTXpva05iTy9CT2VJazlETTA2czBza2dxa2NDdVNyVE5hVFJJN003eFpuWjFZTklzCnJYamhua05OUmdLc1VpRHM2U2RrL3NxWjBkR1BsaHVINys1eHV2ZGRPMUduTDF4dzh4aHV6bVJmbXV2bzQ2bTcKcWd2VXY2ckZWUkh6M2k5Yk0ySkx3RDlPOFhQVEdOK3lHVC8vMzVZUlFFV0NZNjN5dTNXektqSjU4VWxEWUhDVQoycUMxRTRjam5GRXhmcFZ2c2lBTllWMWRrMW9lekNFelgvZU5YeVN0ODFGZTBIcXhrMWR4cS9QT3lFNEErd3VLCjU0ejlGbTVrOGtKV1h3bUJuTHhycThGc3dQWHo5THg5RXM0UytrOWVEMXY3MCtOcTNmd3puMDlKWGovazRYNG0KenBSNGZuRUNnWUVBMmFxY3J3Um4vcVRhSzh0RzhXRWJBQmtEWk1ZRzNzWkVNbEttK0Y0ZWd1NDgwd1RyajVsTwpIb3hEZnEvSlkwd1FJaXZmVVVuSjc1ekFYOCtQMUtMSE91Vm03WC92STYxbjhtSWVycFh6WlJNOUM4ZFZwVFF5ClQ1TDl2blNFUDh3Riszem5FUzVlaG9SZ21GSys0ME9rVDBXd3VzMkVlcEpGdE9DQ1RrcEVwMThDZ1lFQTU2WkIKSFFLdk15dmcvdEsrVGhKQmkxSk00dzdCRW00R0FDUGxrL0NITFpTOVNsS3MzU1hjSTJjMm0wS1ZDTldSNTZjaApOdS9FWXJNWFYwMC90V3Z1OUlwMEZCZ2xEWWZlaEw1d1hxOHBOWFNrY1JqZjFDU0NDUmgyc1FwSUxpY2E1WTZICk8raUlZaFg0UGdpRm1oRW15VnppMWx6b3FlbERvNG1IOTZwT1pnc0NnWUJqekRYS2lOcWxoakFCcEZJQ21lTW4KU0ZDbUE2Vml2c1RGemQrQVFLYjhvUDZDUWQ4L0Y2c1psblhidi8wMTZjbjc0T0dqQTVIeXFvd0pZY0V3WFBHNwpyekpoOGlaUzFVNnpjd2xlUXFJMTFYeEh5ajBhWWJRdmg5V1BYUnpGbzJXYXlNbW90dm5mOHhIV3hSbUFXYU1jCk5YZXlMa2h2YW1GTGJTUlJnUHU1UVFLQmdRREp0RGtVTXFjdExuTGVUOUNIR0Z4Y0hOQjRFUHZLdVdTZU1LT1IKbXFtSjVlNmd6YlpaWmNMMlRNUCtrdzVFUC9xb3RCMDJ3YlhGbjEyZWxkUDRlNy80ektuZ2FWbXlHM0dGTW5HVAo4SDg0WFpWbUtSdVVsQ2xxRkJRZGVlOTV5SEVpRzJYam8wbEY1dzFkcm52dXVDcUd3VXQvRGkxRTdha0l1Qk5kCmNyeUxHd0tCZ1FDUHZXWGdSNXlFU2ZDNUQxVUk4RHJqQmd6LzdtOENMbER2U0M3c1lDaWR4WXdwbXFZWUowaWwKbjZZSllqNitLZHl4R1phMHRpdmQ5UWdkanh1NU9SZDREUkRLN2dzQk5KZW5KRWJjdnk5dSthL3djS1ovV3RrKwptdFR6ZVhOL3JkaENiU1I4ZFlodGp4Zm50WTBhc2htbDF1RzFaS2JyU3FiUGRXd1B1Q1N6QkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpFYTJ2a2l3UjVwRUp0VUlZK0ZiRFF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSllYQnBjMmw0TFdOaE1CNFhEVEkwTURZeU1ERTBOVFV3TWxvWERUSTFNRFl5TURFMApOVFV3TWxvd0ZERVNNQkFHQTFVRUF4TUpZWEJwYzJsNExXTmhNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF0OFlqNkNGdHRCMlp2cDBsR29ZVmVQM1dVNnI3MFZWZUJ4NzdTUFRkajU1L1VZYTcKdHBKYnUzb0JnMDhjOWhHZU0wNTBOU3pyRnQrTGJDWlYrR21OWjhmQ0NyQWxOb2lZZ2NQaldHYVhRRHZRcldxcApZM1VubDRNUGRHTkkxdzV1TFE1cjRVNkZ3R0tPbGFhZis3bGNDSXFHc2ltVFROUFplMThXMFpTYjdFZFZpMldEClU1S2xPc1dHYnM4dDlNZVlQc2NUQkl4azI5REhhQjFNdm9mb2h3ZTN3Mm10KzlQNmhHRkRzM3FYRHdDUmNIWXMKbnJUWnUwSEVLbWtvdDJ0SThoTmxoSDBwT05zKzd3R2ZFZWk0MVd6Y0tTSXB5Wk1QaDNhK1hraGt0T2R3RGpGZQpWVkkwWFZwTk9jMW9ZcXdQamxROVQ1VHpqVXVvREo5MlZmR3NZd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSWNQZURHY09RTi80cWt5bVRtc25NbkF0aVBGTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQmsxbUJ6M2NzTHE5U3A2ZklhclA3Y2lwOUlhV1M2aDBwWjgwSWFsTXFUTmQ5QTJnc3dMejFqCm52N0Zid29KUUs0QnhtUjV1Q0IwSTkwV2l0QmdyeVJxMkZFWVpHeE5CSUhMTmVJeVlxK3hpVFdLTHVBNkR0eS8KZG1UYmZxcW1wQVhOK2ZMeUpLZ1BUcE5vRTRKU3h4WTRIVWcrYzVCS3l3MmM1SURrY0hwanJabWdrMGUzRWs2QgorbXI0b2tzSkVKWjFWcTR3Qng4V1BCUDFnZlB6KzMrMDFTaG5Ma0NUZGpsZS9PcHQrWU96cTlNWTg2T3loanZ5ClY5QmZGVTgzN1pZbk1odkxicXI2OTd3VzMxRDkzb1hTTlJac2pab29zemxPQkpidVFxY2d1eW84TjVQdDFXbG8KSUFCWjlCL2JmcnVGUmFyVnFCbE53OTBlQWJLajV4amIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: apisix/templates/control-plane/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-control-plane-default
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
data:
  config.yaml: |
    
    nginx_config:
      error_log: /dev/stderr
      stream:
        access_log: /dev/stdout
      http:
        access_log: /dev/stdout
      http_configuration_snippet: |
        proxy_buffering off;
    apisix:
      control:
        ip: 0.0.0.0
        port: 9090
    deployment:
      role: control_plane
      role_control_plane:
          config_provider: etcd
          conf_server:
            listen: 0.0.0.0:9280
            cert: /bitnami/certs/tls.crt
            cert_key: /bitnami/certs/tls.key
      etcd:
        host:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
        prefix: /apisix
        timeout: 30
        use_grpc: false
        startup_retry: 60
      certs:
        cert: /bitnami/certs/tls.crt
        cert_key: /bitnami/certs/tls.key
        client_ca_cert: /bitnami/certs/ca.crt
      admin:
        https_admin: true
        admin_api_mtls:
          admin_ssl_cert: /bitnami/certs/tls.crt
          admin_ssl_cert_key: /bitnami/certs/tls.key
    
        allow_admin:
          - 0.0.0.0/0
    
        admin_key:
          - name: admin
            key: "{{APISIX_ADMIN_API_TOKEN}}"
            role: admin
          - name: viewer
            key: "{{APISIX_VIEWER_API_TOKEN}}"
            role: viewer
        admin_listen:
            port: 9180
        enable_admin_cors: true         # Admin API support CORS response headers.
    discovery:
      kubernetes:
        service:
          schema: https #default https
    
          # apiserver host, options [ipv4, ipv6, domain, environment variable]
          host: ${KUBERNETES_SERVICE_HOST}
    
          # apiserver port, options [port number, environment variable]
          port: ${KUBERNETES_SERVICE_PORT}
    
        client:
          # serviceaccount token or token_file
          token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
        default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0
---
# Source: apisix/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-dashboard-default
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
data:
  config.yaml: |
    conf:
      listen:
        host: 0.0.0.0
        port: 8080
      ssl:
        host: 0.0.0.0
        port: 8443
        cert: /bitnami/certs/tls.crt
        key: /bitnami/certs/tls.key
      etcd:
        prefix: "/apisix"
        endpoints:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
      log:
        error_log:
          level: warn
          file_path: /dev/stderr
        access_log:
          file_path: /dev/stdout
    authentication:
      secret: secret
      expire_time: 3600
      users:
        - username: "{{ APISIX_DASHBOARD_USER }}"
          password: "{{ APISIX_DASHBOARD_PASSWORD }}"
    plugins:
      - api-breaker
      - authz-casbin
      - authz-casdoor
      - authz-keycloak
      - aws-lambda
      - azure-functions
      - basic-auth
      # - batch-requests
      - clickhouse-logger
      - client-control
      - consumer-restriction
      - cors
      - csrf
      - datadog
      # - dubbo-proxy
      - echo
      - error-log-logger
      # - example-plugin
      - ext-plugin-post-req
      - ext-plugin-post-resp
      - ext-plugin-pre-req
      - fault-injection
      - file-logger
      - forward-auth
      - google-cloud-logging
      - grpc-transcode
      - grpc-web
      - gzip
      - hmac-auth
      - http-logger
      - ip-restriction
      - jwt-auth
      - kafka-logger
      - kafka-proxy
      - key-auth
      - ldap-auth
      - limit-conn
      - limit-count
      - limit-req
      - loggly
      # - log-rotate
      - mocking
      # - node-status
      - opa
      - openid-connect
      - opentelemetry
      - openwhisk
      - prometheus
      - proxy-cache
      - proxy-control
      - proxy-mirror
      - proxy-rewrite
      - public-api
      - real-ip
      - redirect
      - referer-restriction
      - request-id
      - request-validation
      - response-rewrite
      - rocketmq-logger
      - server-info
      - serverless-post-function
      - serverless-pre-function
      - skywalking
      - skywalking-logger
      - sls-logger
      - splunk-hec-logging
      - syslog
      - tcp-logger
      - traffic-split
      - ua-restriction
      - udp-logger
      - uri-blocker
      - wolf-rbac
      - zipkin
      - elasticsearch-logge
      - openfunction
      - tencent-cloud-cls
      - ai
      - cas-auth
---
# Source: apisix/templates/data-plane/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-data-plane-default
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
data:
  00_default_config.yaml: |
    
    apisix:
      node_listen: 9080
      enable_admin: false
      ssl:
        enable: true
        listen:
          - port: 9443
        ssl_trusted_certificate: /bitnami/certs/ca.crt
      enable_http2: true
      control:
        ip: 0.0.0.0
        port: 9090
    nginx_config:
      error_log: /dev/stderr
      stream:
        access_log: /dev/stdout
      http:
        access_log: /dev/stdout
      http_configuration_snippet: |
        proxy_buffering off;
    deployment:
      role: data_plane
      role_data_plane:
        config_provider: etcd
        control_plane:
          host:
            - https://my-release-apisix-control-plane:9280
          prefix: /apisix
          timeout: 30
      etcd:
        host:
          - http://my-release-etcd-0.my-release-etcd-headless:2379
          - http://my-release-etcd-1.my-release-etcd-headless:2379
          - http://my-release-etcd-2.my-release-etcd-headless:2379
        prefix: /apisix
        timeout: 30
        use_grpc: false
        startup_retry: 60
      certs:
        cert: /bitnami/certs/tls.crt
        cert_key: /bitnami/certs/tls.key
        client_ca_cert: /bitnami/certs/ca.crt
    discovery:
      kubernetes:
        service:
          # apiserver schema, options [http, https]
          schema: https #default https
    
          # apiserver host, options [ipv4, ipv6, domain, environment variable]
          host: ${KUBERNETES_SERVICE_HOST} #default ${KUBERNETES_SERVICE_HOST}
    
          # apiserver port, options [port number, environment variable]
          port: ${KUBERNETES_SERVICE_PORT}  #default ${KUBERNETES_SERVICE_PORT}
    
        client:
          # serviceaccount token or token_file
          token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
        default_weight: 50 # weight assigned to each discovered endpoint. default 50, minimum 0
---
# Source: apisix/templates/ingress-controller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-apisix-ingress-controller-default
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
data:
  config.yaml: |
    # log options
    log_level: "info"
    log_output: "stderr"
    https_listen: ":8443"
    cert_file: "/bitnami/certs/tls.crt"
    key_file: "/bitnami/certs/tls.key"
    http_listen: ":8080"
    ingress_publish_service: "apisix-3.2.2.tgz/my-release-apisix-data-plane"
    enable_profiling: true
    apisix-resource-sync-interval: 1h
    kubernetes:
      kubeconfig: ""
      resync_interval: "6h"
      election_id: "my-release-apisix-ingress-controller-leader"
      ingress_class: "apisix"
      ingress_version: "networking/v1"
      watch_endpointslices: false
      apisix_route_version: "apisix.apache.org/v2"
      enable_gateway_api: false
      apisix_version: "apisix.apache.org/v2"
      plugin_metadata_cm: ""
    apisix:
      admin_api_version: "v3"
      default_cluster_base_url: https://my-release-apisix-control-plane:9180/apisix/admin
      default_cluster_admin_key: "{{APISIX_ADMIN_API_TOKEN}}"
      default_cluster_name: "default"
---
# Source: apisix/templates/control-plane/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-control-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: apisix/templates/data-plane/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-data-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch"]
---
# Source: apisix/templates/ingress-controller/clusterroles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-ingress-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - pods
      - services
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - apisix.apache.org
    resources:
      - apisixroutes
      - apisixroutes/status
      - apisixupstreams
      - apisixupstreams/status
      - apisixtlses
      - apisixtlses/status
      - apisixclusterconfigs
      - apisixclusterconfigs/status
      - apisixconsumers
      - apisixconsumers/status
      - apisixpluginconfigs
      - apisixpluginconfigs/status
      - apisixglobalrules
      - apisixglobalrules/status
    verbs:
      - '*'
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - '*'
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes
      - tlsroutes
      - gateways
      - gatewayclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - gateway.networking.k8s.io
    resources:
      - httproutes/status
      - tlsroutes/status
      - gateways/status
      - gatewayclasses/status
    verbs:
      - update
---
# Source: apisix/templates/control-plane/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-control-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-apisix-3.2.2.tgz-control-plane
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-control-plane
    namespace: "apisix-3.2.2.tgz"
---
# Source: apisix/templates/data-plane/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-data-plane
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-apisix-3.2.2.tgz-data-plane
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-data-plane
    namespace: "apisix-3.2.2.tgz"
---
# Source: apisix/templates/ingress-controller/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-apisix-apisix-3.2.2.tgz-ingress-controller
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-apisix-apisix-3.2.2.tgz-ingress-controller
subjects:
  - kind: ServiceAccount
    name: my-release-apisix-ingress-controller
    namespace: "apisix-3.2.2.tgz"
---
# Source: apisix/charts/etcd/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-etcd-headless
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: client
      port: 2379
      targetPort: client
    - name: peer
      port: 2380
      targetPort: peer
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: apisix/charts/etcd/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-etcd
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "client"
      port: 2379
      targetPort: client
      nodePort: null
    - name: "peer"
      port: 2380
      targetPort: peer
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: etcd
    app.kubernetes.io/component: etcd
---
# Source: apisix/templates/control-plane/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-control-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: https-admin-api
      port: 9180
      protocol: TCP
      nodePort: null
      targetPort: https-admin-api
    - name: https-cfg-srv
      port: 9280
      protocol: TCP
      nodePort: null
      targetPort: https-cfg-srv
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
---
# Source: apisix/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
---
# Source: apisix/templates/data-plane/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-data-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: "Cluster"
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
---
# Source: apisix/templates/ingress-controller/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: null
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      nodePort: null
      targetPort: https
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: apisix
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
---
# Source: apisix/templates/control-plane/dep-ds.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-control-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: control-plane
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: control-plane
  template:
    metadata:
      annotations:
        checksum/config: 3c08318a65ae042184ef1e5d4152c4ce0a65f96e08595e7ae790de47ff4f65b5
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 4d6b1673b831b1d5f1abbd6082bcb98d60e813cdec41c04034f962ef402aa29b
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.9.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: control-plane
    spec:
      serviceAccountName: my-release-apisix-control-plane
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: control-plane
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-etcd
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              etcd_hosts=(
                "http://my-release-etcd:2379"
              )
        
              check_etcd() {
                  local -r etcd_host="${1:-?missing etcd}"
                  if curl --max-time 5 "${etcd_host}/version" | grep etcdcluster; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${etcd_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_etcd $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: prepare-apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              cp -R /opt/bitnami/apisix/conf /usr/local/apisix
              ln -sf /opt/bitnami/apisix/deps /usr/local/apisix
              ln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix
              mkdir -p /usr/local/apisix/logs
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /usr/local/apisix/conf/pre-render-config.yaml
              render-template /usr/local/apisix/conf/pre-render-config.yaml > /usr/local/apisix/conf/config.yaml
              rm /usr/local/apisix/conf/pre-render-config.yaml
              chmod 644 /usr/local/apisix/conf/config.yaml
              apisix init
              apisix init_etcd
              # The path is hardcoded in the conf so we need to copy them to the server folder
              cp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt
              cp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - openresty
          args:
            - -p
            - /usr/local/apisix
            - -g
            - "daemon off;"
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: https-admin-api
              containerPort: 9180
            - name: https-cfg-srv
              containerPort: 9280
            - name: http-control
              containerPort: 9090
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-control
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /v1/healthcheck
              port: http-control
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-control-plane-default
        - name: certs
          secret:
            secretName: my-release-apisix-control-plane-tls
        - name: empty-dir
          emptyDir: {}
---
# Source: apisix/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-dashboard
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.0.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: dashboard
spec:
  strategy:
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      annotations:
        checksum/config: 2deb36783c0ad7bb909c18a9c7e14ed9c39169caa4573bebb127e303739fe1d1
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 385053e64caa0dc228dbf4f75065ed538e3ea8d9228853ac71391402a6e6ec06
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.0.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: dashboard
    spec:
      serviceAccountName: my-release-apisix-dashboard
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: csi-provider
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-etcd
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              etcd_hosts=(
                "http://my-release-etcd:2379"
              )
        
              check_etcd() {
                  local -r etcd_host="${1:-?missing etcd}"
                  if curl --max-time 5 "${etcd_host}/version" | grep etcdcluster; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              for host in "${etcd_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_etcd $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: render-conf
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /bitnami/apisix/rendered-conf/pre-render-config.yaml
              render-template /bitnami/apisix/rendered-conf/pre-render-config.yaml > /bitnami/apisix/rendered-conf/config.yaml
              chmod 644 /bitnami/apisix/rendered-conf/config.yaml
              rm /bitnami/apisix/rendered-conf/pre-render-config.yaml
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
            - name: APISIX_DASHBOARD_USER
              value: "user"
            - name: APISIX_DASHBOARD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-dashboard
                  key: password
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/rendered-conf
              subPath: app-conf-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix-dashboard
          image: docker.io/bitnami/apisix-dashboard:3.0.1-debian-12-r34
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -c
            - /bitnami/apisix/conf/config.yaml
            - -p
            - /opt/bitnami/apisix-dashboard
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /ping
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/apisix-dashboard/logs
              subPath: app-logs-dir
            - name: certs
              mountPath: /bitnami/certs
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-dashboard-default
        - name: certs
          secret:
            secretName: my-release-apisix-dashboard-tls
        - name: empty-dir
          emptyDir: {}
---
# Source: apisix/templates/data-plane/dep-ds.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-data-plane
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 3.9.1
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: data-plane
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: data-plane
  template:
    metadata:
      annotations:
        checksum/config: d999911bc20d8d5de89d096096fbf53f0322a11c176e44a4aced0a75c167e8c7
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 0fadee553a4f5df91d0f0eb3dd41d98d310e0b228bf594ba16bde4dcd2c4ab35
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 3.9.1
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: data-plane
    spec:
      serviceAccountName: my-release-apisix-data-plane
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: data-plane
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-control-plane
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              host="https://my-release-apisix-control-plane:9180"
        
              check_control_plane() {
                  if curl --max-time 5 -k -I "$host"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              echo "Checking connection to $host"
              if retry_while "check_control_plane"; then
                  echo "Connected to $host"
              else
                  echo "Error connecting to $host"
                  exit 1
              fi
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: prepare-apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              cp -R /opt/bitnami/apisix/conf /usr/local/apisix
              ln -sf /opt/bitnami/apisix/deps /usr/local/apisix
              ln -sf /opt/bitnami/apisix/openresty/luajit/share/lua/*/apisix /usr/local/apisix
              mkdir -p /usr/local/apisix/logs
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /usr/local/apisix/conf/pre-render-config.yaml
              render-template /usr/local/apisix/conf/pre-render-config.yaml > /usr/local/apisix/conf/config.yaml
              rm /usr/local/apisix/conf/pre-render-config.yaml
              chmod 644 /usr/local/apisix/conf/config.yaml
              apisix init
              # The path is hardcoded in the conf so we need to copy them to the server folder
              cp /bitnami/certs/tls.crt /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.crt
              cp /bitnami/certs/tls.key /usr/local/apisix/conf/cert/ssl_PLACE_HOLDER.key
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - openresty
          args:
            - -p
            - /usr/local/apisix
            - -g
            - "daemon off;"
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 9080
            - name: https
              containerPort: 9443
            - name: http-control
              containerPort: 9090
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http-control
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /v1/healthcheck
              port: http-control
          volumeMounts:
            - name: empty-dir
              mountPath: /usr/local/apisix
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
            - name: control-plane-certs
              mountPath: /etc/ssl/certs/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-data-plane-default
        - name: certs
          secret:
            secretName: my-release-apisix-data-plane-tls
        - name: empty-dir
          emptyDir: {}
        - name: control-plane-certs
          secret:
            secretName: my-release-apisix-control-plane-tls
---
# Source: apisix/templates/ingress-controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-apisix-ingress-controller
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: apisix
    app.kubernetes.io/version: 1.8.2
    helm.sh/chart: apisix-3.2.2
    app.kubernetes.io/part-of: apisix
    app.kubernetes.io/component: ingress-controller
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: apisix
      app.kubernetes.io/part-of: apisix
      app.kubernetes.io/component: ingress-controller
  template:
    metadata:
      annotations:
        checksum/config: 4271343f5f66b7f1907a971025aa0cfa50c5b39f5bb836e2b0fb8f0c9f8d4029
        checksum/config-extra: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: 3fb6a9950880fa787136ded258673f3853a14255ab9570f8f75f7286d43419fe
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: apisix
        app.kubernetes.io/version: 1.8.2
        helm.sh/chart: apisix-3.2.2
        app.kubernetes.io/part-of: apisix
        app.kubernetes.io/component: ingress-controller
    spec:
      serviceAccountName: my-release-apisix-ingress-controller
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: apisix
                    app.kubernetes.io/component: ingress-controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: wait-for-control-plane
          image: docker.io/bitnami/os-shell:12-debian-12-r22
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              retry_while() {
                local -r cmd="${1:?cmd is missing}"
                local -r retries="${2:-12}"
                local -r sleep_time="${3:-5}"
                local return_value=1
        
                read -r -a command <<< "$cmd"
                for ((i = 1 ; i <= retries ; i+=1 )); do
                    "${command[@]}" && return_value=0 && break
                    sleep "$sleep_time"
                done
                return $return_value
              }
        
              host="https://my-release-apisix-control-plane:9180"
        
              check_control_plane() {
                  if curl --max-time 5 -k -I "$host"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              echo "Checking connection to $host"
              if retry_while "check_control_plane"; then
                  echo "Connected to $host"
              else
                  echo "Error connecting to $host"
                  exit 1
              fi
        
              echo "Connection success"
              exit 0
        # This init container renders and merges the APISIX configuration files, as well
        # as preparing the Nginx server. We need to use a volume because we're working with
        # ReadOnlyRootFilesystem
        - name: render-conf
          image: docker.io/bitnami/apisix:3.9.1-debian-12-r4
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
              #!/bin/bash
              # Build final config.yaml with the sections of the different files
              find /bitnami/apisix/conf -type f -name *.yaml -print0 | sort -z | xargs -0 yq eval-all '. as $item ireduce ({}; . * $item )' > /bitnami/apisix/rendered-conf/pre-render-config.yaml
              render-template /bitnami/apisix/rendered-conf/pre-render-config.yaml > /bitnami/apisix/rendered-conf/config.yaml
              chmod 644 /bitnami/apisix/rendered-conf/config.yaml
              rm /bitnami/apisix/rendered-conf/pre-render-config.yaml
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: APISIX_ADMIN_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: admin-token
            - name: APISIX_VIEWER_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-apisix-control-plane-api-token
                  key: viewer-token
          envFrom:
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix/rendered-conf
              subPath: app-conf-dir
            - name: config
              mountPath: /bitnami/apisix/conf/00_default
            - name: certs
              mountPath: /bitnami/certs
      containers:
        - name: apisix-ingress-controller
          image: docker.io/bitnami/apisix-ingress-controller:1.8.2-debian-12-r6
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - ingress
            - --config-path
            - /bitnami/apisix-ingress-controller/conf/config.yaml
          env:
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/apisix-ingress-controller/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: certs
              mountPath: /bitnami/certs
            - name: control-plane-certs
              mountPath: /etc/ssl/certs/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          configMap:
            name: my-release-apisix-ingress-controller-default
        - name: empty-dir
          emptyDir: {}
        - name: certs
          secret:
            secretName: my-release-apisix-ingress-controller-tls
        - name: control-plane-certs
          secret:
            secretName: my-release-apisix-control-plane-tls
---
# Source: apisix/charts/etcd/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-etcd
  namespace: "apisix-3.2.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: etcd
    app.kubernetes.io/version: 3.5.14
    helm.sh/chart: etcd-10.2.1
    app.kubernetes.io/component: etcd
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: etcd
      app.kubernetes.io/component: etcd
  serviceName: my-release-etcd-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: etcd
        app.kubernetes.io/version: 3.5.14
        helm.sh/chart: etcd-10.2.1
        app.kubernetes.io/component: etcd
      annotations:
        checksum/token-secret: e701bf1b1efcdf4f10f2748f2d73b75159f54ee9064b37d1ad0e1a65291d54f0
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: etcd
                    app.kubernetes.io/component: etcd
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: "my-release-etcd"
      containers:
        - name: etcd
          image: docker.io/bitnami/etcd:3.5.14-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_STS_NAME
              value: "my-release-etcd"
            - name: ETCDCTL_API
              value: "3"
            - name: ETCD_ON_K8S
              value: "yes"
            - name: ETCD_START_FROM_SNAPSHOT
              value: "no"
            - name: ETCD_DISASTER_RECOVERY
              value: "no"
            - name: ETCD_NAME
              value: "$(MY_POD_NAME)"
            - name: ETCD_DATA_DIR
              value: "/bitnami/etcd/data"
            - name: ETCD_LOG_LEVEL
              value: "info"
            - name: ALLOW_NONE_AUTHENTICATION
              value: "yes"
            - name: ETCD_AUTH_TOKEN
              value: "jwt,priv-key=/opt/bitnami/etcd/certs/token/jwt-token.pem,sign-method=RS256,ttl=10m"
            - name: ETCD_ADVERTISE_CLIENT_URLS
              value: "http://$(MY_POD_NAME).my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local:2379,http://my-release-etcd.apisix-3.2.2.tgz.svc.cluster.local:2379"
            - name: ETCD_LISTEN_CLIENT_URLS
              value: "http://0.0.0.0:2379"
            - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
              value: "http://$(MY_POD_NAME).my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local:2380"
            - name: ETCD_LISTEN_PEER_URLS
              value: "http://0.0.0.0:2380"
            - name: ETCD_INITIAL_CLUSTER_TOKEN
              value: "etcd-cluster-k8s"
            - name: ETCD_INITIAL_CLUSTER_STATE
              value: "new"
            - name: ETCD_INITIAL_CLUSTER
              value: "my-release-etcd-0=http://my-release-etcd-0.my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local:2380,my-release-etcd-1=http://my-release-etcd-1.my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local:2380,my-release-etcd-2=http://my-release-etcd-2.my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local:2380"
            - name: ETCD_CLUSTER_DOMAIN
              value: "my-release-etcd-headless.apisix-3.2.2.tgz.svc.cluster.local"
          envFrom:
          ports:
            - name: client
              containerPort: 2379
              protocol: TCP
            - name: peer
              containerPort: 2380
              protocol: TCP
          livenessProbe:
            httpGet:
              port: 2379 
              path: /livez
              scheme: "HTTP"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /opt/bitnami/scripts/etcd/healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - /opt/bitnami/scripts/etcd/prestop.sh
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/etcd/conf/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: data
              mountPath: /bitnami/etcd
            - name: etcd-jwt-token
              mountPath: /opt/bitnami/etcd/certs/token/
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: etcd-jwt-token
          secret:
            secretName: my-release-etcd-jwt-token
            defaultMode: 256
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
