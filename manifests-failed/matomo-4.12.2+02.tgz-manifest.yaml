---
# Source: matomo/charts/mariadb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mariadb
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: matomo/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: matomo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
---
# Source: matomo/templates/secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-matomo-env
  namespace: matomo-4.12.2+02.tgz
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
data:
  ALLOW_EMPTY_PASSWORD: bm8=
  MATOMO_HOST: Y2hhcnQtZXhhbXBsZS5sb2NhbA==
  MATOMO_USERNAME: YWRtaW4=
  MATOMO_EMAIL: YWRtaW5AY2hhcnQtZXhhbXBsZS5sb2NhbA==
  MATOMO_WEBSITE_NAME: VHJhY2tlZCBXZWJzaXRl
  MATOMO_WEBSITE_HOST: aHR0cHM6Ly90cmFja2VkLXdlYnNpdGUubG9jYWw=
  MATOMO_DATABASE_HOST: bXktcmVsZWFzZS1tYXJpYWRi
  MATOMO_DATABASE_PORT_NUMBER: MzMwNg==
  MATOMO_DATABASE_NAME: bWF0b21v
  MATOMO_DATABASE_USER: bWF0b21v
  MATOMO_CACHE_HOST: bXktcmVsZWFzZS1yZWRpcy1oZWFkbGVzcw==
  MATOMO_CACHE_PORT_NUMBER: NjM3OQ==
  MATOMO_CACHE_DATABASE_NUMBER: MA==
---
# Source: matomo/templates/secret-shared.yaml
apiVersion: v1
kind: Secret
metadata:
  name: matomo-shared-credentials
  namespace: matomo-4.12.2+02.tgz
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  matomo-password: "cndXWjUzM0NOTQ=="
  mariadb-password: "V3FEcFJ5d242Rg=="
  mariadb-root-password: "Mmh5Z1haUWtTbg=="
  redis-password: "c25TemJKMmk5Zw=="
---
# Source: matomo/charts/mariadb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mariadb
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=128M
    bind-address=*
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: matomo/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: matomo/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: matomo/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: matomo/charts/mariadb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mariadb
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: matomo/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: matomo/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: matomo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
---
# Source: matomo/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-matomo
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: matomo
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: matomo
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-matomo
      securityContext:
        {}
      initContainers:
        - name: redis-init
          image: bitnami/redis
          imagePullPolicy: Always
          securityContext:
            {}
          resources:
            requests:
              memory: 50Mi
          env:
            - name: MATOMO_CACHE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: redis-password
          envFrom:
            - secretRef:
                name: my-release-matomo-env
          command:
            - /bin/bash
            - -c
          args:
            - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null;
              if [[ $? == 0 ]]; then
              echo "Connection to Redis established."; exit 0; fi;
              echo "Redis init process in progress..."; sleep 1; done;
              echo "No connection to Redis could be established!"; exit 1;
        - name: mariadb-init
          image: bitnami/mariadb
          imagePullPolicy: Always
          securityContext:
            {}
          resources:
            requests:
              memory: 50Mi
          command:
            - /bin/bash
            - -c
          args:
            - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null;
              if [[ $? == 0 ]]; then
              echo "Connection to MariaDB established."; exit 0; fi;
              echo "MariaDB init process in progress..."; sleep 1; done;
              echo "No connection to MariaDB could be established!"; exit 1;
          env:
            - name: MATOMO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
          envFrom:
            - secretRef:
                name: my-release-matomo-env
      containers:
        - name: matomo
          image: "bitnami/matomo:4.12.2-debian-11-r0"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          env:
            - name: MATOMO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: matomo-password
            - name: MATOMO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
          envFrom:
            - secretRef:
                name: my-release-matomo-env
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          readinessProbe:
            httpGet:
              path: /
              port: https
              scheme: HTTPS
            initialDelaySeconds: 90
          volumeMounts:
            - name: data
              mountPath: "/bitnami"
              subPath: ""
          resources:
            {}
      volumes:
        - name: data
          emptyDir: {}
---
# Source: matomo/charts/mariadb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-mariadb
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.3.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels: 
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  serviceName: my-release-mariadb
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 3d4e4798cf982c78b028c5b02ecaffbfa87e69b4c0b3aeaf90b3e8f4bccd9439
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-11.3.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: my-release-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "matomo-4.12.2+02.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.6.10-debian-11-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: "matomo"
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: "matomo"
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mariadb
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: matomo/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "matomo-4.12.2+02.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.3.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.3.7
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: b097c03e7f833ddf445f6bc181d1280bb43e117138c94f7b9374fa731dd9626a
        checksum/health: f25d2437fb27886cde484f1afcc019631e09a1ea65de5d405451a515b916fe0d
        checksum/scripts: 56b7f54fbc75c43a496d5815a144333c7e24a02cbdc8d5bee32c945b3ac1a6f1
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "matomo-4.12.2+02.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.5-debian-11-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: matomo-shared-credentials
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: matomo/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-matomo-archive
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "0 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: "OnFailure"
          initContainers:
            - name: redis-init
              image: bitnami/redis
              imagePullPolicy: Always
              securityContext:
                {}
              resources:
                requests:
                  memory: 50Mi
              env:
                - name: MATOMO_CACHE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: redis-password
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null;
                  if [[ $? == 0 ]]; then
                  echo "Connection to Redis established."; exit 0; fi;
                  echo "Redis init process in progress..."; sleep 1; done;
                  echo "No connection to Redis could be established!"; exit 1;
            - name: mariadb-init
              image: bitnami/mariadb
              imagePullPolicy: Always
              securityContext:
                {}
              resources:
                requests:
                  memory: 50Mi
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null;
                  if [[ $? == 0 ]]; then
                  echo "Connection to MariaDB established."; exit 0; fi;
                  echo "MariaDB init process in progress..."; sleep 1; done;
                  echo "No connection to MariaDB could be established!"; exit 1;
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
          containers:
            - name: my-release-matomo-archive
              image: "bitnami/matomo:4.12.2-debian-11-r0"
              imagePullPolicy: IfNotPresent
              securityContext:
                {}
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
                - name: MATOMO_SKIP_BOOTSTRAP
                  value: "yes"
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - . /opt/bitnami/scripts/matomo-env.sh &&
                  . /opt/bitnami/scripts/libbitnami.sh &&
                  . /opt/bitnami/scripts/liblog.sh &&
                  /opt/bitnami/scripts/php/setup.sh &&
                  /opt/bitnami/scripts/mysql-client/setup.sh &&
                  /opt/bitnami/scripts/matomo/setup.sh &&
                  /post-init.sh &&
                  /opt/bitnami/php/bin/php /opt/bitnami/matomo/console core:archive
              volumeMounts:
                - name: data
                  mountPath: "/bitnami"
                  subPath: ""
              resources:
                {}
          volumes:
            - name: data
              emptyDir: {}
---
# Source: matomo/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-matomo-scheduled-tasks
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: "Never"
          initContainers:
            - name: redis-init
              image: bitnami/redis
              imagePullPolicy: Always
              securityContext:
                {}
              resources:
                requests:
                  memory: 50Mi
              env:
                - name: MATOMO_CACHE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: redis-password
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do redis-cli -h ${MATOMO_CACHE_HOST} -a ${MATOMO_CACHE_PASSWORD} ping &> /dev/null;
                  if [[ $? == 0 ]]; then
                  echo "Connection to Redis established."; exit 0; fi;
                  echo "Redis init process in progress..."; sleep 1; done;
                  echo "No connection to Redis could be established!"; exit 1;
            - name: mariadb-init
              image: bitnami/mariadb
              imagePullPolicy: Always
              securityContext:
                {}
              resources:
                requests:
                  memory: 50Mi
              command:
                - /bin/bash
                - -c
              args:
                - for i in {30..0}; do mysql -h${MATOMO_DATABASE_HOST} -u${MATOMO_DATABASE_USER} -p${MATOMO_DATABASE_PASSWORD} -N -e "SELECT 1" &> /dev/null;
                  if [[ $? == 0 ]]; then
                  echo "Connection to MariaDB established."; exit 0; fi;
                  echo "MariaDB init process in progress..."; sleep 1; done;
                  echo "No connection to MariaDB could be established!"; exit 1;
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
          containers:
            - name: my-release-matomo-scheduled-tasks
              image: "bitnami/matomo:4.12.2-debian-11-r0"
              imagePullPolicy: IfNotPresent
              securityContext:
                {}
              env:
                - name: MATOMO_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: matomo-shared-credentials
                      key: mariadb-password
              envFrom:
                - secretRef:
                    name: my-release-matomo-env
              command:
                - /bin/bash
                - -c
              args:
                - . /opt/bitnami/scripts/matomo-env.sh &&
                  . /opt/bitnami/scripts/libbitnami.sh &&
                  . /opt/bitnami/scripts/liblog.sh &&
                  /opt/bitnami/scripts/php/setup.sh &&
                  /opt/bitnami/scripts/mysql-client/setup.sh &&
                  /opt/bitnami/scripts/matomo/setup.sh &&
                  /post-init.sh &&
                  /opt/bitnami/php/bin/php /opt/bitnami/matomo/console core:run-scheduled-tasks
              volumeMounts:
                - name: data
                  mountPath: "/bitnami"
                  subPath: ""
              resources:
                {}
          volumes:
            - name: data
              emptyDir: {}
---
# Source: matomo/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-matomo-test-connection"
  labels:
    app.kubernetes.io/name: matomo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4.12.2"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-matomo:80']
  restartPolicy: Never
