---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clustersync-resource
  namespace: union-operator-v0.0.91.tgz
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
---
# Source: union-operator/charts/union/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: union-operator-v0.0.91.tgz
type: Opaque
stringData:
  client_secret: '<App Secret from uctl create app>'
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create an empty secret that the first propeller pod will populate
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
type: Opaque
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator
type: Opaque
stringData:
  app_secret: <App Secret from uctl create app>
  tunnel_token: ""
---
# Source: union-operator/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: union-operator-cluster-name
type: Opaque
data:
  cluster_name: "YzBrb3BkdWcwdGI4YzltazY="
---
# Source: union-operator/templates/secret.yaml
# Secrets are required for syncresources, even if running standalone. Add empty secrets until resolved.
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
type: Opaque
---
# Source: union-operator/charts/union/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
data:
  a_namespace.yaml.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
      labels:
        union.ai/namespace-type: flyte
    spec:
      finalizers:
      - kubernetes
    
  b_default_service_account.yaml.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        {{ defaultUserRoleKey }}: {{ defaultUserRoleValue }}
    
  c_project_resource_quota.yaml.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
        requests.nvidia.com/gpu: {{ projectQuotaNvidiaGpu }}
---
# Source: union-operator/charts/union/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - staging:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      - development:
        - projectQuotaCpu:
            value: "4096"
        - projectQuotaMemory:
            value: 2Ti
        - projectQuotaNvidiaGpu:
            value: "256"
        - defaultUserRoleKey:
            value: 'foo'
        - defaultUserRoleValue:
            value: 'bar'
      refreshInterval: 5m
      standaloneDeployment: true
      templatePath: /etc/flyte/clusterresource/templates
  admin.yaml: | 
    admin:
      clientId: '<App Id from uctl create app>'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///<Union Cloud URL>'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: union-operator/charts/union/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: '<App Id from uctl create app>'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: 'dns:///<Union Cloud URL>'
      insecure: false
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: 'dns:///<Union Cloud URL>'
      insecure: false
      type: datacatalog
      use-admin-auth: true
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot-release:v1.9.0
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    cache:
      max_size_mbs: 1024
      target_gc_percent: 70
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
      shard:
        shard-count: 3
        type: Hash
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      event-config:
        raw-output-policy: inline
      gc-interval: 12h
      kube-client-config:
        burst: 25
        qps: 100
        timeout: 30s
      leader-election:
        enabled: false
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 50
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 1s
        queue:
          base-delay: 0s
          capacity: 10000
          max-delay: 60s
          rate: 1000
          type: maxof
        sub-queue:
          capacity: 10000
          rate: 1000
          type: bucket
        type: batch
      rawoutput-prefix: 's3://my-s3-bucket'
      workers: 40
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars: []
        default-memory: 100Mi
  logger.yaml: | 
    logger:
      level: 4
      show-source: true
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket-prod"
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union-operator-v0.0.91.tgz.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://localhost:30084
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 0
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: true
---
# Source: union-operator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    union:
      connection:
        host: dns:///<Union Cloud URL>
      auth:
        type: ClientSecret
        clientId: <App Id from uctl create app>
        clientSecretLocation: /etc/union/secret/app_secret
        authorizationMetadataKey: "flyte-authorization"
        tokenRefreshWindow: 5m
    operator:
      enabled: true
      enableTunnelService: false
      clusterId:
        organization: <Union Cloud URL>
      dependenciesHeartbeat:
        propeller:
          endpoint: http://flytepropeller.union-operator-v0.0.91.tgz.svc.cluster.local:10254
        proxy:
          endpoint: http://union-operator-proxy.union-operator-v0.0.91.tgz.svc.cluster.local:10254
        prometheus-crit:
          endpoint: http://union-operator-prometheus-crit.union-operator-v0.0.91.tgz.svc.cluster.local:80/prometheus-crit/-/healthy
      clusterData:
        appId: <App Id from uctl create app>
        cloudHostName: <Union Cloud URL>
        metadataBucketPrefix: s3://my-s3-bucket
        bucketName:  my-s3-bucket
        bucketRegion: us-east-2
        userRoleKey: foo
        userRole: bar
        storageType: sandbox
        gcpProjectId: dummy-gcs-projectId
      collectUsages:
        enabled: false
  logger.yaml: |
    logger:
      level: 4
      show-source: true
  storage.yaml: | 
    storage:
      type: minio
      container: "my-s3-bucket-prod"
      stow:
        kind: s3
        config:
          access_key_id: minio
          auth_type: accesskey
          secret_key: miniostorage
          disable_ssl: true
          endpoint: http://minio.union-operator-v0.0.91.tgz.svc.cluster.local:9000
          region: us-east-1
      signedUrl:
        stowConfigOverride:
          endpoint: http://localhost:30084
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
---
# Source: union-operator/charts/union/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  version: v1alpha1
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-v0.0.91.tgz-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-operator-v0.0.91.tgz-flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
      - rbac.authorization.k8s.io
    resources:
      - configmaps
      - namespaces
      - pods
      - resourcequotas
      - roles
      - rolebindings
      - secrets
      - services
      - serviceaccounts
    verbs:
      - '*'
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - pods/log
      - pods
    verbs:
      - get
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
rules:
  # Allow Access to all resources under flyte.lyft.com
  - apiGroups:
      - flyte.lyft.com
    resources:
      - flyteworkflows
      - flyteworkflows/finalizers
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
      - patch
      - post
      - deletecollection
  - apiGroups:
      - '*'
    resources:
      - resourcequotas
      - pods
      - configmaps
      - podtemplates
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - delete
---
# Source: union-operator/charts/union/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-v0.0.91.tgz-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-v0.0.91.tgz-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: union-operator-v0.0.91.tgz-flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-v0.0.91.tgz-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/templates/cluster-resource-sync.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustersync-resource
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustersync-resource
subjects:
  - kind: ServiceAccount
    name: clustersync-resource
    namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/templates/serviceaccount-logproxy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator-proxy
subjects:
  - kind: ServiceAccount
    name: union-operator-proxy
    namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - '*'
    resources:
      - secrets
      - deployments
    verbs:
      - get
      - list
      - watch
      - create
      - update
---
# Source: union-operator/templates/serviceaccount.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: union-operator
subjects:
  - kind: ServiceAccount
    name: union-operator
    namespace: union-operator-v0.0.91.tgz
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: union-operator/templates/minio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: minio
    port: 9000
    protocol: TCP
    targetPort: minio
  - name: minio-console
    port: 9001
    protocol: TCP
    targetPort: minio-console
  selector: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-release
---
# Source: union-operator/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: my-release-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.91"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 10254
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: my-release-proxy
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
---
# Source: union-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flytepropeller
spec:
  ports:
    - port: 10254
  selector:
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: my-release
---
# Source: union-operator/charts/union/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        configChecksum: "b2bc83ff9bae7f0aa907471414af07ed2c2c1f5a1bf9059e06a7a2e366c4269"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: my-release
        helm.sh/chart: union-v1.9.0
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: "cr.flyte.org/flyteorg/flyteadmin-release:v1.9.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          - name: auth
            mountPath: /etc/secrets/
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
      serviceAccountName: clustersync-resource
      volumes:
        
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
        - name: auth
          secret:
            secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: union-operator-v0.0.91.tgz
  name: flytepropeller-manager
  labels: 
    app.kubernetes.io/name: flytepropeller-manager
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-v1.9.0
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller-manager
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        configChecksum: "db4cdf1032ed5eeba5b7a850d46df4d971e76eb862e58ee61380aacbd13c37c"
      labels: 
        app.kubernetes.io/name: flytepropeller-manager
        app.kubernetes.io/instance: my-release
        helm.sh/chart: union-v1.9.0
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      containers:
      - command:
        - flytepropeller-manager
        - --manager.pod-template-namespace
        - union-operator-v0.0.91.tgz
        - --config
        - /etc/flyte/config/*.yaml
        - --propeller.cluster-id
        - 'couj1hmh2pz7fqkp1'
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.9.0"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller-manager
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: "4"
            ephemeral-storage: 500Mi
            memory: 8Gi
          requests:
            cpu: 3670m
            ephemeral-storage: 100Mi
            memory: 4Gi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: union-operator/charts/union/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: union-operator-v0.0.91.tgz
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v1.9.0
      annotations:
        configChecksum: "db4cdf1032ed5eeba5b7a850d46df4d971e76eb862e58ee61380aacbd13c37c"
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 1001
        fsGroupChangePolicy: "Always"
      serviceAccountName: flyte-pod-webhook
      initContainers:
      - name: generate-secrets
        image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.9.0"
        imagePullPolicy: "IfNotPresent"
        command:
          - flytepropeller
        args:
          - webhook
          - init-certs
          - --config
          - /etc/flyte/config/*.yaml
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - name: config-volume
            mountPath: /etc/flyte/config
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.9.0"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: union-operator/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator-proxy
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator-proxy
    app.kubernetes.io/instance: my-release-proxy
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "v0.0.91"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator-proxy
      app.kubernetes.io/instance: my-release-proxy
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator-proxy
        app.kubernetes.io/instance: my-release-proxy
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator-proxy
      securityContext:
        {}
      containers:
        - name: union-operator-proxy
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:2da8e8bf09cc6ce4898b6911149e81c5b95f140f"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "1"
              ephemeral-storage: 500Mi
              memory: 1Gi
            requests:
              cpu: 100m
              ephemeral-storage: 100Mi
              memory: 128Mi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
          args:
            - operator
            - proxy
            - --config
            - /etc/union/config/*.yaml
          ports:
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
---
# Source: union-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: union-operator
  labels:
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/name: union-operator
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.0.91"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: union-operator
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        configChecksum: "5b670d1b53825c6555cc8d8e80eccd064171d35f3cc69ba28cbec5e71c05332"
        prometheus.io/path: /metrics
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: union-operator
        app.kubernetes.io/instance: my-release
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: union-operator
      securityContext:
        {}
      volumes:
        - name: config-volume
          configMap:
            name: union-operator
        - name: secret-volume
          secret:
            secretName: union-operator
      containers:
        - name: union-operator
          securityContext:
            {}
          image: "public.ecr.aws/p0i0a9q8/unionoperator:2da8e8bf09cc6ce4898b6911149e81c5b95f140f"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            limits:
              cpu: "4"
              ephemeral-storage: 500Mi
              memory: 8Gi
            requests:
              cpu: "1"
              ephemeral-storage: 100Mi
              memory: 4Gi
          volumeMounts:
            - mountPath: /etc/union/config
              name: config-volume
            - mountPath: /etc/union/secret
              name: secret-volume
          env:
            - name: CLUSTER_NAME
              valueFrom:
                secretKeyRef:
                  name: union-operator-cluster-name
                  key: cluster_name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEPLOYMENT_NAME
              value: union-operator
          args:
            - operator
            - serve
            - --config
            - /etc/union/config/*.yaml
            - --operator.clusterId.name
            - "$(CLUSTER_NAME)"
            - --operator.tunnel.k8sSecretName
            - union-operator
          ports:
            - name: grpc
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8089
              protocol: TCP
            - name: debug
              containerPort: 10254
              protocol: TCP
---
# Source: union-operator/templates/minio/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: union-operator-v0.0.91.tgz
  labels: 
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: my-release
    helm.sh/chart: union-operator-v0.0.91
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: minio
        app.kubernetes.io/instance: my-release
        helm.sh/chart: union-operator-v0.0.91
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
      - image: "ecr.flyte.org/bitnami/minio:2021.10.13-debian-10-r0"
        imagePullPolicy: "IfNotPresent"
        name: minio
        env:
          - name: MINIO_ACCESS_KEY
            value: minio
          - name: MINIO_SECRET_KEY
            value: miniostorage
          - name: MINIO_DEFAULT_BUCKETS
            value: my-s3-bucket
        ports:
        - containerPort: 9000
          name: minio
        - containerPort: 9001
          name: minio-console
        resources: 
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        emptyDir: {}
---
# Source: union-operator/charts/union/templates/propeller/manager.yaml
apiVersion: v1
kind: PodTemplate
metadata:
  name: flytepropeller-template
  namespace: union-operator-v0.0.91.tgz
template:
  metadata:
    annotations:
      configChecksum: "db4cdf1032ed5eeba5b7a850d46df4d971e76eb862e58ee61380aacbd13c37c"
    labels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: my-release
      helm.sh/chart: union-v1.9.0
      app.kubernetes.io/managed-by: Helm
      app: flytepropeller
  spec:
    securityContext:
      fsGroup: 65534
      runAsUser: 1001
      fsGroupChangePolicy: "Always"
    containers:
    - command:
      - flytepropeller
      - --config
      - /etc/flyte/config/*.yaml
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      image: "cr.flyte.org/flyteorg/flytepropeller-release:v1.9.0"
      imagePullPolicy: "IfNotPresent"
      name: flytepropeller
      ports:
      - containerPort: 10254
      resources: 
        limits:
          cpu: "4"
          ephemeral-storage: 500Mi
          memory: 8Gi
        requests:
          cpu: 3670m
          ephemeral-storage: 100Mi
          memory: 4Gi
      volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
      terminationMessagePolicy: "FallbackToLogsOnError"
    serviceAccountName: flytepropeller
    volumes:
    - configMap:
        name: flyte-propeller-config
      name: config-volume
    - name: auth
      secret:
        secretName: flyte-secret-auth
