---
# Source: yopass/charts/memcached/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: memcached
  namespace: "yopass-3.8.5.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcached
      app.kubernetes.io/version: 1.6.28
      helm.sh/chart: memcached-7.4.5
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
        - port: 9150
---
# Source: yopass/charts/memcached/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: memcached
  namespace: yopass-3.8.5.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcached
---
# Source: yopass/charts/memcached/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: memcached
  namespace: yopass-3.8.5.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
---
# Source: yopass/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount

metadata:
  name: my-release-yopass
  namespace: yopass-3.8.5.tgz
  labels:
    helm.sh/chart: "yopass-3.8.5"
    app.kubernetes.io/name: "yopass"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "11.16.0"
    app.kubernetes.io/managed-by: "Helm"
---
# Source: yopass/charts/memcached/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: memcached-metrics
  namespace: yopass-3.8.5.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: "9150"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: metrics
      port: 9150
      targetPort: metrics
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcached
---
# Source: yopass/charts/memcached/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: memcached
  namespace: yopass-3.8.5.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcached
---
# Source: yopass/templates/service.yaml
apiVersion: v1
kind: Service

metadata:
  name: my-release-yopass
  namespace: yopass-3.8.5.tgz
  labels:
    helm.sh/chart: "yopass-3.8.5"
    app.kubernetes.io/name: "yopass"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "11.16.0"
    app.kubernetes.io/managed-by: "Helm"

spec:
  type: ClusterIP

  ports:
    - name: http
      port: 3000
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 3001
      targetPort: metrics
      protocol: TCP

  selector:
    app.kubernetes.io/name: yopass
    app.kubernetes.io/instance: my-release
---
# Source: yopass/charts/memcached/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
  namespace: yopass-3.8.5.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcached-7.4.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcached
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcached
        app.kubernetes.io/version: 1.6.28
        helm.sh/chart: memcached-7.4.5
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcached
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: memcached
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.28-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
        - name: metrics
          image: docker.io/bitnami/memcached-exporter:0.14.3-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: metrics
              containerPort: 9150
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: 9150
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
            httpGet:
              path: /metrics
              port: 9150
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: yopass/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

metadata:
  name: my-release-yopass
  namespace: yopass-3.8.5.tgz
  labels:
    helm.sh/chart: "yopass-3.8.5"
    app.kubernetes.io/name: "yopass"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "11.16.0"
    app.kubernetes.io/managed-by: "Helm"

spec:
  replicas: 1

  strategy:
    
    type: Recreate

  selector:
    matchLabels:
      app.kubernetes.io/name: yopass
      app.kubernetes.io/instance: my-release

  template:
    metadata:
      labels:
        helm.sh/chart: "yopass-3.8.5"
        app.kubernetes.io/name: "yopass"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/version: "11.16.0"
        app.kubernetes.io/managed-by: "Helm"

    spec:
      serviceAccountName: my-release-yopass

      containers:
        - name: yopass
          image: jhaals/yopass:11.16.0
          imagePullPolicy: IfNotPresent

          args:
            - --address=0.0.0.0
            - --port=3000
            - --metrics-port=3001
            - --database=memcached
            - --memcached=memcached:11211
            - --max-length=10000

          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 3001
              protocol: TCP

          livenessProbe:
            httpGet:
              path: /
              port: http

          readinessProbe:
            httpGet:
              path: /
              port: http

          resources:
            limits: {}
            requests:
              cpu: 100m
              memory: 64Mi
---
# Source: yopass/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod

metadata:
  name: "my-release-yopass-test-connection"
  labels:
    helm.sh/chart: "yopass-3.8.5"
    app.kubernetes.io/name: "yopass"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: "11.16.0"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    helm.sh/hook: "test-success"

spec:
  restartPolicy: Never

  containers:
    - name: wget
      image: busybox
      command:
        - wget
      args:
        - --spider
        - http://my-release-yopass:3000
