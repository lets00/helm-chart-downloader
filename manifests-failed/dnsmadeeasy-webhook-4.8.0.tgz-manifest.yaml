---
# Source: dnsmadeeasy-webhook/templates/common.tpl
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-dnsmadeeasy-webhook
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-dnsmadeeasy-webhook
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - "secrets"
      - "configmaps"
    verbs:
      - "get"
      - "list"
      - "watch"
  # Required since k8s v1.20
  - apiGroups:
      - "flowcontrol.apiserver.k8s.io"
    resources:
      - 'prioritylevelconfigurations'
      - 'flowschemas'
    verbs:
      - 'list'
      - 'watch'
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-dnsmadeeasy-webhook-domain-solver
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - acme.mycompany.com
    resources:
      - '*'
    verbs:
      - 'create'
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-dnsmadeeasy-webhook
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-dnsmadeeasy-webhook
subjects:
  - kind: ServiceAccount
    name: my-release-dnsmadeeasy-webhook
    namespace: dnsmadeeasy-webhook-4.8.0.tgz
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-dnsmadeeasy-webhook-auth-delegator
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-dnsmadeeasy-webhook
    namespace: dnsmadeeasy-webhook-4.8.0.tgz
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-dnsmadeeasy-webhook-domain-solver
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-dnsmadeeasy-webhook-domain-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
---
# Source: dnsmadeeasy-webhook/templates/rbac.yaml
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-dnsmadeeasy-webhook-webhook-authentication-reader
  namespace: kube-system
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-dnsmadeeasy-webhook
    namespace: dnsmadeeasy-webhook-4.8.0.tgz
---
# Source: dnsmadeeasy-webhook/templates/common.tpl
apiVersion: v1
kind: Service
metadata:
  name: my-release-dnsmadeeasy-webhook
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/version: 1.2.0
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
  annotations:
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 4443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
---
# Source: dnsmadeeasy-webhook/templates/common.tpl
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dnsmadeeasy-webhook
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/version: 1.2.0
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: dnsmadeeasy-webhook
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dnsmadeeasy-webhook
        app.kubernetes.io/instance: my-release
    spec:
      
      serviceAccountName: my-release-dnsmadeeasy-webhook
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: my-release-dnsmadeeasy-webhook
          image: "ghcr.io/geek-cookbook/dnsmadeeasy-webhook:v1.2.0"
          imagePullPolicy: IfNotPresent
          args:
            
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
            - --secure-port=4443
          env:
            - name: GROUP_NAME
              value: acme.mycompany.com
          ports:
            - name: https
              containerPort: 4443
              protocol: TCP
          volumeMounts:
            - name: certs
              mountPath: /tls
              readOnly: true
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 1
      volumes:
        - name: certs
          secret:
            secretName: my-release-dnsmadeeasy-webhook-webhook-tls
---
# Source: dnsmadeeasy-webhook/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.acme.mycompany.com
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/inject-ca-from: "dnsmadeeasy-webhook-4.8.0.tgz/my-release-dnsmadeeasy-webhook-webhook-tls"
spec:
  group: acme.mycompany.com
  groupPriorityMinimum: 1000
  versionPriority: 15
  #TBD : avoid insecureSkipTLSVerify
  insecureSkipTLSVerify: true
  service:
    name: my-release-dnsmadeeasy-webhook
    namespace: dnsmadeeasy-webhook-4.8.0.tgz
  version: v1alpha1
---
# Source: dnsmadeeasy-webhook/templates/pki.yaml
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-release-dnsmadeeasy-webhook-ca
  namespace: "dnsmadeeasy-webhook-4.8.0.tgz"
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: my-release-dnsmadeeasy-webhook-ca
  duration: 43800h # 5y
  issuerRef:
    name: my-release-dnsmadeeasy-webhook-selfsign
    kind: Issuer
  commonName: "ca.dnsmadeeasy-webhook.cert-manager"
  isCA: true
---
# Source: dnsmadeeasy-webhook/templates/pki.yaml
# Finally, generate a serving certificate for the webhook to use
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-release-dnsmadeeasy-webhook-webhook-tls
  namespace: "dnsmadeeasy-webhook-4.8.0.tgz"
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  secretName: my-release-dnsmadeeasy-webhook-webhook-tls
  duration: 8760h # 1y
  issuerRef:
    name: my-release-dnsmadeeasy-webhook-ca
    kind: Issuer
  dnsNames:
  - my-release-dnsmadeeasy-webhook
  - my-release-dnsmadeeasy-webhook.dnsmadeeasy-webhook-4.8.0.tgz
  - my-release-dnsmadeeasy-webhook.dnsmadeeasy-webhook-4.8.0.tgz.svc
---
# Source: dnsmadeeasy-webhook/templates/pki.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-release-dnsmadeeasy-webhook-selfsign
  namespace: "dnsmadeeasy-webhook-4.8.0.tgz"
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selfSigned: {}
---
# Source: dnsmadeeasy-webhook/templates/pki.yaml
# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-release-dnsmadeeasy-webhook-ca
  namespace: "dnsmadeeasy-webhook-4.8.0.tgz"
  labels:
    helm.sh/chart: dnsmadeeasy-webhook-4.8.0
    app.kubernetes.io/name: dnsmadeeasy-webhook
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.2.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ca:
    secretName: my-release-dnsmadeeasy-webhook-ca
