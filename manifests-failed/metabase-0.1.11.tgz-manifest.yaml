---
# Source: metabase/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "metabase-0.1.11.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "QUZUdWxPTzZ1RA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: metabase/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-metabase
  namespace: metabase-0.1.11.tgz
data:
  db-password: Y2lKOEtmaU1VSw==
---
# Source: metabase/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "metabase-0.1.11.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: metabase/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "metabase-0.1.11.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: metabase/templates/metabase-svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-metabase
  namespace: metabase-0.1.11.tgz
spec:
  selector:
    org.metabase.instance: my-release-metabase
  ports:
  - targetPort: 3000
    port: 3000
    name: app
  type: ClusterIP
---
# Source: metabase/templates/metabase-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-metabase
  namespace: metabase-0.1.11.tgz
  labels:
    org.metabase.project: metabase
    org.metabase.app: app
    org.metabase.instance: my-release-metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      org.metabase.instance: my-release-metabase
  template:
    metadata:
      annotations:
        checksum/secrets: 06a465c27939de1de2279f77a8c711aff607f28e47e81732ef7d4bcc28e514c2
      labels:
        org.metabase.project: metabase
        org.metabase.app: app
        org.metabase.instance: my-release-metabase
    spec:
      initContainers:

      # Wait for db
      - name: wait-db
        image: jwilder/dockerize:0.6.1
        args:
        - -wait
        - tcp://my-release-postgresql.metabase-0.1.11.tgz.svc:5432
        - -timeout
        - 300s

      containers:
      - name: app
        image: "metabase/metabase:latest"
        # Mount custom plugin folder
        volumeMounts:
        - name: plugin-volume
          mountPath: /plugins

        env:
        - name: MB_DB_TYPE
          value: postgres
        - name: MB_DB_DBNAME
          value: "metabase"
        - name: MB_DB_PORT
          value: "5432"
        - name: MB_DB_USER
          value: "metabase"
        - name: MB_DB_PASS
          valueFrom:
            secretKeyRef:
              name: my-release-metabase
              key: db-password
        - name: MB_DB_HOST
          value: "my-release-postgresql.metabase-0.1.11.tgz.svc"

        ports:
        - containerPort: 3000

        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 15
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 5

      volumes:
      # Temp folder to host downloaded plugins
      - name: plugin-volume
        emptyDir: {}
---
# Source: metabase/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "metabase-0.1.11.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.26
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "metabase-0.1.11.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: standard
---
# Source: metabase/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-test
  namespace: metabase-0.1.11.tgz
  annotations:
    "helm.sh/hook": test-success
    # "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  restartPolicy: Never
  containers:
    - name: my-release-test-http
      # Test published services - change this to reflect your endpoints
      image: blacktop/httpie
      imagePullPolicy: IfNotPresent
      command:
      - sh
      - -ce
      - |
        http --ignore-stdin --check-status --print hb "http://my-release-metabase.metabase-0.1.11.tgz.svc:3000/api/health"
