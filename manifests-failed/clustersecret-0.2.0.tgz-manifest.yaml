---
# Source: clustersecret/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-clustersecret
  namespace: clustersecret-0.2.0.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clustersecret
    helm.sh/chart: clustersecret-0.2.0
---
# Source: clustersecret/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-clustersecret
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clustersecret
    helm.sh/chart: clustersecret-0.2.0
rules:
# Framework: knowing which other operators are running (i.e. peering).
- apiGroups: [apiextensions.k8s.io]
  resources: [customresourcedefinitions]
  verbs: [watch, list, get, patch]
# Framework: posting the events about the handlers progress/errors.
- apiGroups: ["",events.k8s.io]
  resources: [events]
  verbs: [create]
# Application: read-only access own custom resources for watching cluster-wide.
- apiGroups: [clustersecret.io]
  resources: [clustersecrets]
  verbs: [watch, list, get, patch]
# Watch namespaces
- apiGroups: [""]
  resources: [namespaces, namespaces/status]
  verbs: [watch, list, get, patch]
# Handle secrets
- apiGroups: [""]
  resources: [secrets]
  verbs: [watch, list, get, patch, update, create, delete]
---
# Source: clustersecret/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-clustersecret
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clustersecret
    helm.sh/chart: clustersecret-0.2.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-clustersecret
subjects:
- kind: ServiceAccount
  name: my-release-clustersecret
  namespace: clustersecret-0.2.0.tgz
---
# Source: clustersecret/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-clustersecret
  namespace: clustersecret-0.2.0.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: clustersecret
    helm.sh/chart: clustersecret-0.2.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: clustersecret
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/name: clustersecret
    spec:
      containers:
      - name: my-release-clustersecret
        image: flag5/clustersecret:0.0.9
        imagePullPolicy: IfNotPresent
        command:
        - kopf
        args:
        - run
        - -A
        - /src/handlers.py
      serviceAccountName: my-release-clustersecret
  strategy:
    type: Recreate
