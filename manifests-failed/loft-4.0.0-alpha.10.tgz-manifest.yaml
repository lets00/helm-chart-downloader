---
# Source: loft/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: loft
  labels:
    app: loft
    release: my-release
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: loft
      release: my-release
---
# Source: loft/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: loft
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
---
# Source: loft/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: loft-manager-config
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
  annotations:
    loft.sh/version: 4.0.0-alpha.10
data:
  config: YXVkaXQ6CiAgZW5hYmxlZDogdHJ1ZQ==
---
# Source: loft/templates/rbac/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: loft-management-admin
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
subjects:
- kind: ServiceAccount
  name: loft
  namespace: loft-4.0.0-alpha.10.tgz
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: loft/templates/apiservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: loft-apiservice
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
spec:
  ports:
    - name: apiservice
      port: 443
      targetPort: 8443
      protocol: TCP
  selector:
    app: loft
    release: my-release
---
# Source: loft/templates/apiservice.yaml
apiVersion: v1
kind: Service
metadata:
  name: loft-apiservice-agent
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
spec:
  ports:
    - name: apiservice
      port: 443
      targetPort: 9444
      protocol: TCP
  selector:
    app: loft
    release: my-release
---
# Source: loft/templates/ingress-wakeup-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loft-ingress-wakeup-agent
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    loft.sh/service: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: http-wakeup
      port: 9090
      targetPort: 9090
      protocol: TCP
  selector:
    app: loft
    release: my-release
---
# Source: loft/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: loft
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    loft.sh/service: loft
    chart: "loft"
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
      nodePort: 
      protocol: TCP
    - name: https
      port: 443
      targetPort: 10443
      nodePort: 
      protocol: TCP
  selector:
    app: loft
    release: my-release
---
# Source: loft/templates/webhook.yaml
apiVersion: v1
kind: Service
metadata:
  name: loft-webhook-agent
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: 9443
      protocol: TCP
  selector:
    app: loft
    release: my-release
---
# Source: loft/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loft
  namespace: loft-4.0.0-alpha.10.tgz
  labels:
    app: loft
    chart: "loft-4.0.0-alpha.10"
    release: "my-release"
    heritage: "Helm"
spec:
  selector:
    matchLabels:
      app: loft
      release: my-release
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: loft
        release: my-release
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: loft
      volumes:
        - name: loft-data
          emptyDir: {}
      containers:
      - name: manager
        image: ghcr.io/loft-sh/loft:4.0.0-alpha.10
        ports:
          - name: http
            containerPort: 8080
          - name: https
            containerPort: 10443
          - name: https-webhook
            containerPort: 9443
          - name: http-wakeup
            containerPort: 9090
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          failureThreshold: 20
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          failureThreshold: 20
          initialDelaySeconds: 5
          periodSeconds: 10
        env:
        - name: ADMIN_EMAIL
          value: 
        - name: CHART_VERSION
          value: 4.0.0-alpha.10
        - name: ADMIN_PASSWORD_HASH
          value: "6fa2288c361becce3e30ba4c41be7d8ba01e3580566f7acc76a7f99994474c46"
        - name: LOFT_LOG_ENCODING
          value: console
        - name: LOFT_LOG_LEVEL
          value: info
        volumeMounts:
          - mountPath: /var/lib/loft
            name: loft-data
        resources:
          limits:
            cpu: "2"
            memory: 4Gi
          requests:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: NotIn
                values:
                - SPOT
              - key: kubernetes.azure.com/scalesetpriority
                operator: NotIn
                values:
                - spot
              - key: cloud.google.com/gke-provisioning
                operator: NotIn
                values:
                - spot
            weight: 1
---
# Source: loft/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1.management.loft.sh
spec:
  version: v1
  versionPriority: 1000
  group: management.loft.sh
  groupPriorityMinimum: 10000
  service:
    name: loft-apiservice
    namespace: loft-4.0.0-alpha.10.tgz
