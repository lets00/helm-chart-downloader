---
# Source: dolphinscheduler/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "dolphinscheduler-2.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "RG9scGhpbnNjaGVkdWxlckAyMDIy"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: dolphinscheduler/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-zookeeper-scripts
  namespace: dolphinscheduler-2.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: dolphinscheduler/templates/configmap-dolphinscheduler-common.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-common
  labels:
    app.kubernetes.io/name: my-release-common
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
data:
  DATASOURCE_ENCRYPTION_ENABLE: "false"
  DATASOURCE_ENCRYPTION_SALT: "!@#$%^&*"
  DATAX_HOME: "/opt/soft/datax"
  DATA_BASEDIR_PATH: "/tmp/dolphinscheduler"
  DOLPHINSCHEDULER_OPTS: ""
  FLINK_HOME: "/opt/soft/flink"
  FS_DEFAULT_FS: "file:///"
  FS_S3A_ACCESS_KEY: "xxxxxxx"
  FS_S3A_ENDPOINT: "s3.xxx.amazonaws.com"
  HADOOP_CONF_DIR: "/opt/soft/hadoop/etc/hadoop"
  HADOOP_HOME: "/opt/soft/hadoop"
  HADOOP_SECURITY_AUTHENTICATION_STARTUP_STATE: "false"
  HDFS_ROOT_USER: "hdfs"
  HIVE_HOME: "/opt/soft/hive"
  JAVA_HOME: "/usr/local/openjdk-8"
  JAVA_SECURITY_KRB5_CONF_PATH: "/opt/krb5.conf"
  KERBEROS_EXPIRE_TIME: "2"
  LOGIN_USER_KEYTAB_PATH: "/opt/hdfs.keytab"
  LOGIN_USER_KEYTAB_USERNAME: "hdfs@HADOOP.COM"
  PYTHON_HOME: "/usr/bin/python"
  RESOURCE_MANAGER_HTTPADDRESS_PORT: "8088"
  RESOURCE_STORAGE_TYPE: "HDFS"
  RESOURCE_UPLOAD_PATH: "/dolphinscheduler"
  SPARK_HOME1: "/opt/soft/spark1"
  SPARK_HOME2: "/opt/soft/spark2"
  SUDO_ENABLE: "true"
  YARN_APPLICATION_STATUS_ADDRESS: "http://ds1:%s/ws/v1/cluster/apps/%s"
  YARN_JOB_HISTORY_STATUS_ADDRESS: "http://ds1:19888/ws/v1/history/mapreduce/jobs/%s"
  YARN_RESOURCEMANAGER_HA_RM_IDS: ""
---
# Source: dolphinscheduler/templates/configmap.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-configs
  labels:
    app.kubernetes.io/name: my-release-common
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
data:
  common_properties: |-
    #
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    alert.rpc.port=50052
    aws.access.key.id=minioadmin
    aws.endpoint=http://localhost:9000
    aws.region=us-east-1
    aws.secret.access.key=minioadmin
    data-quality.jar.name=dolphinscheduler-data-quality-dev-SNAPSHOT.jar
    data.basedir.path=/tmp/dolphinscheduler
    datasource.encryption.enable=false
    datasource.encryption.salt=!@#$%^&*
    development.state=false
    fs.defaultFS=file:///
    hadoop.security.authentication.startup.state=false
    hdfs.root.user=hdfs
    java.security.krb5.conf.path=/opt/krb5.conf
    kerberos.expire.time=2
    login.user.keytab.path=/opt/hdfs.headless.keytab
    login.user.keytab.username=hdfs-mycluster@ESZ.COM
    resource.manager.httpaddress.port=8088
    resource.storage.type=HDFS
    resource.upload.path=/dolphinscheduler
    sudo.enable=true
    support.hive.oneSession=false
    yarn.application.status.address=http://ds1:%s/ws/v1/cluster/apps/%s
    yarn.job.history.status.address=http://ds1:19888/ws/v1/history/mapreduce/jobs/%s
    yarn.resourcemanager.ha.rm.ids=192.168.xx.xx,192.168.xx.xx
    zeppelin.rest.url=http://localhost:8080
---
# Source: dolphinscheduler/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "dolphinscheduler-2.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: dolphinscheduler/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "dolphinscheduler-2.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: dolphinscheduler/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-zookeeper-headless
  namespace: dolphinscheduler-2.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: dolphinscheduler/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-zookeeper
  namespace: dolphinscheduler-2.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: zookeeper
---
# Source: dolphinscheduler/templates/svc-dolphinscheduler-alert.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: my-release-alert
  labels:
    app.kubernetes.io/name: my-release-alert
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  ports:
    - port: 50052
      targetPort: alert-port
      protocol: TCP
      name: alert-port
    - port: 50053
      targetPort: actuator-port
      protocol: TCP
      name: actuator-port
  selector:
    app.kubernetes.io/name: my-release-alert
    app.kubernetes.io/component: alert
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
---
# Source: dolphinscheduler/templates/svc-dolphinscheduler-api.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: my-release-api
  labels:
    app.kubernetes.io/name: my-release-api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  type: ClusterIP
  ports:
    - port: 12345
      targetPort: api-port
      protocol: TCP
      name: api-port
    - port: 25333
      targetPort: python-api-port
      protocol: TCP
      name: python-api-port
  selector:
    app.kubernetes.io/name: my-release-api
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
---
# Source: dolphinscheduler/templates/svc-dolphinscheduler-master-headless.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: my-release-master-headless
  labels:
    app.kubernetes.io/name: my-release-master-headless
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  clusterIP: "None"
  ports:
    - port: 5678
      targetPort: master-port
      protocol: TCP
      name: master-port
  selector:
    app.kubernetes.io/name: my-release-master
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
---
# Source: dolphinscheduler/templates/svc-dolphinscheduler-worker-headless.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: Service
metadata:
  name: my-release-worker-headless
  labels:
    app.kubernetes.io/name: my-release-worker-headless
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  clusterIP: "None"
  ports:
    - port: 1234
      targetPort: worker-port
      protocol: TCP
      name: worker-port
  selector:
    app.kubernetes.io/name: my-release-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
---
# Source: dolphinscheduler/templates/deployment-dolphinscheduler-alert.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-alert
  labels:
    app.kubernetes.io/name: my-release-alert
    app.kubernetes.io/component: alert
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-alert
      app.kubernetes.io/component: alert
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 3.0.0
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-alert
        app.kubernetes.io/component: alert
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 3.0.0
    spec:
      containers:
        - name: my-release-alert
          image: dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-alert-server:3.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 50052
              name: "alert-port"
            - containerPort: 50053
              name: "actuator-port"
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_JACKSON_TIME_ZONE
              value: Asia/Shanghai
            - name: DATABASE
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://my-release-postgresql:5432/dolphinscheduler?characterEncoding=utf8
            - name: SPRING_DATASOURCE_USERNAME
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            
            - name: JAVA_OPTS
              value: "-Xms512m -Xmx512m -Xmn256m"
            
          envFrom:
            - configMapRef:
                name: my-release-common
          livenessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:50053/actuator/health/liveness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:50053/actuator/health/readiness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - mountPath: "/opt/dolphinscheduler/logs"
              name: my-release-alert
            - name: config-volume
              mountPath: /opt/dolphinscheduler/conf/common.properties
              subPath: common_properties
      volumes:
        - name: my-release-alert
          emptyDir: {}
        - name: config-volume
          configMap:
            name: my-release-configs
---
# Source: dolphinscheduler/templates/deployment-dolphinscheduler-api.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-api
  labels:
    app.kubernetes.io/name: my-release-api
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-api
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 3.0.0
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-api
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 3.0.0
    spec:
      containers:
        - name: my-release-api
          image: dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-api:3.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 12345
              name: "api-port"
            - containerPort: 25333
              name: "python-api-port"
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_JACKSON_TIME_ZONE
              value: Asia/Shanghai
            - name: DATABASE
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://my-release-postgresql:5432/dolphinscheduler?characterEncoding=utf8
            - name: SPRING_DATASOURCE_USERNAME
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REGISTRY_TYPE
              value: "zookeeper"
            - name: REGISTRY_ZOOKEEPER_CONNECT_STRING
              value: my-release-zookeeper:2181
            
            
            - name: JAVA_OPTS
              value: "-Xms512m -Xmx512m -Xmn256m"
            
          envFrom:
            - configMapRef:
                name: my-release-common
          livenessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:12345/dolphinscheduler/actuator/health/liveness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:12345/dolphinscheduler/actuator/health/readiness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - mountPath: "/opt/dolphinscheduler/logs"
              name: my-release-api
            - name: config-volume
              mountPath: /opt/dolphinscheduler/conf/common.properties
              subPath: common_properties
            
            
      volumes:
        - name: my-release-api
          emptyDir: {}
        - name: config-volume
          configMap:
            name: my-release-configs
---
# Source: dolphinscheduler/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "dolphinscheduler-2.0.0.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.26
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.26
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "dolphinscheduler-2.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.4.0-debian-11-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "dolphinscheduler"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "dolphinscheduler"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "dolphinscheduler" -d "dbname=dolphinscheduler" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "dolphinscheduler" -d "dbname=dolphinscheduler" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dolphinscheduler/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-zookeeper
  namespace: dolphinscheduler-2.0.0.tgz
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: zookeeper
  serviceName: my-release-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-10.0.9
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - "dolphinscheduler-2.0.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r30
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr,ruok,wchs,cons"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: my-release-zookeeper-0.my-release-zookeeper-headless.dolphinscheduler-2.0.0.tgz.svc.cluster.local:2888:3888::1 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: my-release-zookeeper-scripts
            defaultMode: 0755
        - name: data
          emptyDir: {}
---
# Source: dolphinscheduler/templates/statefulset-dolphinscheduler-master.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-master
  labels:
    app.kubernetes.io/name: my-release-master
    app.kubernetes.io/component: master
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-master
      app.kubernetes.io/component: master
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 3.0.0
  serviceName: my-release-master-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-master
        app.kubernetes.io/component: master
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 3.0.0
    spec:
      containers:
        - name: my-release-master
          image: dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-master:3.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5678
              name: "master-port"
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_JACKSON_TIME_ZONE
              value: Asia/Shanghai
            - name: DATABASE
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://my-release-postgresql:5432/dolphinscheduler?characterEncoding=utf8
            - name: SPRING_DATASOURCE_USERNAME
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REGISTRY_TYPE
              value: "zookeeper"
            - name: REGISTRY_ZOOKEEPER_CONNECT_STRING
              value: my-release-zookeeper:2181
            
            
            - name: JAVA_OPTS
              value: "-Xms1g -Xmx1g -Xmn512m"
            
            - name: MASTER_DISPATCH_TASK_NUM
              value: "3"
            
            - name: MASTER_EXEC_TASK_NUM
              value: "20"
            
            - name: MASTER_EXEC_THREADS
              value: "100"
            
            - name: MASTER_FAILOVER_INTERVAL
              value: "10m"
            
            - name: MASTER_HEARTBEAT_ERROR_THRESHOLD
              value: "5"
            
            - name: MASTER_HEARTBEAT_INTERVAL
              value: "10s"
            
            - name: MASTER_HOST_SELECTOR
              value: "LowerWeight"
            
            - name: MASTER_KILL_YARN_JOB_WHEN_HANDLE_FAILOVER
              value: "true"
            
            - name: MASTER_MAX_CPU_LOAD_AVG
              value: "-1"
            
            - name: MASTER_RESERVED_MEMORY
              value: "0.3"
            
            - name: MASTER_STATE_WHEEL_INTERVAL
              value: "5s"
            
            - name: MASTER_TASK_COMMIT_INTERVAL
              value: "1s"
            
            - name: MASTER_TASK_COMMIT_RETRYTIMES
              value: "5"
            
          envFrom:
            - configMapRef:
                name: my-release-common
          livenessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:5679/actuator/health/liveness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:5679/actuator/health/readiness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - mountPath: "/opt/dolphinscheduler/logs"
              name: my-release-master
            
            - name: config-volume
              mountPath: /opt/dolphinscheduler/conf/common.properties
              subPath: common_properties
      volumes:
        - name: my-release-master
          emptyDir: {}
        
        - name: config-volume
          configMap:
            name: my-release-configs
---
# Source: dolphinscheduler/templates/statefulset-dolphinscheduler-worker.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-worker
  labels:
    app.kubernetes.io/name: my-release-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: my-release-worker
      app.kubernetes.io/component: worker
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/version: 3.0.0
  serviceName: my-release-worker-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-release-worker
        app.kubernetes.io/component: worker
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 3.0.0
    spec:
      containers:
        - name: my-release-worker
          image: dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-worker:3.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1234
              name: "worker-port"
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_JACKSON_TIME_ZONE
              value: Asia/Shanghai
            - name: ALERT_LISTEN_HOST
              value: my-release-alert
            - name: DATABASE
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://my-release-postgresql:5432/dolphinscheduler?characterEncoding=utf8
            - name: SPRING_DATASOURCE_USERNAME
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REGISTRY_TYPE
              value: "zookeeper"
            - name: REGISTRY_ZOOKEEPER_CONNECT_STRING
              value: my-release-zookeeper:2181
            
            
            - name: WORKER_EXEC_THREADS
              value: "100"
            
            - name: WORKER_GROUPS
              value: "default"
            
            - name: WORKER_GROUPS_0
              value: "default"
            
            - name: WORKER_HEARTBEAT_INTERVAL
              value: "10s"
            
            - name: WORKER_HEART_ERROR_THRESHOLD
              value: "5"
            
            - name: WORKER_HOST_WEIGHT
              value: "100"
            
            - name: WORKER_MAX_CPU_LOAD_AVG
              value: "-1"
            
            - name: WORKER_RESERVED_MEMORY
              value: "0.3"
            
          envFrom:
            - configMapRef:
                name: my-release-common
          livenessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:1235/actuator/health/liveness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command: ["curl", "-s", "http://localhost:1235/actuator/health/readiness"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - mountPath: "/tmp/dolphinscheduler"
              name: my-release-worker-data
            - mountPath: "/opt/dolphinscheduler/logs"
              name: my-release-worker-logs
            - name: config-volume
              mountPath: /opt/dolphinscheduler/conf/common.properties
              subPath: common_properties
            
            
      volumes:
        - name: my-release-worker-data
          emptyDir: {}
        - name: my-release-worker-logs
          emptyDir: {}
        - name: config-volume
          configMap:
            name: my-release-configs
---
# Source: dolphinscheduler/templates/job-dolphinscheduler-schema-initializer.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-db-init-job
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 3.0.0
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 3.0.0
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-database
        image: busybox:1.30
        imagePullPolicy: IfNotPresent
        command: ['sh', '-xc', 'for i in $(seq 1 180); do nc -z -w3 my-release-postgresql 5432 && exit 0 || sleep 5; done; exit 1']
      containers:
        - name: my-release-db-init-job
          image: dolphinscheduler.docker.scarf.sh/apache/dolphinscheduler-tools:3.0.0
          imagePullPolicy: IfNotPresent
          args:
            - tools/bin/upgrade-schema.sh
          env:
            - name: TZ
              value: Asia/Shanghai
            - name: SPRING_JACKSON_TIME_ZONE
              value: Asia/Shanghai
            - name: DATABASE
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://my-release-postgresql:5432/dolphinscheduler?characterEncoding=utf8
            - name: SPRING_DATASOURCE_USERNAME
              value: dolphinscheduler
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REGISTRY_TYPE
              value: "zookeeper"
            - name: REGISTRY_ZOOKEEPER_CONNECT_STRING
              value: my-release-zookeeper:2181
            
          envFrom:
            - configMapRef:
                name: my-release-common
---
# Source: dolphinscheduler/templates/ingress.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/pvc-dolphinscheduler-alert.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/pvc-dolphinscheduler-api.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/pvc-dolphinscheduler-fs-file.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/pvc-dolphinscheduler-shared.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/secret-external-database.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
# Source: dolphinscheduler/templates/secret-external-fs-s3a.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
