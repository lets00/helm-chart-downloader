---
# Source: atuin/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: atuin/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
automountServiceAccountToken: false
---
# Source: atuin/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-atuin
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: atuin/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
type: Opaque
data:
  postgres-password: "RFJHZmxzSU1paA=="
  password: "cGwzNHMzQ2g0bmczTTM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: atuin/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-atuin
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
data:
  ATUIN_DB_URI: "cG9zdGdyZXNxbDovL2RiLXVzZXI6cGwzNHMzQ2g0bmczTTNAbXktcmVsZWFzZS1hdHVpbi1wb3N0Z3Jlc3FsLmF0dWluLTAuOS4wLnRnei5zdmMuY2x1c3Rlci5sb2NhbDo1NDMyL2F0dWlu"
---
# Source: atuin/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-atuin-config
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
---
# Source: atuin/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: atuin/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: atuin/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-atuin
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8888
      targetPort: app-port
      protocol: TCP
      name: app-port
  selector:
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
---
# Source: atuin/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-atuin
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: atuin
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: atuin
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-atuin
      securityContext:
        {}
      initContainers:
        - name: wait-db-service
          image: busybox:1.28
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 65534
            runAsGroup: 65534
          command: ['sh', '-c', "until nslookup my-release-atuin-postgresql.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for my-release-atuin-postgresql.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; sleep 2; done"]
          resources:
            limits:
              cpu: 100m
              memory: 10Mi
            requests:
              cpu: 100m
              memory: 1Mi
      containers:
        - name: atuin
          args:
            - server
            - start
          securityContext:
            {}
          image: "ghcr.io/atuinsh/atuin:18.3.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: ATUIN_DB_URI
              valueFrom:
                secretKeyRef:
                  name: my-release-atuin
                  key: ATUIN_DB_URI
                  optional: false
            - name: ATUIN_HOST
              value: 0.0.0.0
            - name: ATUIN_PORT
              value: "8888"
            - name: ATUIN_OPEN_REGISTRATION
              value: "true"
          ports:
            - name: app-port
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: app-port
          readinessProbe:
            httpGet:
              path: /
              port: app-port
          resources:
            {}
          volumeMounts:
            - mountPath: /config
              name: my-release-atuin-config
      volumes:
        - name: my-release-atuin-config
          persistentVolumeClaim:
            claimName: my-release-atuin-config
---
# Source: atuin/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "atuin-0.9.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.1.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-15.1.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "db-user"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "atuin"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "db-user" -d "dbname=atuin" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "db-user" -d "dbname=atuin" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: atuin/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-atuin-backup
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin-backup
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "@daily"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      backoffLimit: 1
      parallelism: 1
      activeDeadlineSeconds: 1800
      template:
        metadata: 
          annotations:
            checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          restartPolicy: OnFailure
          serviceAccountName: my-release-atuin
          securityContext:
            {}
          volumes:
          - name: my-release-atuin-config
            persistentVolumeClaim:
              claimName: my-release-atuin-config

          containers:
          - name: backup-config
            imagePullPolicy: IfNotPresent
            volumeMounts:
            volumeMounts:
            - mountPath: /config
              name: my-release-atuin-config
            resources:
              {}
            image: amazon/aws-cli:2.4.9
            args:
            - s3
            - cp
            - "/config/"
            - "$(S3_DESTINATION)"
            - "--recursive"
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-atuin-backup
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-atuin-backup
                  key: AWS_SECRET_ACCESS_KEY
            - name: S3_DESTINATION
              valueFrom:
                secretKeyRef:
                  name: my-release-atuin-backup
                  key: S3_DESTINATION
---
# Source: atuin/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-atuin-test-connection"
  labels:
    helm.sh/chart: atuin-0.9.0
    app.kubernetes.io/name: atuin
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "18.3.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-atuin:8888']
  restartPolicy: Never
