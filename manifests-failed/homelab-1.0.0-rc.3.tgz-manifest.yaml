---
# Source: homelab/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-homelab
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: homelab/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "homelab-1.0.0-rc.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "YXMyQjdveDA0dA=="
  password: "IUNoYW5nZU1lIQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: homelab/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-homelab
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  database-url: "cGdzcWw6Ly9leGFtcGxlOiFDaGFuZ2VNZSFAbXktcmVsZWFzZS1wb3N0Z3Jlc3FsL2FwaT9zZXJ2ZXJWZXJzaW9uPTE0JmNoYXJzZXQ9dXRmOA=="
  php-app-secret: "cjdxU3IyNDFZZTlvcTJ0MnhuZkhoUFFOd1hSa29xQWZaemVacW0xUw=="
  mercure-jwt-secret: "IUNoYW5nZVRoaXNNZXJjdXJlSHViSldUU2VjcmV0S2V5IQ=="
---
# Source: homelab/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-homelab
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  php-app-env: "prod"
  php-app-debug: "0"
  php-cors-allow-origin: "^https?://localhost"
  php-trusted-hosts: "^127\\.0\\.0\\.1|homelab-.*|localhost|.*\\.chart-example\\.local$"
  php-trusted-proxies: "127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
  mercure-url: "http://my-release-homelab/.well-known/mercure"
  mercure-public-url: "https://localhost/.well-known/mercure"
---
# Source: homelab/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "homelab-1.0.0-rc.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: homelab/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "homelab-1.0.0-rc.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: homelab/templates/pwa-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-homelab-pwa
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: homelab-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
---
# Source: homelab/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-homelab
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
---
# Source: homelab/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-homelab
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: homelab
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/part-of: homelab
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homelab
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/part-of: homelab
    spec:
      serviceAccountName: my-release-homelab
      securityContext:
        {}
      initContainers:
        []
      containers:
        - name: homelab-caddy
          securityContext:
            {}
          image: "ghcr.io/kilip/homelab-caddy:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: SERVER_NAME
              value: :80
            - name: PWA_UPSTREAM
              value: my-release-homelab-pwa:3000
            - name: MERCURE_PUBLISHER_JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-homelab
                  key: mercure-jwt-secret
            - name: MERCURE_SUBSCRIBER_JWT_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-homelab
                  key: mercure-jwt-secret
          envFrom:
            []
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 2019
              protocol: TCP
          volumeMounts:
            - mountPath: /var/run/php
              name: php-socket
          lifecycle:
            preStop:
              exec:
                command: ["curl", "-XPOST", "http://localhost:2019/stop"]
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            {}
        - name: homelab-api
          securityContext:
            {}
          image: "ghcr.io/kilip/homelab-api:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: php-trusted-hosts
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: php-trusted-proxies
            - name: APP_ENV
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: php-app-env
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: php-app-debug
            - name: APP_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-homelab
                  key: php-app-secret
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: php-cors-allow-origin
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: my-release-homelab
                  key: database-url
            - name: MERCURE_URL
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: mercure-url
            - name: MERCURE_PUBLIC_URL
              valueFrom:
                configMapKeyRef:
                  name: my-release-homelab
                  key: mercure-public-url
            - name: MERCURE_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-homelab
                  key: mercure-jwt-secret
          envFrom:
            []
          volumeMounts:
            - mountPath: /var/run/php
              name: php-socket
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "/bin/sleep 1; kill -QUIT 1"]
          startupProbe:
            exec:
              command:
                - docker-healthcheck
            failureThreshold: 40
            periodSeconds: 3
          readinessProbe:
            exec:
              command:
                - docker-healthcheck
            periodSeconds: 3
          livenessProbe:
            exec:
              command:
                - docker-healthcheck
            periodSeconds: 3
          resources:
            {}
      volumes:
      - name: php-socket
        emptyDir: {}
---
# Source: homelab/templates/pwa-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-homelab-pwa
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab-pwa
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: homelab-pwa
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/part-of: homelab
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homelab-pwa
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/part-of: homelab
    spec:
      serviceAccountName: my-release-homelab
      securityContext:
        {}
      containers:
        - name: homelab-pwa
          securityContext:
            {}
          image: "ghcr.io/kilip/homelab-pwa:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: NEXT_PUBLIC_ENTRYPOINT
              value: http://my-release-homelab
          envFrom:
            []
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: homelab/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "homelab-1.0.0-rc.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.5.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "example"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "api"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "example" -d "dbname=api" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 1m
              memory: 50Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: homelab/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-homelab-test-connection"
  labels:
    helm.sh/chart: homelab-1.0.0-rc.3
    app.kubernetes.io/name: homelab
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/part-of: homelab
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-homelab:80']
  restartPolicy: Never
