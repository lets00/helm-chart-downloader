---
# Source: group-challenge/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gc-postgres
  namespace: "group-challenge-1.2.4.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: group-challenge/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-group-challenge
  labels:
    helm.sh/chart: group-challenge-1.2.4
    app.kubernetes.io/name: group-challenge
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.13.1"
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |- 
    db:
      database: group_challenge
      host: gc-postgres:5432
      logQueries: false
      password: postgres
      poolSize: 50
      user: postgres
    imgProxy:
      enabled: true
      fullSizeQuality: 75
      maxFullHeight: 0
      maxFullWidth: 1280
      maxThumbnailHeight: 420
      maxThumbnailWidth: 420
      sharedLocalCacheDir: /tmp/group-challenge-cache
      thumbnailQuality: 90
      url: http://localhost:8081
    server:
      port: 8080
      staticFilesDir: ./static
---
# Source: group-challenge/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gc-postgres-hl
  namespace: "group-challenge-1.2.4.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: group-challenge/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gc-postgres
  namespace: "group-challenge-1.2.4.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: group-challenge/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-group-challenge
  labels:
    helm.sh/chart: group-challenge-1.2.4
    app.kubernetes.io/name: group-challenge
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.13.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 8082
      targetPort: http-ipp
      protocol: TCP
      name: http-ipp
  selector:
    app.kubernetes.io/name: group-challenge
    app.kubernetes.io/instance: my-release
---
# Source: group-challenge/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-group-challenge
  labels:
    helm.sh/chart: group-challenge-1.2.4
    app.kubernetes.io/name: group-challenge
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.13.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: group-challenge
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
      labels:
        app.kubernetes.io/name: group-challenge
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: default
      securityContext:
        {}
      restartPolicy: Always
      containers:
        - name: img-proxy
          securityContext:
            {}
          image: "darthsim/imgproxy:v3.21.0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: group-challenge-cache
              mountPath: "/tmp/group-challenge-cache"
          env:
            - name: IMGPROXY_LOCAL_FILESYSTEM_ROOT
              value: "/tmp/group-challenge-cache"
            - name: IMGPROXY_BIND
              value: ":8081"
            - name: IMGPROXY_PROMETHEUS_BIND
              value: ":8082"
            - name: IMGPROXY_MAX_SRC_RESOLUTION
              value: "25"
            
          ports:
            - name: http-ip
              containerPort: 8081
              protocol: TCP            
            - name: http-ipp
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http-ip
          readinessProbe:
            httpGet:
              path: /
              port: http-ip
          resources:
            {}
        - name: group-challenge
          securityContext:
            {}
          image: "ghcr.io/subshell/group-challenge:0.13.1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/app/config"
            - name: group-challenge-cache
              mountPath: "/tmp/group-challenge-cache"
          env:
            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
      volumes:
        - name: config
          configMap:
            name: my-release-group-challenge
        - name: group-challenge-cache
          emptyDir: {}
---
# Source: group-challenge/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gc-postgres
  namespace: "group-challenge-1.2.4.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: gc-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: gc-postgres
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "group-challenge-1.2.4.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0-debian-11-r21
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gc-postgres
                  key: postgres-password
            - name: POSTGRES_DB
              value: "group_challenge"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=group_challenge" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=group_challenge" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
