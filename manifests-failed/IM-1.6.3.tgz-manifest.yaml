---
# Source: IM/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mysql
  namespace: IM-1.6.3.tgz
  labels:
    app: my-release-mysql
    chart: "mysql-1.6.9"
    release: "my-release"
    heritage: "Helm"
type: Opaque
data:
  
  
  mysql-root-password: "VGlOekw0U2gxTg=="
  
  
  
  mysql-password:  "aW1wYXNz"
---
# Source: IM/charts/mysql/templates/initializationFiles-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mysql-initialization
  namespace: IM-1.6.3.tgz
data:
  imdashdb.sql: |-
    CREATE DATABASE IF NOT EXISTS imdashdb;
    GRANT ALL PRIVILEGES ON imdashdb.* TO 'imuser'@'%';
  imdb.sql: |-
    CREATE DATABASE IF NOT EXISTS imdb;
    GRANT ALL PRIVILEGES ON imdb.* TO 'imuser'@'%';
  imweb.sql: |-
    CREATE DATABASE IF NOT EXISTS imweb;
    GRANT ALL PRIVILEGES ON imweb.* TO 'imuser'@'%';
---
# Source: IM/templates/im_config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: im
data:
  logging.conf: |
      [loggers]
      keys=root,ConfManager,CloudConnector,InfrastructureManager
      [handlers]
      keys=fileHandler
      [formatters]
      keys=simpleFormatter
      [logger_root]
      level=ERROR
      handlers=fileHandler
      [logger_ConfManager]
      level=DEBUG
      handlers=fileHandler
      qualname=ConfManager
      propagate=0
      [logger_CloudConnector]
      level=DEBUG
      handlers=fileHandler
      qualname=CloudConnector
      propagate=0
      [logger_InfrastructureManager]
      level=DEBUG
      handlers=fileHandler
      qualname=InfrastructureManager
      propagate=0
      [handler_fileHandler]
      level=DEBUG
      formatter=simpleFormatter
      class=logging.handlers.RotatingFileHandler
      args=('/var/log/im/im.log', 'w', 10485760, 3)
      [formatter_simpleFormatter]
      format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
      datefmt=
  im.cfg: |
    [im]
    ACTIVATE_XMLRPC = False
    ACTIVATE_REST = True
---
# Source: IM/templates/im_web_config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: im-web
data:
  analyticstracking.php: |
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script>
    </script>
---
# Source: IM/charts/mysql/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mysql
  namespace: IM-1.6.3.tgz
  labels:
    app: my-release-mysql
    chart: "mysql-1.6.9"
    release: "my-release"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: IM/templates/im_log_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: imlog
spec:
  storageClassName: 
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
# Source: IM/charts/mysql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mysql
  namespace: IM-1.6.3.tgz
  labels:
    app: my-release-mysql
    chart: "mysql-1.6.9"
    release: "my-release"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: my-release-mysql
---
# Source: IM/templates/im_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: im-backend
spec:
  ports:
  - name: restapi
    port: 8800
  selector:
    name: im-backend
---
# Source: IM/templates/im_web_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: im-web-svc
spec:
  ports:
  - name: http
    port: 80
  selector:
    name: im-web
---
# Source: IM/charts/mysql/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mysql
  namespace: IM-1.6.3.tgz
  labels:
    app: my-release-mysql
    chart: "mysql-1.6.9"
    release: "my-release"
    heritage: "Helm"

spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: my-release-mysql
      release: my-release
  template:
    metadata:
      labels:
        app: my-release-mysql
        release: my-release
    spec:
      serviceAccountName: default
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.32"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
        command:  ["rm", "-fr", "/var/lib/mysql/lost+found"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      # - name: do-something
      #   image: busybox
      #   command: ['do', 'something']
      
      containers:
      - name: my-release-mysql
        image: "mysql:8.0.36"
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-mysql
              key: mysql-password
        - name: MYSQL_USER
          value: "imuser"
        - name: MYSQL_DATABASE
          value: ""
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: migrations
          mountPath: /docker-entrypoint-initdb.d
        # - name: extras
        #   mountPath: /usr/share/extras
        #   readOnly: true
        
      volumes:
      - name: migrations
        configMap:
          name: my-release-mysql-initialization
      - name: data
        persistentVolumeClaim:
          claimName: my-release-mysql
      # - name: extras
      #   emptyDir: {}
---
# Source: IM/templates/im_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: im-backend
  labels:
    name: im-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      name: im-backend
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        name: im-backend
    spec:
      containers:
      - name: im
        image: grycap/im:latest
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
        ports:
        - containerPort: 8800
        imagePullPolicy: Always
        env:
          - name: IM_DATA_DB

            value: mysql://imuser:impass@my-release-mysql/imdb
        volumeMounts:
           - name: im
             mountPath: /etc/im/logging.conf
             subPath: logging.conf
           - name: im
             mountPath: /etc/im/im.cfg
             subPath: im.cfg
           - name: imlog
             mountPath: /var/log/im
        livenessProbe:
          httpGet:
            path: /version
            port: 8800
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
      volumes:
        - name: im
          configMap:
            name: im
        - name: imlog
          persistentVolumeClaim:
            claimName: imlog
---
# Source: IM/templates/im_web_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: im-web
spec:
  replicas: 1
  selector:
    matchLabels:
      name: im-web
  template:
    metadata:
      labels:
        name: im-web
    spec:
      containers:
        - name: im-web
          image: grycap/im-web:latest
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
          ports:
          - containerPort: 80
            protocol: TCP
            name: http
          env:
          - name: im_use_rest
            value: "true"
          - name: im_host
            value: im-backend
          - name: im_port
            value: "8800"
          - name: im_db
            value: mysql://imuser:impass@my-release-mysql/imweb
          volumeMounts:
           - name: im-web
             mountPath: /var/www/html/im-web/analyticstracking.php
             subPath: analyticstracking.php
          livenessProbe:
            httpGet:
              path: /im-web/
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 2
      volumes:
        - name: im-web
          configMap:
            name: im-web
---
# Source: IM/templates/im_ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: im
  annotations:
      nginx.ingress.kubernetes.io/client-body-buffer-size: "64k"
      nginx.ingress.kubernetes.io/proxy-body-size: "20m"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-read-timeout: '1800'
      nginx.ingress.kubernetes.io/x-forwarded-prefix: /im
      nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
        - backend:
            service:
              name: im-backend
              port:
                number: 8800
          pathType: Prefix
          path: /im/?(.*)
---
# Source: IM/templates/im_web_ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: im-web
  annotations:
      nginx.ingress.kubernetes.io/client-body-buffer-size: 64k
      nginx.ingress.kubernetes.io/proxy-body-size: 20m
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
      nginx.ingress.kubernetes.io/proxy-read-timeout: '1800'
      nginx.ingress.kubernetes.io/x-forwarded-prefix: /im-web
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
        - backend:
            service:
              name: im-web-svc
              port:
                number: 80
          pathType: Prefix
          path: /im-web/?(.*)
---
# Source: IM/templates/im_log_pvc.yaml
# Persistent Volume
---
# Source: IM/templates/im_web_config.yaml
# In case you want to track web usage using Google Analytics
---
# Source: IM/templates/im_web_deployment.yaml
# Deployment for the IM-web service
---
# Source: IM/templates/im_web_service.yaml
# IM-Web interface
