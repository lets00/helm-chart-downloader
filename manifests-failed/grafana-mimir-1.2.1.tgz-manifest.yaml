---
# Source: grafana-mimir/charts/memcachedchunks/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-memcachedchunks
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedchunks-7.4.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcachedchunks
      app.kubernetes.io/version: 1.6.28
      helm.sh/chart: memcachedchunks-7.4.4
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: grafana-mimir/charts/memcachedfrontend/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-memcachedfrontend
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedfrontend-7.4.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcachedfrontend
      app.kubernetes.io/version: 1.6.28
      helm.sh/chart: memcachedfrontend-7.4.4
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: grafana-mimir/charts/memcachedindex/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-memcachedindex
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedindex
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedindex-7.4.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcachedindex
      app.kubernetes.io/version: 1.6.28
      helm.sh/chart: memcachedindex-7.4.4
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: grafana-mimir/charts/memcachedmetadata/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-memcachedmetadata
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedmetadata
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedmetadata-7.4.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: memcachedmetadata
      app.kubernetes.io/version: 1.6.28
      helm.sh/chart: memcachedmetadata-7.4.4
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 11211
---
# Source: grafana-mimir/charts/minio/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 9001
        - port: 9000
---
# Source: grafana-mimir/charts/minio/templates/provisioning-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-minio-provisioning
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: minio-provisioning
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: grafana-mimir/templates/compactor/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-compactor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: compactor
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: compactor
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/templates/distributor/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-distributor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: distributor
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/templates/gateway/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: gateway
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: grafana-mimir/templates/ingester/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-ingester
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: ingester
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/templates/querier/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-querier
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: querier
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/templates/query-frontend/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-query-frontend
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: query-frontend
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/templates/store-gateway/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-grafana-mimir-store-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: store-gateway
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 7946
        - port: 9095
---
# Source: grafana-mimir/charts/memcachedchunks/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-memcachedchunks
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedchunks-7.4.4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedchunks
---
# Source: grafana-mimir/charts/memcachedfrontend/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-memcachedfrontend
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedfrontend-7.4.4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedfrontend
---
# Source: grafana-mimir/charts/memcachedindex/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-memcachedindex
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedindex
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedindex-7.4.4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedindex
---
# Source: grafana-mimir/charts/memcachedmetadata/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-memcachedmetadata
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedmetadata
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedmetadata-7.4.4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedmetadata
---
# Source: grafana-mimir/charts/minio/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
---
# Source: grafana-mimir/templates/compactor/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-compactor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: compactor
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: compactor
---
# Source: grafana-mimir/templates/distributor/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-distributor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: distributor
---
# Source: grafana-mimir/templates/gateway/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: gateway
---
# Source: grafana-mimir/templates/ingester/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-ingester
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: ingester
---
# Source: grafana-mimir/templates/querier/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-querier
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: querier
---
# Source: grafana-mimir/templates/query-frontend/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-query-frontend
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: query-frontend
---
# Source: grafana-mimir/templates/store-gateway/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-grafana-mimir-store-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: store-gateway
---
# Source: grafana-mimir/charts/memcachedchunks/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-memcachedchunks
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedchunks-7.4.4
---
# Source: grafana-mimir/charts/memcachedfrontend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-memcachedfrontend
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedfrontend-7.4.4
---
# Source: grafana-mimir/charts/memcachedindex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-memcachedindex
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedindex
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedindex-7.4.4
---
# Source: grafana-mimir/charts/memcachedmetadata/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-memcachedmetadata
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedmetadata
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedmetadata-7.4.4
---
# Source: grafana-mimir/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
automountServiceAccountToken: false
secrets:
  - name: my-release-minio
---
# Source: grafana-mimir/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-grafana-mimir
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: mimir
automountServiceAccountToken: false
---
# Source: grafana-mimir/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
type: Opaque
data:
  root-user: "YWRtaW4="
  root-password: "TlM1TkFRRHhlaw=="
---
# Source: grafana-mimir/charts/minio/templates/provisioning-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-minio-provisioning
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
    app.kubernetes.io/component: minio-provisioning
data:
---
# Source: grafana-mimir/templates/gateway/configmap-http.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-grafana-mimir-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
data:
  nginx.conf: |+
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        default_type application/octet-stream;
        log_format  main '$remote_addr - $remote_user [$time_local]  $status ' '"$request" $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"';

        include /opt/bitnami/nginx/conf/resolvers.conf;

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   /dev/stderr  main  if=$loggable;

        sendfile     on;
        tcp_nopush   on;

        # Ensure that X-Scope-OrgID is always present, default to the no_auth_tenant for backwards compatibility when multi-tenancy was turned off.
        map $http_x_scope_orgid $ensured_x_scope_orgid {
          default $http_x_scope_orgid;
          "" "anonymous";
        }

        server {
          listen             8080;

          location = / {
            return 200 'OK';
            auth_basic off;
          }

          proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;

          # Distributor endpoints
          location /distributor {
            proxy_pass      http://my-release-grafana-mimir-distributor-headless.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
          location = /api/v1/push {
            proxy_pass      http://my-release-grafana-mimir-distributor-headless.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
          location /otlp/v1/metrics {
            proxy_pass      http://my-release-grafana-mimir-distributor-headless.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
          # Rest of /prometheus goes to the query frontend
          location /prometheus {
            proxy_pass      http://my-release-grafana-mimir-query-frontend.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
          # Buildinfo endpoint can go to any component
          location = /api/v1/status/buildinfo {
            proxy_pass      http://my-release-grafana-mimir-query-frontend.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
          # Compactor endpoint for uploading blocks
          location /api/v1/upload/block/ {
            proxy_pass      http://my-release-grafana-mimir-compactor.grafana-mimir-1.2.1.tgz.svc.cluster.local:8080$request_uri;
          }
        }
      }
---
# Source: grafana-mimir/templates/mimir-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-grafana-mimir
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: mimir
data:
  mimir.yaml: |-
    activity_tracker:
      filepath: /bitnami/grafana-mimir/activity.log
    alertmanager_storage:
      backend: s3
      s3:
        access_key_id: ${MIMIR_MINIO_ACCESS_KEY_ID}
        bucket_name: alertmanager
        endpoint: my-release-minio:80
        insecure: true
        secret_access_key: ${MIMIR_MINIO_SECRET_ACCESS_KEY}
    api:
      alertmanager_http_prefix: /alertmanager
      prometheus_http_prefix: /prometheus
    blocks_storage:
      backend: s3
      bucket_store:
        chunks_cache:
          backend: memcached
          memcached:
            addresses: my-release-memcachedchunks:11211
            timeout: 450ms
        index_cache:
          backend: memcached
          memcached:
            addresses: my-release-memcachedindex:11211
            timeout: 450ms
        metadata_cache:
          backend: memcached
          memcached:
            addresses: my-release-memcachedmetadata:11211
            timeout: 450ms
        sync_dir: /bitnami/grafana-mimir/tsdb-sync
      s3:
        access_key_id: ${MIMIR_MINIO_ACCESS_KEY_ID}
        bucket_name: mimir
        endpoint: my-release-minio:80
        insecure: true
        secret_access_key: ${MIMIR_MINIO_SECRET_ACCESS_KEY}
      tsdb:
        dir: /bitnami/grafana-mimir/tsdb
    compactor:
      data_dir: /bitnami/grafana-mimir/compactor
    frontend:
      cache_results: true
      parallelize_shardable_queries: true
      results_cache:
        backend: memcached
        memcached:
          addresses: my-release-memcachedfrontend:11211
          timeout: 500ms
    frontend_worker:
      frontend_address: my-release-grafana-mimir-query-frontend-headless.grafana-mimir-1.2.1.tgz.svc:9095
      grpc_client_config:
        max_send_msg_size: 419430400
    ingester:
      ring:
        final_sleep: 0s
        num_tokens: 512
        tokens_file_path: /bitnami/grafana-mimir/tokens
        unregister_on_shutdown: false
    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    limits:
      max_cache_freshness: 10m
      max_query_parallelism: 240
      max_total_query_length: 12000h
    memberlist:
      abort_if_cluster_join_fails: false
      advertise_port: 7946
      bind_port: 7946
      compression_enabled: false
      join_members:
      - dns+my-release-grafana-mimir-gossip-ring.grafana-mimir-1.2.1.tgz.svc.cluster.local:7946
    querier:
      max_concurrent: 16
    query_scheduler:
      max_outstanding_requests_per_tenant: 800
    server:
      grpc_listen_port: 9095
      grpc_server_max_concurrent_streams: 1000
      grpc_server_max_connection_age: 2m
      grpc_server_max_connection_age_grace: 5m
      grpc_server_max_connection_idle: 1m
      http_listen_port: 8080
    store_gateway:
      sharding_ring:
        tokens_file_path: /bitnami/grafana-mimir/tokens
        wait_stability_min_duration: 1m
    usage_stats:
      installation_mode: helm
---
# Source: grafana-mimir/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: grafana-mimir/charts/memcachedchunks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-memcachedchunks
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedchunks-7.4.4
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcachedchunks
---
# Source: grafana-mimir/charts/memcachedfrontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-memcachedfrontend
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedfrontend-7.4.4
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcachedfrontend
---
# Source: grafana-mimir/charts/memcachedindex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-memcachedindex
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedindex
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedindex-7.4.4
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcachedindex
---
# Source: grafana-mimir/charts/memcachedmetadata/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-memcachedmetadata
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedmetadata
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedmetadata-7.4.4
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: memcachedmetadata
---
# Source: grafana-mimir/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 80
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: minio
---
# Source: grafana-mimir/templates/compactor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-mimir-compactor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: compactor
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: compactor
---
# Source: grafana-mimir/templates/distributor/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-distributor-headless
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
---
# Source: grafana-mimir/templates/distributor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-distributor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
---
# Source: grafana-mimir/templates/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-mimir-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
---
# Source: grafana-mimir/templates/gossip-ring-headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-mimir-gossip-ring
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: mimir
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  clusterIP: None
  ports:
    - name: http
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    mimir-gossip-member: "true"
---
# Source: grafana-mimir/templates/ingester/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-ingester-headless
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
---
# Source: grafana-mimir/templates/ingester/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-mimir-ingester
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
---
# Source: grafana-mimir/templates/querier/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-querier-headless
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
---
# Source: grafana-mimir/templates/querier/service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-querier
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
---
# Source: grafana-mimir/templates/query-frontend/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-query-frontend-headless
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
---
# Source: grafana-mimir/templates/query-frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-query-frontend
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
---
# Source: grafana-mimir/templates/store-gateway/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-grafana-mimir-store-gateway-headless
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
spec:
  publishNotReadyAddresses: true
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
---
# Source: grafana-mimir/templates/store-gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana-mimir-store-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
      nodePort: null
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
---
# Source: grafana-mimir/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-minio
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2024.6.4
        helm.sh/chart: minio-14.6.5
      annotations:
        checksum/credentials-secret: b1bf1bb52dff6905be21e3d7c7c5a198291a65b6f5f37ae1bc0d255dc4416e46
    spec:
      
      serviceAccountName: my-release-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: minio
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: []
        sysctls: []
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.6.4-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_API_PORT_NUMBER
              value: "9000"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
            - name: MINIO_DEFAULT_BUCKETS
              value: mimir, ruler, alertmanager
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_DATA_DIR
              value: "/bitnami/minio/data"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1024Mi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: data
              mountPath: /bitnami/minio/data
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: my-release-minio
---
# Source: grafana-mimir/templates/distributor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana-mimir-distributor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: distributor
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: distributor
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: distributor
        mimir-gossip-member: "true"
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: distributor
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: grafana-mimir-distributor
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -target=distributor
            - "-config.expand-env=true"
            - -config.file=/bitnami/grafana-mimir/conf/mimir.yaml
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
---
# Source: grafana-mimir/templates/gateway/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana-mimir-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 1.27.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: gateway
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 1.27.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: gateway
      annotations:
        checksum/configmap: 4f11b3be6d330c630488d5c8203ec64dec662a774ca1cd36d4f9024af0119869
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: gateway
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: gateway
          image: docker.io/bitnami/nginx:1.27.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - -ec
            - |
              # Generate resolver data
              echo resolver $(awk 'BEGIN{ORS=" "} $1=="nameserver" {print $2}' /etc/resolv.conf) ";" > /opt/bitnami/nginx/conf/resolvers.conf
              /opt/bitnami/scripts/nginx/entrypoint.sh /opt/bitnami/scripts/nginx/run.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/conf
              subPath: app-conf-dir
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: config
          configMap:
            name: my-release-grafana-mimir-gateway
---
# Source: grafana-mimir/templates/querier/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana-mimir-querier
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: querier
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: querier
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: querier
        mimir-gossip-member: "true"
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: querier
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: querier
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -target=querier
            - "-config.expand-env=true"
            - -config.file=/bitnami/grafana-mimir/conf/mimir.yaml
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
---
# Source: grafana-mimir/templates/query-frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana-mimir-query-frontend
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: query-frontend
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: query-frontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: query-frontend
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - -target=query-frontend
            - "-config.expand-env=true"
            - -config.file=/bitnami/grafana-mimir/conf/mimir.yaml
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 7946
              name: http-memberlist
            - containerPort: 9095
              name: grpc
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
---
# Source: grafana-mimir/charts/memcachedchunks/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-memcachedchunks
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedchunks
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedchunks-7.4.4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedchunks
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: my-release-memcachedchunks
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcachedchunks
        app.kubernetes.io/version: 1.6.28
        helm.sh/chart: memcachedchunks-7.4.4
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcachedchunks
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-memcachedchunks
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.28-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: grafana-mimir/charts/memcachedfrontend/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-memcachedfrontend
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedfrontend
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedfrontend-7.4.4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedfrontend
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: my-release-memcachedfrontend
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcachedfrontend
        app.kubernetes.io/version: 1.6.28
        helm.sh/chart: memcachedfrontend-7.4.4
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcachedfrontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-memcachedfrontend
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.28-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: grafana-mimir/charts/memcachedindex/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-memcachedindex
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedindex
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedindex-7.4.4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedindex
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: my-release-memcachedindex
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcachedindex
        app.kubernetes.io/version: 1.6.28
        helm.sh/chart: memcachedindex-7.4.4
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcachedindex
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-memcachedindex
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.28-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: grafana-mimir/charts/memcachedmetadata/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-memcachedmetadata
  namespace: grafana-mimir-1.2.1.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcachedmetadata
    app.kubernetes.io/version: 1.6.28
    helm.sh/chart: memcachedmetadata-7.4.4
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: memcachedmetadata
  replicas: 1
  podManagementPolicy: "Parallel"
  serviceName: my-release-memcachedmetadata
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcachedmetadata
        app.kubernetes.io/version: 1.6.28
        helm.sh/chart: memcachedmetadata-7.4.4
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: memcachedmetadata
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-memcachedmetadata
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.28-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: grafana-mimir/templates/compactor/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-grafana-mimir-compactor
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: compactor
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: compactor
  serviceName:  my-release-grafana-mimir-compactor
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: compactor
        mimir-gossip-member: "true"
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: compactor
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: compactor
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - "-target=compactor"
            - "-config.expand-env=true"
            - "-config.file=/bitnami/grafana-mimir/conf/mimir.yaml"
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: http-memberlist
              containerPort: 7946
            - name: grpc
              containerPort: 9095
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: grafana-mimir/templates/ingester/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-grafana-mimir-ingester
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: ingester
spec:
  replicas: 2
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: ingester
  serviceName:  my-release-grafana-mimir-ingester
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: ingester
        mimir-gossip-member: "true"
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: ingester
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: grafana-mimir-ingester
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - "-target=ingester"
            - "-config.expand-env=true"
            - "-config.file=/bitnami/grafana-mimir/conf/mimir.yaml"
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: http-memberlist
              containerPort: 7946
            - name: grpc
              containerPort: 9095
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: grafana-mimir/templates/store-gateway/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-grafana-mimir-store-gateway
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana-mimir
    app.kubernetes.io/version: 2.12.0
    helm.sh/chart: grafana-mimir-1.2.1
    app.kubernetes.io/part-of: grafana-mimir
    app.kubernetes.io/component: store-gateway
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: grafana-mimir
      app.kubernetes.io/part-of: grafana-mimir
      app.kubernetes.io/component: store-gateway
  serviceName:  my-release-grafana-mimir-store-gateway
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: grafana-mimir
        app.kubernetes.io/version: 2.12.0
        helm.sh/chart: grafana-mimir-1.2.1
        app.kubernetes.io/part-of: grafana-mimir
        app.kubernetes.io/component: store-gateway
        mimir-gossip-member: "true"
    spec:
      serviceAccountName: my-release-grafana-mimir
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: grafana-mimir
                    app.kubernetes.io/component: store-gateway
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
      containers:
        - name: store-gateway
          image: docker.io/bitnami/grafana-mimir:2.12.0-debian-12-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - "-target=store-gateway"
            - "-config.expand-env=true"
            - "-config.file=/bitnami/grafana-mimir/conf/mimir.yaml"
          env:
            - name: MIMIR_MINIO_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MIMIR_MINIO_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          ports:
            - name: http
              containerPort: 8080
            - name: http-memberlist
              containerPort: 7946
            - name: grpc
              containerPort: 9095
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /ready
              port: http
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: mimir-config
              mountPath: /bitnami/grafana-mimir/conf
            - name: data
              mountPath: /bitnami/grafana-mimir
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: mimir-config
          configMap:
            name: my-release-grafana-mimir
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: grafana-mimir/charts/minio/templates/provisioning-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-minio-provisioning
  namespace: "grafana-mimir-1.2.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.6.4
    helm.sh/chart: minio-14.6.5
    app.kubernetes.io/component: minio-provisioning
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec: 
  parallelism: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 2024.6.4
        helm.sh/chart: minio-14.6.5
        app.kubernetes.io/component: minio-provisioning
    spec:
      
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-minio
      initContainers:
        - name: wait-for-available-minio
          image: docker.io/bitnami/minio:2024.6.4-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - -c
            - |-
              set -e;
              echo "Waiting for Minio";
              wait-for-port \
                --host=my-release-minio \
                --state=inuse \
                --timeout=120 \
                80;
              echo "Minio is available";
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.6.4-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - -c
            - >-
              set -e;
              echo "Start Minio provisioning";

              function attachPolicy() {
                local tmp=$(mc admin $1 info provisioning $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                if [[ ! "${CURRENT_POLICIES[*]}" =~ "$3" ]]; then
                  mc admin policy attach provisioning $3 --$1=$2;
                fi;
              };

              function detachDanglingPolicies() {
                local tmp=$(mc admin $1 info provisioning $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                IFS=',' read -r -a DESIRED_POLICIES <<< "$3";
                for current in "${CURRENT_POLICIES[@]}"; do
                  if [[ ! "${DESIRED_POLICIES[*]}" =~ "${current}" ]]; then
                    mc admin policy detach provisioning $current --$1=$2;
                  fi;
                done;
              }

              function addUsersFromFile() {
                local username=$(grep -oP '^username=\K.+' $1);
                local password=$(grep -oP '^password=\K.+' $1);
                local disabled=$(grep -oP '^disabled=\K.+' $1);
                local policies_list=$(grep -oP '^policies=\K.+' $1);
                local set_policies=$(grep -oP '^setPolicies=\K.+' $1);

                mc admin user add provisioning "${username}" "${password}";

                IFS=',' read -r -a POLICIES <<< "${policies_list}";
                for policy in "${POLICIES[@]}"; do
                  attachPolicy user "${username}" "${policy}";
                done;
                if [ "${set_policies}" == "true" ]; then
                  detachDanglingPolicies user "${username}" "${policies_list}";
                fi;

                local user_status="enable";
                if [[ "${disabled}" != "" && "${disabled,,}" == "true" ]]; then
                  user_status="disable";
                fi;

                mc admin user "${user_status}" provisioning "${username}";
              };
              mc alias set provisioning $MINIO_SCHEME://my-release-minio:80 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;

              mc admin service restart provisioning;
              
              mc anonymous set download provisioning/mimir;mc anonymous set download provisioning/ruler;mc anonymous set download provisioning/alertmanager;

              echo "End Minio provisioning";
          env:
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: minio-provisioning
              mountPath: /etc/ilm
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: minio-provisioning
          configMap:
            name: my-release-minio-provisioning
