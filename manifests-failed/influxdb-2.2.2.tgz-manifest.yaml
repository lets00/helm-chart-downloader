---
# Source: influxdb/templates/influxdb/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-influxdb
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook-weight: "9"
type: Opaque
data:
  admin-user-password: "anVuaXBlckAxMjM="
  admin-user-token: "MUZCRWp5azhNVTlYaUREdlRJaGI="
  user-password: "anVuaXBlckAxMjM="
---
# Source: influxdb/templates/influxdb/configmap-cq-retention-policy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cq-and-retention-policy
data:
  init_rp_and_cq.sh: |    
    #!/bin/bash

    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE RETENTION POLICY six_months ON influxdb_nms DURATION 26w REPLICATION 1 DEFAULT;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE RETENTION POLICY one_year ON influxdb_nms DURATION 52w REPLICATION 1;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE RETENTION POLICY infinite_time ON influxdb_nms DURATION inf REPLICATION 1;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE RETENTION POLICY forever ON influxdb_nms DURATION inf REPLICATION 1;'

    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'INSERT INTO influxdb_nms.forever rp_config,idx=1 rp="six_months",start=0i,end=15724800000i -9223372036854775806'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'INSERT INTO influxdb_nms.forever rp_config,idx=2 rp="one_year",start=15724800000i,end=31449600000i -9223372036854775806'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'INSERT INTO influxdb_nms.forever rp_config,idx=3 rp="inf_time",start=31449600000i,end=9223372036854775806i'

    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_interface-check-command" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."interface-check-command" FROM  influxdb_nms.six_months."interface-check-command" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_interface-check-command" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."interface-check-command" FROM  influxdb_nms.six_months."interface-check-command" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_check-snmp-with-oid-text-index" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."check-snmp-with-oid-text-index" FROM  influxdb_nms.six_months."check-snmp-with-oid-text-index" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_check-snmp-with-oid-text-index" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."check-snmp-with-oid-text-index" FROM  influxdb_nms.six_months."check-snmp-with-oid-text-index" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_ping4" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."ping4" FROM  influxdb_nms.six_months."ping4" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_ping4" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."ping4" FROM  influxdb_nms.six_months."ping4" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_hostalive" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."hostalive" FROM  influxdb_nms.six_months."hostalive" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_hostalive" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."hostalive" FROM  influxdb_nms.six_months."hostalive" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_load" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."load" FROM  influxdb_nms.six_months."load" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_load" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."load" FROM  influxdb_nms.six_months."load" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_disk" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."disk" FROM  influxdb_nms.six_months."disk" GROUP BY time(30m), * END;'

    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_disk" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."disk" FROM  influxdb_nms.six_months."disk" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_icinga" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."icinga" FROM  influxdb_nms.six_months."icinga" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_icinga" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."icinga" FROM  influxdb_nms.six_months."icinga" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_snmp" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."snmp" FROM  influxdb_nms.six_months."snmp" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_snmp" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."snmp" FROM  influxdb_nms.six_months."snmp" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_ssh" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."ssh" FROM  influxdb_nms.six_months."ssh" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_ssh" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."ssh" FROM  influxdb_nms.six_months."ssh" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_users" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."users" FROM  influxdb_nms.six_months."users" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_users" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."users" FROM  influxdb_nms.six_months."users" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_mem" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."mem" FROM  influxdb_nms.six_months."mem" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_mem" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."mem" FROM  influxdb_nms.six_months."mem" GROUP BY time(1h), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_12M_mailq" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.one_year."mailq" FROM  influxdb_nms.six_months."mailq" GROUP BY time(30m), * END;'
    influx -username $INFLUXDB_ADMIN_USER -password $INFLUXDB_ADMIN_USER_PASSWORD -database $INFLUXDB_DB -execute 'CREATE CONTINUOUS QUERY "cq_6M_to_inf_mailq" ON  influxdb_nms BEGIN SELECT max(value) AS value, min(value), mean(value) INTO  influxdb_nms.infinite_time."mailq" FROM  influxdb_nms.six_months."mailq" GROUP BY time(1h), * END;'
---
# Source: influxdb/templates/relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-influxdb-relay
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: relay
  annotations:
    helm.sh/hook-weight: "9"
data:
  relay.toml: |-
    
    [[http]]
    # Name of the HTTP server, used for display purposes only.
    name = "relay-server"
    
    # TCP address to bind to, for HTTP server.
    bind-addr = "0.0.0.0:9096"
    
    # Array of InfluxDB(TM) instances to use as backends for Relay.
    output = [
        { name="my-release-influxdb-0", location="http://my-release-influxdb-0.influxdb-headless.influxdb-2.2.2.tgz.svc.cluster.local:8086/write", timeout="10s"},
        { name="my-release-influxdb-1", location="http://my-release-influxdb-1.influxdb-headless.influxdb-2.2.2.tgz.svc.cluster.local:8086/write", timeout="10s"},
        { name="my-release-influxdb-2", location="http://my-release-influxdb-2.influxdb-headless.influxdb-2.2.2.tgz.svc.cluster.local:8086/write", timeout="10s"},
    ]
---
# Source: influxdb/templates/influxdb/persistentvolume.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "influxdb-2.2.2.tgz-data-influxdb-0"
  labels:
    app.kubernetes.io/name: influxdb
    statefulset.kubernetes.io/pod-name: "my-release-influxdb-0"
spec:
  # storageClassName: influxdb-2.2.2.tgz-influxdb
  storageClassName: influxdb
  capacity:
    storage: "8Gi"
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    # path: "/data/influxdb"
    path: /data/influxdb/influxdb-2.2.2.tgz/
  # nodeAffinity:
  #   required:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node_id
  #         operator: In
  #         values:
  #         - "0"
---
# Source: influxdb/templates/influxdb/persistentvolume.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "influxdb-2.2.2.tgz-data-influxdb-1"
  labels:
    app.kubernetes.io/name: influxdb
    statefulset.kubernetes.io/pod-name: "my-release-influxdb-1"
spec:
  # storageClassName: influxdb-2.2.2.tgz-influxdb
  storageClassName: influxdb
  capacity:
    storage: "8Gi"
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    # path: "/data/influxdb"
    path: /data/influxdb/influxdb-2.2.2.tgz/
  # nodeAffinity:
  #   required:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node_id
  #         operator: In
  #         values:
  #         - "1"
---
# Source: influxdb/templates/influxdb/persistentvolume.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "influxdb-2.2.2.tgz-data-influxdb-2"
  labels:
    app.kubernetes.io/name: influxdb
    statefulset.kubernetes.io/pod-name: "my-release-influxdb-2"
spec:
  # storageClassName: influxdb-2.2.2.tgz-influxdb
  storageClassName: influxdb
  capacity:
    storage: "8Gi"
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    # path: "/data/influxdb"
    path: /data/influxdb/influxdb-2.2.2.tgz/
  # nodeAffinity:
  #   required:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node_id
  #         operator: In
  #         values:
  #         - "2"
---
# Source: influxdb/templates/influxdb/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb-headless
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: influxdb
  annotations:
    helm.sh/hook-weight: "9"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8086
      targetPort: http
      protocol: TCP
      name: http
    - port: 8088
      targetPort: rpc
      protocol: TCP
      name: rpc
  selector:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: influxdb
---
# Source: influxdb/templates/influxdb/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: influxdb
  annotations:
    helm.sh/hook-weight: "9"
spec:
  type: ClusterIP
  ports:
    - port: 8086
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
    - port: 8088
      targetPort: rpc
      protocol: TCP
      name: rpc
      nodePort: null
  selector:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: influxdb
---
# Source: influxdb/templates/relay/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: influxdb-relay
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: relay
  annotations:
    helm.sh/hook-weight: "9"
spec:
  type: ClusterIP
  ports:
    - port: 9096
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: relay
---
# Source: influxdb/templates/relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-influxdb-relay
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: relay
  annotations:
    helm.sh/hook-weight: "9"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: relay
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb
        helm.sh/chart: influxdb-2.2.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: relay
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: influxdb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: relay
                namespaces:
                  - "influxdb-2.2.2.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: relay
          image: docker.io/bitnami/influxdb-relay-archived:0.20200717.0-scratch-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /influxdb-relay
          args:
            - -config
            - /conf/relay.toml
          ports:
            - name: http
              containerPort: 9096
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          resources:
            limits: {}
            requests: {}
          env:
            - name: TZ
              value: Asia/Ho_Chi_Minh

          volumeMounts:
            - name: relay-config
              mountPath: /conf
      volumes:
        - name: relay-config
          configMap:
            name: my-release-influxdb-relay
---
# Source: influxdb/templates/influxdb/statefulset-high-availability.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-influxdb
  labels:
    app.kubernetes.io/name: influxdb
    helm.sh/chart: influxdb-2.2.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: influxdb
  annotations:
    helm.sh/hook-weight: "9"
spec:
  serviceName: influxdb-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: influxdb
  template:
    metadata:
      labels:
        
        app.kubernetes.io/name: influxdb
        helm.sh/chart: influxdb-2.2.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: influxdb
    spec:
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            
            app.kubernetes.io/name: influxdb
            helm.sh/chart: influxdb-2.2.2
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: influxdb
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: influxdb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: influxdb
                namespaces:
                  - "influxdb-2.2.2.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10
          imagePullPolicy: "Always"
          command:
            - /bin/bash
            - -c
            - |
              mkdir -p /bitnami/influxdb/{data,meta,wal}
              chmod 700 /bitnami/influxdb/{data,meta,wal}
              chmod g+w /bitnami/influxdb/
                chown -R 1001:1001 /bitnami/influxdb/{data,meta,wal}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/influxdb
      containers:
        - name: influxdb
          image: docker.io/bitnami/influxdb:1.7.9
          imagePullPolicy: "IfNotPresent"
          env:
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: BITNAMI_DEBUG
              value: "true"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: INFLUXDB_HTTP_AUTH_ENABLED
              value: "true"
            - name: INFLUXDB_CREATE_USER_TOKEN
              value: "no"
            - name: INFLUXDB_ADMIN_USER
              value: "root"
            - name: INFLUXDB_ADMIN_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-influxdb
                  key: admin-user-password
            - name: INFLUXDB_ADMIN_USER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-influxdb
                  key: admin-user-token
            - name: INFLUXDB_ADMIN_BUCKET
              value: "primary"
            - name: INFLUXDB_ADMIN_ORG
              value: "primary"
            - name: INFLUXDB_USER
              value: "juniper"
            - name: INFLUXDB_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-influxdb
                  key: user-password
            - name: INFLUXDB_USER_BUCKET
              value: "influxdb_nms"
            - name: INFLUXDB_USER_ORG
              value: "svtech"
            - name: INFLUXDB_DB
              value: "influxdb_nms"
          ports:
            - name: http
              containerPort: 8086
              protocol: TCP
            - name: rpc
              containerPort: 8088
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 180
            periodSeconds: 45
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - bash
                - -c
                - |
                  . /opt/bitnami/scripts/libinfluxdb.sh

                  influxdb_env
                  export INFLUX_USERNAME="$INFLUXDB_ADMIN_USER"
                  export INFLUX_PASSWORD="$INFLUXDB_ADMIN_USER_PASSWORD"

                  branch=$(influxdb_branch)

                  if [[ "$branch" = "2" ]]; then
                    export RESPONSE_CODE=$(timeout 29s curl -s -w "%{http_code}\n" "http://$POD_IP:8086/ping?verbose=true" \
                    --data-urlencode 'q=SHOW DATABASES' \
                    --silent | tail -n1)
                  else
                    export RESPONSE_CODE=$(timeout 29s curl -s -w "%{http_code}\n" "http://$POD_IP:8086/query?pretty=true" \
                    --data-urlencode 'q=SHOW DATABASES' \
                    --user "$INFLUX_USERNAME:$INFLUX_PASSWORD" \
                    --silent | tail -n1)
                  fi

                  if [[ $RESPONSE_CODE =~ ^20[0-9] ]]; then
                      echo "OK (CODE: $RESPONSE_CODE)"
                  else
                      echo "FAILED (CODE: $RESPONSE_CODE)"
                      exit 1
                  fi
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 45
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - bash
                - -c
                - |
                  . /opt/bitnami/scripts/libinfluxdb.sh

                  influxdb_env
                  export INFLUX_USERNAME="$INFLUXDB_ADMIN_USER"
                  export INFLUX_PASSWORD="$INFLUXDB_ADMIN_USER_PASSWORD"

                  branch=$(influxdb_branch)

                  if [[ "$branch" = "2" ]]; then
                    export RESPONSE_CODE=$(timeout 29s curl -s -w "%{http_code}\n" "http://$POD_IP:8086/ping?verbose=true" \
                    --data-urlencode 'q=SHOW DATABASES' \
                    --silent | tail -n1)
                  else
                    export RESPONSE_CODE=$(timeout 29s curl -s -w "%{http_code}\n" "http://$POD_IP:8086/query?pretty=true" \
                    --data-urlencode 'q=SHOW DATABASES' \
                    --user "$INFLUX_USERNAME:$INFLUX_PASSWORD" \
                    --silent | tail -n1)
                  fi

                  if [[ $RESPONSE_CODE =~ ^20[0-9] ]]; then
                      echo "OK (CODE: $RESPONSE_CODE)"
                  else
                      echo "FAILED (CODE: $RESPONSE_CODE)"
                      exit 1
                  fi
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: init-data
              mountPath: /docker-entrypoint-initdb.d
            - name: data
              mountPath: "/bitnami/influxdb"
      volumes:
        - name: init-data
          configMap:
            name: cq-and-retention-policy
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: influxdb
---
# Source: influxdb/templates/influxdb/persistentvolume.yaml
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: influxdb
# provisioner: kubernetes.io/no-provisioner
# volumeBindingMode: WaitForFirstConsumer
# allowVolumeExpansion: true
