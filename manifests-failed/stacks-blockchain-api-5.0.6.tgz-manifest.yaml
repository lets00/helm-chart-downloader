---
# Source: stacks-blockchain-api/charts/stacks-blockchain/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-stacks-blockchain
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain
    helm.sh/chart: stacks-blockchain-2.0.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.4.0.0.4"
    app.kubernetes.io/component: stacks-blockchain
automountServiceAccountToken: true
---
# Source: stacks-blockchain-api/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-stacks-blockchain-api
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
automountServiceAccountToken: true
---
# Source: stacks-blockchain-api/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "d1hYZmRMYzhOUQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: stacks-blockchain-api/charts/stacks-blockchain/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-stacks-blockchain
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain
    helm.sh/chart: stacks-blockchain-2.0.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.4.0.0.4"
    app.kubernetes.io/component: stacks-blockchain
data:
  config.toml:
    |
      [node]
      rpc_bind = "0.0.0.0:20443"
      p2p_bind = "0.0.0.0:20444"
      bootstrap_node = "02da7a464ac770ae8337a343670778b93410f2f3fef6bea98dd1c3e9224459d36b@seed-0.mainnet.stacks.co:20444,02afeae522aab5f8c99a00ddf75fbcb4a641e052dd48836408d9cf437344b63516@seed-1.mainnet.stacks.co:20444,03652212ea76be0ed4cd83a25c06e57819993029a7b9999f7d63c36340b34a4e62@seed-2.mainnet.stacks.co:20444"
      prometheus_bind = "0.0.0.0:9153"
      working_dir = "/hirosystems/data"
    
      [burnchain]
      chain = "bitcoin"
      mode = "mainnet"
      peer_host = "bitcoind.stacks.co"
      username = "blockstack"
      password = "blockstacksystem"
      rpc_port = 8332
      peer_port = 8333
---
# Source: stacks-blockchain-api/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-stacks-blockchain-api
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
rules:
---
# Source: stacks-blockchain-api/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-stacks-blockchain-api
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-stacks-blockchain-api
subjects:
  - kind: ServiceAccount
    name: my-release-stacks-blockchain-api
    namespace: "stacks-blockchain-api-5.0.6.tgz"
---
# Source: stacks-blockchain-api/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-stacks-blockchain-api
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
rules:
---
# Source: stacks-blockchain-api/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-stacks-blockchain-api
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-stacks-blockchain-api
subjects:
  - kind: ServiceAccount
    name: my-release-stacks-blockchain-api
    namespace: "stacks-blockchain-api-5.0.6.tgz"
---
# Source: stacks-blockchain-api/charts/postgresql/templates/extra-list.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-all
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "15.4.0"
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    protocol: TCP
    targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
  type: ClusterIP
---
# Source: stacks-blockchain-api/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: stacks-blockchain-api/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: stacks-blockchain-api/charts/stacks-blockchain/templates/service-set.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-stacks-blockchain-0
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain
    helm.sh/chart: stacks-blockchain-2.0.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.4.0.0.4"
    app.kubernetes.io/component: stacks-blockchain
    pod: my-release-stacks-blockchain-0
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-rpc
      port: 20443
      protocol: TCP
      nodePort: null
    - name: tcp-p2p
      port: 20444
      protocol: TCP
      nodePort: null
    - name: tcp-metrics
      port: 9153
      protocol: TCP
      nodePort: null
  selector:
    app.kubernetes.io/name: stacks-blockchain
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: stacks-blockchain
    statefulset.kubernetes.io/pod-name: my-release-stacks-blockchain-0
---
# Source: stacks-blockchain-api/templates/api-reader/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-stacks-blockchain-api-reader
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: reader
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-api
      port: 3999
      protocol: TCP
      nodePort: null
    - name: tcp-socket
      port: 3700
      protocol: TCP
      nodePort: null
    - name: tcp-profiler
      port: 9119
      protocol: TCP
      nodePort: null
      nodePort: null
  selector:
    app.kubernetes.io/name: stacks-blockchain-api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: reader
---
# Source: stacks-blockchain-api/templates/api-rosetta-reader/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-stacks-blockchain-api-rosetta-reader
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: rosetta-reader
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-api
      port: 3999
      protocol: TCP
      nodePort: null
    - name: tcp-socket
      port: 3700
      protocol: TCP
      nodePort: null
    - name: tcp-profiler
      port: 9119
      protocol: TCP
      nodePort: null
      nodePort: null
  selector:
    app.kubernetes.io/name: stacks-blockchain-api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: rosetta-reader
---
# Source: stacks-blockchain-api/templates/api-writer/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-stacks-blockchain-api
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: writer
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-api
      port: 3999
      protocol: TCP
      nodePort: null
    - name: tcp-socket
      port: 3700
      protocol: TCP
      nodePort: null
    - name: tcp-profiler
      port: 9119
      protocol: TCP
      nodePort: null
      nodePort: null
  selector:
    app.kubernetes.io/name: stacks-blockchain-api
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: writer
---
# Source: stacks-blockchain-api/templates/api-reader/deployment.yaml
# Deploy read-only stacks API if Values.apiReader.enabled == true

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-stacks-blockchain-api-reader
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: reader
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: stacks-blockchain-api
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: stacks-blockchain-api
      hiro.so/stacks-blockchain-api-role: reader
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stacks-blockchain-api
        helm.sh/chart: stacks-blockchain-api-5.0.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "7.8.2"
        app.kubernetes.io/component: stacks-blockchain-api
        hiro.so/stacks-blockchain-api-role: reader
    spec:
      serviceAccountName: my-release-stacks-blockchain-api
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: stacks-blockchain-api
                    app.kubernetes.io/component: stacks-blockchain-api
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: stacks-blockchain-api-reader
          image: docker.io/hirosystems/stacks-blockchain-api:7.8.2
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: STACKS_READ_ONLY_MODE
              value: "true"
            - name: STACKS_API_LOG_LEVEL
              value: "info"
            - name: STACKS_CHAIN_ID
              value: "0x00000001"
            - name: STACKS_CORE_EVENT_PORT
              value: "3700"
            - name: STACKS_CORE_EVENT_HOST
              value: "0.0.0.0"
            - name: STACKS_BLOCKCHAIN_API_PORT
              value: "3999"
            - name: STACKS_BLOCKCHAIN_API_HOST
              value: "0.0.0.0"
            - name: STACKS_PROFILER_PORT
              value: "9119"
            - name: STACKS_CORE_RPC_HOST
              value: my-release-stacks-blockchain
            - name: STACKS_CORE_RPC_PORT
              value: "20443"
            - name: STACKS_API_ENABLE_FT_METADATA
              value: "1"
            - name: STACKS_API_ENABLE_NFT_METADATA
              value: "0"
            - name: STACKS_ADDRESS_CACHE_SIZE
              value: "50000"
            - name: PG_DATABASE
              value: stacks_blockchain_api
            - name: PG_SCHEMA
              value: stacks_blockchain_api
            - name: PG_PRIMARY_HOST
              value: my-release-postgresql
            - name: PG_HOST
              value: my-release-postgresql-all
            - name: PG_PORT
              value: "5432"
            - name: PG_USER
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: my-release-postgresql
            - name: PG_APPLICATION_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PG_CONNECTION_POOL_MAX
              value: "50"
            - name: NODE_ENV
              value: production
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http-api
              containerPort: 3999
            - name: tcp-socket
              containerPort: 3700
            - name: tcp-profiler
              containerPort: 9119
          volumeMounts:
      volumes:
---
# Source: stacks-blockchain-api/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "stacks_blockchain_api"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=stacks_blockchain_api" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=stacks_blockchain_api" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
---
# Source: stacks-blockchain-api/charts/stacks-blockchain/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-stacks-blockchain
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain
    helm.sh/chart: stacks-blockchain-2.0.4
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.4.0.0.4"
    app.kubernetes.io/component: stacks-blockchain
spec:
  replicas: 1
  podManagementPolicy: "OrderedReady"
  selector:
    matchLabels: 
      app.kubernetes.io/name: stacks-blockchain
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: stacks-blockchain
  serviceName: my-release-stacks-blockchain
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stacks-blockchain
        helm.sh/chart: stacks-blockchain-2.0.4
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.4.0.0.4"
        app.kubernetes.io/component: stacks-blockchain
    spec:
      serviceAccountName: my-release-stacks-blockchain
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: stacks-blockchain
                    app.kubernetes.io/component: stacks-blockchain
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: stacks-blockchain
          image: docker.io/blockstack/stacks-blockchain:2.4.0.0.4
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          command: ["/bin/stacks-node"]
          args: ["start", "--config", "/app/config.toml"]
          env:
            - name: RUST_BACKTRACE
              value: "0"
            - name: STACKS_LOG_DEBUG
              value: "0"
            - name: STACKS_LOG_JSON
              value: "1"
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http-rpc
              containerPort: 20443
            - name: tcp-p2p
              containerPort: 20444
          volumeMounts:
            - name: data
              mountPath: /hirosystems/data
              readOnly: false
            - name: config
              mountPath: /app
      volumes:
        - name: config
          configMap:
            name: my-release-stacks-blockchain
        - name: data
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "200Gi"
---
# Source: stacks-blockchain-api/templates/api-writer/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-stacks-blockchain-api-writer
  namespace: "stacks-blockchain-api-5.0.6.tgz"
  labels:
    app.kubernetes.io/name: stacks-blockchain-api
    helm.sh/chart: stacks-blockchain-api-5.0.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "7.8.2"
    app.kubernetes.io/component: stacks-blockchain-api
    hiro.so/stacks-blockchain-api-role: writer
spec:
  replicas: 
  podManagementPolicy: 
  selector:
    matchLabels:
      app.kubernetes.io/name: stacks-blockchain-api
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: stacks-blockchain-api
      hiro.so/stacks-blockchain-api-role: writer
  serviceName: my-release-stacks-blockchain-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stacks-blockchain-api
        helm.sh/chart: stacks-blockchain-api-5.0.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "7.8.2"
        app.kubernetes.io/component: stacks-blockchain-api
        hiro.so/stacks-blockchain-api-role: writer
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
    spec:
      serviceAccountName: my-release-stacks-blockchain-api
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: stacks-blockchain-api
                    app.kubernetes.io/component: stacks-blockchain-api
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: download-bns-data
          image: alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: EXPORT_DATA_URL
              value: https://storage.googleapis.com/blockstack-v1-migration-data/export-data.tar.gz
            - name: EXPORT_DATA_FILE
              value: export-data.tar.gz
            - name: BNS_DATA_DIR
              value: /hirosystems/api-writer/bns
          volumeMounts:
            - name: bns-data
              mountPath: /hirosystems/api-writer/bns
          command:
            - sh
            - -c
            - |
              if [ -z "$(ls -A "${BNS_DATA_DIR}" | grep -v "lost+found")" ]; then
                echo "Downloading BNS data"
                wget ${EXPORT_DATA_URL} -O ${BNS_DATA_DIR}/${EXPORT_DATA_FILE}
                tar zxvf ${BNS_DATA_DIR}/${EXPORT_DATA_FILE} -C ${BNS_DATA_DIR}
              else
                echo "Previous data found. Exiting."
              fi
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          resources:
            limits: {}
            requests: {}
      containers:
        - name: stacks-blockchain-api-writer
          image: docker.io/hirosystems/stacks-blockchain-api:7.8.2
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: STACKS_API_LOG_LEVEL
              value: "info"
            - name: STACKS_CHAIN_ID
              value: "0x00000001"
            - name: STACKS_CORE_EVENT_PORT
              value: "3700"
            - name: STACKS_CORE_EVENT_HOST
              value: "0.0.0.0"
            - name: STACKS_BLOCKCHAIN_API_PORT
              value: "3999"
            - name: STACKS_BLOCKCHAIN_API_HOST
              value: "0.0.0.0"
            - name: STACKS_PROFILER_PORT
              value: "9119"
            - name: STACKS_CORE_RPC_HOST
              value: my-release-stacks-blockchain
            - name: STACKS_CORE_RPC_PORT
              value: "20443"
            - name: STACKS_API_ENABLE_FT_METADATA
              value: "1"
            - name: STACKS_API_ENABLE_NFT_METADATA
              value: "0"
            - name: STACKS_ADDRESS_CACHE_SIZE
              value: "50000"
            - name: STACKS_API_TOKEN_METADATA_STRICT_MODE
              value: "1"
            - name: PG_DATABASE
              value: stacks_blockchain_api
            - name: PG_SCHEMA
              value: stacks_blockchain_api
            - name: PG_PRIMARY_HOST
              value: my-release-postgresql
            - name: PG_HOST
              value: my-release-postgresql-all
            - name: PG_PORT
              value: "5432"
            - name: PG_USER
              value: postgres
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: my-release-postgresql
            - name: PG_APPLICATION_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PG_CONNECTION_POOL_MAX
              value: "50"
            - name: NODE_ENV
              value: production
            - name: BNS_IMPORT_DIR
              value: /hirosystems/api-writer/bns
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http-api
              containerPort: 3999
            - name: tcp-socket
              containerPort: 3700
            - name: tcp-profiler
              containerPort: 9119
          volumeMounts:
            - name: data
              mountPath: /hirosystems/api-writer/data
              readOnly: false
            - name: bns-data
              mountPath: /hirosystems/api-writer/bns
      volumes:
        - name: data
        - name: bns-data
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
        
    - metadata:
        name: bns-data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: stacks-blockchain-api/templates/api-rosetta-reader/deployment.yaml
# Deploy read-only stacks API if Values.apiRosettaReader.enabled == true
