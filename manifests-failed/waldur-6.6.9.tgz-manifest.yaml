---
# Source: waldur/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: waldur-secret
type: Opaque
data:
  GLOBAL_SECRET_KEY: "U2VjcmV0S2V5Q2hhbmdlTWU="
---
# Source: waldur/templates/config-auth-yaml.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-config-auth-yaml
data:
  auth.yaml: |
---
# Source: waldur/templates/config-celery.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-celery-config
data:
  celery.conf: |-
    # Waldur Celery configuration file
    #
    # See also: http://docs.celeryproject.org/en/latest/userguide/daemonizing.html

    CELERY_APP="waldur_core.server"

    CELERYBEAT_LOG_FILE="/var/log/waldur/celerybeat.log"
    CELERYBEAT_LOG_LEVEL="INFO"
    CELERYBEAT_OPTS=""
    CELERYBEAT_PID_FILE="/run/waldur/celerybeat/%n.pid"

    CELERYD_LOG_FILE="/var/log/waldur/celery-%n.log"
    CELERYD_LOG_LEVEL="INFO"
    CELERYD_CONCURRENCY=10
    CELERYD_OPTS="-Ofair -Q tasks,heavy,background"
    CELERYD_PID_FILE="/run/waldur/celery/%n.pid"

    #d /run/celery 0755 user users -
    #d /var/log/celery 0755 user users -
---
# Source: waldur/templates/config-features-json.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-config-features-json
data:
  features.json: |
    {
      
        "support.offering_comments": true,
      
      
        "marketplace.private_offerings": true,
      
      
      
      
        "openstack.volume_types": true,
      
      
      
      
      
      
      
      
      
        "customer.hide_organization_billing_step": true,
      
      
      
      
        "customer.billing": true,
        "customer.events": true,
        "project.events": true,
        "marketplace.import_resources": true,
        "user.notifications": true,
        "project.estimated_cost": true,
        "support.users": true,
        "support.customers_list": true,
        "support.resources_treemap": true,
        "support.shared_providers": true,
        "support.legacy_branch": true,
        "support.next_branch": true,
        "customer.team": true,
        "project.team": true
    }
---
# Source: waldur/templates/config-icons.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: icons-config
binaryData:
---
# Source: waldur/templates/config-languages.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-languages-yaml
data:
  languages.yaml: |
    
    LANGUAGE_CHOICES: 'en,et,lt,lv,ru,it,de,da,sv,es,fr,nb,ar,cs'
---
# Source: waldur/templates/config-mastermind-template.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-template-config
data:
  mastermind-templates.yaml: |
---
# Source: waldur/templates/config-override.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-override-config
data:
  override.conf.py: |-
    #
    # Configuration for Waldur plugins
    #
    # Django
    #

    import os
    from datetime import timedelta

    SECRET_KEY = os.environ.get('GLOBAL_SECRET_KEY')

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get('POSTGRESQL_NAME'),
            'HOST': os.environ.get('POSTGRESQL_HOST'),
            'PORT': os.environ.get('POSTGRESQL_PORT'),
            'USER': os.environ.get('POSTGRESQL_USER'),
            'PASSWORD': os.environ.get('POSTGRESQL_PASSWORD'),
        },
    }

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'waldur_cache',
        }
    }

    CELERY_BROKER_URL = "amqp://waldur:waldur@rmq-rabbitmq:5672"

    postgresql_host = os.environ.get('POSTGRESQL_HOST')
    postgresql_port = os.environ.get('POSTGRESQL_PORT')
    postgresql_user = os.environ.get('POSTGRESQL_USER')
    postgresql_password = os.environ.get('POSTGRESQL_PASSWORD')
    postgresql_name = 'celery_results'
    CELERY_RESULT_BACKEND = f'db+postgresql://{postgresql_user}:{postgresql_password}@{postgresql_host}:{postgresql_port}/{postgresql_name}'

    EMAIL_HOST = ''
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False

    

    
    # Local time zone to use. See all at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    TIME_ZONE = 'UTC'
    

    WALDUR_CORE['AUTHENTICATION_METHODS'] = ["LOCAL_SIGNIN"]
    WALDUR_CORE['HOMEPORT_URL'] = 'http://waldur.local/'

    
    WALDUR_AUTH_SOCIAL.update({
        'REMOTE_EDUTEAMS_REFRESH_TOKEN': '',
        'REMOTE_EDUTEAMS_CLIENT_ID': '',
        'REMOTE_EDUTEAMS_SECRET': '',
        'REMOTE_EDUTEAMS_USERINFO_URL': '',
        'REMOTE_EDUTEAMS_TOKEN_URL': '',
        'REMOTE_EDUTEAMS_SSH_API_URL': '',
        'REMOTE_EDUTEAMS_SSH_API_USERNAME': '',
        'REMOTE_EDUTEAMS_SSH_API_PASSWORD': '',
        
        
    })
    

    

    #
    # waldur-freeipa
    #

    

    

    

    #
    # waldur-core
    

    

    

    

    # Disable geoip location till HomePort releases maps to a stable deployment
    WALDUR_CORE['ENABLE_GEOIP'] = False

    

    

    

    

    

    

    

    #
    # waldur-marketplace
    #

    

    

    

    

    #
    # waldur-mastermind
    #
    

    

    

    # Enable reporting of accounting data
    

    
    #
    # waldur-openstack
    #
    
    WALDUR_OPENSTACK.update({
        'TENANT_CREDENTIALS_VISIBLE': False,  # disable display of OpenStack credentials to users
    })
    

    

    

    

    

    

    

    

    
    LANGUAGE_CHOICES = (
        "en",
        "en",
        "et",
        "lt",
        "lv",
        "ru",
        "it",
        "de",
        "da",
        "sv",
        "es",
        "fr",
        "nb",
        "ar",
        "cs",
    )
    


    

    

    

    
    LANGUAGE_CODE = "en"
    

    

    

    WALDUR_CORE["HOMEPORT_SENTRY_ENVIRONMENT"] = os.environ.get("SENTRY_ENVIRONMENT", "production")

    WALDUR_CORE.update({
        'LOCAL_IDP_NAME': '',
        'LOCAL_IDP_LABEL': '',
        'LOCAL_IDP_MANAGEMENT_URL': '',
        'LOCAL_IDP_PROTECTED_FIELDS': [],
    })

    

    WALDUR_CORE['INVITATION_LIFETIME'] = timedelta(weeks=1)
    WALDUR_CORE['GROUP_INVITATION_LIFETIME'] = timedelta(weeks=1)
---
# Source: waldur/templates/config-permissions-override.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-config-permissions-override-yaml
data:
  permissions-override.yaml: |
    - role: CUSTOMER.OWNER
      
      
      add_permissions:
        
        
        - ORDER.APPROVE
        
        
        
      drop_permissions:
        
        - SERVICE_PROVIDER.REGISTER
        
        
        
        - CUSTOMER.CREATE_PERMISSION
        - CUSTOMER.UPDATE_PERMISSION
        - CUSTOMER.DELETE_PERMISSION
        
        
        - CUSTOMER.CREATE
        - CUSTOMER.UPDATE
        - CUSTOMER.DELETE
        

    - role: PROJECT.ADMIN
      
      
      add_permissions:
        
      drop_permissions:
        
        - ORDER.APPROVE
        

    - role: PROJECT.MANAGER
      
      
      add_permissions:
        
      drop_permissions:
        
        - ORDER.APPROVE
        

    - role: PROJECT.MEMBER
      
      is_active: false
---
# Source: waldur/templates/config-support.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-support-yaml
data:
  support.yaml: |
    
    WALDUR_SUPPORT_ENABLED: false
---
# Source: waldur/templates/config-waldur-cleanup-script.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: waldur-cleanup-script-config
data:
  waldur-cleanup: |-
    #!/bin/sh

    echo "[+] Running clear sessions command"
    waldur clearsessions
    echo "[+] Running delete revisions command"
    waldur deleterevisions --keep 5 --days=90
    echo "[+] Finished"
---
# Source: waldur/templates/config-whitelabeling.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mastermind-whitelabeling-yaml
data:
  whitelabeling.yaml: |
    site_name: "Waldur"
    site_address: ""
    site_email: ""
    site_phone: ""
    short_page_title: ""
    full_page_title: ""
    brand_color: ""
    brand_label_color: ""
    hero_link_label: ""
    hero_link_url: ""
    site_description: ""
    currency_name: "EUR"
    docs_url: "https://docs.waldur.com"
    support_portal_url: ""
    site_logo: ""
---
# Source: waldur/templates/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: waldur-mastermind-api
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: waldur-mastermind-api
---
# Source: waldur/templates/service-homeport.yml
apiVersion: v1
kind: Service
metadata:
  name: waldur-homeport
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: waldur-homeport
---
# Source: waldur/templates/deployment-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waldur-mastermind-api
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  progressDeadlineSeconds: 2400
  replicas: 1
  selector:
    matchLabels:
      app: waldur-mastermind-api
  template:
    metadata:
      labels:
        app: waldur-mastermind-api
    spec:
      
      
      containers:
        - name: waldur-mastermind-api
          image: docker.io/opennode/waldur-mastermind:6.6.9
          imagePullPolicy: Always
          args:
            - "mastermind"
          livenessProbe:
            exec:
              command:
                - pgrep
                - gunicorn
            initialDelaySeconds: 5 # it takes around 5 sec to spawn Gunicorn processes
            periodSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              port: 80
              path: /api/configuration/
            initialDelaySeconds: 50 # it takes around a minute to completely start UWSGI server
            periodSeconds: 10
            failureThreshold: 100 # Mastermind can wait long for DB migrations
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          resources:
            
            {}
            
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: api-celery
              mountPath: /etc/waldur/celery.conf
              subPath: celery.conf
            - name: config-features-json
              mountPath: /etc/waldur/features.json
              subPath: features.json
            - name: config-auth-yaml
              mountPath: /etc/waldur/auth.yaml
              subPath: auth.yaml
            - name: config-permissions-override-yaml
              mountPath: /etc/waldur/permissions-override.yaml
              subPath: permissions-override.yaml
            - name: icons
              mountPath: /etc/waldur/icons
            
            
            
            
            
      volumes:
      - name: api-override
        configMap:
          name: api-override-config
      - name: api-celery
        configMap:
          name: api-celery-config
      - name: config-features-json
        configMap:
          name: mastermind-config-features-json
      - name: config-auth-yaml
        configMap:
          name: mastermind-config-auth-yaml
      - name: config-permissions-override-yaml
        configMap:
          name: mastermind-config-permissions-override-yaml
      - name: icons
        configMap:
          name: icons-config
---
# Source: waldur/templates/deployment-beat.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waldur-mastermind-beat
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  progressDeadlineSeconds: 2400
  replicas: 1
  selector:
    matchLabels:
      app: waldur-mastermind-beat
  template:
    metadata:
      labels:
        app: waldur-mastermind-beat
    spec:
      
      
      initContainers:
        - name: check-db-ready
          image: docker.io/bitnami/postgresql:12
          command: ['sh', '-c',
            'until pg_isready;
            do echo waiting for database; sleep 2; done;']
          env:
           - name: PGHOST
             value: "postgresql-waldur"
           
           - name: PGPORT
             value: "5432"
           
           - name: PGUSER
             value: "waldur"
           
           - name: PGDATABASE
             value: "waldur"
           
           - name: PGPASSWORD
             valueFrom:
               secretKeyRef:
                 name: "postgresql-waldur"
                 key: "password"
        - name: create-celery-results-db
          image: docker.io/bitnami/postgresql:12
          command: ['sh', '-c', 'createdb celery_results || true']
          env:
           - name: PGHOST
             value: "postgresql-waldur"
           
           - name: PGPORT
             value: "5432"
           
           - name: PGUSER
             value: "waldur"
           
           - name: PGDATABASE
             value: "waldur"
           
           - name: PGPASSWORD
             valueFrom:
               secretKeyRef:
                 name: "postgresql-waldur"
                 key: "password"
        - name: waldur-mastermind-create-dbcache
          image: docker.io/opennode/waldur-mastermind:6.6.9
          args:
            - initdb-cache
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: api-celery
              mountPath: /etc/waldur/celery.conf
              subPath: celery.conf
          resources:
            {}
        - name: waldur-mastermind-migrate
          image: docker.io/opennode/waldur-mastermind:6.6.9
          args:
            - initdb
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: api-celery
              mountPath: /etc/waldur/celery.conf
              subPath: celery.conf
            - name: config-features-json
              mountPath: /etc/waldur/features.json
              subPath: features.json
            - name: constance-settings-yaml
              mountPath: /etc/waldur/support.yaml
              subPath: support.yaml
            
            - name: waldur-mastermind-template
              mountPath: /etc/waldur/notifications-templates.yaml
              subPath: "mastermind-templates.yaml"
            
            
            
            
            - name: config-auth-yaml
              mountPath: /etc/waldur/auth.yaml
              subPath: auth.yaml
            - name: config-permissions-override-yaml
              mountPath: /etc/waldur/permissions-override.yaml
              subPath: permissions-override.yaml
          resources:
            {}
      containers:
        - name: waldur-mastermind-beat
          image: docker.io/opennode/waldur-mastermind:6.6.9
          imagePullPolicy: Always
          args:
            - "beat"
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          resources:
            
            {}
            
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: api-celery
              mountPath: /etc/waldur/celery.conf
              subPath: celery.conf
            
            
      volumes:
      - name: api-override
        configMap:
          name: api-override-config
      - name: api-celery
        configMap:
          name: api-celery-config
      - name: config-features-json
        configMap:
          name: mastermind-config-features-json
      - name: config-auth-yaml
        configMap:
          name: mastermind-config-auth-yaml
      - name: config-permissions-override-yaml
        configMap:
          name: mastermind-config-permissions-override-yaml
      - name: constance-settings-yaml
        configMap:
          name: mastermind-support-yaml
      
      - name: waldur-mastermind-template
        configMap:
          name: mastermind-template-config
---
# Source: waldur/templates/deployment-homeport.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waldur-homeport
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: waldur-homeport
  template:
    metadata:
      labels:
        app: waldur-homeport
    spec:
      
      
      containers:
        - name: waldur-homeport
          image: docker.io/opennode/waldur-homeport:6.6.9
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              port: 80
              path: /scripts/configs/config.json
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              port: 80
              path: /scripts/configs/config.json
            initialDelaySeconds: 3
            periodSeconds: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: TITLE
              value: 
            - name: API_URL
              value: "http://waldur.local/"
            
            
          resources:
            {}
---
# Source: waldur/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: waldur-mastermind-worker
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
spec:
  progressDeadlineSeconds: 2400
  replicas: 1
  selector:
    matchLabels:
      app: waldur-mastermind-worker
  template:
    metadata:
      labels:
        app: waldur-mastermind-worker
    spec:
      
      
      containers:
        - name: waldur-mastermind-worker
          image: docker.io/opennode/waldur-mastermind:6.6.9
          imagePullPolicy: Always
          args:
            - "worker"
          # startup probe: check if there are no pending migrations
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "celery -A waldur_core.server inspect -d celery@$HOSTNAME ping"
            initialDelaySeconds: 15
            periodSeconds: 25
            timeoutSeconds: 20
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "celery -A waldur_core.server inspect -d celery@$HOSTNAME ping"
            initialDelaySeconds: 20
            periodSeconds: 25
            timeoutSeconds: 20
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          resources:
            
            {}
            
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: api-celery
              mountPath: /etc/waldur/celery.conf
              subPath: celery.conf
            - name: config-features-json
              mountPath: /etc/waldur/features.json
              subPath: features.json
            - name: config-auth-yaml
              mountPath: /etc/waldur/auth.yaml
              subPath: auth.yaml
            - name: config-permissions-override-yaml
              mountPath: /etc/waldur/permissions-override.yaml
              subPath: permissions-override.yaml
            
            
            
            
      volumes:
      - name: api-override
        configMap:
          name: api-override-config
      - name: api-celery
        configMap:
          name: api-celery-config
      - name: config-features-json
        configMap:
          name: mastermind-config-features-json
      - name: config-auth-yaml
        configMap:
          name: mastermind-config-auth-yaml
      - name: config-permissions-override-yaml
        configMap:
          name: mastermind-config-permissions-override-yaml
---
# Source: waldur/templates/cronjob-waldur-cleanup.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: waldur-cleanup-cronjob
spec:
  schedule: "0 5 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: waldur-cleanup
              image: docker.io/opennode/waldur-mastermind:6.6.9
              imagePullPolicy: Always
              args:
                - waldur-cleanup
              env:
                 - name: GLOBAL_SECRET_KEY
                   valueFrom:
                     secretKeyRef:
                       name: waldur-secret
                       key: GLOBAL_SECRET_KEY
                 
                 - name: POSTGRESQL_HOST
                   value: "postgresql-waldur"
                 
                 - name: POSTGRESQL_PORT
                   value: "5432"
                 
                 - name: POSTGRESQL_USER
                 
                   value: "waldur"
                 
                 
                 - name: POSTGRESQL_PASSWORD
                   valueFrom:
                     secretKeyRef:
                       name: "postgresql-waldur"
                       key: "password"
                 
                 - name: POSTGRESQL_NAME
                   value: "waldur"
                 
                 
                 
                 
                 
                 
                 
                 
              volumeMounts:
                - name: waldur-cleanup-script
                  mountPath: /usr/local/bin/waldur-cleanup
                  subPath: waldur-cleanup
          volumes:
            - name: waldur-cleanup-script
              configMap:
                name: waldur-cleanup-script-config
                defaultMode: 0755
          restartPolicy: Never
---
# Source: waldur/templates/ingress-api-admin.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress-admin
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,sentry-trace,baggage
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    cert-manager.io/cluster-issuer: letsencrypt-prod-issuer
    
    
spec:
  rules:
  - host: waldur.local
    http:
      paths:
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
  
  tls:
  - hosts:
    - waldur.local
    
    secretName: api-certificate
---
# Source: waldur/templates/ingress-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,sentry-trace,baggage
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    cert-manager.io/cluster-issuer: letsencrypt-prod-issuer
    
    
spec:
  rules:
  - host: waldur.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /api-auth
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /docs
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /apidocs
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /media
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
      - path: /health-check
        pathType: Prefix
        backend:
          service:
            name: waldur-mastermind-api
            port:
              number: 80
  
  tls:
  - hosts:
    - waldur.local
    
    secretName: api-certificate
---
# Source: waldur/templates/ingress-homeport.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: homeport-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    cert-manager.io/cluster-issuer: letsencrypt-prod-issuer
    
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,sentry-trace,baggage
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Content-Security-Policy: base-uri 'self'; object-src 'none'; media-src 'none'; script-src 'self' sentry.opnd.org ; style-src 'self' 'unsafe-inline'; img-src 'self' *.tile.openstreetmap.org waldur.local blob: data: ; connect-src 'self' waldur.local  nominatim.openstreetmap.org:443 sentry.opnd.org:443 sentry.opnd.org:80; font-src 'self' data: ; frame-src 'none'; frame-ancestors 'none'";
    
spec:
  rules:
  - host: waldur.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: waldur-homeport
            port:
              number: 80
  
  tls:
  - hosts:
    - waldur.local
    
    secretName: homeport-certificate
---
# Source: waldur/templates/letsencrypt-issuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod-issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: 
    privateKeySecretRef:
      name: letsencrypt-prod-issuer-key
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Source: waldur/templates/job-initdb.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: waldur-mastermind-initdb-job
  labels:
    app.kubernetes.io/name: waldur
    helm.sh/chart: waldur-6.6.9
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "6.6.9"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/version: 6.6.9
        helm.sh/chart: "waldur-6.6.9"
    spec:
      containers:
        - name: waldur-mastermind-whitelabeling-init
          image: docker.io/opennode/waldur-mastermind:6.6.9
          args:
            - init-whitelabeling
          env:
             - name: GLOBAL_SECRET_KEY
               valueFrom:
                 secretKeyRef:
                   name: waldur-secret
                   key: GLOBAL_SECRET_KEY
             
             - name: POSTGRESQL_HOST
               value: "postgresql-waldur"
             
             - name: POSTGRESQL_PORT
               value: "5432"
             
             - name: POSTGRESQL_USER
             
               value: "waldur"
             
             
             - name: POSTGRESQL_PASSWORD
               valueFrom:
                 secretKeyRef:
                   name: "postgresql-waldur"
                   key: "password"
             
             - name: POSTGRESQL_NAME
               value: "waldur"
             
             
             
             
             
             
             
             
          volumeMounts:
            - name: api-override
              mountPath: /etc/waldur/override.conf.py
              subPath: override.conf.py
            - name: whitelabeling-yaml
              mountPath: /etc/waldur/whitelabeling.yaml
              subPath: whitelabeling.yaml
            - name: icons
              mountPath: /etc/waldur/icons
            - name: languages-yaml
              mountPath: /etc/waldur/languages.yaml
              subPath: languages.yaml
          resources:
            {}

      volumes:
      - name: api-override
        configMap:
          name: api-override-config
      - name: api-celery
        configMap:
          name: api-celery-config
      - name: icons
        configMap:
          name: icons-config
      - name: whitelabeling-yaml
        configMap:
          name: mastermind-whitelabeling-yaml
      - name: languages-yaml
        configMap:
          name: mastermind-languages-yaml
      
      
      restartPolicy: "Never"
