---
# Source: redash/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: redash/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-redis
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: redash/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
automountServiceAccountToken: false
---
# Source: redash/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-master
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
---
# Source: redash/charts/redis/templates/replicas/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-replica
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
---
# Source: redash/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-redash
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
---
# Source: redash/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
type: Opaque
data:
  postgres-password: "ZDJSNWJ2cUg1UQ=="
  password: "WHV5bUtEb0ZHMQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: redash/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
type: Opaque
data:
  redis-password: "Tkp1bmVBYUMwWg=="
---
# Source: redash/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redash
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  ## Start primary Redash configuration
  secretKey: "dGVzdA=="
  googleClientSecret: ""
  ldapBindDnPassword: ""
  cookieSecret: "dGVzdA=="
  mailPassword: ""
  ## End primary Redash configuration
---
# Source: redash/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: redash/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: redash/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    HEADLESS_SERVICE="my-release-redis-headless.redash-3.1.0-alpha6.tgz.svc.cluster.local"

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: redash/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: redash/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: redash/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: redash/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: redash/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-replicas
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: replica
---
# Source: redash/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redash
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 5000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: server
---
# Source: redash/templates/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redash-scheduler
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: scheduler
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redash
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: scheduler
    spec:
      serviceAccountName: my-release-redash
      securityContext: 
        {}
      containers:
        - name: redash-scheduler
          securityContext: 
            {}
          image: docker.io/redash/preview:24.04.0-dev-b8718551048.32
          imagePullPolicy: IfNotPresent
          args:
            - scheduler
          env:
            - name: REDASH_DATABASE_USER
              value: "redash"
            - name: REDASH_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REDASH_DATABASE_HOSTNAME
              value: my-release-postgresql
            - name: REDASH_DATABASE_PORT
              value: "5432"
            - name: REDASH_DATABASE_NAME
              value: "redash"
            - name: REDASH_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDASH_REDIS_HOSTNAME
              value: my-release-redis-master
            - name: REDASH_REDIS_PORT
              value: "6379"
            - name: REDASH_REDIS_NAME
              value: "0"
            - name: PYTHONUNBUFFERED
              value: "0"
            - name: REDASH_PRODUCTION
              value: "true"
            ## Start primary Redash configuration
            - name: REDASH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: secretKey
            - name: REDASH_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: cookieSecret
            ## End primary Redash configuration
          livenessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - /app/bin/docker-entrypoint workers_healthcheck
            initialDelaySeconds: 60
            periodSeconds: 100
---
# Source: redash/templates/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redash
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redash
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: my-release-redash
      securityContext: 
        {}
      containers:
        - name: redash-server
          securityContext: 
            {}
          image: docker.io/redash/preview:24.04.0-dev-b8718551048.32
          imagePullPolicy: IfNotPresent
          args:
            - server
          env:
            - name: REDASH_DATABASE_USER
              value: "redash"
            - name: REDASH_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REDASH_DATABASE_HOSTNAME
              value: my-release-postgresql
            - name: REDASH_DATABASE_PORT
              value: "5432"
            - name: REDASH_DATABASE_NAME
              value: "redash"
            - name: REDASH_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDASH_REDIS_HOSTNAME
              value: my-release-redis-master
            - name: REDASH_REDIS_PORT
              value: "6379"
            - name: REDASH_REDIS_NAME
              value: "0"
            - name: PYTHONUNBUFFERED
              value: "0"
            - name: REDASH_PRODUCTION
              value: "true"
            ## Start primary Redash configuration
            - name: REDASH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: secretKey
            - name: REDASH_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: cookieSecret
            ## End primary Redash configuration
          ports:
            - containerPort: 5000
          livenessProbe: 
            failureThreshold: 10
            httpGet:
              path: /ping
              port: 5000
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
---
# Source: redash/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redash-adhocworker
  labels: 
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: adhocworker
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: redash
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-redash
      securityContext: 
        {}
      containers:
        - name: redash-adhocworker
          securityContext: 
            {}
          image: docker.io/redash/preview:24.04.0-dev-b8718551048.32
          imagePullPolicy: IfNotPresent
          args: 
            - worker
          livenessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - /app/bin/docker-entrypoint workers_healthcheck
            initialDelaySeconds: 60
            periodSeconds: 100
          env:
            - name: REDASH_DATABASE_USER
              value: "redash"
            - name: REDASH_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REDASH_DATABASE_HOSTNAME
              value: my-release-postgresql
            - name: REDASH_DATABASE_PORT
              value: "5432"
            - name: REDASH_DATABASE_NAME
              value: "redash"
            - name: REDASH_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDASH_REDIS_HOSTNAME
              value: my-release-redis-master
            - name: REDASH_REDIS_PORT
              value: "6379"
            - name: REDASH_REDIS_NAME
              value: "0"
            - name: PYTHONUNBUFFERED
              value: "0"
            - name: QUEUES
              value: "queries"
            - name: REDASH_PRODUCTION
              value: "true"
            - name: WORKERS_COUNT
              value: "2"
            ## Start primary Redash configuration
            - name: REDASH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: secretKey
            - name: REDASH_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: cookieSecret
            ## End primary Redash configuration
---
# Source: redash/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redash-genericworker
  labels: 
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: genericworker
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: redash
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-redash
      securityContext: 
        {}
      containers:
        - name: redash-genericworker
          securityContext: 
            {}
          image: docker.io/redash/preview:24.04.0-dev-b8718551048.32
          imagePullPolicy: IfNotPresent
          args: 
            - worker
          livenessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - /app/bin/docker-entrypoint workers_healthcheck
            initialDelaySeconds: 60
            periodSeconds: 100
          env:
            - name: REDASH_DATABASE_USER
              value: "redash"
            - name: REDASH_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REDASH_DATABASE_HOSTNAME
              value: my-release-postgresql
            - name: REDASH_DATABASE_PORT
              value: "5432"
            - name: REDASH_DATABASE_NAME
              value: "redash"
            - name: REDASH_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDASH_REDIS_HOSTNAME
              value: my-release-redis-master
            - name: REDASH_REDIS_PORT
              value: "6379"
            - name: REDASH_REDIS_NAME
              value: "0"
            - name: PYTHONUNBUFFERED
              value: "0"
            - name: QUEUES
              value: "periodic,emails,default"
            - name: REDASH_PRODUCTION
              value: "true"
            - name: WORKERS_COUNT
              value: "1"
            ## Start primary Redash configuration
            - name: REDASH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: secretKey
            - name: REDASH_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: cookieSecret
            ## End primary Redash configuration
---
# Source: redash/templates/worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redash-scheduledworker
  labels: 
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: scheduledworker
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: redash
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-redash
      securityContext: 
        {}
      containers:
        - name: redash-scheduledworker
          securityContext: 
            {}
          image: docker.io/redash/preview:24.04.0-dev-b8718551048.32
          imagePullPolicy: IfNotPresent
          args: 
            - worker
          livenessProbe: 
            exec:
              command:
              - /bin/sh
              - -c
              - /app/bin/docker-entrypoint workers_healthcheck
            initialDelaySeconds: 60
            periodSeconds: 100
          env:
            - name: REDASH_DATABASE_USER
              value: "redash"
            - name: REDASH_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: REDASH_DATABASE_HOSTNAME
              value: my-release-postgresql
            - name: REDASH_DATABASE_PORT
              value: "5432"
            - name: REDASH_DATABASE_NAME
              value: "redash"
            - name: REDASH_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDASH_REDIS_HOSTNAME
              value: my-release-redis-master
            - name: REDASH_REDIS_PORT
              value: "6379"
            - name: REDASH_REDIS_NAME
              value: "0"
            - name: PYTHONUNBUFFERED
              value: "0"
            - name: QUEUES
              value: "scheduled_queries,schemas"
            - name: REDASH_PRODUCTION
              value: "true"
            - name: WORKERS_COUNT
              value: "1"
            ## Start primary Redash configuration
            - name: REDASH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: secretKey
            - name: REDASH_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: my-release-redash
                  key: cookieSecret
            ## End primary Redash configuration
---
# Source: redash/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.5
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-15.2.5
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r15
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "redash"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "redash"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "redash" -d "dbname=redash" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "redash" -d "dbname=redash" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: redash/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.1.0
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 7ea9461c0b5a962ece11f8cb8834259a95de623f19923d889c7000013a808271
        checksum/secret: 8985f6eb2ae15d229334e8b643fb785498b30f1121d72d7ee75ad9d71fbaeed9
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: redash/charts/redis/templates/replicas/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-replicas
  namespace: "redash-3.1.0-alpha6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-19.1.0
    app.kubernetes.io/component: replica
spec:
  replicas: 0
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: replica
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-19.1.0
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 7ea9461c0b5a962ece11f8cb8834259a95de623f19923d889c7000013a808271
        checksum/secret: 4982ace07c2bdcf7e9015f74f33e0ab1b250e0ddcf1d0a0b69b64502dd9f75b9
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-replica
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-12-r9
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: my-release-redis-master-0.my-release-redis-headless.redash-3.1.0-alpha6.tgz.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: redash/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-redash-test-connection"
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: test-connection
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: curl
      image: curlimages/curl:7.68.0
      command: ['sh']
      args: ['-c', 'curl --silent --show-error -L --max-redirs 3 --retry 3 --retry-connrefused --retry-delay 10 --max-time 30 "http://my-release-redash:80" | fgrep "Welcome to Redash"']
  restartPolicy: Never
---
# Source: redash/templates/hook-migrations-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-migrations"
  labels:
    helm.sh/chart: redash-3.1.0-alpha6
    app.kubernetes.io/name: redash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "24.04.0-dev-b8718551048.32"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: migrations
  annotations:
    # This is what defines this resource as a hook.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      name: "my-release"
      labels: 
        app.kubernetes.io/name: redash
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-redash
      restartPolicy: Never
      securityContext: 
        {}
      containers:
      - name: redash-server
        securityContext: 
          {}
        image: "docker.io/redash/preview:24.04.0-dev-b8718551048.32"
        imagePullPolicy: IfNotPresent
        args:
          - create_db
        env:
          - name: REDASH_DATABASE_USER
            value: "redash"
          - name: REDASH_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-postgresql
                key: password
          - name: REDASH_DATABASE_HOSTNAME
            value: my-release-postgresql
          - name: REDASH_DATABASE_PORT
            value: "5432"
          - name: REDASH_DATABASE_NAME
            value: "redash"
          - name: REDASH_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: my-release-redis
                key: redis-password
          - name: REDASH_REDIS_HOSTNAME
            value: my-release-redis-master
          - name: REDASH_REDIS_PORT
            value: "6379"
          - name: REDASH_REDIS_NAME
            value: "0"
          ## Start primary Redash configuration
          - name: REDASH_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: my-release-redash
                key: secretKey
          - name: REDASH_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-redash
                key: cookieSecret
          ## End primary Redash configuration
