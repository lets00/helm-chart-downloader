---
# Source: istio-ratelimit/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: istio-ratelimit/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    # End of replica configuration
---
# Source: istio-ratelimit/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: istio-ratelimit/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--protected-mode" "no")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    ARGS+=("--maxmemory 200mb")
    ARGS+=("--maxmemory-policy allkeys-lru")
    exec redis-server "${ARGS[@]}"
---
# Source: istio-ratelimit/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-istio-ratelimit
data:
  ingressgateway-ratelimit.yaml: |-
    domain: ingressgateway-ratelimit
    descriptors:
  
  
  
  
    
      - key: header_match
        value: "group1_prefix_match_/kfpt-net-bg"
        rate_limit:
          unit: minute
          requests_per_unit: 5
        descriptors:
          - key: remote_address
            rate_limit:
              unit: minute
              requests_per_unit: 5
          - key: "header_x-token"
            rate_limit:
              unit: minute
              requests_per_unit: 5
---
# Source: istio-ratelimit/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: istio-ratelimit/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: istio-ratelimit/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-istio-ratelimit
  labels:
    helm.sh/chart: istio-ratelimit-0.0.5
    app.kubernetes.io/name: istio-ratelimit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4d2efd61"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http-port
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: grpc-port
      port: 8081
      targetPort: 8081
      protocol: TCP
    - name: http-debug
      port: 6070
      targetPort: 6070
      protocol: TCP
  selector:
    app.kubernetes.io/name: istio-ratelimit
    app.kubernetes.io/instance: my-release
---
# Source: istio-ratelimit/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-istio-ratelimit
  labels:
    helm.sh/chart: istio-ratelimit-0.0.5
    app.kubernetes.io/name: istio-ratelimit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4d2efd61"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: istio-ratelimit
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: istio-ratelimit
        app.kubernetes.io/instance: my-release
    spec:
      securityContext:
        {}
      containers:
        - name: istio-ratelimit
          securityContext:
            {}
          image: "envoyproxy/ratelimit:4d2efd61"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/ratelimit
          env:
            - name: LOG_LEVEL
              value: debug
            - name: REDIS_SOCKET_TYPE
              value: tcp
            - name: REDIS_URL
              value: my-release-istio-ratelimit-redis-master:6379
            - name: USE_STATSD
              value: "false"
            - name: RUNTIME_ROOT
              value: /data
            - name: RUNTIME_SUBDIRECTORY
              value: ratelimit
            - name: RUNTIME_IGNOREDOTFILES
              value: "true"
            - name: RUNTIME_WATCH_ROOT
              value: "false"
          ports:
            - containerPort: 8080
            - containerPort: 8081
            - containerPort: 6070
          volumeMounts:
            - name: config-volume
              mountPath: /data/ratelimit/config
          resources:
            {}
      volumes:
        - name: config-volume
          configMap:
            name: my-release-istio-ratelimit
---
# Source: istio-ratelimit/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "istio-ratelimit-0.0.5.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.11.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.11.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: fd6d2e54253224381b492c2f433b3c717aa6ae6225fd2e9f7c15f0af88f982ff
        checksum/health: c0f955c7f9a46130f5e7440253763229e7c0da12aaa199886c693bba57bf7896
        checksum/scripts: ca152bc9ca0b72229dfeb18e6f4111f8ab85c4e8d923865b78e4c8ba395dcb98
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: istio-ratelimit/templates/envoy-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: my-release-istio-ratelimit-svc
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    
    
    
    
      
      
    - applyTo: VIRTUAL_HOST
      match:
        context: GATEWAY
        routeConfiguration:
          vhost:
            name: "hw-api-fat.tanjingmama.cn:80"
            route:
              action: ANY
      patch:
        operation: MERGE
        # Applies the rate limit rules.
        value:
          rate_limits:
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
              stage: 0
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
                - remote_address: {}
              stage: 0
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value:  "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
                - request_headers:
                    header_name: "x-token"
                    descriptor_key:  "header_x-token"
              stage: 0
      
      
    - applyTo: VIRTUAL_HOST
      match:
        context: GATEWAY
        routeConfiguration:
          vhost:
            name: "hw-api-fat.tanjingmama.cn:443"
            route:
              action: ANY
      patch:
        operation: MERGE
        # Applies the rate limit rules.
        value:
          rate_limits:
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
              stage: 0
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value: "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
                - remote_address: {}
              stage: 0
            - actions: # any actions in here
                - header_value_match:
                    descriptor_value:  "group1_prefix_match_/kfpt-net-bg"
                    expect_match: true
                    headers:
                      - name: ":path"
                        prefix_match: "/kfpt-net-bg"
                - request_headers:
                    header_name: "x-token"
                    descriptor_key:  "header_x-token"
              stage: 0
---
# Source: istio-ratelimit/templates/envoy-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: my-release-istio-ratelimit
  namespace: istio-system
spec:
  workloadSelector:
    # select by label in the same namespace
    labels:
      istio: ingressgateway
  configPatches:
    # The Envoy config you want to modify
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        # Adds the Envoy Rate Limit Filter in HTTP filter chain.
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: ingressgateway-ratelimit # 必须匹配 ratelimit ConfigMap 中的 domain
            failure_mode_deny: false # 在故障打开模式下运行插件，如果 ratelimit 不可用则不会发生限制
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate_limit_cluster
                timeout: 0.25s
              transport_api_version: V3
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.ratelimit"
      patch:
        operation: INSERT_AFTER
        value:
          name: envoy.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inlineCode: |
              function envoy_on_response(response_handle)
                if response_handle:headers():get(":status") == "429" then
                  response_handle:headers():add("ratelimit", "true")
                  response_handle:headers():replace(":status", 429)
                  response_handle:body(true):setBytes('{"msg":"the request is limited"}')
                  response_handle:headers():replace("content-type", "application/json")
                else
                  response_handle:headers():add("ratelimit", "false")
                end
              end
    - applyTo: CLUSTER
      match:
        cluster:
          service: my-release-istio-ratelimit.istio-ratelimit-0.0.5.tgz.svc.cluster.local
      patch:
        operation: ADD
        # Adds the rate limit service cluster for rate limit service defined in step 1.
        value:
          name: rate_limit_cluster
          type: STRICT_DNS
          connect_timeout: 10s
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: rate_limit_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: my-release-istio-ratelimit.istio-ratelimit-0.0.5.tgz.svc.cluster.local
                          port_value: 8081
---
# Source: istio-ratelimit/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-istio-ratelimit-test-connection"
  labels:
    helm.sh/chart: istio-ratelimit-0.0.5
    app.kubernetes.io/name: istio-ratelimit
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "4d2efd61"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-istio-ratelimit:8080']
  restartPolicy: Never
