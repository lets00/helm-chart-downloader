---
# Source: kubedash/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubedash-admin
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
---
# Source: kubedash/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-kubedash-config
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
data:
  K8S_CLUSTER_NAME: "k8s-cluster"
  K8S_API_SERVER: "https://kubernetes.mydomain.intra:6443"
  K8S_API_CA: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCmNlcnQgZGF0YSBoZXJlCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
---
# Source: kubedash/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
  name: my-release-kubedash-db
  namespace: kubedash-3.0.1.tgz
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubedash-admin
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csr-creator
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - list
  - watch
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csr-approver
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/kubedash-apiserver-client
  verbs:
  - approve
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csr-signer
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/status
  verbs:
  - update
- apiGroups:
  - certificates.k8s.io
  resources:
  - signers
  resourceNames:
  - kubernetes.io/kubedash-apiserver-client
  verbs:
  - sign
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedash-admin
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubedash-admin
subjects:
- kind: ServiceAccount
  name: kubedash-admin
  namespace: kubedash-3.0.1.tgz
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedash-admin-csr-creator
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csr-creator
subjects:
- kind: ServiceAccount
  name: kubedash-admin
  namespace: kubedash-3.0.1.tgz
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedash-admin-csr-approver
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csr-approver
subjects:
- kind: ServiceAccount
  name: kubedash-admin
  namespace: kubedash-3.0.1.tgz
---
# Source: kubedash/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubedash-admin-csr-signer
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csr-signer
subjects:
- kind: ServiceAccount
  name: kubedash-admin
  namespace: kubedash-3.0.1.tgz
---
# Source: kubedash/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kubedash
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
spec:
  selector:
    app: kubedash
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
  ports:
  - name: http
    port: 8000
    protocol: TCP
    targetPort: 8000
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: kubedash/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kubedash
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
    checksum/config: 5272872c93a3cd2f2bd6fd846b0000afd62578fcdf6f609f10ed06f28683d18
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "100%"
      maxUnavailable: "100%"
  selector:
    matchLabels:
      app: kubedash
      app.kubernetes.io/name: kubedash
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app: kubedash
        helm.sh/chart: kubedash-3.0.1
        app.kubernetes.io/name: kubedash
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "3.0.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: kubedash
        checksum/config: 5272872c93a3cd2f2bd6fd846b0000afd62578fcdf6f609f10ed06f28683d18
    spec:
      serviceAccountName: kubedash-admin
      securityContext:
        fsGroup: 10001
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        runAsUser: 10001
      containers:
      - name: kubedash
        image: "devopstales/kubedash:3.0.0"
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
        env:
          - name: TZ
            value: CET
          - name: FLASK_CONFIG
            value: "production"
          - name: PLUGIN_HELM_ENABLED
            value: "True"
        envFrom:
          - configMapRef: 
              name: my-release-kubedash-config
        livenessProbe:
          httpGet:
            path: /healthz/live
            port: 8000
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 8000
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: cache
          mountPath: "/code/kubedash/database"
        ports:
        - containerPort: 8000
          protocol: TCP
          name: http
      volumes:
      - name: cache
        persistentVolumeClaim:
            claimName: my-release-kubedash-db
---
# Source: kubedash/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-kubedash-ingress
  labels:
    app: kubedash
    helm.sh/chart: kubedash-3.0.1
    app.kubernetes.io/name: kubedash
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "3.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubedash
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 10m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/server-snippets: |
      location / {
        proxy_set_header Upgrade $http_upgrade;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
      }
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - kubedash.mydomain.intra
  rules:
    - host: "kubedash.mydomain.intra"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-kubedash
                port: 
                  number: 8000
