---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### jaeger RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lSQUp1UVhtZVZTMHpHejlWMmtBU01sK2N3RFFZSktvWklodmNOQVFFTEJRQXcKT2pFNE1EWUdBMVVFQXhNdmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMVEl3TWpRdQpOaTR5TG5SbmVpNXpkbU13SGhjTk1qUXdOakl3TVRRMU56UTBXaGNOTWpVd05qSXdNVFExTnpRMFdqQTZNVGd3Ck5nWURWUVFERXk5cVlXVm5aWEl0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzFxWVdWblpYSXRNakF5TkM0MkxqSXUKZEdkNkxuTjJZekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPOHcxK05PN2dFdQpHOUVzV2hMNnJLWk5QemtyZ0hoRVpSVERsRG5mYWlQTVNGWFRDczFFMkdyUVpHZUxHbjZWSmR2WERjMERTMHVZCnBLVWdtdG5WL1NuZjFBRjFGODB3em51RzFFZnVQSm94QzlsTnFSdXFRR0RrYkRkcnlTOVpIRFRmalgyQVArNzIKblRnQzlkYVNLY1daaVA0M29vTndncnJjUlhOQnlKY1FlMHVLQTZxOHdheHFhUk5NcHJNRWlVcmhuRE1YUzRoOQovMzBaeHpFaUhodTZ6YTRRTkhTdHBGZ25mUERnbjVDeE5aYlIvUGZBNmgvZFloZ2JyWkpiSDhQR0EzVnRsM3ZiCnlERGRucWhISUg5U1dyQVhrZWJVVmhrWGMvT1NZcEQ1d1N6OE9aZkxIZ1lLcTBrWExwc2RrMG1pbGJqaHM3TlMKbm15MElCSWNQZGNDQXdFQUFhTjdNSGt3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzRwpBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTURvR0ExVWRFUVF6TURHQ0wycGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2kweU1ESTBMall1TWk1MFozb3VjM1pqTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQytTdTY3MGg1Y3YxRGtYcmV1YzlRd1BhUTAwaFBzL24xRURwYVQvaUo5eDRkUgpsbUt0bUdMTFJvdXNmNmUyaDJzOXlrVGVEUTRxZGo5Nlo2SUl3TWFWNUN1ak5aSFh4bmFmUTR6UEJPblhXRDFiCmt1T1EzRHdHb3lhM3hXNmQ3VGo5NWJTeHRyYmV0QVVONlRkRnJsVG0xRE9TMWl6VGFkNmlpRGZTTVJaSnBTV1gKSkl5cDBLTjN5Vk0xc2tzTkJDSWNJVTJKR1BSYnJrMTdMQjcxR2lCaVRlZW45WlFha2wwaVdSaVBXdnp2WWwxNQpDNUZ5eEpOcmpxeWdIdG1kaUVnL3lRMndYRnBzaFZaV3pnR3pnUGpTaUxNSjE0MnVERUJTSEU3VWYrZjByRFdrCm1DOVVrMnZBdXVDbmxDcEhmUHZZalJSVW9VQTN4N1J1Y1NjNW5Uc1AKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBN3pEWDQwN3VBUzRiMFN4YUV2cXNwazAvT1N1QWVFUmxGTU9VT2Q5cUk4eElWZE1LCnpVVFlhdEJrWjRzYWZwVWwyOWNOelFOTFM1aWtwU0NhMmRYOUtkL1VBWFVYelRET2U0YlVSKzQ4bWpFTDJVMnAKRzZwQVlPUnNOMnZKTDFrY05OK05mWUEvN3ZhZE9BTDExcElweFptSS9qZWlnM0NDdXR4RmMwSElseEI3UzRvRApxcnpCckdwcEUweW1zd1NKU3VHY014ZExpSDMvZlJuSE1TSWVHN3JOcmhBMGRLMmtXQ2Q4OE9DZmtMRTFsdEg4Cjk4RHFIOTFpR0J1dGtsc2Z3OFlEZFcyWGU5dklNTjJlcUVjZ2YxSmFzQmVSNXRSV0dSZHo4NUppa1BuQkxQdzUKbDhzZUJncXJTUmN1bXgyVFNhS1Z1T0d6czFLZWJMUWdFaHc5MXdJREFRQUJBb0lCQVFEczlCb3JHVm8yMlJLOQptWTV5RnR0S3RHUFpvdnJXS2d0cEVvZVkvWGNNbDZkaFBuMEk5UmJnV2luZFdiU1ppZS9EWmJ4S1NPVWlzc2tJCnZOQXExUTdEbVBWUnJFbzBBQkhOMWJnZXVpaFhLQmR3NHJxUXFZeTFjQlMwb3BiZnpRdGdaY2FwZVkvY2ozc1kKcmZZVTV4OXluYk5WQkpCK1hjdGtpaXBURCt4RG1Tbmk0c3Q1am0rdnliY2Iyby80RFFmNDVGcEpCUW9keHI1VgpmQzB0ZDcxYXZiYXdkU2syVnFIUFRzTVpRb0c2dmxYbEZrT3B2NlhZbk1DTmtPclgvMW1uN1pDQXNEWXRha1R5CmRJS0dNYUFVU0paM0Z1UnFEcWlpUnJURUdSSU5sTVJwUW1lcVhwU3dZZ0hYUHE4eVNNMGw2NWx0cXE4bVNheHIKUFAwOERsd2hBb0dCQVBIcnFhQ29Pd3RabCtxQWZ6cVNWNS9ZanVrTU5FQW0rdmNrQzJ4VXRZZlJLczdnSS9WVwp3aklGdDZyaDMydjZYekRBV2FpYm9SalU3akpnMTZjSXNxaVpNMDJlQVdKT1JDbnFBN2NPKzhJZDBmVmgwNEx3ClFzQzFQZHMyenBFUlB3YXp3cTEwQWxOQXJQcTIwRHI3MGROS2lwNTdORFAvTkNLbXJxbGd1eWJEQW9HQkFQMGMKZ3FpVWVMK201aGFFZVgrc3l1RVFYQzZrdkpSSi9mSVRsY1BwNisvcVZ1VGR2amRuL0t0WTBvT1haYWpCTEdaRAo5ZXZhUmhVczlPeERza1d2dFR3SjhYdjYyQ3hyQmdmZWp4L1pENmxlM1d6MDRRS3NQTkFMSWlzd0VhRmVBMDM3CjF2dVZianMzTnlvLzZZWFQyV01xY3QweUpkS0pLdnJ4SHhkOHU2TmRBb0dBQ3VsaVFValZRUEhObEZvdll1anUKNHRyVnQxVkJsaE1zQnJHdGdqbGY1cnhjZmZCR0x1NjIyNksrWWdyR0ZReTU5bXoybmxCR3QrUUN5bXJyenpEcApQZ21LOHRsSm5yR0JDWkx3ai9VeERkUmlmL3JsbTJaUzNIWlFUKzdzNmtZbzNaaUdFMlRFSmhVb3VEWSt0aXBkCmtIWXdRbTIwTVJRMXVjcGkzbWpxaUJrQ2dZRUF6R1FMZG9wK2YzVU05RDRCeHdJSHlucmxsWnpkMDNsMG9ka0MKNVhPdVhNeUZZc2RWWlhTSmF1eU5Ba3B0Z3pxSzJnSWpRbE8rcURibmlTcVplUUNNZjNFZ0doZlVIUHBIb204cwpjSEZkM2syR3pRZHA5RGlWMndKQ2sxRjd5eTBaeWcyRjZ4OGVKcDlONHNZOWt4NGh1NXg1cVBsbjVYMXl3YldZCmYrVHZ1TmtDZ1lFQTFaaDlzS0pJZms0Yk1xKzZ4OXYvM1VzYUVjWGZqZzVvcDZHTlNtY1lNZFpoMlpWelEwQ3YKR0ZhTmtYVWxQcmt0Y0hqWEZEOUkvY0tzemwrT2tBb1ZORkdQSGxaTUxmZStnck5ySGdiZENrT0YvY3kyUDllcgpReEFCK2NESEY5emQ3U0diU0gwTFhCUEVONGg4b2cwa3lqUTZzUGFEQnBpbHM3U2JkenBWbDJFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        tls:
          insecure: true
    extensions:
      health_check: null
    processors:
      batch: null
      k8sattributes:
        auth_type: serviceAccount
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: kube_app_name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: kube_app_instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: kube_app_version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: kube_app_component
          - from: pod
            key: app.kubernetes.io/part-of
            tag_name: kube_app_part_of
          - from: pod
            key: app.kubernetes.io/managed-by
            tag_name: kube_app_managed_by
          metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
          - container.id
          - k8s.container.name
          - container.image.name
          - container.image.tag
          - container.id
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
      resource:
        attributes:
        - action: insert
          from_attribute: host.name
          key: k8s.pod.name
        - action: insert
          from_attribute: linkerd.io/workload-ns
          key: k8s.namespace.name
    receivers:
      opencensus: null
    service:
      extensions:
      - health_check
      pipelines:
        traces:
          exporters:
          - jaeger
          processors:
          - resource
          - k8sattributes
          - batch
          receivers:
          - opencensus
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: collector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: collector
  namespace: linkerd-jaeger-2024.6.2.tgz
roleRef:
  kind: ClusterRole
  name: collector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: linkerd-jaeger-2024.6.2.tgz
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Jaeger Service
###
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: linkerd-jaeger-2024.6.2.tgz
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.6.2
    component: jaeger-injector
  name: jaeger-injector
  namespace: linkerd-jaeger-2024.6.2.tgz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: 335d039008f49b5ed9db226ccfe62c341183012f0798dc3c2d4bd67cf3b7cb37
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -collector-svc-addr=collector.linkerd-jaeger:55678
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:edge-24.6.2
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: linkerd-jaeger-2024.6.2.tgz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        checksum/config: 319d95c61f89ff68538c097cca12358ac58383e2c1d93fe3d92e35c501b0541a
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        config.linkerd.io/proxy-await: "enabled"
        linkerd.io/inject: enabled
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - command:
        - /otelcol-contrib
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector-contrib:0.83.0
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
  namespace: linkerd-jaeger-2024.6.2.tgz
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - --query.base-path=/jaeger
        image: jaegertracing/all-in-one:1.31
        name: jaeger
        ports:
        - containerPort: 14269
          name: admin
        - containerPort: 14268
          name: collection
        - containerPort: 14250
          name: grpc
        - containerPort: 16686
          name: ui
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
      dnsPolicy: ClusterFirst
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp-http
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-opencensus
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-zipkin
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-thrift
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-grpc
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-grpc
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: collector
      namespace: linkerd-jaeger-2024.6.2.tgz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-admin
  requiredAuthenticationRefs:
    # if not using linkerd-viz' prometheus, replace its SA here
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-ui
  requiredAuthenticationRefs:
    # for the optional dashboard integration
    - kind: ServiceAccount
      name: web
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: kubernetes.io/metadata.name
      operator: NotIn
      values:
      - kube-system
  clientConfig:
    service:
      name: jaeger-injector
      namespace: linkerd-jaeger-2024.6.2.tgz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlakNDQW1LZ0F3SUJBZ0lSQUp1UVhtZVZTMHpHejlWMmtBU01sK2N3RFFZSktvWklodmNOQVFFTEJRQXcKT2pFNE1EWUdBMVVFQXhNdmFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMVEl3TWpRdQpOaTR5TG5SbmVpNXpkbU13SGhjTk1qUXdOakl3TVRRMU56UTBXaGNOTWpVd05qSXdNVFExTnpRMFdqQTZNVGd3Ck5nWURWUVFERXk5cVlXVm5aWEl0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzFxWVdWblpYSXRNakF5TkM0MkxqSXUKZEdkNkxuTjJZekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPOHcxK05PN2dFdQpHOUVzV2hMNnJLWk5QemtyZ0hoRVpSVERsRG5mYWlQTVNGWFRDczFFMkdyUVpHZUxHbjZWSmR2WERjMERTMHVZCnBLVWdtdG5WL1NuZjFBRjFGODB3em51RzFFZnVQSm94QzlsTnFSdXFRR0RrYkRkcnlTOVpIRFRmalgyQVArNzIKblRnQzlkYVNLY1daaVA0M29vTndncnJjUlhOQnlKY1FlMHVLQTZxOHdheHFhUk5NcHJNRWlVcmhuRE1YUzRoOQovMzBaeHpFaUhodTZ6YTRRTkhTdHBGZ25mUERnbjVDeE5aYlIvUGZBNmgvZFloZ2JyWkpiSDhQR0EzVnRsM3ZiCnlERGRucWhISUg5U1dyQVhrZWJVVmhrWGMvT1NZcEQ1d1N6OE9aZkxIZ1lLcTBrWExwc2RrMG1pbGJqaHM3TlMKbm15MElCSWNQZGNDQXdFQUFhTjdNSGt3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzRwpBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTURvR0ExVWRFUVF6TURHQ0wycGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2kweU1ESTBMall1TWk1MFozb3VjM1pqTUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQytTdTY3MGg1Y3YxRGtYcmV1YzlRd1BhUTAwaFBzL24xRURwYVQvaUo5eDRkUgpsbUt0bUdMTFJvdXNmNmUyaDJzOXlrVGVEUTRxZGo5Nlo2SUl3TWFWNUN1ak5aSFh4bmFmUTR6UEJPblhXRDFiCmt1T1EzRHdHb3lhM3hXNmQ3VGo5NWJTeHRyYmV0QVVONlRkRnJsVG0xRE9TMWl6VGFkNmlpRGZTTVJaSnBTV1gKSkl5cDBLTjN5Vk0xc2tzTkJDSWNJVTJKR1BSYnJrMTdMQjcxR2lCaVRlZW45WlFha2wwaVdSaVBXdnp2WWwxNQpDNUZ5eEpOcmpxeWdIdG1kaUVnL3lRMndYRnBzaFZaV3pnR3pnUGpTaUxNSjE0MnVERUJTSEU3VWYrZjByRFdrCm1DOVVrMnZBdXVDbmxDcEhmUHZZalJSVW9VQTN4N1J1Y1NjNW5Uc1AKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    scope: "Namespaced"
  sideEffects: None
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  # Ideally, this should be restricted to the actual set of IPs the kube-api
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4318
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta2
kind: Server
metadata:
  namespace: linkerd-jaeger-2024.6.2.tgz
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["linkerd-jaeger-2024.6.2.tgz"]
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: jaeger-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm edge-24.6.2
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: edge-24.6.2
  name: namespace-metadata
  namespace: linkerd-jaeger-2024.6.2.tgz
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm edge-24.6.2
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: jaeger
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: edge-24.6.2
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          runAsGroup: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --extension
        - jaeger
        - --namespace
        - linkerd-jaeger-2024.6.2.tgz
        - --linkerd-namespace
        - linkerd
