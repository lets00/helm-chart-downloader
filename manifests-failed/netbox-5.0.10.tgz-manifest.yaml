---
# Source: netbox/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-redis
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: netbox/templates/NetworkPolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-release-netbox
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
    app.kubernetes.io/component: server
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: netbox
      app.kubernetes.io/component: server
  policyTypes:
    - Ingress
    - Egress
  egress:
    - ports:
      # Allow dns resolution
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
        - port: 80
          protocol: TCP
        - port: 443
          protocol: TCP
    # Allow to Redis and PostgreSQL
    - ports:
        - port: 6379
          protocol: TCP
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
    - ports:
        - port: 5432
          protocol: TCP
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgresql
    # Allow outbound connections to other cluster pods
    - ports:
        - port: 80
        - port: 8080
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: my-release
              app.kubernetes.io/name: netbox
  ingress:
    - ports:
        - port: 8080
        - port: 80
---
# Source: netbox/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-redis-master
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: netbox/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.6
automountServiceAccountToken: false
---
# Source: netbox/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-master
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
---
# Source: netbox/templates/ServiceAccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-netbox
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
---
# Source: netbox/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.6
type: Opaque
data:
  postgres-password: "WHROcWUyY2Vzaw=="
  password: "bUtVTXVkSnZhTg=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: netbox/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
type: Opaque
data:
  redis-password: "WUs0ZUV3dnNBRg=="
---
# Source: netbox/templates/Secret/netbox.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-netbox
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
type: Opaque
data:
  email_password: ""
  # email_password: 
  
  # secret_key: UCdOPT5TOzhjejpaUlNLQTt5dlpFbWhHQn0oeTc4SU8tNTJ0Vz51eXYvUyMsfT92WWVxe19tPV1DSyhC
  secret_key: "NTR2alVWZlBXRXltc2RjSU8yMzdFcXFBU0VZNWpIb1lQdHRPNGhtTlVCVVltZTBya1NuZklLeU42SWNkNUUxQQ=="
  # superuser_password: NzUzdVpsYWIwSG01aDg5NQ==
  # superuser_api_token: YTA2MzZiMGUtYjdiNi00YTE2LTgxZjAtOTE3ZThhZTE1M2Ew
  superuser_password: "RGlDNHNhcm14WUVuMlVhYg=="
  superuser_api_token: "TXphd1E2Nm4zY0x0YUR2OFR3WGtlNjZNanpGTXpFeG8="
---
# Source: netbox/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: netbox/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: netbox/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: netbox/templates/ConfigMap/netbox.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-netbox
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
data:
  configuration.py: |-
    import re
    from pathlib import Path

    import yaml


    def _deep_merge(source, destination):
        """Inspired by https://stackoverflow.com/a/20666342"""
        for key, value in source.items():
            dst_value = destination.get(key)

            if isinstance(value, dict) and isinstance(dst_value, dict):
                _deep_merge(value, dst_value)
            else:
                destination[key] = value

        return destination


    def _load_yaml():
        extraConfigBase = Path("/run/config/extra")
        configFiles = [Path("/run/config/netbox/netbox.yaml")]

        configFiles.extend(sorted(extraConfigBase.glob("*/*.yaml")))

        for configFile in configFiles:
            with open(configFile, "r") as f:
                config = yaml.safe_load(f)

            _deep_merge(config, globals())


    def _load_secret(name, key):
        path = "/run/secrets/{name}/{key}".format(name=name, key=key)
        with open(path, "r") as f:
            return f.read()


    CORS_ORIGIN_REGEX_WHITELIST = list()
    DATABASE = dict()
    EMAIL = dict()
    REDIS = dict()

    _load_yaml()

    DATABASE["PASSWORD"] = _load_secret("netbox", "db_password")
    EMAIL["PASSWORD"] = _load_secret("netbox", "email_password")
    REDIS["tasks"]["PASSWORD"] = _load_secret("netbox", "redis_tasks_password")
    REDIS["caching"]["PASSWORD"] = _load_secret("netbox", "redis_cache_password")
    SECRET_KEY = _load_secret("netbox", "secret_key")

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r in CORS_ORIGIN_REGEX_WHITELIST]

  netbox.yaml: |-
    ALLOWED_HOSTS: ["*"]

    DATABASE:
      HOST: "my-release-postgresql"
      USER: "netbox"
      NAME: "netbox"
      PORT: 5432
      OPTIONS:
        sslmode: "prefer"
        target_session_attrs: "read-write"
      CONN_MAX_AGE: 300
      DISABLE_SERVER_SIDE_CURSORS: false

    ADMINS: []
    ALLOW_TOKEN_RETRIEVAL: false
    AUTH_PASSWORD_VALIDATORS: []
    ALLOWED_URL_SCHEMES: ["file","ftp","ftps","http","https","irc","mailto","sftp","ssh","tel","telnet","tftp","vnc","xmpp"]
    BANNER_TOP: ""
    BANNER_BOTTOM: ""
    BANNER_LOGIN: ""
    BASE_PATH: ""
    CENSUS_REPORTING_ENABLED: true
    CHANGELOG_RETENTION: 90
    CUSTOM_VALIDATORS: {}
    DEFAULT_USER_PREFERENCES: {}
    CORS_ORIGIN_ALLOW_ALL: false
    CORS_ORIGIN_WHITELIST: []
    CORS_ORIGIN_REGEX_WHITELIST: []
    CSRF_TRUSTED_ORIGINS: []
    DEBUG: false
    DEFAULT_LANGUAGE: "en-us"

    EMAIL:
      SERVER: "localhost"
      PORT: 25
      USERNAME: ""
      USE_SSL: false
      USE_TLS: false
      SSL_CERTFILE: ""
      SSL_KEYFILE: ""
      TIMEOUT: 10
      FROM_EMAIL: ""

    ENFORCE_GLOBAL_UNIQUE: false
    EXEMPT_VIEW_PERMISSIONS: []
    FIELD_CHOICES: {}
    GRAPHQL_ENABLED: true
    HTTP_PROXIES: null
    INTERNAL_IPS: ["127.0.0.1","::1"]
    JOB_RETENTION: 90
    LOGGING: {}
    LOGIN_PERSISTENCE: false
    LOGIN_REQUIRED: false
    LOGIN_TIMEOUT: 1209600
    LOGOUT_REDIRECT_URL: "home"
    MAINTENANCE_MODE: false
    MAPS_URL: "https://maps.google.com/?q="
    MAX_PAGE_SIZE: 1000
    MEDIA_ROOT: /opt/netbox/netbox/media
    METRICS_ENABLED: false
    PAGINATE_COUNT: 50
    PLUGINS: []
    PLUGINS_CONFIG: {}
    POWERFEED_DEFAULT_AMPERAGE: 15
    POWERFEED_DEFAULT_MAX_UTILIZATION: 80
    POWERFEED_DEFAULT_VOLTAGE: 120
    PREFER_IPV4: false
    RACK_ELEVATION_DEFAULT_UNIT_HEIGHT: 22
    RACK_ELEVATION_DEFAULT_UNIT_WIDTH: 220
    REMOTE_AUTH_ENABLED: false
    REMOTE_AUTH_BACKEND: ["netbox.authentication.RemoteUserBackend"]
    REMOTE_AUTH_HEADER: "HTTP_REMOTE_USER"
    REMOTE_AUTH_USER_FIRST_NAME: "HTTP_REMOTE_USER_FIRST_NAME"
    REMOTE_AUTH_USER_LAST_NAME: "HTTP_REMOTE_USER_LAST_NAME"
    REMOTE_AUTH_USER_EMAIL: "HTTP_REMOTE_USER_EMAIL"
    REMOTE_AUTH_AUTO_CREATE_USER: false
    REMOTE_AUTH_AUTO_CREATE_GROUPS: false
    REMOTE_AUTH_DEFAULT_GROUPS: []
    REMOTE_AUTH_DEFAULT_PERMISSIONS: {}
    REMOTE_AUTH_GROUP_SYNC_ENABLED: false
    REMOTE_AUTH_GROUP_HEADER: "HTTP_REMOTE_USER_GROUP"
    REMOTE_AUTH_SUPERUSER_GROUPS: []
    REMOTE_AUTH_SUPERUSERS: []
    REMOTE_AUTH_STAFF_GROUPS: []
    REMOTE_AUTH_STAFF_USERS: []
    REMOTE_AUTH_GROUP_SEPARATOR: "|"
    RELEASE_CHECK_URL: "https://api.github.com/repos/netbox-community/netbox/releases"

    REDIS:
      tasks:
        HOST: "my-release-redis-master"
        PORT: 6379
        USERNAME: ""
        DATABASE: 0
        SSL: false
        INSECURE_SKIP_TLS_VERIFY: false
        CA_CERT_PATH: ""
      caching:
        HOST: "my-release-redis-master"
        PORT: 6379
        USERNAME: ""
        DATABASE: 1
        SSL: false
        INSECURE_SKIP_TLS_VERIFY: false
        CA_CERT_PATH: ""

    REPORTS_ROOT: /opt/netbox/netbox/reports
    RQ_DEFAULT_TIMEOUT: 300
    SCRIPTS_ROOT: /opt/netbox/netbox/scripts
    CSRF_COOKIE_NAME: "csrftoken"
    SESSION_COOKIE_NAME: sessionid
    ENABLE_LOCALIZATION: false
    TIME_ZONE: "UTC"
    DATE_FORMAT: "N j, Y"
    TIME_FORMAT: "g:i a"
    DATETIME_FORMAT: "N j, Y g:i a"
    SHORT_DATE_FORMAT: "Y-m-d"
    SHORT_TIME_FORMAT: "H:i:s"
    SHORT_DATETIME_FORMAT: "Y-m-d H:i"
    SKIP_SUPERUSER: false
---
# Source: netbox/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.6
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: netbox/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.6
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: netbox/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: netbox/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: netbox/templates/Service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-netbox
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: netbox
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: netbox
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: netbox
---
# Source: netbox/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-redis-master
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.2
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/part-of: netbox
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.5.2
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 4387eb504d7c4447cb1f0a5215da2280bee2fa108a0a2c6163f5e34e7ea711be
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: empty-dir
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: netbox/templates/Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-netbox
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: netbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: netbox
      app.kubernetes.io/component: server
      app.kubernetes.io/part-of: netbox
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: a5bf39f0048ed53695c0ad2999c7bd1fa32228cb4a1ca15cf950782221560b27
        checksum/secret: 5ede7c97a5e4e2c5d9eaeaa5cf614cef2d41d3da1e4aeecfacb27f9b6792f407
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: netbox
        app.kubernetes.io/version: v3.7.8
        helm.sh/chart: netbox-5.0.10
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: netbox
    spec:
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: netbox
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: false
      enableServiceLinks: true
      
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-netbox
      containers:
        - name: netbox
          image: docker.io/netboxcommunity/netbox:v3.7.8-2.8.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: SUPERUSER_NAME
              value: "admin"
            - name: SUPERUSER_EMAIL
              value: "admin@example.com"
            - name: SKIP_STARTUP_SCRIPTS
              value: "true"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 2000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 128Mi
          readinessProbe:
            httpGet:
              path: /login/
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 1
            successThreshold: 1
            periodSeconds: 10
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: "/opt/netbox/netbox/media"
            - name: reports
              mountPath: /opt/netbox/netbox/reports
            - name: scripts
              mountPath: /opt/netbox/netbox/scripts
            - name: optunit
              mountPath: /opt/unit
            - name: secrets
              mountPath: /run/secrets/superuser_password
              subPath: superuser_password
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/superuser_api_token
              subPath: superuser_api_token
              readOnly: true
            
      initContainers:
        - name: init-dirs
          image: docker.io/busybox:1.36.1
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - '-c'
            - mkdir -p /opt/unit/state /opt/unit/tmp
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: optunit
              mountPath: /opt/unit
        - name: wait-for-redis
          image: "docker.io/bitnami/redis:7.2.5-debian-12-r0"
          imagePullPolicy: 
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                #!/bin/bash
        
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h my-release-redis-master -p 6379  PING)"
                    if [[ "$result" != "PONG" ]]; then
                      false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the task Redis server"
                    return 1
                else
                    info "Connected to the task Redis instance"
                fi
          env:
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
      volumes:
        - name: config
          configMap:
            name: my-release-netbox
        - name: secrets
          projected:
            sources:
            - secret:
                name: "my-release-netbox"
                items:
                  - key: email_password
                    path: email_password
                  - key: secret_key
                    path: secret_key
            - secret:
                name: "my-release-netbox"
                items:
                  # Used by netbox-docker entry scripts
                  - key: "superuser_password"
                    path: superuser_password
                  - key: "superuser_api_token"
                    path: superuser_api_token
            - secret:
                name: "my-release-postgresql"
                items:
                  - key: "password"
                    path: db_password
            - secret:
                name: "my-release-redis"
                items:
                  - key: "redis-password"
                    path: redis_cache_password
                  - key: "redis-password"
                    path: redis_tasks_password
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: optunit
          emptyDir:
            medium: Memory
        - name: media
          emptyDir: {}
        - name: reports
          emptyDir: {}
        - name: scripts
          emptyDir: {}
---
# Source: netbox/templates/worker/Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-netbox-worker
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: netbox
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: netbox
      app.kubernetes.io/component: worker
      app.kubernetes.io/part-of: netbox
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: a5bf39f0048ed53695c0ad2999c7bd1fa32228cb4a1ca15cf950782221560b27
        checksum/secret: febe74ea6b0c24ff82a404ae6a01ac307af43be326922024eec727b460335eb1
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: netbox
        app.kubernetes.io/version: v3.7.8
        helm.sh/chart: netbox-5.0.10
        app.kubernetes.io/component: worker
        app.kubernetes.io/part-of: netbox
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: netbox
                    app.kubernetes.io/component: worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-netbox
      terminationGracePeriodSeconds: 
      containers:
        
        - name: worker
          image: docker.io/netboxcommunity/netbox:v3.7.8-2.8.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /opt/netbox/venv/bin/python
            - /opt/netbox/netbox/manage.py
            - rqworker
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: "/opt/netbox/netbox/media"
            - name: reports
              mountPath: /opt/netbox/netbox/reports
            - name: scripts
              mountPath: /opt/netbox/netbox/scripts
            
            
      initContainers:
        - name: wait-for-redis
          image: "docker.io/bitnami/redis:7.2.5-debian-12-r0"
          imagePullPolicy: 
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
                #!/bin/bash
        
                set -o errexit
                set -o nounset
                set -o pipefail
        
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
        
                check_redis_connection() {
                    local result="$(redis-cli -h my-release-redis-master -p 6379  PING)"
                    if [[ "$result" != "PONG" ]]; then
                      false
                    fi
                }
        
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the task Redis server"
                    return 1
                else
                    info "Connected to the task Redis instance"
                fi
          env:
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
        
      volumes:
        - name: config
          configMap:
            name: my-release-netbox
        - name: secrets
          projected:
            sources:
              - secret:
                  name: "my-release-netbox"
                  items:
                    # Used by our configuration
                    - key: email_password
                      path: email_password
                    - key: secret_key
                      path: secret_key
              - secret:
                  name: "my-release-postgresql"
                  items:
                    - key: "password"
                      path: db_password
              - secret:
                  name: "my-release-redis"
                  items:
                    - key: "redis-password"
                      path: redis_cache_password
                    - key: "redis-password"
                      path: redis_tasks_password
        - name: netbox-tmp
          emptyDir:
            medium: Memory
        - name: media
          emptyDir: {}
        - name: reports
          emptyDir: {}
        - name: scripts
          emptyDir: {}
---
# Source: netbox/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: netbox
    app.kubernetes.io/version: 16.1.0
    helm.sh/chart: postgresql-13.4.6
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/part-of: netbox
        app.kubernetes.io/version: 16.1.0
        helm.sh/chart: postgresql-13.4.6
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.1.0-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "netbox"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "netbox"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "netbox" -d "dbname=netbox" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "netbox" -d "dbname=netbox" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: netbox/templates/CronJob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-netbox-housekeeping
  namespace: "netbox-5.0.10.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: netbox
    app.kubernetes.io/version: v3.7.8
    helm.sh/chart: netbox-5.0.10
    app.kubernetes.io/component: housekeeping
    app.kubernetes.io/part-of: netbox
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  schedule: "0 0 * * *"
  successfulJobsHistoryLimit: 3
  suspend: false
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: my-release
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: netbox
            app.kubernetes.io/version: v3.7.8
            helm.sh/chart: netbox-5.0.10
            app.kubernetes.io/component: housekeeping
            app.kubernetes.io/part-of: netbox
        spec:
          automountServiceAccountToken: false
          affinity:
            podAffinity:
              
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/instance: my-release
                        app.kubernetes.io/name: netbox
                        app.kubernetes.io/component: housekeeping
                    topologyKey: kubernetes.io/hostname
                  weight: 1
            nodeAffinity:
              
          
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 1000
            runAsNonRoot: true
          serviceAccountName: my-release-netbox
          containers:
          - name: housekeeping
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000
              seLinuxOptions: null
              seccompProfile:
                type: RuntimeDefault
            image: docker.io/netboxcommunity/netbox:v3.7.8-2.8.0
            command:
              - /opt/netbox/venv/bin/python
              - /opt/netbox/netbox/manage.py
              - housekeeping
            env:
              - name: HOUSEKEEPING_INTERVAL
                value: "20"
            volumeMounts:
            - name: config
              mountPath: /etc/netbox/config/configuration.py
              subPath: configuration.py
              readOnly: true
            - name: config
              mountPath: /run/config/netbox
              readOnly: true
            - name: secrets
              mountPath: /run/secrets/netbox
              readOnly: true
            - name: netbox-tmp
              mountPath: /tmp
            - name: media
              mountPath: "/opt/netbox/netbox/media"
              subPath: ""
            
          volumes:
          - name: config
            configMap:
              name: my-release-netbox
          - name: secrets
            projected:
              sources:
              - secret:
                  name: "my-release-netbox"
                  items:
                    # Used by our configuration
                    - key: "email_password"
                      path: email_password
                    - key: secret_key
                      path: secret_key
              - secret:
                  name: "my-release-postgresql"
                  items:
                    - key: "password"
                      path: db_password
              - secret:
                  name: "my-release-redis"
                  items:
                    - key: "redis-password"
                      path: redis_cache_password
                    - key: "redis-password"
                      path: redis_tasks_password
          - name: netbox-tmp
            emptyDir:
              medium: Memory
          - name: media
            emptyDir: {}
          - name: reports
            emptyDir: {}
          - name: scripts
            emptyDir: {}
