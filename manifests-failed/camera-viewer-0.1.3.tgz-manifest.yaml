---
# Source: camera-viewer/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "camera-viewer-0.1.3.tgz"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: true
---
# Source: camera-viewer/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "camera-viewer-0.1.3.tgz"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        mongosh $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep 'true'
    else
        mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep 'true'
    fi
  ping-mongodb.sh: |
    #!/bin/bash
    mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: camera-viewer/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "camera-viewer-0.1.3.tgz"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
---
# Source: camera-viewer/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "camera-viewer-0.1.3.tgz"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: camera-viewer/templates/back-end.yml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cam-back
spec:
  type: ClusterIP
  selector:
    app: my-release-cam-back
  ports:
    - port: 80
---
# Source: camera-viewer/templates/front.yml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cam-front
spec:
  type: ClusterIP
  selector:
    app: my-release-cam-front
  ports:
    - port: 80
---
# Source: camera-viewer/templates/proxy.yml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cam-proxy
spec:
  type: NodePort
  selector:
    app: my-release-cam-proxy
  ports:
    - port: 80
      nodePort: 30880
---
# Source: camera-viewer/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "camera-viewer-0.1.3.tgz"
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-13.8.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-13.8.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:6.0.4-debian-11-r10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: camera-viewer/templates/back-end.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cam-back
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-cam-back
  template:
    metadata:
      labels:
        app: my-release-cam-back
    spec:
      containers:
        - name: my-release-cam-back
          image: moreillon/camera-proxy
          env:
            - name: MONGODB_URL
              value: mongodb://my-release-mongodb
          ports:
            - containerPort: 80
---
# Source: camera-viewer/templates/front.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cam-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-cam-front
  template:
    metadata:
      labels:
        app: my-release-cam-front
    spec:
      containers:
        - name: my-release-cam-front
          image: moreillon/camera-viewer
          env:
            - name: VUE_APP_API_URL
              value: /proxy/api
            # TODO: optional auth
          ports:
            - containerPort: 80
---
# Source: camera-viewer/templates/proxy.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cam-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-cam-proxy
  template:
    metadata:
      labels:
        app: my-release-cam-proxy
    spec:
      containers:
        - name: my-release-cam-proxy
          image: moreillon/api-proxy:e80c1d87
          env:
            - name: PROXY_API
              value: http://my-release-cam-back
            - name: PROXY_ROOT
              value: http://my-release-cam-front
            - name: PROXY_AUTH
              value: http://my-release-auth
          ports:
            - containerPort: 80
