---
# Source: prefect-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prefect-server
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/name: prefect-server
    helm.sh/chart: prefect-server-2024.6.13185354
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.19.5"
    app.kubernetes.io/component: server
    prefect-version: 2.19.5
---
# Source: prefect-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  password: "cHJlZmVjdC1yb2Nrcw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: prefect-server/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "prefect-server-postgresql-connection"
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/name: prefect-server
    helm.sh/chart: prefect-server-2024.6.13185354
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.19.5"
    app.kubernetes.io/component: server
    prefect-version: 2.19.5
type: Opaque
data:
  connection-string: "cG9zdGdyZXNxbCthc3luY3BnOi8vcHJlZmVjdDpwcmVmZWN0LXJvY2tzQG15LXJlbGVhc2UtcG9zdGdyZXNxbC5wcmVmZWN0LXNlcnZlci0yMDI0LjYuMTMxODUzNTQudGd6OjU0MzIvc2VydmVy"
---
# Source: prefect-server/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: prefect-server/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: prefect-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prefect-server
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/name: prefect-server
    helm.sh/chart: prefect-server-2024.6.13185354
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.19.5"
    app.kubernetes.io/component: server
    prefect-version: 2.19.5
spec:
  type: ClusterIP
  ports:
    - name: server-svc-port
      port: 4200
      protocol: TCP
      targetPort: 4200
      nodePort: null
  selector:
    app.kubernetes.io/name: prefect-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: server
---
# Source: prefect-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/name: prefect-server
    helm.sh/chart: prefect-server-2024.6.13185354
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "2.19.5"
    app.kubernetes.io/component: server
    prefect-version: 2.19.5
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prefect-server
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prefect-server
        helm.sh/chart: prefect-server-2024.6.13185354
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: "2.19.5"
        app.kubernetes.io/component: server
        prefect-version: 2.19.5
    spec:
      serviceAccountName: prefect-server
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      containers:
        - name: prefect-server
          image: "prefecthq/prefect:2.19.5-python3.10"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/tini
            - -g
            - --
            - /opt/prefect/entrypoint.sh
          args:
            - prefect
            - server
            - start
            - --port
            - "4200"
          workingDir: /home/prefect
          ports:
            - containerPort: 4200
          env:
            - name: HOME
              value: /home/prefect
            - name: PREFECT_API_URL
              value: "http://localhost:4200/api"
            - name: PREFECT_DEBUG_MODE
              value: "false"
            - name: PREFECT_LOGGING_SERVER_LEVEL
              value: "WARNING"
            - name: PREFECT_SERVER_API_HOST
              value: "0.0.0.0"
            - name: PREFECT_SERVER_API_PORT
              value: "4200"
            - name: PREFECT_UI_ENABLED
              value: "true"
            - name: PREFECT_UI_STATIC_DIRECTORY
              value: "/ui_build"
            - name: PREFECT_API_DATABASE_CONNECTION_URL
              valueFrom:
                secretKeyRef:
                  name: prefect-server-postgresql-connection
                  key: connection-string
          envFrom:
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - mountPath: /home/prefect
              name: scratch
              subPathExpr: home
            - mountPath: /tmp
              name: scratch
              subPathExpr: tmp
            - mountPath: /ui_build
              name: scratch
              subPathExpr: ui-build
      volumes:
        - name: scratch
          emptyDir: {}
---
# Source: prefect-server/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "prefect-server-2024.6.13185354.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.3.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "prefect"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DATABASE
              value: "server"
            # Replication
            # Initdb
            - name: POSTGRES_INITSCRIPTS_USERNAME
              value: postgres
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "prefect" -d "dbname=server" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "prefect" -d "dbname=server" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
