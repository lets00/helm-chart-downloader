---
# Source: lemmy/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "lemmy-0.5.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
type: Opaque
data:
  postgres-password: "Y2tmMWZuVHFKTw=="
  password: "WTNHb2M1ZHhTNA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: lemmy/templates/secret-configuration.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-lemmy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
data:
  admin_password: Tm1RckhpT2owVHZKMmhtVjZrZWdGbFI5VHRBMDBjYmU=
  pictrs_apikey: azVkNVhIQ3lkdllPQlN4TG0xaFRCQUlJUndkczRkdHBjZDdKc2p6QnFOTWdSRERZNlBTcjdxbVFQQ2ViN0lEMQ==
  config.hjson: ewogICJiaW5kIjogIjAuMC4wLjAiLAogICJkYXRhYmFzZSI6IHsKICAgICJwb29sX3NpemUiOiAxMCwKICAgICJ1cmkiOiAicG9zdGdyZXNxbDovL2xlbW15OlxucG9zdGdyZXNAbXktcmVsZWFzZS1wb3N0Z3Jlc3FsOjU0MzIvbGVtbXk/c3NsbW9kZT1wcmVmZXIiCiAgfSwKICAiZW1haWwiOiB7CiAgICAic210cF9mcm9tX2FkZHJlc3MiOiAibGVtbXlAZXhhbXBsZS5jb20iLAogICAgInNtdHBfbG9naW4iOiBudWxsLAogICAgInNtdHBfcGFzc3dvcmQiOiBudWxsLAogICAgInNtdHBfc2VydmVyIjogInNtdHAuZXhhbXBsZS5jb206MjUiLAogICAgInRsc190eXBlIjogIm5vbmUiCiAgfSwKICAiaG9zdG5hbWUiOiAibG9jYWxob3N0IiwKICAicGljdHJzIjogewogICAgImFwaV9rZXkiOiAiazVkNVhIQ3lkdllPQlN4TG0xaFRCQUlJUndkczRkdHBjZDdKc2p6QnFOTWdSRERZNlBTcjdxbVFQQ2ViN0lEMSIsCiAgICAiY2FjaGVfZXh0ZXJuYWxfbGlua19wcmV2aWV3cyI6IHRydWUsCiAgICAidXJsIjogImh0dHA6Ly9teS1yZWxlYXNlLWxlbW15LXBpY3Ryczo4MCIKICB9LAogICJwb3J0IjogODUzNiwKICAic2V0dXAiOiB7CiAgICAiYWRtaW5fZW1haWwiOiAibGVtbXlAZXhhbXBsZS5jb20iLAogICAgImFkbWluX3Bhc3N3b3JkIjogIk5tUXJIaU9qMFR2SjJobVY2a2VnRmxSOVR0QTAwY2JlIiwKICAgICJhZG1pbl91c2VybmFtZSI6ICJsZW1teSIsCiAgICAic2l0ZV9uYW1lIjogIkxlbW15IG9uIEt1YmVybmV0ZXMiCiAgfSwKICAidGxzX2VuYWJsZWQiOiB0cnVlCn0=
---
# Source: lemmy/templates/secret-pictrs.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-lemmy-pictrs
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pictrs
data:
  PICTRS__REPO__PATH: L21udC9kYXRhYmFzZQ==
  PICTRS__STORE__TYPE: ZmlsZXN5c3RlbQ==
  PICTRS__STORE__PATH: L21udC9tZWRpYQ==
---
# Source: lemmy/templates/configmap-proxy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-lemmy-proxy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
data:
  nginx.conf: |
    worker_processes auto;

    events {
        worker_connections 1024;
    }

    http {
        # We construct a string consistent of the "request method" and "http accept header"
        # and then apply soem ~simply regexp matches to that combination to decide on the
        # HTTP upstream we should proxy the request to.
        #
        # Example strings:
        #
        #   "GET:application/activity+json"
        #   "GET:text/html"
        #   "POST:application/activity+json"
        #
        # You can see some basic match tests in this regex101 matching this configuration
        # https://regex101.com/r/vwMJNc/1
        #
        # Learn more about nginx maps here http://nginx.org/en/docs/http/ngx_http_map_module.html
        map "$request_method:$http_accept" $proxpass {
            # If no explicit matches exists below, send traffic to lemmy-ui
            default "http://lemmy-ui";

            # GET/HEAD requests that accepts ActivityPub or Linked Data JSON should go to lemmy.
            #
            # These requests are used by Mastodon and other fediverse instances to look up profile information,
            # discover site information and so on.
            "~^(?:GET|HEAD):.*?application\/(?:activity|ld)\+json" "http://lemmy";

            # All non-GET/HEAD requests should go to lemmy
            #
            # Rather than calling out POST, PUT, DELETE, PATCH, CONNECT and all the verbs manually
            # we simply negate the GET|HEAD pattern from above and accept all possibly $http_accept values
            "~^(?!(GET|HEAD)).*:" "http://lemmy";
        }

        upstream lemmy {
            # this needs to map to the lemmy (server) docker service hostname
            server "my-release-lemmy:80";
        }
        upstream lemmy-ui {
            # this needs to map to the lemmy-ui docker service hostname
            server "my-release-lemmy-ui:80";
        }

        server {
            # this is the port inside docker, not the public one yet
            listen 1236;
            listen 8536;

            server_name localhost;
            server_tokens off;

            gzip on;
            gzip_types text/css application/javascript image/svg+xml;
            gzip_vary on;

            # Upload limit, relevant for pictrs
            client_max_body_size 20M;

            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";

            # Send actual client IP upstream
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # frontend general requests
            location / {
                proxy_pass $proxpass;
                rewrite ^(.+)/+$ $1 permanent;
            }

            # security.txt
            location = /.well-known/security.txt {
                proxy_pass "http://lemmy-ui";
            }

            # backend
            location ~ ^/(api|pictrs|feeds|nodeinfo|.well-known) {
                proxy_pass "http://lemmy";

                # proxy common stuff
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }
    }
---
# Source: lemmy/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-lemmy-pictrs
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pictrs
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "16Gi"
---
# Source: lemmy/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "lemmy-0.5.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: lemmy/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "lemmy-0.5.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: lemmy/templates/service-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-lemmy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: backend
---
# Source: lemmy/templates/service-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-lemmy-ui
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: frontend
  sessionAffinity: ClientIP
---
# Source: lemmy/templates/service-pictrs.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-lemmy-pictrs
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pictrs
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: pictrs
---
# Source: lemmy/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-lemmy-proxy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: proxy
---
# Source: lemmy/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-lemmy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: lemmy
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: backend
  template:
    metadata:
      annotations:
        checksum/config: 4b0fbe6425497956585a4d9e63c9ea5dc43e852f8ad58ff329e725e7a757e21c
      labels:
        app.kubernetes.io/name: lemmy
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: backend
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: lemmy
          args:
          securityContext:
            {}
          image: "dessalines/lemmy:0.19.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: my-release-postgresql
          ports:
            - name: http
              containerPort: 8536
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          startupProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /config/config.hjson
              subPath: config.hjson
      volumes:
        - name: config
          secret:
            secretName: my-release-lemmy
---
# Source: lemmy/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-lemmy-ui
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: lemmy
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: lemmy
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: frontend
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: frontend
          securityContext:
            {}
          image: "dessalines/lemmy-ui:0.19.4"
          imagePullPolicy: IfNotPresent
          env:
            - name: LEMMY_UI_LEMMY_INTERNAL_HOST
              value: "my-release-lemmy:80"
            - name: LEMMY_UI_LEMMY_EXTERNAL_HOST
              value: "localhost"
            - name: LEMMY_UI_HTTPS
              value: "true"
          ports:
            - name: http
              containerPort: 1234
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /robots.txt
              port: http
          readinessProbe:
            httpGet:
              path: /robots.txt
              port: http
          resources:
            {}
---
# Source: lemmy/templates/deployment-pictrs.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-lemmy-pictrs
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: pictrs
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: lemmy
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: pictrs
  template:
    metadata:
      annotations:
        checksum/config: f91cac78750df1505a2dee22a966905a2f2146ef099b49b5ae72244d2307fba0
      labels:
        app.kubernetes.io/name: lemmy
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: pictrs
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: pictrs
          securityContext:
            {}
          image: "asonix/pictrs:0.4.0-beta.19"
          imagePullPolicy: IfNotPresent
          env:
            - name: PICTRS__API_KEY
              valueFrom:
                secretKeyRef:
                  name: my-release-lemmy
                  key: pictrs_apikey
            - name: PICTRS__MEDIA__GIF__MAX_AREA
              value: "65536"
            - name: PICTRS__MEDIA__GIF__MAX_FRAME_COUNT
              value: "400"
            - name: PICTRS__MEDIA__GIF__MAX_HEIGHT
              value: "256"
            - name: PICTRS__MEDIA__GIF__MAX_WIDTH
              value: "256"
            - name: PICTRS__MEDIA__VIDEO_CODEC
              value: "vp9"
          envFrom:
            - secretRef:
                name: my-release-lemmy-pictrs
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          startupProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: data
              mountPath: /mnt/database
              subPath: database
            - name: data
              mountPath: /mnt/media
              subPath: media
          resources:
            {}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: my-release-lemmy-pictrs
---
# Source: lemmy/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-lemmy-proxy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: proxy
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: lemmy
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: proxy
  template:
    metadata:
      annotations:
        checksum/config: e33b87454d02fc88e7764bb2a2245ff95e4cf9e9831f0ada3970e443127e8124
      labels:
        app.kubernetes.io/name: lemmy
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: proxy
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: proxy
          securityContext:
            {}
          image: "nginx:1-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8536
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: config
          configMap:
            name: my-release-lemmy-proxy
---
# Source: lemmy/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "lemmy-0.5.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.12.10
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.12.10
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r45
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "lemmy"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "lemmy"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "lemmy" -d "dbname=lemmy" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "lemmy" -d "dbname=lemmy" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: lemmy/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-lemmy
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-lemmy-proxy
                port:
                  number: 80
---
# Source: lemmy/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-lemmy-test-connection"
  labels:
    helm.sh/chart: lemmy-0.5.7
    app.kubernetes.io/name: lemmy
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.19.4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-lemmy-proxy:80']
  restartPolicy: Never
