---
# Source: ceph-csi-cephfs/templates/nodeplugin-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-ceph-csi-cephfs-nodeplugin
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
---
# Source: ceph-csi-cephfs/templates/provisioner-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
---
# Source: ceph-csi-cephfs/templates/ceph-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ceph-config"
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
data:
  ceph.conf: |
    [global]
      auth_cluster_required = cephx
      auth_service_required = cephx
      auth_client_required = cephx
    
      # ceph-fuse which uses libfuse2 by default has write buffer size of 2KiB
      # adding 'fuse_big_writes = true' option by default to override this limit
      # see https://github.com/ceph/ceph-csi/issues/1928
      fuse_big_writes = true
    
  keyring: ""
---
# Source: ceph-csi-cephfs/templates/csiplugin-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "ceph-csi-config"
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
data:
  config.json: |-
    []
---
# Source: ceph-csi-cephfs/templates/nodeplugin-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-nodeplugin
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
# Source: ceph-csi-cephfs/templates/provisioner-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "update", "delete","patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
---
# Source: ceph-csi-cephfs/templates/nodeplugin-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-nodeplugin
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-ceph-csi-cephfs-nodeplugin
    namespace: ceph-csi-cephfs-3.11.0.tgz
roleRef:
  kind: ClusterRole
  name: my-release-ceph-csi-cephfs-nodeplugin
  apiGroup: rbac.authorization.k8s.io
---
# Source: ceph-csi-cephfs/templates/provisioner-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-ceph-csi-cephfs-provisioner
    namespace: ceph-csi-cephfs-3.11.0.tgz
roleRef:
  kind: ClusterRole
  name: my-release-ceph-csi-cephfs-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Source: ceph-csi-cephfs/templates/provisioner-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
# Source: ceph-csi-cephfs/templates/provisioner-rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-ceph-csi-cephfs-provisioner
    namespace: ceph-csi-cephfs-3.11.0.tgz
roleRef:
  kind: Role
  name: my-release-ceph-csi-cephfs-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# Source: ceph-csi-cephfs/templates/nodeplugin-http-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ceph-csi-cephfs-nodeplugin-http-metrics
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: my-release-ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
spec:
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8081
  selector:
    app: ceph-csi-cephfs
    component: nodeplugin
    release: my-release
  type: "ClusterIP"
---
# Source: ceph-csi-cephfs/templates/provisioner-http-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-ceph-csi-cephfs-provisioner-http-metrics
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: my-release-ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
spec:
  ports:
    - name: http-metrics
      port: 8080
      targetPort: 8081
  selector:
    app: ceph-csi-cephfs
    component: provisioner
    release: my-release
  type: "ClusterIP"
---
# Source: ceph-csi-cephfs/templates/nodeplugin-daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: my-release-ceph-csi-cephfs-nodeplugin
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: nodeplugin
    release: my-release
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: ceph-csi-cephfs
      component: nodeplugin
      release: my-release
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ceph-csi-cephfs
        chart: ceph-csi-cephfs-3.11.0
        component: nodeplugin
        release: my-release
        heritage: Helm
    spec:
      serviceAccountName: my-release-ceph-csi-cephfs-nodeplugin
      priorityClassName: system-node-critical
      hostNetwork: true
      hostPID: true
      # to use e.g. Rook orchestrated cluster, and mons' FQDN is
      # resolved through k8s service, set dns policy to cluster first
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: csi-cephfsplugin
          image: "quay.io/cephcsi/cephcsi:v3.11.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--nodeid=$(NODE_ID)"
            - "--type=cephfs"
            - "--nodeserver=true"
            - "--pidlimit=-1"
            - "--kernelmountoptions="
            - "--fusemountoptions="
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--v=5"
            - "--drivername=$(DRIVER_NAME)"
            - "--enable-read-affinity=false"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DRIVER_NAME
              value: cephfs.csi.ceph.com
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: "unix:///csi/csi.sock"
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: mountpoint-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
            - name: plugin-dir
              mountPath: /var/lib/kubelet/plugins
              mountPropagation: "Bidirectional"
            - mountPath: /dev
              name: host-dev
            - mountPath: /run/mount
              name: host-mount
            - mountPath: /sys
              name: host-sys
            - mountPath: /etc/selinux
              name: etc-selinux
              readOnly: true
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - name: ceph-config
              mountPath: /etc/ceph/
            - name: ceph-csi-config
              mountPath: /etc/ceph-csi-config/
            - name: keys-tmp-dir
              mountPath: /tmp/csi/keys
            - name: ceph-csi-mountinfo
              mountPath: /csi/mountinfo
          resources:
            {}
        - name: driver-registrar
          # This is necessary only for systems with SELinux, where
          # non-privileged sidecar containers cannot access unix domain socket
          # created by privileged CSI driver container.
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: "registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.10.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/cephfs.csi.ceph.com/csi.sock"
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
          resources:
            {}
        - name: liveness-prometheus
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: "quay.io/cephcsi/cephcsi:v3.11.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--type=liveness"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metricsport=8081"
            - "--metricspath=/metrics"
            - "--polltime=60s"
            - "--timeout=3s"
          env:
            - name: CSI_ENDPOINT
              value: "unix:///csi/csi.sock"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8081
              name: metrics
              protocol: TCP
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
      volumes:
        - name: socket-dir
          hostPath:
            path: "/var/lib/kubelet/plugins/cephfs.csi.ceph.com"
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
        - name: host-sys
          hostPath:
            path: /sys
        - name: etc-selinux
          hostPath:
            path: /etc/selinux
        - name: host-mount
          hostPath:
            path: /run/mount
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: host-dev
          hostPath:
            path: /dev
        - name: ceph-config
          configMap:
            name: "ceph-config"
        - name: ceph-csi-config
          configMap:
            name: "ceph-csi-config"
        - name: keys-tmp-dir
          emptyDir: {
            medium: "Memory"
          }
        - name: ceph-csi-mountinfo
          hostPath:
            path: /var/lib/kubelet/plugins/cephfs.csi.ceph.com/mountinfo
            type: DirectoryOrCreate
---
# Source: ceph-csi-cephfs/templates/provisioner-deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: my-release-ceph-csi-cephfs-provisioner
  namespace: ceph-csi-cephfs-3.11.0.tgz
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    component: provisioner
    release: my-release
    heritage: Helm
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: ceph-csi-cephfs
      component: provisioner
      release: my-release
  template:
    metadata:
      labels:
        app: ceph-csi-cephfs
        chart: ceph-csi-cephfs-3.11.0
        component: provisioner
        release: my-release
        heritage: Helm
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ceph-csi-cephfs
                  - key: component
                    operator: In
                    values:
                      - provisioner
              topologyKey: "kubernetes.io/hostname"
      serviceAccountName: my-release-ceph-csi-cephfs-provisioner
      hostNetwork: false
      priorityClassName: system-cluster-critical
      containers:
        - name: csi-cephfsplugin
          image: "quay.io/cephcsi/cephcsi:v3.11.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--nodeid=$(NODE_ID)"
            - "--type=cephfs"
            - "--controllerserver=true"
            - "--pidlimit=-1"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--v=5"
            - "--drivername=$(DRIVER_NAME)"
            - "--setmetadata=true"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DRIVER_NAME
              value: cephfs.csi.ceph.com
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: "unix:///csi/csi-provisioner.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: host-sys
              mountPath: /sys
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: host-dev
              mountPath: /dev
            - name: ceph-config
              mountPath: /etc/ceph/
            - name: ceph-csi-config
              mountPath: /etc/ceph-csi-config/
            - name: keys-tmp-dir
              mountPath: /tmp/csi/keys
          resources:
            {}
        - name: csi-provisioner
          image: "registry.k8s.io/sig-storage/csi-provisioner:v4.0.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=1"
            - "--timeout=60s"
            - "--leader-election=true"
            - "--retry-interval-start=500ms"
            - "--extra-create-metadata=true"
            - "--feature-gates=HonorPVReclaimPolicy=true"
            - "--prevent-volume-mode-conversion=true"
          env:
            - name: ADDRESS
              value: "unix:///csi/csi-provisioner.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
        - name: csi-snapshotter
          image: registry.k8s.io/sig-storage/csi-snapshotter:v7.0.0
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=1"
            - "--timeout=60s"
            - "--leader-election=true"
            - "--extra-create-metadata=true"
            - "--enable-volume-group-snapshots=false"
          env:
            - name: ADDRESS
              value: "unix:///csi/csi-provisioner.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
        - name: csi-resizer
          image: "registry.k8s.io/sig-storage/csi-resizer:v1.10.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--v=1"
            - "--csi-address=$(ADDRESS)"
            - "--timeout=60s"
            - "--leader-election"
            - "--retry-interval-start=500ms"
            - "--handle-volume-inuse-error=false"
            - "--feature-gates=RecoverVolumeExpansionFailure=true"
          env:
            - name: ADDRESS
              value: "unix:///csi/csi-provisioner.sock"
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
        - name: liveness-prometheus
          image: "quay.io/cephcsi/cephcsi:v3.11.0"
          imagePullPolicy: IfNotPresent
          args:
            - "--type=liveness"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metricsport=8081"
            - "--metricspath=/metrics"
            - "--polltime=60s"
            - "--timeout=3s"
          env:
            - name: CSI_ENDPOINT
              value: "unix:///csi/csi-provisioner.sock"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 8081
              name: metrics
              protocol: TCP
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
          resources:
            {}
      volumes:
        - name: socket-dir
          emptyDir: {
            medium: "Memory"
          }
        - name: host-sys
          hostPath:
            path: /sys
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: host-dev
          hostPath:
            path: /dev
        - name: ceph-config
          configMap:
            name: "ceph-config"
        - name: ceph-csi-config
          configMap:
            name: "ceph-csi-config"
        - name: keys-tmp-dir
          emptyDir: {
            medium: "Memory"
          }
---
# Source: ceph-csi-cephfs/templates/csidriver-crd.yaml
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: cephfs.csi.ceph.com
  labels:
    app: ceph-csi-cephfs
    chart: ceph-csi-cephfs-3.11.0
    release: my-release
    heritage: Helm
spec:
  attachRequired: false
  podInfoOnMount: false
  fsGroupPolicy: File
  seLinuxMount: true
