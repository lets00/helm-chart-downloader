---
# Source: vault-gcp-secrets/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-vault-gcp-secrets
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: vault-gcp-secrets/templates/secret.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJQTEFDRUhPTERFUiI6eyJ1c2VybmFtZSI6IlBMQUNFSE9MREVSIiwicGFzc3dvcmQiOiJQTEFDRUhPTERFUiIsImF1dGgiOiJVRXhCUTBWSVQweEVSVkk2VUV4QlEwVklUMHhFUlZJPSJ9fX0=
kind: Secret
metadata:
  name: "gcp-secret"
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: "kubernetes.io/dockerconfigjson"
---
# Source: vault-gcp-secrets/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-vault-gcp-secrets-config
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  agent.hcl: |
    exit_after_auth = false
    pid_file = "/dev/shm/vault-agent.pid"

    vault {
        address = "http://vault:8200"
        num_retries = "3"
    }

    auto_auth {
      method "kubernetes" {

          config = {
              role = "vault-gcp-secrets"
          }
      }

      sink "file" {
          config = {
              path = "/dev/shm/.agent-token"
          }
      }
    }

    template {
      error_on_missing_key = true
      source      = "/srv/vault-agent/template.ctmpl"
      destination = "/dev/shm/key.json"
      exec        = {
        command = [
          "bash",
          "/srv/vault-agent/template-command.sh",
        ]
      }
    }

    template_config {
      exit_on_retry_failure = true
    }

  template.ctmpl: |
    {{- with secret "gcp/my-role" -}}
    {{ base64Decode .Data.private_key_data }}
    {{ end -}}

  template-command.sh: |
    #!/bin/bash
    kubectl create secret docker-registry "gcp-secret" \
      --docker-server "gcr.io" \
      --docker-username "_json_key" \
      --docker-email "not.used@example.com" \
      --docker-password "$(cat /dev/shm/key.json)" \
      --dry-run=client -o yaml | kubectl replace -f -
---
# Source: vault-gcp-secrets/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-vault-gcp-secrets
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  resourceNames:
  - "gcp-secret"
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
# Source: vault-gcp-secrets/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-vault-gcp-secrets
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-vault-gcp-secrets
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-vault-gcp-secrets
    namespace: vault-gcp-secrets-1.15.0.tgz
---
# Source: vault-gcp-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-vault-gcp-secrets
  namespace: vault-gcp-secrets-1.15.0.tgz
  labels:
    app.kubernetes.io/name: vault-gcp-secrets
    helm.sh/chart: vault-gcp-secrets-1.15.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    checksum/config-map: 469a1d0f684db549b6faaf212e2e3c6a047deb42c25ee6e14f18f63bb39aa457
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: vault-gcp-secrets
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-gcp-secrets
        helm.sh/chart: vault-gcp-secrets-1.15.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config-map: 469a1d0f684db549b6faaf212e2e3c6a047deb42c25ee6e14f18f63bb39aa457
    spec:
      serviceAccountName: my-release-vault-gcp-secrets
      securityContext:
        {}
      containers:
        - name: vault-gcp-secrets
          securityContext:
            {}
          image: "ghcr.io/tjm/vault-gcp-secrets:v1.15.0"
          imagePullPolicy: IfNotPresent
          command:
            - vault
          args:
            - agent
            - -config
            - /srv/vault-agent/agent.hcl
          env:
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8081
              protocol: TCP
          volumeMounts:
            - name: vault-agent-config
              mountPath: "/srv/vault-agent"
          livenessProbe:
            exec:
              command:
                - grep
                - -q
                - "."
                - /dev/shm/key.json
          readinessProbe:
            exec:
              command:
                - grep
                - -q
                - "."
                - /dev/shm/key.json
        
      volumes:
        - name: vault-agent-config
          configMap:
            name: my-release-vault-gcp-secrets-config
