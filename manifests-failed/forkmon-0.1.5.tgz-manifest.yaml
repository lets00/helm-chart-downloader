---
# Source: forkmon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-forkmon
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: forkmon-0.1.5.tgz
---
# Source: forkmon/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-forkmon
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  config.toml: |
    # How often to reload data from the nodes
    reload_interval = "10s"
    # If specified, a http server will serve static content here
    server_address = "0.0.0.0:8080"
    
    # Shown in the document title, if specified
    chain_name=""
    
    # Third party providers
    infura_key          = "<INFURA_API_KEY>"
    infura_endpoint     = "https://mainnet.infura.io/v3/"
    alchemy_key         = "<ALCHEMY_API_KEY>"
    alchemy_endpoint    = "https://eth-mainnet.g.alchemy.com/v2/"
    etherscan_key       = "<ETHERSCAN_API_KEY>"
    etherscan_endpoint  = "https://api.etherscan.io/api"
    
    [Metrics]
    
    enabled = true
    endpoint = "<INFLUX_ENDPOINT>"
    username = "<INFLUX_USERNAME>"
    database  = "<INFLUX_DB_NAME>"
    password  = "<INFLUX_PASSWORD>"
    
    # Local or non third party connection require rpc kind
    [[clients]]
      url = "http://execution-client:8545"
      name = "execution-client-name"
      kind = "rpc"
    
    # Third party client configuration doesn't require url
    # Kind can vary between infura, alchemy or etherscan
    # Recommended to enable rate limit for third party services
    [[clients]]
      name = "mainnet-infura"
      kind = "infura"
      rate_limit = 5
    [[clients]]
      name = "mainnet-alchemy"
      kind = "alchemy"
      rate_limit = 5
    [[clients]]
      name = "mainnet-etherscan"
      kind = "etherscan"
      rate_limit = 5
---
# Source: forkmon/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-forkmon-headless
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
---
# Source: forkmon/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-forkmon
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
---
# Source: forkmon/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-forkmon
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: forkmon
      app.kubernetes.io/instance: my-release
  serviceName: my-release-forkmon-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: forkmon
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/config: 1adb73ada37244f063b2a3d6e3310bd27b5b657d8166e77e2e8e29589f454db7
    spec:
      serviceAccountName: my-release-forkmon
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
      containers:
        - name: forkmon
          image: "holiman/nodemonitor:latest"
          imagePullPolicy: IfNotPresent
          workingDir: /data
          command:
            - sh
            - -ac
            - >
              cp -r /www /data/. && cd /data/ && /usr/local/bin/nodemonitor /data/config.toml
          securityContext:
            {}
          volumeMounts:
            - name: storage
              mountPath: "/data"
            - name: config
              mountPath: "/data/config.toml"
              subPath: config.toml
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 120
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: http
          resources:
            {}
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      topologySpreadConstraints:
        []
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: my-release-forkmon
        - name: storage
          emptyDir: {}
---
# Source: forkmon/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-forkmon-test-connection"
  labels:
    helm.sh/chart: forkmon-0.1.5
    app.kubernetes.io/name: forkmon
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-forkmon:8080']
  restartPolicy: Never
