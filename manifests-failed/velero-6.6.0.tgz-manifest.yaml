---
# Source: velero/templates/serviceaccount-server.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-velero-server
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
---
# Source: velero/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-velero
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
type: Opaque
data:
---
# Source: velero/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-velero-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
subjects:
  - kind: ServiceAccount
    namespace: velero-6.6.0.tgz
    name: my-release-velero-server
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: velero/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-velero-server
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
rules:
- apiGroups:
    - "*"
  resources:
    - "*"
  verbs:
    - "*"
---
# Source: velero/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-velero-server
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
subjects:
  - kind: ServiceAccount
    namespace: velero-6.6.0.tgz
    name: my-release-velero-server
roleRef:
  kind: Role
  name: my-release-velero-server
  apiGroup: rbac.authorization.k8s.io
---
# Source: velero/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-velero
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
spec:
  type: ClusterIP
  ports:
    - name: http-monitoring
      port: 8085
      targetPort: http-monitoring
  selector:
    name: velero
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
---
# Source: velero/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-velero
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
    component: velero
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: velero
  template:
    metadata:
      labels:
        name: velero
        app.kubernetes.io/name: velero
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: velero-6.6.0
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8085"
        prometheus.io/scrape: "true"
        checksum/secret: b9754ca4d83dab2f2e3ce5d2f763c69ed92c2298dc2737084680716557250af3
    spec:
      restartPolicy: Always
      serviceAccountName: my-release-velero-server
      terminationGracePeriodSeconds: 3600
      containers:
        - name: velero
          image: "velero/velero:v1.13.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-monitoring
              containerPort: 8085
          command:
            - /velero
          args:
            - server
            ### Flags
            - --uploader-type=kopia
            ### Global Flags
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 128Mi
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http-monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /metrics
              port: http-monitoring
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: plugins
              mountPath: /plugins
            - name: cloud-credentials
              mountPath: /credentials
            - name: scratch
              mountPath: /scratch
          env:
            - name: VELERO_SCRATCH_DIR
              value: /scratch
            - name: VELERO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LD_LIBRARY_PATH
              value: /plugins
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /credentials/cloud
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /credentials/cloud
            - name: AZURE_CREDENTIALS_FILE
              value: /credentials/cloud
            - name: ALIBABA_CLOUD_CREDENTIALS_FILE
              value: /credentials/cloud
      dnsPolicy: ClusterFirst
      volumes:
        - name: cloud-credentials
          secret:
            secretName: my-release-velero
        - name: plugins
          emptyDir: {}
        - name: scratch
          emptyDir: {}
---
# Source: velero/templates/backupstoragelocation.yaml
apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: default
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
spec:
  credential:
  provider: 
  accessMode: ReadWrite
  objectStorage:
    bucket:
---
# Source: velero/templates/volumesnapshotlocation.yaml
apiVersion: velero.io/v1
kind: VolumeSnapshotLocation
metadata:
  name: default
  namespace: velero-6.6.0.tgz
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
spec:
  credential:
  provider:
---
# Source: velero/templates/upgrade-crds/serviceaccount-upgrade.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-velero-server-upgrade-crds
  namespace: velero-6.6.0.tgz
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
---
# Source: velero/templates/upgrade-crds/clusterrole-upgrade.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-velero-upgrade-crds
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/component: upgrade-crds
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
rules:
- apiGroups: 
    - "apiextensions.k8s.io"
  resources: 
    - "customresourcedefinitions"
  verbs: 
    - create
    - patch
    - update
    - get
    - list
---
# Source: velero/templates/upgrade-crds/clusterrolebinding-upgrade.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-velero-upgrade-crds
  labels:
    app.kubernetes.io/component: upgrade-crds
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
subjects:
  - kind: ServiceAccount
    namespace: velero-6.6.0.tgz
    name: my-release-velero-server-upgrade-crds
roleRef:
  kind: ClusterRole
  name: my-release-velero-upgrade-crds
  apiGroup: rbac.authorization.k8s.io
---
# Source: velero/templates/upgrade-crds/upgrade-crds.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-velero-upgrade-crds
  namespace: velero-6.6.0.tgz
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,pre-rollback
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-6.6.0
spec:
  backoffLimit: 3
  template:
    metadata:
      name: velero-upgrade-crds
    spec:
      serviceAccountName: my-release-velero-server-upgrade-crds
      initContainers:
        - name: kubectl
          image: "docker.io/bitnami/kubectl:1.30"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -c
            - cp `which sh` /tmp && cp `which kubectl` /tmp
          volumeMounts:
            - mountPath: /tmp
              name: crds
      containers:
        - name: velero
          image: "velero/velero:v1.13.2"
          imagePullPolicy: IfNotPresent
          command:
            - /tmp/sh
          args:
            - -c
            - /velero install --crds-only --dry-run -o yaml | /tmp/kubectl apply -f -
          volumeMounts:
            - mountPath: /tmp
              name: crds
      volumes:
        - name: crds
          emptyDir: {}
      restartPolicy: OnFailure
