---
# Source: fhir-server/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "fhir-server-0.9.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "NXhVQ0lndmhHQg=="
  password: "Y2hhbmdlLXBhc3N3b3Jk"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: fhir-server/templates/fhir-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-fhir-server-user-secret
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
type: Opaque
data:
  fhir.user.password: Y2hhbmdlLXBhc3N3b3Jk
  fhir.admin.password: Y2hhbmdlLXBhc3N3b3Jk
---
# Source: fhir-server/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-postgresql-extended-configuration
  namespace: "fhir-server-0.9.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    # override the default value of 0 to support bulk import and export
    max_prepared_transactions = 100
---
# Source: fhir-server/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-fhir-server-config
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
data:
  datasources.xml: >
    <server>
        <!-- ============================================================== -->
        <!-- TENANT: default; DSID: default; TYPE: read-write               -->
        <!-- ============================================================== -->
        <dataSource id="fhirDefaultDefault" jndiName="jdbc/fhir_default_default" type="javax.sql.XADataSource" statementCacheSize="200" syncQueryTimeoutWithTransactionTimeout="true" validationTimeout="30s">
            <jdbcDriver javax.sql.XADataSource="org.postgresql.xa.PGXADataSource" libraryRef="sharedLibPostgres"/>
            <properties.postgresql
                serverName="${env.FHIR_DB_HOSTNAME}"
                portNumber="${env.FHIR_DB_PORT}"
                databaseName="${env.FHIR_DB_NAME}"
                user="${env.FHIR_DB_USER}"
                password="${env.FHIR_DB_PASSWORD}"
                currentSchema="${env.FHIR_DB_SCHEMA}"
            />
            <connectionManager
                minPoolSize="${env.DS_MIN_POOL_SIZE}"
                maxPoolSize="${env.DS_MAX_POOL_SIZE}"
                agedTimeout="${env.DS_AGED_TIMEOUT}"
                connectionTimeout="60s"
                maxIdleTime="2m"
            />
        </dataSource>
    </server>
  extension-search-parameters.json: >
    {
        "resourceType": "Bundle",
        "type": "collection",
        "entry": []
    }
  fhir-server-config.json: >
    {
        "__comment": "FHIR Server configuration",
        "fhirServer": {
            "core": {
                "serverRegistryResourceProviderEnabled": false,
                "externalBaseUrl": "https://my-release.example.com/fhir-server/api/v4",
                "disabledOperations": "",
                "defaultPrettyPrint": true
            },
            "resources": {
                "open": true,
                "Resource":                 {
                  "interactions": [
                    "create",
                    "read",
                    "vread",
                    "history",
                    "search",
                    "update",
                    "patch",
                    "delete"
                  ],
                  "profiles": {
                    "atLeastOne": null
                  },
                  "searchIncludes": null,
                  "searchParameters": {
                    "*": "*"
                  },
                  "searchRevIncludes": null
                }
            },
            "security": {
                "cors": true,
                "basic": {
                    "enabled": true
                },
                "certificates": {
                    "enabled": true,
                    "authFilter": {
                        "enabled": false
                    }
                }
            },
            "notifications": {
                "kafka": {
                    "enabled": false
                },
                "nats": {
                    "enabled": false
                }
            },
            "audit": {
                "serviceClassName" : "org.linuxforhealth.fhir.audit.impl.NopService",
                "serviceProperties" : {
                }
            },
            "persistence": {
                "factoryClassname": "org.linuxforhealth.fhir.persistence.jdbc.FHIRPersistenceJDBCFactory",
                "common": {
                    "__comment": "Configuration properties common to all persistence layer implementations",
                    "updateCreateEnabled": true
                },
                "jdbc": {
                    "__comment": "Configuration properties for the JDBC persistence implementation",
                    "enableCodeSystemsCache": true,
                    "enableParameterNamesCache": true,
                    "enableResourceTypesCache": true
                },
                "datasources": {
                    "default": {
                        "type": "postgresql",
                        "currentSchema": "fhirdata",
                        "searchOptimizerOptions": {
                            "from_collapse_limit": 12,
                            "join_collapse_limit": 12
                        }
                    }
                }
            },
            "bulkdata": {
                "enabled": false
            },
            "operations": {
                "erase": {
                    "enabled": true,
                    "allowedRoles": [
                        "FHIROperationAdmin",
                        "FHIRUsers"
                    ]
                },
                "membermatch": {
                    "enabled": false
                }
            }
        }
    }
  jvm.options: |
---
# Source: fhir-server/templates/keycloak-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-fhir-server-keycloak-config
data:
  keycloak-config.json: >
    {
      "keycloak": {
        "adminUser": "admin",
        "adminPassword": "${KEYCLOAK_PASSWORD}",
        "adminClientId": "admin-cli",
        "realms": {
          "test": {
            "enabled": true,
            "clientScopes": {
              "fhirUser": {
                "protocol": "openid-connect",
                "description": "Permission to retrieve current logged-in user",
                "attributes": {
                  "consent.screen.text": "Permission to retrieve current logged-in user"
                },
                "mappers": {
                  "fhirUser Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-patient-prefix-usermodel-attribute-mapper",
                    "config": {
                      "user.attribute": "resourceId",
                      "claim.name": "fhirUser",
                      "jsonType.label": "String",
                      "id.token.claim": "true",
                      "access.token.claim": "false",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "launch/patient": {
                "protocol": "openid-connect",
                "description": "Used by clients to request a patient-scoped access token",
                "attributes": {
                  "display.on.consent.screen": "false"
                },
                "mappers": {
                  "Patient ID Claim Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-usermodel-attribute-mapper",
                    "config": {
                      "user.attribute": "resourceId",
                      "claim.name": "patient_id",
                      "jsonType.label": "String",
                      "id.token.claim": "false",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "false"
                    }
                  },
                  "Patient ID Token Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-usersessionmodel-note-mapper",
                    "config": {
                      "user.session.note": "patient_id",
                      "claim.name": "patient",
                      "jsonType.label": "String",
                      "id.token.claim": "false",
                      "access.token.claim": "false",
                      "access.tokenResponse.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "online_access": {
                "protocol": "openid-connect",
                "description": "Request a refresh_token that can be used to obtain a new access token to replace an expired one, and that will be usable for as long as the end-user remains online.",
                "attributes": {
                  "consent.screen.text": "Retain access while you are online"
                }
              },
              "patient/*.read": {
                "protocol": "openid-connect",
                "description": "read access to all data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/AllergyIntolerance.read": {
                "protocol": "openid-connect",
                "description": "read access to all AllergyIntolerance data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all AllergyIntolerance data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/CarePlan.read": {
                "protocol": "openid-connect",
                "description": "read access to all CarePlan data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all CarePlan data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/CareTeam.read": {
                "protocol": "openid-connect",
                "description": "read access to all CareTeam data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all CareTeam data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Condition.read": {
                "protocol": "openid-connect",
                "description": "read access to all Condition data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Condition data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Device.read": {
                "protocol": "openid-connect",
                "description": "read access to all Device data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Device data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/DiagnosticReport.read": {
                "protocol": "openid-connect",
                "description": "read access to all DiagnosticReport data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all DiagnosticReport data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/DocumentReference.read": {
                "protocol": "openid-connect",
                "description": "read access to all DocumentReference data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all DocumentReference data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Encounter.read": {
                "protocol": "openid-connect",
                "description": "read access to all Encounter data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Encounter data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/ExplanationOfBenefit.read": {
                "protocol": "openid-connect",
                "description": "read access to all ExplanationOfBenefit data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all ExplanationOfBenefit data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Goal.read": {
                "protocol": "openid-connect",
                "description": "read access to all Goal data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Goal data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Immunization.read": {
                "protocol": "openid-connect",
                "description": "read access to all Immunization data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Immunization data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Location.read": {
                "protocol": "openid-connect",
                "description": "read access to all Location data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Location data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Medication.read": {
                "protocol": "openid-connect",
                "description": "read access to all Medication data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Medication data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/MedicationRequest.read": {
                "protocol": "openid-connect",
                "description": "read access to all MedicationRequest data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all MedicationRequest data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/MedicationDispense.read": {
                "protocol": "openid-connect",
                "description": "read access to all MedicationDispense data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all MedicationDispense data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Observation.read": {
                "protocol": "openid-connect",
                "description": "read access to all Observation data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Observation data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Organization.read": {
                "protocol": "openid-connect",
                "description": "read access to all Organization data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Organization data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Patient.read": {
                "protocol": "openid-connect",
                "description": "read access to all Patient data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Patient data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Practitioner.read": {
                "protocol": "openid-connect",
                "description": "read access to all Practitioner data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Practitioner data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/PractitionerRole.read": {
                "protocol": "openid-connect",
                "description": "read access to all PractitionerRole data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all PractitionerRole data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Procedure.read": {
                "protocol": "openid-connect",
                "description": "read access to all Procedure data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Procedure data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/Provenance.read": {
                "protocol": "openid-connect",
                "description": "read access to all Provenance data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all Provenance data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              },
              "patient/RelatedPerson.read": {
                "protocol": "openid-connect",
                "description": "read access to all RelatedPerson data for the patient",
                "attributes": {
                  "consent.screen.text": "read access to all RelatedPerson data for the patient"
                },
                "mappers": {
                  "Audience Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-audience-mapper",
                    "config": {
                      "included.custom.audience": "${FHIR_BASE_URL}",
                      "access.token.claim": "true"
                    }
                  },
                  "Group Membership Mapper": {
                    "protocol": "openid-connect",
                    "protocolmapper": "oidc-group-membership-mapper",
                    "config": {
                      "claim.name": "group",
                      "full.path": "false",
                      "id.token.claim": "true",
                      "access.token.claim": "true",
                      "userinfo.token.claim": "true"
                    }
                  }
                }
              }
            },
            "defaultDefaultClientScopes": [],
            "defaultOptionalClientScopes": ["online_access","offline_access","profile","fhirUser","launch/patient","patient/*.read","patient/AllergyIntolerance.read","patient/CarePlan.read","patient/CareTeam.read","patient/Condition.read","patient/Device.read","patient/DiagnosticReport.read","patient/DocumentReference.read","patient/Encounter.read","patient/ExplanationOfBenefit.read","patient/Goal.read","patient/Immunization.read","patient/Location.read","patient/Medication.read","patient/MedicationRequest.read","patient/MedicationDispense.read","patient/Observation.read","patient/Organization.read","patient/Patient.read","patient/Practitioner.read","patient/PractitionerRole.read","patient/Procedure.read","patient/Provenance.read","patient/RelatedPerson.read"],
            "clients": {
              "inferno": {
                "consentRequired": true,
                "publicClient": true,
                "redirectURIs": ["http://localhost:4567/inferno/*"],
                "standardFlowEnabled": true,
                "serviceAccountsEnabled": false,
                "clientAuthenticatorType": "client-secret",
                "defaultClientScopes": ["launch/patient"],
                "optionalClientScopes":["online_access","offline_access","profile","fhirUser","launch/patient","patient/*.read","patient/AllergyIntolerance.read","patient/CarePlan.read","patient/CareTeam.read","patient/Condition.read","patient/Device.read","patient/DiagnosticReport.read","patient/DocumentReference.read","patient/Encounter.read","patient/ExplanationOfBenefit.read","patient/Goal.read","patient/Immunization.read","patient/Location.read","patient/Medication.read","patient/MedicationRequest.read","patient/MedicationDispense.read","patient/Observation.read","patient/Organization.read","patient/Patient.read","patient/Practitioner.read","patient/PractitionerRole.read","patient/Procedure.read","patient/Provenance.read","patient/RelatedPerson.read"]
              },
              "infernoBulk": {
                "consentRequired": false,
                "publicClient": false,
                "redirectURIs": null,
                "standardFlowEnabled": false,
                "serviceAccountsEnabled": true,
                "clientAuthenticatorType": "client-jwt",
                "defaultClientScopes": [],
                "optionalClientScopes":["online_access","offline_access","profile","fhirUser","launch/patient","patient/*.read","patient/AllergyIntolerance.read","patient/CarePlan.read","patient/CareTeam.read","patient/Condition.read","patient/Device.read","patient/DiagnosticReport.read","patient/DocumentReference.read","patient/Encounter.read","patient/ExplanationOfBenefit.read","patient/Goal.read","patient/Immunization.read","patient/Location.read","patient/Medication.read","patient/MedicationRequest.read","patient/MedicationDispense.read","patient/Observation.read","patient/Organization.read","patient/Patient.read","patient/Practitioner.read","patient/PractitionerRole.read","patient/Procedure.read","patient/Provenance.read","patient/RelatedPerson.read"]
              }
            },
            "authenticationFlows": {
              "SMART App Launch": {
                "description": "browser based authentication",
                "providerId": "basic-flow",
                "builtIn": false,
                "authenticationExecutions": {
                  "SMART Login": {
                    "requirement": "ALTERNATIVE",
                    "userSetupAllowed": false,
                    "authenticatorFlow": true,
                    "description": "Username, password, otp and other auth forms.",
                    "providerId": "basic-flow",
                    "authenticationExecutions": {
                      "Audience Validation": {
                        "authenticator": "audience-validator",
                        "requirement": "DISABLED",
                        "priority": 10,
                        "authenticatorFlow": false,
                        "configAlias": "localhost",
                        "config": {
                          "audiences": "${FHIR_BASE_URL}"
                        }
                      },
                      "Username Password Form": {
                        "authenticator": "auth-username-password-form",
                        "requirement": "REQUIRED",
                        "priority": 20,
                        "authenticatorFlow": false
                      },
                      "Patient Selection Authenticator": {
                        "authenticator": "auth-select-patient",
                        "requirement": "REQUIRED",
                        "priority": 30,
                        "authenticatorFlow": false,
                        "configAlias": "internal.fhir.url",
                        "config": {
                          "internalFhirUrl": "${FHIR_BASE_URL}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "browserFlow": "SMART App Launch",
            "groups": {
              "fhirUser": {
              }
            },
            "defaultGroups": ["fhirUser"],
            "users": {
              "fhiruser": {
                "enabled": true,
                "password": "change-password",
                "passwordTemporary": false,
                "attributes": {
                  "resourceId": ["Patient1"]
                },
                "groups": ["fhirUser"]
              }
            },
            "eventsConfig": {
              "saveLoginEvents": true,
              "expiration": 23328000,
              "types": [
                "FEDERATED_IDENTITY_LINK",
                "LOGOUT",
                "LOGIN_ERROR",
                "IDENTITY_PROVIDER_LINK_ACCOUNT",
                "REFRESH_TOKEN",
                "FEDERATED_IDENTITY_LINK_ERROR",
                "IDENTITY_PROVIDER_POST_LOGIN",
                "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
                "CODE_TO_TOKEN_ERROR",
                "IDENTITY_PROVIDER_FIRST_LOGIN",
                "REFRESH_TOKEN_ERROR",
                "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
                "LOGOUT_ERROR",
                "CODE_TO_TOKEN",
                "LOGIN",
                "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR"
              ],
              "saveAdminEvents": true
            }
          }
        }
      }
    }
---
# Source: fhir-server/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "fhir-server-0.9.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: fhir-server/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "fhir-server-0.9.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: fhir-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-fhir-server
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
spec:
  selector:
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: server
  ports:
    - name: https
      protocol: TCP
      port: 9443
---
# Source: fhir-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-fhir-server
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: server
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: fhir-server
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fhir-server
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: server
      annotations:
        checksum/config: 44907fc860afbd242e7b606ce51a1c8297ea3e0f10497d56e33726cb8350f783
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/secret: e59845d7585bb0cff3fa1abddcc8b9f6264172ef70034b34052330cf3b5aeca5
    spec:
      volumes:
        - name: fhir-server-config
          configMap:
            name: my-release-fhir-server-config
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: fhir-server
                    app.kubernetes.io/instance: my-release
                topologyKey: topology.kubernetes.io/zone
        
      initContainers:
        - name: wait-for-db-to-be-ready
          image: docker.io/bitnami/postgresql:14.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          env:
            - name: PGHOST
              value: "my-release-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "fhirserver"
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
      containers:
        - name: fhir-server
          image: "ghcr.io/linuxforhealth/fhir-server:5.1.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 9443
              protocol: TCP
          resources:
            limits:
              ephemeral-storage: 1Gi
              memory: 4Gi
            requests:
              ephemeral-storage: 1Gi
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - name: fhir-server-config
              mountPath: /opt/ol/wlp/usr/servers/defaultServer/configDropins/overrides/datasources.xml
              subPath: datasources.xml
            - name: fhir-server-config
              mountPath: /opt/ol/wlp/usr/servers/defaultServer/config/default/fhir-server-config.json
              subPath: fhir-server-config.json
            - name: fhir-server-config
              mountPath: /opt/ol/wlp/usr/servers/defaultServer/config/default/extension-search-parameters.json
              subPath: extension-search-parameters.json
            - name: fhir-server-config
              mountPath: /opt/ol/wlp/usr/servers/defaultServer/configDropins/overrides/jvm.options
              subPath: jvm.options
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SEC_TLS_TRUSTDEFAULTCERTS
              value: "true"
            - name: TRACE_SPEC
              value: "*=info"
            - name: WLP_LOGGING_MESSAGE_FORMAT
              value: json
            - name: WLP_LOGGING_MESSAGE_SOURCE
              value: ""
            - name: WLP_LOGGING_CONSOLE_FORMAT
              value: json
            - name: WLP_LOGGING_CONSOLE_LOGLEVEL
              value: info
            - name: WLP_LOGGING_CONSOLE_SOURCE
              value: message,trace,accessLog,ffdc,audit
            - name: WLP_LOGGING_JSON_FIELD_MAPPINGS
              value: loglevel:level
            - name: FHIR_HOSTNAME
              value: "my-release.example.com"
            - name: FHIR_TRANSACTION_MANAGER_TIMEOUT
              value: "120s"
            - name: FHIR_DB_HOSTNAME
              value: "my-release-postgresql"
            - name: FHIR_DB_PORT
              value: "5432"
            - name: FHIR_DB_NAME
              value: "postgres"
            - name: FHIR_DB_USER
              value: "fhirserver"
            - name: FHIR_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "password"
            - name: FHIR_DB_SCHEMA
              value: fhirdata
            - name: FHIR_DB_SSL
              value: ""
            - name: DS_MIN_POOL_SIZE
              value: "20"
            - name: DS_MAX_POOL_SIZE
              value: "100"
            - name: DS_AGED_TIMEOUT
              value: "-1"
            - name: FHIR_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-fhir-server-user-secret
                  key: fhir.user.password
            - name: FHIR_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-fhir-server-user-secret
                  key: fhir.admin.password
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - curl --fail -k -sS -u "fhiruser:${FHIR_USER_PASSWORD}" 'https://localhost:9443/fhir-server/api/v4/$healthcheck'
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - /opt/ol/wlp/bin/server status
            initialDelaySeconds: 36
            periodSeconds: 60
            timeoutSeconds: 15
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 32
---
# Source: fhir-server/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "fhir-server-0.9.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: 34e6dc67feed6b5f7c7bef7abb9b8daa2beda85cefe6edb0c67e7aedd5b029f6
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "fhir-server-0.9.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.5.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "fhirserver"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_DB
              value: "postgres"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "fhirserver" -d "dbname=postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "fhirserver" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: postgresql-extended-config
          configMap:
            name: my-release-postgresql-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: fhir-server/templates/schematool.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-fhir-server-schematool"
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: schematool
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      name: "my-release-schematool"
    spec:
      restartPolicy: Never
      imagePullSecrets:
        - name: all-icr-io
      initContainers:
        - name: wait-for-db-to-be-ready
          image: docker.io/bitnami/postgresql:14.5.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          env:
            - name: PGHOST
              value: "my-release-postgresql"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: "fhirserver"
          command: ["/bin/sh", "-c"]
          args:
            - |
              until pg_isready; do
                echo "Waiting for DB ${PGUSER}@${PGHOST}:${PGPORT} to be up";
                sleep 15;
              done;
      volumes:
      containers:
        - name: fhir-schematool
          image: ghcr.io/linuxforhealth/fhir-schematool:5.1.1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
          resources:
            
            limits:
              ephemeral-storage: 256Mi
              memory: 256Mi
            requests:
              ephemeral-storage: 64Mi
              memory: 64Mi
          volumeMounts:
          env:
            - name: FHIR_DB_TYPE
              value: "postgresql"
            - name: FHIR_DB_HOSTNAME
              value: "my-release-postgresql"
            - name: FHIR_DB_PORT
              value: "5432"
            - name: FHIR_DB_NAME
              value: "postgres"
            - name: FHIR_DB_ADMIN_USER
              value: "postgres"
            - name: FHIR_DB_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "postgres-password"
            - name: FHIR_DB_USER
              value:  "fhirserver"
            - name: FHIR_DB_SCHEMA
              value: fhirdata
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "Running create-schemas task";

              /opt/java/openjdk/bin/java -jar /opt/schematool/fhir-persistence-schema-*-cli.jar \
                  --db-type postgresql \
                  --prop db.host=${FHIR_DB_HOSTNAME} \
                  --prop db.port=${FHIR_DB_PORT} \
                  --prop db.database=${FHIR_DB_NAME} \
                  --prop user=${FHIR_DB_ADMIN_USER} \
                  --prop password=${FHIR_DB_ADMIN_PASSWORD} \
                  --schema-name fhirdata \
                  --create-schemas;

              echo "Running update-schema task";

              /opt/java/openjdk/bin/java -jar /opt/schematool/fhir-persistence-schema-*-cli.jar \
                  --db-type postgresql \
                  --prop db.host=${FHIR_DB_HOSTNAME} \
                  --prop db.port=${FHIR_DB_PORT} \
                  --prop db.database=${FHIR_DB_NAME} \
                  --prop user=${FHIR_DB_ADMIN_USER} \
                  --prop password=${FHIR_DB_ADMIN_PASSWORD} \
                  --schema-name fhirdata \
                  --update-schema \
                  --grant-to ${FHIR_DB_USER}
  backoffLimit: 4
---
# Source: fhir-server/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-fhir-server
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
spec:
  rules:
    - host: "my-release.example.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-fhir-server
                port:
                  name: https
  tls:
    - hosts:
---
# Source: fhir-server/templates/tests/test-api.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-fhir-server-test-api"
  labels:
    helm.sh/chart: fhir-server-0.9.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: fhir-server
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: test-api
  annotations:
    "helm.sh/hook": test
spec:
  restartPolicy: Never
  containers:
    - name: get-patient
      image: docker.io/curlimages/curl:7.78.0
      command: ["/bin/sh", "-exc"]
      args:
        - |
          curl -vvv --retry-connrefuse --connect-timeout 30 --max-time 120 --retry 5 --retry-delay 15 \
               --insecure --fail -u ${FHIR_USER_NAME}:${FHIR_USER_PASSWORD} \
               "https://${FHIR_SERVER_HOST}:9443/fhir-server/api/v4/Patient";
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsUser: 65532
        runAsNonRoot: true
      env:
        - name: FHIR_SERVER_HOST
          value: my-release-fhir-server
        - name: FHIR_USER_NAME
          value: fhiruser
        - name: FHIR_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-fhir-server-user-secret
              key: fhir.user.password
      resources:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
      livenessProbe:
        exec:
          command: ["/bin/true"]
      readinessProbe:
        exec:
          command: ["/bin/true"]
