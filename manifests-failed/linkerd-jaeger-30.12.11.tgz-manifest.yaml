---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### jaeger RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlVENDQW1HZ0F3SUJBZ0lRTUpLckU1WTBvdEtkVzFOaTRLTDNUakFOQmdrcWhraUc5dzBCQVFzRkFEQTYKTVRnd05nWURWUVFERXk5cVlXVm5aWEl0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzFxWVdWblpYSXRNekF1TVRJdQpNVEV1ZEdkNkxuTjJZekFlRncweU5EQTJNakF4TkRVM05EVmFGdzB5TlRBMk1qQXhORFUzTkRWYU1Eb3hPREEyCkJnTlZCQU1UTDJwaFpXZGxjaTFwYm1wbFkzUnZjaTVzYVc1clpYSmtMV3BoWldkbGNpMHpNQzR4TWk0eE1TNTAKWjNvdWMzWmpNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTM0YzBnV0k2dTNtTAo4amlQYXAxSzRGU3k2bEs5SnltSHo3Y1JuYnIxamxxblRpS0JYa3lnOHpmYWlWV3Q0eXJjb010S2JSZGt5NlRICjZCTUd3MVV2cDg5Z2NXMzR6dE9HUWdqSUR1VnpCMjhtNDVLUVY5WE5EY1grcDBhRVZ6TmphMHBDWXAxbW1oclUKU0k4VW1melo5c0ZyOFBPUmh0K210QnNzK1NaWGtiMXN3anQxcWpMamcvUUN4Q0wwZldHUVJCWi9EQ3hnRkF2RwpISUNJZHlmSHQ1cFdGZnJuM2NUSGIvcVRkcmRyekwrd2QrTWNqNkJ1Tk9qWnM4N3VZbEg1Rk5FazUzbmVITkFUCkFjdXE5YzI0OVRyWDlOTHRuV2JQV1EvQ2lkL2hBOWZTbUt5MmZTanUrR3c3U2NCdTM1SG9DUXd5OXkvanVJNlIKYzE2K2JESHgxd0lEQVFBQm8zc3dlVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQgpCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3T2dZRFZSMFJCRE13TVlJdmFtRmxaMlZ5CkxXbHVhbVZqZEc5eUxteHBibXRsY21RdGFtRmxaMlZ5TFRNd0xqRXlMakV4TG5SbmVpNXpkbU13RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFFeFlmMC9KRlpYbTRRczNiczBzcWtsdVpnYUZqZzhldEsxYnlOY25hT2hscTk5TQprR3UvVXRhY05RWk1NT09lK2Y3TWtQRldYb2VLaUJYOVNLNnZFak1CSTlMMkhtR0Z2c0ttYjl5WDBqcURxNmVZCnp2SzJ3SklwNWllSk9JT3U3RCttYVZ1MS8vU2ltbVVmTGl5MnNLRXdiNERRUEtLYkQzRitjMUg4eFByMHQxWHYKU3h0QTFCYTVPUmx1YXFKRHhFSnFrUzZ1bUEvOFdZVCtsWWk1dzVVUlJwV0xXblVzalZUYXBDNUJUTHdmTjREWQpXVm95NjRYU0JtWjlMQzNQd3FkT1NPMXdvL05lcUtSY1dFZnpGZ2dTdWN6ZFlxMGl2U2ZPYWlIRzlUMnN3UWw0Ck9sRGxtMlVEUERFS1REQ2J6OGZ1UWhWTWlyYlhlRVQvOUExQmxhbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMzRjMGdXSTZ1M21MOGppUGFwMUs0RlN5NmxLOUp5bUh6N2NSbmJyMWpscW5UaUtCClhreWc4emZhaVZXdDR5cmNvTXRLYlJka3k2VEg2Qk1HdzFVdnA4OWdjVzM0enRPR1FnaklEdVZ6QjI4bTQ1S1EKVjlYTkRjWCtwMGFFVnpOamEwcENZcDFtbWhyVVNJOFVtZnpaOXNGcjhQT1JodCttdEJzcytTWlhrYjFzd2p0MQpxakxqZy9RQ3hDTDBmV0dRUkJaL0RDeGdGQXZHSElDSWR5Zkh0NXBXRmZybjNjVEhiL3FUZHJkcnpMK3dkK01jCmo2QnVOT2paczg3dVlsSDVGTkVrNTNuZUhOQVRBY3VxOWMyNDlUclg5Tkx0bldiUFdRL0NpZC9oQTlmU21LeTIKZlNqdStHdzdTY0J1MzVIb0NRd3k5eS9qdUk2UmMxNitiREh4MXdJREFRQUJBb0lCQUgweG11VEVnYVN6QlFEYgpVT2dqeE9ZMFNpa1h3ajJHOHp3Uml0cE85bTJPdEpuOGxYeWRhcUFPcm1XeENUMXNxam1jNHNpTEM3ZExTWFBnCkJDK3ZMSXZPaUhPL1psVmcvNWRJbDlSUUNzY2xLQ0RaMitKMkt1MEY4Z1Q2Wi9EM0pUM1lUNm93QW1GWm1ZQXkKTXhXMEd0Z3JxU3RCSUVic1NOQWpVR01UYUlTRkNXQjd2R0loK01hbE9jYzdiUFB5NnpEVVkwaks5NWZIQ3hLKwo4Mjg2aGtCZElHVGJxblZWM2Q1aXBsT3JkTExtMDg2MzdOamdGN1lHY0UxQmMvbGFNQVhQMDJUTzBheitZTGNJCi9MU1FiQWV0V1FPNFc0VjkyMnNIZzBnaWR2amg0U242QWEwaDdRRytWanBkVXRhT0RvY0Y5Q3p3ajBXMDlsRkcKakowZkZtRUNnWUVBL01hNjFsOFdUcS9qekFRTXo2UFIyak0vbEJrS1JEQlpMczcrNUdsa09wV3Back9iZ1FLcQp1WnJsMGRoZ1p2UUFCS1NIRUZZZWtYQXQ4QzdpVnNZTExNSENSVFZjN1NWMVYzbVZXVFNjbnR6M3RYL3FLbXEzCnJBcDQvV1kvVXllSzhwMjEyVExxQ3ZGK3J5Y1d5ZGVtbkVkSkE2dXdqNkR2TVpKUVIrNWt5YjhDZ1lFQTRtRDgKTnlPN2FKZkRZYkh5dG9pK1lDRTMzRG5FZnlndVlTdGZzOVFXSGZ1OWRZNkJmMEpSMXgrM2dTVkF4S3FVK0NmcgpGSm9xUHlYTVF4WDIxZjlNREJWMk9aNVJncXpsWW1kMmVKcld5MGk1YWg0VlJ5cmMvcXZ0VGpPSHladDEvc3RBCmJxQ1RwK1dLRkdHVEJvVGhDVDM0MWtFWnVaRW4zTFJDNGZ0d2Jla0NnWUVBaXB2cTNoeGNIaC9qR1A5cml2eTQKMlI3YkVUbTk0SEJtcHYxSTFqVllpYXVCcmRoMVFBUVhYQm10UmltUmkwTG5NNlNJajVPNXhXU3ZQQkpwZU0yMgpXUCtTcU9LL0p5Y3dOaHhzb2ZMd28waGw2TGZRenh1ZnhnNGtGRWZhRjU0S1drblM2dHc1YkhES1YvOW1ScDRqCk5YVDllNjdNN2FXQkpEeW9HeG1GV1A4Q2dZRUFrMUdjTU9IdS91VHNnREpHaWlVNUJ1UDNMemprdC85VkYyVWIKbGJKcVpqN0NEN09hY0UrZlpNaStLYXd0bHc2UGZXSzA2Q1pmWWRMZU43WWVlU3IzdVZGcUs1cnMzb1pYakk5YQpHS2hqS2MxODVDTUpvOU93RjRlWkdmQU02TlZqbDFsNzU4SlY5TWc2OElLREpKWHF3SkgwMHJGdzVVTWlWczEwClRRM05INmtDZ1lFQW92Uld4N1FwQVRpUGoyOWV0L3lTYVZydzJTRTAyTXBjL0crNjd3WHNNRXBoakgzbzZjZlgKQjNoOU5IQStoRFd2dStQSWJ4MXB1ck9qWE9rT3BNMkgyMDlsWW16cHVEa3hsQ2Yya054eFZYejFTRWhzeXFNOQpqdkl3TW8wZlQ4cHFvV0dZTkN1N0d5aXVQL0ZSSm9heHMxM3pTSEtQMFhoNlBrTlJ1UjlTV3cwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
    extensions:
      health_check:
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        tls:
          insecure: true
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [batch]
          exporters: [jaeger]
---
# Source: linkerd-jaeger/templates/rbac.yaml
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-jaeger/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: linkerd-jaeger-30.12.11.tgz
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
# Source: linkerd-jaeger/templates/tracing.yaml
###
### Tracing Jaeger Service
###
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: linkerd-jaeger-30.12.11.tgz
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
# Source: linkerd-jaeger/templates/jaeger-injector.yaml
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: jaeger-injector
  name: jaeger-injector
  namespace: linkerd-jaeger-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: 63d7a4a8803e82ec504a1d88ddcefbcab9d260998b4a00964522d14eaea95a06
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -collector-svc-addr=collector.linkerd-jaeger:55678
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: linkerd-jaeger-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - command:
        - /otelcol
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector:0.59.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
# Source: linkerd-jaeger/templates/tracing.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
  namespace: linkerd-jaeger-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --query.base-path=/jaeger
        image: jaegertracing/all-in-one:1.31
        imagePullPolicy: Always
        name: jaeger
        ports:
        - containerPort: 14269
          name: admin
        - containerPort: 14268
          name: collection
        - containerPort: 14250
          name: grpc
        - containerPort: 16686
          name: ui
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      dnsPolicy: ClusterFirst
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: jaeger
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-otlp-http
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-opencensus
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-zipkin
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-thrift
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: collector-jaeger-grpc
  # allow connections from any pod (meshed or not) sending trace data
  requiredAuthenticationRefs: []
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-grpc
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: collector
      namespace: linkerd-jaeger-30.12.11.tgz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-admin
  requiredAuthenticationRefs:
    # if not using linkerd-viz' prometheus, replace its SA here
    - kind: ServiceAccount
      name: prometheus
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: jaeger-ui
  requiredAuthenticationRefs:
    # for the optional dashboard integration
    - kind: ServiceAccount
      name: web
      namespace: linkerd-viz
---
# Source: linkerd-jaeger/templates/rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  clientConfig:
    service:
      name: jaeger-injector
      namespace: linkerd-jaeger-30.12.11.tgz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlVENDQW1HZ0F3SUJBZ0lRTUpLckU1WTBvdEtkVzFOaTRLTDNUakFOQmdrcWhraUc5dzBCQVFzRkFEQTYKTVRnd05nWURWUVFERXk5cVlXVm5aWEl0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzFxWVdWblpYSXRNekF1TVRJdQpNVEV1ZEdkNkxuTjJZekFlRncweU5EQTJNakF4TkRVM05EVmFGdzB5TlRBMk1qQXhORFUzTkRWYU1Eb3hPREEyCkJnTlZCQU1UTDJwaFpXZGxjaTFwYm1wbFkzUnZjaTVzYVc1clpYSmtMV3BoWldkbGNpMHpNQzR4TWk0eE1TNTAKWjNvdWMzWmpNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTM0YzBnV0k2dTNtTAo4amlQYXAxSzRGU3k2bEs5SnltSHo3Y1JuYnIxamxxblRpS0JYa3lnOHpmYWlWV3Q0eXJjb010S2JSZGt5NlRICjZCTUd3MVV2cDg5Z2NXMzR6dE9HUWdqSUR1VnpCMjhtNDVLUVY5WE5EY1grcDBhRVZ6TmphMHBDWXAxbW1oclUKU0k4VW1melo5c0ZyOFBPUmh0K210QnNzK1NaWGtiMXN3anQxcWpMamcvUUN4Q0wwZldHUVJCWi9EQ3hnRkF2RwpISUNJZHlmSHQ1cFdGZnJuM2NUSGIvcVRkcmRyekwrd2QrTWNqNkJ1Tk9qWnM4N3VZbEg1Rk5FazUzbmVITkFUCkFjdXE5YzI0OVRyWDlOTHRuV2JQV1EvQ2lkL2hBOWZTbUt5MmZTanUrR3c3U2NCdTM1SG9DUXd5OXkvanVJNlIKYzE2K2JESHgxd0lEQVFBQm8zc3dlVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQgpCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3T2dZRFZSMFJCRE13TVlJdmFtRmxaMlZ5CkxXbHVhbVZqZEc5eUxteHBibXRsY21RdGFtRmxaMlZ5TFRNd0xqRXlMakV4TG5SbmVpNXpkbU13RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFFeFlmMC9KRlpYbTRRczNiczBzcWtsdVpnYUZqZzhldEsxYnlOY25hT2hscTk5TQprR3UvVXRhY05RWk1NT09lK2Y3TWtQRldYb2VLaUJYOVNLNnZFak1CSTlMMkhtR0Z2c0ttYjl5WDBqcURxNmVZCnp2SzJ3SklwNWllSk9JT3U3RCttYVZ1MS8vU2ltbVVmTGl5MnNLRXdiNERRUEtLYkQzRitjMUg4eFByMHQxWHYKU3h0QTFCYTVPUmx1YXFKRHhFSnFrUzZ1bUEvOFdZVCtsWWk1dzVVUlJwV0xXblVzalZUYXBDNUJUTHdmTjREWQpXVm95NjRYU0JtWjlMQzNQd3FkT1NPMXdvL05lcUtSY1dFZnpGZ2dTdWN6ZFlxMGl2U2ZPYWlIRzlUMnN3UWw0Ck9sRGxtMlVEUERFS1REQ2J6OGZ1UWhWTWlyYlhlRVQvOUExQmxhbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs the kube-api
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-jaeger/templates/jaeger-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-otlp-http
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4318
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/tracing-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger-30.12.11.tgz
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["linkerd-jaeger-30.12.11.tgz"]
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: jaeger-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
---
# Source: linkerd-jaeger/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
  name: namespace-metadata
  namespace: linkerd-jaeger-30.12.11.tgz
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: jaeger
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: stable-2.14.10
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --extension
        - jaeger
        - --namespace
        - linkerd-jaeger-30.12.11.tgz
        - --linkerd-namespace
        - linkerd
