---
# Source: semaphore/templates/postgresql/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: semaphore-1.0.2.tgz
  name: "semaphore-database-secrets"
stringData:
  host: "semaphore-database"
  port: "5432"
  databaseName: "semaphore"
  userName: "semaphore_user"
  userPassword: "4glouqR732jcsnn80SoXMGhz05xwnHU8"
---
# Source: semaphore/templates/semaphore/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore-configuration
stringData:
  config.json: |-
    {
      "postgres": {
        "host": "##HOST##",
        "name": "##DATABASE_NAME##",
        "user": "##USER_NAME##",
        "pass": "##USER_PASSWORD##",
        "options": null
      },
      "dialect": "postgres",
      "web_host": "",
      "port": "3000",
      "interface": "",
      "tmp_path": "/home/semaphore/tmp",
      "cookie_hash": "dmNMNVdpUG1IVG9JOWllb3lKSmNlTkkyZEhUcVFlWm4=",
      "cookie_encryption": "QzB1WW45VklPY3hQSEpyT1VqQmJXQkRnQTBwbm5VcUo=",
      "access_key_encryption": "YXpFZEFwSnBDbVFMSlZPejh4Q3Z4N0pFV2Q5WFpIWmg=",
      "email_secure": false,
      "email_alert": false,
      "email_host": "",
      "email_port": "",
      "email_username": "",
      "email_password": "",
      "email_sender": "",
      "ldap_enable": false,
      "ldap_needtls": false,
      "ldap_binddn": "",
      "ldap_bindpassword": "",
      "ldap_server": "",
      "ldap_searchdn": "",
      "ldap_searchfilter": "",
      "ldap_mappings": {
        "dn": "",
        "mail": "",
        "uid": "",
        "cn": ""
      },
      "telegram_chat": "",
      "telegram_token": "",
      "concurrency_mode": "",
      "max_parallel_tasks": 0,
      "telegram_alert": false,
      "ssh_config_path": "",
      "variables_passing_method": ""
    }
---
# Source: semaphore/templates/postgresql/persistent-volume-claim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore-database-volume
spec:
  accessModes:
        - ReadWriteOnce
  resources:
    requests:
      storage: "10Gi"
---
# Source: semaphore/templates/postgresql/service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore-database
  labels:
    helm.sh/chart: semaphore-1.0.2
    app.kubernetes.io/name: semaphore
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.8.53"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: semaphore-database
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: database
---
# Source: semaphore/templates/semaphore/service.yaml
apiVersion: v1
kind: Service
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore-service
  labels:
    helm.sh/chart: semaphore-1.0.2
    app.kubernetes.io/name: semaphore
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.8.53"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: semaphore
    app.kubernetes.io/instance: my-release
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
---
# Source: semaphore/templates/semaphore/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore
  labels:
    helm.sh/chart: semaphore-1.0.2
    app.kubernetes.io/name: semaphore
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.8.53"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: semaphore
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: semaphore
        app.kubernetes.io/instance: my-release
    spec:
      restartPolicy: Always
      imagePullSecrets:
        []
      initContainers:
        - name: wait-for-database
          image: alpine:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - while ! nc -w 1 "semaphore-database" "5432" ; do echo "waiting for database"; sleep 1; done; echo "Database responded"
        - name: create-config-file
          image: alpine:latest
          imagePullPolicy: Always
          command: ['sh', '-c']
          args:
            - cp /tmp/config_template.json /tmp/config/config.json;
              sed -i "s/##HOST##/${POSTGRES_HOST}:${POSTGRES_PORT}/" /tmp/config/config.json;
              sed -i "s/##DATABASE_NAME##/${POSTGRES_DATABASE}/" /tmp/config/config.json;
              sed -i "s/##USER_NAME##/${POSTGRES_USER}/" /tmp/config/config.json;
              sed -i "s/##USER_PASSWORD##/${POSTGRES_PASSWORD}/" /tmp/config/config.json;
              echo "Config file created"
          env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "host"
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "port"
            - name: POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "databaseName"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "userName"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "userPassword"
          volumeMounts:
            - mountPath: /tmp/config
              name: semaphore-config-file
            - mountPath: /tmp/config_template.json
              name: semaphore-configuration
              subPath: config.json
              readOnly: true
      containers:
        - name: "semaphore"
          image: "ansiblesemaphore/semaphore:v2.8.53"
          imagePullPolicy: "IfNotPresent"
          command: ['sh', '-c']
          args:
            - semaphore service
          ports:
            - containerPort: 3000
          volumeMounts:
            - mountPath: /home/semaphore/config.json
              name: semaphore-config-file
              subPath: config.json
          readinessProbe:
            httpGet:
              port: 3000
              path: /ping
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 3
          livenessProbe:
            httpGet:
              port: 3000
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
      volumes:
        - name: semaphore-configuration
          secret:
            secretName: semaphore-configuration
        - name: semaphore-config-file
          emptyDir: { }
---
# Source: semaphore/templates/postgresql/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: semaphore-1.0.2.tgz
  name: semaphore-database
  labels:
    helm.sh/chart: semaphore-1.0.2
    app.kubernetes.io/name: semaphore
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "2.8.53"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: database
  selector:
    matchLabels:
      app.kubernetes.io/name: semaphore-database
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: semaphore-database
        app.kubernetes.io/instance: my-release
    spec:
      initContainers:
        - name: database-certificate-creation
          image: alpine:latest
          imagePullPolicy: Always
          command: [ 'sh', '-c' ]
          args:
            - apk update;
              apk add openssl;
              openssl genrsa -out postgres.key 4096;
              openssl req -new -key postgres.key -out postgres.csr -subj "/C=/ST=/L=/O=/CN=semaphore.local";
              openssl x509 -req -days 3650 -in postgres.csr -signkey postgres.key -out postgres.crt;
              mv postgres.* /var/lib/postgresql/database-certificates;
              chmod -R 600 /var/lib/postgresql/database-certificates/postgres.key;
              chmod -R 640 /var/lib/postgresql/database-certificates/postgres.csr;
              chmod -R 640 /var/lib/postgresql/database-certificates/postgres.crt;
              chown -R "70":"70" /var/lib/postgresql/database-certificates
          volumeMounts:
            - mountPath: /var/lib/postgresql/database-certificates
              name: database-certificates-volume
      containers:
        - name: "semaphore-database"
          image: "postgres:14-alpine"
          imagePullPolicy: "IfNotPresent"
          args:
            - '-c'
            - 'ssl=on'
            - '-c'
            - 'ssl_cert_file=/var/lib/postgresql/database-certificates/postgres.crt'
            - '-c'
            - 'ssl_key_file=/var/lib/postgresql/database-certificates/postgres.key'
          ports:
            - containerPort: 5432
              name: database
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: semaphore-database-volume-storage
              subPath: postgres
            - mountPath: /var/lib/postgresql/database-certificates
              name: database-certificates-volume
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "databaseName"
                  optional: false
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "userName"
                  optional: false
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "semaphore-database-secrets"
                  key: "userPassword"
                  optional: false
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 3
            tcpSocket:
              port: 5432
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 3
            tcpSocket:
              port: 5432
      volumes:
        - name: database-certificates-volume
          emptyDir: { }
        - name: semaphore-database-volume-storage
          persistentVolumeClaim:
            claimName: semaphore-database-volume
---
# Source: semaphore/templates/semaphore/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: semaphore-1.0.2.tgz
  labels:
    "app.kubernetes.io/name": 'semaphore'
    "app.kubernetes.io/managed-by": "Helm"
    "app.kubernetes.io/instance": "my-release"
    "app.kubernetes.io/component": ""
  name: my-release-semaphore
spec:
  ingressClassName: "nginx"
  rules:
  - http:
      paths:
      - backend:
          service:
            name: semaphore-service
            port:
              number: 3000
        pathType: "Prefix"
        path: /
    host: "semaphore.example.com"
