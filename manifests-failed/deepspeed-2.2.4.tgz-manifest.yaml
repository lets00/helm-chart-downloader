---
# Source: deepspeed/templates/client/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-deepspeed-client
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # By default, the client is not setting any port
---
# Source: deepspeed/templates/worker/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-deepspeed-worker
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow complete connection from other worker pods (we cannot predict the ports the application creates)
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: my-release
              app.kubernetes.io/name: deepspeed
              app.kubernetes.io/part-of: deepspeed
              app.kubernetes.io/component: worker 
    - ports:
        - port: 2222
      from:
---
# Source: deepspeed/templates/client/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-deepspeed-client
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
---
# Source: deepspeed/templates/worker/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-deepspeed-worker
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
---
# Source: deepspeed/templates/client/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-deepspeed-client
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
automountServiceAccountToken: false
---
# Source: deepspeed/templates/worker/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-deepspeed-worker
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
automountServiceAccountToken: false
---
# Source: deepspeed/templates/ssh-keys-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-deepspeed-ssh-key
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
data:
  id_rsa: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBdXVtcEhaMEFacldVWWI4YUJ6VWowekFZYWYwbndadzJDOVJNZEJCMHl0WlBGN2dwCnBuS1QyK3lXUWNQd0xuVE9TWmptVGhWeURwSktNL0tZd1E2dmtLcVVVSG9URlkySnBsYWhUVVJ1ZzF4MExWckYKR01WbGpxRlgyYUVwTVZBcE8rQ2N6N0ZvQmkxeHd0WUlSSFUwZjJnbTZIdDJkY1gzcnVYOHdVSEdpVVNESVc2dQpIYm11eEl4cnkwcmxIRVU3T01yR05BdmNUOGlRZXdnQU9nRzRlQUNpb0ZoM3JGV0dvajNGeDYrbWdYS2VTdXVTCmpyUXF5R2ZSSjRNYnZ1OVp3M1B0RUtzTVNQOVE3VTcvaTRBd2FWRi9Yem90ZlFCYlgxK2ZRS2pqTTJ2dDc2TnYKZGhSRzVUWW00cDdpMzRpdHoyVDBOWDMzNkswcS9GV3FsTjYzWVpReVNKN0MrOGllNEdKR1FnVFNNTFY5VWp6NAp0Y3Q5ZDVLSHhBUGRUTkcxVXNpd3FxdHVJVGVwZWY2dVFDbVFFK3BmangvSU93aEhUVTNWbjZJZHJtbTBzSTFKCjdKNkJQamdpUlFTMW9KNmlOeS9LanFhZzVyZDhIelBMQmhPdDZSZStXcXB1QVQ5bnBxRnlORkxCMW5QYXRjWXAKeW1wZW05OGtwdi85TE5aQ2JudFFVQjVIZk12czA4VHBoaUZGWEFUY3VHTS9XSCtsMHhOZzNIWE9DbjlJRjJQTQpsbjFYRGFkWERPaE8yTjhEUWtHRlpZaVZURlEzS2g3K1ZLSWZMcmtETyt5emxicGI0RThwaDhMQUh5Lzh6TW1OCkFhMkN5MGR1QlZ6bkxZTXgveGQ5Vzh0ZTZ1MFRrTW5CVUNrMGtHNUFXUkkrUkhCcy9YZXZURitGOUo4Q0F3RUEKQVFLQ0FnQXhqY2MvU2FPVWwybHFiTDdhMEZUYUpiTWpUbkdlMitwY1FvR3VkN3B2R0ZoSndwS1FSV283OFVKNAoxeGl6U0ZaMG5xdllZY2ttWWRSNFowWG1VUjFzcmp5NkJWTlA4SUZnN3pDK2luaitMS0hFY0g4MnJRYmF4SjNFCjNmeE16YUxROUNDKzA1cnZvRmE3d0FEYkhYTzRuNFZKTjRwVmVSSE1kYjhJQVlkQVYwQ291VzVDQlR0M2NuOFYKbTVxWVh5WnZUUnMxS3p2U2p5cjI0MDBrRTlhelFmL2JvUGpCWUw5Yi9pS1VhVllzbFpXdjZUcW15TTlhNkdORQpKWGRTcktSUXRFaFNsZmFnMThlOTBxYmZkakhmaWpMSnJXUG44eE5HZXRSKzBRZkRWMGJ5dEpMVmJGVExhZ3J2CkpBNmtFdGw1MVpzRkg0dDlUWVBLK0c5TUhxdmhKNzE5MmxPemc3UUdySDg2U3U1bE1uVzJob1BJOFhWdWVIYUgKcGlYSkdyRU5nY3NkMURrbTlCMmpYMVFHeE9VZzRwcVdod1ZmUFN4Z0ptNXdFOUZqMHZwZDJTaWx6Q0JxdTZIYgpTU2tZQlJxMHZIWEVGTk1PbzBvRFRJN04zS1pkWGdDblM5bjh1bjFHVjBrQWxXUVI1NXBudVArcUhzc1p2bVUyCndCMTVNTDNReE53bmcrdHE1cE1oZG04dmlRUERaTVV0b3kvc0xDWnZsVmxPYnpoVU82TXd5cnVhWVY5Vi8zR3cKQzI4d3ptNW1La0phaHlRMDlnOTNaeGRrV3NTNldqM0JYOERZVElVN2gwczVyd1Bld0pqR3BwY3I3M0JNK0dMWApTUWM1Ry9JcGsvMmNWNFFJVm1jM3FsTHFiaXRCS0ZHalRwNEYzb1RTbEhqaFZmMlhtUUtDQVFFQXp2UndDWDB1ClQ2Q3hXejFlbStCem5HcG0zcUZMd3FaaEY4V1NURkJXYkpRa0hYaGRTM0hLWGV2NTlYT05RaXZTK3hwcU1NTWYKVkZqQzQ2RTV1UjdvUlpNdUtMKzRQR1NOZUJGSzhRVTFiektBQ0NXN2VDYVVWK3RGbWNmVTNpczR2eCtodWY4WgphbjdwMU9TbmpIcTVBdWozN1ZiUzl4VXNoWGZzUTQrQ3M3Y3d0bVorSVNSZE5MUHhlNCtSOHFnZDVJQXYycGpjCmNkMkJOMW9lWDBNbGtRUHdyYmQ5MTFsNTRSQStEdFhFUU5iKzZHTlFyNC9zRTlvaGo4UGVuY3NIUERpQUpzT0wKd3VZYmxMVU9JWWNYMy9Gb25EZ0xxWS9ZTW5va0xlSlRhNmhSREVXU3VXdGVCSlF5OE92czd3a0NSeThzU0VuQQpPSVFwT2E1ck9YelF0UUtDQVFFQTV6Vk9jUWkzOUk2enZmRVU0anpWdzdVZnliOFRGaksvZHBMOFJIa2dodGFZCnlMVTAwc3Eya25xU2JLSG9ZNGFIR2R2THF0R1F4UXNlbUgxYU9QTGYxTncwUEtJbDBKa0grVVRlM1FHZytieFYKYUlZdmMyTEZOQnN4SEs5bEZJRGdWL0Vqa3prVERiekdPRzNKSmR4ejNCME40QVh4bjYwMFZZVTUxdjE2RWZCVwpVZ3k0R2JVQmFuMXBER05XK0NkV01ZL25kVmM5cDdLYkpnejJvUERVc2M2Z3hHMWs5SWFqOUpxMXVmK0NJQWlnCndEZk5YZUV6OVNmZDlMQThqWHdOTjdCU1NVMFZDb1NMdHlpQ0JrWVowNEdydEUrYTJTeGNkbkwycnFhR0pxTE8KMnBCbmg4bHhmek9XN3J2eUtLQjJtWHBveThNMXdMdHlqWHhPdGd1SWd3S0NBUUFYMHB0eS9DM3dqSmJkNGRxYQpKdVFvQlRlQ09SNzNjUitNRlBvYVBzVTBDbmw5eXZVeVVnN3hjTkI5S0tnQ0RmbGpYazhLL2VzRlVwSmNrWnFMCmJMdGdCdWt4VjZCbGswMlZuS2Y3eHBXNER5QWR6L29jZ3BSZzZueEFqM2c1ZXRBMWIvYTE2bCtLbXNGZitGSXgKSVk5YWZtYkxzMHJsbGxKaHFzUlBvcDF4QW8xZzhidGpKVVIxWktGUGo5OUZCNFVwWUhnaHVhYm1sSkRqUmtSbwp3dG40TDNQdEMwbzVGOXVueEs3Z0ZrdFpDMmFjYVpKSUkxRVJsL0oxRWg3Mkd3RGlOYjdLdDRmSEQ2WHRJRXBZCklhemw0bXdnVDNOSU9YNnhrTTNKV2x3djhGZ2tDWDR5U2VHd3RUNkg3U0NCQTVCM2tUNlBzNjJrMDlITENnRGQKeFRoaEFvSUJBQUZ1clJ1NktCbVZ3THRPZ1FpZHc5MUFnLy9sOVNKUUVpdVQ0WWd6RCthRjhkQmNmd1ZIU0RaRQpHQ0FnS0tabE1QVVNEWUx6WldnekYyOXVaMTZ1OG9BSkZUSEM5MlVCYmJFM29nSFFmc1ROUytJbjRxZGVWMFpwClhMYUd4Nk9HNE56cW00UFArTFEvRlNOSVd0U25OdmlJSFl2anZZbDFzenRNWmYxVStLcWZ5SWtkbHc1aHRxNkkKTkZ4bFNTYWtaNzVLMis0NEtpT2QwYVE4dEZKdTY0Sm1lMHg4T1FIaXk2VTZTQ0hzMlV1RmdpbHVyeEVEMGlTVQpxS1ZaYWlhZVBCNjZNdWhOVi9JR3ZDN1lTMlhxalVKb0xUNGl1QnpjVDM1VVcvN2MvVHZFQ25BRU1RQUFXWG1tClFpc2NjdldaZU9LZWhZT3RvK21idjZ2c3R6Z2RmaTBDZ2dFQkFNWUx2NUk3RU1NaVFpVnJGSHNXR2dZSXM4Z1gKWC9rRlZObENqWHNGUmlubFhQWmZsVUVYZVVSNjM3eFVva0pzZzB1aGg2Yk45dGdncFFHeVhGZTAyN2ZsRmJXUgpSdFg2a3RmL2FBSjJKOGc3dkJUdWdnZ2xRL2F4aTk1emo2Y1VVeGo4aXNBc2ljeDJPaWI5TkVrSzAwSFF1emRyCmFtYkd2aEM4MURUUllHWElLNm41eTVwb1dnV1JhbFlUd2tZVkpHKytJVS9md0Jvb1lzMkVScjhHUUdhbkxJbk8KTkhmTzZXQ1dYV1BlL1Z3V1VZUXFXZ3YzZjgxOElpZlV2SXg2YXNyRnhNdzUwcXFHNEdkMjdYeXBpU1h5T0wxUgozWXc1cUVubFlyWWYzSFVxb1Jqb1NlellmZXZxclkxdmswTEw3NFMwbmd4a3NJdVZnTmZJWGhteGNJRT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: deepspeed/templates/client/hostfile-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-deepspeed-hosts
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
data:
  hostfile: |
    
    my-release-deepspeed-worker-0.my-release-deepspeed-worker-headless slots=1
    my-release-deepspeed-worker-1.my-release-deepspeed-worker-headless slots=1
    my-release-deepspeed-worker-2.my-release-deepspeed-worker-headless slots=1
---
# Source: deepspeed/templates/client/ssh-client-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-deepspeed-ssh-client
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
data:
  deepspeed_ssh_client.conf: |
    
    Host my-release-deepspeed-worker-0.my-release-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
    Host my-release-deepspeed-worker-1.my-release-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
    Host my-release-deepspeed-worker-2.my-release-deepspeed-worker-headless
      Port 2222
      IdentityFile /bitnami/ssh/client-private-key/id_rsa
      StrictHostKeyChecking no
---
# Source: deepspeed/templates/worker/ssh-server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-deepspeed-ssh-server
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
data:
  deepspeed_ssh_server.conf: |
    Port 2222
    PasswordAuthentication no
    UsePAM no
    PermitUserEnvironment yes
---
# Source: deepspeed/templates/worker/worker-headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-deepspeed-worker-headless
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
---
# Source: deepspeed/templates/client/client-dep-job.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-deepspeed-client
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: client
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: client
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/hostfile: c4aedff9c45417c8b5d75c065daa45a190b3ed5f0ca982e6da9c49013d2e1924
        checksum/ssh-private-key: 932222ad253daf0b91a53fe1795ddc84bd7bac2f424dca4d4d2b9dad7ae95693
        checksum/ssh-client-conf: 69f4b51adda00fe8b0c204dc190be71d91e058019775e56d2f6febb9151c97a8
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: deepspeed
        app.kubernetes.io/version: 0.14.2
        helm.sh/chart: deepspeed-2.2.4
        app.kubernetes.io/part-of: deepspeed
        app.kubernetes.io/component: client
    spec:
      
      serviceAccountName: my-release-deepspeed-client
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: deepspeed
                    app.kubernetes.io/component: client
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: ssh-client-configure
          image: docker.io/bitnami/deepspeed:0.14.2-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              # HACK: Depending on the OS, the ssh version may not have support for
              # /etc/ssh/ssh_config.d. Therefore, we need to copy the ssh_config
              # to a volume and perform modifications to include the configuration
              # from the ConfigMap, as it will not be read
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              cp /etc/ssh/ssh_config /bitnami/ssh/ssh-config
              if [[ ! -d /etc/ssh/ssh_config.d ]]; then
                # Older version of ssh, add the include directive
                echo "Modifying ssh_config with include directive"
                echo "Include /etc/ssh/ssh_config.d/*.conf" >> /bitnami/ssh/ssh-config/ssh_config
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: empty-dir
              mountPath: /bitnami/ssh/ssh-config
              subPath: ssh-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
        - name: wait-for-workers
          image: docker.io/bitnami/deepspeed:0.14.2-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              worker_hosts=(
                my-release-deepspeed-worker-0.my-release-deepspeed-worker-headless
                my-release-deepspeed-worker-1.my-release-deepspeed-worker-headless
                my-release-deepspeed-worker-2.my-release-deepspeed-worker-headless
              )
        
              check_worker() {
                  local -r worker_host="${1:-?missing host}"
                  if ssh "$worker_host" "echo OK"; then
                     return 0
                  else
                     return 1
                  fi
              }
        
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
        
              for host in "${worker_hosts[@]}"; do
                  echo "Checking connection to $host"
                  if retry_while "check_worker $host"; then
                      echo "Connected to $host"
                  else
                      echo "Error connecting to $host"
                      exit 1
                  fi
              done
        
              echo "Connection success"
              exit 0
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: ssh-client-config
              mountPath: /etc/ssh/ssh_config.d/deepspeed_ssh_client.conf
              subPath: deepspeed_ssh_client.conf
            - name: empty-dir
              mountPath: /etc/ssh/ssh_config
              subPath: ssh-conf-dir/ssh_config
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            - name: empty-dir
              mountPath: /home/deepspeed/.ssh
              subPath: app-ssh-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: deepspeed
          image: docker.io/bitnami/deepspeed:0.14.2-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              sleep infinity
          env:
            - name: HOME
              value: /home/deepspeed
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - deepspeed
                - --help
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 30
            exec:
              command:
                - python
                - -c
                - import deepspeed; deepspeed.__version__
          volumeMounts:
            - name: source
              mountPath: /app
            - name: empty-dir
              mountPath: /etc/ssh/ssh_config
              subPath: ssh-conf-dir/ssh_config
            - name: ssh-client-config
              mountPath: /etc/ssh/ssh_config.d
            - name: hostfile
              mountPath: /job
            - name: empty-dir
              mountPath: /home/deepspeed/.local
              subPath: app-local-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.ssh
              subPath: app-ssh-dir
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.cache
              subPath: app-cache-dir
            - name: data
              mountPath: /bitnami/deepspeed/data
      volumes:
        - name: empty-dir
          emptyDir: {}
        # SSH client settings for connecting to the worker nodes
        - name: ssh-client-config
          configMap:
            name: my-release-deepspeed-ssh-client
        - name: ssh-client-private-key
          secret:
            secretName: my-release-deepspeed-ssh-key
        # Source code of the application
        - name: source
          emptyDir: {}
        # hostfile for connecting to the worker nodes
        - name: hostfile
          configMap:
            name: my-release-deepspeed-hosts
        # These folders are necessary for building and pip install operations
        # Optional data folder in case the application requires storing data
        - name: data
          emptyDir: {}
        # Temporary folders: /tmp and .ssh
---
# Source: deepspeed/templates/worker/worker-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-deepspeed-worker
  namespace: "deepspeed-2.2.4.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: deepspeed
    app.kubernetes.io/version: 0.14.2
    helm.sh/chart: deepspeed-2.2.4
    app.kubernetes.io/part-of: deepspeed
    app.kubernetes.io/component: worker
spec:
  replicas: 3
  podManagementPolicy: "Parallel"
  serviceName: my-release-deepspeed-worker-headless
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: deepspeed
      app.kubernetes.io/part-of: deepspeed
      app.kubernetes.io/component: worker
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/ssh-private-key: 5764f01f6835d4e424200077d3c466ee938449c2c9194935241681bbf7e31ab0
        checksum/ssh-server-conf: e70eb926201aef5a71fedcfff4646fb7a356d229c5c6888f387312586a33f17b
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: deepspeed
        app.kubernetes.io/version: 0.14.2
        helm.sh/chart: deepspeed-2.2.4
        app.kubernetes.io/part-of: deepspeed
        app.kubernetes.io/component: worker
    spec:
      serviceAccountName: my-release-deepspeed-worker
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: deepspeed
                    app.kubernetes.io/component: worker
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: ssh-server-configure
          image: docker.io/bitnami/deepspeed:0.14.2-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              echo "Obtaining public key and generating authorized_keys file"
              mkdir -p /home/deepspeed/.ssh
              ssh-keygen -y -f /bitnami/ssh/client-private-key/id_rsa > /home/deepspeed/.ssh/authorized_keys
              # Create user environment file so the container env vars are included
              echo "C_INCLUDE_PATH=$C_INCLUDE_PATH" >> /home/deepspeed/.ssh/environment
              echo "CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH" >> /home/deepspeed/.ssh/environment
              echo "PATH=$PATH" >> /home/deepspeed/.ssh/environment
              echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> /home/deepspeed/.ssh/environment
              echo "CFLAGS=$CFLAGS" >> /home/deepspeed/.ssh/environment
              echo "CPPFLAGS=$CPPFLAGS" >> /home/deepspeed/.ssh/environment
              echo "LDFLAGS=$LDFLAGS" >> /home/deepspeed/.ssh/environment
              chmod 700 /home/deepspeed/.ssh
              chmod 600 /home/deepspeed/.ssh/authorized_keys
              ssh-keygen -A -f /bitnami/ssh/server-private-key/
        
              replace_in_file() {
                  local filename="${1:?filename is required}"
                  local match_regex="${2:?match regex is required}"
                  local substitute_regex="${3:?substitute regex is required}"
                  local posix_regex=${4:-true}
        
                  local result
        
                  # We should avoid using 'sed in-place' substitutions
                  # 1) They are not compatible with files mounted from ConfigMap(s)
                  # 2) We found incompatibility issues with Debian10 and "in-place" substitutions
                  local -r del=$'\001' # Use a non-printable character as a 'sed' delimiter to avoid issues
                  if [[ $posix_regex = true ]]; then
                      result="$(sed -E "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
                  else
                      result="$(sed "s${del}${match_regex}${del}${substitute_regex}${del}g" "$filename")"
                  fi
                  echo "$result" > "$filename"
              }
        
              # HACK: Depending on the OS, the ssh version may not have support for
              # /etc/ssh/sshd_config.d. Therefore, we need to copy the sshd_config
              # to a volume and perform modifications to include the configuration
              # from the ConfigMap. The sshd_config file does not allow the
              # Include directive, so we need to append the configuration
              cp /etc/ssh/sshd_config /bitnami/ssh/sshd-config
              if [[ ! -d /etc/ssh/sshd_config.d ]]; then
                # Older version of ssh, merge the contents
                while read -r line; do
                  read -a entry <<< $line
                  key="${entry[0]}"
                  value="${entry[1]}"
                  if grep -q "${entry[0]}" /bitnami/ssh/sshd-config/sshd_config; then
                    echo "Replacing ${entry[*]} in sshd_config file"
                    replace_in_file /bitnami/ssh/sshd-config/sshd_config "^[#]*${entry[0]}.*" "${entry[*]}"
                  else
                    echo "Adding ${entry[*]} in sshd_config file"
                    echo "${entry[*]}" >> /bitnami/ssh/sshd-config/sshd_config
                  fi
                done < /bitnami/ssh/server-configmap/*.conf
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: ssh-client-private-key
              mountPath: /bitnami/ssh/client-private-key
            # ssh-keygen -A forces /etc/ssh in the prefix path
            - name: empty-dir
              mountPath: /bitnami/ssh/server-private-key/etc/ssh
              subPath: app-worker-private-key-dir
            - name: ssh-server-config
              mountPath: /bitnami/ssh/server-configmap
            - name: empty-dir
              mountPath: /bitnami/ssh/sshd-config
              subPath: sshd-conf-dir
            - name: empty-dir
              mountPath: /home
              subPath: home-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      containers:
        - name: deepspeed
          image: docker.io/bitnami/deepspeed:0.14.2-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
          args:
            - -ec
            - |
              #!/bin/bash
              [[ -f "/opt/bitnami/scripts/deepspeed/entrypoint.sh" ]] && source "/opt/bitnami/scripts/deepspeed/entrypoint.sh"
              ## sshd requires the absolute path
              SSHD_PATH="$(command -v sshd)"
              exec "$SSHD_PATH" -D -h "/bitnami/ssh/server-private-key/ssh_host_rsa_key" -e
          ports:
            - name: tcp-ssh
              containerPort: 2222
              protocol: TCP
          env:
            - name: HOME
              value: /home/deepspeed
          envFrom:
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - sshd
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: tcp-ssh
          volumeMounts:
            - name: ssh-server-config
              mountPath: /etc/ssh/sshd_config.d
            - name: empty-dir
              mountPath: /etc/ssh/sshd_config
              subPath: sshd-conf-dir/sshd_config
            # As we are disabling host key verification from the client, we can
            # auto-generate the worker private key
            - name: empty-dir
              mountPath: /bitnami/ssh/server-private-key
              subPath: app-worker-private-key-dir
            # We need to use /home because of the permission
            # limitations of sshd
            - name: empty-dir
              mountPath: /home
              subPath: home-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /run
              subPath: run-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.cache
              subPath: app-cache-dir
            - name: empty-dir
              mountPath: /home/deepspeed/.local
              subPath: app-local-dir
            - name: source
              mountPath: /app
      volumes:
        - name: empty-dir
          emptyDir: {}
        # Depending on the application, the source needs to be in the worker host
        - name: source
          emptyDir: {}
        # We need the client private key for generating the public key and updating the authorized_keys file
        - name: ssh-client-private-key
          secret:
            secretName: my-release-deepspeed-ssh-key
        # SSH Server configuration
        - name: ssh-server-config
          configMap:
            name: my-release-deepspeed-ssh-server
        - name: data
          emptyDir: {}
