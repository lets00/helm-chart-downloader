---
# Source: azure-scheduledevents-manager/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: my-release-azure-scheduled
  namespace: azure-scheduledevents-manager-1.0.13.tgz
  labels:     
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
spec:
  podSelector:
    matchLabels:
      
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: azure-scheduledevents-manager
  policyTypes: 
    - Ingress
    - Egress
  ingress: 
    []
  egress: 
    - ports:
      - port: 53
        protocol: TCP
    - ports:
      - port: 53
        protocol: UDP
    - ports:
      - port: 443
        protocol: TCP
    - ports:
      - port: 2579
        protocol: TCP
      to:
      - ipBlock:
          cidr: 127.0.0.1/32
    - ports:
      - port: 80
        protocol: TCP
      to:
      - ipBlock:
          cidr: 169.254.169.254/32
---
# Source: azure-scheduledevents-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "azure-scheduledevents-manager"
  namespace: azure-scheduledevents-manager-1.0.13.tgz
  labels:
    
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
---
# Source: azure-scheduledevents-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-azure-scheduled
  labels:     
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
rules:
# Allow kured to read spec.unschedulable
# Allow kubectl to drain/uncordon
#
# NB: These permissions are tightly coupled to the bundled version of kubectl; the ones below
# match https://github.com/kubernetes/kubernetes/blob/v1.12.1/pkg/kubectl/cmd/drain.go
#
- apiGroups: [""]
  resources: ["nodes"]
  verbs:     ["watch", "list", "get", "patch", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs:     ["watch", "list", "delete", "get"]
# Allow to get a list of PODs
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets"]
  verbs:     ["get"]
- apiGroups: [""]
  resources: ["pods/eviction"]
  verbs:     ["create"]
---
# Source: azure-scheduledevents-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-azure-scheduled
  labels:     
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-azure-scheduled
subjects:
- kind: ServiceAccount
  name: "azure-scheduledevents-manager"
  namespace: "azure-scheduledevents-manager-1.0.13.tgz"
---
# Source: azure-scheduledevents-manager/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-release-azure-scheduled
  namespace: azure-scheduledevents-manager-1.0.13.tgz
  labels:
    
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http-metrics
  selector:
    
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
---
# Source: azure-scheduledevents-manager/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-release-azure-scheduled
  namespace: azure-scheduledevents-manager-1.0.13.tgz
  labels:     
    helm.sh/chart: azure-scheduledevents-manager-1.0.13
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: azure-scheduledevents-manager
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: azure-scheduledevents-manager
    app.kubernetes.io/version: "23.6.0"
spec:
  selector:
    matchLabels:
      
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: azure-scheduledevents-manager
  updateStrategy: 
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

  template:
    metadata:
      labels:
        
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/name: azure-scheduledevents-manager
      annotations:
        checksum/secret: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      serviceAccountName: "azure-scheduledevents-manager"
      priorityClassName: "system-node-critical"

      securityContext: 
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups:
        - 1000

      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      containers:
        - name: azure-scheduledevents-manager
          image: "docker.io/webdevops/azure-scheduledevents-manager:23.6.0-kubernetes"
          imagePullPolicy: "IfNotPresent"
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          env:
            - name: SCRAPE_TIME
              value: "30s"
            - name: AZURE_APPROVE_SCHEDULEDEVENT
              value: "true"
            - name: DRAIN_ENABLE
              value: "true"
            - name: DRAIN_MODE
              value: "kubernetes"
            - name: DRAIN_NOT_BEFORE
              value: "12m"
            - name: KUBE_DRAIN_ARGS
              value: "--force --grace-period=600 --timeout=0s --delete-emptydir-data=true --ignore-daemonsets=true"
            - name: KUBE_NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AZURE_ERROR_THRESHOLD
              value: "10"
          ports:
            - containerPort: 8080
              name: http-metrics
              protocol: TCP
          resources: 
            limits:
              cpu: 250m
              memory: 150Mi
            requests:
              cpu: 25m
              memory: 150Mi
          startupProbe: 
            failureThreshold: 5
            initialDelaySeconds: 15
            periodSeconds: 10
            tcpSocket:
              port: http-metrics
          livenessProbe: 
            failureThreshold: 5
            initialDelaySeconds: 15
            periodSeconds: 30
            tcpSocket:
              port: http-metrics
          readinessProbe: 
            failureThreshold: 5
            initialDelaySeconds: 15
            periodSeconds: 30
            tcpSocket:
              port: http-metrics
      nodeSelector: 
        kubernetes.io/os: linux
      tolerations: 
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
