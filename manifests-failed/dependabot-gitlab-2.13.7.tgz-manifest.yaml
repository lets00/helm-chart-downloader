---
# Source: dependabot-gitlab/charts/mongodb/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 27017
---
# Source: dependabot-gitlab/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-redis
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: dependabot-gitlab/charts/mongodb/templates/standalone/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
---
# Source: dependabot-gitlab/charts/redis/templates/master/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-redis-master
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
    app.kubernetes.io/component: master
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
---
# Source: dependabot-gitlab/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
secrets:
  - name: my-release-mongodb
automountServiceAccountToken: false
---
# Source: dependabot-gitlab/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-master
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
---
# Source: dependabot-gitlab/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-dependabot-gitlab
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
---
# Source: dependabot-gitlab/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mongodb
  namespace: dependabot-gitlab-2.13.7.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
type: Opaque
data:
  mongodb-root-password: "ZXgyTFI5d21PQg=="
  mongodb-passwords: "bXlKVGNad3N3bA=="
---
# Source: dependabot-gitlab/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
type: Opaque
data:
  redis-password: "RHVNdjU4UEQ3Qg=="
---
# Source: dependabot-gitlab/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-dependabot-gitlab
data:
  SETTINGS__GITLAB_ACCESS_TOKEN: "dGVzdA=="
  SECRET_KEY_BASE: "a2V5"
---
# Source: dependabot-gitlab/charts/mongodb/templates/common-scripts-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mongodb-common-scripts
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
data:
  startup-probe.sh: |
    #!/bin/bash
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval 'if (!(db.hello().isWritablePrimary || db.hello().secondary)) { throw new Error("Not ready") }'
  readiness-probe.sh: |
    #!/bin/bash
    # Run the proper check depending on the version
    [[ $(mongod -version | grep "db version") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
    . /opt/bitnami/scripts/libversion.sh
    VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
    VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
    VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
    readiness_test='db.isMaster().ismaster || db.isMaster().secondary'
    if [[ ( "$VERSION_MAJOR" -ge 5 ) || ( "$VERSION_MAJOR" -ge 4 && "$VERSION_MINOR" -ge 4 && "$VERSION_PATCH" -ge 2 ) ]]; then
        readiness_test='db.hello().isWritablePrimary || db.hello().secondary'
    fi
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "if (!(${readiness_test})) { throw new Error(\"Not ready\") }"
  ping-mongodb.sh: |
    #!/bin/bash
    exec mongosh  $TLS_OPTIONS --port $MONGODB_PORT_NUMBER --eval "db.adminCommand('ping')"
---
# Source: dependabot-gitlab/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: dependabot-gitlab/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: dependabot-gitlab/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: dependabot-gitlab/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dependabot-gitlab
data:
  RAILS_ENV: production
  RAILS_SERVE_STATIC_FILES: "true"
  PORT: "3000"
  REDIS_TIMEOUT: "1"
  SETTINGS__DEPLOY_MODE: "k8s"
  SETTINGS__GITLAB_URL: "https://gitlab.com"
  SETTINGS__UPDATE_RETRY: "2"
  SETTINGS__EXPIRE_RUN_DATA: "2629746"
  SETTINGS__LOG_LEVEL: info
  SETTINGS__LOG_COLOR: "false"
  SETTINGS__CREATE_PROJECT_HOOK: "true"
  SETTINGS__PROJECT_REGISTRATION: "manual"
  REDIS_URL: "redis://my-release-redis-master.dependabot-gitlab-2.13.7.tgz.svc.cluster.local"
  MONGODB_DATABASE: dependabot-gitlab
  MONGODB_USER: dependabot-gitlab
  MONGODB_URL: "my-release-mongodb.dependabot-gitlab-2.13.7.tgz.svc.cluster.local:27017"
---
# Source: dependabot-gitlab/templates/updater.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-dependabot-gitlab-updater-configmap
data:
  updater-pod.yaml: |-
    metadata:
      name: my-release-dependabot-gitlab-updater-%{name_sha}
      namespace: "dependabot-gitlab-2.13.7.tgz"
      labels:
        app.kubernetes.io/name: dependabot-gitlab
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: updater
    spec:
      restartPolicy: Never
      serviceAccountName: my-release-dependabot-gitlab
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
        - name: dependabot-gitlab-updater
          image: "docker.io/andrcuns/dependabot-gitlab-%<package_ecosystem>s:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "%<rake_task>s"
          env:
            - name: SETTINGS__METRICS
              value: "false"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
---
# Source: dependabot-gitlab/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
  annotations:
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: dependabot-gitlab/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "Role"
metadata:
  name: my-release-dependabot-gitlab
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "create", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
---
# Source: dependabot-gitlab/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "RoleBinding"
metadata:
  name: my-release-dependabot-gitlab
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-dependabot-gitlab
subjects:
  - kind: ServiceAccount
    name: my-release-dependabot-gitlab
    namespace: "dependabot-gitlab-2.13.7.tgz"
---
# Source: dependabot-gitlab/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: "mongodb"
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/component: mongodb
---
# Source: dependabot-gitlab/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: dependabot-gitlab/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: dependabot-gitlab/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-dependabot-gitlab
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: dependabot-gitlab
    app.kubernetes.io/instance: my-release
---
# Source: dependabot-gitlab/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/version: 7.0.9
    helm.sh/chart: mongodb-15.6.0
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/version: 7.0.9
        helm.sh/chart: mongodb-15.6.0
        app.kubernetes.io/component: mongodb
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/component: mongodb
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      
      enableServiceLinks: true
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:7.0.9-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_EXTRA_USERNAMES
              value: "dependabot-gitlab"
            - name: MONGODB_EXTRA_DATABASES
              value: "dependabot-gitlab"
            - name: MONGODB_EXTRA_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
            - name: MONGODB_ROOT_USER
              value: "root"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_PORT_NUMBER
              value: "27017"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bitnami/scripts/ping-mongodb.sh
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bitnami/scripts/readiness-probe.sh
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mongodb/logs
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /.mongodb
              subPath: mongosh-home
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
            - name: common-scripts
              mountPath: /bitnami/scripts
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: common-scripts
          configMap:
            name: my-release-mongodb-common-scripts
            defaultMode: 0550
        - name: datadir
          persistentVolumeClaim:
            claimName: my-release-mongodb
---
# Source: dependabot-gitlab/templates/deployment-web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dependabot-gitlab-web
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
spec:
  strategy: 
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dependabot-gitlab
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dependabot-gitlab
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: web
      annotations:
        checksum/config: e6fb4d9eed849d3be8aa2c33660f6cdcf98fa8ace3f04054a1439328e79a3b61
        checksum/secrets: 5d133c8e972637279fb8a8105b3551aa8acddb2eb2031d688dfe8fa4feeddeb1
        checksum/redis-password: 7c159cafba780ac4ee37b3ac9e4018258b1e951689a2c2df97efc0c47e406a0c
        checksum/mongodb-password: 4f53cda18c2baa0c0354bb5f9a3ecbe5ed12ab4d8e11ba873c2f11161202b945
    spec:
      serviceAccountName: my-release-dependabot-gitlab
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-migrations
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:check_migrations"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
        - name: wait-redis
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:check_redis"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
      containers:
        - name: dependabot-gitlab-web
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rails"
            - "server"
          env:
            - name: RAILS_MAX_THREADS
              value: "5"
            - name: RAILS_MIN_THREADS
              value: "5"
            - name: SETTINGS__METRICS
              value: "false"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /healthcheck
              port: http
            failureThreshold: 12
            periodSeconds: 10
            timeoutSeconds: 3
            initialDelaySeconds: 10
---
# Source: dependabot-gitlab/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-dependabot-gitlab-worker
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
spec:
  strategy: 
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dependabot-gitlab
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dependabot-gitlab
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: worker
      annotations:
        checksum/config: e6fb4d9eed849d3be8aa2c33660f6cdcf98fa8ace3f04054a1439328e79a3b61
        checksum/secrets: 5d133c8e972637279fb8a8105b3551aa8acddb2eb2031d688dfe8fa4feeddeb1
        checksum/redis-password: e99e5c5db89ea1a3b3f5e307b9f9726527475266904488efeb06e4b23d7a2fb5
        checksum/mongodb-password: 4f53cda18c2baa0c0354bb5f9a3ecbe5ed12ab4d8e11ba873c2f11161202b945
    spec:
      serviceAccountName: my-release-dependabot-gitlab
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-migrations
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:check_migrations"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
        - name: wait-redis
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:check_redis"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
      containers:
        - name: dependabot-gitlab-worker
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "sidekiq"
          env:
            - name: SETTINGS__UPDATER_TEMPLATE_PATH
              value: /home/dependabot/app/kube/templates/updater-pod.yaml
            - name: SETTINGS__DELETE_UPDATER_CONTAINER
              value: "true"
            - name: SETTINGS__UPDATER_CONTAINER_STARTUP_TIMEOUT
              value: "180"
            - name: SETTINGS__METRICS
              value: "false"
            - name: SIDEKIQ_ALIVE_PORT
              value: "7433"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
            - name: RAILS_MAX_THREADS
              value: "10"
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 7433
            failureThreshold: 2
            periodSeconds: 120
            timeoutSeconds: 3
          startupProbe:
            httpGet:
              path: /healthcheck
              port: 7433
            failureThreshold: 12
            periodSeconds: 5
            timeoutSeconds: 3
            initialDelaySeconds: 10
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: ["kube/sidekiq-quiet.sh"]
          volumeMounts:
            - name: updater-template
              mountPath: /home/dependabot/app/kube/templates
              readOnly: true
      terminationGracePeriodSeconds: 300 # Large dependency files or docker images can take long time to process
      volumes:
        - name: updater-template
          configMap:
            name: my-release-dependabot-gitlab-updater-configmap
            items:
              - key: updater-pod.yaml
                path: updater-pod.yaml
---
# Source: dependabot-gitlab/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "dependabot-gitlab-2.13.7.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.5
    helm.sh/chart: redis-19.5.0
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.5
        helm.sh/chart: redis-19.5.0
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: d73f77e7cff64e5af058db33b5915787544f359a5cccf0620fd94895395a3ac1
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.5-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: dependabot-gitlab/templates/migration-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  # if mongodb deployment or service account creation is enabled, set unique job name since it is not executed as helm hook
  name: my-release-dependabot-gitlab-migration-1
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
    app.kubernetes.io/component: migration-job
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 4
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
        checksum/config: e6fb4d9eed849d3be8aa2c33660f6cdcf98fa8ace3f04054a1439328e79a3b61
        checksum/secrets: 5d133c8e972637279fb8a8105b3551aa8acddb2eb2031d688dfe8fa4feeddeb1
        checksum/redis-password: e547cc7cd31ac2d3f1127f9e621d509850925be2d2d55be1ab20da555cad7962
        checksum/mongodb-password: 4f53cda18c2baa0c0354bb5f9a3ecbe5ed12ab4d8e11ba873c2f11161202b945
    spec:
      serviceAccountName: my-release-dependabot-gitlab
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-db
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:check_db"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
      containers:
        - name: dependabot-gitlab-migration-job
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "db:migrate"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
      restartPolicy: Never
---
# Source: dependabot-gitlab/templates/background-tasks-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-dependabot-gitlab-background-tasks
  labels:
    app.kubernetes.io/name: dependabot-gitlab
    helm.sh/chart: dependabot-gitlab-2.13.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "3.16.0-alpha.1"
  annotations:
    helm.sh/hook: post-install,post-upgrade
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 4
  activeDeadlineSeconds: 600
  template:
    spec:
      serviceAccountName: my-release-dependabot-gitlab
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
        - name: dependabot-gitlab-background-tasks-job
          image: "docker.io/andrcuns/dependabot-gitlab:3.16.0-alpha.1"
          imagePullPolicy: IfNotPresent
          args:
            - "rake"
            - "background_tasks:run_post_deploy_tasks"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mongodb
                  key: mongodb-passwords
          envFrom:
            - configMapRef:
                name: my-release-dependabot-gitlab
            - secretRef:
                name: my-release-dependabot-gitlab
      restartPolicy: Never
