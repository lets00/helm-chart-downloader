---
# Source: mail/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mail
  labels:
    helm.sh/chart: mail-v4.2.1
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.2.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
---
# Source: mail/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mail
  labels:
    helm.sh/chart: mail-v4.2.1
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.2.1"
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: mail/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "my-release-mail"
  labels:
    helm.sh/chart: mail-v4.2.1
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.2.1"
    app.kubernetes.io/managed-by: Helm
    type: standard
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 587
      targetPort: smtp
      protocol: TCP
      name: smtp
      
  selector:
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
---
# Source: mail/templates/service.yaml
# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#limitations
# StatefulSets now require a headless service
apiVersion: v1
kind: Service
metadata:
  name: "my-release-mail-headless"
  namespace: "mail-v4.2.1.tgz"
  labels:
    helm.sh/chart: mail-v4.2.1
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.2.1"
    app.kubernetes.io/managed-by: Helm
    type: headless
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 587
      targetPort: smtp
      protocol: TCP
      name: smtp
  selector:
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
---
# Source: mail/templates/statefulset.yaml
apiVersion: apps/v1
kind: "StatefulSet"
metadata:
  name: "my-release-mail"
  namespace: "mail-v4.2.1.tgz"
  labels:
    helm.sh/chart: mail-v4.2.1
    app.kubernetes.io/name: mail
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v4.2.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # Auto-reload postfix if somebody changes config map directly in Kuberentes.
    # Uses: https://github.com/stakater/Reloader
    configmap.reloader.stakater.com/reload: "my-release-mail"
spec:
  serviceName: my-release-mail
  
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mail
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mail
        app.kubernetes.io/instance: my-release
      annotations:
        # https://keel.sh/docs/#helm-same-tag-force-updates
        # Current consensus on a best way to "force" update Helm releases is by modifying your pod spec template by adding:
        date/deploy-date: "2024-06-20 11:57:52.837100865 -0300 -03 m=+0.019001104"
        # Reload for Statefulset when configmap changes on deployment
        checksum/configmap: 8b60fbc913e005c8b7ce7b437dbb3537bd63c7c329171b2eabdf7f1fefbc3108
    spec:
      serviceAccountName: "my-release-mail"
      
      
      
      
      
      
      

      # Allow up to 2 minutes for Postfix to flush / empty the queue  before shutting down the container
      terminationGracePeriodSeconds: 120
      containers:
        - name: mail
          image: "boky/postfix:v4.2.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            {}
          ports:
            - name: smtp
              containerPort: 587
              protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /scripts/healthcheck.sh
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 60
            timeoutSeconds: 8
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - ps axf | fgrep -v grep | egrep -q '\{supervisord\}|/usr/bin/supervisord' && ps
                axf | fgrep -v grep | egrep -q '(/usr/lib/postfix/sbin/|/usr/libexec/postfix/)master'
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - ps axf | fgrep -v grep | egrep -q '\{supervisord\}|/usr/bin/supervisord' && ps
                axf | fgrep -v grep | fgrep -q "postfix-script" && ps axf | fgrep -v grep | fgrep
                -q 'opendkim'
            failureThreshold: 12
            initialDelaySeconds: 5
            periodSeconds: 5
          lifecycle:
            # If a container has a preStop hook configured, that runs before the container enters the Terminated state.
            preStop:
              exec:
                command:
                  - bash
                  - -c
                  - touch /tmp/container_is_terminating && while ! [[ "`mailq`" == *empty* ]]; do echo "Flushing queue..." && postfix flush; sleep 1; done; killall5 -15 supervisord
          envFrom:
            - configMapRef:
                name: "my-release-mail"
          
          volumeMounts:
            - mountPath: /var/spool/postfix
              name: "my-release-mail"
              subPath: spool
          resources: 
            {}
      volumes:
        - name: tmp
          emptyDir: {}
        # Socket directories
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: my-release-mail
        namespace: mail-v4.2.1.tgz
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "1Gi"
