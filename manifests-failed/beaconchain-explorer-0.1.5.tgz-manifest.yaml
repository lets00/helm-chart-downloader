---
# Source: beaconchain-explorer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-beaconchain-explorer
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: beaconchain-explorer-0.1.5.tgz
---
# Source: beaconchain-explorer/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "beaconchain-explorer-0.1.5.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cVVSVW9ZMVRnRw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: beaconchain-explorer/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-beaconchain-explorer-env
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
---
# Source: beaconchain-explorer/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-beaconchain-explorer
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  config.yaml: |
    chain:
      genesisTimestamp: 1573489682
      minGenesisActiveValidatorCount: 16384
      secondsPerSlot: 12
      slotsPerEpoch: 32
    database:
      host: beaconchain-explorer-postgresql
      name: explorer
      password: postgres
      port: "5432"
      user: postgres
    frontend:
      csrfAuthKey: 0123456789abcdef000000000000000000000000000000000000000000000000
      database:
        host: beaconchain-explorer-postgresql
        name: explorer
        password: postgres
        port: "5432"
        user: postgres
      enabled: true
      imprint: templates/imprint.example.html}**
      jwtIssuer: beaconchain.localhost
      jwtSigningSecret: 0123456789abcdef000000000000000000000000000000000000000000000000
      jwtValidityInMinutes: 30
      phase0path: ./phase0.yml
      server:
        host: 0.0.0.0
        port: "3333"
      siteName: Ethereum 2.0 Beacon Chain Block Chain Explorer
      siteSubtitle: Watching all the blocks
    indexer:
      enabled: true
      eth1DepositContractAddress: 0x5cA1e00004366Ac85f492887AAab12d0e6418876
      eth1DepositContractFirstBlock: 2523557
      eth1Endpoint: https://holesky.infura.io/v3/<api-token>
      fullIndexOnStartup: false
      indexMissingEpochsOnStartup: false
      node:
        host: prysm-beacon
        pageSize: 500
        port: "4000"
        type: prysm
---
# Source: beaconchain-explorer/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "beaconchain-explorer-0.1.5.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: beaconchain-explorer/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "beaconchain-explorer-0.1.5.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: beaconchain-explorer/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-beaconchain-explorer-headless
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - port: 3333
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
---
# Source: beaconchain-explorer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-beaconchain-explorer
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3333
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
---
# Source: beaconchain-explorer/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "beaconchain-explorer-0.1.5.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.9.13
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.9.13
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "beaconchain-explorer-0.1.5.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r58
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: beaconchain-explorer/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-beaconchain-explorer
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: beaconchain-explorer
      app.kubernetes.io/instance: my-release
  serviceName: my-release-beaconchain-explorer-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: beaconchain-explorer
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/config: a385fcd637da48947babc0db468f64be4595e259e24df34927a6c02e8525d6bd
        checksum/secrets: 42677a244d3fdd7652faf11fb3d1c29ea978fb973495424bdd7e487a72eae808
    spec:
      serviceAccountName: my-release-beaconchain-explorer
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
      containers:
        - name: beaconchain-explorer
          image: "gobitfly/eth2-beaconchain-explorer:latest"
          imagePullPolicy: IfNotPresent
          command: ["./explorer", "--config", "/config.yaml"]
          securityContext:
            {}
          volumeMounts:
            - name: config
              mountPath: "/config.yaml"
              subPath: config.yaml
              readOnly: true
          ports:
            - name: http
              containerPort: 3333
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 120
            tcpSocket:
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: http
          resources:
            {}
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      topologySpreadConstraints:
        []
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: my-release-beaconchain-explorer
---
# Source: beaconchain-explorer/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-beaconchain-explorer-test-connection"
  labels:
    helm.sh/chart: beaconchain-explorer-0.1.5
    app.kubernetes.io/name: beaconchain-explorer
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: curl
      image: curlimages/curl
      command: ['curl']
      args:
       - --location
       - --request
       - GET
       - 'my-release-beaconchain-explorer:3333/'
  restartPolicy: Never
