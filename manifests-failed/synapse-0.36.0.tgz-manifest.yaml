---
# Source: synapse/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: synapse/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-synapse
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: synapse/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "cmljaGVzLWphcnJpbmctYWN0cw=="
---
# Source: synapse/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-synapse
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  worker: "cmVkaXM6CiAgZW5hYmxlZDogdHJ1ZQogIGhvc3Q6IHN5bmFwc2UtcmVkaXMtbWFzdGVyLm1hdHJpeC5zdmMuY2x1c3Rlci5sb2NhbAogIHBhc3N3b3JkOiByaWNoZXMtamFycmluZy1hY3RzCndvcmtlcl9hcHA6IHN5bmFwc2UuYXBwLmdlbmVyaWNfd29ya2VyCndvcmtlcl9saXN0ZW5lcnM6Ci0gcG9ydDogODA4MwogIHJlc291cmNlczoKICAtIG5hbWVzOgogICAgLSBmZWRlcmF0aW9uCiAgdHlwZTogaHR0cAp3b3JrZXJfbG9nX2NvbmZpZzogL2NvbmZpZy9sb2cuY29uZmln"
  federation-sender: "cmVkaXM6CiAgZW5hYmxlZDogdHJ1ZQogIGhvc3Q6IHN5bmFwc2UtcmVkaXMtbWFzdGVyLm1hdHJpeC5zdmMuY2x1c3Rlci5sb2NhbAogIHBhc3N3b3JkOiByaWNoZXMtamFycmluZy1hY3RzCndvcmtlcl9hcHA6IHN5bmFwc2UuYXBwLmZlZGVyYXRpb25fc2VuZGVyCndvcmtlcl9saXN0ZW5lcnM6Ci0gcG9ydDogODA4MwogIHJlc291cmNlczoKICAtIG5hbWVzOgogICAgLSBmZWRlcmF0aW9uCiAgdHlwZTogaHR0cAp3b3JrZXJfbG9nX2NvbmZpZzogL2NvbmZpZy9sb2cuY29uZmlnCndvcmtlcl9uYW1lOiBmZWRlcmF0aW9uX3NlbmRlcg=="
  homeserver.yaml: "YWNjb3VudF90aHJlZXBpZF9kZWxlZ2F0ZXM6IHt9CmFjY291bnRfdmFsaWRpdHk6IG51bGwKYWNtZToKICBhY2NvdW50X2tleV9maWxlOiAvZGF0YS9hY21lX2FjY291bnQua2V5CiAgYmluZF9hZGRyZXNzZXM6CiAgLSAnOjonCiAgLSAwLjAuMC4wCiAgZG9tYWluOiBtYXRyaXguZXhhbXBsZS5jb20KICBlbmFibGVkOiBmYWxzZQogIHBvcnQ6IDgwCiAgcmVwcm92aXNpb25fdGhyZXNob2xkOiAzMApkYXRhYmFzZToKICBhcmdzOgogICAgZGF0YWJhc2U6IC9kYXRhL2hvbWVzZXJ2ZXIuZGIKICBuYW1lOiBzcWxpdGUzCmVtYWlsOiBudWxsCmVuYWJsZV9tZXRyaWNzOiB0cnVlCmZlZGVyYXRpb25faXBfcmFuZ2VfYmxhY2tsaXN0OgotIDEyNy4wLjAuMC84Ci0gMTAuMC4wLjAvOAotIDE3Mi4xNi4wLjAvMTIKLSAxOTIuMTY4LjAuMC8xNgotIDEwMC42NC4wLjAvMTAKLSAxNjkuMjU0LjAuMC8xNgotIDo6MS8xMjgKLSBmZTgwOjovNjQKLSBmYzAwOjovNwpmZWRlcmF0aW9uX3NlbmRlcl9pbnN0YW5jZXM6Ci0gZmVkZXJhdGlvbl9zZW5kZXIKZm9ybV9zZWNyZXQ6ICIiCmluc3RhbmNlX21hcDoKICBmZWRlcmF0aW9uX3NlbmRlcjoKICAgIGhvc3Q6ICdteS1yZWxlYXNlLXN5bmFwc2UtZmVkZXJhdGlvbi1zZW5kZXInCiAgICBwb3J0OiA4MDgzCiAgbWFpbjoKICAgIGhvc3Q6ICdteS1yZWxlYXNlLXN5bmFwc2UnCiAgICBwb3J0OiA4MDMwCiAgbWFzdGVyOgogICAgaG9zdDogJ215LXJlbGVhc2Utc3luYXBzZScKICAgIHBvcnQ6IDgwMzAKICB3b3JrZXI6CiAgICBob3N0OiAnbXktcmVsZWFzZS1zeW5hcHNlLXdvcmtlcicKICAgIHBvcnQ6IDgwODMKbGlzdGVuZXJzOgotIGJpbmRfYWRkcmVzc2VzOgogIC0gMC4wLjAuMAogIHBvcnQ6IDkwMDAKICB0eXBlOiBtZXRyaWNzCi0gYmluZF9hZGRyZXNzZXM6CiAgLSAwLjAuMC4wCiAgcG9ydDogOTA5MwogIHJlc291cmNlczoKICAtIG5hbWVzOgogICAgLSByZXBsaWNhdGlvbgogIHR5cGU6IGh0dHAKLSBwb3J0OiA4MDA4CiAgcmVzb3VyY2VzOgogIC0gY29tcHJlc3M6IHRydWUKICAgIG5hbWVzOgogICAgLSBjbGllbnQKICAtIGNvbXByZXNzOiBmYWxzZQogICAgbmFtZXM6CiAgICAtIGZlZGVyYXRpb24KICB0bHM6IGZhbHNlCiAgdHlwZTogaHR0cAogIHhfZm9yd2FyZGVkOiB0cnVlCmxvZ19jb25maWc6IC9jb25maWcvbG9nLmNvbmZpZwptYWNhcm9vbl9zZWNyZXRfa2V5OiAiIgptZWRpYV9zdG9yZV9wYXRoOiAvZGF0YS9tZWRpYV9zdG9yZQptZXRyaWNzX2ZsYWdzOiBudWxsCm9sZF9zaWduaW5nX2tleXM6IG51bGwKb3BlbnRyYWNpbmc6IG51bGwKb3V0Ym91bmRfZmVkZXJhdGlvbl9yZXN0cmljdGVkX3RvOgotIGZlZGVyYXRpb25fc2VuZGVyCnBhc3N3b3JkX2NvbmZpZzogbnVsbApwaWRfZmlsZTogL2RhdGEvaG9tZXNlcnZlci5waWQKcmVkaXM6CiAgZW5hYmxlZDogdHJ1ZQogIGhvc3Q6ICdteS1yZWxlYXNlLXN5bmFwc2UtcmVkaXMtbWFzdGVyJwogIHBhc3N3b3JkOiByaWNoZXMtamFycmluZy1hY3RzCnJlZ2lzdHJhdGlvbl9zaGFyZWRfc2VjcmV0OiAiIgpyZXBvcnRfc3RhdHM6IHRydWUKcmV0ZW50aW9uOiBudWxsCnNhbWwyX2NvbmZpZzoKICB1c2VyX21hcHBpbmdfcHJvdmlkZXI6CiAgICBjb25maWc6IG51bGwKc2VuZF9mZWRlcmF0aW9uOiBmYWxzZQpzZXJ2ZXJfbmFtZTogc2VydmVyX25hbWUKc2lnbmluZ19rZXlfcGF0aDogL2RhdGEvc2VydmVyX25hbWUuc2lnbmluZy5rZXkKc3NvOiBudWxsCnRydXN0ZWRfa2V5X3NlcnZlcnM6Ci0gc2VydmVyX25hbWU6IG1hdHJpeC5vcmcKd29ya2VyX3JlcGxpY2F0aW9uX3NlY3JldDogIiI="
  log.config: "ZGlzYWJsZV9leGlzdGluZ19sb2dnZXJzOiBmYWxzZQpmaWx0ZXJzOgogIGNvbnRleHQ6CiAgICAoKTogc3luYXBzZS5sb2dnaW5nLmNvbnRleHQuTG9nZ2luZ0NvbnRleHRGaWx0ZXIKICAgIHJlcXVlc3Q6ICIiCmZvcm1hdHRlcnM6CiAgcHJlY2lzZToKICAgIGZvcm1hdDogJyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxpbmVubylkIC0gJShsZXZlbG5hbWUpcyAtICUocmVxdWVzdClzIC0gJShtZXNzYWdlKXMnCmhhbmRsZXJzOgogIGNvbnNvbGU6CiAgICBjbGFzczogbG9nZ2luZy5TdHJlYW1IYW5kbGVyCiAgICBmaWx0ZXJzOgogICAgLSBjb250ZXh0CiAgICBmb3JtYXR0ZXI6IHByZWNpc2UKICBmaWxlOgogICAgYmFja3VwQ291bnQ6IDEwCiAgICBjbGFzczogbG9nZ2luZy5oYW5kbGVycy5Sb3RhdGluZ0ZpbGVIYW5kbGVyCiAgICBlbmNvZGluZzogdXRmOAogICAgZmlsZW5hbWU6IC9kYXRhL2hvbWVzZXJ2ZXIubG9nCiAgICBmaWx0ZXJzOgogICAgLSBjb250ZXh0CiAgICBmb3JtYXR0ZXI6IHByZWNpc2UKICAgIG1heEJ5dGVzOiAxMDQ4NTc2MDAKbG9nZ2VyczoKICBzeW5hcHNlLnN0b3JhZ2UuU1FMOgogICAgbGV2ZWw6IElORk8Kcm9vdDoKICBoYW5kbGVyczoKICAtIGZpbGUKICAtIGNvbnNvbGUKICBsZXZlbDogSU5GTwp2ZXJzaW9uOiAx"
---
# Source: synapse/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: synapse/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: synapse/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
  start-replica.sh: |
    #!/bin/bash

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: synapse/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: synapse/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: synapse/charts/redis/templates/replicas/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-replicas
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: replica
---
# Source: synapse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-synapse
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  externalTrafficPolicy: 
  ports:
    - port: 8443
      targetPort: http
      protocol: TCP
      name: http
    - port: 9092
      targetPort: worker-tcp
      protocol: TCP
      name: worker-tcp
    - port: 9093
      targetPort: worker-web
      protocol: TCP
      name: worker-web
    - port: 9000
      targetPort: metrics
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
---
# Source: synapse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-synapse-federation-sender
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  externalTrafficPolicy: 
  ports:
    - port: 8083
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: synapse-federation-sender
---
# Source: synapse/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-synapse-worker
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  externalTrafficPolicy: 
  ports:
    - port: 8083
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: synapse-worker
---
# Source: synapse/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-synapse
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: synapse
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: synapse
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/secret: "5018ce3eae796b71c2dbcb0a67a31762bde30d2011c8b058bf7f67d0678769bb"
    spec:
      serviceAccountName: my-release-synapse
      securityContext:
        {}
      initContainers:
        - name: generate-config
          securityContext:
            {}
          image: "ghcr.io/element-hq/synapse:v1.108.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              cp /config/* /data/
              
              apt-get update && apt-get install -y --no-install-recommends git
              pip install https://github.com/devture/matrix-synapse-shared-secret-auth/archive/refs/tags/2.0.2.zip
              pip install https://github.com/t2bot/synapse-simple-antispam/archive/refs/heads/master.zip#egg=synapse-simple-antispam
              exec python3 /start.py generate
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
          env:
            - { name: SYNAPSE_CONFIG_DIR, value: "/data" }
            - { name: SYNAPSE_DATA_DIR, value: "/data" }
            - { name: SYNAPSE_CONFIG_PATH, value: "/config/homeserver.yaml" }
            - { name: UID, value: "991" }
            - { name: GID, value: "991" }
            - { name: SYNAPSE_SERVER_NAME, value: "server_name" }
            - { name: SYNAPSE_REPORT_STATS, value: "yes" }
            - { name: SYNAPSE_CACHE_FACTOR, value: "0.5" }
          resources:
            {}
        - name: chdir
          securityContext:
            {}
          image: "ghcr.io/element-hq/synapse:v1.108.0"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "chown 991:991 -R /data"]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
          resources:
            {}
      containers:
        - name: synapse
          securityContext:
            {}
          image: "ghcr.io/element-hq/synapse:v1.108.0"
          imagePullPolicy: IfNotPresent
          #command: ["/bin/sh"]
          #args: ["-c", "sleep 10000"]
          command:
            - sh
            - -c
            - |
              set -ex
              cp /config/* /data/
              
              apt-get update && apt-get install -y --no-install-recommends git
              pip install https://github.com/devture/matrix-synapse-shared-secret-auth/archive/refs/tags/2.0.2.zip
              pip install https://github.com/t2bot/synapse-simple-antispam/archive/refs/heads/master.zip#egg=synapse-simple-antispam
              exec python3 /start.py
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
            - name: worker-tcp
              containerPort: 9092
              protocol: TCP
            - name: worker-web
              containerPort: 9093
              protocol: TCP
            - name: metrics
              containerPort: 9000
              protocol: TCP
          env:
            - { name: SYNAPSE_CONFIG_DIR, value: "/data" }
            - { name: SYNAPSE_DATA_DIR, value: "/data" }
            - { name: SYNAPSE_CONFIG_PATH, value: "/config/homeserver.yaml" }
            - { name: UID, value: "991" }
            - { name: GID, value: "991" }
            - { name: SYNAPSE_SERVER_NAME, value: "server_name" }
            - { name: SYNAPSE_REPORT_STATS, value: "yes" }
            - { name: SYNAPSE_CACHE_FACTOR, value: "0.5" }
          volumeMounts:
            - name: data
              mountPath: /data
            - name: media
              mountPath: /media
            - name: config
              mountPath: /config
          readinessProbe:
            httpGet:
              path: /_matrix/client/versions
              port: http
            initialDelaySeconds: 5
            failureThreshold: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /_matrix/client/versions
              port: http
            initialDelaySeconds: 5
            failureThreshold: 5
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /_matrix/client/versions
              port: http
            initialDelaySeconds: 5
            failureThreshold: 30
            periodSeconds: 10
          resources:
            {}
      volumes:
        - name: data
          emptyDir: {}
        - name: media
          emptyDir: {}
        - name: config
          secret:
            secretName: my-release-synapse
---
# Source: synapse/templates/deployment_federation_sender.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-synapse-federation-sender
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      synapse-component: federation-sender
      app.kubernetes.io/name: synapse-federation-sender
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/secret: 5018ce3eae796b71c2dbcb0a67a31762bde30d2011c8b058bf7f67d0678769bb
      labels:
        synapse-component: federation-sender
        app.kubernetes.io/name: synapse-federation-sender
        app.kubernetes.io/instance: my-release
    spec:
      # Avoid co-locating workers with the main Synapse pod if possible
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - synapse
              topologyKey: kubernetes.io/hostname
      serviceAccountName: my-release-synapse
      securityContext:
        {}
      containers:
        - name: synapse
          securityContext:
            {}
          image: "ghcr.io/element-hq/synapse:v1.108.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              cp /config/* /data/
              
              apt-get update && apt-get install -y --no-install-recommends git
              pip install https://github.com/devture/matrix-synapse-shared-secret-auth/archive/refs/tags/2.0.2.zip
              pip install https://github.com/t2bot/synapse-simple-antispam/archive/refs/heads/master.zip#egg=synapse-simple-antispam
              chown -R "991:991" /data
              python -m "synapse.app.federation_sender" --config-path "/config/homeserver.yaml" --config-path "/config/federation-sender"
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          env:
            - { name: SYNAPSE_CACHE_FACTOR, value: "0.5" }
          volumeMounts:
            - name: config
              mountPath: /config
            - name: data
              mountPath: /data
          resources:
            {}
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          secret:
            secretName: my-release-synapse
---
# Source: synapse/templates/deployment_worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-synapse-worker
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      synapse-component: worker
      app.kubernetes.io/name: synapse-worker
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      annotations:
        checksum/secret: 5018ce3eae796b71c2dbcb0a67a31762bde30d2011c8b058bf7f67d0678769bb
      labels:
        synapse-component: worker
        app.kubernetes.io/name: synapse-worker
        app.kubernetes.io/instance: my-release
    spec:
      # Avoid co-locating workers with the main Synapse pod if possible
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - synapse
              topologyKey: kubernetes.io/hostname
      serviceAccountName: my-release-synapse
      securityContext:
        {}
      containers:
        - name: synapse
          securityContext:
            {}
          image: "ghcr.io/element-hq/synapse:v1.108.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              cp /config/* /data/
              
              apt-get update && apt-get install -y --no-install-recommends git
              pip install https://github.com/devture/matrix-synapse-shared-secret-auth/archive/refs/tags/2.0.2.zip
              pip install https://github.com/t2bot/synapse-simple-antispam/archive/refs/heads/master.zip#egg=synapse-simple-antispam
              chown -R "991:991" /data
              python -m "synapse.app.generic_worker" --config-path "/config/homeserver.yaml" --config-path "/config/worker"
          ports:
            - name: http
              containerPort: 8083
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          env:
            - { name: SYNAPSE_CACHE_FACTOR, value: "0.5" }
          volumeMounts:
            - name: config
              mountPath: /config
            - name: data
              mountPath: /data
          resources:
            {}
      volumes:
        - name: data
          emptyDir: {}
        - name: config
          secret:
            secretName: my-release-synapse
---
# Source: synapse/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 425a6645754e351ee085952f1b6edec48ea553113fb64a23a555ba0246d015dc
        checksum/health: 971d0ae314eceb587d32baaa77f8de8ce68436d97aecc59b2ab8dd984e0d6709
        checksum/scripts: 4a100f716c9288310f9912f8f036b0977c634c789a6f0801eee7e1391bf1a5d8
        checksum/secret: 63d208967885393abb4bd374bef38c6de0f793851aaabe5eb966c85ed704b4f3
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: synapse/charts/redis/templates/replicas/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-replicas
  namespace: "synapse-0.36.0.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.10.1
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: replica
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: replica
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.10.1
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: replica
      annotations:
        checksum/configmap: 425a6645754e351ee085952f1b6edec48ea553113fb64a23a555ba0246d015dc
        checksum/health: 971d0ae314eceb587d32baaa77f8de8ce68436d97aecc59b2ab8dd984e0d6709
        checksum/scripts: 4a100f716c9288310f9912f8f036b0977c634c789a6f0801eee7e1391bf1a5d8
        checksum/secret: 63d208967885393abb4bd374bef38c6de0f793851aaabe5eb966c85ed704b4f3
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: replica
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.11-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-replica.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: replica
            - name: REDIS_MASTER_HOST
              value: my-release-redis-master-0.my-release-redis-headless.synapse-0.36.0.tgz.svc.cluster.local
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: redis
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: replica
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: synapse/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-synapse-test-connection"
  labels:
    helm.sh/chart: synapse-0.36.0
    app.kubernetes.io/name: synapse
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v1.108.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-synapse:8443']
  restartPolicy: Never
