---
# Source: jaeger/charts/cassandra/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9042
        - port: 7199
        - port: 7001
        - port: 7000
---
# Source: jaeger/templates/agent/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-jaeger--agent
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/component: agent
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: agent
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 6832
        - port: 5775
        - port: 14271
        - port: 6831
        - port: 5778
---
# Source: jaeger/templates/collector/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-jaeger-collector
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/component: collector
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: collector
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 14268
        - port: 9411
        - port: 14250
        - port: 14269
        - port: 4317
        - port: 4318
---
# Source: jaeger/templates/migrate-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-jaeger-migrate
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/component: migration
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: migration
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
---
# Source: jaeger/templates/query/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-jaeger-query
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/component: query
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: query
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 16687
        - port:
---
# Source: jaeger/charts/cassandra/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
---
# Source: jaeger/templates/agent/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name:  my-release-jaeger--agent
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: agent
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/part-of: jaeger
      app.kubernetes.io/component: agent
---
# Source: jaeger/templates/collector/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name:  my-release-jaeger-collector
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: collector
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/part-of: jaeger
      app.kubernetes.io/component: collector
---
# Source: jaeger/templates/query/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name:  my-release-jaeger-query
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: query
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/part-of: jaeger
      app.kubernetes.io/component: query
---
# Source: jaeger/charts/cassandra/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
automountServiceAccountToken: false
---
# Source: jaeger/templates/agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  my-release-jaeger--agent
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: agent
automountServiceAccountToken: false
---
# Source: jaeger/templates/collector/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  my-release-jaeger-collector
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: collector
automountServiceAccountToken: false
---
# Source: jaeger/templates/query/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name:  my-release-jaeger-query
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: query
automountServiceAccountToken: false
---
# Source: jaeger/charts/cassandra/templates/cassandra-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
type: Opaque
data:
  cassandra-password: "VUhXWkhxYXlEUg=="
---
# Source: jaeger/charts/cassandra/templates/metrics-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-cassandra-metrics-conf
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
    app.kubernetes.io/part-of: cassandra
    app.kubernetes.io/component: cassandra-exporter
data:
  config.yml: |-
    host: localhost:7199
    ssl: False
    user:
    password:
    listenPort: 8080
    blacklist:
      # To profile the duration of jmx call you can start the program with the following options
      # > java -Dorg.slf4j.simpleLogger.defaultLogLevel=trace -jar cassandra_exporter.jar config.yml --oneshot
      #
      # To get intuition of what is done by cassandra when something is called you can look in cassandra
      # https://github.com/apache/cassandra/tree/trunk/src/java/org/apache/cassandra/metrics
      # Please avoid to scrape frequently those calls that are iterating over all sstables
    
      # Unaccessible metrics (not enough privilege)
      - java:lang:memorypool:.*usagethreshold.*
    
      # Leaf attributes not interesting for us but that are presents in many path
      - .*:999thpercentile
      - .*:95thpercentile
      - .*:fifteenminuterate
      - .*:fiveminuterate
      - .*:durationunit
      - .*:rateunit
      - .*:stddev
      - .*:meanrate
      - .*:mean
      - .*:min
    
      # Path present in many metrics but uninterresting
      - .*:viewlockacquiretime:.*
      - .*:viewreadtime:.*
      - .*:cas[a-z]+latency:.*
      - .*:colupdatetimedeltahistogram:.*
    
      # Mostly for RPC, do not scrap them
      - org:apache:cassandra:db:.*
    
      # columnfamily is an alias for Table metrics
      # https://github.com/apache/cassandra/blob/8b3a60b9a7dbefeecc06bace617279612ec7092d/src/java/org/apache/cassandra/metrics/TableMetrics.java#L162
      - org:apache:cassandra:metrics:columnfamily:.*
    
      # Should we export metrics for system keyspaces/tables ?
      - org:apache:cassandra:metrics:[^:]+:system[^:]*:.*
    
      # Don't scrap us
      - com:criteo:nosql:cassandra:exporter:.*
    
    maxScrapFrequencyInSec:
      50:
        - .*
    
      # Refresh those metrics only every hour as it is costly for cassandra to retrieve them
      3600:
        - .*:snapshotssize:.*
        - .*:estimated.*
        - .*:totaldiskspaceused:.*
---
# Source: jaeger/charts/cassandra/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cassandra-headless
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9042
      targetPort: cql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cassandra
---
# Source: jaeger/charts/cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: cql
      port: 9042
      targetPort: cql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: cassandra
---
# Source: jaeger/templates/agent/service.yml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-jaeger--agent
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: agent
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "14271"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: compact
      port: 6831
      targetPort: 6831
      protocol: UDP
      nodePort: null
    - name: binary
      port: 6832
      targetPort: 6832
      protocol: UDP
      nodePort: null
    - name: config
      port: 5778
      targetPort: 5778
      nodePort: null
    - name: zipkin
      port: 5775
      targetPort: 5775
      protocol: UDP
      nodePort: null
    - name: admin
      port: 14271
      targetPort: 14271
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: agent
---
# Source: jaeger/templates/collector/service.yml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-jaeger-collector
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: collector
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "14269"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: grpc
      port: 14250
      targetPort: 14250
      nodePort: null
    - name: binary
      port: 14268
      targetPort: 14268
      nodePort: null
    - name: zipkin
      port: 9411
      targetPort: 9411
      nodePort: null
    - name: admin
      port: 14269
      targetPort: 14269
      nodePort: null
    - name: otlp-grpc
      port: 4317
      targetPort: 4317
      nodePort: null
    - name: otlp-http
      port: 4318
      targetPort: 4318
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: collector
---
# Source: jaeger/templates/query/service.yml
apiVersion: v1
kind: Service
metadata:
  name:  my-release-jaeger-query
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: query
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "16687"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: api
      port: 16686
      targetPort: 16686
      nodePort: null
    - name: admin
      port: 16687
      targetPort: 16687
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: query
---
# Source: jaeger/templates/agent/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  my-release-jaeger--agent
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/version: 1.57.0
        helm.sh/chart: jaeger-2.3.6
        app.kubernetes.io/part-of: jaeger
        app.kubernetes.io/component: agent
    spec:
      
      automountServiceAccountToken: false
      priorityClassName: ""
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: jaeger
                    app.kubernetes.io/component: agent
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        
        - name: jaeger-cassandra-ready-check
          image: docker.io/bitnami/cassandra:4.0.13-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/libos.sh
        
              check_cassandra_keyspace_schema() {
                  echo "SELECT 1" | cqlsh -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD -e "SELECT keyspace_name FROM system_schema.keyspaces WHERE keyspace_name='${CASSANDRA_KEYSPACE}';"
              }
        
              info "Connecting to the Cassandra instance $CQLSH_HOST:$CQLSH_PORT"
              if ! retry_while "check_cassandra_keyspace_schema" 12 30; then
                error "Could not connect to the database server"
                exit 1
              else
                info "Connection check success"
              fi
          env:
            - name: CQLSH_HOST
              value: my-release-cassandra
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CQLSH_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: bitnami_jaeger
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: jaeger-agent
          image: docker.io/bitnami/jaeger:1.57.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: null
            seccompProfile:
              type: RuntimeDefault
          command: ["/opt/bitnami/jaeger/bin/jaeger-agent"]
          ports:
            - name: binary
              containerPort: 6832
              protocol: UDP
            - name: zipkin
              containerPort: 5775
              protocol: UDP
            - name: admin
              containerPort: 14271
            - name: compact
              containerPort: 6831
              protocol: UDP
            - name: config
              containerPort: 5778
          env:
            - name: CASSANDRA_SERVERS
              value: my-release-cassandra
            - name: CASSANDRA_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: "bitnami_jaeger"
            - name: CASSANDRA_DATACENTER
              value: "dc1"
            - name: HTTP_SERVER_HOST_PORT
              value: ":5778"
            - name: PROCESSOR_JAEGER_BINARY_SERVER_HOST_PORT
              value: ":6832"
            - name: PROCESSOR_JAEGER_COMPACT_SERVER_HOST_PORT
              value: ":6831"
            - name: PROCESSOR_ZIPKIN_COMPACT_SERVER_HOST_PORT
              value: ":5775"
            - name: ADMIN_HTTP_HOST_PORT
              value: ":14271"
            - name: REPORTER_GRPC_HOST_PORT
              value: my-release-jaeger-collector:14250
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: admin
          readinessProbe:
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: admin
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
      volumes:
---
# Source: jaeger/templates/collector/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  my-release-jaeger-collector
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: collector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/version: 1.57.0
        helm.sh/chart: jaeger-2.3.6
        app.kubernetes.io/part-of: jaeger
        app.kubernetes.io/component: collector
    spec:
      
      automountServiceAccountToken: false
      priorityClassName: ""
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: jaeger
                    app.kubernetes.io/component: collector
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        
        - name: jaeger-cassandra-ready-check
          image: docker.io/bitnami/cassandra:4.0.13-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/libos.sh
        
              check_cassandra_keyspace_schema() {
                  echo "SELECT 1" | cqlsh -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD -e "SELECT keyspace_name FROM system_schema.keyspaces WHERE keyspace_name='${CASSANDRA_KEYSPACE}';"
              }
        
              info "Connecting to the Cassandra instance $CQLSH_HOST:$CQLSH_PORT"
              if ! retry_while "check_cassandra_keyspace_schema" 12 30; then
                error "Could not connect to the database server"
                exit 1
              else
                info "Connection check success"
              fi
          env:
            - name: CQLSH_HOST
              value: my-release-cassandra
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CQLSH_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: bitnami_jaeger
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: jaeger-collector
          image: docker.io/bitnami/jaeger:1.57.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command: ["/opt/bitnami/jaeger/bin/jaeger-collector"]
          ports:
            - name: zipkin
              containerPort: 9411
            - name: binary
              containerPort: 14268
            - name: grpc
              containerPort: 14250
            - name: admin
              containerPort: 14269
            - name: grpc-otlp
              containerPort: 4317
            - name: http-otlp
              containerPort: 4318
          env:
            - name: CASSANDRA_SERVERS
              value: my-release-cassandra
            - name: CASSANDRA_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: "bitnami_jaeger"
            - name: CASSANDRA_DATACENTER
              value: "dc1"
            - name: ADMIN_HTTP_HOST_PORT
              value: ":14269"
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: ":9411"
            - name: COLLECTOR_GRPC_SERVER_HOST_PORT
              value: ":14250"
            - name: COLLECTOR_HTTP_SERVER_HOST_PORT
              value: ":14268"
            - name: COLLECTOR_OTLP_GRPC_HOST_PORT
              value: ":4317"
            - name: COLLECTOR_OTLP_HTTP_HOST_PORT
              value: ":4318"
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: admin
          readinessProbe:
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: admin
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
      volumes:
---
# Source: jaeger/templates/query/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  my-release-jaeger-query
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/part-of: jaeger
    app.kubernetes.io/component: query
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: jaeger
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/version: 1.57.0
        helm.sh/chart: jaeger-2.3.6
        app.kubernetes.io/part-of: jaeger
        app.kubernetes.io/component: query
    spec:
      
      automountServiceAccountToken: false
      priorityClassName: ""
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: jaeger
                    app.kubernetes.io/component: query
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        
        - name: jaeger-cassandra-ready-check
          image: docker.io/bitnami/cassandra:4.0.13-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
        
              set -o errexit
              set -o nounset
              set -o pipefail
        
              . /opt/bitnami/scripts/libos.sh
        
              check_cassandra_keyspace_schema() {
                  echo "SELECT 1" | cqlsh -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD -e "SELECT keyspace_name FROM system_schema.keyspaces WHERE keyspace_name='${CASSANDRA_KEYSPACE}';"
              }
        
              info "Connecting to the Cassandra instance $CQLSH_HOST:$CQLSH_PORT"
              if ! retry_while "check_cassandra_keyspace_schema" 12 30; then
                error "Could not connect to the database server"
                exit 1
              else
                info "Connection check success"
              fi
          env:
            - name: CQLSH_HOST
              value: my-release-cassandra
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CQLSH_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: bitnami_jaeger
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: jaeger-query
          image: docker.io/bitnami/jaeger:1.57.0-debian-12-r6
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command: ["/opt/bitnami/jaeger/bin/jaeger-query"]
          ports:
            - name: ui
              containerPort: 16686
            - name: admin
              containerPort: 16687
          env:
            - name: CASSANDRA_SERVERS
              value: my-release-cassandra
            - name: CASSANDRA_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
            - name: CASSANDRA_KEYSPACE
              value: "bitnami_jaeger"
            - name: CASSANDRA_DATACENTER
              value: "dc1"
            - name: QUERY_HTTP_SERVER_HOST_PORT
              value: ":16686"
            - name: QUERY_GRPC_SERVER_HOST_PORT
              value: ":16685"
            - name: ADMIN_HTTP_HOST_PORT
              value: ":16687"
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: admin
          readinessProbe:
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /
              port: admin
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
      volumes:
---
# Source: jaeger/charts/cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-cassandra
  namespace: "jaeger-2.3.6.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cassandra
    app.kubernetes.io/version: 4.1.5
    helm.sh/chart: cassandra-11.3.1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: cassandra
  serviceName: my-release-cassandra-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: cassandra
        app.kubernetes.io/version: 4.1.5
        helm.sh/chart: cassandra-11.3.1
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: my-release-cassandra
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: cassandra
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              # Node 0 is the password seeder
              if [[ $POD_NAME =~ (.*)-0$ ]]; then
                  echo "Setting node as password seeder"
                  export CASSANDRA_PASSWORD_SEEDER=yes
              else
                  # Only node 0 will execute the startup initdb scripts
                  export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /opt/bitnami/scripts/cassandra/entrypoint.sh /opt/bitnami/scripts/cassandra/run.sh
          image: docker.io/bitnami/cassandra:4.1.5-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: cassandra
            - name: CASSANDRA_SEEDS
              value: "my-release-cassandra-0.my-release-cassandra-headless.jaeger-2.3.6.tgz.svc.cluster.local"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-cassandra
                  key: cassandra-password
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CASSANDRA_USER
              value: "bn_jaeger"
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_KEYSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/keystore"
            - name: CASSANDRA_TRUSTSTORE_LOCATION
              value: "/opt/bitnami/cassandra/certs/truststore"
            - name: CASSANDRA_RACK
              value: rack1
            - name: MAX_HEAP_SIZE
              value: "768M"
            - name: HEAP_NEWSIZE
              value: "256M"
            - name: CASSANDRA_TRANSPORT_PORT_NUMBER
              value: "7000"
            - name: CASSANDRA_JMX_PORT_NUMBER
              value: "7199"
            - name: CASSANDRA_CQL_PORT_NUMBER
              value: "9042"
          envFrom:
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool info | grep "Native Transport active: true"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  nodetool status | grep -E "^UN\\s+${POD_IP}"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - nodetool drain
          ports:
            - name: intra
              containerPort: 7000
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 1024Mi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/cassandra
            
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/cassandra/logs
              subPath: app-logs-dir
      volumes:
        - name: metrics-conf
          configMap:
            name: my-release-cassandra-metrics-conf
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: cassandra
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: jaeger/templates/migrate-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-jaeger-migrate
  namespace: jaeger-2.3.6.tgz
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/version: 1.57.0
    helm.sh/chart: jaeger-2.3.6
    app.kubernetes.io/component: migration
spec:
  ttlSecondsAfterFinished: 30
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/version: 1.57.0
        helm.sh/chart: jaeger-2.3.6
        app.kubernetes.io/component: migration
    spec:
      
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: jaeger-cassandra-schema-grabber
          image: docker.io/bitnami/jaeger:1.57.0-debian-12-r6
          command: [ "cp", "-T", "-r", "/opt/bitnami/jaeger/cassandra-schema", "/cassandra-schema/" ]
          volumeMounts:
            - name: cassandra-schema
              mountPath: "/cassandra-schema"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
      containers:
        - name: jaeger-cassandra-migrator
          image: docker.io/bitnami/cassandra:4.0.13-debian-12-r0
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              . /opt/bitnami/scripts/libos.sh

              check_cassandra_connection() {
                  echo "SELECT 1" | cqlsh -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD -e "QUIT"
              }


              info "Connecting to the Cassandra instance $CQLSH_HOST:$CQLSH_PORT"
              if ! retry_while "check_cassandra_connection" 12 30; then
                error "Could not connect to the database server"
                exit 1
              else
                info "Connection check success"
                sed -i 's/cqlsh -e "show version"/cqlsh -e "show version" -u $CASSANDRA_USERNAME -p $CASSANDRA_PASSWORD /' /cassandra-schema/create.sh
                /cassandra-schema/docker.sh
              fi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: CQLSH
              value: /opt/bitnami/cassandra/bin/cqlsh
            - name: CQLSH_HOST
              value: my-release-cassandra
            - name: CQLSH_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "bn_jaeger"
            - name: DATACENTER
              value: "dc1"
            - name: KEYSPACE
              value: "bitnami_jaeger"
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-jaeger-cassandra
                  key: cassandra-password
          volumeMounts:
            - name: cassandra-schema
              mountPath: "/cassandra-schema"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 1024Mi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
      volumes:
        - name: cassandra-schema
          emptyDir: {}
