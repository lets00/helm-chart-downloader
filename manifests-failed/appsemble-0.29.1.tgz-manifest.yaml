---
# Source: appsemble/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-appsemble
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - create
      - deletecollection
      - patch
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - create
      - deletecollection
      - patch
  - apiGroups:
      - cert-manager.io
    resources:
      - certificates
    verbs:
      - list
---
# Source: appsemble/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-appsemble
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  # This should match the name of the clusterrole
  name: my-release-appsemble
subjects:
  - kind: ServiceAccount
    name: default
---
# Source: appsemble/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: appsemble-postgresql-hl
  namespace: "appsemble-0.29.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: appsemble/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: appsemble-postgresql
  namespace: "appsemble-0.29.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: appsemble/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-appsemble
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/name: appsemble
---
# Source: appsemble/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-appsemble
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
        
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: "my-release"
      app.kubernetes.io/name: appsemble
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: "my-release"
        app.kubernetes.io/name: appsemble
      annotations:
                  
          
    spec:
      enableServiceLinks: false
      containers:
        - name: appsemble
          image: "appsemble/appsemble:0.29.1"
          imagePullPolicy: IfNotPresent
          args: ['start', '-vv']
          ports:
            - name: http
              containerPort: 9999
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
          resources:
            {}
          env:
            - name: DATABASE_HOST
              value: "appsemble-postgresql"
            
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: "appsemble"
            - name: DATABASE_USER
              value: "appsemble"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "appsemble-postgresql-secret"
                  key: "password"
            
            - name: HOST
              value: http://
            - name: FORCE_PROTOCOL_HTTPS
              value: "false"
            - name: APP_DOMAIN_STRATEGY
              value: kubernetes-ingress
            - name: INGRESS_CLASS_NAME
              value: "nginx"
            - name: INGRESS_ANNOTATIONS
              value: "{\"nginx.ingress.kubernetes.io/force-ssl-redirect\":\"true\",\"nginx.ingress.kubernetes.io/hsts\":\"true\",\"nginx.ingress.kubernetes.io/hsts-include-subdomains\":\"true\",\"nginx.ingress.kubernetes.io/hsts-max-age\":\"31536000\",\"nginx.ingress.kubernetes.io/proxy-body-size\":\"50m\",\"nginx.ingress.kubernetes.io/ssl-redirect\":\"true\"}"
            - name: SERVICE_NAME
              value: my-release-appsemble
            - name: SERVICE_PORT
              value: http
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: "appsemble"
                  key: secret
            - name: AES_SECRET
              valueFrom:
                secretKeyRef:
                  name: "appsemble"
                  key: aes-secret
            - name: SMTP_HOST
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: host
            - name: SMTP_PORT
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: port
            - name: SMTP_SECURE
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: secure
            - name: SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: user
            - name: SMTP_PASS
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: pass
            - name: SMTP_FROM
              valueFrom:
                secretKeyRef:
                  name: "smtp"
                  key: from
            - name: IMAP_HOST
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-host
            - name: IMAP_PORT
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-port
            - name: IMAP_SECURE
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-secure
            - name: IMAP_USER
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-user
            - name: IMAP_PASS
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-pass
            - name: IMAP_COPY_TO_SENT_FOLDER
              valueFrom:
                secretKeyRef:
                  name: "imap"
                  key: imap-copy-to-sent-folder
            - name: ADMIN_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: "admin-api-secret"
                  key: admin-api-secret
---
# Source: appsemble/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: appsemble-postgresql
  namespace: "appsemble-0.29.1.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.6.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: appsemble-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: appsemble-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.6.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "appsemble-0.29.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.3.0-debian-10-r22
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "appsemble"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: appsemble-postgresql-secret
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: appsemble-postgresql-secret
                  key: password
            - name: POSTGRES_DB
              value: "appsemble"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "appsemble" -d "dbname=appsemble" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "appsemble" -d "dbname=appsemble" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: appsemble/templates/cleanup-demo-users.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-appsemble-cleanup-demo-users
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
spec:
  schedule: 0 2 * * * # Run every day at 2:00:00
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
                        
            
        spec:
          restartPolicy: Never
          containers:
            - name: my-release-appsemble-cronjob-cleanup-demo-users
              image: "appsemble/appsemble:0.29.1"
              imagePullPolicy: IfNotPresent
              args:
                - cleanup-demo-users
                - -vv
              env:
                - name: DATABASE_HOST
                  value: "appsemble-postgresql"
                
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_NAME
                  value: "appsemble"
                - name: DATABASE_USER
                  value: "appsemble"
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "appsemble-postgresql-secret"
                      key: "password"
---
# Source: appsemble/templates/cleanup-resources-and-assets.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-appsemble-cleanup-resources-and-assets
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
spec:
  schedule: 0 23 * * * # Run every day at 23:00:00
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
                        
            
        spec:
          restartPolicy: Never
          containers:
            - name: my-release-appsemble-cronjob-cleanup-resources-and-assets
              image: "appsemble/appsemble:0.29.1"
              imagePullPolicy: IfNotPresent
              args:
                - cleanup-resources-and-assets
                - -vv
              env:
                - name: DATABASE_HOST
                  value: "appsemble-postgresql"
                
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_NAME
                  value: "appsemble"
                - name: DATABASE_USER
                  value: "appsemble"
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "appsemble-postgresql-secret"
                      key: "password"
---
# Source: appsemble/templates/run-cronjobs.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-appsemble-run-cronjobs
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
spec:
  schedule: '*/5 * * * *' # Run every five minutes
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 72
  failedJobsHistoryLimit: 72
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
                        
            
        spec:
          restartPolicy: Never
          containers:
            - name: my-release-appsemble-cronjob
              image: "appsemble/appsemble:0.29.1"
              imagePullPolicy: IfNotPresent
              args:
                - run-cronjobs
                - -vv
              env:
                - name: DATABASE_HOST
                  value: "appsemble-postgresql"
                
                - name: DATABASE_PORT
                  value: "5432"
                - name: DATABASE_NAME
                  value: "appsemble"
                - name: DATABASE_USER
                  value: "appsemble"
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "appsemble-postgresql-secret"
                      key: "password"
                
                - name: HOST
                  value: http://
                - name: SMTP_HOST
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: host
                - name: SMTP_PORT
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: port
                - name: SMTP_SECURE
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: secure
                - name: SMTP_USER
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: user
                - name: SMTP_PASS
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: pass
                - name: SMTP_FROM
                  valueFrom:
                    secretKeyRef:
                      name: "smtp"
                      key: from
                - name: IMAP_HOST
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-host
                - name: IMAP_PORT
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-port
                - name: IMAP_SECURE
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-secure
                - name: IMAP_USER
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-user
                - name: IMAP_PASS
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-pass
                - name: IMAP_COPY_TO_SENT_FOLDER
                  valueFrom:
                    secretKeyRef:
                      name: "imap"
                      key: imap-copy-to-sent-folder
---
# Source: appsemble/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-appsemble
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    
    
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
    nginx.ingress.kubernetes.io/hsts-include-subdomains: "true"
    nginx.ingress.kubernetes.io/hsts-max-age: "31536000"
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    

    
    
spec:
  ingressClassName: nginx
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-appsemble
                port:
                  name: http
    - host: '*.'
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-release-appsemble
                port:
                  name: http
---
# Source: appsemble/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-appsemble-test-connection"
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-appsemble:80/api/health']
  restartPolicy: Never
---
# Source: appsemble/templates/tests/test-ingress.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-appsemble-test-ingress"
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['http:///api/health']
  restartPolicy: Never
---
# Source: appsemble/templates/cleanup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-appsemble-cleanup
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    helm.sh/hook: pre-delete
spec:
  template:
    metadata:
      annotations:
                
        
    spec:
      restartPolicy: Never
      containers:
        - name: my-release-appsemble-cleanup
          image: "appsemble/appsemble:0.29.1"
          imagePullPolicy: IfNotPresent
          args:
            - cleanup
            - -vv
          env:
            - name: DATABASE_HOST
              value: "appsemble-postgresql"
            
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: "appsemble"
            - name: DATABASE_USER
              value: "appsemble"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "appsemble-postgresql-secret"
                  key: "password"
            - name: APP_DOMAIN_STRATEGY
              value: kubernetes-ingress
            - name: SERVICE_NAME
              value: my-release-appsemble
            - name: SERVICE_PORT
              value: "80"
            - name: HOST
              value: http://
---
# Source: appsemble/templates/migrate.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-appsemble-migrate
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: '0'
spec:
  template:
    metadata:
      annotations:
                
        
    spec:
      restartPolicy: Never
      containers:
        - name: my-release-appsemble-migrate
          image: "appsemble/appsemble:0.29.1"
          imagePullPolicy: IfNotPresent
          args:
            - migrate
            
          env:
            - name: DATABASE_HOST
              value: "appsemble-postgresql"
            
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: "appsemble"
            - name: DATABASE_USER
              value: "appsemble"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "appsemble-postgresql-secret"
                  key: "password"
---
# Source: appsemble/templates/restore.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-appsemble-restore
  labels:
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/name: appsemble
    app.kubernetes.io/version: "0.29.1"
    helm.sh/chart: appsemble-0.29.1
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: '1'
        
    
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: my-release-appsemble-restore
          image: "appsemble/appsemble:0.29.1"
          imagePullPolicy: IfNotPresent
          args:
            - restore
            - -vv
          env:
            - name: DATABASE_HOST
              value: "appsemble-postgresql"
            
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: "appsemble"
            - name: DATABASE_USER
              value: "appsemble"
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "appsemble-postgresql-secret"
                  key: "password"
            - name: APP_DOMAIN_STRATEGY
              value: kubernetes-ingress
            - name: INGRESS_CLASS_NAME
              value: "nginx"
            - name: INGRESS_ANNOTATIONS
              value: "{\"nginx.ingress.kubernetes.io/force-ssl-redirect\":\"true\",\"nginx.ingress.kubernetes.io/hsts\":\"true\",\"nginx.ingress.kubernetes.io/hsts-include-subdomains\":\"true\",\"nginx.ingress.kubernetes.io/hsts-max-age\":\"31536000\",\"nginx.ingress.kubernetes.io/proxy-body-size\":\"50m\",\"nginx.ingress.kubernetes.io/ssl-redirect\":\"true\"}"
            - name: SERVICE_NAME
              value: my-release-appsemble
            - name: SERVICE_PORT
              value: http
            - name: HOST
              value: http://
