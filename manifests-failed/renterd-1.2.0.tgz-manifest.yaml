---
# Source: renterd/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.0
      helm.sh/chart: mysql-11.1.2
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 3306
        - port: 3306
---
# Source: renterd/charts/mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
---
# Source: renterd/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
automountServiceAccountToken: false
secrets:
  - name: mysql
---
# Source: renterd/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
type: Opaque
data:
  mysql-root-password: "cmVudGVyZA=="
  mysql-password: "cmVudGVyZA=="
---
# Source: renterd/templates/secrets/renterd-mysql.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "renterd-mysql"
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  RENTERD_DB_URI: "bXlzcWw6MzMwNg=="
  RENTERD_DB_USER: "cmVudGVyZA=="
  RENTERD_DB_PASSWORD: "cmVudGVyZA=="
  RENTERD_DB_NAME: "cmVudGVyZA=="
  RENTERD_DB_METRICS_NAME: "cmVudGVyZF9tZXRyaWNz"
---
# Source: renterd/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: renterd/templates/configmaps/renterd-autopilot.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: renterd-autopilot
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
data:
  renterd.yml: |
    # Managed by Helm - configmap/renterd-autopilot/renterd.yml
    
    # TODO: dirty bugfix - renterd excepts at least one section in config
    s3:
      enabled: true
---
# Source: renterd/templates/configmaps/renterd-bus.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: renterd-bus
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
data:
  renterd.yml: |
    # Managed by Helm - configmap/renterd-bus/renterd.yml
    bus:
      gatewayAddr: "0.0.0.0:9981"
      
    s3:
      enabled: true
---
# Source: renterd/templates/configmaps/renterd-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: renterd-worker
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
data:
  renterd.yml: |
    # Managed by Helm - configmap/renterd-worker/renterd.yml
    
    s3:
      enabled: true
---
# Source: renterd/templates/configmaps/renterd.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: renterd
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
data:
  entrypoint.sh: |
    #!/bin/sh
    # Managed by Helm - configmap/renterd/entrypoint.sh
    exec renterd --http=':9980' --s3.address=':8080' --log.file.enabled=false "$@"
---
# Source: renterd/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: renterd/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: renterd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: renterd-bus
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9980
      targetPort: 9980
      protocol: TCP
      name: http
    - port: 9981
      targetPort: 9981
      protocol: TCP
      name: bus
  selector:
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: bus
---
# Source: renterd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: renterd-autopilot
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9980
      targetPort: 9980
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: autopilot
---
# Source: renterd/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: renterd-worker
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9980
      targetPort: 9980
      protocol: TCP
      name: http
    - port: 9981
      targetPort: 9981
      protocol: TCP
      name: bus
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: s3
  selector:
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: worker
---
# Source: renterd/templates/statefulset-renterd-autopilot.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: renterd-autopilot
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: autopilot
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: renterd
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: autopilot
  template:
    metadata:
      labels:
        app.kubernetes.io/name: renterd
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: autopilot
      annotations:
        checksum/configmap-renterd: cc0c25cbbffbe9c48bf70b84678bca7e8d2c056d863de98d549c02b0756b0a93
        checksum/configmap-renterd-autopilot: f9ac44dd645e49b443cbbf3d75931f3d09e92b15c4ab2fbbe006bc02a1564d67
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-for
          image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
          args:
            - --verbose
            - --timeout=60s
            # Wait for bus before starting autopilot
            - --host="renterd-bus:9980"
            # Make sure all workers are online before starting autopilot
            
            - --host="renterd-worker-0.renterd-worker:9980"
            
      containers:
        - name: renterd
          image: "ghcr.io/siafoundation/renterd:1.0.7"
          imagePullPolicy: IfNotPresent
          ports:
            - name: bus
              containerPort: 9981
              protocol: TCP
            - name: http
              containerPort: 9980
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - mountPath: "/data/renterd.yml"
              name: renterd-autopilot-config
              subPath: "renterd.yml"
            - mountPath: "/entrypoint.sh"
              name: renterd-config
              subPath: "entrypoint.sh"
          envFrom:
            - secretRef:
                name: "renterd"
          env:
            - name: RENTERD_AUTOPILOT_ENABLED
              value: "true"
            - name: RENTERD_WORKER_ENABLED
              value: "false"
            - name: RENTERD_BUS_REMOTE_ADDR
              value: "http://renterd-bus:9980/api/bus"
            - name: RENTERD_WORKER_REMOTE_ADDRS
              value: "http://renterd-worker-0.renterd-worker:9980/api/worker"
          resources:
            {}
      volumes:
        - name: renterd-config
          configMap:
            name: renterd
            defaultMode: 0755
        - name: renterd-autopilot-config
          configMap:
            name: renterd-autopilot
            defaultMode: 0755
---
# Source: renterd/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: "renterd-1.2.0.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.0
    helm.sh/chart: mysql-11.1.2
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
  serviceName: mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: c34c12136f21da823e2ae2c5c3600cdf1af70eacb3020c34056587141d7f009e
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.0
        helm.sh/chart: mysql-11.1.2
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: mysql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.0-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources: 
            requests:
              cpu: 250m
              memory: 3Gi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.0-debian-12-r3
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-root-password
            - name: MYSQL_USER
              value: "renterd"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql
                  key: mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "renterd"
            - name: MYSQL_EXTRA_FLAGS
              value: "--max_connections=1024 --log_bin_trust_function_creators=1 --innodb_buffer_pool_size=4G"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}"
          resources: 
            requests:
              cpu: 250m
              memory: 3Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mysql
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: renterd/templates/statefulset-renterd-bus.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: renterd-bus
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: bus
spec:
  serviceName: "renterd-bus"
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: renterd
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: bus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: renterd
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: bus
      annotations:
        checksum/configmap-renterd: cc0c25cbbffbe9c48bf70b84678bca7e8d2c056d863de98d549c02b0756b0a93
        checksum/configmap-renterd-bus: 1fbf3808a5a22864eb5e8530b61417a1ac08d6d7212fbd2fc793fb4bfae93306
        checksum/secret-renterd-mysql: 3fc5f8318dd28209c99ef89d60e3fb2d29186e3201518242b5b53e85738bd3a0
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-for
          image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
          args:
            - --verbose
            - --timeout=60s
            # Wait for db before starting bus
            - --host="$(RENTERD_DB_URI)"
          envFrom:
            - secretRef:
                name: "renterd-mysql"
      containers:
        - name: renterd
          image: "ghcr.io/siafoundation/renterd:1.0.7"
          imagePullPolicy: IfNotPresent
          ports:
            - name: bus
              containerPort: 9981
              protocol: TCP
            - name: http
              containerPort: 9980
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - mountPath: "/data"
              name: renterd-bus-data
            - mountPath: "/data/renterd.yml"
              name: renterd-bus-config
              subPath: "renterd.yml"
            - mountPath: "/entrypoint.sh"
              name: renterd-config
              subPath: "entrypoint.sh"
          envFrom:
            - secretRef:
                name: "renterd"
            - secretRef:
                name: "renterd-mysql"
          env:
            - name: RENTERD_AUTOPILOT_ENABLED
              value: "false"
            - name: RENTERD_WORKER_ENABLED
              value: "false"
          resources:
            {}
      volumes:
        - name: renterd-config
          configMap:
            name: renterd
            defaultMode: 0755
        - name: renterd-bus-config
          configMap:
            name: renterd-bus
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: renterd-bus-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: longhorn
---
# Source: renterd/templates/statefulset-renterd-worker.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: renterd-worker
  labels:
    helm.sh/chart: renterd-1.2.0
    app.kubernetes.io/name: renterd
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.0.7"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: worker
spec:
  serviceName: "renterd-worker"
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: renterd
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: renterd
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/component: worker
      annotations:
        checksum/configmap-renterd: cc0c25cbbffbe9c48bf70b84678bca7e8d2c056d863de98d549c02b0756b0a93
        checksum/configmap-renterd-worker: 024db4f85a992aec1c38187416458570d1f16e0c8d053eb3823fd4d950d9ae40
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: wait-for
          image: ghcr.io/patrickdappollonio/wait-for:v1.0.0
          args:
            - --verbose
            - --timeout=60s
            # Wait for bus before starting workers
            - --host="renterd-bus:9980"
      containers:
        - name: renterd
          image: "ghcr.io/siafoundation/renterd:1.0.7"
          imagePullPolicy: IfNotPresent
          ports:
            - name: bus
              containerPort: 9981
              protocol: TCP
            - name: http
              containerPort: 9980
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 9980
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - mountPath: "/data/renterd.yml"
              name: renterd-worker-config
              subPath: "renterd.yml"
            - mountPath: "/entrypoint.sh"
              name: renterd-config
              subPath: "entrypoint.sh"
          env:
            - name: RENTERD_WORKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: RENTERD_AUTOPILOT_ENABLED
              value: "false"
            - name: RENTERD_WORKER_ENABLED
              value: "true"
            - name: RENTERD_BUS_REMOTE_ADDR
              value: "http://renterd-bus:9980/api/bus"
          envFrom:
            - secretRef:
                name: "renterd"
          resources:
            {}
      volumes:
        - name: renterd-config
          configMap:
            name: renterd
            defaultMode: 0755
        - name: renterd-worker-config
          configMap:
            name: renterd-worker
            defaultMode: 0755
