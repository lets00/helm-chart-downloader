---
# Source: hello-springboot-microservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-hello-springboot-microservice
  labels:
    app.kubernetes.io/name: hello-springboot-microservice
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0"
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: app
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: hello-springboot-microservice-0.21.0
spec:
  selector:
    app: hello-springboot-microservice
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
# Source: hello-springboot-microservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-hello-springboot-microservice
  labels:
    app.kubernetes.io/name: hello-springboot-microservice
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0"
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: app
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: hello-springboot-microservice-0.21.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-springboot-microservice
  template:
    metadata:
      labels:
        app: hello-springboot-microservice
        app.kubernetes.io/name: hello-springboot-microservice
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "0.6.0"
        app.kubernetes.io/component: app
        app.kubernetes.io/part-of: app
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: hello-springboot-microservice-0.21.0
    spec:
      containers:
        - name: hello-springboot-microservice
          image: siakhooi/hello-springboot-microservice:0.15.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          securityContext:
             runAsUser:  10000
             runAsGroup:  10000
             fsGroup:  10000
             fsGroupChangePolicy:  OnRootMismatch
             allowPrivilegeEscalation:  false
             privileged:  false
             readOnlyRootFilesystem:  true
             runAsNonRoot:  true
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 1
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 1
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
---
# Source: hello-springboot-microservice/templates/tests/test-service.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-release-hello-springboot-microservice-helm-test-service
  labels:
    app.kubernetes.io/name: hello-springboot-microservice
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.6.0"
    app.kubernetes.io/component: app
    app.kubernetes.io/part-of: app
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: hello-springboot-microservice-0.21.0
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command:
         - wget
         - 'http://my-release-hello-springboot-microservice:80/actuator/health'
  restartPolicy: Never
