---
# Source: baserow/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-postgresql
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    # Allow dns resolution
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
    # Allow outbound connections to read-replicas
    - ports:
        - port: 5432
      to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/instance: my-release
              app.kubernetes.io/name: postgresql
              app.kubernetes.io/component: read
  ingress:
    - ports:
        - port: 5432
---
# Source: baserow/charts/redis/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-release-redis
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections
    - ports:
        - port: 6379
---
# Source: baserow/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
automountServiceAccountToken: false
---
# Source: baserow/charts/redis/templates/master/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  name: my-release-redis-master
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
---
# Source: baserow/templates/asgi/asgi-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-baserow-asgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-asgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: baserow/templates/celery/celery-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-baserow-celery
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-celery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: baserow/templates/frontend/frontend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-baserow-frontend
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: baserow/templates/wsgi/wsgi-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-baserow-wsgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-wsgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: baserow/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
type: Opaque
data:
  postgres-password: "RFdxdXJOUUVFOA=="
  password: "YmFzZXJvdw=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: baserow/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
type: Opaque
data:
  redis-password: "YmFzZXJvdw=="
---
# Source: baserow/templates/backend/backend-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-baserow-backend
data:
  jwt-signing-key: WTBCc2xqTVZEMW5wUWhNaGhXM21PQU9abnVRT01qbTE=
  secret-key: RUJiSWZtakNKRzhvc0diNWRvcnYwUTY5b2x1eG9wRDU=
---
# Source: baserow/templates/general/email-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-baserow-backend-email
data:
  email-password: ""
---
# Source: baserow/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: baserow/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: baserow/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: baserow/templates/backend/backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-baserow-backend
data:
  # Baserow Backend Settings
  BASEROW_ACCESS_TOKEN_LIFETIME_MINUTES: "10"
  BASEROW_AIRTABLE_IMPORT_SOFT_TIME_LIMIT: "1800"
  BASEROW_BACKEND_DATABASE_LOG_LEVEL: "ERROR"
  BASEROW_BACKEND_DEBUG: "off"
  BASEROW_BACKEND_LOG_LEVEL: "INFO"
  BASEROW_FILE_UPLOAD_SIZE_LIMIT_MB: "1048576"
  BASEROW_REFRESH_TOKEN_LIFETIME_HOURS: "168"
  BASEROW_ROW_PAGE_SIZE_LIMIT: "200"
  BASEROW_SNAPSHOT_EXPIRATION_TIME_DAYS: "360"
  BASEROW_SYNC_TEMPLATES_TIME_LIMIT: "1800"
  BASEROW_TRIGGER_SYNC_TEMPLATES_AFTER_MIGRATION: "true"
  BATCH_ROWS_SIZE_LIMIT: "200"
  MIGRATE_ON_STARTUP: "true"
  POSTGRES_STARTUP_CHECK_ATTEMPTS: "5"
  # Baserow Backend Misc Configuration
  BASEROW_INITIAL_CREATE_SYNC_TABLE_DATA_LIMIT: "5000"
  BASEROW_JOB_CLEANUP_INTERVAL_MINUTES: "5"
  BASEROW_JOB_EXPIRATION_TIME_LIMIT: "43200"
  BASEROW_JOB_SOFT_TIME_LIMIT: "1800"
  BASEROW_MAX_FILE_IMPORT_ERROR_COUNT: "30"
  BASEROW_MAX_ROW_REPORT_ERROR_COUNT: "30"
  MINUTES_UNTIL_ACTION_CLEANED_UP: "120"
  # Baserow Celery Settings
  BASEROW_AMOUNT_OF_WORKERS: ""
  BASEROW_CELERY_BEAT_DEBUG_LEVEL: "INFO"
  BASEROW_CELERY_BEAT_STARTUP_DELAY: "15"
  BASEROW_RUN_MINIMAL: ""
  # Baserow Email Settings
  # Baserow File Upload Settings
  AWS_STORAGE_BUCKET_NAME: ""
  MEDIA_ROOT: "/baserow/media"
  MEDIA_URL: "$PUBLIC_BACKEND_URL/media/"
  # Baserow Webhook Settings
  BASEROW_WEBHOOKS_MAX_CALL_LOG_ENTRIES: "10"
  BASEROW_WEBHOOKS_MAX_CONSECUTIVE_TRIGGER_FAILURES: "8"
  BASEROW_WEBHOOKS_MAX_PER_TABLE: "20"
  BASEROW_WEBHOOKS_MAX_RETRIES_PER_CALL: "8"
  BASEROW_WEBHOOKS_REQUEST_TIMEOUT_SECONDS: "5"
  BASEROW_WEBHOOKS_URL_CHECK_TIMEOUT_SECS: "10"
  # Database Settings
  DATABASE_HOST: "my-release-postgresql"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "baserow"
  DATABASE_USER: "baserow"
  # Redis Settings
  REDIS_HOST: "my-release-redis-master"
  REDIS_PORT: "6379"
---
# Source: baserow/templates/frontend/frontend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-baserow-frontend
data:
  # Baserow Frontend Settings
  DOWNLOAD_FILE_VIA_XHR: "0"
---
# Source: baserow/templates/general/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-baserow
data:
  # Baserow General Settings
  BASEROW_MAX_IMPORT_FILE_SIZE_MB: "512"
  BASEROW_MAX_SNAPSHOTS_PER_GROUP: "-1"
  PRIVATE_BACKEND_URL: "http://my-release-baserow-wsgi:8000"
  PUBLIC_BACKEND_URL: "http://localhost:8000"
  PUBLIC_WEB_FRONTEND_URL: "http://localhost:3000"
---
# Source: baserow/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: baserow/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: baserow/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
---
# Source: baserow/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: master
---
# Source: baserow/templates/asgi/asgi-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-baserow-asgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-asgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: baserow-asgi
    app.kubernetes.io/instance: my-release
---
# Source: baserow/templates/frontend/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-baserow-frontend
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: baserow-frontend
    app.kubernetes.io/instance: my-release
---
# Source: baserow/templates/wsgi/wsgi-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-baserow-wsgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-wsgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: baserow-wsgi
    app.kubernetes.io/instance: my-release
---
# Source: baserow/templates/asgi/asgi-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-baserow-asgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-asgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: baserow-asgi
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: baserow-asgi
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-baserow-asgi
      securityContext:
        fsGroup: 9999
        runAsGroup: 9999
        runAsUser: 9999
      containers:
        - name: baserow-asgi
          image: "baserow/backend:1.22.3"
          imagePullPolicy: Always
          workingDir: /baserow
          args:
            - "gunicorn"
          env:
            # Baserow Backend Settings
            - name: BASEROW_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: jwt-signing-key
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: secret-key
            # Baserow Email Settings
            # Baserow File Upload Settings
            # Database Settings
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "password"
            # Redis Settings
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-redis"
                  key: "redis-password"
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-backend
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "/baserow/backend/docker/docker-entrypoint.sh backend-healthcheck"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "/baserow/backend/docker/docker-entrypoint.sh backend-healthcheck"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
---
# Source: baserow/templates/celery/celery-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-baserow-celery
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-celery
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: baserow-celery
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: baserow-celery
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-baserow-celery
      securityContext:
        fsGroup: 9999
        runAsGroup: 9999
        runAsUser: 9999
      containers:
        - name: baserow-celery-worker
          image: "baserow/backend:1.22.3"
          imagePullPolicy: Always
          args:
            - "celery-worker"
          env:
            # Baserow Backend Settings
            - name: BASEROW_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: jwt-signing-key
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: secret-key
            # Baserow Email Settings
                        # Baserow File Upload Settings
            # Database Settings
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "password"
            # Redis Settings
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-redis"
                  key: "redis-password"
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-backend
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /baserow/backend/docker/docker-entrypoint.sh celery-worker-healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /baserow/backend/docker/docker-entrypoint.sh celery-worker-healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
        - name: baserow-celery-export-worker
          image: "baserow/backend:1.22.3"
          imagePullPolicy: Always
          args:
            - "celery-exportworker"
          env:
            # Baserow Backend Settings
            - name: BASEROW_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: jwt-signing-key
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: secret-key
            # Baserow Email Settings
            # Baserow File Upload Settings
            # Database Settings
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "password"
            # Redis Settings
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-redis"
                  key: "redis-password"
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-backend
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /baserow/backend/docker/docker-entrypoint.sh celery-exportworker-healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /baserow/backend/docker/docker-entrypoint.sh celery-exportworker-healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 10
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
        - name: baserow-celery-backend-beat-worker
          image: "baserow/backend:1.22.3"
          imagePullPolicy: Always
          args:
            - "celery-beat"
          env:
            # Baserow Backend Settings
            - name: BASEROW_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: jwt-signing-key
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: secret-key
            # Redis Settings
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-redis"
                  key: "redis-password"
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-backend
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
---
# Source: baserow/templates/frontend/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-baserow-frontend
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-frontend
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: baserow-frontend
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: baserow-frontend
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-baserow-frontend
      securityContext:
        fsGroup: 9999
        runAsGroup: 9999
        runAsUser: 9999
      containers:
        - name: baserow-frontend
          image: "baserow/web-frontend:1.22.3"
          imagePullPolicy: Always
          args:
            - nuxt
          env:
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-frontend
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_health/
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /_health/
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
---
# Source: baserow/templates/wsgi/wsgi-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-baserow-wsgi
  labels:
    helm.sh/chart: baserow-2.1.1
    app.kubernetes.io/name: baserow-wsgi
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "1.22.3"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: baserow-wsgi
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: baserow-wsgi
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-baserow-wsgi
      securityContext:
        fsGroup: 9999
        runAsGroup: 9999
        runAsUser: 9999
      containers:
        - name: baserow-wsgi
          image: "baserow/backend:1.22.3"
          imagePullPolicy: Always
          workingDir: /baserow
          args:
            - "gunicorn-wsgi"
            - "--timeout"
            - "60"
          env:
            # Baserow Backend Settings
            - name: BASEROW_JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: jwt-signing-key
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "my-release-baserow-backend"
                  key: secret-key
            # Baserow Email Settings
            # Baserow File Upload Settings
            # Database Settings
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-postgresql"
                  key: "password"
            # Redis Settings
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "my-release-redis"
                  key: "redis-password"
          envFrom:
            - configMapRef:
                name: my-release-baserow
            - configMapRef:
                name: my-release-baserow-backend
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "/baserow/backend/docker/docker-entrypoint.sh backend-healthcheck"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "/baserow/backend/docker/docker-entrypoint.sh backend-healthcheck"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
          securityContext:
            runAsGroup: 9999
            runAsNonRoot: true
            runAsUser: 9999
---
# Source: baserow/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-14.1.3
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-14.1.3
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-11-r17
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "baserow"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "baserow"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "baserow" -d "dbname=baserow" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "baserow" -d "dbname=baserow" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: baserow/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "baserow-2.1.1.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.4
    helm.sh/chart: redis-18.14.0
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: redis
        app.kubernetes.io/version: 7.2.4
        helm.sh/chart: redis-18.14.0
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 86bcc953bb473748a3d3dc60b7c11f34e60c93519234d4c37f42e22ada559d47
        checksum/health: aff24913d801436ea469d8d374b2ddb3ec4c43ee7ab24663d5f8ff1a1b6991a9
        checksum/scripts: 560c33ff34d845009b51830c332aa05fa211444d1877d3526d3599be7543aaa5
        checksum/secret: 97dc12285e73e48141ead2154a6d93cd22dff27e1d530d4e480072c2dfadb8f8
    spec:
      
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: my-release-redis-master
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      enableServiceLinks: true
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.2.4-debian-11-r5
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: redis-data
        labels:
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/name: redis
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
