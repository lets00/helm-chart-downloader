---
# Source: starwhale/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-starwhale
  labels:
    helm.sh/chart: starwhale-0.6.13
    app.kubernetes.io/version: "0.6.13"
    app.kubernetes.io/managed-by: Helm
---
# Source: starwhale/templates/mysql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  namespace: "starwhale-0.6.13.tgz"
  labels:
    starwhale.ai/role: mysql
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: mysql
data:
  my.cnf: |-

    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: starwhale/templates/minio.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio
  namespace: "starwhale-0.6.13.tgz"
  labels:
    starwhale.ai/role: minio
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: minio
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: my-release-starwhale-minio
  volumeMode: Filesystem
  volumeName: my-release-starwhale-pv-minio
  resources:
    requests:
      storage: "50Gi"
---
# Source: starwhale/templates/mysql.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql
  namespace: "starwhale-0.6.13.tgz"
  labels:
    starwhale.ai/role: mysql
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: mysql
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: my-release-starwhale-mysql
  volumeMode: Filesystem
  volumeName: my-release-starwhale-pv-mysql
  resources:
    requests:
      storage: "8Gi"
---
# Source: starwhale/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-starwhale
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: my-release-starwhale
    namespace: starwhale-0.6.13.tgz
---
# Source: starwhale/templates/controller-ingress.yaml
apiVersion: v1
kind: Service
metadata:
  name: controller
  namespace: starwhale-0.6.13.tgz
  labels:
    
    starwhale.ai/role: controller
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: controller
spec:
  ports:
    - port: 8082
      protocol: TCP
  selector:
    
    starwhale.ai/role: controller
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: controller
---
# Source: starwhale/templates/minio.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: "starwhale-0.6.13.tgz"
  labels:
    starwhale.ai/role: minio
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: minio
spec:
  type: "ClusterIP"
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
    - name: minio-console
      port: 9001
      targetPort: minio-console
  selector: 
    starwhale.ai/role: minio
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: minio
---
# Source: starwhale/templates/mysql.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: "starwhale-0.6.13.tgz"
  labels: 
    starwhale.ai/role: mysql
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: mysql
spec:
  type: "ClusterIP"
  ports:
    - name: mysql-api
      port: 3306
      targetPort: mysql-api
      protocol: TCP
  selector: 
    starwhale.ai/role: mysql
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: mysql
---
# Source: starwhale/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  labels: 
    starwhale.ai/role: controller
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: controller

spec:
  replicas: 1
  selector:
    matchLabels: 
      starwhale.ai/role: controller
      app.kubernetes.io/name: my-release-starwhale
      app.kubernetes.io/instance: controller
  template:
    metadata:
      labels: 
        starwhale.ai/role: controller
        app.kubernetes.io/name: my-release-starwhale
        app.kubernetes.io/instance: controller
    spec:
      volumes:
        - name: wal-cache
          emptyDir: {}
      serviceAccountName: my-release-starwhale
      containers:
        - name: controller
          image: "ghcr.io/star-whale/server:0.6.13"
          ports:
            - containerPort: 8082
          volumeMounts:
            - name: wal-cache
              mountPath: "/opt/starwhale.java/datastore-wal-cache"
          resources:
            limits:
              memory: 8G
            requests:
              memory: 6G
          livenessProbe:
            httpGet:
              path: /
              port: 8082
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 9082
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 60
          startupProbe:
            httpGet:
              path: /
              port: 8082
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 60
          env:
            
            
            - name: SW_PYPI_INDEX_URL
              value: "https://mirrors.aliyun.com/pypi/simple/"
            - name: SW_PYPI_EXTRA_INDEX_URL
              value: "https://pypi.tuna.tsinghua.edu.cn/simple/"
            - name: SW_PYPI_TRUSTED_HOST
              value: "mirrors.aliyun.com pypi.tuna.tsinghua.edu.cn"
            - name: SW_PYPI_RETRIES
              value: "10"
            - name: SW_PYPI_TIMEOUT
              value: "90"
            - name: JAR
              value: controller
            - name: SW_CONTROLLER_PORT
              value: "8082"
            - name: SW_MANAGEMENT_PORT
              value: "9082"
            - name: SW_JWT_TOKEN_EXPIRE_MINUTES
              value: "43200"
            - name: SW_UPLOAD_MAX_FILE_SIZE
              value: "20480MB"
            - name: SW_STORAGE_PREFIX
              value: "my-release"
            - name: SW_STORAGE_FS_ROOT_DIR
              value: "/usr/local/starwhale"
            - name: SW_DOCKER_REGISTRY_URL
              value: "ghcr.io"
            - name: SW_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SW_K8S_NAME_SPACE
              value: starwhale-0.6.13.tgz
            - name: SW_K8S_HOST_PATH_FOR_CACHE
              value: /mnt/data/starwhale/job
            - name: SW_INSTANCE_URI
              value: "http://controller:8082"
            - name: SW_DATASET_BUILD_CLI_VERSION
              value: ""
            - name: SW_DATASET_BUILD_PYTHON_VERSION
              value: "3.10"
            - name: SW_STORAGE_ENDPOINT
              value: "http://minio.pre.intra.starwhale.ai"
            - name: SW_STORAGE_BUCKET
              value: "starwhale"
            - name: SW_STORAGE_ACCESSKEY
              value: "minioadmin"
            - name: SW_STORAGE_SECRETKEY
              value: "minioadmin"
            - name: SW_STORAGE_REGION
              value: "local"
            - name: SW_METADATA_STORAGE_IP
              value: "mysql"
            - name: SW_METADATA_STORAGE_PORT
              value: "3306"
            - name: SW_METADATA_STORAGE_PASSWORD # todo whether use secret
              value: "starwhale"
            - name: SW_METADATA_STORAGE_USER
              value: "starwhale"
            - name: SW_METADATA_STORAGE_DB
              value: "starwhale"
            - name: SW_DATASTORE_WAL_LOCAL_CACHE_DIR
              value: "/opt/starwhale.java/datastore-wal-cache"
---
# Source: starwhale/templates/minio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: "starwhale-0.6.13.tgz"
  labels: 
    starwhale.ai/role: minio
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: minio
spec:
  selector:
    matchLabels:
      starwhale.ai/role: minio
      app.kubernetes.io/name: my-release-starwhale
      app.kubernetes.io/instance: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        starwhale.ai/role: minio
        app.kubernetes.io/name: my-release-starwhale
        app.kubernetes.io/instance: minio
    spec:
      initContainers:
        - name: volume-permissions
          image: "docker.io/bitnami/bitnami-shell:11-debian-11-r6"
          command:
            - /bin/bash
            - -ec
            - chown -R 1001:1001 /data
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: minio
          image: "docker.io/bitnami/minio:2022.6.20-debian-11-r0"
          volumeMounts:
            - mountPath: /data
              name: data
          securityContext:
            runAsUser: 1001
          env:
            - name: MINIO_SCHEME
              value: http
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_DEFAULT_BUCKETS
              value: starwhale
            - name: MINIO_ROOT_USER
              value: minioadmin
            - name: MINIO_ROOT_PASSWORD
              value: minioadmin
            - name: MINIO_BROWSER
              value: "on"
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
          readinessProbe:
            tcpSocket:
              port: minio-api
          resources:
            limits:
              cpu: 2000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 250Mi
      securityContext:
        fsGroup: 1001
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio
---
# Source: starwhale/templates/mysql.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: "starwhale-0.6.13.tgz"
  labels: 
    starwhale.ai/role: mysql
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: mysql

spec:
  selector:
    matchLabels: 
      starwhale.ai/role: mysql
      app.kubernetes.io/name: my-release-starwhale
      app.kubernetes.io/instance: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels: 
        starwhale.ai/role: mysql
        app.kubernetes.io/name: my-release-starwhale
        app.kubernetes.io/instance: mysql
    spec:
      initContainers:
        - name: volume-permissions
          image: "docker.io/bitnami/bitnami-shell:11-debian-11-r6"
          command:
            - /bin/bash
            - -ec
            - chown -R 1001:1001 /bitnami/mysql
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
      containers:
        - name: mysql
          image: "docker.io/bitnami/mysql:8.0.29-debian-10-r2"
          volumeMounts:
            - mountPath: /bitnami/mysql
              name: data
            - mountPath: /opt/bitnami/mysql/conf/my.cnf
              name: config
              subPath: my.cnf
          securityContext:
            runAsUser: 1001
          env:
            - name: MYSQL_USER
              value: starwhale
            - name: MYSQL_PASSWORD
              value: starwhale
            - name: MYSQL_DATABASE
              value: starwhale
            - name: MYSQL_ROOT_PASSWORD
              value: root
          ports:
            - name: mysql-api
              containerPort: 3306
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - mysqladmin status -uroot -p"${MYSQL_ROOT_PASSWORD}"
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - mysqladmin status -uroot -p"${MYSQL_ROOT_PASSWORD}"
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - mysqladmin status -uroot -p"${MYSQL_ROOT_PASSWORD}"
          resources:
            limits:
              cpu: 2000m
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 250Mi
      securityContext:
        fsGroup: 1001
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mysql
        - name: config
          configMap:
            name: mysql
---
# Source: starwhale/templates/controller-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: controller
  namespace: starwhale-0.6.13.tgz
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 30g

spec:
  ingressClassName: nginx
  rules:
    - host: console.pre.intra.starwhale.ai
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: controller
                port:
                  number: 8082
---
# Source: starwhale/templates/minio.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio
  namespace: "starwhale-0.6.13.tgz"
  labels: 
    starwhale.ai/role: minio
    app.kubernetes.io/name: my-release-starwhale
    app.kubernetes.io/instance: minio
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "30g"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  ingressClassName: "nginx"
  rules:
    - host: minio.pre.intra.starwhale.ai
      http:
        paths:
          - backend:
              service:
                name: minio
                port:
                  name: minio-api
            path: /
            pathType: ImplementationSpecific
    - host: minio-admin.pre.intra.starwhale.ai
      http:
        paths:
          - backend:
              service:
                name: minio
                port:
                  name: minio-console
            path: /
            pathType: ImplementationSpecific
---
# Source: starwhale/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-starwhale-test-connection"
  labels:
    helm.sh/chart: starwhale-0.6.13
    app.kubernetes.io/version: "0.6.13"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-starwhale:8080']
  restartPolicy: Never
