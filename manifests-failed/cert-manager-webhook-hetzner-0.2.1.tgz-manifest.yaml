---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-cert-manager-webhook-hetzner
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-webhook-hetzner:domain-solver
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
rules:
  - apiGroups:
      - acme.unique.company.name
    resources:
      - '*'
    verbs:
      - 'create'
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
# Grant cert-manager permission to validate using our apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-release-cert-manager-webhook-hetzner:flowcontrol-solver
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
rules:
  - apiGroups:
      - "flowcontrol.apiserver.k8s.io"
    resources:
      - 'prioritylevelconfigurations'
      - 'flowschemas'
    verbs:
      - 'list'
      - 'watch'
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-webhook-hetzner:auth-delegator
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-cert-manager-webhook-hetzner
    namespace: cert-manager-webhook-hetzner-0.2.1.tgz
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-webhook-hetzner:domain-solver
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-webhook-hetzner:domain-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: cert-manager
    namespace: cert-manager
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-cert-manager-webhook-hetzner:flowcontrol-solver
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-cert-manager-webhook-hetzner:flowcontrol-solver
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-cert-manager-webhook-hetzner
    namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-cert-manager-webhook-hetzner:secret-reader
  namespace: cert-manager-webhook-hetzner-0.2.1.tgz
rules:
  - apiGroups:
      - ""
    resources:
      - "secrets"
    resourceNames:
        - hetzner-secret
    verbs:
      - "get"
      - "watch"
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
# Grant the webhook permission to read the ConfigMap containing the Kubernetes
# apiserver's requestheader-ca-certificate.
# This ConfigMap is automatically created by the Kubernetes apiserver.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cert-manager-webhook-hetzner:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-cert-manager-webhook-hetzner
    namespace: cert-manager-webhook-hetzner-0.2.1.tgz
---
# Source: cert-manager-webhook-hetzner/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-release-cert-manager-webhook-hetzner:secret-reader
  namespace: cert-manager-webhook-hetzner-0.2.1.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-cert-manager-webhook-hetzner:secret-reader
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: my-release-cert-manager-webhook-hetzner
    namespace: cert-manager-webhook-hetzner-0.2.1.tgz
---
# Source: cert-manager-webhook-hetzner/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-cert-manager-webhook-hetzner
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: https
      protocol: TCP
      name: https
  selector:
    app: cert-manager-webhook-hetzner
    release: my-release
---
# Source: cert-manager-webhook-hetzner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-cert-manager-webhook-hetzner
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cert-manager-webhook-hetzner
      release: my-release
  template:
    metadata:
      labels:
        app: cert-manager-webhook-hetzner
        release: my-release
    spec:
      serviceAccountName: my-release-cert-manager-webhook-hetzner
      securityContext:
        fsGroup: 1001
      containers:
        - name: cert-manager-webhook-hetzner
          image: "deyaeddin/cert-manager-webhook-hetzner:latest"
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - --tls-cert-file=/tls/tls.crt
            - --tls-private-key-file=/tls/tls.key
          env:
            - name: GROUP_NAME
              value: "acme.unique.company.name"
          ports:
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: https
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /healthz
              port: https
          volumeMounts:
            - name: certs
              mountPath: /tls
              readOnly: true
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 256Mi
      volumes:
        - name: certs
          secret:
            secretName: my-release-cert-manager-webhook-hetzner-webhook-tls
---
# Source: cert-manager-webhook-hetzner/templates/apiservice.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.acme.unique.company.name
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
  annotations:
    cert-manager.io/inject-ca-from: "cert-manager-webhook-hetzner-0.2.1.tgz/my-release-cert-manager-webhook-hetzner-webhook-tls"
spec:
  group: acme.unique.company.name
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: my-release-cert-manager-webhook-hetzner
    namespace: cert-manager-webhook-hetzner-0.2.1.tgz
  version: v1alpha1
---
# Source: cert-manager-webhook-hetzner/templates/pki.yaml
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-release-cert-manager-webhook-hetzner-ca
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  secretName: my-release-cert-manager-webhook-hetzner-ca
  duration: 43800h # 5y
  issuerRef:
    name: my-release-cert-manager-webhook-hetzner-selfsign
  commonName: "ca.cert-manager-webhook-hetzner.cert-manager"
  isCA: true
---
# Source: cert-manager-webhook-hetzner/templates/pki.yaml
# Finally, generate a serving certificate for the webhook to use
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-release-cert-manager-webhook-hetzner-webhook-tls
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  secretName: my-release-cert-manager-webhook-hetzner-webhook-tls
  duration: 8760h # 1y
  issuerRef:
    name: my-release-cert-manager-webhook-hetzner-ca
  dnsNames:
    - my-release-cert-manager-webhook-hetzner
    - my-release-cert-manager-webhook-hetzner.cert-manager-webhook-hetzner-0.2.1.tgz
    - my-release-cert-manager-webhook-hetzner.cert-manager-webhook-hetzner-0.2.1.tgz.svc
---
# Source: cert-manager-webhook-hetzner/templates/pki.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-release-cert-manager-webhook-hetzner-selfsign
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  selfSigned: {}
---
# Source: cert-manager-webhook-hetzner/templates/pki.yaml
# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: my-release-cert-manager-webhook-hetzner-ca
  namespace: "cert-manager-webhook-hetzner-0.2.1.tgz"
  labels:
    app: cert-manager-webhook-hetzner
    chart: cert-manager-webhook-hetzner-0.2.1
    release: my-release
    heritage: Helm
spec:
  ca:
    secretName: my-release-cert-manager-webhook-hetzner-ca
