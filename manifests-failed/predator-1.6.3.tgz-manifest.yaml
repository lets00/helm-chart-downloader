---
# Source: predator/templates/serviceAccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
  name: my-release-predator
  namespace: predator-1.6.3.tgz
---
# Source: predator/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
  name: my-release-predator
  namespace: predator-1.6.3.tgz
data:
  DATABASE_TYPE: SQLITE


  SQLITE_STORAGE: /db/predator

  JOB_PLATFORM: KUBERNETES
  KUBERNETES_URL: https://kubernetes.default.svc
  KUBERNETES_NAMESPACE: predator-1.6.3.tgz
  INTERNAL_ADDRESS: http://my-release-predator.predator-1.6.3.tgz:80/v1
  PORT: "80"
  DELAY_RUNNER_MS:  "0"
  RUNNER_DOCKER_IMAGE: zooz/predator-runner:1.6
  RUNNER_CPU:  "1"
  RUNNER_MEMORY:  "256"
  INTERVAL_CLEANUP_FINISHED_CONTAINERS_MS: "0"

  ALLOW_INSECURE_TLS: "true"
  SKIP_INTERNAL_ADDRESS_CHECK: "true"



  MAX_UPLOAD_FILE_SIZE_MB: "10"
---
# Source: predator/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
  name: my-release-predator
  namespace: predator-1.6.3.tgz
rules:
- apiGroups: ["batch", "extensions"]
  resources: ["jobs"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["delete", "get", "list"]
---
# Source: predator/templates/roleBinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
  name: my-release-predator
  namespace: predator-1.6.3.tgz
subjects:
- kind: ServiceAccount
  name: my-release-predator
  namespace: predator-1.6.3.tgz
roleRef:
  kind: Role
  name: my-release-predator
  apiGroup: rbac.authorization.k8s.io
---
# Source: predator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-predator
  namespace: predator-1.6.3.tgz
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: my-release-predator
---
# Source: predator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-predator
  namespace: predator-1.6.3.tgz
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-predator
  template:
    metadata:
      labels:
        app: my-release-predator
        chart: "predator-1.6.3"
        release: "my-release"
        heritage: "Helm"
    spec:
      volumes:
        - name: sqlite
          emptyDir: {}
      
      serviceAccountName: my-release-predator
      containers:
        - name: predator
          image: zooz/predator:1.6
          imagePullPolicy: Always
          envFrom:
          - configMapRef:
              name: my-release-predator
          env:
  
          volumeMounts:
            - name: sqlite
              mountPath: /db
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            null
---
# Source: predator/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-predator-test-connection"
  labels:
    app: my-release-predator
    chart: "predator-1.6.3"
    release: "my-release"
    heritage: "Helm"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args:  ['my-release-predator:80']
  restartPolicy: Never
