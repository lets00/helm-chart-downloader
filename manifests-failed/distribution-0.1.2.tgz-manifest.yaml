---
# Source: distribution/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-distribution
  namespace: "distribution-0.1.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: distribution
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: distribution-0.1.2
automountServiceAccountToken: true
---
# Source: distribution/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-distribution
  namespace: "distribution-0.1.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: distribution
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: distribution-0.1.2
data:
  config.yml: |
    http:
      addr: :5000
      debug:
        addr: :5001
        prometheus:
          enabled: true
          path: /metrics
    log:
      level: debug
    storage:
      filesystem:
        rootdirectory: /var/lib/registry
    version: 0.1
---
# Source: distribution/templates/persistentvolumeclaim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-release-distribution
  namespace: "distribution-0.1.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: distribution
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: distribution-0.1.2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: distribution/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-distribution
  namespace: "distribution-0.1.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: distribution
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: distribution-0.1.2
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 5001
      targetPort: metrics
      protocol: TCP
  selector:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/name: distribution
---
# Source: distribution/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-distribution
  namespace: "distribution-0.1.2.tgz"
  labels:
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: distribution
    app.kubernetes.io/version: 2.8.3
    helm.sh/chart: distribution-0.1.2
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/name: distribution
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: distribution
        app.kubernetes.io/version: 2.8.3
        helm.sh/chart: distribution-0.1.2
      annotations:
        checksum/config: 637cb59d9d369da3f3312f42d108d5e44559948585e6d3bbf00e4e8212ae013b
    spec:
      serviceAccountName: my-release-distribution
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/name: distribution
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: main
          image: docker.io/distribution/distribution:2.8.3
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
          envFrom:
          ports:
            - name: http
              containerPort: 5000
          #livenessProbe: {}
          #readinessProbe: {}
          #startupProbe: {}
          volumeMounts:
            - name: etc
              mountPath: /etc/docker/registry
            - name: registry
              mountPath: /var/lib/registry
      volumes:
        - name: etc
          configMap:
            name: my-release-distribution
        - name: registry
          persistentVolumeClaim:
            claimName: my-release-distribution
