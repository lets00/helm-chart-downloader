---
# Source: voice-biometrics/charts/grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-grafana
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-7.9.10
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-grafana-admin
  - name: prometheus-grafana-secret
automountServiceAccountToken: false
---
# Source: voice-biometrics/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mongodb
  namespace: voice-biometrics-2.0.1.tgz
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.31.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: my-release-mongodb
---
# Source: voice-biometrics/charts/prometheus/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
  name: my-release-kube-state-metrics
  namespace: voice-biometrics-2.0.1.tgz
imagePullSecrets:
  []
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
  namespace: voice-biometrics-2.0.1.tgz
  annotations:
    {}
---
# Source: voice-biometrics/charts/prometheus/templates/node-exporter/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "node-exporter"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-node-exporter
  namespace: voice-biometrics-2.0.1.tgz
  annotations:
    {}
---
# Source: voice-biometrics/charts/prometheus/templates/pushgateway/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-pushgateway
  namespace: voice-biometrics-2.0.1.tgz
  annotations:
    {}
---
# Source: voice-biometrics/charts/prometheus/templates/server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
  namespace: voice-biometrics-2.0.1.tgz
  annotations:
    {}
---
# Source: voice-biometrics/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-rabbitmq
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: my-release-rabbitmq
---
# Source: voice-biometrics/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: voice-biometrics/templates/serviceaccounts/traefik.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: lumenvox
---
# Source: voice-biometrics/charts/rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-rabbitmq
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-erlang-cookie: "WVZsc28yZHZqOE8zcVRIVHlaQXJ2QmQyT0NIZ05zN0I="
---
# Source: voice-biometrics/charts/grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-grafana-envvars
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-7.9.10
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
data:
  GF_SECURITY_ADMIN_USER: "lvuser"
  GF_INSTALL_PLUGINS: ""
  GF_PATHS_PLUGINS: "/opt/bitnami/grafana/data/plugins"
  GF_AUTH_LDAP_ENABLED: "false"
  GF_AUTH_LDAP_CONFIG_FILE: "/opt/bitnami/grafana/conf/ldap.toml"
  GF_AUTH_LDAP_ALLOW_SIGN_UP: "false"
  GF_PATHS_PROVISIONING: "/opt/bitnami/grafana/conf/provisioning"
  GF_PATHS_CONFIG: "/opt/bitnami/grafana/conf/grafana.ini"
  GF_PATHS_DATA: "/opt/bitnami/grafana/data"
  GF_PATHS_LOGS: "/opt/bitnami/grafana/logs"
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
  namespace: voice-biometrics-2.0.1.tgz
data:
  alertmanager.yml: |
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
---
# Source: voice-biometrics/charts/prometheus/templates/server/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
  namespace: voice-biometrics-2.0.1.tgz
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
    - job_name: kubernetes-pods-slow
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 5m
      scrape_timeout: 30s
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: voice-biometrics-2.0.1.tgz
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_probe]
          regex: .*
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex: "9093"
          action: keep
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: voice-biometrics/charts/rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-rabbitmq-config
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = lvuser
    default_pass = CHANGEME
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = voice-biometrics-2.0.1.tgz-vhost
    #disk_free_limit.absolute = 50MB
---
# Source: voice-biometrics/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    slave-read-only yes
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: voice-biometrics/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: voice-biometrics/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: voice-biometrics/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lumenvox-configmap
  namespace: 'lumenvox'
data:
  ASPNETCORE_ENVIRONMENT: 'Production'
  ENABLE_ELASTICSEARCH: 'false'
  SERILOG_DEFAULT_LOGGING_LEVEL: 'Information'
  SERILOG_OVERRIDE_MICROSOFT_LOGGING_LEVEL: 'Information'
  SERILOG_OVERRIDE_SYSTEM_LOGGING_LEVEL: 'Information'
  SERILOG_OVERRIDE_GRPC_LOGGING_LEVEL: 'Information'
  ASPNETCORE_URLS: 'http://+:80'
  RABBIT_RETRYING_TIME_SECONDS: '60'
  LOCAL_CACHE_REFRESH_SECONDS: '21600'
  SERVICE_ADDRESSES__ASSURE_API: 'http://assure-api-service.lumenvox'
  SERVICE_ADDRESSES__TRANSACTION_SERVICE: 'http://transaction-service.lumenvox'
  SERVICE_ADDRESSES__AUDIT_SERVICE: 'http://audit-service.lumenvox'
  SERVICE_ADDRESSES__REPORTING_API: 'http://reporting-api-service.lumenvox'
  SERVICE_ADDRESSES__MANAGEMENT_API: 'http://management-api-service.lumenvox'
---
# Source: voice-biometrics/templates/configmaps/grafana-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-configmap
  namespace: lumenvox
data:
  grafana.ini: |-
    # config file version
    apiVersion: 1

    # list of datasources that should be deleted from the database
    deleteDatasources:
      - name: Prometheus
        orgId: 1

    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-operated:9090
        # access: proxy
        access: direct
        isDefault: true
---
# Source: voice-biometrics/charts/prometheus/charts/kube-state-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
  name: my-release-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["extensions", "apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
rules:
  []
---
# Source: voice-biometrics/charts/prometheus/templates/pushgateway/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-pushgateway
rules:
  []
---
# Source: voice-biometrics/charts/prometheus/templates/server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: voice-biometrics/templates/roles.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-ingress-controller
  namespace: lumenvox
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - traefik.containo.us
    resources:
      - middlewares
      - middlewaretcps
      - ingressroutes
      - traefikservices
      - ingressroutetcps
      - ingressrouteudps
      - tlsoptions
      - tlsstores
      - serverstransports
    verbs:
      - get
      - list
      - watch
---
# Source: voice-biometrics/charts/prometheus/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: kube-state-metrics-3.5.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: my-release
  name: my-release-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: my-release-kube-state-metrics
  namespace: voice-biometrics-2.0.1.tgz
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
subjects:
  - kind: ServiceAccount
    name: my-release-prometheus-alertmanager
    namespace: voice-biometrics-2.0.1.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-prometheus-alertmanager
---
# Source: voice-biometrics/charts/prometheus/templates/pushgateway/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-pushgateway
subjects:
  - kind: ServiceAccount
    name: my-release-prometheus-pushgateway
    namespace: voice-biometrics-2.0.1.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-prometheus-pushgateway
---
# Source: voice-biometrics/charts/prometheus/templates/server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
subjects:
  - kind: ServiceAccount
    name: my-release-prometheus-server
    namespace: voice-biometrics-2.0.1.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-prometheus-server
---
# Source: voice-biometrics/templates/roles.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: traefik-ingress-controller
  namespace: lumenvox
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
  - kind: ServiceAccount
    name: traefik-ingress-controller
    namespace: lumenvox
---
# Source: voice-biometrics/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: voice-biometrics/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: lumenvox
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - podtemplates
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - pods
  - deployments
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
---
# Source: voice-biometrics/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-rabbitmq-endpoint-reader
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: my-release-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-release-rabbitmq-endpoint-reader
---
# Source: voice-biometrics/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-pod-reader
  namespace: lumenvox
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pod-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: voice-biometrics-2.0.1.tgz
---
# Source: voice-biometrics/charts/grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-grafana
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-7.9.10
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - port: 3000
      targetPort: dashboard
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: grafana
---
# Source: voice-biometrics/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mongodb
  namespace: voice-biometrics-2.0.1.tgz
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.31.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: mongodb
---
# Source: voice-biometrics/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: voice-biometrics-2.0.1.tgz
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
---
# Source: voice-biometrics/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: voice-biometrics-2.0.1.tgz
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    role: primary
---
# Source: voice-biometrics/charts/prometheus/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kube-state-metrics
  namespace: voice-biometrics-2.0.1.tgz
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-3.5.2"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  
  selector:
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: my-release
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
  namespace: voice-biometrics-2.0.1.tgz
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
  selector:
    component: "alertmanager"
    app: prometheus
    release: my-release
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: voice-biometrics/charts/prometheus/templates/node-exporter/svc.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    component: "node-exporter"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-node-exporter
  namespace: voice-biometrics-2.0.1.tgz
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
  selector:
    component: "node-exporter"
    app: prometheus
    release: my-release
  type: "ClusterIP"
---
# Source: voice-biometrics/charts/prometheus/templates/pushgateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
  labels:
    component: "pushgateway"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-pushgateway
  namespace: voice-biometrics-2.0.1.tgz
spec:
  ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
  selector:
    component: "pushgateway"
    app: prometheus
    release: my-release
  type: "ClusterIP"
---
# Source: voice-biometrics/charts/prometheus/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
  namespace: voice-biometrics-2.0.1.tgz
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: "server"
    app: prometheus
    release: my-release
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: voice-biometrics/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq-headless
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
  publishNotReadyAddresses: true
---
# Source: voice-biometrics/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-rabbitmq
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: my-release
---
# Source: voice-biometrics/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: voice-biometrics/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-master
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: master
---
# Source: voice-biometrics/templates/services/cloud-assure-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: assure-api-service
  namespace: lumenvox
spec:
  selector:
    app: assure-api
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-assure-identity.yaml
apiVersion: v1
kind: Service
metadata:
  name: assure-identity-service
  namespace: lumenvox
spec:
  selector:
    app: assure-identity
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-audit.yaml
apiVersion: v1
kind: Service
metadata:
  name: audit-service
  namespace: lumenvox
spec:
  selector:
    app: audit
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-binary-storage.yaml
apiVersion: v1
kind: Service
metadata:
  name: binarystorage-service
  namespace: lumenvox
spec:
  selector:
    app: binarystorage
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-configuration.yaml
apiVersion: v1
kind: Service
metadata:
  name: configuration-service
  namespace: lumenvox
spec:
  selector:
    app: configuration
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: deployment-service
  namespace: lumenvox
spec:
  selector:
    app: deployment
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-engine-resource.yaml
apiVersion: v1
kind: Service
metadata:
  name: engineresource-service
  namespace: lumenvox
spec:
  selector:
    app: engineresource
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-license.yaml
apiVersion: v1
kind: Service
metadata:
  name: license-service
  namespace: lumenvox
spec:
  selector:
    app: license
  ports:
    - name: http
      protocol: TCP
      port: 5110
      targetPort: 5110
    - name: grpc
      protocol: TCP
      port: 5010
      targetPort: 5010
---
# Source: voice-biometrics/templates/services/cloud-management-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: management-api-service
  namespace: lumenvox
spec:
  selector:
    app: management-api
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-reporting-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: reporting-api-service
  namespace: lumenvox
spec:
  selector:
    app: reporting-api
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-reporting.yaml
apiVersion: v1
kind: Service
metadata:
  name: reporting-service
  namespace: lumenvox
spec:
  selector:
    app: reporting
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-transaction.yaml
apiVersion: v1
kind: Service
metadata:
  name: transaction-service
  namespace: lumenvox
spec:
  selector:
    app: transaction
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/cloud-voice-verifier.yaml
apiVersion: v1
kind: Service
metadata:
  name: voice-verifier-service
  namespace: lumenvox
spec:
  selector:
    app: voice-verifier
  ports:
    - name: http
      protocol: TCP
      port: 90
      targetPort: 90
    - name: grpc
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: voice-biometrics/templates/services/traefik.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik-ingress-service
  namespace: lumenvox
spec:
  type: ClusterIP
  selector:
    app: traefik-ingress-lb
  ports:
    - protocol: TCP
      name: web
      # port is the external port (outside the cluster), targetPort is the matching port in the pod
      port: 80
      targetPort: 80
    - protocol: TCP
      name: dashboard
      port: 8080
      targetPort: 8080
    - protocol: TCP
      name: grpc
      port: 9200
      targetPort: 9200
    - protocol: TCP
      name: postgres
      port: 5432
      targetPort: 5432
    - protocol: TCP
      name: rabbitmq
      port: 5672
      targetPort: 5672
    - protocol: TCP
      name: mongo
      port: 27017
      targetPort: 27017
    - protocol: TCP
      name: websecure
      port: 443
      targetPort: 443
---
# Source: voice-biometrics/charts/prometheus/templates/node-exporter/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    component: "node-exporter"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-node-exporter
  namespace: voice-biometrics-2.0.1.tgz
spec:
  selector:
    matchLabels:
      component: "node-exporter"
      app: prometheus
      release: my-release
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: "node-exporter"
        app: prometheus
        release: my-release
        chart: prometheus-14.11.1
        heritage: Helm
    spec:
      serviceAccountName: my-release-prometheus-node-exporter
      containers:
        - name: prometheus-node-exporter
          image: "quay.io/prometheus/node-exporter:v1.1.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --web.listen-address=:9100
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          resources:
            {}
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
      hostNetwork: true
      hostPID: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
# Source: voice-biometrics/charts/grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-grafana
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: grafana
    helm.sh/chart: grafana-7.9.10
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: grafana
  strategy: 
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        helm.sh/chart: grafana-7.9.10
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: grafana
      annotations:
        checksum/config: 13b64149a7f1733bbb6bd2f3a8a1b42c2143692eac2f610ce2f823c623e33471
        checksum/dashboard-provider: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    spec:
      
      serviceAccountName: my-release-grafana
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: grafana
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: grafana
                namespaces:
                  - "voice-biometrics-2.0.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      initContainers:
      containers:
        - name: grafana
          image: docker.io/bitnami/grafana:8.5.6-debian-11-r8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
          envFrom:
            - configMapRef:
                name: my-release-grafana-envvars
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-existing-secret
                  key: password
          volumeMounts:
            - name: grafana-ini
              mountPath: /opt/bitnami/grafana/conf/grafana.ini
              subPath: grafana.ini
            - name: datasources
              mountPath: /opt/bitnami/grafana/conf/provisioning/datasources
          ports:
            - name: dashboard
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: dashboard
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /api/health
              port: dashboard
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: datasources
          secret:
            secretName: prometheus-grafana-secret
        - name: grafana-ini
          configMap:
            name: grafana-configmap
---
# Source: voice-biometrics/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-mongodb
  namespace: voice-biometrics-2.0.1.tgz
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.31.5
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.31.5
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: my-release-mongodb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "voice-biometrics-2.0.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.11-debian-10-r12
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MONGODB_ROOT_USER
              value: "lvuser"
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-existing-secret
                  key: mongodb-root-password
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          emptyDir: {}
---
# Source: voice-biometrics/charts/prometheus/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kube-state-metrics
  namespace: voice-biometrics-2.0.1.tgz
  labels:
    app.kubernetes.io/name: kube-state-metrics
    helm.sh/chart: "kube-state-metrics-3.5.2"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/version: "2.2.0"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: "my-release"
    spec:
      hostNetwork: false
      serviceAccountName: my-release-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsUser: 65534
      containers:
      - name: kube-state-metrics
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        - --telemetry-port=8081
        imagePullPolicy: IfNotPresent
        image: "k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.2.0"
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
---
# Source: voice-biometrics/charts/prometheus/templates/alertmanager/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-alertmanager
  namespace: voice-biometrics-2.0.1.tgz
spec:
  selector:
    matchLabels:
      component: "alertmanager"
      app: prometheus
      release: my-release
  replicas: 1
  template:
    metadata:
      labels:
        component: "alertmanager"
        app: prometheus
        release: my-release
        chart: prometheus-14.11.1
        heritage: Helm
    spec:
      serviceAccountName: my-release-prometheus-alertmanager
      containers:
        - name: prometheus-alertmanager
          image: "quay.io/prometheus/alertmanager:v0.21.0"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --cluster.listen-address=
            - --web.external-url=http://localhost:9093

          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "/data"
              subPath: ""
        - name: prometheus-alertmanager-configmap-reload
          image: "jimmidyson/configmap-reload:v0.5.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9093/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      volumes:
        - name: config-volume
          configMap:
            name: my-release-prometheus-alertmanager
        - name: storage-volume
          emptyDir:
            {}
---
# Source: voice-biometrics/charts/prometheus/templates/pushgateway/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-pushgateway
  namespace: voice-biometrics-2.0.1.tgz
spec:
  selector:
    matchLabels:
      component: "pushgateway"
      app: prometheus
      release: my-release
  replicas: 1
  template:
    metadata:
      labels:
        component: "pushgateway"
        app: prometheus
        release: my-release
        chart: prometheus-14.11.1
        heritage: Helm
    spec:
      serviceAccountName: my-release-prometheus-pushgateway
      containers:
        - name: prometheus-pushgateway
          image: "prom/pushgateway:v1.3.1"
          imagePullPolicy: "IfNotPresent"
          args:
          ports:
            - containerPort: 9091
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
---
# Source: voice-biometrics/charts/prometheus/templates/server/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "server"
    app: prometheus
    release: my-release
    chart: prometheus-14.11.1
    heritage: Helm
  name: my-release-prometheus-server
  namespace: voice-biometrics-2.0.1.tgz
spec:
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: my-release
  replicas: 1
  template:
    metadata:
      labels:
        component: "server"
        app: prometheus
        release: my-release
        chart: prometheus-14.11.1
        heritage: Helm
    spec:
      enableServiceLinks: true
      serviceAccountName: my-release-prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.5.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "quay.io/prometheus/prometheus:v2.26.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      hostNetwork: false
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: my-release-prometheus-server
        - name: storage-volume
          emptyDir:
            {}
---
# Source: voice-biometrics/templates/deployments/cloud-assure-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assure-api
  namespace: lumenvox
  labels:
    app: assure-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: assure-api
  template:
    metadata:
      labels:
        app: assure-api
        # No Prometheus scraping for now
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: assure-api
          image: lumenvox/cloud-assure-api:2.0.0
          imagePullPolicy: Always
          ports:
            - name: web
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            requests:
              cpu: 500m
              memory: 1000Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.lumenvox'
            - name: SERVICE_ADDRESSES__VOICE_VERIFIER_SERVICE
              value: 'http://voice-verifier-service.lumenvox'
            - name: SERVICE_ADDRESSES__BINARY_STORAGE_SERVICE
              value: 'http://binarystorage-service.lumenvox'
            - name: SERVICE_ADDRESSES__ASSURE_IDENTITY_SERVICE
              value: 'http://assure-identity-service.lumenvox'
            - name: SERVICE_ADDRESSES__LICENSE_SERVICE
              value: 'http://license-service.lumenvox:5010'
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_START_DELAY_SECONDS
              value: '6'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-assure-identity.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assure-identity
  namespace: lumenvox
  labels:
    app: assure-identity
spec:
  replicas: 1
  selector:
    matchLabels:
      app: assure-identity
  template:
    metadata:
      labels:
        app: assure-identity
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: assure-identity
          image: lumenvox/cloud-assure-identity:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 800Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: 'true'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: 'false'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '100'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-audit.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit
  namespace: lumenvox
  labels:
    app: audit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audit
  template:
    metadata:
      labels:
        app: audit
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: audit
          image: lumenvox/cloud-audit:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 250m
              memory: 400Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: 'true'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: 'false'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '100'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
        - name: wait-for-rabbitmq-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-rabbitmq.lumenvox", "RabbitMQ Service"]
        - name: wait-for-rabbitmq-management-endpoint
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://lumenvox-rabbitmq.lumenvox:15672", "RabbitMQ Management Page"]
---
# Source: voice-biometrics/templates/deployments/cloud-binary-storage.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: binarystorage
  namespace: lumenvox
  labels:
    app: binarystorage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: binarystorage
  template:
    metadata:
      labels:
        app: binarystorage
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: binarystorage
          image: lumenvox/cloud-binary-storage:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 350m
              memory: 300Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: ENCRYPTION_SETTINGS__MASTER_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  key: master-encryption-key
                  name: encryption-secret
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: ENCRYPTION_SETTINGS__USE_ENCRYPTION
              value: 'true'
            - name: ENCRYPTION_SETTINGS__MASTER_KEY_PROVIDER
              value: 'EnvVariableMasterKeyService'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-configuration.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration
  namespace: lumenvox
  labels:
    app: configuration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: configuration
  template:
    metadata:
      labels:
        app: configuration
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      # Assign this pod a higher priority than others, but lower than deployment, since others are dependent on both
      priorityClassName: high-priority-nonpreempting
      containers:
        - name: configuration
          image: lumenvox/cloud-configuration:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 200Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: 'true'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: 'false'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '100'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
        - name: wait-for-rabbitmq-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-rabbitmq.lumenvox", "RabbitMQ Service"]
        - name: wait-for-rabbitmq-management-endpoint
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://lumenvox-rabbitmq.lumenvox:15672", "RabbitMQ Management Page"]
---
# Source: voice-biometrics/templates/deployments/cloud-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment
  namespace: lumenvox
  labels:
    app: deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment
  template:
    metadata:
      labels:
        app: deployment
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      # Assign this pod a higher priority than others, since others depend on this one to be running first
      priorityClassName: high-priority
      containers:
        - name: deployment
          image: lumenvox/cloud-deployment:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 150Mi
          envFrom:
            - secretRef:
                name: postgres-existing-secret
            - secretRef:
                name: mongodb-existing-secret
            - secretRef:
                name: rabbitmq-existing-secret
            - configMapRef:
                name: lumenvox-configmap
          env:
            - name: SERVICE_START_DELAY_SECONDS
              value: '0'
            - name: redis-password
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: redis-existing-secret
            - name: MockDataSettings__DeploymentsJson
              value: '[{"DeploymentId":"","DeploymentData":{"RedisConnectionString":"lumenvox-redis-master.lumenvox:6379,password=$(redis-password)","ConfigurationPostgresConnectionString":"Server=lumenvox-postgresql.lumenvox;Port=5432;UserID=lvuser;Password=$(postgresql-password);Database=cloud_configuration_db;IntegratedSecurity=true;Pooling=true;","AssureIdentityPostgresConnectionString":"Server=lumenvox-postgresql.lumenvox;Port=5432;UserID=lvuser;Password=$(postgresql-password);Database=cloud_assure_identity_db;IntegratedSecurity=true;Pooling=true;","BinaryStorageConnectionString":{"CollectionName":"BinaryStorage","ConnectionString":"mongodb://lvuser:$(mongodb-root-password)@lumenvox-mongodb.lumenvox:27017","DatabaseName":"cloud_binary_db","StorageType":"MongoDb"},"TransactionPostgresConnectionString":"Server=lumenvox-postgresql.lumenvox;Port=5432;UserID=lvuser;Password=$(postgresql-password);Database=cloud_transaction_db;IntegratedSecurity=true;Pooling=true;","AuditPostgresConnectionString":"Server=lumenvox-postgresql.lumenvox;Port=5432;UserID=lvuser;Password=$(postgresql-password);Database=cloud_audit_db;IntegratedSecurity=true;Pooling=true;","ReportingOptionsMaxPerPageAllowed":100}}]'
            - name: DB_SETTINGS__DEPLOYMENT_POSTGRES_CONNECTION_STRING
              value: 'Server=lumenvox-postgresql.lumenvox;Port=5432;User ID=lvuser;Password=$(postgresql-password);Database=cloud_deployment_db;Integrated Security=true;Pooling=true;'
            - name: DB_SETTINGS__COMMAND_TIMEOUT_SECONDS
              value: '100'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: ENCRYPTION_SETTINGS__MASTER_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  key: master-encryption-key
                  name: encryption-secret
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: 'true'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: 'false'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '100'
      initContainers:
        - name: init-postgres
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-postgresql.lumenvox", "Postgres"]
        - name: init-mongodb
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-mongodb.lumenvox", "MongoDB"]
        - name: init-redis
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-redis-master.lumenvox", "Redis"]
        - name: wait-for-rabbitmq-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-rabbitmq.lumenvox", "RabbitMQ Service"]
        - name: wait-for-rabbitmq-management-endpoint
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://lumenvox-rabbitmq.lumenvox:15672", "RabbitMQ Management Page"]
---
# Source: voice-biometrics/templates/deployments/cloud-engine-resource.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: engineresource
  namespace: lumenvox
  labels:
    app: engineresource
spec:
  replicas: 1
  selector:
    matchLabels:
      app: engineresource
  template:
    metadata:
      labels:
        app: engineresource
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: engineresource
          image: lumenvox/cloud-engine-resource:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 1000Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
---
# Source: voice-biometrics/templates/deployments/cloud-license.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: license
  namespace: lumenvox
  labels:
    app: license
spec:
  replicas: 1
  selector:
    matchLabels:
      app: license
  template:
    metadata:
      labels:
        app: license
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: license
          image: lumenvox/cloud-license:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 5110
            - name: grpc
              containerPort: 5010
          readinessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 5m
              memory: 30Mi
          envFrom:
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: postgresql-password
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: "postgres-existing-secret"
            - name: DEPLOYMENT_DB_CONNECTION
              value: 'Server=lumenvox-postgresql.lumenvox;Port=5432;User ID=lvuser;Password=$(postgresql-password);Database=cloud_deployment_db;Integrated Security=true;Pooling=true;'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            
            - name: LICENSE_CLUSTER_GUID
              value: 'GET-CLUSTER-GUID-FROM-LUMENVOX'
            - name: LICENSE_REPORT_FREQUENCY_MINS
              value: '1440'
            - name: LICENSE_REPORT_SYNC_HOUR
              value: '1'
            - name: LICENSE_REPORT_SYNC_MIN
              value: '0'
            - name: VERBOSE_DB_LOGGING
              value: ''
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-management-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-api
  namespace: lumenvox
  labels:
    app: management-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-api
  template:
    metadata:
      labels:
        app: management-api
        # No Prometheus scraping for now
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: management-api
          image: lumenvox/cloud-management-api:2.0.0
          imagePullPolicy: Always
          ports:
            - name: web
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 150Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.lumenvox'
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_START_DELAY_SECONDS
              value: '6'
      initContainers:
        - name: wait-for-rabbitmq-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-rabbitmq.lumenvox", "RabbitMQ Service"]
        - name: wait-for-rabbitmq-management-endpoint
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://lumenvox-rabbitmq.lumenvox:15672", "RabbitMQ Management Page"]
---
# Source: voice-biometrics/templates/deployments/cloud-reporting-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting-api
  namespace: lumenvox
  labels:
    app: reporting-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reporting-api
  template:
    metadata:
      labels:
        app: reporting-api
        # No Prometheus scraping for now
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: reporting-api
          image: lumenvox/cloud-reporting-api:2.0.0
          imagePullPolicy: Always
          ports:
            - name: web
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 12
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 12
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.lumenvox'
            - name: SERVICE_ADDRESSES__BINARY_STORAGE_SERVICE
              value: 'http://binarystorage-service.lumenvox'
            - name: SERVICE_ADDRESSES__REPORTING_SERVICE
              value: 'http://reporting-service.lumenvox'
            - name: ENABLE_AUDIT_LOG
              value: 'false'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_START_DELAY_SECONDS
              value: '6'
      initContainers:
        - name: wait-for-reporting-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://reporting-service.lumenvox:90/health", "Reporting Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-reporting.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting
  namespace: lumenvox
  labels:
    app: reporting
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reporting
  template:
    metadata:
      labels:
        app: reporting
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: reporting
          image: lumenvox/cloud-reporting:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 12
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 12
            periodSeconds: 5
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/cloud-transaction.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transaction
  namespace: lumenvox
  labels:
    app: transaction
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transaction
  template:
    metadata:
      labels:
        app: transaction
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: transaction
          image: lumenvox/cloud-transaction:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 500m
              memory: 1000Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: SERVICE_START_DELAY_SECONDS
              value: '5'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: 'true'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: 'false'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '100'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
        - name: wait-for-rabbitmq-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["nslookup2"]
          args: ["lumenvox-rabbitmq.lumenvox", "RabbitMQ Service"]
        - name: wait-for-rabbitmq-management-endpoint
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://lumenvox-rabbitmq.lumenvox:15672", "RabbitMQ Management Page"]
---
# Source: voice-biometrics/templates/deployments/cloud-voice-verifier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-verifier
  namespace: lumenvox
  labels:
    app: voice-verifier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: voice-verifier
  template:
    metadata:
      labels:
        app: voice-verifier
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        linkerd.io/inject: enabled
    spec:
      containers:
        - name: voice-verifier
          image: lumenvox/cloud-voice-verifier:2.0.0
          imagePullPolicy: Always
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: 0
            periodSeconds: 5
          resources:
            requests:
              cpu: 1000m
              memory: 750Mi
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - secretRef:
                name: rabbitmq-existing-secret
          env:
            - name: ENGINE_RESOURCE_SERVICE_MAX_RECEIVE_SIZE
              value: '52428800'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host=lumenvox-rabbitmq.lumenvox;port=5672;username=lvuser;password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '30'
            - name: SERVICE_ADDRESSES__ENGINE_RESOURCE_SERVICE
              value: 'http://engineresource-service.lumenvox'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.lumenvox'
            - name: SERVICE_START_DELAY_SECONDS
              value: '6'
      initContainers:
        - name: wait-for-deployment-service
          image: lumenvox/cloud-init-tools:2.0.0
          imagePullPolicy: Always
          command: ["curl2"]
          args: ["http://deployment-service.lumenvox:90/health", "Deployment Service"]
---
# Source: voice-biometrics/templates/deployments/traefik.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: traefik-ingress-controller
  namespace: lumenvox
  labels:
    app: traefik-ingress-lb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik-ingress-lb
  template:
    metadata:
      labels:
        app: traefik-ingress-lb
        name: traefik-ingress-lb
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: traefik-ingress-lb
          image: traefik:v2.5
          ports:
          - name: web
            containerPort: 80
          - name: websecure
            containerPort: 443
          - name: dashboard
            containerPort: 8080
          - name: postgres
            containerPort: 5432
          - name: mongo
            containerPort: 27017
          args:
          - --api.insecure
          - --accesslog
          - --log.level=DEBUG
          - --entrypoints.web.Address=:80
          - --entrypoints.websecure.Address=:443
          - --entrypoints.postgres.Address=:5432
          - --entrypoints.rabbitmq.Address=:5672
          - --entrypoints.mongo.Address=:27017
          - --providers.kubernetescrd
          - --providers.kubernetesingress
          - --tracing.jaeger=true
          - --tracing.jaeger.samplingServerURL=http://jaeger-agent:5778/sampling
          - --tracing.jaeger.localAgentHostPort=jaeger-agent:6831
          - --metrics.prometheus=true
---
# Source: voice-biometrics/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.16.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: voice-biometrics-2.0.1.tgz
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      role: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.16.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "voice-biometrics-2.0.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:13
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-existing-secret
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "lvuser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-existing-secret
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "postgres"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "lvuser" -d "dbname=postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "lvuser" -d "dbname=postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: voice-biometrics/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-rabbitmq
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: my-release-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.32.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: c192b1d19bd6b765e82d562402ffb91dbf556e9f5d1089134ca5be5e17a2a95b
        checksum/secret: b1d663dd70ed7a85360f5a488b201fefb3f2fc7deda283f65a02b2562416cef3
    spec:
      
      serviceAccountName: my-release-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: my-release
                namespaces:
                  - "voice-biometrics-2.0.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.16-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "my-release-rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: my-release-rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "lvuser"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-existing-secret
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: my-release-rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
# Source: voice-biometrics/charts/redis/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-master
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-15.7.6
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: master
  serviceName: my-release-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-15.7.6
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 3e74f89654b5f9af18600614db69ef43cc9a908bc673014baa48816d8085739a
        checksum/health: a2cca28ea2e555cbd9f01f171b7790c34d002b950477e6a05410cabd48f09e8e
        checksum/scripts: 57f247215cf249782535e1978b7aaa277cbe55f8c7b27c79dd4c3d764fc3bb83
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: master
                namespaces:
                  - "voice-biometrics-2.0.1.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.6-debian-10-r97
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-existing-secret
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: redis-data
          emptyDir: {}
---
# Source: voice-biometrics/charts/rabbitmq/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-release-rabbitmq
  namespace: "voice-biometrics-2.0.1.tgz"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.32.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  ingressClassName: "nginx"
  rules:
    - host: rabbitmq.testmachine.com
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: my-release-rabbitmq
                port:
                  name: http-stats
---
# Source: voice-biometrics/templates/ingresses/cloud-assure-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: assure-api-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: assure-api.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: assure-api-service
                port:
                  number: 80
---
# Source: voice-biometrics/templates/ingresses/cloud-management-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: management-api-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: management-api.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: management-api-service
                port:
                  number: 80
---
# Source: voice-biometrics/templates/ingresses/cloud-reporting-api.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reporting-api-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: reporting-api.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: reporting-api-service
                port:
                  number: 80
---
# Source: voice-biometrics/templates/ingresses/grafana.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: grafana.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lumenvox-grafana
                port:
                  number: 3000
---
# Source: voice-biometrics/templates/ingresses/jaeger.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: lumenvox
  name: jaeger-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: jaeger.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lumenvox-jaeger-query
                port:
                  number: 16686
---
# Source: voice-biometrics/templates/ingresses/linkerd-dashboard-ingress.yaml
# apiVersion: networking.k8s.io/v1beta1 # for k8s < v1.19
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: linkerd-viz
  annotations:
    nginx.ingress.kubernetes.io/upstream-vhost: $service_name.$namespace.svc.cluster.local:8084
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header Origin "";
      proxy_hide_header l5d-remote-ip;
      proxy_hide_header l5d-server-id;
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: web-ingress-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
spec:
  rules:
  - host: linkerd.testmachine.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web
            port:
              number: 8084
---
# Source: voice-biometrics/templates/ingresses/prometheus-alertmanager.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-alertmanager-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: prometheus-alertmanager.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lumenvox-prometheus-alertmanager
                port:
                  number: 80
---
# Source: voice-biometrics/templates/ingresses/prometheus.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: lumenvox
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
    - host: prometheus.testmachine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: lumenvox-prometheus-server
                port:
                  number: 80
