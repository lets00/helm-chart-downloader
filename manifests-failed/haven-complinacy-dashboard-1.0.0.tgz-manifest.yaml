---
# Source: haven-complinacy-dashboard/templates/serviceaccount.yaml
# A service account is needed to get the permissions.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-admin
  namespace: haven-complinacy-dashboard-1.0.0.tgz
  annotations:
    serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"my-release-dashboard"}}'
---
# Source: haven-complinacy-dashboard/templates/clusterrolebinding.yaml
# The permissions for the service account.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-release-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: my-release-admin
    namespace: haven-complinacy-dashboard-1.0.0.tgz
---
# Source: haven-complinacy-dashboard/templates/service.yaml
# The service will route to the deployment (pointing to the OAuth proxy).
apiVersion: v1
kind: Service
metadata:
  namespace: haven-complinacy-dashboard-1.0.0.tgz
  name: my-release-dashboard
  annotations:
    service.alpha.openshift.io/serving-cert-secret-name: proxy-tls
spec:
  ports:
    - name: my-release-dashboard
      port: 443
      targetPort: 8443
  selector:
    app: my-release-dashboard
---
# Source: haven-complinacy-dashboard/templates/deployment.yaml
# The deployment will run the application
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: haven-complinacy-dashboard-1.0.0.tgz
  name: my-release-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-dashboard
  template:
    metadata:
      labels:
        app: my-release-dashboard
    spec:
      serviceAccountName: my-release-admin # Needed for the permissions
      volumes:
        - name: proxy-tls
          secret:
            secretName: proxy-tls
      containers:

        # The first container is the OAuth Proxy
        - name: oauth-proxy
          image: docker.io/openshift/oauth-proxy:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8443
              name: public
          args:
            - '--https-address=:8443'
            - '--provider=openshift'
            - '--openshift-service-account=my-release-admin'
            - '--upstream=http://localhost:8442'
            - '--tls-cert=/etc/tls/private/tls.crt'
            - '--tls-key=/etc/tls/private/tls.key'
            - '--cookie-secret=NWRmWmUxT3hhVnFob2w5Nw==' #random: python -c 'import os,base64; print base64.urlsafe_b64encode(os.urandom(16))'
          #          - --openshift-sar='{"namespace":"kube-system","services","verb":"list"}'
          volumeMounts:
            - mountPath: /etc/tls/private
              name: proxy-tls

          # The second container is the application
        - name: app
          image: docker.io/j0113/haven-compliancy-dashboard:1.3
          imagePullPolicy: IfNotPresent
---
# Source: haven-complinacy-dashboard/templates/route.yaml
# Make the application accessible
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  namespace: haven-complinacy-dashboard-1.0.0.tgz
  name: my-release-dashboard
spec:
  to:
    kind: Service
    name: my-release-dashboard
  tls:
    termination: Reencrypt
