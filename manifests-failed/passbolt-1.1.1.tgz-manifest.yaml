---
# Source: passbolt/charts/mariadb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-mariadb
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: passbolt/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: my-release-redis
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
---
# Source: passbolt/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-passbolt-sa-common
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: common
    app.kubernetes.io/type: sa
---
# Source: passbolt/charts/mariadb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-mariadb
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mariadb-root-password: "cm9vdA=="
  mariadb-password: "Q0hBTkdFTUU="
  mariadb-replication-password: "Q0hBTkdFTUU="
---
# Source: passbolt/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-redis
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  redis-password: "Q0hBTkdFTUU="
---
# Source: passbolt/templates/secret-tls-ingress.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-tls-ingress-0
  labels:
    app.kubernetes.io/action: tls-ingress
    app.kubernetes.io/type: sec
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQVBjNTJMaWIzZ1JpTkJXNEtPSmF2Q0F3RFFZSktvWklodmNOQVFFTEJRQXcKRXpFUk1BOEdBMVVFQXhNSWRtRjFiSFF0WTJFd0hoY05NalF3TmpJd01UUTFPREl6V2hjTk1qVXdOakl3TVRRMQpPREl6V2pBWk1SY3dGUVlEVlFRREV3NXdZWE56WW05c2RDNXNiMk5oYkRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU90ZHdPS0hrSW5NQ3RQMS9TWEVaSVF6Ukp6Mk1aK2g1Rno5ZjNETnNCY2sKUXFDckNnMGNJWHRsZVZGQTJOMkVRMStSc0dhVGNHNytOZlJ4ZFB1QTlCMUV6bDZaYVBJZEJteUZoSE5yTUxWbgpMWUhMZ0JBb1JHVW9uckNxWElCcGovMWxSaVlONkVNR0VqbXEvQ3cwSE9IcWI1RmRUaHJsYXRlMFU5R3pzUmowClFGbXprNm1vQ0F4OFJvOGo0amUrbHM2TjlVc3ovK1RxVm91V1l0TkUweVo0YXdJTVRDUkpiSjN4THVTM3hjUy8KM3pYWVNvTFFLQ3NCQjd6Ym5IdnhJY1RWTXBFbzVteTlFQXVKZDhwN1NzMkRuV1M1MHlvemNXOXA0aTg5OWFBOApDOVFvTTRjcHlCeTVWVkQ2RHppZzdaZUhVMjRVUk5Za2JpTkEwT0x3TmRjQ0F3RUFBYU43TUhrd0RnWURWUjBQCkFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUIKQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRk1YcG1zQmkyTHB2bWREbUpQODg5T1J2aHZWL01Ca0dBMVVkRVFRUwpNQkNDRG5CaGMzTmliMngwTG14dlkyRnNNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI3YWhxMUVFYWxJZk1XCjlKRENmSXlQWTV0TGM4MlRzcFlXTHJRK1V6Tk1PWk5Mb3JMUlorV25mYjh6WjFlY2syZktYZkQxdUdZOGtMSlEKYkl1VFVXSjdjczYxbnF1WTN3LytxU1h1dWQ2WWZkaHpRRVFwSmdHblhvTTlqVWhTa2F2VURlQzRLT1MwNmR1NQpEQ3pLcG1DSEgzeXRaLzVUcUpGWDFQR2JKUHRUVUhoMWF2a2lISTNrMEF3TmdqV0FJRWdpUzQrYnBzdkhSVHhRCkgvYkxVSmNpU25ITHZKNENwUjZMb3JIK2EyYnJoRmRZQ1FtWmNIVGF0TjNreERVbDFZZG5zbEMvbkw1c0VJUWUKN2d1SjNoeHVsZnowYVdnSzJxQ3JCOThoMDREdktVMjZrRDRQbncwLzhocjdJcUZMSG1xWWJ2WFZNRzdvNzlCWQpPeDArTytXbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNjEzQTRvZVFpY3dLMC9YOUpjUmtoRE5FblBZeG42SGtYUDEvY00yd0Z5UkNvS3NLCkRSd2hlMlY1VVVEWTNZUkRYNUd3WnBOd2J2NDE5SEYwKzREMEhVVE9YcGxvOGgwR2JJV0VjMnN3dFdjdGdjdUEKRUNoRVpTaWVzS3BjZ0dtUC9XVkdKZzNvUXdZU09hcjhMRFFjNGVwdmtWMU9HdVZxMTdSVDBiT3hHUFJBV2JPVApxYWdJREh4R2p5UGlONzZXem8zMVN6UC81T3BXaTVaaTAwVFRKbmhyQWd4TUpFbHNuZkV1NUxmRnhML2ZOZGhLCmd0QW9Ld0VIdk51Y2UvRWh4TlV5a1NqbWJMMFFDNGwzeW50S3pZT2RaTG5US2pOeGIybmlMejMxb0R3TDFDZ3oKaHluSUhMbFZVUG9QT0tEdGw0ZFRiaFJFMWlSdUkwRFE0dkExMXdJREFRQUJBb0lCQUhLRlc2VGRjV2FhOFduUQo5eXU1TTI5ZndyTGMxNmhralVqeHoyQ0R0SHFPR2gwekcrRGxIeVY3YWx3dXdWYUhWSURiMG9rV2xFNXRRck45CndQM2U4T2lNNGgwRmFCcm1KSW9KTFRrN25xZWxYRzhiSldTM014QkZnM0ZTYzAvSURWZXVQME9rNEs0NzlnSTUKUUJvQ0FVdXJWajNVdUh3OXhJN1FIemlaeGtIdEo3bDlaMXJxR292dmJ1MDNLdU1STnlaL0x0RmkyVDJDZW1PQwpYdDhDdVlxOUkwUHdhNUdkNGdaZ3pYdEJsRFZ5Y1ArUjl5dG8zc0JiYWJRNXd5Y29TY2pLS1hQaU91dG9QNkNlClNaZUNTY1BmblQ2dWs2Ni9tL2RTYlJ5cUxObnErME15dHl4MlIrQXMzaEpWT21MTlF5eUlOV2ZsWEN4Z1kxWUgKeGhkTDJJRUNnWUVBOFQreXVsMGNMcEpmd21hd2k0Y1VtVkxRZTExWVROcXNINGs1N3E4ZENDa0l3NDV3RDBQQQozUEpJY1d5bGw2YXY2RjVjS2lCQStzS2owcE5ZeDcrRTBnM3lpVWlFY0FXYnRidklmeGo5WnNJMW0vY05meEtyCmI4Y3FyUmFHTHcrMU1YNjl5VCttVmdSWGdJV0lZSksvWjR6aFUzRTVMcVVYMzFkdjF2eTVPTFVDZ1lFQStjSDUKWkZmV2tEWlduZC8wd0RHSHZaVCtiZG10b1EzZnZiUnJFK3ZodUNEVnFMbzZYUGtlc0lUNUhsb0ZkOHFFU2F6eAp1M0hZTHdEaGJoRjJrYTJQUGZyTnRMdEJEVm1lSGY5Y2NTSHJFQTJLbi9Mb3JrajFPeVdnYUh2U2k1TEdwcFZGCmQ0UXBmd1JPVWlyNzY1alluTk8xaHR2aTQ3SnM1YlI2VGNqSXg5c0NnWUVBeUhHWVdtZktacGVQb01JWnBaUlMKZFNIdHZ0Skw3Mjh3Mi9MMGczQlR1dGY5UkI0dzFUNENISkhoeHZ2eWloSWd6Znk0cnZlbGhiUDYwWmREaUpPRQpFOU1xMVEyL25DUE13QzZKNDdBcnV4bFoyWUJuWWxGc3g2Ni9zcGlvWEttOGJxZFRvTWFWdVpwWjZac0pPTlEwCjNDQ2RodXJvQysxMzdFV0YweWFmN3BFQ2dZRUFwbEExKzB6R3MyZUx6RHVMSnNTVXlIakQ2SENRdjNPV3J5UEsKUGd6UVZTV0FRWWdwUHlvZzlwakZyeUZ4RExFTjRHWEszdkJUYmhGZkRFV1N1RFZqOG5qbHJGa1pXNE4yMkREbwo1T2thTjZsY3kyQWM4NW5mdTFBMS9mMmVXWlVXdFcwblFndisrZmJyRktwTThUanAzWnpZLzRIREY2OEQ5djUwCmh3R1NPZ3NDZ1lBa2VGd05CR09PbUtqblRtVDNBMFRvNXRnc2Q2TSsxRGlNOGpJT2szNHBXMWR5NDk3WWNrMHUKODNnSkdNWmlpblNoUEEvTzBUN3gvZEJoRHNTYzRUYVRKZEIwRGNKS0tUWjFjT2M4MTBhRUtlYVZJdWJaWS9Gawo3QU51N1kwNVgrQ1NmNDVjSjlpSXFOUFNvc0tYSkJaZGVqcllZenJmOVJhaXM0NDVWaW42ZFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRZW1iNVJaVXRqdXl3dGhiUW1QZElyakFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdoMllYVnNkQzFqWVRBZUZ3MHlOREEyTWpBeE5EVTRNakphRncweU5UQTJNakF4TkRVNApNakphTUJNeEVUQVBCZ05WQkFNVENIWmhkV3gwTFdOaE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTJ5ZkF4dE4yNmx4WlBwNXo2eXBXQ2dlZmkvWWVSKy93QXp1c3B1UG9BV3dsSVBQMUNwcFcKWHZ1aHVUL0RZcU5wdkFBMW1naVJySnQwU2VpWjlvSWpRbm1xaG1uNjBYd2hMNDY0cjJ0Uk5QQVdHSWxoTGoveApML1BxMXV2WWViQ0N1bmlGclJzM3dWM0tpdTVwZnNQWTJmNVljMHVTOHg0OUVJVWl4YVBCSHFQZlVnaFBFSlJQCnVlRUJQemdoVE51eXp6ekt2aXpaMHg3Skx4T0NnRmluRFE5TzFTQy9GUXVTT1loOHc0Zjk4QzNtRlhpL1V4Y04KOFhwZnd2eXpQWUpabjk2c3BtWUxHMTU1d2c5MjZ0aUY3K1MyeS9VYnI2eDVQRjdWdy82OGhrcGxENjVpSnp1cQpUTW5VVjRtOFhZVUNVZjlORGhwelBQWStrQ1RBNDhwRkpRSURBUUFCbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DCkFxUXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0hRWURWUjBPQkJZRUZNWHBtc0JpMkxwdm1kRG1KUDg4OU9Sdmh2Vi9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBRGc5c3pJVGk5dzVVWjFROVBERU9MTlZmdmhRcXQrUlc2MVI5cDRmcFhnVUVSWFZaMTJJenppZlQ1CnU4R1NnZFRjMXgyaHgyS0VrMnZnbHVUSEJvTm9sV01TWWRlVmJMNzNGRnJuVVhlc1BZQzUrN0NtaERCb1BjaWMKcDNDb3c2VXA3bUxjSmZjSC9YcGVmdlplM0cwZDFVOGhNUGs0NkpQbnZubm9ydDNKZlpCaHc2VWZIVzVBY0VkUwovU2N5S1gxeW9aVW9UVFl1MGpPWEN2c1VaUzVnVFg1TlV5TXhSVUdmWlVXSUV6NVlhQ2FTVnNIOWZFNVgwc2V5CnlEcUFQRUFLczA0U3o1alA0OENlMHI0d2xPQlNHb21USGtnR1RjYzFHdTUyVThDWnRoeVJCZytFc2tZeGc4RVAKM015NnJQdlIxS0lFOERsK0tuRWZkMXNhdFRpYQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMnlmQXh0TjI2bHhaUHA1ejZ5cFdDZ2VmaS9ZZVIrL3dBenVzcHVQb0FXd2xJUFAxCkNwcFdYdnVodVQvRFlxTnB2QUExbWdpUnJKdDBTZWlaOW9JalFubXFobW42MFh3aEw0NjRyMnRSTlBBV0dJbGgKTGoveEwvUHExdXZZZWJDQ3VuaUZyUnMzd1YzS2l1NXBmc1BZMmY1WWMwdVM4eDQ5RUlVaXhhUEJIcVBmVWdoUApFSlJQdWVFQlB6Z2hUTnV5enp6S3ZpeloweDdKTHhPQ2dGaW5EUTlPMVNDL0ZRdVNPWWg4dzRmOThDM21GWGkvClV4Y044WHBmd3Z5elBZSlpuOTZzcG1ZTEcxNTV3ZzkyNnRpRjcrUzJ5L1VicjZ4NVBGN1Z3LzY4aGtwbEQ2NWkKSnp1cVRNblVWNG04WFlVQ1VmOU5EaHB6UFBZK2tDVEE0OHBGSlFJREFRQUJBb0lCQURxVHBJNUFSVitjOFdtdwpWcEY3em1WOTVpSTExYUFxdkw5UWV2UmNwRTJGQjJPSWNXMjFGUExzVlN5N28xREJGdWplTVhXTFpzeDQvSnNvCnBjWml3R1ByT3k0VU02czhmMjVEdW8rQW9zTUFqUmRmMk83UXZubXZ1NHhZbTVMakgvNFJhc0Y3TGVyc1U4L1EKcTdmclJ4SDFUdFQ2VlR2UVVFZ1RIZGt2ek5XUVByY1NGL3ZNUXJ5L1g0Tlp5YUErUlFseEJvTEZMRDhPOUNUWgpGMUFZNE8xNEdqVnpLY0NBMnBkOVEvYmtKYlU5RHo5eG1oc1hiTnFSQ2xHN2xFa1VtbzlYZTMxMmJaaURDTTRPCnYwY0tLUm1NSUE3cDlXS1RWbmpnYXNvNURyVmJndzhtU0ZWSVR0NjN2ZkR5N0tDSVZpMjBrYmZQSitiamowT3UKcTh0aFpTRUNnWUVBNEI1ZUVnTVhKeW1VRWZGSDhNWnVJUXBtWFIxVmkxcnhSQlRSZk5IeTJOeTVkd2l1ZGxUcgpxUGxudGQ1bVppLzhxSDRkSkpDQjBnRCt0OFc4V2VJQlBoMm9JN1JIUlhvRjZwUDFuV2FXdnNQbUtKaHhqUzJrCkVZM2R1UnpDa0s0NS96Ny9PcXdVaU5qczIycWE5QVdUMmdIbnlJQ2ZoSTNhYVBDMTBLeGlKbmtDZ1lFQStsU2oKU0FBYytUTElFbHFQaDhsK3NZQThvSk8xRkZTQVRySTIrS3YwUzVNM093V3J2clUrSWR5UCtKaWpVTm5NMVMzRgphMC9MUEN4ZjBVYzNXS2t5S25XL0VKeWdsek9HT1g2aCtra0EvWTVqd0V4NW1aUHN4TDRzTFpUNzRqWHhqaWZpCkY4Ym5odFVHYy9RdTllUE5WNFJFMUsyQWpHcVRQd3dmRkJSUW1RMENnWUVBaUZ1eG5IL28zRmo5MEJUZlVtMUkKb0MyMXJqMmt5STdpY0N2Q2NaRkRraEpwZlRUNUFPSVdKODdtL001OXV2ckRYTGl1Zm9xMWtkSXRLQjdVeEZNdgpzbDFVNmJSTUVNZDNSZ3dUeWxxYXFTS0RySHRqeXlQVHlTSnBuckVTNS9nNUxVVmxBSXVtU3NUQkI1YkxCR0ZJClhjSC9CZ3pNQVZoVlpMZmZ4MEM2enZFQ2dZRUFseUV1Q3JQMnlnUDhnZ2dtaXlYODFSREVpWFZqWjBpMHhjNFcKSGY5Q1Y3WWpMQUQ2ZFFKYTVucVFlTmMrRWZ2TURBKzhGbE53TVgzZ3d5b3BvZDlVS0FvNk5iODV2TThnZyttTgp4TnI2UEJvUTR2SElvQTJNYmlNWjdOTDdWdENXYXVwdE4wbWdVZWllSXJjUyt1UnkvaGtlclArcWtodHRsaXl0ClBxUWRIS2tDZ1lBemxDdTdOT3lDODJxVGEyVHU3UDNwa2xPdE1LREltS1pTcFJMaDQrc0g1bSt5MHN4UEhlZjgKeUw5K3I5clE4V0hXKzJ2VEhhSG9MNklUTWlsWm85NTNoRlZQSjRpUTF6YmNOY3JwbHdNY0pUZldQZm1UakVyNAoyZDFGajJTQW9DUHY2VTRiVlB5c0luaiszcys2UXVjdjJCeUxGaGJWVkxlSll0OC9yTjFvUXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: passbolt/templates/secret-tls-internal.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-tls-internal
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: tls-internal
    app.kubernetes.io/type: sec
type: Opaque
data:
  server.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRRnBRc1hjZFZJcU1XUFkrcEFxRlJpekFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdoMllYVnNkQzFqWVRBZUZ3MHlOREEyTWpBeE5EVTRNakphRncweU5UQTJNakF4TkRVNApNakphTUVNeFFUQS9CZ05WQkFNVE9HMTVMWEpsYkdWaGMyVXRjR0Z6YzJKdmJIUXRjR0Z6YzJKdmJIUXRNUzR4CkxqRXVkR2Q2TFhOMll5NWpiSFZ6ZEdWeUxteHZZMkZzTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdXVHZ05TanhQbVdpN25yWmM2RTcrRTNNQkRDQmtYa1NrbUN6MUNIZ1lKOU9KMXBJU0JGcApKb0MwSDRTSzVYSFAzbHFxQWpOTGNmU2VoalpITjdrYnVCaTZKYk5wV0NQcWZLNGwwenBkTlNSQWZPUkJjNWtGCkR6aWtaZDZ2eFdGcTM3bDYrQTgxL2hoYVp1R1c5bnVJQlJvYlNndllvbXhIR3NiSXMwUFEzOWs0U3c5YUNtVVkKdzkrVmt3YXQ0L1dRaU1tWUYxUC9PUndzcVNsS3Q4QXF4NkdkbFYrZ3QrLzkzZGtBYU81Ukh6d2laa2FSNDF6TApJaG5MV1c3U2JSMWlDeVJnVUUrSTZPeFkzWlhoUVRVK2M1NUMrSjYxLzZ1ZHpMZlJkVVNpREVBckNVT2lVaE9sCkVNNmdVaW1BQnRWSFpyd3lmajNEaU53RFpYVGJHR2RYTXdJREFRQUJvMkF3WGpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpId1lEVlIwakJCZ3dGb0FVSndBb3ZGOUd0Ty9MK3VZYSsvMERBbWFEOWlBd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTlF4bHNvL0dMMXJIbmNiR01Hd0lNM1M4RDkycjBPcWZBRCtRODFuRGVMUkhPTDdOcUIzWkVjVmJPZU4KdjIzRW1hNXdjNUpaOEFlVVkzOHFMc1JLeVAwNm1wSHpUR2NXYVdxZ0tlNEFVcDl3ZlZXQkpoc3RrN3BGU01jRQpuN0JWQWQybjc2QnJGckRuRk1tcmFmaTRJU0dnelE2K0t0NmI0Vm8ra1lZRXdMMjJLQkZsS3I0V2gvL0FvaWd1CmlaOTdIQkpvZjBUQkQzNUxTQ0VNZ0RqRlVOSy8wM0ZUeW1xdndhdWd2MDNpNUFHQm45RVRwS2x3ZjBEbHg1dmgKeDBmdEl6OXBwU2FQZElBSjM3OWxORC9XcjIya0FQWnU3eVhzWjFsVjBrWktHRGQyVzhiaUhOczNwNzRaTE42MQpBdEVGaXI2RTFwNTYxWXM2QXExYTgwbnE0a3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  server-key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdXVHZ05TanhQbVdpN25yWmM2RTcrRTNNQkRDQmtYa1NrbUN6MUNIZ1lKOU9KMXBJClNCRnBKb0MwSDRTSzVYSFAzbHFxQWpOTGNmU2VoalpITjdrYnVCaTZKYk5wV0NQcWZLNGwwenBkTlNSQWZPUkIKYzVrRkR6aWtaZDZ2eFdGcTM3bDYrQTgxL2hoYVp1R1c5bnVJQlJvYlNndllvbXhIR3NiSXMwUFEzOWs0U3c5YQpDbVVZdzkrVmt3YXQ0L1dRaU1tWUYxUC9PUndzcVNsS3Q4QXF4NkdkbFYrZ3QrLzkzZGtBYU81Ukh6d2laa2FSCjQxekxJaG5MV1c3U2JSMWlDeVJnVUUrSTZPeFkzWlhoUVRVK2M1NUMrSjYxLzZ1ZHpMZlJkVVNpREVBckNVT2kKVWhPbEVNNmdVaW1BQnRWSFpyd3lmajNEaU53RFpYVGJHR2RYTXdJREFRQUJBb0lCQUd4anpxTG1rejFvZjU2bgovQlZYcjh1dGU2WDJhRC95by9Yb1JvVEQvVHF0U3d3Q0RpaFdpTkUvRnJtdEMwNVd1NFN3dXlnNWpnbVRJcHFmClFxRXNLTXFXOU9oRzdkT2tTUzExYUJUaUpndGJjbGU5bjhTblBNcitSRU9kYS84a0tIT0lSYTA0VFUySjNHME4KYkp5Yk8ySVNLVC9DTFN6UGRsSXVkMXVaK3J6SlpXeXJ6eHNIam1JNlZpc21kSnczaDVCQTFEa3huU1Zac0pUeAoyL2o0alppb3BWZllxRXRvUks1MnpZRWVYaUtKbzFhbDd6RitybndROSt5Z2QwZTBVV1dXRHFudFJGZjlMMmREClZOQnZSZnZzN2hha3BtL2tnUkJqV0FDSC82R05qcFMvWkpWWXJRU1hpbDViVDI4b0NDdkpIWHFvSU05c256eEkKVjdCU1ZXRUNnWUVBOThpWEdOaGU4eFEyN1JDYW9rY09kakZiVlZsNlZXbm0ycWpSd1dMZ0pia3U4YU8wcWMwOQpmZVR5alVMNnIya0R4TUt0UFc0czlTcjg4RmF0RlA3ZVFQc1NsSHFUeHMzMVE0Y3BaY0l3SEJrNHNhNTd4VnlECkxXdEJoN1VCR3FpYll1ZUhOTzFaVnY5RU5sWVZBVmNLd0U5OGFIQmM1NThkYk5IemUxbkVEQU1DZ1lFQXdSUUsKK2M1L2dCMzFRaHZmVkFCeGlrTndXOWxnZVM4SWo0aWxmazdEVTBZb1J5eFpWSGJKTlpnSzNaWkc3eEhFNCtDRApvMHpkcTVXVTZXbW1YUDRaa1diRHhWUS90TmUwL0FaY2MrMS9wd3lpNGNTSURPWm9BTkZrcXI5dmRhQW55Ym5VCmptT3p5alJKK1kyVzdsSTA1ekx2TkZwQk10SzR3aEJrc0xhODJSRUNnWUVBMUNvWjF0aE9WTzFXS3A4eENRcTIKdzFWMzB4a091dHczSTd1eC8xamVmTzZYMTZoSkphdnJuMFRPdTA1Q3dMZTIxbCtyWHhKYnhJSE9teXhjZjhITQpKTy9XOVBRUVhRWTFvR0MzZmI1TTI0SnRIUmMrTzd2L1JvQzBWN01SQXZha05vZnhLY3loMXZBMFJDSnBVZ0JwCjRFa3ZTVzRNM3ZkTGhzWXZLY3V2Sm1rQ2dZQlJmM05PbEhKUEV0WW1iSHR0Q3E3aVRLc05xZ2pGdml1ZjRtN3cKakxCMzR3STNZS25vTkNla1BxUS9laUpBNFVBNWE5aEV3cnBDcGVYd1RFOFRxNUlCUk41WDJjTDJRNks2U3JrVgptZWNyRFBObjFyd1NyZUt5amJBdlBwVCtrbmFZK0o2VzU5REpCaDgvZmh0NlJ5cmJlQzF0N0xiZWpBRytzSXEvCjZMSjM4UUtCZ1FEenlZMi9pcmJ6Q1dHQUFLS3R2TVJPWWJPZGdRaGdKZjBiQ2laTTU4RDM3QnF1dGlKdjRsVHoKZXo0Y1cybTVOU2RxQ3kzRzhTK0xvZkdGS2VJSUVyVnNEWFJ5RzNPbWZyaG5YWmZjVXBSSUNHSzhmWTMvc1Y2NQpPK29WRmVTY2VQdW12eFhnOW5CV0FyNldheVE3bStoMmhCb1R1ZlNWMW5GTTh4NU9qSHhtOEE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lSQVBIUWN5aTA3MjlaZDFpeEs5bWtJVjB3RFFZSktvWklodmNOQVFFTEJRQXcKRXpFUk1BOEdBMVVFQXhNSWRtRjFiSFF0WTJFd0hoY05NalF3TmpJd01UUTFPREl5V2hjTk1qVXdOakl3TVRRMQpPREl5V2pBVE1SRXdEd1lEVlFRREV3aDJZWFZzZEMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFPRTBsRzdjMlZqMUFLb1lTdGZYTFZOdEg3T2xWN0Q4YWR3Vm1PU0JlQS9xV2c5cEtic3cKS0VtdGp2c2QxeE5NWTdOS2R4bThjTGNaUmxvbktrWVhLb1dhVlFPOFRzMTJKY3ZVWmd4SVp0ZDJhYTRtek0rSwpPL1NoOGR0YmZ6Q0QybzdJWXJDSGVLVnJSczdXY3FDa2VHTU04cGYvR3NvWGtKVUpEWW9jVmhWUWIwY3BxRHQ1CjFIdzN4cHhYZC81a0Z5SXlhK1ppS3RNNUtiUGFGd1RjckN1RjF6VWRyM1VQdWg5cG54amd3bFc3ajhER1EyVnMKbmtLMEo2WkxHMGxneHJZK0orQVhaQUpXQ1FkcUp4QzZoQzFZTTEyY1N1UGNRUVBHdU8zR1hjQng0MnEvdHRyMgpaTU9UcGNKTWZ2YkprUnZxN1JDVVR1WFFxU3dDc1hxbUlUVUNBd0VBQWFOaE1GOHdEZ1lEVlIwUEFRSC9CQVFECkFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQUQKQVFIL01CMEdBMVVkRGdRV0JCUW5BQ2k4WDBhMDc4djY1aHI3L1FNQ1pvUDJJREFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQUM4R1E5R3A2T0FSeXcvNGtpb3Z6d21CWWJZRkFnSVBKcmFQYWM2NjRhTStZLzlvVTVwV1Q3SUd4CnpLbmxHalZTeFJiVDQ0bjJvY3pIT2txUGx1Tk9yT0RHOU5qd1RZK0dETkpRVUI5YWJISzE5NXNDYXRHWkZKckgKRER2SVJqZjBCS2IvR3FmT2F2OHhIMjhocDdtR3c1ekVFa2YxVHdoU3pSa1kydno4RlFidytNZHVDNW1uRTFVVgpabkFOOHR1Y2tpOE1NVWhGSEFVUHZOczJIenJTaFlDNDhscnJOaUFIeHNUVlFxb00wcTRMNmQ5bGw5K21sQTdlCkFiSVZZUkdUL0tYbkh0TUljektYeC8yYVM3OWVXKy9YWWhSYm5tMlpYaUxaVzNRMUx4Mi9UUzd3YkpkNUhYSjAKVTg0TUR3c2Z6cUc4V0VBMmNrNHg4Z1pjVHZIdGNnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNFRTVWJ0elpXUFVBcWhoSzE5Y3RVMjBmczZWWHNQeHAzQldZNUlGNEQrcGFEMmtwCnV6QW9TYTJPK3gzWEUweGpzMHAzR2J4d3R4bEdXaWNxUmhjcWhacFZBN3hPelhZbHk5Um1ERWhtMTNacHJpYk0KejRvNzlLSHgyMXQvTUlQYWpzaGlzSWQ0cFd0R3p0WnlvS1I0WXd6eWwvOGF5aGVRbFFrTmloeFdGVkJ2UnltbwpPM25VZkRmR25GZDMvbVFYSWpKcjVtSXEwemtwczlvWEJOeXNLNFhYTlIydmRRKzZIMm1mR09EQ1ZidVB3TVpEClpXeWVRclFucGtzYlNXREd0ajRuNEJka0FsWUpCMm9uRUxxRUxWZ3pYWnhLNDl4QkE4YTQ3Y1pkd0hIamFyKzIKMnZaa3c1T2x3a3grOXNtUkcrcnRFSlJPNWRDcExBS3hlcVloTlFJREFRQUJBb0lCQVFDVVlUeGJQdy9GV01legpTb1lsYUJUcEhzRUFjRFF5M0Z3ek1kZW0xdGJ3Ull4SkV4VDN6R2IvQkdkc2RPQzhTbHgyU04zb0N3eUkxeEpQClcvYXliNWtJcGdMVmowQ3NodWVvUUsxcjhsZ3dKa2pEQWJWNEdMQWdJb05qOEFrQlFoN0NiS3o1ZW9pM0ZOTjIKZkR6U013dE8xNzBQQUhuNkpVU1JyWUZLT2hsTnVKRHV5cVZaK1ZTTHdJb2NpMUYzekVkdy9qY1dSNFNyK1F3TgppZVpXejBSek03QjBpNXBHWEpVU3B3QUxSLzhTNDlvMGtldU5pbjhGYThXQnMzTkIwdmVScVRVck40U1krckU5Cld4dUllc0FnYldQbktHU3h5dFFuaTJzMXRXdWpLbGNxcFJtclFqenl2R0pqN0NGbnhYWnhjVHZxbVNiaUV0TVYKc0V5VTY2S1JBb0dCQVBJUWdKem1qUGhwdkhFRk4vdUtIa0RERlZvYnkzLzZHakZKdUVrOUY1T21sRUc5OEVIUQpLRHoyRm90QUloRlRPMDVYcm4vR1R3M2plUnJ6aGFtd3V0V1orYmFTeGJrYlJmNFBoTTZ0eVBBRmk2Y25wV2p3CjVwUHNpaFZ6bzNabDZGdEFoTFZKeEFFdmYyUEhVaU5LTzc4VmtOZXl4ZmIxWnpDdUF1WXduZGJmQW9HQkFPNHIKbkozdXB0QzAyWXF1V3RzVXZWMG9nelZLRURBSVpkcDRxRmFEMTI1K2ZoSllmWVVRQjc2R0RHcGVOZnh0MXd0MQpCVVFXVVNuczBJR0NGRkFtcVluSUpaS3dsYWlmZnZlTHRScTFBYk44eUkvSjJPNk5aSHU1K0RTVW56VkcwWkF5CnlqZWNYZk9kbXNLLzBZK2NHa3NHQzZha3dRZmlCK0M5SjdGRVZ1NXJBb0dBU0xqdWVyVEUrMGlBNVkrRXp4d2kKbEtCSFJPZit6amJzTVl5TlFldUpyc0VuMzB4WjV0dkxpdXovdnR3SW9CM2FQbUlYT2FueFRDSGYyMW4zK1EvdwpRWVhkd0p6OXErdm1yam9wVXhKZ3dNTlp2bUVwejRvNEs0NnZ1VndoYXN1WTcvbEZKVlhBL2Y0d0RtRHVhMDI4Ci8xNVNRb3NoOEZ5dm9LOVdqYU5qZUE4Q2dZQkJPcWFKUnB4ZldyaWQxOFRBYmJ5ekwrNUhnUUpQOVd6WDJlWFkKMUFFRG5SY3dOUllqaEZGcXA5SHNxK0xEUU4zOW9FNFI2TDdQNmJEdFYwL3k1N1BWTFlERTNTSVA3YWJiYTJMdApicGVKcmVwTUh5OFBucC9mbHY1WWdEL2VXb2Y0bzBCbzNLV0tuQ2FQb2ZObURvM1E4Rlh1alA3bEJzMjdpbks5CmhRYitBd0tCZ1FDdUk4SEhqa08zbmg2WlZqNE5UYU1QVVhOOEJGWG1zRW5WeXViTFRzYUxhZU5DNVNRMnJZaysKeGtsaGdCSitPV1V6VDJKWHpuTTZqeEFIci9yOVE2SnhPUUMyOUNGYnRsWG80NU1TUUQxSUM1bzJYdnkxMFpiMgpDdlYvd0JQaXBvdkpRVHV6bEFDTU9GeDFrZ3Z5ZitMOXg5ODMzSlJBeGgvNlQwYm5hNmhQYmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: passbolt/charts/mariadb/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mariadb-primary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    plugin_dir=/opt/bitnami/mariadb/plugin
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mariadb/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: passbolt/charts/mariadb/templates/secondary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-mariadb-secondary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: secondary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mariadb
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    tmpdir=/opt/bitnami/mariadb/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    log-error=/opt/bitnami/mariadb/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mariadb/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    default-character-set=UTF8
    
    [manager]
    port=3306
    socket=/opt/bitnami/mariadb/tmp/mysql.sock
    pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
---
# Source: passbolt/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-configuration
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
  sentinel.conf: |-
    dir "/tmp"
    port 26379
    sentinel monitor mymaster my-release-redis-node-0.my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local 6379 2
    sentinel down-after-milliseconds mymaster 60000
    sentinel failover-timeout mymaster 180000
    sentinel parallel-syncs mymaster 1
    # User-supplied sentinel configuration:
    # End of sentinel configuration
---
# Source: passbolt/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-health
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_sentinel.sh: |-
    #!/bin/bash
    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_SENTINEL_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  parse_sentinels.awk: |-
    /ip/ {FOUND_IP=1}
    /port/ {FOUND_PORT=1}
    /runid/ {FOUND_RUNID=1}
    !/ip|port|runid/ {
      if (FOUND_IP==1) {
        IP=$1; FOUND_IP=0;
      }
      else if (FOUND_PORT==1) {
        PORT=$1;
        FOUND_PORT=0;
      } else if (FOUND_RUNID==1) {
        printf "\nsentinel known-sentinel mymaster %s %s %s", IP, PORT, $0; FOUND_RUNID=0;
      }
    }
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: passbolt/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-redis-scripts
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
data:
  start-node.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libos.sh
    . /opt/bitnami/scripts/liblog.sh
    . /opt/bitnami/scripts/libvalidations.sh

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    REDISPORT=$(get_port "$HOSTNAME" "REDIS")

    HEADLESS_SERVICE="my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local"

    if [ -n "$REDIS_EXTERNAL_MASTER_HOST" ]; then
        REDIS_SERVICE="$REDIS_EXTERNAL_MASTER_HOST"
    else
        REDIS_SERVICE="my-release-redis.passbolt-1.1.1.tgz.svc.cluster.local"
    fi

    SENTINEL_SERVICE_PORT=$(get_port "my-release-redis" "SENTINEL")
    validate_quorum() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            quorum_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel master mymaster"
        else
            quorum_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel master mymaster"
        fi
        info "about to run the command: $quorum_info_command"
        eval $quorum_info_command | grep -Fq "s_down"
    }

    trigger_manual_failover() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            failover_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel failover mymaster"
        else
            failover_command="REDISCLI_AUTH="\$REDIS_PASSWORD" redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel failover mymaster"
        fi

        info "about to run the command: $failover_command"
        eval $failover_command
    }

    get_sentinel_master_info() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 99 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_TLS_CERT_FILE} --key ${REDIS_TLS_KEY_FILE} --cacert ${REDIS_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster"
        else
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 99 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name mymaster"
        fi

        info "about to run the command: $sentinel_info_command"
        retry_while "eval $sentinel_info_command" 2 1
    }

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"

    # check if there is a master
    master_in_persisted_conf="$(get_full_hostname "$HOSTNAME")"
    master_port_in_persisted_conf="$REDIS_MASTER_PORT_NUMBER"
    master_in_sentinel="$(get_sentinel_master_info)"
    redisRetVal=$?

    if [[ $redisRetVal -ne 0 ]]; then
        if [[ "$master_in_persisted_conf" == "$(get_full_hostname "$HOSTNAME")" ]]; then
            # Case 1: No active sentinel and in previous sentinel.conf we were the master --> MASTER
            info "Configuring the node as master"
            export REDIS_REPLICATION_MODE="master"
        else
            # Case 2: No active sentinel and in previous sentinel.conf we were not master --> REPLICA
            info "Configuring the node as replica"
            export REDIS_REPLICATION_MODE="replica"
            REDIS_MASTER_HOST=${master_in_persisted_conf}
            REDIS_MASTER_PORT_NUMBER=${master_port_in_persisted_conf}
        fi
    else
        # Fetches current master's host and port
        REDIS_SENTINEL_INFO=($(get_sentinel_master_info))
        info "Current master: REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})"
        REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}

        if [[ "$REDIS_MASTER_HOST" == "$(get_full_hostname "$HOSTNAME")" ]]; then
            # Case 3: Active sentinel and master it is this node --> MASTER
            info "Configuring the node as master"
            export REDIS_REPLICATION_MODE="master"
        else
            # Case 4: Active sentinel and master is not this node --> REPLICA
            info "Configuring the node as replica"
            export REDIS_REPLICATION_MODE="replica"
        fi
    fi

    if [[ -n "$REDIS_EXTERNAL_MASTER_HOST" ]]; then
      REDIS_MASTER_HOST="$REDIS_EXTERNAL_MASTER_HOST"
      REDIS_MASTER_PORT_NUMBER="${REDIS_EXTERNAL_MASTER_PORT}"
    fi

    if [[ -f /opt/bitnami/redis/mounted-etc/replica.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
    fi

    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    echo "" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-port $REDISPORT" >> /opt/bitnami/redis/etc/replica.conf
    echo "replica-announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis/etc/replica.conf
    ARGS=("--port" "${REDIS_PORT}")

    if [[ "$REDIS_REPLICATION_MODE" = "slave" ]] || [[ "$REDIS_REPLICATION_MODE" = "replica" ]]; then
        ARGS+=("--replicaof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
    fi
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    exec redis-server "${ARGS[@]}"

  start-sentinel.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libos.sh
    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libfile.sh

    HEADLESS_SERVICE="my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local"
    REDIS_SERVICE="my-release-redis.passbolt-1.1.1.tgz.svc.cluster.local"

    get_port() {
        hostname="$1"
        type="$2"

        port_var=$(echo "${hostname^^}_SERVICE_PORT_$type" | sed "s/-/_/g")
        port=${!port_var}

        if [ -z "$port" ]; then
            case $type in
                "SENTINEL")
                    echo 26379
                    ;;
                "REDIS")
                    echo 6379
                    ;;
            esac
        else
            echo $port
        fi
    }

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    SERVPORT=$(get_port "$HOSTNAME" "SENTINEL")
    REDISPORT=$(get_port "$HOSTNAME" "REDIS")
    SENTINEL_SERVICE_PORT=$(get_port "my-release-redis" "SENTINEL")

    sentinel_conf_set() {
        local -r key="${1:?missing key}"
        local value="${2:-}"

        # Sanitize inputs
        value="${value//\\/\\\\}"
        value="${value//&/\\&}"
        value="${value//\?/\\?}"
        [[ "$value" = "" ]] && value="\"$value\""

        replace_in_file "/opt/bitnami/redis-sentinel/etc/sentinel.conf" "^#*\s*${key} .*" "${key} ${value}" false
    }
    sentinel_conf_add() {
        echo $'\n'"$@" >> "/opt/bitnami/redis-sentinel/etc/sentinel.conf"
    }
    host_id() {
        echo "$1" | openssl sha1 | awk '{print $2}'
    }
    get_sentinel_master_info() {
        if is_boolean_yes "$REDIS_SENTINEL_TLS_ENABLED"; then
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 99 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT --tls --cert ${REDIS_SENTINEL_TLS_CERT_FILE} --key ${REDIS_SENTINEL_TLS_KEY_FILE} --cacert ${REDIS_SENTINEL_TLS_CA_FILE} sentinel get-master-addr-by-name mymaster"
        else
            sentinel_info_command="REDISCLI_AUTH="\$REDIS_PASSWORD" timeout 99 redis-cli -h $REDIS_SERVICE -p $SENTINEL_SERVICE_PORT sentinel get-master-addr-by-name mymaster"
        fi
        info "about to run the command: $sentinel_info_command"
        retry_while "eval $sentinel_info_command" 2 1
    }

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"

    master_in_persisted_conf="$(get_full_hostname "$HOSTNAME")"
    if ! get_sentinel_master_info && [[ "$master_in_persisted_conf" == "$(get_full_hostname "$HOSTNAME")" ]]; then
        # No master found, lets create a master node
        export REDIS_REPLICATION_MODE="master"

        REDIS_MASTER_HOST=$(get_full_hostname "$HOSTNAME")
        REDIS_MASTER_PORT_NUMBER="$REDISPORT"
    else
        export REDIS_REPLICATION_MODE="replica"

        # Fetches current master's host and port
        REDIS_SENTINEL_INFO=($(get_sentinel_master_info))
        info "printing REDIS_SENTINEL_INFO=(${REDIS_SENTINEL_INFO[0]},${REDIS_SENTINEL_INFO[1]})"
        REDIS_MASTER_HOST=${REDIS_SENTINEL_INFO[0]}
        REDIS_MASTER_PORT_NUMBER=${REDIS_SENTINEL_INFO[1]}
    fi

    if [[ -n "$REDIS_EXTERNAL_MASTER_HOST" ]]; then
      REDIS_MASTER_HOST="$REDIS_EXTERNAL_MASTER_HOST"
      REDIS_MASTER_PORT_NUMBER="${REDIS_EXTERNAL_MASTER_PORT}"
    fi

    cp /opt/bitnami/redis-sentinel/mounted-etc/sentinel.conf /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nsentinel auth-pass %s %s" "mymaster" "$REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nrequirepass %s" "$REDIS_PASSWORD" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    printf "\nsentinel myid %s" "$(host_id "$HOSTNAME")" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf

    if [[ -z "$REDIS_MASTER_HOST" ]] || [[ -z "$REDIS_MASTER_PORT_NUMBER" ]]
    then
        # Prevent incorrect configuration to be written to sentinel.conf
        error "Redis master host is configured incorrectly (host: $REDIS_MASTER_HOST, port: $REDIS_MASTER_PORT_NUMBER)"
        exit 1
    fi

    sentinel_conf_set "sentinel monitor" "mymaster "$REDIS_MASTER_HOST" "$REDIS_MASTER_PORT_NUMBER" 2"

    add_known_sentinel() {
        hostname="$1"
        ip="$2"

        if [[ -n "$hostname" && -n "$ip" && "$hostname" != "$HOSTNAME" ]]; then
            sentinel_conf_add "sentinel known-sentinel mymaster $(get_full_hostname "$hostname") $(get_port "$hostname" "SENTINEL") $(host_id "$hostname")"
        fi
    }
    add_known_replica() {
        hostname="$1"
        ip="$2"

        if [[ -n "$ip" && "$(get_full_hostname "$hostname")" != "$REDIS_MASTER_HOST" ]]; then
            sentinel_conf_add "sentinel known-replica mymaster $(get_full_hostname "$hostname") $(get_port "$hostname" "REDIS")"
        fi
    }

    # Add available hosts on the network as known replicas & sentinels
    for node in $(seq 0 $((3-1))); do
        hostname="my-release-redis-node-$node"
        ip="$(getent hosts "$hostname.$HEADLESS_SERVICE" | awk '{ print $1 }')"
        add_known_sentinel "$hostname" "$ip"
        add_known_replica "$hostname" "$ip"
    done

    echo "" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-hostnames yes" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel resolve-hostnames yes" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-port $SERVPORT" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    echo "sentinel announce-ip $(get_full_hostname "$HOSTNAME")" >> /opt/bitnami/redis-sentinel/etc/sentinel.conf
    exec redis-server /opt/bitnami/redis-sentinel/etc/sentinel.conf --sentinel
  prestop-sentinel.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libos.sh

    HEADLESS_SERVICE="my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local"

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    run_sentinel_command() {
        if is_boolean_yes "$REDIS_SENTINEL_TLS_ENABLED"; then
            redis-cli -h "$REDIS_SERVICE" -p "$REDIS_SENTINEL_PORT" --tls --cert "$REDIS_SENTINEL_TLS_CERT_FILE" --key "$REDIS_SENTINEL_TLS_KEY_FILE" --cacert "$REDIS_SENTINEL_TLS_CA_FILE" sentinel "$@"
        else
            redis-cli -h "$REDIS_SERVICE" -p "$REDIS_SENTINEL_PORT" sentinel "$@"
        fi
    }
    sentinel_failover_finished() {
      REDIS_SENTINEL_INFO=($(run_sentinel_command get-master-addr-by-name "mymaster"))
      REDIS_MASTER_HOST="${REDIS_SENTINEL_INFO[0]}"
      [[ "$REDIS_MASTER_HOST" != "$(get_full_hostname $HOSTNAME)" ]]
    }

    REDIS_SERVICE="my-release-redis.passbolt-1.1.1.tgz.svc.cluster.local"

    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"

    if ! sentinel_failover_finished; then
        echo "I am the master pod and you are stopping me. Starting sentinel failover"
        if retry_while "sentinel_failover_finished" "20" 1; then
            echo "Master has been successfuly failed over to a different pod."
            exit 0
        else
            echo "Master failover failed"
            exit 1
        fi
    else
        exit 0
    fi
  prestop-redis.sh: |
    #!/bin/bash

    . /opt/bitnami/scripts/libvalidations.sh
    . /opt/bitnami/scripts/libos.sh

    run_redis_command() {
        if is_boolean_yes "$REDIS_TLS_ENABLED"; then
            redis-cli -h 127.0.0.1 -p "$REDIS_TLS_PORT" --tls --cert "$REDIS_TLS_CERT_FILE" --key "$REDIS_TLS_KEY_FILE" --cacert "$REDIS_TLS_CA_FILE" "$@"
        else
            redis-cli -h 127.0.0.1 -p "$REDIS_PORT" "$@"
        fi
    }
    is_master() {
        REDIS_ROLE=$(run_redis_command role | head -1)
        [[ "$REDIS_ROLE" == "master" ]]
    }

    HEADLESS_SERVICE="my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local"

    get_full_hostname() {
        hostname="$1"
        full_hostname="${hostname}.${HEADLESS_SERVICE}"
        echo "${full_hostname}"
    }

    run_sentinel_command() {
        if is_boolean_yes "$REDIS_SENTINEL_TLS_ENABLED"; then
            redis-cli -h "$REDIS_SERVICE" -p "$REDIS_SENTINEL_PORT" --tls --cert "$REDIS_SENTINEL_TLS_CERT_FILE" --key "$REDIS_SENTINEL_TLS_KEY_FILE" --cacert "$REDIS_SENTINEL_TLS_CA_FILE" sentinel "$@"
        else
            redis-cli -h "$REDIS_SERVICE" -p "$REDIS_SENTINEL_PORT" sentinel "$@"
        fi
    }
    sentinel_failover_finished() {
        REDIS_SENTINEL_INFO=($(run_sentinel_command get-master-addr-by-name "mymaster"))
        REDIS_MASTER_HOST="${REDIS_SENTINEL_INFO[0]}"
        [[ "$REDIS_MASTER_HOST" != "$(get_full_hostname $HOSTNAME)" ]]
    }

    REDIS_SERVICE="my-release-redis.passbolt-1.1.1.tgz.svc.cluster.local"

    # redis-cli automatically consumes credentials from the REDISCLI_AUTH variable
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    [[ -f "$REDIS_PASSWORD_FILE" ]] && export REDISCLI_AUTH="$(< "${REDIS_PASSWORD_FILE}")"


    if is_master && ! sentinel_failover_finished; then
        echo "I am the master pod and you are stopping me. Pausing client connections."
        # Pausing client write connections to avoid data loss
        run_redis_command CLIENT PAUSE "22000" WRITE

        echo "Issuing failover"
        # if I am the master, issue a command to failover once
        run_sentinel_command failover "mymaster"
        echo "Waiting for sentinel to complete failover for up to 20s"
        retry_while "sentinel_failover_finished" "20" 1
    else
        exit 0
    fi
---
# Source: passbolt/templates/configmap-app-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-passbolt-cm-app-php
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: app-php
    app.kubernetes.io/type: cm
data:
  app.php: |
    <?php
    use Cake\Cache\Engine\FileEngine;
    use Cake\Database\Connection;
    use Cake\Database\Driver\Mysql;
    use Cake\Error\ExceptionRenderer;
    use Cake\Log\Engine\FileLog;

    return [
        /**
         * Debug Level:
         *
         * Production Mode:
         * false: No error messages, errors, or warnings shown.
         *
         * Development Mode:
         * true: Errors and warnings shown.
         */
        'debug' => filter_var(env('DEBUG', false), FILTER_VALIDATE_BOOLEAN),
        'debugKit' => false,

        /**
         * Configure basic information about the application.
         *
         * - namespace - The namespace to find app classes under.
         * - defaultLocale - The default locale for translation, formatting currencies and numbers, date and time.
         * - encoding - The encoding used for HTML + database connections.
         * - base - The base directory the app resides in. If false this
         *   will be auto detected.
         * - dir - Name of app directory.
         * - webroot - The webroot directory.
         * - wwwRoot - The file path to webroot.
         * - baseUrl - To configure CakePHP to *not* use mod_rewrite and to
         *   use CakePHP pretty URLs, remove these .htaccess
         *   files:
         *      /.htaccess
         *      /webroot/.htaccess
         *   And uncomment the baseUrl key below.
         * - fullBaseUrl - A base URL to use for absolute links.
         * - imageBaseUrl - Web path to the public images directory under webroot.
         * - cssBaseUrl - Web path to the public css directory under webroot.
         * - jsBaseUrl - Web path to the public js directory under webroot.
         * - paths - Configure paths for non class based resources. Supports the
         *   `plugins`, `templates`, `locales` subkeys, which allow the definition of
         *   paths for plugins, view templates and locale files respectively.
         */
        'App' => [
            'namespace' => 'App',
            'encoding' => env('APP_ENCODING', 'UTF-8'),
            'defaultLocale' => 'en_UK',
            'base' => env('APP_BASE', false),
            'dir' => 'src',
            'webroot' => 'webroot',
            'wwwRoot' => WWW_ROOT,
            // 'baseUrl' => env('APP_BASE_URL'),
            'fullBaseUrl' => env('APP_FULL_BASE_URL', false),
            'imageBaseUrl' => 'img/',
            'cssBaseUrl' => 'css/',
            'jsBaseUrl' => 'js/',
            //
            // Customization of paths is not supported in passbolt v3
            // Default is overridden directly in bootstrap.php
            //
            //'paths' => [
            //    'plugins' => [ROOT . DS . 'plugins' . DS],
            //    'templates' => [ROOT . DS . 'templates' . DS],
            //    'locales' => [RESOURCES . 'locales' . DS],
            //],
        ],

        /**
         * Security and encryption configuration
         *
         * - salt - A random string used in security hashing methods.
         *   The salt value is also used as the encryption key.
         *   You should treat it as extremely sensitive data.
         */
        'Security' => [
            'salt' => env('SECURITY_SALT', '__SALT__'),
        ],

        /**
         * Apply timestamps with the last modified time to static assets (js, css, images).
         * Will append a querystring parameter containing the time the file was modified.
         * This is useful for busting browser caches.
         *
         * Set to true to apply timestamps when debug is true. Set to 'force' to always
         * enable timestamping regardless of debug value.
         */
        'Asset' => [
            // 'timestamp' => true,
            // 'cacheTime' => '+1 year'
        ],

        /**
         * Configure the cache adapters.
         */
        'Cache' => [
            'default' => [
                'className' => 'Redis',
                'prefix' => env('CACHE_PREFIX_ORG', 'passbolt'),
                'server' => env('CACHE_CAKE_DEFAULT_SERVER', '127.0.0.1'),
                'database' => (int)env('CACHE_DEFAULT_DATABASE', 1),
                'password' => env('CACHE_CAKE_DEFAULT_PASSWORD', ''),
                'port' => env('CACHE_CAKE_DEFAULT_PORT', 6379),
            ],

            /**
             * Configure the cache used for general framework caching.
             * Translation cache files are stored with this configuration.
             * Duration will be set to '+2 minutes' in bootstrap.php when debug = true
             * If you set 'className' => 'Null' core cache will be disabled.
             */
            '_cake_core_' => [
                'className' => 'Redis',
                'duration' => '+1 week',
                'server' => env('CACHE_CAKE_DEFAULT_SERVER', '127.0.0.1'),
                'database' => (int)env('CACHE_CAKE_CORE_DATABASE', 2),
                'password' => env('CACHE_CAKE_DEFAULT_PASSWORD', ''),
                'port' => env('CACHE_CAKE_DEFAULT_PORT', 6379),
            ],

            /**
             * Configure the cache for model and datasource caches. This cache
             * configuration is used to store schema descriptions, and table listings
             * in connections.
             * Duration will be set to '+2 minutes' in bootstrap.php when debug = true
             */
            '_cake_model_' => [
                'className' => 'Redis',
                'duration' => '+1 week',
                'server' => env('CACHE_CAKE_DEFAULT_SERVER', '127.0.0.1'),
                'database' => (int)env('CACHE_CAKE_MODEL_DATABASE', 3),
                'password' => env('CACHE_CAKE_DEFAULT_PASSWORD', ''),
                'port' => env('CACHE_CAKE_DEFAULT_PORT', 6379),
            ],
        ],

        /**
         * Configure the Error and Exception handlers used by your application.
         *
         * By default errors are displayed using Debugger, when debug is true and logged
         * by Cake\Log\Log when debug is false.
         *
         * In CLI environments exceptions will be printed to stderr with a backtrace.
         * In web environments an HTML page will be displayed for the exception.
         * With debug true, framework errors like Missing Controller will be displayed.
         * When debug is false, framework errors will be coerced into generic HTTP errors.
         *
         * Options:
         *
         * - `errorLevel` - int - The level of errors you are interested in capturing.
         * - `trace` - boolean - Whether or not backtraces should be included in
         *   logged errors/exceptions.
         * - `log` - boolean - Whether or not you want exceptions logged.
         * - `exceptionRenderer` - string - The class responsible for rendering
         *   uncaught exceptions. If you choose a custom class you should place
         *   the file for that class in src/Error. This class needs to implement a
         *   render method.
         * - `skipLog` - array - List of exceptions to skip for logging. Exceptions that
         *   extend one of the listed exceptions will also be skipped for logging.
         *   E.g.:
         *   `'skipLog' => ['Cake\Network\Exception\NotFoundException', 'Cake\Network\Exception\UnauthorizedException']`
         * - `extraFatalErrorMemory` - int - The number of megabytes to increase
         *   the memory limit by when a fatal error is encountered. This allows
         *   breathing room to complete logging or error handling.
         */
        'Error' => [
            'errorLevel' => E_ALL,
            'exceptionRenderer' => ExceptionRenderer::class,
            'skipLog' => [],
            'log' => true,
            'trace' => true,
            'ignoredDeprecationPaths' => [],
        ],

        /**
         * Debugger configuration
         *
         * Define development error values for Cake\Error\Debugger
         *
         * - `editor` Set the editor URL format you want to use.
         *   By default atom, emacs, macvim, phpstorm, sublime, textmate, and vscode are
         *   available. You can add additional editor link formats using
         *   `Debugger::addEditor()` during your application bootstrap.
         * - `outputMask` A mapping of `key` to `replacement` values that
         *   `Debugger` should replace in dumped data and logs generated by `Debugger`.
         */
        'Debugger' => [
            'editor' => 'phpstorm',
        ],

        /**
         * Email configuration.
         *
         * By defining transports separately from delivery profiles you can easily
         * re-use transport configuration across multiple profiles.
         *
         * You can specify multiple configurations for production, development and
         * testing.
         *
         * Each transport needs a `className`. Valid options are as follows:
         *
         *  Mail   - Send using PHP mail function
         *  Smtp   - Send using SMTP
         *  Debug  - Do not send the email, just return the result
         *
         * You can add custom transports (or override existing transports) by adding the
         * appropriate file to src/Mailer/Transport. Transports should be named
         * 'YourTransport.php', where 'Your' is the name of the transport.
         */
        'EmailTransport' => [
            'default' => [
                'className' => env('EMAIL_TRANSPORT_DEFAULT_CLASS_NAME', 'Smtp'),
                /*
                 * The keys host, port, timeout, username, password, client and tls
                 * are used in SMTP transports
                 */
                'host' => env('EMAIL_TRANSPORT_DEFAULT_HOST', 'localhost'),
                'port' => env('EMAIL_TRANSPORT_DEFAULT_PORT', 25),
                'timeout' => env('EMAIL_TRANSPORT_DEFAULT_TIMEOUT', 30),
                /*
                 * It is recommended to set these options through your environment or passbolt.php
                 */
                'username' => env('EMAIL_TRANSPORT_DEFAULT_USERNAME', null),
                'password' => env('EMAIL_TRANSPORT_DEFAULT_PASSWORD', null),
                'client' => env('EMAIL_TRANSPORT_DEFAULT_CLIENT', null),
                'tls' => env('EMAIL_TRANSPORT_DEFAULT_TLS', null),
                'url' => env('EMAIL_TRANSPORT_DEFAULT_URL', null),

            ],
            'Debug' => [
                'className' => 'Debug'
            ],
        ],

        /**
         * Email delivery profiles
         *
         * Delivery profiles allow you to predefine various properties about email
         * messages from your application and give the settings a name. This saves
         * duplication across your application and makes maintenance and development
         * easier. Each profile accepts a number of keys. See `Cake\Mailer\Email`
         * for more information.
         */
        'Email' => [
            'default' => [
                'transport' => env('EMAIL_DEFAULT_TRANSPORT', 'default'),
                'from' => [
                    env('EMAIL_DEFAULT_FROM', 'you@localhost.test') => env('EMAIL_DEFAULT_FROM_NAME', 'Passbolt')
                ],
                //'charset' => 'utf-8',
                //'headerCharset' => 'utf-8',
            ],
        ],

        /**
         * Connection information used by the ORM to connect
         * to your application's datastores.
         * Do not use periods in database name - it may lead to error.
         * See https://github.com/cakephp/cakephp/issues/6471 for details.
         * Drivers include Mysql Postgres Sqlite Sqlserver
         * See vendor\cakephp\cakephp\src\Database\Driver for complete list
         */
        'Datasources' => [
            'default' => [
                'className' => Connection::class,
                'driver' => env('DATASOURCES_DEFAULT_DRIVER', Mysql::class),
                'persistent' => false,
                'timezone' => 'UTC',

                /*
                 * For MariaDB/MySQL the internal default changed from utf8 to utf8mb4, aka full utf-8 support
                 */
                'flags' => [],
                'cacheMetadata' => true,
                'log' => env('DATASOURCES_DEFAULT_LOG', false),

                /*
                 * Set identifier quoting to true if you are using reserved words or
                 * special characters in your table or column names. Enabling this
                 * setting will result in queries built using the Query Builder having
                 * identifiers quoted when creating SQL. It should be noted that this
                 * decreases performance because each query needs to be traversed and
                 * manipulated before being executed.
                 */
                'quoteIdentifiers' => env('DATASOURCES_QUOTE_IDENTIFIER', true),

                /*
                 * During development, if using MySQL < 5.6, uncommenting the
                 * following line could boost the speed at which schema metadata is
                 * fetched from the database. It can also be set directly with the
                 * mysql configuration directive 'innodb_stats_on_metadata = 0'
                 * which is the recommended value in production environments
                 */
                //'init' => ['SET GLOBAL innodb_stats_on_metadata = 0'],

                /*
                 * Non default config
                 * Passbolt support setting these from environment variables
                 * They can also be overridden in passbolt.php
                 */
                'host' => env('DATASOURCES_DEFAULT_HOST', 'localhost'),
                'port' => env('DATASOURCES_DEFAULT_PORT', 3306),
                'url' => env('DATASOURCES_DEFAULT_URL', null),
                'username' => env('DATASOURCES_DEFAULT_USERNAME', ''),
                'password' => env('DATASOURCES_DEFAULT_PASSWORD', ''),
                'database' => env('DATASOURCES_DEFAULT_DATABASE', ''),
                'ssl_key' => env('DATASOURCES_DEFAULT_SSL_KEY', ''),
                'ssl_cert' => env('DATASOURCES_DEFAULT_SSL_CERT', ''),
                'ssl_ca' => env('DATASOURCES_DEFAULT_SSL_CA', ''),
                'encoding' => env('DATASOURCES_DEFAULT_ENCODING','utf8mb4'),

            ],

            /**
             * The test connection is used during the test suite.
             */
            'test' => [
                'className' => Connection::class,
                'driver' => env('DATASOURCES_TEST_DRIVER', Mysql::class),
                'persistent' => false,
                'timezone' => 'UTC',
                'encoding' => env('DATASOURCES_TEST_ENCODING','utf8mb4'),
                'flags' => [],
                'cacheMetadata' => true,
                'quoteIdentifiers' => env('DATASOURCES_QUOTE_IDENTIFIER', true),
                'log' => env('DATASOURCES_TEST_LOG', false),
                //'init' => ['SET GLOBAL innodb_stats_on_metadata = 0'],

                /*
                 * Non default config
                 * Passbolt support setting these from environment variables
                 * They can also be overridden in passbolt.php
                 */
                'host' => env('DATASOURCES_TEST_HOST', 'localhost'),
                'port' => env('DATASOURCES_TEST_PORT', 3306),
                'username' => env('DATASOURCES_TEST_USERNAME', 'my_app'),
                'password' => env('DATASOURCES_TEST_PASSWORD', 'secret'),
                'database' => env('DATASOURCES_TEST_DATABASE', 'my_app'),
                'ssl_key' => env('DATASOURCES_TEST_SSL_KEY', ''),
                'ssl_cert' => env('DATASOURCES_TEST_SSL_CERT', ''),
                'ssl_ca' => env('DATASOURCES_TEST_SSL_CA', ''),
                'url' => env('DATASOURCES_TEST_URL', null),
            ],
        ],

        /**
         * Configures logging options
         */
        'Log' => [
            'debug' => [
                'className' => FileLog::class,
                'path' => LOGS,
                'file' => 'debug',
                'levels' => ['notice', 'info', 'debug'],
                'url' => env('LOG_DEBUG_URL', null),
            ],
            'error' => [
                'className' => FileLog::class,
                'path' => LOGS,
                'file' => 'error',
                'levels' => ['warning', 'error', 'critical', 'alert', 'emergency'],
                'url' => env('LOG_ERROR_URL', null),
            ],
            // To enable this dedicated query log, you need set your datasource's log flag to true
            // See DATASOURCES_DEFAULT_LOG
            'queries' => [
                'className' => FileLog::class,
                'path' => LOGS,
                'file' => 'queries',
                'url' => env('LOG_QUERIES_URL', null),
                'scopes' => ['queriesLog'],
            ],
        ],

        /**
         * Session configuration.
         *
         * Contains an array of settings to use for session configuration. The
         * `defaults` key is used to define a default preset to use for sessions, any
         * settings declared here will override the settings of the default config.
         *
         * ## Options
         *
         * - `cookie` - The name of the cookie to use. Defaults to 'CAKEPHP'.
         * - `cookiePath` - The url path for which session cookie is set. Maps to the
         *   `session.cookie_path` php.ini config. Defaults to base path of app.
         * - `timeout` - The time in minutes the session should be valid for.
         *    Pass 0 to disable checking timeout.
         *    Please note that php.ini's session.gc_maxlifetime must be equal to or greater
         *    than the largest Session['timeout'] in all served websites for it to have the
         *    desired effect.
         * - `defaults` - The default configuration set to use as a basis for your session.
         *    There are four built-in options: php, cake, cache, database.
         * - `handler` - Can be used to enable a custom session handler. Expects an
         *    array with at least the `engine` key, being the name of the Session engine
         *    class to use for managing the session. CakePHP bundles the `CacheSession`
         *    and `DatabaseSession` engines.
         * - `ini` - An associative array of additional ini values to set.
         *
         * The built-in `defaults` options are:
         *
         * - 'php' - Uses settings defined in your php.ini.
         * - 'cake' - Saves session files in CakePHP's /tmp directory.
         * - 'database' - Uses CakePHP's database sessions.
         * - 'cache' - Use the Cache class to save sessions.
         *
         * To define a custom session handler, save it at src/Network/Session/<name>.php.
         * Make sure the class implements PHP's `SessionHandlerInterface` and set
         * Session.handler to <name>
         *
         * To use database sessions, load the SQL file located at config/Schema/sessions.sql
         */
        'Session' => [
            'defaults' => env('SESSION_DEFAULTS', 'cache'),
            'duration' => '+1 day',
        ],
      ];
---
# Source: passbolt/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-passbolt-role-common
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: common
    app.kubernetes.io/type: role
rules:
- apiGroups: [""]
  resources: [ "configmaps", "secrets" ]
  resourceNames:
  - my-release-passbolt-sec-redis-proxy
  - my-release-passbolt-cm-env
  - my-release-passbolt-sec-env
  - my-release-passbolt-sec-gpg
  - my-release-passbolt-sec-jwt
  - my-release-passbolt-sec-tls
  - my-release-passbolt-sec-tls-ing
  - my-release-passbolt-sec-subscription
  verbs: ["get"]
---
# Source: passbolt/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-passbolt-rolebind-common
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: common
    app.kubernetes.io/type: rolebind
subjects:
- kind: ServiceAccount
  name: my-release-passbolt-sa-common
roleRef:
  kind: Role
  name: my-release-passbolt-role-common
  apiGroup: rbac.authorization.k8s.io
---
# Source: passbolt/charts/mariadb/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mariadb-primary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: passbolt/charts/mariadb/templates/secondary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-mariadb-secondary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: secondary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: mariadb
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: secondary
---
# Source: passbolt/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis-headless
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
    - name: tcp-sentinel
      port: 26379
      targetPort: redis-sentinel
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
---
# Source: passbolt/charts/redis/templates/sentinel/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-redis
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: 6379
      nodePort: null
    - name: tcp-sentinel
      port: 26379
      targetPort: 26379
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: node
---
# Source: passbolt/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  # We make exception here to reduce the interservice naming
  name: my-release-passbolt
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: common
    app.kubernetes.io/type: svc
spec:
  type: ClusterIP
  ports:
    - port: 443
      targetPort: 443
      protocol: TCP
      name: https
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
---
# Source: passbolt/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-passbolt-depl-srv
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: srv
    app.kubernetes.io/type: depl
spec:
  replicas: 2
  
  selector:
    matchLabels:
      app.kubernetes.io/name: passbolt
      app.kubernetes.io/instance: my-release
    matchExpressions:
      - {key: app.kubernetes.io/type, operator: NotIn, values: [job, cron]}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: passbolt
        app.kubernetes.io/instance: my-release
      annotations:
        checksum/sec-env: 9ca26e8ec5bfdb41ba832e1473c834924d500d0f1b740ecdfc92869eb022da0e
        
        checksum/sec-gpg: 945d99cb169c8fe61dba5e8a3ee24044bce77efaab6f38c747aa3f0b5ad46dfc
        checksum/cm-env: ab1acd2db9c382d5ee20e02570b2a487abed98f1b7a9fde15e5886ccf6cd9469
        checksum/sec-jwt: d9c8ad8af32e2f707ecaca3fdce33208f49efc375bf5c6b269291d03e4b681b2
        checksum/sec-redis-proxy: 69bdd69208507d21f6aaa23e128ee1e66ebc63cbeef01ad0449d1d9930875ebd
    spec:
      
      serviceAccountName: my-release-passbolt-sa-common
      securityContext:
        {}
      initContainers:
        - name: my-release-passbolt-depl-srv-init
          
          image: mariadb
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
          args:
            - "-c"
            - |
              set -e
              client="mariadb"
              cat <<-EOF > /tmp/defaultsfile.cnf
              [client]
              user=${DATASOURCES_DEFAULT_USERNAME}
              password=${DATASOURCES_DEFAULT_PASSWORD}
              host=${DATASOURCES_DEFAULT_HOST}
              connect-timeout=2
              EOF
              userhost="%"
              client="mariadb"
              while ! ${client} --defaults-file=/tmp/defaultsfile.cnf -e "SELECT 1" > /dev/null 2>&1; do
                echo "Waiting for database connection..."
                sleep 2
              done
          env:
            - name: DATASOURCES_DEFAULT_HOST
              value: "my-release-mariadb-primary"
            - name: DATASOURCES_DEFAULT_PORT
              value: "3306"
          envFrom:
            - configMapRef:
                name: my-release-passbolt-cm-env
            - secretRef:
                name: my-release-passbolt-sec-env
      containers:
        - name: passbolt
          command:
            - "/bin/bash"
          args:
            - "-c"
            - |
              set -e
              > /etc/supervisor/conf.d/cron.conf
              /docker-entrypoint.sh
          image: passbolt/passbolt:4.6.2-1-ce
          imagePullPolicy: IfNotPresent
          ports:
          - name: https
            containerPort: 443
            protocol: TCP
          - name: http
            containerPort: 80
            protocol: TCP
          livenessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: passbolt.local
              path: /healthcheck/status.json
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: Host
                value: passbolt.local
              path: /healthcheck/status.json
              port: https
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 10
          env:
            - name: DATASOURCES_DEFAULT_HOST
              value: "my-release-mariadb-primary"
          envFrom:
            - configMapRef:
                name: my-release-passbolt-cm-env
            - secretRef:
                name: my-release-passbolt-sec-env
          volumeMounts:
            - mountPath: "/etc/passbolt/app.php"
              subPath: app.php
              name: cm-app-php
              readOnly: true
            - mountPath: /etc/ssl/certs/passbolt
              name: sec-tls
              readOnly: true
            - name: sec-gpg
              mountPath: /etc/passbolt/gpg
              readOnly: true
            - name: sec-jwt
              mountPath: "/etc/passbolt/jwt"
              readOnly: true
          resources:
            {}
        - name: redisproxy
          image: haproxy:latest
          imagePullPolicy: 
          volumeMounts:
            - mountPath: "/usr/local/etc/haproxy/haproxy.cfg"
              subPath: haproxy.cfg
              name: sec-redis-proxy
              readOnly: true
          resources:
            {}
      volumes:
        - name: sec-tls
          secret:
            secretName: my-release-passbolt-sec-tls-internal
        - name: sec-gpg
          secret:
            secretName: my-release-passbolt-sec-gpg
        - configMap:
            name: my-release-passbolt-cm-app-php
          name: cm-app-php
        - name: sec-jwt
          secret:
            secretName: my-release-passbolt-sec-jwt
        - name: sec-redis-proxy
          secret:
            secretName: my-release-passbolt-sec-redis-proxy
---
# Source: passbolt/charts/mariadb/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-mariadb-primary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels: 
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  serviceName: my-release-mariadb-primary
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 0d5f1a282a18e4df3d704380206720562712ba8a878f80b3314e6bb6a24234d1
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-11.5.7
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      
      serviceAccountName: my-release-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.6.12-debian-11-r16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-root-password
            - name: MARIADB_USER
              value: "CHANGEME"
            - name: MARIADB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-password
            - name: MARIADB_DATABASE
              value: "passbolt"
            - name: MARIADB_REPLICATION_MODE
              value: "master"
            - name: MARIADB_REPLICATION_USER
              value: "replicator"
            - name: MARIADB_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-replication-password
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mariadb-primary
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: passbolt/charts/mariadb/templates/secondary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-mariadb-secondary
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: mariadb
    helm.sh/chart: mariadb-11.5.7
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: secondary
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels: 
      app.kubernetes.io/name: mariadb
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: secondary
  serviceName: my-release-mariadb-secondary
  podManagementPolicy: 
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 82f0b84076a7150a2ffef1469ab734d9f425dc2b13a15306b1f3c037956bd2f5
      labels:
        app.kubernetes.io/name: mariadb
        helm.sh/chart: mariadb-11.5.7
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: secondary
    spec:
      
      serviceAccountName: my-release-mariadb
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mariadb
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: secondary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: mariadb
          image: docker.io/bitnami/mariadb:10.6.12-debian-11-r16
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_REPLICATION_MODE
              value: "slave"
            - name: MARIADB_MASTER_HOST
              value: my-release-mariadb-primary
            - name: MARIADB_MASTER_PORT_NUMBER
              value: "3306"
            - name: MARIADB_MASTER_ROOT_USER
              value: "root"
            - name: MARIADB_MASTER_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-root-password
            - name: MARIADB_REPLICATION_USER
              value: "replicator"
            - name: MARIADB_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-mariadb
                  key: mariadb-replication-password
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_MASTER_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_MASTER_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_MASTER_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MARIADB_MASTER_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_MASTER_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_MASTER_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mariadb
            - name: config
              mountPath: /opt/bitnami/mariadb/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: my-release-mariadb-secondary
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: mariadb
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: secondary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: passbolt/charts/redis/templates/sentinel/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-redis-node
  namespace: "passbolt-1.1.1.tgz"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-17.15.2
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: node
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: node
  serviceName: my-release-redis-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-17.15.2
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: node
      annotations:
        checksum/configmap: 4f790956a817f4169349a9b674bad20f4acb2a1f8ae66bb0bfe9b3c81d4ac5f7
        checksum/health: 1eace71641fb5bd753e90012419e82c10b1180d694f91d83743b727a5aacca73
        checksum/scripts: fd6c11e8fe559801b0a4f8f52f4bdd850328bf6cfd2253a696c7cf4d88ba3c6a
        checksum/secret: e2dbc9e83e89a3079b8d2b25e0314273781fe72e30a39b119a99af9c5b27588a
    spec:
      
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: true
      serviceAccountName: my-release-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: node
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:7.0.12-debian-11-r19
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - /opt/bitnami/scripts/start-scripts/prestop-redis.sh
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-node.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_SENTINEL_TLS_ENABLED
              value: "no"
            - name: REDIS_SENTINEL_PORT
              value: "26379"
            - name: REDIS_DATA_DIR
              value: /data
          ports:
            - name: redis
              containerPort: 6379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
            - name: tmp
              mountPath: /tmp
        - name: sentinel
          image: docker.io/bitnami/redis-sentinel:7.0.12-debian-11-r18
          imagePullPolicy: "IfNotPresent"
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - /opt/bitnami/scripts/start-scripts/prestop-sentinel.sh
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-sentinel.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-redis
                  key: redis-password
            - name: REDIS_SENTINEL_TLS_ENABLED
              value: "no"
            - name: REDIS_SENTINEL_PORT
              value: "26379"
          ports:
            - name: redis-sentinel
              containerPort: 26379
          startupProbe:
            failureThreshold: 22
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_sentinel.sh 5
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
            exec:
              command:
                - sh
                - -c
                - /health/ping_sentinel.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 6
            exec:
              command:
                - sh
                - -c
                - /health/ping_sentinel.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: sentinel-data
              mountPath: /opt/bitnami/redis-sentinel/etc
            - name: redis-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis-sentinel/mounted-etc
      volumes:
        - name: start-scripts
          configMap:
            name: my-release-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: my-release-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: my-release-redis-configuration
        - name: sentinel-data
          emptyDir: {}
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: my-release
          app.kubernetes.io/component: node
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: passbolt/templates/cronjob-proc-email.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-release-passbolt-cron-proc-email
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/action: proc-email
    app.kubernetes.io/type: cron
spec:
  schedule: "* * * * *"
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/action: proc-email
            app.kubernetes.io/type: cron
        spec:
          
          serviceAccountName: my-release-passbolt-sa-common
          restartPolicy: OnFailure
          securityContext:
            runAsUser: 33
            fsGroup: 33
          containers:
            - name: proc-email
              image: passbolt/passbolt:4.6.2-1-ce
              imagePullPolicy: IfNotPresent
              command:
                - "/bin/bash"
              args:
                - "-c"
                - |
                  sleep 10
                  echo "Sending emails" \
                  && bin/cron \
                  && touch /tmp/pod/success
              env:
                - name: DATASOURCES_DEFAULT_HOST
                  value: "my-release-mariadb-primary"
              envFrom:
                - configMapRef:
                    name: my-release-passbolt-cm-env
                - secretRef:
                    name: my-release-passbolt-sec-env
              volumeMounts:
                - name: vol-success
                  mountPath: /tmp/pod
                - name: sec-gpg
                  mountPath: /etc/passbolt/gpg
                  readOnly: true
            - name: redisproxy
              image: haproxy:latest
              imagePullPolicy: 
              command:
                - "/bin/bash"
              args:
                - "-c"
                - |
                  haproxy -f /usr/local/etc/haproxy/haproxy.cfg &
                  REDIS_PROXY_PID=$?
                  while true; do if [ -f "/tmp/pod/success" ]; then kill $REDIS_PROXY_PID; sleep 5;  exit 0; fi; done
              volumeMounts:
                - name: vol-success
                  mountPath: /tmp/pod
                - mountPath: "/usr/local/etc/haproxy/haproxy.cfg"
                  subPath: haproxy.cfg
                  name: sec-redis-proxy
                  readOnly: true
              resources:
                null
          volumes:
            - name: vol-success
              emptyDir: {}
            - name: sec-gpg
              secret:
                secretName: my-release-passbolt-sec-gpg
            - name: sec-redis-proxy
              secret:
                secretName: my-release-passbolt-sec-redis-proxy
---
# Source: passbolt/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-passbolt-sa-create-gpg-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-gpg-keys
    app.kubernetes.io/type: sa
---
# Source: passbolt/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-passbolt-sa-create-jwt-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-jwt-keys
    app.kubernetes.io/type: sa
---
# Source: passbolt/templates/secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-env
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: env
    app.kubernetes.io/type: sec
type: Opaque
data:

  
    CACHE_CAKE_DEFAULT_PASSWORD: "Q0hBTkdFTUU="
    DATASOURCES_DEFAULT_DATABASE: "cGFzc2JvbHQ="
    DATASOURCES_DEFAULT_PASSWORD: "Q0hBTkdFTUU="
    DATASOURCES_DEFAULT_USERNAME: "Q0hBTkdFTUU="
    EMAIL_TRANSPORT_DEFAULT_PASSWORD: "Q0hBTkdFTUU="
    EMAIL_TRANSPORT_DEFAULT_USERNAME: "Q0hBTkdFTUU="
---
# Source: passbolt/templates/secret-gpg.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-gpg
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: gpg
    app.kubernetes.io/type: sec
type: Opaque
data:
    serverkey_private.asc: ""
    serverkey.asc: ""
---
# Source: passbolt/templates/secret-jwt.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-jwt
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: jwt
    app.kubernetes.io/type: sec
type: Opaque
data:
  jwt.key: ""
  jwt.pem: ""
---
# Source: passbolt/templates/secret-redis-proxy.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-passbolt-sec-redis-proxy
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: redis-proxy
    app.kubernetes.io/type: sec
  annotations:
    helm.sh/hook: pre-upgrade,pre-install
    helm.sh/hook-weight: "-6"
    helm.sh/hook-delete-policy: before-hook-creation
type: Opaque
stringData:
  haproxy.cfg: |
    global
      log stdout format raw local0
      maxconn 1024

      resolvers mydns
        parse-resolv-conf
        hold valid 10s

    defaults REDIS
      default-server init-addr libc,none
      log global
      mode tcp
      timeout connect 4s
      timeout server 330s
      timeout client 330s
      timeout check 2s
      option redispatch
      retries 300

    frontend ft_redis_master
      bind 127.0.0.1:6379
      use_backend bk_redis_master

    backend bk_redis_master
      mode tcp
      option tcp-check
      tcp-check connect
      tcp-check send AUTH\ CHANGEME\r\n
      tcp-check send PING\r\n
      tcp-check expect string +PONG
      tcp-check send info\ replication\r\n
      tcp-check expect string role:master
      tcp-check send QUIT\r\n
      tcp-check expect string +OK
      server R0 my-release-redis-node-0.my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local:6379 resolvers mydns check inter 1s fall 1 rise 1
      server R1 my-release-redis-node-1.my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local:6379 resolvers mydns check inter 1s fall 1 rise 1
      server R2 my-release-redis-node-2.my-release-redis-headless.passbolt-1.1.1.tgz.svc.cluster.local:6379 resolvers mydns check inter 1s fall 1 rise 1
---
# Source: passbolt/templates/configmap-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-release-passbolt-cm-env
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: env
    app.kubernetes.io/type: cm
data:

  
    APP_FULL_BASE_URL: "https://passbolt.local"
    CACHE_CAKE_DEFAULT_SERVER: "127.0.0.1"
    DEBUG: "false"
    EMAIL_DEFAULT_FROM: "no-reply@passbolt.local"
    EMAIL_DEFAULT_FROM_NAME: "Passbolt"
    EMAIL_TRANSPORT_DEFAULT_HOST: "127.0.0.1"
    EMAIL_TRANSPORT_DEFAULT_PORT: "587"
    EMAIL_TRANSPORT_DEFAULT_TIMEOUT: "30"
    EMAIL_TRANSPORT_DEFAULT_TLS: "true"
    KUBECTL_DOWNLOAD_CMD: "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\""
    PASSBOLT_JWT_SERVER_KEY: "/var/www/passbolt/config/jwt/jwt.key"
    PASSBOLT_JWT_SERVER_PEM: "/var/www/passbolt/config/jwt/jwt.pem"
    PASSBOLT_KEY_EMAIL: "passbolt@yourdomain.com"
    PASSBOLT_LEGAL_PRIVACYPOLICYURL: "https://www.passbolt.com/privacy"
    PASSBOLT_PLUGINS_JWT_AUTHENTICATION_ENABLED: "true"
    PASSBOLT_PLUGINS_LICENSE_LICENSE: "/etc/passbolt/subscription_key.txt"
    PASSBOLT_REGISTRATION_PUBLIC: "true"
    PASSBOLT_SELENIUM_ACTIVE: "false"
    PASSBOLT_SSL_FORCE: "true"
---
# Source: passbolt/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-passbolt-role-create-gpg-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-gpg-keys
    app.kubernetes.io/type: role
rules:
- apiGroups: [""]
  resources: [ "configmaps", "secrets" ]
  resourceNames:
  - my-release-passbolt-cm-env
  - my-release-passbolt-sec-gpg
  - my-release-passbolt-sec-env
  - my-release-passbolt-sec-redis-proxy
  verbs: ["get", "patch"]
---
# Source: passbolt/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-release-passbolt-role-create-jwt-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-jwt-keys
    app.kubernetes.io/type: role
rules:
- apiGroups: [""]
  resources: [ "configmaps", "secrets" ]
  resourceNames:
  - my-release-passbolt-cm-env
  - my-release-passbolt-sec-jwt
  - my-release-passbolt-sec-env
  - my-release-passbolt-sec-redis-proxy
  verbs: ["get", "patch"]
---
# Source: passbolt/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-passbolt-rolebind-create-gpg-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-gpg-keys
    app.kubernetes.io/type: rolebind
subjects:
- kind: ServiceAccount
  name: my-release-passbolt-sa-create-gpg-keys
roleRef:
  kind: Role
  name: my-release-passbolt-role-create-gpg-keys
  apiGroup: rbac.authorization.k8s.io
---
# Source: passbolt/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-passbolt-rolebind-create-jwt-keys
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-1"
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: passbolt
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/action: create-jwt-keys
    app.kubernetes.io/type: rolebind
subjects:
- kind: ServiceAccount
  name: my-release-passbolt-sa-create-jwt-keys
roleRef:
  kind: Role
  name: my-release-passbolt-role-create-jwt-keys
  apiGroup: rbac.authorization.k8s.io
---
# Source: passbolt/templates/job-create-gpg.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-passbolt-job-create-gpg-keys
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/action: create-gpg-keys
    app.kubernetes.io/type: job
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "0"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/action: create-gpg-keys
        app.kubernetes.io/type: job
    spec:
      
      serviceAccountName: my-release-passbolt-sa-create-gpg-keys
      restartPolicy: OnFailure
      containers:
        - name: create-gpg-keys
          image: passbolt/passbolt:4.6.2-1-ce
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
          args:
            - "-c"
            - |
              set -e
              key_email="${PASSBOLT_KEY_EMAIL:-passbolt@yourdomain.com}"
              key_name="${PASSBOLT_KEY_NAME:-Passbolt default user}"
              key_length="${PASSBOLT_KEY_LENGTH:-3072}"
              subkey_length="${PASSBOLT_SUBKEY_LENGTH:-4096}"
              expiration="${PASSBOLT_KEY_EXPIRATION:-0}"
              su -c "gpg --homedir $GNUPGHOME --batch --no-tty --gen-key <<EOF
                Key-Type: default
                Key-Length: $key_length
                Subkey-Type: default
                Subkey-Length: $subkey_length
                Name-Real: $key_name
                Name-Email: $key_email
                Expire-Date: $expiration
                %no-protection
                %commit
              EOF" -ls /bin/bash www-data || \
              gpg --homedir $GNUPGHOME --batch --no-tty --gen-key <<EOF
                Key-Type: default
                Key-Length: $key_length
                Subkey-Type: default
                Subkey-Length: $subkey_length
                Name-Real: $key_name
                Name-Email: $key_email
                Expire-Date: $expiration
                %no-protection
                %commit
              EOF

              PRIVATE_SERVERKEY="$(gpg --homedir $GNUPGHOME --armor --export-secret-keys $key_email | base64 -w0)"
              PUBLIC_SERVERKEY="$(gpg --homedir $GNUPGHOME --armor --export $key_email | base64 -w0)"

              cd /tmp
              cpuArch=${CPU_ARCH:-$(eval "case `uname -m` in 'x86_64') echo 'amd64';;'aarch64') echo 'arm64';;esac")}
              kubectlDownload=${KUBECTL_DOWNLOAD_CMD:-'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/${cpuArch}/kubectl"'}
              eval $kubectlDownload
              chmod +x kubectl
              ./kubectl patch secret my-release-passbolt-sec-gpg --type='json' -p='[{"op": "replace", "path" : "/data/serverkey_private.asc", "value" : '"${PRIVATE_SERVERKEY}"'}]'
              ./kubectl patch secret my-release-passbolt-sec-gpg --type='json' -p='[{"op": "replace", "path" : "/data/serverkey.asc", "value" : '"${PUBLIC_SERVERKEY}"'}]'
              touch /tmp/pod/success
              echo "Success"
          env:
            - name: DATASOURCES_DEFAULT_HOST
              value: "my-release-mariadb-primary"
          envFrom:
            - configMapRef:
                name: my-release-passbolt-cm-env
            - secretRef:
                name: my-release-passbolt-sec-env
          volumeMounts:
            - name: vol-success
              mountPath: /tmp/pod
      volumes:
        - name: vol-success
          emptyDir: {}
---
# Source: passbolt/templates/job-create-jwt.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: my-release-passbolt-job-create-jwt-keys
  labels:
    helm.sh/chart: passbolt-1.1.1
    app.kubernetes.io/version: "4.7.0-1-ce"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/action: create-jwt-keys
    app.kubernetes.io/type: job
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "0"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/action: create-jwt-keys
        app.kubernetes.io/type: job
    spec:
      
      serviceAccountName: my-release-passbolt-sa-create-jwt-keys
      restartPolicy: OnFailure
      containers:
        - name: create-jwt-keys
          image: passbolt/passbolt:4.6.2-1-ce
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/bash"
          args:
            - "-c"
            - |
              set -e

              /usr/share/php/passbolt/bin/cake passbolt create_jwt_keys
              PRIVATE_JWT_KEY="$(cat /etc/passbolt/jwt/jwt.key | base64 -w0 )"
              PUBLIC_JWT_KEY="$(cat /etc/passbolt/jwt/jwt.pem | base64 -w0 )"

              cd /tmp
              cpuArch=${CPU_ARCH:-$(eval "case `uname -m` in 'x86_64') echo 'amd64';;'aarch64') echo 'arm64';;esac")}
              kubectlDownload=${KUBECTL_DOWNLOAD_CMD:-'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/${cpuArch}/kubectl"'}
              eval $kubectlDownload
              chmod +x kubectl
              ./kubectl patch secret my-release-passbolt-sec-jwt --type='json' -p='[{"op": "replace", "path" : "/data/jwt.key", "value" : '"${PRIVATE_JWT_KEY}"'}]'
              ./kubectl patch secret my-release-passbolt-sec-jwt --type='json' -p='[{"op": "replace", "path" : "/data/jwt.pem", "value" : '"${PUBLIC_JWT_KEY}"'}]'
              touch /tmp/pod/success
              echo "Success"
          env:
            - name: DATASOURCES_DEFAULT_HOST
              value: "my-release-mariadb-primary"
          envFrom:
            - configMapRef:
                name: my-release-passbolt-cm-env
            - secretRef:
                name: my-release-passbolt-sec-env
          volumeMounts:
            - name: vol-success
              mountPath: /tmp/pod
      volumes:
        - name: vol-success
          emptyDir: {}
