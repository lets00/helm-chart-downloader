---
# Source: pbuf-registry/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-pbuf-registry
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/name: pbuf-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
  automountServiceAccountToken: true
---
# Source: pbuf-registry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-pbuf-registry
type: Opaque
data:
---
# Source: pbuf-registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-pbuf-registry
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/name: pbuf-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
    - port: 6777
      targetPort: grpc
      protocol: TCP
      name: grpc
    - port: 8082
      targetPort: debug
      protocol: TCP
      name: debug
  selector:
    app.kubernetes.io/name: pbuf-registry
    app.kubernetes.io/instance: my-release
---
# Source: pbuf-registry/templates/background.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-pbuf-registry-compaction
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pbuf-registry-compaction
    app.kubernetes.io/instance: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pbuf-registry-compaction
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: pbuf-registry-0.4.0
        app.kubernetes.io/version: "v0.4.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: pbuf-registry-compaction
        app.kubernetes.io/instance: my-release
        date: "1718895503"
    spec:
      serviceAccountName: my-release-pbuf-registry
      securityContext:
        {}
      containers:
        - name: pbuf-registry
          securityContext:
            {}
          image: "ghcr.io/pbufio/registry:v0.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - /app/pbuf-registry
          args:
            - compaction
          env:
            - name: DATA_DATABASE_DSN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: DATA_DATABASE_DSN
            - name: SERVER_STATIC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: SERVER_STATIC_TOKEN
            - name: SERVER_GRPC_TLS_ENABLED
              value: "false"
            - name: SERVER_GRPC_TLS_CERTFILE
              value: /app/certs/server-cert.pem
            - name: SERVER_GRPC_TLS_KEYFILE
              value: /app/certs/server-key.pem
            - name: SERVER_GRPC_AUTH_ENABLED
              value: "false"
            - name: SERVER_GRPC_AUTH_TYPE
              value: ""
            - name: SERVER_HTTP_AUTH_ENABLED
              value: "false"
            - name: SERVER_HTTP_AUTH_TYPE
              value: ""
          ports:
            - name: debug
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: debug
          readinessProbe:
            httpGet:
              path: /healthz
              port: debug
          resources:
            {}
          volumeMounts:
            - mountPath: /app/certs/server-cert.pem
              name: secret
              readOnly: true
              subPath: server-cert.pem
            - mountPath: /app/certs/server-key.pem
              name: secret
              readOnly: true
              subPath: server-key.pem
      volumes:
        - name: secret
          secret:
            secretName: my-release-pbuf-registry
---
# Source: pbuf-registry/templates/background.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-pbuf-registry-protoparser
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pbuf-registry-protoparser
    app.kubernetes.io/instance: my-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pbuf-registry-protoparser
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: pbuf-registry-0.4.0
        app.kubernetes.io/version: "v0.4.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: pbuf-registry-protoparser
        app.kubernetes.io/instance: my-release
        date: "1718895503"
    spec:
      serviceAccountName: my-release-pbuf-registry
      securityContext:
        {}
      containers:
        - name: pbuf-registry
          securityContext:
            {}
          image: "ghcr.io/pbufio/registry:v0.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - /app/pbuf-registry
          args:
            - proto-parsing
          env:
            - name: DATA_DATABASE_DSN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: DATA_DATABASE_DSN
            - name: SERVER_STATIC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: SERVER_STATIC_TOKEN
            - name: SERVER_GRPC_TLS_ENABLED
              value: "false"
            - name: SERVER_GRPC_TLS_CERTFILE
              value: /app/certs/server-cert.pem
            - name: SERVER_GRPC_TLS_KEYFILE
              value: /app/certs/server-key.pem
            - name: SERVER_GRPC_AUTH_ENABLED
              value: "false"
            - name: SERVER_GRPC_AUTH_TYPE
              value: ""
            - name: SERVER_HTTP_AUTH_ENABLED
              value: "false"
            - name: SERVER_HTTP_AUTH_TYPE
              value: ""
          ports:
            - name: debug
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: debug
          readinessProbe:
            httpGet:
              path: /healthz
              port: debug
          resources:
            {}
          volumeMounts:
            - mountPath: /app/certs/server-cert.pem
              name: secret
              readOnly: true
              subPath: server-cert.pem
            - mountPath: /app/certs/server-key.pem
              name: secret
              readOnly: true
              subPath: server-key.pem
      volumes:
        - name: secret
          secret:
            secretName: my-release-pbuf-registry
---
# Source: pbuf-registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-pbuf-registry
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/name: pbuf-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pbuf-registry
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        helm.sh/chart: pbuf-registry-0.4.0
        app.kubernetes.io/name: pbuf-registry
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "v0.4.0"
        app.kubernetes.io/managed-by: Helm
        date: "1718895503"
    spec:
      serviceAccountName: my-release-pbuf-registry
      securityContext:
        {}
      containers:
        - name: pbuf-registry
          securityContext:
            {}
          image: "ghcr.io/pbufio/registry:v0.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -c
            - /app/pbuf-migrations && /app/pbuf-registry
          env:
            - name: DATA_DATABASE_DSN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: DATA_DATABASE_DSN
            - name: SERVER_STATIC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: my-release-pbuf-registry
                  key: SERVER_STATIC_TOKEN
            - name: SERVER_GRPC_TLS_ENABLED
              value: "false"
            - name: SERVER_GRPC_TLS_CERTFILE
              value: /app/certs/server-cert.pem
            - name: SERVER_GRPC_TLS_KEYFILE
              value: /app/certs/server-key.pem
            - name: SERVER_GRPC_AUTH_ENABLED
              value: "false"
            - name: SERVER_GRPC_AUTH_TYPE
              value: ""
            - name: SERVER_HTTP_AUTH_ENABLED
              value: "false"
            - name: SERVER_HTTP_AUTH_TYPE
              value: ""
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 6777
              protocol: TCP
            - name: debug
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: debug
          readinessProbe:
            httpGet:
              path: /healthz
              port: debug
          resources:
            {}
          volumeMounts:
            - mountPath: /app/certs/server-cert.pem
              name: secret
              readOnly: true
              subPath: server-cert.pem
            - mountPath: /app/certs/server-key.pem
              name: secret
              readOnly: true
              subPath: server-key.pem
      volumes:
      - name: secret
        secret:
          secretName: my-release-pbuf-registry
---
# Source: pbuf-registry/templates/background.yaml
# Create background deployments helm template with 1 replica
---
# Source: pbuf-registry/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-pbuf-registry-test-connection"
  labels:
    helm.sh/chart: pbuf-registry-0.4.0
    app.kubernetes.io/name: pbuf-registry
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.4.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-pbuf-registry:8082/healthz']
  restartPolicy: Never
