---
# Source: edp-custom-pipelines/templates/resources/vcluster/namespace-e2e-vcluster.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: e2e-vcluster
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
---
# Source: edp-custom-pipelines/templates/resources/report-junit.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: report-junit
data:
  grype-junit.tpl:
    |
      <?xml version="1.0" ?>
      <testsuites name="grype">
      {{- $failures := len $.Matches }}
          <testsuite tests="{{ $failures }}" failures="{{ $failures }}" name="{{ $.Distro.Name }}:{{ $.Distro.Version }}" errors="0" skipped="0">
              <properties>
                  <property name="type" value="{{ $.Distro.Name }}"></property>
              </properties>
              {{- range .Matches }}
              <testcase classname="{{ .Artifact.Name }}-{{ .Artifact.Version }} ({{ .Artifact.Type }})" name="[{{ .Vulnerability.Severity }}] {{ .Vulnerability.ID }}">
                  <failure message="{{ .Artifact.Name }}: {{ .Vulnerability.ID }}" type="description">{{ .Vulnerability.Description }} {{ .Artifact.CPEs }} {{ .Vulnerability.DataSource }}</failure>
              </testcase>
              {{- end }}
          </testsuite>
      </testsuites>
  trivy-junit.tpl:
    |
      <?xml version="1.0" ?>
      <testsuites name="trivy">
      {{- range . -}}
      {{- $failures := len .Vulnerabilities }}
          <testsuite tests="{{ $failures }}" failures="{{ $failures }}" name="{{  .Target }}" errors="0" skipped="0">
          {{- if not (eq .Type "") }}
              <properties>
                  <property name="type" value="{{ .Type }}"></property>
              </properties>
              {{- end -}}
              {{ range .Vulnerabilities }}
              <testcase classname="{{ .PkgName }}-{{ .InstalledVersion }}" name="[{{ .Vulnerability.Severity }}] {{ .VulnerabilityID }}">
                  <failure message="{{ escapeXML .Title }}" type="description">{{ escapeXML .Description }}</failure>
              </testcase>
          {{- end }}
          </testsuite>
      {{- $failures := len .Misconfigurations }}
      {{- if gt $failures 0 }}
          <testsuite tests="{{ $failures }}" failures="{{ $failures }}" name="{{  .Target }}" errors="0" skipped="0">
          {{- if not (eq .Type "") }}
              <properties>
                  <property name="type" value="{{ .Type }}"></property>
              </properties>
              {{- end -}}
              {{ range .Misconfigurations }}
              <testcase classname="{{ .Type }}" name="[{{ .Severity }}] {{ .ID }}">
                  <failure message="{{ escapeXML .Title }}" type="description">{{ escapeXML .Description }}</failure>
              </testcase>
          {{- end }}
          </testsuite>
      {{- end }}
      {{- end }}
      </testsuites>
---
# Source: edp-custom-pipelines/templates/resources/autotests/tekton-role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: security
  name: tekton-autotests-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
# Source: edp-custom-pipelines/templates/resources/autotests/tekton-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tekton-autotests-binding-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
  namespace: security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: tekton-autotests-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
subjects:
- kind: ServiceAccount
  name: tekton
  namespace: edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
---
# Source: edp-custom-pipelines/templates/resources/vcluster/rolebinding-edp-vcluster-namespace-admin.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: edp-vcluster-namespace-admin-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
  namespace: e2e-vcluster
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: tekton
    namespace: edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: edp-custom-pipelines/templates/pipelines/cd/deploy-custom.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy-edp
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  description: |
    This Pipeline is used to remove old EDP environment, deploy new and integrate with ArgoCD
  params:
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
      type: string
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
      type: string
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
      type: string
  tasks:
    - name: clean-edp
      taskRef:
        kind: Task
        name: clean-edp
      params:
        - name: PIPELINE
          value: $(params.CDPIPELINE)
        - name: STAGE
          value: $(params.CDSTAGE)
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)

    - name: deploy-app
      taskRef:
        kind: Task
        name: deploy-applicationset-cli
      runAfter:
        - clean-edp
      params:
        - name: PIPELINE
          value: $(params.CDPIPELINE)
        - name: STAGE
          value: $(params.CDSTAGE)
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)

    - name: argo-cd-integration
      taskRef:
        kind: Task
        name: argo-cd-integration
      runAfter:
        - deploy-app
      params:
        - name: PIPELINE
          value: $(params.CDPIPELINE)
        - name: STAGE
          value: $(params.CDSTAGE)
        - name: KUBECONFIG_SECRET_NAME
          value: $(params.KUBECONFIG_SECRET_NAME)

    - name: promote-images
      taskRef:
        kind: Task
        name: promote-images
      runAfter:
        - argo-cd-integration
      params:
        - name: APPLICATIONS_PAYLOAD
          value: $(params.APPLICATIONS_PAYLOAD)
        - name: CDPIPELINE_STAGE
          value: $(params.CDSTAGE)
        - name: CDPIPELINE_CR
          value: $(params.CDPIPELINE)
---
# Source: edp-custom-pipelines/templates/pipelines/edp-autotests.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-autotest-run-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: $(params.git-source-url)
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: $(params.git-source-revision)
      type: string
    - name: cluster
      description: 'sandbox, okd'
      default: "sandbox"
      type: string
    - name: threads_num
      description: '1, 4, 10, 15'
      default: "1"
      type: string
    - name: namespace
      description: 'Namespace name'
      type: string
    - name: tags
      description: '@Clean, @TektonSmoke, @TektonGerrit, @TektonGithub, @TektonGitlab, @TektonGerritShortRegression, @TektonGithubShortRegression, @TektonGitlabShortRegression, @TektonGerritIU, @TektonGithubUI, @TektonGitlabUI'
      default: "@Clean"
      type: string
    - name: ci_tool
      description: 'tekton'
      default: "tekton"
      type: string
    - name: git_provider
      description: 'gerrit, github, gitlab'
      default: "gerrit"
      type: string
    - name: moon_url
      description: 'Moon URL'
      type: string
    - name: browser_type
      description: 'Browser type for moon'
      default: "remote"
      type: string
    - name: browser_name
      description: 'chrome, edge'
      default: "chrome"
      type: string
    - name: browser_version
      description: 'Remout browser version available in the moon'
      default: "114.0.5735.133-5"
      type: string
    - name: secret_name
      description: 'Secret from prerequisites name'
      default: "autotests"
      type: string
    - name: secret_namespace
      description: 'Namespace with secret from prerequisites name'
      default: "security"
      type: string
    - name: registry_type
      description: 'harbor, ecr, dockerhub, openshift'
      default: "harbor"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: autotests
      taskRef:
        kind: Task
        name: autotests
      runAfter:
        - fetch-repository
      params:
        - name: cluster
          value: $(params.cluster)
        - name: threads_num
          value: $(params.threads_num)
        - name: namespace
          value: $(params.namespace)
        - name: tags
          value: $(params.tags)
        - name: ci_tool
          value: $(params.ci_tool)
        - name: git_provider
          value: $(params.git_provider)
        - name: moon_url
          value: $(params.moon_url)
        - name: browser_type
          value: $(params.browser_type)
        - name: browser_name
          value: $(params.browser_name)
        - name: browser_version
          value: $(params.browser_version)
        - name: secret_name
          value: $(params.secret_name)
        - name: secret_namespace
          value: $(params.secret_namespace)
        - name: registry_type
          value: $(params.registry_type)
      workspaces:
        - name: source
          workspace: shared-workspace
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-argocd-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-helm-argocd-lib-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      name: pipelineUrl
      type: string
    - default: https://github.com/epmd-edp/container-kaniko-docker
      description: git url to clone
      name: git-source-url
      type: string
    - default: edp
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      name: git-source-revision
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - description: Project name
      name: CODEBASE_NAME
      type: string
    - description: Codebasebranch name
      name: CODEBASEBRANCH_NAME
      type: string
    - default: ''
      description: Ticket name pattern
      name: TICKET_NAME_PATTERN
      type: string
    - default: ''
      description: Pattern to validate a commit message
      name: COMMIT_MESSAGE_PATTERN
      type: string
    - default: ''
      description: Commit message
      name: COMMIT_MESSAGE
      type: string
    - default: ''
      description: Jira Payload
      name: JIRA_ISSUE_METADATA_PAYLOAD
      type: string
    - default: ''
      description: Jira server name
      name: JIRA_SERVER
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
      runAfter:
        - gerrit-notify
      taskRef:
        kind: Task
        name: get-version-edp

    - name: git-tag
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: >
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added
            automatically by CI user"

            git push --tags
      runAfter:
        - get-version
      taskRef:
        kind: Task
        name: git-cli
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-autotests-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-gradle-other-aut-build-default
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - get-version
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-backstage.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-npm-backstage-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: dockerfile
      default: 'packages/backend/Dockerfile'
      description: "path to dockerfile"
      type: string
    - name: image
      default: 'node:20.9.0'
      description: "npm image version"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - update-build-number
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            export NODE_OPTIONS="--max-old-space-size=4144"
            upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            npm config set registry ${NEXUS_HOST_URL}
            echo "always-auth=true" >> .npmrc
            echo "_auth=$upBase64" >> .npmrc
            yarn set version 1.22.19
            yarn config set registry ${NEXUS_HOST_URL}
            yarn install --registry ${NEXUS_HOST_URL}/repository/edp-npm-group
            yarn tsc
            yarn build:backend --config ../../app-config.yaml
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: dockerfile
          value: "$(params.dockerfile)"
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - kaniko-build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-cd-pipeline-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-cd-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-container-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-kaniko-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        name: get-version-edp-container
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: dockerfile-lint
      taskRef:
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      taskRef:
        name: kaniko
      runAfter:
        - get-version
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: ecr-to-docker
      taskRef:
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: git-tag
      taskRef:
        name: git-cli
      runAfter:
        - ecr-to-docker
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-edp-common.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-common-other-app-build-default
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - get-version
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - test
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-edp-component-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-co-go-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - get-version
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-edp-install-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-helm-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)

    - name: mkdocs-build
      taskRef:
        kind: Task
        name: mkdocs
      runAfter:
        - get-version
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - mkdocs-build
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-edp-tekton-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-tekton-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: 'epamedp/tekton-python-make:0.1.6'
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - get-version
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-headlamp-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-npm-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'docker.io/library/node:18.17.0-alpine3.18'
      description: "npm image version"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: update-build-number
      taskRef:
        kind: Task
        name: update-build-number-npm
      runAfter:
        - get-version
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: BRANCH_VERSION
          value: $(tasks.get-version.results.BRANCH_VERSION)
        - name: BUILD_ID
          value: $(tasks.get-version.results.BUILD_ID)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - update-build-number
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: PATH_CONTEXT
          value: "source"
        - name: EXTRA_COMMANDS
          value: |
            upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            npm set registry http://nexus:8081/repository/edp-npm-group/ --location project
            npm set //nexus:8081/repository/edp-npm-group/:email edp-ci@edp.local --location project
            npm set //nexus:8081/repository/edp-npm-group/:_auth $upBase64 --location project
            npm config set cache /workspace/source/cache
            npm ci
            npm run build
            npm run test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-keycloak-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-kc-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-nexus-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-no-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-platform-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-platform-other-app-build-default
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-default
      runAfter:
        - init-values
      params:
        - name: BRANCH_NAME
          value: $(params.git-source-revision)


  finally:
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-sam-go-app.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-sam-go-app-build-edp
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - default: >-
        https://tekton-edp-delivery.eks-core.aws.main.edp.projects.epam.com//#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      name: pipelineUrl
      type: string
    - default: https://github.com/epmd-edp/container-kaniko-docker
      description: git url to clone
      name: git-source-url
      type: string
    - default: edp
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      name: git-source-revision
      type: string
    - default: 'golang:1.22-bookworm'
      description: npm image version
      name: image
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - description: Project name
      name: CODEBASE_NAME
      type: string
    - description: Codebasebranch name
      name: CODEBASEBRANCH_NAME
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
      runAfter:
        - init-values
      taskRef:
        kind: Task
        name: get-version-edp

    - name: sam-lint
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: sam
      params:
        - name: EXTRA_COMMANDS
          value: >-
            SAM_CLI_TELEMETRY=0 sam validate --lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sam-lint
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source

            make test
            make build-go
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - build
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)
  finally:
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-build-sonar-operator-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-so-other-app-build-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: CODEBASEBRANCH_NAME
      description: "Codebasebranchname"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: changeNumber
      description: "Change number from Merge Request"
    - name: patchsetNumber
      description: "Patchset number from Merge Request"
    - name: TICKET_NAME_PATTERN
      description: "Ticket name pattern"
      default: ""
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
      default: ""
    - name: COMMIT_MESSAGE
      description: "Commit message"
      default: ""
    - name: JIRA_ISSUE_METADATA_PAYLOAD
      description: "Jira Payload"
      default: ""
    - name: JIRA_SERVER
      description: "Jira server name"
      default: ""
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        # Use 'gerrit review' command https://gerrit-review.googlesource.com/Documentation/cmd-review.html
        - name: SSH_GERRIT_COMMAND
          value: review --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
        # we can trigger build pipeline without GerritPatchSet, so let's skip exit code if Patch doesn't exists
        - name: ERR_EXIT_CODE
          value: '0'
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: get-version
      taskRef:
        kind: Task
        name: get-version-edp
      runAfter:
        - init-values
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: security
      taskRef:
        kind: Task
        name: security
      runAfter:
        - get-version
      params:
        - name: reportDataProductName
          value: $(tasks.init-values.results.TENANT_NAME)
        - name: reportDataEngagementName
          value: $(params.CODEBASEBRANCH_NAME)
        - name: PROJECT_BRANCH
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - security
        - get-cache
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sonar
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            VERSION=$(tasks.get-version.results.VERSION) make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(tasks.get-version.results.IS_TAG)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)_$(tasks.get-version.results.IS_TAG)"
        - name: kaniko-cache-path
          value: "kaniko-cache"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: ecr-to-docker
      taskRef:
        kind: Task
        name: ecr-to-docker
      runAfter:
        - kaniko-build
      params:
        - name: IMAGE_TAG
          value: "$(tasks.get-version.results.VERSION)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"

    - name: set-version
      taskRef:
        kind: Task
        name: set-version
      runAfter:
        - ecr-to-docker
      params:
        - name: IS_TAG
          value: $(tasks.get-version.results.IS_TAG)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - set-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-pages
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: git-tag
      taskRef:
        kind: Task
        name: git-cli
      runAfter:
        - helm-push-gh-pages
      params:
        - name: GIT_USER_EMAIL
          value: edp-ci@edp.ci-user
        - name: GIT_USER_NAME
          value: edp-ci
        - name: GIT_SCRIPT
          value: |
            git tag -a "$(tasks.get-version.results.VCS_TAG)" -m "Tag is added automatically by CI user"
            git push --tags
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-cbis
      taskRef:
        kind: Task
        name: update-cbis
      runAfter:
        - git-tag
      params:
        - name: CBIS_NAME
          value: $(tasks.init-values.results.RESULT_IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(tasks.get-version.results.IS_TAG)


  finally:
  
    - name: update-cbb
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: update-cbb
      params:
        - name: CODEBASEBRANCH_NAME
          value: $(params.CODEBASEBRANCH_NAME)
        - name: CURRENT_BUILD_NUMBER
          value: $(tasks.get-version.results.BUILD_ID)
  
  
    - name: push-to-jira
      taskRef:
        kind: Task
        name: push-to-jira
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
        - input: "$(params.JIRA_SERVER)"
          operator: notin
          values: [ "" ]
      params:
        - name: TICKET_NAME_PATTERN
          value: "$(params.TICKET_NAME_PATTERN)"
        - name: COMMIT_MESSAGE
          value: "$(params.COMMIT_MESSAGE)"
        - name: COMMIT_ID
          value: "$(tasks.fetch-repository.results.commit)"
        - name: JIRA_ISSUE_METADATA_PAYLOAD
          value: "$(params.JIRA_ISSUE_METADATA_PAYLOAD)"
        - name: CODEBASE_NAME
          value: "$(params.CODEBASE_NAME)"
        - name: PIPELINE_URL
          value: "$(params.pipelineUrl)"
        - name: VCS_TAG
          value: "$(tasks.get-version.results.VCS_TAG)"
        - name: VERSION
          value: "$(tasks.get-version.results.VERSION)"


    - name: send-to-microsoft-teams-failed
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed", "PipelineRunTimeout"]
      taskRef:
        name: send-to-microsoft-teams
      params:
      - name: webhook-url-secret
        value: microsoft-teams-webhook-url-secret
      - name: webhook-url-secret-key
        value: url
      - name: message
        value: >-
          Build Failed project: $(params.CODEBASE_NAME)<br> branch: $(params.git-source-revision)<br> pipeline: <a href=$(params.pipelineUrl)>$(context.pipelineRun.name)</a><br> commit message: $(params.COMMIT_MESSAGE)
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-argocd.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-helm-argocd-lib-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-autotests.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-gradle-other-aut-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: image
      default: 'gradle:7.5.1-jdk11'
      description: "gradle image version"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: targetBranch
      description: Target branch of Merge Request
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)

    - name: test
      taskRef:
        kind: Task
        name: gradle
      runAfter:
        - commit-validate
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_ARGS
          value: |
            -PnexusMavenRepositoryUrl=${NEXUS_HOST_URL}/repository/edp-maven-group \
            test \
            jacocoTestReport
      workspaces:
        - name: source
          workspace: shared-workspace


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-backstage.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-npm-backstage-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: image
      default: 'node:20.9.0'
      description: "npm image version"
      type: string
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - commit-validate
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            set -x
            export NODE_OPTIONS="--max-old-space-size=4144"
            upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            npm config set registry ${NEXUS_HOST_URL}
            echo "always-auth=true" >> .npmrc
            echo "_auth=$upBase64" >> .npmrc
            yarn set version 1.22.19
            yarn config set registry ${NEXUS_HOST_URL}
            yarn install --registry ${NEXUS_HOST_URL}/repository/edp-npm-group
            yarn tsc
            yarn build:backend --config ../../app-config.yaml
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-cd-pipeline-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-cd-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
            make test
            make lint
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      params:
        - name: codebase-name
          value: "review/$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      runAfter:
        - sonar
        - dockerfile-lint
      taskRef:
        kind: Task
        name: kaniko
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: e2e
      taskRef:
        kind: Task
        name: e2e
      runAfter:
        - kaniko-build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_IMAGE_REPOSITORY
          value: "review/$(params.CODEBASE_NAME)"
        - name: E2E_IMAGE_TAG
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-container-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-kaniko-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)

    - name: dockerfile-lint
      taskRef:
        name: hadolint
      runAfter:
        - commit-validate
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - dockerfile-lint
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/review/$(tasks.init-values.results.TENANT_NAME):$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
        - name: IMAGE_TAR
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-edp-common.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-common-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)

    - name: crdocs
      taskRef:
        kind: Task
        name: crdocs
      runAfter:
        - commit-validate
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - crdocs
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-edp-component-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-co-go-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-edp-install.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-helm-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: targetBranch
      description: Target branch of Merge Request
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)

    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        # TODO add all repos needed to ct-config instead of EXTRA_COMMANDS
        - name: EXTRA_COMMANDS
          value: |
            helm repo add epamedp https://epam.github.io/edp-helm-charts/stable --force-update
            helm repo update
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-edp-tekton.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-tekton-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "charts/common-library,charts/custom-pipelines,charts/pipelines-library"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache

    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - init-values
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)

    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - commit-validate
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: $(params.image)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - commit-validate
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: test
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - build
      params:
        - name: BASE_IMAGE
          value: 'epamedp/tekton-python-make:0.1.6'
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make test
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/review/$(tasks.init-values.results.TENANT_NAME):$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
        - name: IMAGE_TAR
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      params:
        - name: codebase-name
          value: "review/$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      runAfter:
        - sonar
        - dockerbuild-verify
      taskRef:
        kind: Task
        name: kaniko
      workspaces:
      - name: source
        workspace: shared-workspace
        subPath: source

    - name: e2e
      taskRef:
        kind: Task
        name: e2e
      runAfter:
        - kaniko-build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_IMAGE_REPOSITORY
          value: "review/$(params.CODEBASE_NAME)"
        - name: E2E_IMAGE_TAG
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-headlamp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-npm-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/javascript-npm-react"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: 'react-npm-edp-version'
      description: "Project name"
      type: string
    - name: image
      default: 'docker.io/library/node:19.5.0-alpine3.16'
      description: "npm image version"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: npm
      runAfter:
        - init-values
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: EXTRA_COMMANDS
          value: |
            upBase64=$(echo -n ${CI_USERNAME}:${CI_PASSWORD} | base64)
            npm set registry http://nexus:8081/repository/edp-npm-group/ --location project
            npm set //nexus:8081/repository/edp-npm-group/:email edp-ci@edp.local --location project
            npm set //nexus:8081/repository/edp-npm-group/:_auth $upBase64 --location project
            npm config set cache /workspace/source/cache
            npm ci
            npm run lint
            npm run test:coverage
            npm run build
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-refspec)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
        - build
      params:
        - name: IMAGE
          value: "$(tasks.init-values.results.DOCKER_REGISTRY_HOST)/review/$(tasks.init-values.results.TENANT_NAME):$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
        - name: IMAGE_TAR
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-keycloak-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-kc-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
            make lint
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: integration-test
      taskRef:
        kind: Task
        name: keycloak-integration-tests
      runAfter:
        - build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: GOLANG_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - integration-test
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko
      runAfter:
        - sonar
        - dockerfile-lint
      params:
        - name: codebase-name
          value: "review/$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: e2e
      taskRef:
        kind: Task
        name: e2e
      runAfter:
        - kaniko-build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_IMAGE_REPOSITORY
          value: "review/$(params.CODEBASE_NAME)"
        - name: E2E_IMAGE_TAG
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-nexus-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-no-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
            make test
            make lint
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: integration-test
      taskRef:
        kind: Task
        name: nexus-integration-tests
      runAfter:
        - build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: GOLANG_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
            make test
            make lint
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerbuild-verify
      taskRef:
        kind: Task
        name: dockerbuild-verify
      runAfter:
        - sonar
        - dockerfile-lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-platform-edp.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-platform-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: targetBranch
      description: Target branch of Merge Request
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      taskRef:
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-sam-go-app.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-sam-go-app-review
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - default: >-
        https://tekton-edp-delivery.eks-core.aws.main.edp.projects.epam.com/#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      name: pipelineUrl
      type: string
    - default: https://github.com/epmd-edp/javascript-npm-react
      description: git url to clone
      name: git-source-url
      type: string
    - default: edp
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      name: git-source-revision
      type: string
    - default: ''
      description: Refspec to fetch before checking out revision.
      name: git-refspec
      type: string
    - default: 'golang:1.22-bookworm'
      description: npm image version
      name: image
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: CODEBASE_NAME
      default: "sam-go"
      description: "Project name"
      type: string
    - description: Commit message
      name: COMMIT_MESSAGE
      type: string
    - description: Pattern to validate a commit message
      name: COMMIT_MESSAGE_PATTERN
      type: string
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: targetBranch
      description: Target branch of Merge Request
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)

    - name: commit-validate
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: commit-validate

    - name: sam-lint
      runAfter:
        - commit-validate
      taskRef:
        kind: Task
        name: sam
      params:
        - name: EXTRA_COMMANDS
          value: >-
            SAM_CLI_TELEMETRY=0 sam validate --lint
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - sam-lint
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source

            make test
            make build-go
      workspaces:
        - name: source
          workspace: shared-workspace


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/gerrit-review-sonar-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-go-so-other-app-review
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: pipelineUrl
      default: https://tekton-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz./#/namespaces/$(context.pipelineRun.namespace)/pipelineruns/$(context.pipelineRun.name)
      type: string
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "edp"
      type: string
    - name: git-refspec
      description: Refspec to fetch before checking out revision.
      default: ""
      type: string
    - name: CODEBASE_NAME
      default: "golang-go"
      description: "Project name"
      type: string
    - name: image
      default: 'golang:1.22-bookworm'
      description: "go image with make installed"
      type: string
    - name: GOPROXY
      default: "http://athens-athens-proxy:80"
      description: "Go proxy link"
      type: string
    - name: targetBranch
      description: Target branch of Merge Request
    - name: changeNumber
      description: Change number from Merge Request
    - name: patchsetNumber
      description: Patchset number from Merge Request
    - name: COMMIT_MESSAGE
      description: "Commit message"
    - name: COMMIT_MESSAGE_PATTERN
      description: "Pattern to validate a commit message"
    - name: CHART_DIR
      description: "Deploy templates directory for helm-lint"
      default: "deploy-templates"
    - name: CT_CONFIGS_DIR
      description: "ct-configs directory for helm-lint"
      default: "ct-configs"
  tasks:
    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: refspec
          value: $(params.git-refspec)
        - name: subdirectory
          value: source
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: gerrit-notify
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: review --verified 0 --message 'Build Started $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
    
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      runAfter:
        - fetch-repository
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: BRANCH_NAME
          value: $(params.targetBranch)
    - name: get-cache
      taskRef:
        kind: Task
        name: get-cache
      runAfter:
        - fetch-repository
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


    - name: commit-validate
      taskRef:
        kind: Task
        name: commit-validate
      runAfter:
        - fetch-repository
      params:
        - name: COMMIT_MESSAGE_PATTERN
          value: $(params.COMMIT_MESSAGE_PATTERN)
        - name: COMMIT_MESSAGE
          value: $(params.COMMIT_MESSAGE)
    
    - name: helm-docs
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - init-values
      params:
        - name: EXTRA_COMMANDS
          value: |
            GOPROXY=$(params.GOPROXY) make validate-docs
        - name: BASE_IMAGE
          value: "golang:1.22-bookworm"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    
    - name: helm-lint
      taskRef:
        kind: Task
        name: helm-lint
      runAfter:
        - fetch-repository
      params:
        - name: CHART_DIR
          value: $(params.CHART_DIR)
        - name: CT_CONFIGS_DIR
          value: $(params.CT_CONFIGS_DIR)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: build
      taskRef:
        kind: Task
        name: golang
      runAfter:
        - helm-docs
      params:
        - name: BASE_IMAGE
          value: $(params.image)
        - name: GOPROXY
          value: $(params.GOPROXY)
        - name: EXTRA_COMMANDS
          value: |
            cd source
            make build
            make test
            make lint
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: sonar
      taskRef:
        kind: Task
        name: sonarqube-general
      runAfter:
        - build
      params:
        - name: SONAR_PROJECT_KEY
          value: $(params.CODEBASE_NAME)
        - name: SONAR_PROJECT_NAME
          value: $(params.CODEBASE_NAME)
        - name: target-branch
          value: $(params.targetBranch)
        - name: source-branch
          value: $(params.git-source-revision)
        - name: key-id
          value: $(params.changeNumber)
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: dockerfile-lint
      runAfter:
        - fetch-repository
      taskRef:
        kind: Task
        name: hadolint
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: kaniko-build
      params:
        - name: codebase-name
          value: "review/$(params.CODEBASE_NAME)"
        - name: image-tag
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
        - name: image-tar
          value: "$(params.CODEBASE_NAME)-$(params.changeNumber)-$(params.patchsetNumber)"
      runAfter:
        - sonar
        - dockerfile-lint
      taskRef:
        kind: Task
        name: kaniko
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source

    - name: e2e
      taskRef:
        kind: Task
        name: e2e
      runAfter:
        - kaniko-build
      params:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_IMAGE_REPOSITORY
          value: "review/$(params.CODEBASE_NAME)"
        - name: E2E_IMAGE_TAG
          value: "$(params.changeNumber)-$(params.patchsetNumber)"
      workspaces:
        - name: source
          workspace: shared-workspace
          subPath: source
    - name: save-cache
      taskRef:
        kind: Task
        name: save-cache
      runAfter:
        - build
      params:
        - name: CACHE_NAME
          value: $(params.CODEBASE_NAME)
      workspaces:
        - name: cache
          workspace: shared-workspace
          subPath: cache


  finally:
    - name: gerrit-vote-success
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified +1 --message 'Build Successfull $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
  
    - name: gerrit-vote-failure
      when:
        - input: "$(tasks.status)"
          operator: in
          values: ["Failed"]
      taskRef:
        kind: Task
        name: gerrit-ssh-cmd
      params:
        - name: GERRIT_PORT
          value: '30003'
        - name: SSH_GERRIT_COMMAND
          value: "review --verified -1 --message 'Build Failed $(params.pipelineUrl)' $(params.changeNumber),$(params.patchsetNumber)"
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/release/release-edp-install-component-operator.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-edp-install-component-operator-app-release-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: codebase-name
      default: "golang-go"
      description: "Project name"
      type: string
    - name: version
      default: "1.0.0"
      description: "Project version"
      type: string
    - name: build-image
      default: "golang:1.22-bookworm"
      description: "Image for build agent"
      type: string
    - name: goproxy
      default: "http://athens-athens-proxy:80"
      description: "goproxy url"
      type: string
    - name: extra-build-commands
      default: "VERSION=$(params.version) make build"
      description: "Command to run build task"
      type: string
    - name: chart-path
      default: "deploy-templates"
      description: "Path to chart directory"
      type: string
  tasks:
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      params:
        - name: CODEBASE_NAME
          value: $(params.codebase-name)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: validate-release-branch
      taskRef:
        kind: Task
        name: validate-release-branch
      runAfter:
        - init-values
      params:
        - name: branch
          value: $(params.git-source-revision)

    - name: validate-target-version
      taskRef:
        kind: Task
        name: validate-target-version
      runAfter:
        - init-values
      params:
        - name: version
          value: $(params.version)
        - name: git-source-url
          value: $(params.git-source-url)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - validate-release-branch
        - validate-target-version
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: depth
          value: "0"
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-release-version
      taskRef:
        kind: Task
        name: update-release-version
      runAfter:
        - fetch-repository
      params:
        - name: version
          value: $(params.version)
        - name: chart-path
          value: $(params.chart-path)
        - name: codebase-name
          value: $(params.codebase-name)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - update-release-version

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-release
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: chart-path
          value: $(params.chart-path)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-release-push
      taskRef:
        kind: Task
        name: git-release-push
      runAfter:
        - helm-push-gh-pages
      params:
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/release/release-gerrit.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-edp-gerrit-app-release-edp
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: codebase-name
      default: "golang-go"
      description: "Project name"
      type: string
    - name: version
      default: "1.0.0"
      description: "Project version"
      type: string
    - name: chart-path
      default: "deploy-templates"
      description: "Path to chart directory"
      type: string
    - name: dockerhub-account
      description: "Name of dockerhub account to push images"
      type: string
  tasks:
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      params:
        - name: CODEBASE_NAME
          value: $(params.codebase-name)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: validate-release-branch
      taskRef:
        kind: Task
        name: validate-release-branch
      runAfter:
        - init-values
      params:
        - name: branch
          value: $(params.git-source-revision)

    - name: validate-target-version
      taskRef:
        kind: Task
        name: validate-target-version
      runAfter:
        - init-values
      params:
        - name: version
          value: $(params.version)
        - name: git-source-url
          value: $(params.git-source-url)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - validate-release-branch
        - validate-target-version
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: depth
          value: "0"
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko-release
      runAfter:
        - fetch-repository
      params:
        - name: codebase-name
          value: "$(params.codebase-name)"
        - name: image-tag
          value: "$(params.version)"
        - name: image-tar
          value: "$(params.codebase-name)_$(params.version)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-release-push
      taskRef:
        kind: Task
        name: git-release-push
      runAfter:
        - kaniko-build
      params:
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/release/release-operators-headlamp-tekton.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-operators-app-release-edp
  annotations:
    chains.tekton.dev/transparency-upload: "true"
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: codebase-name
      default: "golang-go"
      description: "Project name"
      type: string
    - name: version
      default: "1.0.0"
      description: "Project version"
      type: string
    - name: build-image
      default: "golang:1.22-bookworm"
      description: "Image for build agent"
      type: string
    - name: goproxy
      default: "http://athens-athens-proxy:80"
      description: "goproxy url"
      type: string
    - name: extra-build-commands
      default: "VERSION=$(params.version) make build"
      description: "Command to run build task"
      type: string
    - name: chart-path
      default: "deploy-templates"
      description: "Path to chart directory"
      type: string
    - name: dockerhub-account
      description: "Name of dockerhub account to push images"
      type: string
  tasks:
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      params:
        - name: CODEBASE_NAME
          value: $(params.codebase-name)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: validate-release-branch
      taskRef:
        kind: Task
        name: validate-release-branch
      runAfter:
        - init-values
      params:
        - name: branch
          value: $(params.git-source-revision)

    - name: validate-target-version
      taskRef:
        kind: Task
        name: validate-target-version
      runAfter:
        - init-values
      params:
        - name: version
          value: $(params.version)
        - name: git-source-url
          value: $(params.git-source-url)
      workspaces:
        - name: ssh-directory
          workspace: ssh-creds

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - validate-release-branch
        - validate-target-version
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: depth
          value: "0"
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: update-release-version
      taskRef:
        kind: Task
        name: update-release-version
      runAfter:
        - fetch-repository
      params:
        - name: version
          value: $(params.version)
        - name: chart-path
          value: $(params.chart-path)
        - name: codebase-name
          value: $(params.codebase-name)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: build
      taskRef:
        kind: Task
        name: build-release
      runAfter:
        - update-release-version
      params:
        - name: base-image
          value: $(params.build-image)
        - name: goproxy
          value: $(params.goproxy)
        - name: extra-commands
          value: $(params.extra-build-commands)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: kaniko-build
      taskRef:
        kind: Task
        name: kaniko-release
      runAfter:
        - build
      params:
        - name: codebase-name
          value: "$(params.codebase-name)"
        - name: image-tag
          value: "$(params.version)"
        - name: image-tar
          value: "$(params.codebase-name)_$(params.version)"
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - kaniko-build

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-release
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: chart-path
          value: $(params.chart-path)
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: git-release-push
      taskRef:
        kind: Task
        name: git-release-push
      runAfter:
        - helm-push-gh-pages
      params:
        - name: branch
          value: $(params.git-source-revision)
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds
---
# Source: edp-custom-pipelines/templates/pipelines/release/release-tekton-common-custom.yaml
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gerrit-tekton-common-custom-app-release-edp
  annotations:
    chains.tekton.dev/transparency-upload: "true"
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
spec:
  workspaces:
    - name: shared-workspace
    - name: ssh-creds
  params:
    - name: git-source-url
      default: "https://github.com/epmd-edp/go-go-beego"
      description: git url to clone
      type: string
    - name: git-source-revision
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      default: "master"
      type: string
    - name: codebase-name
      default: "golang-go"
      description: "Project name"
      type: string
    - name: chart-path
      default: "deploy-templates"
      description: "Path to chart directory"
      type: string
  tasks:
    - name: init-values
      taskRef:
        kind: Task
        name: init-values
      params:
        - name: CODEBASE_NAME
          value: $(params.codebase-name)
        - name: BRANCH_NAME
          value: $(params.git-source-revision)

    - name: fetch-repository
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - init-values
      params:
        - name: url
          value: $(params.git-source-url)
        - name: revision
          value: $(params.git-source-revision)
        - name: depth
          value: "0"
      workspaces:
        - name: output
          workspace: shared-workspace
        - name: ssh-directory
          workspace: ssh-creds

    - name: wait-for
      taskRef:
        kind: Task
        name: wait-for
      runAfter:
        - fetch-repository

    - name: helm-push-gh-pages
      taskRef:
        kind: Task
        name: helm-push-gh-release
      runAfter:
        - wait-for
      params:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: chart-path
          value: $(params.chart-path)
      workspaces:
        - name: source
          workspace: shared-workspace
---
# Source: edp-custom-pipelines/templates/resources/ack/ecr/review-repository.yaml
apiVersion: ecr.services.k8s.aws/v1alpha1
kind: Repository
metadata:
  name: "review-edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz"
spec:
  name: "review/edp-custom-pipelines-0.12.0-SNAPSHOT.53.tgz"
  imageScanningConfiguration:
    scanOnPush: false
  imageTagMutability: MUTABLE
---
# Source: edp-custom-pipelines/templates/tasks/CrdocsBuild.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: crdocs
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "golang build"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  params:
    - name: GOOS
      description: "running program's operating system target"
      default: linux
      type: string
    - name: GOARCH
      description: "running program's architecture target"
      default: amd64
      type: string
    - name: GO111MODULE
      description: "value of module support"
      default: auto
      type: string
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: ""
      type: string
    - name: CGO_ENABLED
      description: "Toggle cgo tool during Go build. Use value '0' to disable cgo (for static builds)."
      default: '0'
      type: string
    - name: GOSUMDB
      description: "Go checksum database url. Use value 'off' to disable checksum validation."
      default: ""
      type: string
    - name: EXTRA_COMMANDS
      type: string
      description: Extra commands
      default: ""
      type: string
    - name: BASE_IMAGE
      description: "Base image"
      default: "golang:1.22-bookworm"
      type: string
    - name: GOPROXY
      description: "Go proxy server"
      default: ""
      type: string
  workspaces:
    - name: source


  steps:
    - name: crdocs
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)

      script: |
        set -ex
        crdPath="deploy-templates/crds"
        echo "${GOPROXY}"
        if [ -d "${crdPath}" ]; then
            make api-docs
            git diff -s --exit-code docs/api.md || (echo "Please make sure that the CRD documentation is up to date. Run 'make api-docs' to address the issue" && exit 1)
        else
            echo "Directory with CRD not found in ${crdPath}. Stage will be skipped"
        fi
      env:
        - name: GOOS
          value: "$(params.GOOS)"
        - name: GOARCH
          value: "$(params.GOARCH)"
        - name: GO111MODULE
          value: "$(params.GO111MODULE)"
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: CGO_ENABLED
          value: "$(params.CGO_ENABLED)"
        - name: GOSUMDB
          value: "$(params.GOSUMDB)"
        - name: GOPROXY
          value: "$(params.GOPROXY)"
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/GetVersionEDPcontainer.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-version-edp-container
spec:
  description:
  params:
    - name: CODEBASEBRANCH_NAME
      type: string
      description: "Codebasebranch name"
  results:
    - name: VERSION
      description: "Application version"
    - name: VCS_TAG
      description: "VCS tag"
    - name: IS_TAG
      description: "CodebaseImageStream tag"
    - name: BUILD_ID
      description: "Build id"
    - name: BRANCH_VERSION
      description: "Branch version"
    - name: IS_RELEASE_BRANCH
    - name: DEPLOYABLE_MODULE_DIR
  steps:
    - name: get-version
      image: bitnami/kubectl:1.25.2
      env:
        - name: CODEBASEBRANCH_NAME
          value: "$(params.CODEBASEBRANCH_NAME)"
      script: |
        #!/usr/bin/env bash
        set -e

        # replace '/' with '-'
        CODEBASEBRANCH_NAME=${CODEBASEBRANCH_NAME//\//-}
        # get current BUILD ID
        BUILD_ID=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.status.build})
        # and increment it
        BUILD_ID=$((BUILD_ID+1))
        # set new version
        kubectl patch codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} --subresource=status --type=merge -p "{\"status\": {\"build\": \"$BUILD_ID\"}}"

        IS_RELEASE_BRANCH=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.spec.release})

        # Get current version
        VERSION=$(kubectl get codebasebranches.v2.edp.epam.com ${CODEBASEBRANCH_NAME} -o txt --output=jsonpath={.spec.version})

        BRANCH_VERSION=${VERSION}
        VERSION="${VERSION}.${BUILD_ID}"
        VCS_TAG="build/${VERSION}"
        IS_TAG=${VERSION}
        DEPLOYABLE_MODULE_DIR="."

        IS_TAG=$(echo ${IS_TAG} |sed 's/[0-9]-SNAPSHOT.//g')

        echo "Application version - ${VERSION}"
        echo "VCS tag - ${VCS_TAG}"
        echo "IS tag - ${IS_TAG}"
        echo "Build id - ${BUILD_ID}"
        echo "Branch version - ${BRANCH_VERSION}"

        printf "%s" "${VERSION}" > "$(results.VERSION.path)"
        printf "%s" "${VCS_TAG}" > "$(results.VCS_TAG.path)"
        printf "%s" "${IS_TAG}" > "$(results.IS_TAG.path)"
        printf "%s" "${BUILD_ID}" > "$(results.BUILD_ID.path)"
        printf "%s" "${BRANCH_VERSION}" > "$(results.BRANCH_VERSION.path)"
        printf "%s" "${IS_RELEASE_BRANCH}" > "$(results.IS_RELEASE_BRANCH.path)"
        printf "%s" "${DEPLOYABLE_MODULE_DIR}" > "$(results.DEPLOYABLE_MODULE_DIR.path)"
---
# Source: edp-custom-pipelines/templates/tasks/HelmPushGhPages.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-push-gh-pages
spec:
  description: |
    This Task allows Uset to push a new version of the Helm Chart
    to the repository with Snapshot versions.
  workspaces:
    - name: source
      description: A workspace that contains the repository.

  params:
    - name: CODEBASE_NAME
      type: string

    - name: SSH_REPO_URL
      type: string
      default: "git@github.com:epam/edp-helm-charts.git"

    - name: GH_CHART_URL
      type: string
      default: "https://epam.github.io/edp-helm-charts"

    - name: GH_BRANCH
      type: string
      default: "gh-pages"

    - name: GH_EMAIL
      type: string
      default: "SupportEPMD-EDP@epam.com"

    - name: GH_USER_NAME
      type: string
      default: "edp-bot"

    - name: HELM_REPO_NAME
      type: string
      default: "epamedp"

    - name: SSH_SECRET_NAME
      type: string
      default: "github-pages-helm-chart-sshkey"

    - name: PROJECT_DIR
      type: string
      description: "The directory containing project files."
      default: "."

    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
        or have overridden the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"

  volumes:
    - name: ssh-keys
      secret:
        secretName: $(params.SSH_SECRET_NAME)

  steps:
    - name: helm-push-gh-pages
      image: epamedp/tekton-helm:0.1.6
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      volumeMounts:
        - name: ssh-keys
          mountPath: /workspaces/ssh-keys
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: GIT_SSH_COMMAND
          value: "ssh -i $(params.USER_HOME)/.ssh/id_rsa -o StrictHostKeyChecking=no "
        - name: GIT_SSH_VARIANT
          value: "ssh"
        - name: SSH_REPO_URL
          value: $(params.SSH_REPO_URL)
        - name: GH_EMAIL
          value: $(params.GH_EMAIL)
        - name: GH_USER_NAME
          value: $(params.GH_USER_NAME)
        - name: HELM_REPO_NAME
          value: $(params.HELM_REPO_NAME)
        - name: GH_CHART_URL
          value: $(params.GH_CHART_URL)
        - name: GH_BRANCH
          value: $(params.GH_BRANCH)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKING_DIR
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
      script: |
        set -ex

        ls -la

        cp -R "/workspaces/ssh-keys" "${PARAM_USER_HOME}"/.ssh
        chmod 700 "${PARAM_USER_HOME}"/.ssh
        chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*

        # Setting up the config for the git.
        git config --global user.email ${GH_EMAIL}
        git config --global user.name ${GH_USER_NAME}

        for i in "deploy-templates" "charts/pipelines-library" "charts/custom-pipelines"
        do
            if [ -f "${i}/Chart.yaml" ]; then
                echo "[TEKTON] Chart.yaml exists in ${i} in the repository."
                rm -rf chart-repo

                git clone ${SSH_REPO_URL} chart-repo
                cd chart-repo/snapshot

                helm repo add ${HELM_REPO_NAME} ${GH_CHART_URL}/stable --force-update
                helm dep update ${WORKING_DIR}/${i}/
                helm package ${WORKING_DIR}/${i}/ -d packages
                helm repo index --url ${GH_CHART_URL}/snapshot --merge index.yaml .

                git add packages/*.tgz index.yaml
                git commit -m "Push ${CODEBASE_NAME} helm chart"
                git push -u origin ${GH_BRANCH}

                cd ${WORKING_DIR}
            else
                echo "${i}/Chart.yaml does not exist."
            fi
        done
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/MkdocsBuild.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: mkdocs
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task can be used to run python goals and mkdocs on a project.
  workspaces:
    - name: source
    - name: ssh-directory
  params:
    - name: PATH_CONTEXT
      type: string
      default: "."
      description: The path where package.json of the project is defined.
    - name: BASE_IMAGE
      type: string
      default: "squidfunk/mkdocs-material:9.0.6"
      description: The python image you want to use.
    - name: GIT_SSH_COMMAND
      type: string
      default: "ssh -i /tekton/home/.ssh/id_rsa -o StrictHostKeyChecking=no"
      description: Custom SSH command.
    - name: GIT_SSH_VARIANT
      type: string
      default: "ssh"
    - name: USER_HOME
      type: string
      default: "/tekton/home"
  steps:
    - name: mkdocs
      image: $(params.BASE_IMAGE)
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
      env:
        - name: GIT_SSH_COMMAND
          value: $(params.GIT_SSH_COMMAND)
        - name: GIT_SSH_VARIANT
          value: $(params.GIT_SSH_VARIANT)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        set -eux

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        commit_docs=$(git show --diff-filter=ACMR --name-only --pretty=format: -- "docs/*" "mkdocs.yml")
        echo -e "Changed documentation in the commit:\n${commit_docs}"

        if [ -z "${commit_docs}" ]; then
            echo "No changes related to the documentation have been found, skipping..."
        else
            remote_repo=$(git config --get remote.origin.url)

            python -m venv /home/tekton/mkdocs
            source /home/tekton/mkdocs/bin/activate
            pip install -r hack/mkdocs/requirements.txt

            # Inject Google Analytics key on build time
            export GOOGLE_ANALYTICS_KEY=G-7ZV6PJ2LSP

            mkdocs build -d ./site

            git config --global user.email SupportEPMD-EDP@epam.com
            git config --global user.name edp-bot

            git clone --branch=gh-pages --depth=1 "${remote_repo}" gh-pages
            cd gh-pages
            # remove current content in branch gh-pages
            git rm -r .
            # copy new doc.
            cp -r ../site/* .
            # try to address issue with sitemap.xml from GH-Pages
            touch .nojekyll
            echo "google-site-verification: google8d28c574bd766c92.html" > google8d28c574bd766c92.html
            echo "18f79d89057c4b108502f91fb24e674b" > 18f79d89057c4b108502f91fb24e674b.txt
            echo -e "User-agent: *\nAllow: /\nSitemap: https://epam.github.io/edp-install/sitemap.xml" > robots.txt
            echo -e "<?xml version=\"1.0\"?>\n<users>\n\t<user>0A0BD75C41E23DEE0C6F5DB33E1BECBC</user>\n</users>" > BingSiteAuth.xml
            git add .
            git commit -m 'Update documentation'
            git push -u origin gh-pages
        fi
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/SetVersionHelm.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: set-version
spec:
  description: |
    This Task sets a version and appVersion into a Chart file.

  workspaces:
    - name: source

  params:
    - name: IS_TAG
      type: string
      description: "Image Stream Tag"
    - name: PROJECT_DIR
      type: string
      description: "The directory containing project files."
      default: "."
  steps:
    - name: set-version-to-chart
      image: alpine:3.18.6
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      env:
        - name: IS_TAG
          value: "$(params.IS_TAG)"
      script: |
        set -ex

        chartPath=$(find . -name "Chart.yaml" ! -path '*/common-library/*')
        IFS=$'\n'
        for i in "${chartPath}"; do
            echo "[TEKTON] Chart path is ${i}"
            sed -i "s/^version:.*$/version: ${IS_TAG}/" $i
            sed -i "s/^appVersion:.*$/appVersion: ${IS_TAG}/" $i
        done || true
---
# Source: edp-custom-pipelines/templates/tasks/cd/argocd-integration.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: argo-cd-integration
spec:
  params:
    - name: PIPELINE
      description: EDP kind:CDPipeline name used for deployment.
      type: string
      default: ""
    - name: STAGE
      description: EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values.
      type: string
      default: ""
    - name: KUBECONFIG_SECRET_NAME
      type: string
      description: The name of secret with Kubeconfig to connect to the remote cluster
      default: "in-cluster"
  volumes:
    - name: kubeconfig
      secret:
        secretName: $(params.KUBECONFIG_SECRET_NAME)
        optional: true
  steps:
    - name: argo-cd-integration
      image: epamedp/tekton-autotest:0.1.4
      volumeMounts:
        - name: kubeconfig
          mountPath: /workspace/source/kube
      env:
        - name: PIPELINE
          value: "$(params.PIPELINE)"
        - name: STAGE
          value: "$(params.STAGE)"
      script: |
        #!/bin/bash
        set -ex

        kubeconfig="workspace/source/kube/config"

        TARGET_NAMESPACE=$(kubectl get stages ${PIPELINE}-${STAGE} -o jsonpath='{.spec.namespace}')

        if [ -f "$kubeconfig" ]; then
            echo "Kubeconfig exists: $kubeconfig, use it"
            export KUBECONFIG=$kubeconfig
        else
            echo "Kubeconfig does not exist, working on current cluster"
        fi

        # Wait when gerrit deployment is ready
        kubectl wait -n ${TARGET_NAMESPACE} gerrit.v2.edp.epam.com --all '--for=jsonpath={.status.status}=ready' --timeout 400s

        # Get current known hosts from argocd config map

        kubectl get cm argocd-ssh-known-hosts-cm -n argocd -o jsonpath='{.data.ssh_known_hosts}' > /tmp/ssh_known_hosts

        # remove host for gerrit
        ssh-keygen -f /tmp/ssh_known_hosts  -R "[gerrit.${TARGET_NAMESPACE}]:${gerritPort}" || true

        # Get known hosts from gerrit pod

        gerritPort=$(kubectl get gerrit gerrit -n ${TARGET_NAMESPACE} -o jsonpath='{.spec.sshPort}')
        kubectl exec -it deployment/gerrit -n ${TARGET_NAMESPACE} -- ssh-keyscan -p ${gerritPort} gerrit.${TARGET_NAMESPACE} >> /tmp/ssh_known_hosts

        # Set gerrit url for ARGOCD
        gerritUrl=$(echo -n "ssh://edp-ci@gerrit.${TARGET_NAMESPACE}:${gerritPort}" | base64 -w0)

        # copy secret to argocd ns
        SECRET=$(kubectl get secret gerrit-ciuser-sshkey -n ${TARGET_NAMESPACE} -o json)
        SECRET=$(echo ${SECRET} | jq 'del(.data.username,.metadata.annotations,.metadata.creationTimestamp,.metadata.labels,.metadata.resourceVersion,.metadata.uid,.metadata.ownerReferences)')
        SECRET=$(echo ${SECRET} | jq '.metadata.namespace = "argocd"')
        SECRET=$(echo ${SECRET} | jq --arg name "${TARGET_NAMESPACE}" '.metadata.name = $name')
        SECRET=$(echo ${SECRET} | jq --arg url "${gerritUrl}" '.data.url = $url')
        SECRET=$(echo ${SECRET} | jq '.data.sshPrivateKey = .data.id_rsa')
        SECRET=$(echo ${SECRET} | jq 'del(.data.id_rsa,.data."id_rsa.pub")')

        echo ${SECRET} | kubectl apply -f -

        # Create configmap with known hosts
        kubectl create configmap argocd-ssh-known-hosts-cm -n argocd --from-file /tmp/ssh_known_hosts -o yaml --dry-run=client | kubectl apply -f -

        # Add argocd label to secret
        kubectl label --overwrite secret ${TARGET_NAMESPACE} -n argocd "argocd.argoproj.io/secret-type=repo-creds"

        rm -f /tmp/ssh_known_hosts
---
# Source: edp-custom-pipelines/templates/tasks/cd/clean-edp.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: clean-edp
spec:
  params:
    - name: PIPELINE
      description: EDP kind:CDPipeline name used for deployment.
      type: string
      default: ""
    - name: STAGE
      description: EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values.
      type: string
      default: ""
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
      type: string
    - name: KUBECONFIG_SECRET_NAME
      type: string
      description: The name of secret with Kubeconfig to connect to the remote cluster
      default: "in-cluster"
  volumes:
    - name: kubeconfig
      secret:
        secretName: $(params.KUBECONFIG_SECRET_NAME)
        optional: true
  steps:
    - name: clean-edp
      image: epamedp/tekton-autotest:0.1.4
      volumeMounts:
        - name: kubeconfig
          mountPath: /workspace/source/kube
      env:
        - name: PIPELINE
          value: "$(params.PIPELINE)"
        - name: STAGE
          value: "$(params.STAGE)"
        - name: APPLICATIONS_PAYLOAD
          value: "$(params.APPLICATIONS_PAYLOAD)"
      script: |
        #!/usr/bin/env python

        import subprocess
        import json
        import os
        import re

        kubeconfig = "workspace/source/kube/config"

        pipeline = os.getenv('PIPELINE')
        stage = os.getenv('STAGE')

        stages = subprocess.Popen(['kubectl', 'get', 'stages', pipeline + '-' + stage, '-o', "jsonpath='{.spec.namespace}'"], stdout=subprocess.PIPE)
        output, error = stages.communicate()
        target_namespace=output.decode('utf-8').strip("'")

        print("Pipeline - " + pipeline)
        print("Stage - " + stage)
        print("Deployble namespace " + target_namespace)

        if os.path.isfile(kubeconfig):
            print(f"Kubeconfig exists: {kubeconfig} , use it")
            os.environ['KUBECONFIG'] = kubeconfig
        else:
            print("Kubeconfig does not exist, working on current cluster")

        get_crd = subprocess.Popen(['kubectl', 'get', 'crd', '-o', 'json'], stdout=subprocess.PIPE)

        crd = json.load(get_crd.stdout)

        edp_cr = [item['metadata']['name'] for item in crd['items'] if '.v2.edp.epam.com' in item['metadata']['name']]

        keycloak_cr=["keycloakclients.v1.edp.epam.com",
                    "keycloakclientscopes.v1.edp.epam.com",
                    "keycloakrealmgroups.v1.edp.epam.com",
                    "keycloakrealmroles.v1.edp.epam.com",
                    "keycloakrealmrolebatches.v1.edp.epam.com",
                    "keycloakauthflows.v1.edp.epam.com",
                    "keycloakrealmcomponents.v1.edp.epam.com",
                    "keycloakrealmidentityproviders.v1.edp.epam.com",
                    "keycloakrealmusers.v1.edp.epam.com",
                    "keycloakrealms.v1.edp.epam.com",
                    "keycloaks.v1.edp.epam.com"]

        # Delete codebase validation webhook
        webhook = subprocess.run(
            ['kubectl', 'get', 'ValidatingWebhookConfigurations', 'edp-codebase-operator-validating-webhook-configuration-' + target_namespace,
        '--no-headers', '--output=custom-columns=NAME:.metadata.name'],
        capture_output=True, text=True
        ).stdout.split('\n')[0]
        print("ValidatingWebhook - " + webhook)

        if webhook:
            subprocess.run(['kubectl', 'delete', 'ValidatingWebhookConfigurations', webhook, '--timeout=12s'], check=True)
            print(f"EDP Validating Webhook Configuration has been deleted: {webhook}")
        else:
            print(f"Unable to find ValidatingWebhookConfigurations")

        # Delete EDP cr

        for cr in edp_cr:
            resources_command = subprocess.run(
                ['kubectl', 'get', cr, '-o', 'json', '-n', target_namespace],
                capture_output=True, text=True
            )
            resources = json.loads(resources_command.stdout)

            resource_names = [item['metadata']['name'] for item in resources['items']]

            for element in resource_names:
                print(f"Start deleting process, now deleting {element} in {cr}")
                replace_finalizers_command = f"kubectl get {cr} {element} -o json -n {target_namespace} | jq 'del(.metadata.finalizers)' | kubectl replace -f -"
                command = f"kubectl delete {cr} {element} --timeout='12s' --ignore-not-found -n {target_namespace}"
                subprocess.run([replace_finalizers_command], shell=True, capture_output=True, text=True)
                result = subprocess.run([command], shell=True, capture_output=True, text=True)
                print(result.stdout)


        # Delete Keycloak cr

        for cr in keycloak_cr:
            resources_command = subprocess.run(
                ['kubectl', 'get', cr,'-o', 'json', '-n', target_namespace],
                capture_output=True, text=True
            )
            # print(resources_command)
            resources = json.loads(resources_command.stdout)
            resource_names = [item['metadata']['name'] for item in resources['items']]

            for element in resource_names:
                print(f"Start deleting process, now deleting {element} in {cr}")
                replace_finalizers_command = f"kubectl get {cr} {element} -o json -n {target_namespace} | jq 'del(.metadata.finalizers)' | kubectl replace -f -"
                command = f"kubectl delete {cr} {element} --timeout='12s' --ignore-not-found -n {target_namespace}"
                subprocess.run([replace_finalizers_command], shell=True, capture_output=True, text=True)
                result = subprocess.run([command], shell=True, capture_output=True, text=True)
                print(result.stdout)

        # Delete EDP components

        resources_command = subprocess.run(
                ['kubectl', 'get', 'edpcomponents.v1.edp.epam.com','-o', 'json', '-n', target_namespace],
                capture_output=True, text=True
            )

        resources = json.loads(resources_command.stdout)
        resource_names = [item['metadata']['name'] for item in resources['items']]

        for element in resource_names:
            print(f"Start deleting process, now deleting {element} in edpcomponents.v1.edp.epam.com")
            command = f"kubectl delete edpcomponents.v1.edp.epam.com {element} --timeout='12s' --ignore-not-found -n {target_namespace}"
            result = subprocess.run([command], shell=True, capture_output=True, text=True)
            print(result.stdout)

    - name: delete-argo-app
      image: epamedp/tekton-cd-pipeline:0.1.2
      env:
        - name: ARGOCD_URL
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: url
        - name: ARGOCD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: ci-argocd
              key: token
        - name: PIPELINE
          value: "$(params.PIPELINE)"
        - name: STAGE
          value: "$(params.STAGE)"
      script: |
        set -ex

        export ARGOCD_OPTS="--core=false --grpc-web"
        # the address of the Argo CD server without https:// prefix
        export ARGOCD_SERVER=${ARGOCD_URL#*//}

        argocd app delete -l "app.edp.epam.com/stage=$STAGE" -l "app.edp.epam.com/pipeline=$PIPELINE" --core=false --grpc-web -y

        sleep 40
---
# Source: edp-custom-pipelines/templates/tasks/e2e.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: e2e
  labels:
    helm.sh/chart: edp-custom-pipelines-0.12.0-SNAPSHOT.53
    app.kubernetes.io/version: "0.12.0-SNAPSHOT.53"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.1"
spec:
  description: >-
    This Task creates vcluster and runs kuttl tests on it.
  workspaces:
    - name: source

  params:
    - name: CODEBASE_NAME
      type: string
    - name: E2E_IMAGE_REPOSITORY
      type: string
    - name: E2E_IMAGE_TAG
      type: string
    - name: E2E_HOST_NS
      type: string
      default: "e2e-vcluster"
    - name: TOOLS_IMAGE
      type: string
      default: "epamedp/tekton-helm:0.1.6"

  results:
    - name: release_name

  steps:
    - name: vcluster-start
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_IMAGE_REPOSITORY
          value: $(params.E2E_IMAGE_REPOSITORY)
        - name: E2E_IMAGE_TAG
          value: $(params.E2E_IMAGE_TAG)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x

        random_str=$(echo $RANDOM | md5sum | head -c 10)
        release_name=$(echo "${CODEBASE_NAME}-${random_str}" | tr '[:upper:]' '[:lower:]')

        vcluster create ${release_name} \
         -n ${E2E_HOST_NS} \
         --connect=false \
         --update-current=false

        printf "%s" "${release_name}" > "$(results.release_name.path)"

    - name: kuttl-test
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      onError: continue
      env:
        - name: E2E_IMAGE_REPOSITORY
          value: $(params.E2E_IMAGE_REPOSITORY)
        - name: E2E_IMAGE_TAG
          value: $(params.E2E_IMAGE_TAG)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
      script: |
        set -x

        release_name=$(cat $(results.release_name.path))
        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- kubectl kuttl test

    - name: vcluster-remove
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x

        release_name=$(cat $(results.release_name.path))
        vcluster -n ${E2E_HOST_NS} delete ${release_name}

    - name: kuttl-test-verify-exitcode
      image: alpine:3.18.6
      workingDir: $(workspaces.source.path)
      script: |
        exitCode=`cat $(steps.step-kuttl-test.exitCode.path)`
        if [ $exitCode == 0 ]; then
            echo "The exit code contains zero status code: ${exitCode}"
        else
            echo "The exit code contains non-zero status code: ${exitCode}"
            exit 1
        fi
---
# Source: edp-custom-pipelines/templates/tasks/edp-autotests.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: autotests
spec:
  description: |
    This task for autotests.
  workspaces:
    - name: source
      description: A workspace that contains the repository.
  params:
    - name: cluster
      type: string
    - name: threads_num
      type: string
    - name: namespace
      type: string
    - name: tags
      type: string
    - name: ci_tool
      type: string
    - name: git_provider
      type: string
    - name: moon_url
      type: string
    - name: browser_type
      type: string
    - name: browser_name
      type: string
    - name: browser_version
      type: string
    - name: secret_name
      type: string
    - name: secret_namespace
      type: string
    - name: registry_type
      type: string
  steps:
    - name: run-autotests
      image: gradle:8-jdk11
      workingDir: $(workspaces.source.path)
      env:
        - name: CLUSTER
          value: $(params.cluster)
        - name: THREADS_NUM
          value: $(params.threads_num)
        - name: NAMESPACE
          value: $(params.namespace)
        - name: TAGS
          value: $(params.tags)
        - name: CI_TOOL
          value: $(params.ci_tool)
        - name: GIT_PROVIDER
          value: $(params.git_provider)
        - name: MOON_URL
          value: $(params.moon_url)
        - name: BROWSER_TYPE
          value: $(params.browser_type)
        - name: BROWSER_NAME
          value: $(params.browser_name)
        - name: BROWSER_VERSION
          value: $(params.browser_version)
        - name: SECRET_NAME
          value: $(params.secret_name)
        - name: SECRET_NAMESPACE
          value: $(params.secret_namespace)
        - name: REGISTRY_TYPE
          value: $(params.registry_type)
      script: |
        set -ex

        chmod +x ./gradlew

        ./gradlew bootRun \
        -Dcluster="${CLUSTER}" \
        -Dthreads.number="${THREADS_NUM}" \
        -Dnamespace="${NAMESPACE}" \
        -Dtags="${TAGS}" \
        -Dci.tool=${CI_TOOL} \
        -Dgit.provider="${GIT_PROVIDER}" \
        -Dmoon.url="${MOON_URL}" \
        -Dbrowser.type="${BROWSER_TYPE}" \
        -Dbrowser.name="${BROWSER_NAME}" \
        -Dbrowser.version="${BROWSER_VERSION}" \
        -Dsecret.name="${SECRET_NAME}" \
        -Dsecret.namespace="${SECRET_NAMESPACE}" \
        -Dregistry.type="${REGISTRY_TYPE}"
---
# Source: edp-custom-pipelines/templates/tasks/integration-tests-keycloak.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: keycloak-integration-tests
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  workspaces:
    - name: source
  params:
    - name: CODEBASE_NAME
      type: string
    - name: E2E_HOST_NS
      type: string
      default: "e2e-vcluster"
    - name: GOLANG_IMAGE
      type: string
      default: "golang:1.22-bookworm"
    - name: TOOLS_IMAGE
      type: string
      default: "epamedp/tekton-helm:0.1.6"
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: ""
      type: string
    - name: GOPROXY
      description: "Go proxy server"
      default: ""
      type: string
  results:
    - name: release_name
    - name: svc_name

  steps:
    - name: vcluster-start
      image: $(params.TOOLS_IMAGE)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x

        random_str=$(echo $RANDOM | md5sum | head -c 10)
        release_name=$(echo "${CODEBASE_NAME}-integration-tests-${random_str}" | tr '[:upper:]' '[:lower:]')

        vcluster create ${release_name} \
         -n ${E2E_HOST_NS} \
         --connect=false \
         --update-current=false

        printf "%s" "${release_name}" > "$(results.release_name.path)"

    - name: deploy-keycloak
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x
        release_name=$(cat $(results.release_name.path))

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl create ns ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl apply -f tests/e2e/helm-success-path/01-install-keycloak-server.yaml \
          --namespace ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl wait --for condition=Available=True deployment keycloak \
          --timeout=120s --namespace ${CODEBASE_NAME}

        svc_name=$(kubectl get service --namespace ${E2E_HOST_NS} \
          --selector=vcluster.loft.sh/managed-by=${release_name},vcluster.loft.sh/namespace=${CODEBASE_NAME} \
          --no-headers \
          -o custom-columns=":metadata.name")

        printf "%s" "${svc_name}" > "$(results.svc_name.path)"

    - name: go-test
      image: $(params.GOLANG_IMAGE)
      workingDir: $(workspaces.source.path)
      onError: continue
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: GOPROXY
          value: "$(params.GOPROXY)"
      script: |
        svc_name=$(cat $(results.svc_name.path))
        TEST_KEYCLOAK_URL="http://${svc_name}.${E2E_HOST_NS}:8081" make test

    - name: vcluster-remove
      image: $(params.TOOLS_IMAGE)
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        release_name=$(cat $(results.release_name.path))
        vcluster -n ${E2E_HOST_NS} delete ${release_name}

    - name: go-test-verify-exitcode
      image: alpine:3.18.6
      script: |
        exitCode=$(cat $(steps.step-go-test.exitCode.path))
        if [ $exitCode == 0 ]; then
            echo "The exit code contains zero status code: ${exitCode}"
        else
            echo "The exit code contains non-zero status code: ${exitCode}"
            exit 1
        fi
---
# Source: edp-custom-pipelines/templates/tasks/integration-tests-nexus.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: nexus-integration-tests
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  workspaces:
    - name: source
  params:
    - name: CODEBASE_NAME
      type: string
    - name: E2E_HOST_NS
      type: string
      default: "e2e-vcluster"
    - name: GOLANG_IMAGE
      type: string
      default: "golang:1.22-bookworm"
    - name: TOOLS_IMAGE
      type: string
      default: "epamedp/tekton-helm:0.1.6"
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: ""
      type: string
    - name: GOPROXY
      description: "Go proxy server"
      default: ""
      type: string
    - name: nexus-login
      type: string
      description: Login for Nexus
      default: admin
    - name: nexus-password
      type: string
      description: Password for Nexus
      default: admin123
  results:
    - name: release_name
    - name: svc_name

  steps:
    - name: vcluster-start
      image: $(params.TOOLS_IMAGE)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x

        random_str=$(echo $RANDOM | md5sum | head -c 10)
        release_name=$(echo "${CODEBASE_NAME}-integration-tests-${random_str}" | tr '[:upper:]' '[:lower:]')

        vcluster create ${release_name} \
         -n ${E2E_HOST_NS} \
         --connect=false \
         --update-current=false

        printf "%s" "${release_name}" > "$(results.release_name.path)"

    - name: deploy-nexus
      image: $(params.TOOLS_IMAGE)
      workingDir: $(workspaces.source.path)
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        set -x
        release_name=$(cat $(results.release_name.path))

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl create ns ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl apply -f tests/e2e/helm-success-path/01-install-nexus-server.yaml \
          --namespace ${CODEBASE_NAME}

        vcluster connect "${release_name}" --namespace ${E2E_HOST_NS} -- \
          kubectl wait --for condition=Available=True deployment nexus \
          --timeout=120s --namespace ${CODEBASE_NAME}

        svc_name=$(kubectl get service --namespace ${E2E_HOST_NS} \
          --selector=vcluster.loft.sh/managed-by=${release_name},vcluster.loft.sh/namespace=${CODEBASE_NAME} \
          --no-headers \
          -o custom-columns=":metadata.name")

        printf "%s" "${svc_name}" > "$(results.svc_name.path)"

    - name: go-test
      image: $(params.GOLANG_IMAGE)
      workingDir: $(workspaces.source.path)
      onError: continue
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: GOPROXY
          value: "$(params.GOPROXY)"
        - name: TEST_NEXUS_USER
          value: "$(params.nexus-login)"
        - name: TEST_NEXUS_PASSWORD
          value: "$(params.nexus-password)"
      script: |
        svc_name=$(cat $(results.svc_name.path))
        TEST_NEXUS_URL="http://${svc_name}.${E2E_HOST_NS}:8081" make test

    - name: vcluster-remove
      image: $(params.TOOLS_IMAGE)
      env:
        - name: E2E_HOST_NS
          value: $(params.E2E_HOST_NS)
      script: |
        release_name=$(cat $(results.release_name.path))
        vcluster -n ${E2E_HOST_NS} delete ${release_name}

    - name: go-test-verify-exitcode
      image: alpine:3.18.6
      script: |
        exitCode=$(cat $(steps.step-go-test.exitCode.path))
        if [ $exitCode == 0 ]; then
            echo "The exit code contains zero status code: ${exitCode}"
        else
            echo "The exit code contains non-zero status code: ${exitCode}"
            exit 1
        fi
---
# Source: edp-custom-pipelines/templates/tasks/release/Build.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: build-release
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "golang build"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  params:
    - name: GOOS
      description: "running program's operating system target"
      default: linux
      type: string
    - name: GOARCH
      description: "running program's architecture target"
      default: amd64
      type: string
    - name: GO111MODULE
      description: "value of module support"
      default: auto
      type: string
    - name: GOCACHE
      description: "Go caching directory path"
      default: "$(workspaces.source.path)"
      type: string
    - name: GOMODCACHE
      description: "Go mod caching directory path"
      default: ""
      type: string
    - name: CGO_ENABLED
      description: "Toggle cgo tool during Go build. Use value '0' to disable cgo (for static builds)."
      default: '0'
      type: string
    - name: GOSUMDB
      description: "Go checksum database url. Use value 'off' to disable checksum validation."
      default: ""
      type: string
    - name: extra-commands
      type: string
      description: Extra commands
      default: ""
      type: string
    - name: base-image
      description: "Base image"
      default: "golang:1.22-bookworm"
      type: string
    - name: goproxy
      description: "Go proxy server"
      default: ""
      type: string
  workspaces:
    - name: source
  steps:
    - name: build
      image: $(params.base-image)
      workingDir: $(workspaces.source.path)
      env:
        - name: GOOS
          value: "$(params.GOOS)"
        - name: GOARCH
          value: "$(params.GOARCH)"
        - name: GO111MODULE
          value: "$(params.GO111MODULE)"
        - name: GOCACHE
          value: "$(params.GOCACHE)"
        - name: GOMODCACHE
          value: "$(params.GOMODCACHE)"
        - name: CGO_ENABLED
          value: "$(params.CGO_ENABLED)"
        - name: GOSUMDB
          value: "$(params.GOSUMDB)"
        - name: GOPROXY
          value: "$(params.goproxy)"
      script: |
        set -ex
        $(params.extra-commands)
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/GitPush.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-release-push
  labels:
    app.kubernetes.io/version: "0.3"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: source
  params:
    - name: branch
      description: "For example: release/2.10"
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
      type: string
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  steps:
    - name: git-release-push
      image: $(params.base_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: BRANCH
          value: "$(params.branch)"
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -ex

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
          eval $(ssh-agent -s)
          ssh-add "${PARAM_USER_HOME}"/.ssh/id_rsa
        fi

        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

        git push origin HEAD:${BRANCH} --tags
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/HelmPushGhRelease.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: helm-push-gh-release
spec:
  description: |
    This Task allows Uset to push a new version of the Helm Chart
    to the repository with Snapshot versions.
  workspaces:
    - name: source
      description: A workspace that contains the repository.

  params:
    - name: CODEBASE_NAME
      type: string

    - name: SSH_REPO_URL
      type: string
      default: "git@github.com:Rolika4/edp-helm-charts.git"

    - name: GH_CHART_URL
      type: string
      default: "https://epam.github.io/edp-helm-charts"

    - name: GH_BRANCH
      type: string
      default: "gh-pages"

    - name: GH_EMAIL
      type: string
      default: "SupportEPMD-EDP@epam.com"

    - name: GH_USER_NAME
      type: string
      default: "edp-bot"

    - name: HELM_REPO_NAME
      type: string
      default: "epamedp"

    - name: SSH_SECRET_NAME
      type: string
      default: "github-pages-helm-chart-sshkey"

    - name: PROJECT_DIR
      type: string
      description: "The directory containing project files."
      default: "."

    - name: USER_HOME
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user
        or have overridden the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"

    - name: chart-path
      type: string
      description: "Path to helm chart"
      default: "."

  volumes:
    - name: ssh-keys
      secret:
        secretName: $(params.SSH_SECRET_NAME)

  steps:
    - name: helm-push-gh-pages
      image: epamedp/tekton-helm:0.1.6
      workingDir: $(workspaces.source.path)/$(params.PROJECT_DIR)
      volumeMounts:
        - name: ssh-keys
          mountPath: /workspaces/ssh-keys
      env:
        - name: CODEBASE_NAME
          value: $(params.CODEBASE_NAME)
        - name: GIT_SSH_COMMAND
          value: "ssh -i $(params.USER_HOME)/.ssh/id_rsa -o StrictHostKeyChecking=no "
        - name: GIT_SSH_VARIANT
          value: "ssh"
        - name: SSH_REPO_URL
          value: $(params.SSH_REPO_URL)
        - name: GH_EMAIL
          value: $(params.GH_EMAIL)
        - name: GH_USER_NAME
          value: $(params.GH_USER_NAME)
        - name: HELM_REPO_NAME
          value: $(params.HELM_REPO_NAME)
        - name: GH_CHART_URL
          value: $(params.GH_CHART_URL)
        - name: GH_BRANCH
          value: $(params.GH_BRANCH)
        - name: PARAM_USER_HOME
          value: $(params.USER_HOME)
        - name: WORKING_DIR
          value: $(workspaces.source.path)/$(params.PROJECT_DIR)
        - name: CHART_PATH
          value: $(params.chart-path)
      script: |
        set -ex

        ls -la

        cp -R "/workspaces/ssh-keys" "${PARAM_USER_HOME}"/.ssh
        chmod 700 "${PARAM_USER_HOME}"/.ssh
        chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
        export GIT_SSH_VARIANT=ssh

        # Setting up the config for the git.
        git config --global user.email ${GH_EMAIL}
        git config --global user.name ${GH_USER_NAME}

        if [ -f "./${CHART_PATH}/Chart.yaml" ]; then
            echo "[TEKTON] Chart.yaml exists in ${CHART_PATH} in the repository."
            rm -rf chart-repo

            eval $(ssh-agent -s)
            ssh-add "${PARAM_USER_HOME}"/.ssh/id_rsa

            git clone ${SSH_REPO_URL} chart-repo
            cd chart-repo/stable

            helm repo add ${HELM_REPO_NAME} ${GH_CHART_URL}/stable --force-update
            helm dep update ${WORKING_DIR}/${CHART_PATH}/
            helm package ${WORKING_DIR}/${CHART_PATH}/ -d packages
            helm repo index --url ${GH_CHART_URL}/stable --merge index.yaml .

            git add packages/*.tgz index.yaml
            git commit -m "Push ${CODEBASE_NAME} helm chart"
            git push -u origin ${GH_BRANCH}

            cd ${WORKING_DIR}
        else
            echo "${CHART_PATH}/Chart.yaml does not exist."
        fi
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/UpdateReleaseVersion.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: update-release-version
  labels:
    app.kubernetes.io/version: "0.3"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  workspaces:
    - name: source
  params:
    - name: version
      description: "For example: release/2.10"
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "epamedp/tekton-python-make:0.1.6"
      type: string
    - name: node_image
      description: "The execute image you want to use."
      default: "docker.io/library/node:18.17.0-alpine3.18"
      type: string
    - name: chart-path
      description: "Path to chart directory"
      default: "deploy-templates"
      type: string
    - name: codebase-name
      description: "Application name"
      type: string
  steps:
    - name: update-helm-version
      image: $(params.base_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.version)"
        - name: CHART_PATH
          value: "$(params.chart-path)"
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
      script: |
        #!/usr/bin/env sh
        set -e

        # release flow for components with charts
        IFS=$'\n'
        chartPath="./${CHART_PATH}/Chart.yaml"
        echo "Chart path ${chartPath}"

        echo "[TEKTON][DEBUG] Update Version and AppVersion in Chart.yaml"
        sed -i "s/^version:.*\$/version: ${VERSION}/" "${chartPath}"
        sed -i "s/^appVersion:.*\$/appVersion: ${VERSION}/" "${chartPath}"
        sed -i "s/${CODEBASE_NAME}:.*\$/${CODEBASE_NAME}:${VERSION}/" "${chartPath}"

        # Update version in README.md
        echo "[TEKTON][DEBUG] Generate Readme.md"
        make helm-docs

    - name: update-npm-version
      image: $(params.node_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.version)"
      script: |
        #!/usr/bin/env sh
        set -e

        # update version in package.json
        if [ -f package.json ]; then
          echo "[TEKTON][DEBUG] Update Package.json"
          npm version ${VERSION} --no-git-tag-version
        else
          echo "[TEKTON][DEBUG] Package.json not found."
        fi

    - name: git-tag-commit
      image: $(params.base_image)
      workingDir: $(workspaces.source.path)
      env:
        - name: VERSION
          value: "$(params.version)"
      script: |
        #!/usr/bin/env sh
        set -ex

        # release flow for components with changelog
        if [ -f CHANGELOG.md ]; then
            echo "[TEKTON][DEBUG] Generate Changelog.md"
            NEXT_RELEASE_TAG=${VERSION} make changelog
        fi

        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
        export GIT_SSH_VARIANT=ssh
        git config --global user.email SupportEPMD-EDP@epam.com
        git config --global user.name edp-bot

        # commit if changes are detected
        git diff -s --exit-code . || (git add . && git commit -m "Bump version to ${VERSION}")
        git tag -a "v${VERSION}" -m "Release ${VERSION}"
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/ValidateReleaseBranch.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: validate-release-branch
  labels:
    app.kubernetes.io/version: "0.3"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  params:
    - name: branch
      description: "For example: release/2.10"
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "golang:1.22-bookworm"
      type: string
  steps:
    - name: validate-release-branch
      image: $(params.base_image)
      env:
        - name: BRANCH
          value: "$(params.branch)"
      script: |
        set -ex

        RELEASE_BRANCH_PATTERN='^(master)$|^(release/)([0-9]{1,2}[.][0-9]{1,2})$'
        BRANCH=${BRANCH}

        if ! echo "${BRANCH}" | egrep -q "${RELEASE_BRANCH_PATTERN}"; then
            echo "!! Malformed branch name: '${BRANCH}', must match '${RELEASE_BRANCH_PATTERN}'" >&2
            exit 1
        fi
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/ValidateTargetVersion.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: validate-target-version
  labels:
    app.kubernetes.io/version: "0.3"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  workspaces:
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
  params:
    - name: version
      description: "For example: release/2.10"
      type: string
    - name: git-source-url
      type: string
    - name: base_image
      description: "The execute image you want to use."
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
      type: string
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  steps:
    - name: validate-target-version
      image: $(params.base_image)
      env:
        - name: VERSION
          value: "$(params.version)"
        - name: GIT_SOURCE_URL
          value: $(params.git-source-url)
        - name: PARAM_USER_HOME
          value: $(params.userHome)
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      script: |
        #!/usr/bin/env sh
        set -e

        EDP_VERSION_PATTERN="^([0-9]{1,2}[.][0-9]{1,2}[.]([0-9]{1,2}))$"

        if ! echo "${VERSION}" | egrep -q "${EDP_VERSION_PATTERN}"; then
            echo "![TEKTON][DEBUG] !! Malformed EDP version value: '${VERSION}', must match '${EDP_VERSION_PATTERN}'" >&2
            exit 1
        fi

        cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
        chmod 700 "${PARAM_USER_HOME}"/.ssh
        chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        eval $(ssh-agent -s)
        ssh-add "${PARAM_USER_HOME}"/.ssh/id_rsa

        export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"

        if git ls-remote ${GIT_SOURCE_URL} refs/tags/v${VERSION} | grep -q -E "${VERSION}"; then
            echo "[TEKTON][DEBUG] !! Target version tag '${VERSION}' already exists in remote '${GIT_SOURCE_URL}'" >&2
            exit 1
        fi

        echo "[TEKTON][DEBUG] Done"
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
---
# Source: edp-custom-pipelines/templates/tasks/release/kaniko-release.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: kaniko-release
  annotations:
    # we use tekton-chain to sign the image and provenance so we need to upload the rekor transparency log
    chains.tekton.dev/transparency-upload: 'true'
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: codebase-name
      description: Name of codebase
    - name: image-tag
      description: Image tag
    - name: image-tar
      description: Name (reference) of the image tar.
      default: "image_tar"
    - name: dockerfile
      description: Dockerfile name.
      default: "Dockerfile"
    - name: context
      description: The build context used by Kaniko.
      default: ./
    - name: builder-image
      description: The image on which builds will run
      default: gcr.io/kaniko-project/executor:v1.12.1-debug
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
  volumes:
    - name: dockerconfig
      secret:
        secretName: kaniko-docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
        optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: "$(params.builder-image)"
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: IMAGE_TAR
          value: "$(params.image-tar)"
        - name: DOCKERFILE
          value: "$(params.dockerfile)"
        - name: CONTEXT
          value: "$(params.context)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_host
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: container_registry_space
        - name: PLATFORM
          valueFrom:
            configMapKeyRef:
              name: edp-config
              key: platform
      script: |
        base_command="/kaniko/executor \
          --dockerfile=/workspace/source/${DOCKERFILE} \
          --context=/workspace/source/${CONTEXT} \
          --destination=${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}/${CODEBASE_NAME}:${IMAGE_TAG} \
          --digest-file=/tekton/results/IMAGE_DIGEST \
          --tar-path=${IMAGE_TAR}.tar "

        command=$base_command

        $command
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: dockerconfig
          mountPath: /kaniko/.docker
      
      computeResources:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "0.5"
          memory: 2Gi
    - image: alpine:3.18.6
      name: write-url
      env:
        - name: CODEBASE_NAME
          value: "$(params.codebase-name)"
        - name: IMAGE_TAG
          value: "$(params.image-tag)"
        - name: CONTAINER_REGISTRY_URL
          valueFrom:
            configMapKeyRef:
              key: container_registry_host
              name: edp-config
        - name: CONTAINER_REGISTRY_SPACE
          valueFrom:
            configMapKeyRef:
              key: container_registry_space
              name: edp-config
      script: |
        set -e
        echo -n "${CONTAINER_REGISTRY_URL}/${CONTAINER_REGISTRY_SPACE}/${CODEBASE_NAME}:${IMAGE_TAG}" | tee "$(results.IMAGE_URL.path)"
---
# Source: edp-custom-pipelines/templates/tasks/sam.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sam
spec:
  params:
    - default: public.ecr.aws/sam/build-python3.9:1.104.0-20231206215146
      description: The base image for the task.
      name: BASE_IMAGE
      type: string
    - name: EXTRA_COMMANDS
      type: string
      description: Extra commands
      default: ""
  steps:
    - computeResources: {}
      image: $(params.BASE_IMAGE)
      name: sam-build
      script: |
        set -ex

        $(params.EXTRA_COMMANDS)
      workingDir: $(workspaces.source.path)
  workspaces:
    - description: A workspace that contains fetched git repo.
      name: source
---
# Source: edp-custom-pipelines/templates/tasks/waitFor.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for
spec:
  params:
    - name: task_name
      description: "The name of the task we are looking for"
      default: "helm-push-gh-pages"
    - name: wait_time
      description: "Delay between search attempts"
      default: 20
    - name: counter
      description: "Number of repeats"
      default: 0
    - name: max_counter
      description: "Maximum number of repeats"
      default: 1000
  steps:
    - name: wait-for
      image: epamedp/tekton-helm:0.1.6
      env:
        - name: TASK
          value: $(params.task_name)
        - name: WAIT_TIME
          value: $(params.wait_time)
        - name: COUNTER
          value: $(params.counter)
        - name: MAX_COUNTER
          value: $(params.max_counter)
      command:
        - /bin/sh
      args:
        - -c
        - |
          set -ex

          while true; do
            taskrun_list=$(kubectl get taskrun -o=jsonpath='{range .items[?(@.status.conditions[].reason=="Pending")]}{.metadata.name}{"\n"}{end}' 2>/dev/null \
            && kubectl get taskrun -o=jsonpath='{range .items[?(@.status.conditions[].reason=="Running")]}{.metadata.name}{"\n"}{end}' 2>/dev/null | grep ${TASK} || true)
            echo "echo ${taskrun_list}"
            if echo ${taskrun_list} | grep ${TASK} ; then
              echo "TaskRun running and contains task ${TASK}"
              sleep ${WAIT_TIME}
              COUNTER=$((COUNTER+1))
              if [ "${COUNTER}" = "${MAX_COUNTER}" ]; then
                echo "Maximum number of retries reached, exiting script"
                exit 1
              fi
            else
              echo "${TASK} is not running, go to the next task"
              break
            fi
          done
---
# Source: edp-custom-pipelines/templates/cd/deploy-custom.yaml
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: deploy-edp
  labels:
    app.edp.epam.com/pipelinetype: deploy
spec:
  params:
    - name: CDPIPELINE
      description: |
        EDP kind:CDPipeline name used for deployment. For example: mypipe, myfeature
    - name: CDSTAGE
      description: |
        EDP kind:Stage name of the kind:CDPipeline defined in the CDPIPELINE values. For example: dev, test, prod
    - name: APPLICATIONS_PAYLOAD
      description: |
        Applications payload in format: {"codebase1": {"imageTag": "version1", "customValues": true}, "codebase2": {"imageTag": "version2", "customValues": true}}. For example: {"demo": {"imageTag": "main-20240103-141431", "customValues": true}, "myapp": {"imageTag": "0.1.0-SNAPSHOT.1", "customValues": true}}
    - name: KUBECONFIG_SECRET_NAME
      description: The name of secret with Kubeconfig to connect to the remote cluster
  resourcetemplates:
    - apiVersion: tekton.dev/v1
      kind: PipelineRun
      metadata:
        generateName: deploy-edp-$(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)-
        labels:
          app.edp.epam.com/cdpipeline: $(tt.params.CDPIPELINE)
          app.edp.epam.com/cdstage: $(tt.params.CDPIPELINE)-$(tt.params.CDSTAGE)
          app.edp.epam.com/pipelinetype: deploy
        annotations:
          argocd.argoproj.io/compare-options: IgnoreExtraneous
      spec:
        taskRunTemplate:
          serviceAccountName: tekton
        pipelineRef:
          name: deploy-edp
        params:
          - name: APPLICATIONS_PAYLOAD
            value: $(tt.params.APPLICATIONS_PAYLOAD)
          - name: CDSTAGE
            value: $(tt.params.CDSTAGE)
          - name: CDPIPELINE
            value: $(tt.params.CDPIPELINE)
          - name: KUBECONFIG_SECRET_NAME
            value: $(tt.params.KUBECONFIG_SECRET_NAME)
        timeouts:
          pipeline: 1h00m0s
