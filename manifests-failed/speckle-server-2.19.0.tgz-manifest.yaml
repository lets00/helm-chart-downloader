---
# Source: speckle-server/templates/frontend_2/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-frontend-2
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-frontend-2
    app: speckle-frontend-2
    app.kubernetes.io/name: speckle-frontend-2
    app.kubernetes.io/instance: my-release
    project: speckle-server
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
---
# Source: speckle-server/templates/monitoring/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-monitoring
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-monitoring
    app.kubernetes.io/name: speckle-monitoring
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-monitoring
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
---
# Source: speckle-server/templates/objects/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-objects
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-objects
    app.kubernetes.io/name: speckle-objects
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-objects
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
  - name: server-vars
  - name: server-vars
  - name: server-vars
---
# Source: speckle-server/templates/preview_service/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-preview-service
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-preview-service
    app.kubernetes.io/name: speckle-preview-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-preview-service
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
---
# Source: speckle-server/templates/server/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-server
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-server
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
  - name: server-vars
  - name: server-vars
  - name: server-vars
---
# Source: speckle-server/templates/tests/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-test-deployment
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-test-deployment
    app.kubernetes.io/name: speckle-test-deployment
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-test-deployment
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets: [] # does not have access to any secrets
---
# Source: speckle-server/templates/webhook_service/serviceaccount.yml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: speckle-webhook-service
  namespace: "speckle-test"
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-webhook-service
    app: speckle-webhook-service
    app.kubernetes.io/name: speckle-webhook-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
  annotations:
    "kubernetes.io/enforce-mountable-secrets": "true"
automountServiceAccountToken: false
secrets:
  - name: server-vars
---
# Source: speckle-server/templates/frontend_2/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-frontend-2
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-frontend-2
    app: speckle-frontend-2
    app.kubernetes.io/name: speckle-frontend-2
    app.kubernetes.io/instance: my-release
    project: speckle-server
spec:
  selector:
    app: speckle-frontend-2
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 8080
      targetPort: www
---
# Source: speckle-server/templates/monitoring/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-monitoring-metrics
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-monitoring
    app.kubernetes.io/name: speckle-monitoring
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-monitoring
spec:
  selector:
    app: speckle-monitoring
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 9092
      targetPort: metrics
---
# Source: speckle-server/templates/objects/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-objects
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-objects
    app.kubernetes.io/name: speckle-objects
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-objects
spec:
  selector:
    app: speckle-objects
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 3000
      targetPort: http
---
# Source: speckle-server/templates/preview_service/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-preview-service-metrics
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-preview-service
    app.kubernetes.io/name: speckle-preview-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-preview-service
spec:
  selector:
    app: speckle-preview-service
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 9094
      targetPort: metrics
---
# Source: speckle-server/templates/server/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-server
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-server
spec:
  selector:
    app: speckle-server
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 3000
      targetPort: http
---
# Source: speckle-server/templates/webhook_service/service.yml
apiVersion: v1
kind: Service
metadata:
  name: speckle-webhook-service-metrics
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-webhook-service
    app: speckle-webhook-service
    app.kubernetes.io/name: speckle-webhook-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
spec:
  selector:
    app: speckle-webhook-service
    project: speckle-server
  ports:
    - protocol: TCP
      name: web
      port: 9095
      targetPort: metrics
---
# Source: speckle-server/templates/frontend_2/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-frontend-2
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-frontend-2
    app: speckle-frontend-2
    app.kubernetes.io/name: speckle-frontend-2
    app.kubernetes.io/instance: my-release
    project: speckle-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-frontend-2
      app.kubernetes.io/name: speckle-frontend-2
      app.kubernetes.io/instance: my-release
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app.kubernetes.io/component: speckle-frontend-2
        app: speckle-frontend-2
        app.kubernetes.io/name: speckle-frontend-2
        app.kubernetes.io/instance: my-release
        project: speckle-server
    spec:
      containers:
      - name: main
        image: speckle/speckle-frontend-2:2.19.0
        imagePullPolicy: IfNotPresent

        ports:
          - name: www
            containerPort: 8080
            protocol: TCP

        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 512Mi

        # Allow for k8s to remove the pod from the service endpoints to stop receive traffic
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]

        livenessProbe:
          httpGet:
            path: /api/status
            port: www
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/status
            port: www
          failureThreshold: 1
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5

        env:
          - name: FILE_SIZE_LIMIT_MB
            value: "100"
          - name: NUXT_PUBLIC_API_ORIGIN
            value: https://localhost
          - name: NUXT_PUBLIC_BASE_URL
            value: https://localhost
          - name: NUXT_PUBLIC_BACKEND_API_ORIGIN
            value: http://speckle-server.speckle-test.svc.cluster.local.:3000
          - name: NUXT_PUBLIC_MIXPANEL_TOKEN_ID
            value: acd87c5a50b56df91a795e999812a3a4
          - name: NUXT_PUBLIC_MIXPANEL_API_HOST
            value: https://analytics.speckle.systems
          - name: NUXT_PUBLIC_LOG_LEVEL
            value: info
          - name: NUXT_PUBLIC_SERVER_NAME
            value: my-release
          - name: NUXT_PUBLIC_LOG_CLIENT_API_TOKEN
            value: 
          - name: NUXT_PUBLIC_LOG_CLIENT_API_ENDPOINT
            value: 
          - name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "1"
          - name: NUXT_REDIS_URL
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: redis_url
          - name: NUXT_PUBLIC_FF_AUTOMATE_MODULE_ENABLED
            value: "false"

      priorityClassName: high-priority
      serviceAccountName: speckle-frontend-2
---
# Source: speckle-server/templates/monitoring/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-monitoring
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-monitoring
    app.kubernetes.io/name: speckle-monitoring
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-monitoring
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app: speckle-monitoring
        app.kubernetes.io/name: speckle-monitoring
        app.kubernetes.io/instance: my-release
        project: speckle-server
        app.kubernetes.io/component: speckle-monitoring
    spec:
      containers:
      - name: main
        image: speckle/speckle-monitor-deployment:2.19.0
        imagePullPolicy: IfNotPresent

        ports:
          - name: metrics
            containerPort: 9092
            protocol: TCP

        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 512Mi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        env:
          - name: PG_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: postgres_url

      priorityClassName: low-priority
      serviceAccountName: speckle-monitoring
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
---
# Source: speckle-server/templates/objects/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-objects
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-objects
    app.kubernetes.io/name: speckle-objects
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-objects
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-objects
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app: speckle-objects
        app.kubernetes.io/name: speckle-objects
        app.kubernetes.io/instance: my-release
        project: speckle-server
        app.kubernetes.io/component: speckle-objects
    spec:
      containers:
      - name: main
        image: speckle/speckle-server:2.19.0
        imagePullPolicy: IfNotPresent
        args: #overwrites the Dockerfile CMD statement
          - "bin/www"
        ports:
          - name: http
            containerPort: 3000
            protocol: TCP

        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 1500m
            memory: 3Gi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp

        # Allow for k8s to remove the pod from the service endpoints to stop receive traffic
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]

        livenessProbe:
          # account for long-running migrations
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        env:
          - name: CANONICAL_URL
            value: https://localhost
          
          - name: PORT
            value: "3000"
          - name: LOG_LEVEL
            value: info
          
          - name: USE_FRONTEND_2
            value: "true"
          
          - name: FRONTEND_ORIGIN
            value: https://localhost
          
          - name: ENABLE_FE2_MESSAGING
            value: "false"
          
          - name: FF_AUTOMATE_MODULE_ENABLED
            value: "false"
          
          - name: ONBOARDING_STREAM_URL
            value: https://latest.speckle.systems/projects/843d07eb10
          - name: ONBOARDING_STREAM_CACHE_BUST_NUMBER
            value: "1"
          
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                name: "server-vars"
                key: session_secret
          
          - name: FILE_SIZE_LIMIT_MB
            value: "100"
          
          - name: MAX_PROJECT_MODELS_PER_PAGE
            value: "500"
          
          - name: MAX_OBJECT_SIZE_MB
            value: "10"
          
          # *** Gendo render module ***
          - name: FF_GENDOAI_MODULE_ENABLED
            value: "false"
          
          # *** Redis ***
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: redis_url
          
          # *** PostgreSQL Database ***
          - name: POSTGRES_URL
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: postgres_url
          - name: POSTGRES_MAX_CONNECTIONS_SERVER
            value: "4"
          
          - name: PGSSLMODE
            value: "require"
          
          
          - name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "1"
          
          # *** S3 Object Storage ***
          
          # *** Authentication ***
          
          # Local Auth
          - name: STRATEGY_LOCAL
            value: "true"
          
          # Google Auth
          
          # Github Auth
          
          # AzureAD Auth
          
          
          # OpenID Connect Auth
          
          
          # *** Email ***
          
          # *** Newsletter ***
          
          # *** Tracking / Tracing ***
          - name: SENTRY_DSN
            value: 
          
          # Monitoring - Apollo
          
          # Rate Limiting
          - name: RATELIMIT_ALL_REQUESTS
            value: "500"
          - name: RATELIMIT_BURST_ALL_REQUESTS
            value: "2000"
          - name: RATELIMIT_USER_CREATE
            value: "6"
          - name: RATELIMIT_BURST_USER_CREATE
            value: "1000"
          - name: RATELIMIT_STREAM_CREATE
            value: "1"
          - name: RATELIMIT_BURST_STREAM_CREATE
            value: "100"
          - name: RATELIMIT_COMMIT_CREATE
            value: "1"
          - name: RATELIMIT_BURST_COMMIT_CREATE
            value: "100"
          - name: RATELIMIT_POST_GETOBJECTS_STREAMID
            value: "3"
          - name: RATELIMIT_BURST_POST_GETOBJECTS_STREAMID
            value: "200"
          - name: RATELIMIT_POST_DIFF_STREAMID
            value: "10"
          - name: RATELIMIT_BURST_POST_DIFF_STREAMID
            value: "1000"
          - name: RATELIMIT_POST_OBJECTS_STREAMID
            value: "6"
          - name: RATELIMIT_BURST_POST_OBJECTS_STREAMID
            value: "400"
          - name: RATELIMIT_GET_OBJECTS_STREAMID_OBJECTID
            value: "3"
          - name: RATELIMIT_BURST_GET_OBJECTS_STREAMID_OBJECTID
            value: "200"
          - name: RATELIMIT_GET_OBJECTS_STREAMID_OBJECTID_SINGLE
            value: "3"
          - name: RATELIMIT_BURST_GET_OBJECTS_STREAMID_OBJECTID_SINGLE
            value: "200"
          - name: RATELIMIT_POST_GRAPHQL
            value: "50"
          - name: RATELIMIT_BURST_POST_GRAPHQL
            value: "200"
          - name: RATELIMIT_GET_AUTH
            value: "4"
          - name: RATELIMIT_BURST_GET_AUTH
            value: "10"

      priorityClassName: high-priority

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: speckle-objects
      terminationGracePeriodSeconds: 310
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: speckle-server/templates/preview_service/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-preview-service
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-preview-service
    app.kubernetes.io/name: speckle-preview-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-preview-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-preview-service
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app: speckle-preview-service
        app.kubernetes.io/name: speckle-preview-service
        app.kubernetes.io/instance: my-release
        project: speckle-server
        app.kubernetes.io/component: speckle-preview-service
    spec:
      containers:
      - name: main
        image: speckle/speckle-preview-service:2.19.0
        imagePullPolicy: IfNotPresent

        ports:
          - name: metrics
            containerPort: 9094
            protocol: TCP

        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 60
          exec:
            command:
              - node
              - -e
              - process.exit(Date.now() - require('fs').readFileSync('/tmp/last_successful_query', 'utf8') > 3600 * 1000)

        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp
          - mountPath: /.cache/puppeteer
            name: puppeteer-cache

        env:
          - name: PG_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: postgres_url

          - name: LOG_LEVEL
            value: "info"
      priorityClassName: low-priority
      serviceAccountName: speckle-preview-service

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault

      # Should be > preview generation time ( 1 hour for good measure )
      terminationGracePeriodSeconds: 3600

      volumes:
        - name: tmp
          emptyDir: {}
        - name: puppeteer-cache
          emptyDir: {}
---
# Source: speckle-server/templates/server/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-server
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-server
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app: speckle-server
        app.kubernetes.io/name: speckle-server
        app.kubernetes.io/instance: my-release
        project: speckle-server
        app.kubernetes.io/component: speckle-server
    spec:
      containers:
      - name: main
        image: speckle/speckle-server:2.19.0
        imagePullPolicy: IfNotPresent
        args: #overwrites the Dockerfile CMD statement
          - "bin/www"
        ports:
          - name: http
            containerPort: 3000
            protocol: TCP

        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 1500m
            memory: 3Gi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp

        # Allow for k8s to remove the pod from the service endpoints to stop receive traffic
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "5"]

        livenessProbe:
          # account for long-running migrations
          initialDelaySeconds: 600
          periodSeconds: 60
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          exec:
            command:
              - node
              - -e
              - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/graphql?query={serverInfo{version}}', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"

        env:
          - name: CANONICAL_URL
            value: https://localhost
          
          - name: PORT
            value: "3000"
          - name: LOG_LEVEL
            value: info
          
          - name: USE_FRONTEND_2
            value: "true"
          
          - name: FRONTEND_ORIGIN
            value: https://localhost
          
          - name: ENABLE_FE2_MESSAGING
            value: "false"
          
          - name: FF_AUTOMATE_MODULE_ENABLED
            value: "false"
          
          - name: ONBOARDING_STREAM_URL
            value: https://latest.speckle.systems/projects/843d07eb10
          - name: ONBOARDING_STREAM_CACHE_BUST_NUMBER
            value: "1"
          
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                name: "server-vars"
                key: session_secret
          
          - name: FILE_SIZE_LIMIT_MB
            value: "100"
          
          - name: MAX_PROJECT_MODELS_PER_PAGE
            value: "500"
          
          - name: MAX_OBJECT_SIZE_MB
            value: "10"
          
          # *** Gendo render module ***
          - name: FF_GENDOAI_MODULE_ENABLED
            value: "false"
          
          # *** Redis ***
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: redis_url
          
          # *** PostgreSQL Database ***
          - name: POSTGRES_URL
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: postgres_url
          - name: POSTGRES_MAX_CONNECTIONS_SERVER
            value: "4"
          
          - name: PGSSLMODE
            value: "require"
          
          
          - name: NODE_TLS_REJECT_UNAUTHORIZED
            value: "1"
          
          # *** S3 Object Storage ***
          
          # *** Authentication ***
          
          # Local Auth
          - name: STRATEGY_LOCAL
            value: "true"
          
          # Google Auth
          
          # Github Auth
          
          # AzureAD Auth
          
          
          # OpenID Connect Auth
          
          
          # *** Email ***
          
          # *** Newsletter ***
          
          # *** Tracking / Tracing ***
          - name: SENTRY_DSN
            value: 
          
          # Monitoring - Apollo
          
          # Rate Limiting
          - name: RATELIMIT_ALL_REQUESTS
            value: "500"
          - name: RATELIMIT_BURST_ALL_REQUESTS
            value: "2000"
          - name: RATELIMIT_USER_CREATE
            value: "6"
          - name: RATELIMIT_BURST_USER_CREATE
            value: "1000"
          - name: RATELIMIT_STREAM_CREATE
            value: "1"
          - name: RATELIMIT_BURST_STREAM_CREATE
            value: "100"
          - name: RATELIMIT_COMMIT_CREATE
            value: "1"
          - name: RATELIMIT_BURST_COMMIT_CREATE
            value: "100"
          - name: RATELIMIT_POST_GETOBJECTS_STREAMID
            value: "3"
          - name: RATELIMIT_BURST_POST_GETOBJECTS_STREAMID
            value: "200"
          - name: RATELIMIT_POST_DIFF_STREAMID
            value: "10"
          - name: RATELIMIT_BURST_POST_DIFF_STREAMID
            value: "1000"
          - name: RATELIMIT_POST_OBJECTS_STREAMID
            value: "6"
          - name: RATELIMIT_BURST_POST_OBJECTS_STREAMID
            value: "400"
          - name: RATELIMIT_GET_OBJECTS_STREAMID_OBJECTID
            value: "3"
          - name: RATELIMIT_BURST_GET_OBJECTS_STREAMID_OBJECTID
            value: "200"
          - name: RATELIMIT_GET_OBJECTS_STREAMID_OBJECTID_SINGLE
            value: "3"
          - name: RATELIMIT_BURST_GET_OBJECTS_STREAMID_OBJECTID_SINGLE
            value: "200"
          - name: RATELIMIT_POST_GRAPHQL
            value: "50"
          - name: RATELIMIT_BURST_POST_GRAPHQL
            value: "200"
          - name: RATELIMIT_GET_AUTH
            value: "4"
          - name: RATELIMIT_BURST_GET_AUTH
            value: "10"

      priorityClassName: high-priority

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: speckle-server
      terminationGracePeriodSeconds: 310
      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: speckle-server/templates/webhook_service/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: speckle-webhook-service
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/component: speckle-webhook-service
    app: speckle-webhook-service
    app.kubernetes.io/name: speckle-webhook-service
    app.kubernetes.io/instance: my-release
    project: speckle-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: speckle-webhook-service
      project: speckle-server
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: speckle-server-2.19.0
        app.kubernetes.io/version: "2.19.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: speckle-server
        app.kubernetes.io/component: speckle-webhook-service
        app: speckle-webhook-service
        app.kubernetes.io/name: speckle-webhook-service
        app.kubernetes.io/instance: my-release
        project: speckle-server
    spec:
      containers:
      - name: main
        image: speckle/speckle-webhook-service:2.19.0
        imagePullPolicy: IfNotPresent

        ports:
          - name: metrics
            containerPort: 9095
            protocol: TCP

        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 60
          exec:
            command:
              - /nodejs/bin/node
              - -e
              - process.exit(Date.now() - require('fs').readFileSync('/tmp/last_successful_query', 'utf8') > 30 * 1000)

        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 1000m
            memory: 4Gi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 20000

        volumeMounts:
          - mountPath: /tmp
            name: tmp

        env:
          - name: PG_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: server-vars
                key: postgres_url

          - name: LOG_LEVEL
            value: info

      priorityClassName: low-priority
      serviceAccountName: speckle-webhook-service

      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        fsGroup: 25000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault

      # Should be > webhook max call time ( ~= 10 seconds )
      terminationGracePeriodSeconds: 30

      volumes:
        - name: tmp
          emptyDir: {}
---
# Source: speckle-server/templates/master.ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: speckle-server
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
  annotations:
    nginx.org/mergeable-ingress-type: "master"
    cert-manager.io/cluster-issuer: letsencrypt-staging
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.org/client-max-body-size: "100m"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - localhost
    secretName: server-tls
  rules:
  - host: localhost
---
# Source: speckle-server/templates/minion.ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: speckle-server-minion
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
  annotations:
    nginx.org/mergeable-ingress-type: "minion"
    cert-manager.io/cluster-issuer: letsencrypt-staging
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: speckle-frontend-2
            port:
              name: web
      - pathType: Exact
        path: "/(graphql|explorer|(auth/.*)|(static/.*))"
        backend:
          service:
            name: speckle-server
            port:
              name: web
      - pathType: Exact
        path: "/((objects/.*)|(api/.*)|(preview/.*))"
        backend:
          service:
            name: speckle-objects
            port:
              name: web
---
# Source: speckle-server/templates/redirect.ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: speckle-server-redirect
  namespace: speckle-test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app.kubernetes.io/name: speckle-server
    app.kubernetes.io/instance: my-release
    project: speckle-server
  annotations:
    nginx.org/mergeable-ingress-type: "minion"
    nginx.ingress.kubernetes.io/rewrite-target: / # redirects every path defined in this ingress to root
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
      - pathType: Exact
        path: "/metrics"
        backend:
          service:
            name: speckle-frontend-2
            port:
              name: web
      - pathType: Exact
        path: "/api/status"
        backend:
          service:
            name: speckle-frontend-2
            port:
              name: web
---
# Source: speckle-server/templates/tests/deployment.yml
apiVersion: batch/v1
kind: Job
metadata:
  name: "speckle-test"
  namespace: speckle-test
  annotations:
    helm.sh/hook: test
  labels:
    helm.sh/chart: speckle-server-2.19.0
    app.kubernetes.io/version: "2.19.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: speckle-server
    app: speckle-test-deployment
    app.kubernetes.io/name: speckle-test-deployment
    app.kubernetes.io/instance: my-release
    project: speckle-server
    app.kubernetes.io/component: speckle-test-deployment
spec:
  backoffLimit: 1
  parallelism: 1
  completions: 1
  template:
    spec:
      containers:
        - name: test-deployment
          image: speckle/speckle-test-deployment:2.19.0
          imagePullPolicy: IfNotPresent

          env:
            - name: SPECKLE_SERVER
              value: https://localhost
            - name: SERVER_VERSION
              value: "2.19.0"
            - name: FRONTEND_VERSION
              value: "2"
            - name: VERIFY_CERTIFICATE
              value: "1"
          resources:
            requests:
              cpu: 100m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 20000
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 20000
        runAsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: speckle-test-deployment
