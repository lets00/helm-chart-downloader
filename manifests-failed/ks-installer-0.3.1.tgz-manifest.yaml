---
# Source: ks-installer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ks-installer
---
# Source: ks-installer/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ks-installer
rules:
  - apiGroups:
      - ""
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - apps
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - extensions
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - tenant.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - certificates.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - devops.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - logging.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - jaegertracing.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - storage.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - policy
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - autoscaling
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - networking.istio.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - config.istio.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - iam.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - notification.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - auditing.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - events.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - core.kubefed.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - installer.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - storage.kubesphere.io
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
    - security.istio.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - monitoring.kiali.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - kiali.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - networking.k8s.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - kubeedge.kubesphere.io
    resources:
    - '*'
    verbs:
    - '*'
  - apiGroups:
    - types.kubefed.io
    resources:
    - '*'
    verbs:
    - '*'
---
# Source: ks-installer/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ks-installer
subjects:
  - kind: ServiceAccount
    name: ks-installer
    namespace: ks-installer-0.3.1.tgz
roleRef:
  kind: ClusterRole
  name: ks-installer
  apiGroup: rbac.authorization.k8s.io
---
# Source: ks-installer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ks-installer
  labels:
    app: ks-install
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ks-install
  template:
    metadata:
      labels:
        app: ks-install
    spec:
      serviceAccountName: ks-installer
      containers:
        - name: ks-installer
          image: "kubesphere/ks-installer:v3.2.1"
          imagePullPolicy: Always
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 20m
              memory: 100Mi
          volumeMounts:
            - mountPath: /etc/localtime
              name: host-time
      volumes:
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
---
# Source: ks-installer/templates/clusterconfiguration.yaml
apiVersion: installer.kubesphere.io/v1alpha1
kind: ClusterConfiguration
metadata:
  name: ks-installer
  namespace: kubesphere-system
  labels:
    version: 3.2.1
spec:
  alerting:
    enabled: false
  auditing:
    enabled: false
  authentication:
    jwtSecret: ""
  common:
    core:
      console:
        enableMultiLogin: true
        port: 30880
        type: NodePort
    es:
      basicAuth:
        enabled: false
        password: ""
        username: ""
      elkPrefix: logstash
      externalElasticsearchPort: ""
      externalElasticsearchUrl: ""
      logMaxAge: 7
    gpu:
      kinds:
      - default: true
        resourceName: nvidia.com/gpu
        resourceType: GPU
    minio:
      volumeSize: 20Gi
    monitoring:
      GPUMonitoring:
        enabled: false
      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090
    openldap:
      enabled: false
      volumeSize: 2Gi
    redis:
      enabled: false
      volumeSize: 2Gi
  devops:
    enabled: false
    jenkinsJavaOpts_MaxRAM: 2g
    jenkinsJavaOpts_Xms: 512m
    jenkinsJavaOpts_Xmx: 512m
    jenkinsMemoryLim: 2Gi
    jenkinsMemoryReq: 1500Mi
    jenkinsVolumeSize: 8Gi
  etcd:
    endpointIps: localhost
    monitoring: false
    port: 2379
    tlsEnable: true
  events:
    enabled: false
  kubeedge:
    cloudCore:
      cloudHub:
        advertiseAddress:
        - ""
        nodeLimit: "100"
      cloudhubHttpsPort: "10002"
      cloudhubPort: "10000"
      cloudhubQuicPort: "10001"
      cloudstreamPort: "10003"
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      service:
        cloudhubHttpsNodePort: "30002"
        cloudhubNodePort: "30000"
        cloudhubQuicNodePort: "30001"
        cloudstreamNodePort: "30003"
        tunnelNodePort: "30004"
      tolerations: []
      tunnelPort: "10004"
    edgeWatcher:
      edgeWatcherAgent:
        nodeSelector:
          node-role.kubernetes.io/worker: ""
        tolerations: []
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      tolerations: []
    enabled: false
  local_registry: ""
  logging:
    containerruntime: docker
    enabled: false
    logsidecar:
      enabled: true
      replicas: 2
  metrics_server:
    enabled: false
  monitoring:
    gpu:
      nvidia_dcgm_exporter:
        enabled: false
    storageClass: ""
  multicluster:
    clusterRole: none
  network:
    ippool:
      type: none
    networkpolicy:
      enabled: false
    topology:
      type: none
  openpitrix:
    store:
      enabled: false
  persistence:
    storageClass: ""
  servicemesh:
    enabled: false
