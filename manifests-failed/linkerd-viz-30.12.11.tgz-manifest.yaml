---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhRENDQWxDZ0F3SUJBZ0lSQU9tL1k1bWRpY3lyMnNxWUM3OEtjU1V3RFFZSktvWklodmNOQVFFTEJRQXcKTkRFeU1EQUdBMVVFQXhNcGRHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TFRNd0xqRXlMakV4TG5SbgplaTV6ZG1Nd0hoY05NalF3TmpJd01UUTFOelEyV2hjTk1qVXdOakl3TVRRMU56UTJXakEwTVRJd01BWURWUVFECkV5bDBZWEF0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzEyYVhvdE16QXVNVEl1TVRFdWRHZDZMbk4yWXpDQ0FTSXcKRFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5yb3I4alRHRnNINTlBblFvT25FSFN3a25idgppdmt1Ri9VSkU3enptVDNwU1MwUGJjTm5rUXA1ZFpIODVjelpWemZmR3NOY0dXQThYaDVHQ1FQdnhuTnBXSTVJCjBJWisvQWdwUlQ0cHl5ejZuc0Fnb2VTdk5CT1FCVDc4Z1dEM0RPSlhpaE1rQU0vN1g4cUV1bUUycjdJTzQ3SFEKSGhsOTNGY2ZtY0JISmlGQVdVZm0rSWxuZExtZEczL2o0MTN4anZVb00wd0xhb0tCNjNoblkycXZaTHJqWitmOApFRWZQemdJVDRlZjhVbmhyVzdub3Q3UlBBUjFkYnhoMnFpZHF4ZkpSMnowMFdBTkZDd2F2dFFiY0FHbGh1cldxClBLN0IxUWV0QkoydlhIbmNESVVPNW80ZkpoR2JTUDlzM05QR05oQ3F2SE9OOTU3ME92WXlIQ2FicU9VQ0F3RUEKQWFOMU1ITXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRgpCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNRFFHQTFVZEVRUXRNQ3VDS1hSaGNDMXBibXBsWTNSdmNpNXNhVzVyClpYSmtMWFpwZWkwek1DNHhNaTR4TVM1MFozb3VjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBbEJxdjIKc0NDM2tWUTAxTUQ2MS9TYTUvVmppSEVnTEtNMzZ0THVzcVZvM0hvUnhMTTZ2MzdRTFdQRGtkQkZWV0svWEoxaQpndVoxVDZxcUVTSWVXVGdEYXBkcFY4RUdQb3ZxdXptZW5sK3B6bnFmMTZCZTlnczBaVHhrYUxyNXdHTEJONFhECkpsQ1FoZWVnRzByOEVXdDhUV2pQZUY3eElkYThiNjR0MVJIY0EycnN0a3lKTW90M1N3T0hWKzhBd3F5eFVnSUoKM0g0dXNmUVhZeEtJSFUwYkpZaSsxaFVTTHE0b0NQeWRXZkRpbGpZNXl5V3huOHRJOVY5SzFzTlNrd0RDU2VJWApqWEEvYVlpTy9ieGJGWVN4bHBqUEZleU1CMGluaWQxVVg1Ty9WSVBvNVgxZ2loWkhlOTMwbUY0YlhWQWk0VFNiCkMybjB5NWF1Skd5UnRRMU8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMnVpdnlOTVlXd2ZuMENkQ2c2Y1FkTENTZHUrSytTNFg5UWtUdlBPWlBlbEpMUTl0CncyZVJDbmwxa2Z6bHpObFhOOThhdzF3WllEeGVIa1lKQSsvR2MybFlqa2pRaG43OENDbEZQaW5MTFBxZXdDQ2gKNUs4MEU1QUZQdnlCWVBjTTRsZUtFeVFBei90ZnlvUzZZVGF2c2c3anNkQWVHWDNjVngrWndFY21JVUJaUitiNAppV2QwdVowYmYrUGpYZkdPOVNnelRBdHFnb0hyZUdkamFxOWt1dU5uNS93UVI4L09BaFBoNS94U2VHdGJ1ZWkzCnRFOEJIVjF2R0hhcUoyckY4bEhiUFRSWUEwVUxCcSsxQnR3QWFXRzZ0YW84cnNIVkI2MEVuYTljZWR3TWhRN20Kamg4bUVadEkvMnpjMDhZMkVLcThjNDMzbnZRNjlqSWNKcHVvNVFJREFRQUJBb0lCQVFDTjM0UWRtWUlOYlVBMQp6VnYwU3hBRk1IS2NGbjl4SXdodnpHUTRiMy8vZWZQcytqVGZFWDRVMWNiMnlIcCttdFZGNXBoSHlLYkJraDVGCmJJcG5QTHpYQzQxVEdhbmJvT3ppdFN5bEx4ejRsNnpQUTlib2lRd3RLWWZjM0hWVlRJZlRJWHpoRHRKZitNQ0sKVmg4YzVmNVVYZ1gvdGF2c1JYL0tEemJzUUxCYmwwL3Fkc2FHQTd0N1ZjSjNXZ1J1UWE1M2tMYXRsR0dveHY4SQp5dHRIQURFS3hUMXhGVVhsd3dFbmI1bVhwbjhrSklZNWQzRkg5NEVmdDlDenl6WThFdk4vVXlFQlMydWtnRGZMCnRiNGRwbWtHZ1g0ZGRWM3lpNDVnTjR2S2x0akdwL1hOKzRzMDI3eDBGaHoyekxxbXNWRjF1dzZ2MFR5bmY2QVAKYkt1RDdzVTVBb0dCQU9zakl5Z0U5UUtRYm9nMmthM0xPZWNHaS9NbktOWUsyRXg0YWV3cWFSbHVhdEhKaW9zTQpSRFlSSHMxOUZ6blEyVW8vMUQwQWJDUzhoZURZWVFTWlVlM2ZuVkFHOENnZHBQYzdidTBSWm5zcThmbFNxNmp1CnRNZElMNW9BbkF3YVM1MXpZaFQ2SE9UWm1HR3QxZUpqSlpCWC9TNmZLVlRaWklrYm1nUkhwVlFuQW9HQkFPNVUKOFRyTDZvOHhqV0o0cCszK0EyTytvMzVxWDF3bmVQaDFDZy95Q0U5YThsdm45eFBnNXc2YU9KMVRBN2pMT3NlbgoxQjIrRVVPTGVRNzFOd21OQjNPNjlRNmdlYlFBZ2UxcHYxMmhYVG9LOWdPU1pVVy9HZ2ZnL1ZtZ3lNd2FYZ2dRCmN3OEhmQTZSTDhhaU5pODYxQ3JGbS9iT2MyTTZkcWtNUGU2MnBvWVRBb0dCQUxRaXJBazVtdllHN2hhK0wyYUUKUFd5bWtFcU1Jbld2d3pyNk9MTnJYaTdVYjFNZVlsdlozdHZJeTk5Q3lLdExPMXZ0Z0V2bmFmSE8xNFdFWHZibAorbVVRblhTMGpBRS9qS1Myekdram5tNFhYVjdUSFowQ21rM2RHRktUeXZoZW9MVVRzdjA5Q3l1ckkxa1prclNuCm5oeHh2QTJlYzB5RWFzZTY5SWY0MTBpYkFvR0JBSlNiSWs4bkZ2cHlTMVk3SlhxZ0NEMEpnYWd4YTRScW1HTlQKbHhLYU45UkRRUnROYUNKYytiV0JOQXZrMTAxQ2EwUlN3VkJLVXpscW5mRlZ0UnVmZENZVlRQZngxL0VFMy83SgpFU213bEJDOUJPajFQM0JkMkQxUmJLZVdPWjRLVXRkMGFrblV3T1hVWVpYWlR5L2ozcWRNMEJMMFo3NVhsZVdTClhJdWNGL2xCQW9HQUw5bWtZWk1VQ0YvdWxsOTBZTzVZcXAwSXJFcEtEQjl0M3BoUzFiOGRXV0F4WXpjVEN5SkcKV0tTN1ZRRGNuTzlhRGViQ0Zod2Rpb1FueW9pTE1HSjZFVWZoTUZJclllR09ONDFhYzk4RHFpWkpncGI4MHB4TQpnbDVMZ29talU1QVlZU0tEQ3pHb1Vma2YxbWxHWnBXb0dNUElOMUZ1aXFuVXdxZEZLdGhQUDhrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRWkhqZTRUT3h4T3NBS3dqa2FUVkorVEFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCMFlYQXViR2x1YTJWeVpDMTJhWG90TXpBdU1USXVNVEV1ZEdkNkxuTjJZekFlRncweQpOREEyTWpBeE5EVTNORFZhRncweU5UQTJNakF4TkRVM05EVmFNQ3N4S1RBbkJnTlZCQU1USUhSaGNDNXNhVzVyClpYSmtMWFpwZWkwek1DNHhNaTR4TVM1MFozb3VjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBclhReUY5emx2ZjBpa3V3RENuUHFwdFNtbEYwWnNqMndtUy8xTGJMM2VkTkl3MWRPbTI3cwpOYS9rd1REMTNvSUszNjQ0cVFTZ0JJZzcwc0owaHpuV24yeXc0K2srWEp1NzUyaTJUMU1rK2NxMHVLeE1paFRpCmtucTlJUVdwSS9GRmpVNmtPMll3VlRINUl4SzBWbzdrRy9MRmZCRk1tRWdtVmVRRS9lbklTWlNTVW9IOXFxaUMKWGZCWUwrdkdPcStBSTBsTDFoV3M1RUJxR2hQWGF5RDFzU0pmR0hPTXB6SVlobEJ3SExYVEJiZFY2aEFUWU1vaQo2bUgyVkE2TVd0dkRYMjJnMDRmaVdzbVlyOXlmZVZCSGd1alNHcVhvekQ1R2plRFVOSTRSSWFsN0NBU0hXOFBECk5uZ3FBbk5qZzZSUlpROGpPRCtLUFo5N1N1d2dOdTRDRXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnZEdGd0xteHBibXRsY21RdGRtbDZMVE13TGpFeUxqRXhMblJuZWk1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUM2L3pqU1JacGVhWlloSGVHbVdVNDBPSGVzdUJOU3h5ZW1VeFRHTmdvb24KV29BYytQTUl1ZjN1aEk0TFlHZHZDV2NnTFNYenEwZjE3UVRuamFzSER0VG41M0piNXh6WHB1Skt1ejVtd3hSOApZR2VrenRKcUE0b3R3THVoV2tRZzZMYkNrRHBGVzZlb0ROZkNrbW5EK211UndsVmRCcG9LUy9pODhsd1YzL1BkCjJkSEtYTHhIMENSSHFFMXI2OG44V1h2dENkVTBVZ0M2S1g5d21STzBJY2gwb0NYTGNGc2lwZW9aOHVZb0w4VzEKMHMrWjF0eWFWTGJIUkhFbnp2NHljVFk1QlNZNC9HaDNhUlFxVmRJM0hNZXQ5S1ROcTNGRk4wNHNua3Q2YlI1Lwp0MGNCRUZhcXpiclJtRFpMY0NLVVpTa3QvWE15LytDMFF3MVp6bHVwWHB3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBclhReUY5emx2ZjBpa3V3RENuUHFwdFNtbEYwWnNqMndtUy8xTGJMM2VkTkl3MWRPCm0yN3NOYS9rd1REMTNvSUszNjQ0cVFTZ0JJZzcwc0owaHpuV24yeXc0K2srWEp1NzUyaTJUMU1rK2NxMHVLeE0KaWhUaWtucTlJUVdwSS9GRmpVNmtPMll3VlRINUl4SzBWbzdrRy9MRmZCRk1tRWdtVmVRRS9lbklTWlNTVW9IOQpxcWlDWGZCWUwrdkdPcStBSTBsTDFoV3M1RUJxR2hQWGF5RDFzU0pmR0hPTXB6SVlobEJ3SExYVEJiZFY2aEFUCllNb2k2bUgyVkE2TVd0dkRYMjJnMDRmaVdzbVlyOXlmZVZCSGd1alNHcVhvekQ1R2plRFVOSTRSSWFsN0NBU0gKVzhQRE5uZ3FBbk5qZzZSUlpROGpPRCtLUFo5N1N1d2dOdTRDRXdJREFRQUJBb0lCQVFDYUtPYUlyT3lIc2g1egpaRTNEa1lpaEkraTFmaFZqaEU2YnA3TUtIY0N6eHVRcHNVUU5BMFh1NVZpemw1YytYbWZacTVkeUtNa3JuZ1ZGCmFVeDJEeUxBYUxMQ3JUK2V3VTc4K2VUbWxhZ01WbXZPb2x3WWNUMTZJSnBOYWlHTTcxZjRva2QyLzNpL2ozMjAKL1YvSWVwRWtnZDJoU2lMQVNZZkEyTHJURFYvVWZEOXBoQWQ3OU95VnRGRzA1c2hnRkkrM1FpZVNPUStLQkVtZQpvamVXTFRuWThsYjdOdVIrd1VZQjliakQ2OWlMYlhoQ0ZKSVcrVFdoa1FPYVFiUXlzYUJTM2JvNGE2NUQ4Ty9nCjIwd2x3bGVwZWYvSDJad0Z5U3hrWUJNVGxFdlJha3RjWkw2MHlRRnF5V09QNUpKZ3ZlSnlZajloeTEzNGpzZXQKcC8rSTlwR3hBb0dCQU45QlN6ZjJ2RXpiQUJPZjAvUnBKUk0vYTdyRHJ3ZlFxZ3ZLUU5BZjd4eXFBSDlqTHZobApTRThCeTlpV0x0K2ZLSDFuR2lzMVRUNGxpUEJweFFXbXVNN2V6cU9paFc3Vy85ZU51MkpLS2VZNjUwMm1IMjBqCmpjeUJWSmc1bERHUlhqTi90dWVRdWpmRElrUGtZM1dlUVJpRWQ4WkpSeFlVY0JZMXloK0M2WjJKQW9HQkFNYmsKKy84Mlk0UHdXSGtvWTVwSmpxNUJKSXhFTXVPem5PUnRpMmZGMEZOSDBYZGN0U2tJU0JmbkhrYVdYQ1FFaXhmKworMGttTkNPbm1INXRUcmI3V0ttdjhVNzA4Q2Zwa0dIRDljMXRDZ3NJZU9IVVNKVldiMFZIZ1hTaFNkdUh2YUdwCjQ5SXlxbWgwRldRTmZnQzF3Y3BLcDVLMklVNllzOWJsUVJqWms3ZTdBb0dCQUlPN05UVHFZNlU5dThmWWtPb3cKZUczcENCb0ZpT3VsbGhDcTRKOXRtRnRqZkRPdVJITFE0Rit1QWFma3hmZXhJK1VLeHdnanhWWWNNN2NYMGVkSgp2dFpoNWEvc0g2dU5OUnp0UmxueXhOSlNnMVR2NXE4eFFXUWdFOWhXY1RqbU81MUxpSk1PZExLZWMwTjRLYStuCkYyWHVFL1p1R29IT3dXeDVoTEFmUU5WeEFvR0JBSkxsUGlUZzg2RFhtMUJvZngvTm9mNmJDRFk4akdWV0c5TXUKQU43MDM0Y1NyT2IrWnFKV2hvQjQ1d2gxTnJvM1RNKzlON1J2N2VSRGZNSXJVdzZjRm9ERS9IRTNRRVFLSWVQRApDa0RkZnFSbGJucEVBaE9oMGU2V0FFdTJiOGtldVBTMGVCbWY1L0hiZ296eDFoVUtLSVdTbTY4a3F2YlVtMFprCjdhNC95L1RQQW9HQWFpRVNYcHRQejlnOE54YjE5c2s2ejFSOXlEOFd2Kzd0dkxlRkp6YTFxWElxb0lUcHVqazUKWkYyMFduMGFCbFpQQ2dLYk1qZWNXTXRuMm1MeFRaUWtNWmswYTBFNHBWRVRSRTc3bHp5TlFBR1A1OHhoZjBEQwowOTBzVTBkMHZNM3BYY3BiejdNVGUvV0loQzc1bytCdWtzTEFlSitSdDZ6U3lWeGF4Zi8vNmJRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
# Source: linkerd-viz/templates/prometheus.yaml
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz-30.12.11.tgz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/metrics-api-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/prometheus-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz-30.12.11.tgz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
# Source: linkerd-viz/templates/tap-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-30.12.11.tgz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-30.12.11.tgz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz-30.12.11.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/web-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/metrics-api.yaml
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
# Source: linkerd-viz/templates/prometheus.yaml
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
# Source: linkerd-viz/templates/tap-injector.yaml
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
# Source: linkerd-viz/templates/tap.yaml
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
# Source: linkerd-viz/templates/web.yaml
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz-30.12.11.tgz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
# Source: linkerd-viz/templates/metrics-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 4773e316e57d53c9b0e121db3e0784ea73897bcf185f88605ce9783e55df78b7
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz-30.12.11.tgz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
# Source: linkerd-viz/templates/prometheus.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: prometheus
    namespace: linkerd-viz-30.12.11.tgz
  name: prometheus
  namespace: linkerd-viz-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz-30.12.11.tgz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz-30.12.11.tgz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
# Source: linkerd-viz/templates/tap-injector.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: c266d7f980255d0db5022179efd30a7b2a726857605db7fa166b8af987d6fde0
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz-30.12.11.tgz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
# Source: linkerd-viz/templates/tap.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: tap
    namespace: linkerd-viz-30.12.11.tgz
  name: tap
  namespace: linkerd-viz-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz-30.12.11.tgz
  template:
    metadata:
      annotations:
        checksum/config: ac4139b91af97f391490c8239cd8c417810b365ba862c8fe2bc5b6221c7307de
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz-30.12.11.tgz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
# Source: linkerd-viz/templates/web.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
    component: web
    namespace: linkerd-viz-30.12.11.tgz
  name: web
  namespace: linkerd-viz-30.12.11.tgz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz-30.12.11.tgz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz-30.12.11.tgz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz-30.12.11.tgz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz-30\.12\.11\.tgz\.svc\.cluster\.local|web\.linkerd-viz-30\.12\.11\.tgz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.14.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
# Source: linkerd-viz/templates/tap-rbac.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz-30.12.11.tgz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRWkhqZTRUT3h4T3NBS3dqa2FUVkorVEFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCMFlYQXViR2x1YTJWeVpDMTJhWG90TXpBdU1USXVNVEV1ZEdkNkxuTjJZekFlRncweQpOREEyTWpBeE5EVTNORFZhRncweU5UQTJNakF4TkRVM05EVmFNQ3N4S1RBbkJnTlZCQU1USUhSaGNDNXNhVzVyClpYSmtMWFpwZWkwek1DNHhNaTR4TVM1MFozb3VjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBclhReUY5emx2ZjBpa3V3RENuUHFwdFNtbEYwWnNqMndtUy8xTGJMM2VkTkl3MWRPbTI3cwpOYS9rd1REMTNvSUszNjQ0cVFTZ0JJZzcwc0owaHpuV24yeXc0K2srWEp1NzUyaTJUMU1rK2NxMHVLeE1paFRpCmtucTlJUVdwSS9GRmpVNmtPMll3VlRINUl4SzBWbzdrRy9MRmZCRk1tRWdtVmVRRS9lbklTWlNTVW9IOXFxaUMKWGZCWUwrdkdPcStBSTBsTDFoV3M1RUJxR2hQWGF5RDFzU0pmR0hPTXB6SVlobEJ3SExYVEJiZFY2aEFUWU1vaQo2bUgyVkE2TVd0dkRYMjJnMDRmaVdzbVlyOXlmZVZCSGd1alNHcVhvekQ1R2plRFVOSTRSSWFsN0NBU0hXOFBECk5uZ3FBbk5qZzZSUlpROGpPRCtLUFo5N1N1d2dOdTRDRXdJREFRQUJvMnd3YWpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpLd1lEVlIwUkJDUXdJb0lnZEdGd0xteHBibXRsY21RdGRtbDZMVE13TGpFeUxqRXhMblJuZWk1emRtTXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUM2L3pqU1JacGVhWlloSGVHbVdVNDBPSGVzdUJOU3h5ZW1VeFRHTmdvb24KV29BYytQTUl1ZjN1aEk0TFlHZHZDV2NnTFNYenEwZjE3UVRuamFzSER0VG41M0piNXh6WHB1Skt1ejVtd3hSOApZR2VrenRKcUE0b3R3THVoV2tRZzZMYkNrRHBGVzZlb0ROZkNrbW5EK211UndsVmRCcG9LUy9pODhsd1YzL1BkCjJkSEtYTHhIMENSSHFFMXI2OG44V1h2dENkVTBVZ0M2S1g5d21STzBJY2gwb0NYTGNGc2lwZW9aOHVZb0w4VzEKMHMrWjF0eWFWTGJIUkhFbnp2NHljVFk1QlNZNC9HaDNhUlFxVmRJM0hNZXQ5S1ROcTNGRk4wNHNua3Q2YlI1Lwp0MGNCRUZhcXpiclJtRFpMY0NLVVpTa3QvWE15LytDMFF3MVp6bHVwWHB3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
# Source: linkerd-viz/templates/tap-injector-rbac.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz-30.12.11.tgz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURhRENDQWxDZ0F3SUJBZ0lSQU9tL1k1bWRpY3lyMnNxWUM3OEtjU1V3RFFZSktvWklodmNOQVFFTEJRQXcKTkRFeU1EQUdBMVVFQXhNcGRHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TFRNd0xqRXlMakV4TG5SbgplaTV6ZG1Nd0hoY05NalF3TmpJd01UUTFOelEyV2hjTk1qVXdOakl3TVRRMU56UTJXakEwTVRJd01BWURWUVFECkV5bDBZWEF0YVc1cVpXTjBiM0l1YkdsdWEyVnlaQzEyYVhvdE16QXVNVEl1TVRFdWRHZDZMbk4yWXpDQ0FTSXcKRFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5yb3I4alRHRnNINTlBblFvT25FSFN3a25idgppdmt1Ri9VSkU3enptVDNwU1MwUGJjTm5rUXA1ZFpIODVjelpWemZmR3NOY0dXQThYaDVHQ1FQdnhuTnBXSTVJCjBJWisvQWdwUlQ0cHl5ejZuc0Fnb2VTdk5CT1FCVDc4Z1dEM0RPSlhpaE1rQU0vN1g4cUV1bUUycjdJTzQ3SFEKSGhsOTNGY2ZtY0JISmlGQVdVZm0rSWxuZExtZEczL2o0MTN4anZVb00wd0xhb0tCNjNoblkycXZaTHJqWitmOApFRWZQemdJVDRlZjhVbmhyVzdub3Q3UlBBUjFkYnhoMnFpZHF4ZkpSMnowMFdBTkZDd2F2dFFiY0FHbGh1cldxClBLN0IxUWV0QkoydlhIbmNESVVPNW80ZkpoR2JTUDlzM05QR05oQ3F2SE9OOTU3ME92WXlIQ2FicU9VQ0F3RUEKQWFOMU1ITXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRgpCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNRFFHQTFVZEVRUXRNQ3VDS1hSaGNDMXBibXBsWTNSdmNpNXNhVzVyClpYSmtMWFpwZWkwek1DNHhNaTR4TVM1MFozb3VjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBbEJxdjIKc0NDM2tWUTAxTUQ2MS9TYTUvVmppSEVnTEtNMzZ0THVzcVZvM0hvUnhMTTZ2MzdRTFdQRGtkQkZWV0svWEoxaQpndVoxVDZxcUVTSWVXVGdEYXBkcFY4RUdQb3ZxdXptZW5sK3B6bnFmMTZCZTlnczBaVHhrYUxyNXdHTEJONFhECkpsQ1FoZWVnRzByOEVXdDhUV2pQZUY3eElkYThiNjR0MVJIY0EycnN0a3lKTW90M1N3T0hWKzhBd3F5eFVnSUoKM0g0dXNmUVhZeEtJSFUwYkpZaSsxaFVTTHE0b0NQeWRXZkRpbGpZNXl5V3huOHRJOVY5SzFzTlNrd0RDU2VJWApqWEEvYVlpTy9ieGJGWVN4bHBqUEZleU1CMGluaWQxVVg1Ty9WSVBvNVgxZ2loWkhlOTMwbUY0YlhWQWk0VFNiCkMybjB5NWF1Skd5UnRRMU8KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
# Source: linkerd-viz/templates/admin-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
# Source: linkerd-viz/templates/metrics-api-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/prometheus-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz-30.12.11.tgz
  port: admin-http
  proxyProtocol: HTTP/1
---
# Source: linkerd-viz/templates/tap-injector-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/tap-policy.yaml
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz-30.12.11.tgz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz-30.12.11.tgz.svc.cluster.local
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
# Source: linkerd-viz/templates/service-profiles.yaml
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz-30.12.11.tgz.svc.cluster.local
  namespace: linkerd-viz-30.12.11.tgz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "patch"]
  resourceNames: ["linkerd-viz-30.12.11.tgz"]
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
roleRef:
  kind: Role
  name: namespace-metadata
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/namespace-metadata-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  name: viz-namespace-metadata-linkerd-config
roleRef:
  kind: Role
  name: ext-namespace-metadata-linkerd-config
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
---
# Source: linkerd-viz/templates/namespace-metadata.yaml
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.14.10
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: namespace-metadata
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.14.10
  name: namespace-metadata
  namespace: linkerd-viz-30.12.11.tgz
spec:
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.14.10
        linkerd.io/inject: disabled
      labels:
        linkerd.io/extension: viz
        app.kubernetes.io/name: namespace-metadata
        app.kubernetes.io/part-of: Linkerd
        app.kubernetes.io/version: stable-2.14.10
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: Never
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: namespace-metadata
      containers:
      - name: namespace-metadata
        image: cr.l5d.io/linkerd/extension-init:v0.1.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        args:
        - --log-format
        - plain
        - --log-level
        - info
        - --extension
        - viz
        - --namespace
        - linkerd-viz-30.12.11.tgz
        - --linkerd-namespace
        - linkerd
