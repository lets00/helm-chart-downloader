---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-controller
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/serviceaccounts.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: kubefed-0.10.0.tgz
  name: kubefed-admission-webhook
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  namespace: kubefed-0.10.0.tgz
  name: kubefed-admission-webhook-serving-cert
type: kubernetes.io/tls
stringData:
  tls.crt: "-----BEGIN CERTIFICATE-----\nMIIDpjCCAo6gAwIBAgIRAIN+eUd3M5dj3OdAi/7KAeAwDQYJKoZIhvcNAQELBQAw\nJzElMCMGA1UEAxMca3ViZWZlZC1hZG1pc3Npb24td2ViaG9vay1jYTAeFw0yNDA2\nMjAxNDU3MzVaFw0zNDA2MTgxNDU3MzVaMCcxJTAjBgNVBAMTHG15LXJlbGVhc2Ut\nYWRtaXNzaW9uLXdlYmhvb2swggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQDlDw6IPi5WBDj2QpVq97ia3G1F0h/Kwd4gsLfcg1EV1vWk5ZH27CHV5lgEN9WT\nNRS9Xd272FnfUy36TZrme/IOfR7eBc+9JMulXl4invkHbji/YRWqaF7w3mpkPBhZ\nA3W3vLRaEQ/Dhzb36yWccNHqfm1lZ119+dhMpCmenx/iaGvdtmy9cAM25wqcHlZS\nu5HIgk2qNViC3+zUhB7+b/AgypjojM7bF4W+PK462xndbL+Pg1FMzI9SFhGluMzS\nUI83hbbhi/61Fd/IQPsJrPHBpnJZ39NONnAXsAbx7HiCW5B1EJ+dfxOTtxDHxrbD\ntZmv87ilLLR41gZfCzmIMzRPAgMBAAGjgcwwgckwDgYDVR0PAQH/BAQDAgWgMB0G\nA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB8GA1Ud\nIwQYMBaAFNRj1FVEozxoie3nlxpol0esNHL3MGkGA1UdEQRiMGCCLGt1YmVmZWQt\nYWRtaXNzaW9uLXdlYmhvb2sua3ViZWZlZC0wLjEwLjAudGd6gjBrdWJlZmVkLWFk\nbWlzc2lvbi13ZWJob29rLmt1YmVmZWQtMC4xMC4wLnRnei5zdmMwDQYJKoZIhvcN\nAQELBQADggEBALgdXm09MuBUQrZQLfQB8z4IYsX9AT3B1Bpv7vMh/jcyavtiF3fY\neyh/cBlSGJFvuRT7olL4uNNFAqshR5aqXxUBrkHuewDKMb1pdom0KT2mCu1yCHW7\nBuNUs82eGb8Bl0gtONmXN3UcMBDq/cjYxrZPYT5R4/zdHSuPqDHghlU0T96yPH9l\nR3YMwwNAn1PslQvGx/zUJbEahrU9ALOZJGb1m43/p/woGNdbAqFvTWaun8pBVFT4\np4TANX7bXSucig8BYEmySWtrlgk9ZdbqW6bKC7VptbDVpvCbrHoIOQ+lqYisCend\nF07t0PUfKhV3e067dczPDX2BUrcmiTGRguU=\n-----END CERTIFICATE-----\n"
  tls.key: "-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEA5Q8OiD4uVgQ49kKVave4mtxtRdIfysHeILC33INRFdb1pOWR\n9uwh1eZYBDfVkzUUvV3du9hZ31Mt+k2a5nvyDn0e3gXPvSTLpV5eIp75B244v2EV\nqmhe8N5qZDwYWQN1t7y0WhEPw4c29+slnHDR6n5tZWddffnYTKQpnp8f4mhr3bZs\nvXADNucKnB5WUruRyIJNqjVYgt/s1IQe/m/wIMqY6IzO2xeFvjyuOtsZ3Wy/j4NR\nTMyPUhYRpbjM0lCPN4W24Yv+tRXfyED7CazxwaZyWd/TTjZwF7AG8ex4gluQdRCf\nnX8Tk7cQx8a2w7WZr/O4pSy0eNYGXws5iDM0TwIDAQABAoIBADsvpsuhdYuYT7ei\nAMXA+JxbNIkEAF79tQ2xW/DIpZ0FDDftccfhv+RrPnbojnEZGCDOLkspXh+MeKbi\ngpHnmOYRgnZP/hubdFtohN5hQWugGV2qElUT3uRSNB9uP8RQVoyBYACdw/r750Is\nKm2/4R28STwYd1njwvYavP5Vk4GGiJPbGiQNx2+bnNaFLtN/cNtsmcIvABD8i6GN\ngQ3IGrYr+jqMp1kUws5AfWraAyPcIAixKtMUn2qEqTQfxGHd5WKMZcJ4PLpOvsnA\nJtVK/IjPXlyu0fzpyk0/2QdJRVHRfsCCw2dneVnqSONWHiSHBXo9WSToobQUwHJ3\nOKgGeiECgYEA6oXkdbTFUmZDiA/v+9dVxJPoIzr6jBwIB+NIBDZwX5kp1wSainI0\nwT/HTtx5tzXsvV0K0k8b9X9lDCl9Pw6mAuyfhFfdGHCn6r/3XK46mOsmlJe2g4p+\nTOfoMDKOGdPosXhmZLiVf3d6fj+dxngC+HFbYfGrOaJ+nnhaAw+hvgkCgYEA+gkQ\nEVnhF1nrjaRO7SwOkXKu1CHBjVylFxINiJNPtc4vpF+A6usEBx3eQ0pQHwz62ujU\nie6r4G9OysHJ7EEbbTwG4HeDEiFN6/RReIqlcmO6kKDLVLojXNv/QWZKrXzZ18p7\nbXHTGj38AipTTklh3zzMeSKP+7+ohLoZv6DidZcCgYBGci2sBb73/2vtpQvrVEWZ\nJOyoGIFGMO1goS7yxP+AV9uvkNxzFdcu7V+LGsMc+3+/agFkJws49Sl/O785f8by\nPe20rUfmnYBzDXLaTiOf55LRM7lJTgKeS1L9l1IEBBlzpbzsKF4Pye3rmmRkR4xs\n4HAYvaU3TM5H/9LZ9IobMQKBgGHSOd8P8uhX3bhEmDxiCDEPVSbZLghIPq6P+Yt9\nVqoiSLFeS+mcmK7QGKzq3f3H7jzG6qAsKEJeSc05k+5CaqCJ44beOwFU1k+B/n3S\ngHgIXG1I+0PirwMdbvf/NSg6uF+ccD2ZUqXpqjaOqJjwTMIx3y1lQD+V9DA5Pumh\n3/dxAoGAE1duG3RRqjpMREMJXV7KOigvM+DBnn8FbhAGjgb1Ff5bxzSYxIlEM+Dm\nku0aV5hILVidEewPO1S173/0QSfGqC5RPW5TMpZFCeakXlEY710MSNb5IEZMxvi1\nz7A2l3uyqyv0J3JoNP2uN6LvgAzZfohTrEL5/k1r0pU3f3AGLcc=\n-----END RSA PRIVATE KEY-----\n"
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: kubefed-admin
rules:
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - '*'
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: kubefed-edit
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - create
  - patch
  - delete
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
---
# Source: kubefed/charts/controllermanager/templates/aggregate_clusterroles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: kubefed-view
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-role
rules:
- apiGroups:
  - scheduling.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - multiclusterdns.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
  - delete
- apiGroups:
  - core.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - create
  - update
  - patch
- apiGroups:
  - types.kubefed.io
  resources:
  - '*'
  verbs:
  - get
  - watch
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - create
  - update
  - patch
---
# Source: kubefed/charts/controllermanager/templates/clusterrole.yaml
# This role provides the necessary permissions to create admission reviews.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: system:kubefed:admission-requester

rules:
- apiGroups:
  - validation.core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - create
- apiGroups:
  - mutation.core.kubefed.io
  resources:
  - kubefedconfigs
  verbs:
  - create
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubefed-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubefed-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# name using the namespace. This is needed because admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:auth-delegator

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/clusterrolebindings.yaml
# This clusterrolebinding grants permissions for the admission webhook to create
# admission reviews on behalf of the system:anonymous user.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique cluster-scoped
# resource name using the namespace. This is needed because helm does not
# currently support the ability to share resources across multiple
# installations of the same chart. Additionally, admission-webhooks do not
# currently support the ability to have namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:anonymous-auth

roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:kubefed:admission-requester

subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: system:anonymous
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-config-role
  namespace: kubefed-0.10.0.tgz
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
# Source: kubefed/charts/controllermanager/templates/roles.yaml
# Only need access to these core namespaced resources in the KubeFed system
# namespace regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    api: kubefed
    kubebuilder.k8s.io: 1.0.0
  name: kubefed-admission-webhook-role
  namespace: kubefed-0.10.0.tgz
rules:
- apiGroups:
  - core.kubefed.io
  resources:
  - federatedtypeconfigs
  - kubefedclusters
  - kubefedconfigs
  verbs:
  - get
  - watch
  - list
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-rolebinding
  namespace: kubefed-0.10.0.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-role
subjects:
- kind: ServiceAccount
  name: kubefed-controller
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Grant admission webhook access to core.kubefed.io in the KubeFed system
# namespace only, regardless of kubefed deployment scope.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-admission-webhook-rolebinding
  namespace: kubefed-0.10.0.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-admission-webhook-role
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/rolebindings.yaml
# Allow the admission webhook to read the config for terminating
# authentication.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
# TODO(font) For namespace scoped deployments, create a unique resource name in
# the kube-system namespace using the namespace. This is needed because
# admission-webhooks do not currently support the ability to have
# namespace-scoped RBAC permissions only.
  name: kubefed-admission-webhook:apiextension-viewer

  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: kubefed-admission-webhook
  namespace: kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-admission-webhook
  namespace: kubefed-0.10.0.tgz
spec:
  selector:
    kubefed-admission-webhook: "true"
  ports:
  - port: 443
    targetPort: 8443
---
# Source: kubefed/charts/controllermanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubefed-controller-manager-metrics-service
  namespace: kubefed-0.10.0.tgz
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  selector:
    kubefed-control-plane: "controller-manager"
  ports:
  - name: metrics
    port: 9090
    targetPort: metrics
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubefed-controller-manager
  namespace: kubefed-0.10.0.tgz
  labels:
    kubefed-control-plane: controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      kubefed-control-plane: controller-manager
  strategy: {}
  template:
    metadata:
      labels:
        kubefed-control-plane: controller-manager
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-controller
      containers:
      - command:
        - /hyperfed/controller-manager
        - "--v=2"
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        name: controller-manager
        ports:
        - containerPort: 9090
          name: metrics
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3
          timeoutSeconds: 3
        resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 64Mi
      terminationGracePeriodSeconds: 10
---
# Source: kubefed/charts/controllermanager/templates/deployments.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kubefed-0.10.0.tgz
  name: kubefed-admission-webhook
  labels:
    kubefed-admission-webhook: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      kubefed-admission-webhook: "true"
  template:
    metadata:
      labels:
        kubefed-admission-webhook: "true"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      securityContext:
        runAsUser: 1001
      serviceAccountName: kubefed-admission-webhook
      containers:
      - name: admission-webhook
        image: "quay.io/kubernetes-multicluster/kubefed:v0.10.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - "/hyperfed/webhook"
        - "--secure-port=8443"
        - "--cert-dir=/var/serving-cert/"
        - "--v=8"
        ports:
        - containerPort: 8443
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8443
            scheme: HTTPS
        resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubefed-admission-webhook-serving-cert
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: clusterroles.rbac.authorization.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedClusterRole
    pluralName: federatedclusterroles
    scope: Cluster
    version: v1beta1
  propagation: Enabled
  targetType:
    group: rbac.authorization.k8s.io
    kind: ClusterRole
    pluralName: clusterroles
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: configmaps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedConfigMap
    pluralName: federatedconfigmaps
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ConfigMap
    pluralName: configmaps
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: deployments.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedDeployment
    pluralName: federateddeployments
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: Deployment
    pluralName: deployments
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: ingresses.networking.k8s.io
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedIngress
    pluralName: federatedingresses
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: networking.k8s.io
    kind: Ingress
    pluralName: ingresses
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: jobs.batch
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedJob
    pluralName: federatedjobs
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: batch
    kind: Job
    pluralName: jobs
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: namespaces
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedNamespace
    pluralName: federatednamespaces
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Namespace
    pluralName: namespaces
    scope: Cluster
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: replicasets.apps
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedReplicaSet
    pluralName: federatedreplicasets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    group: apps
    kind: ReplicaSet
    pluralName: replicasets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: secrets
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedSecret
    pluralName: federatedsecrets
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Secret
    pluralName: secrets
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: serviceaccounts
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedServiceAccount
    pluralName: federatedserviceaccounts
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: ServiceAccount
    pluralName: serviceaccounts
    scope: Namespaced
    version: v1
---
# Source: kubefed/templates/federatedtypeconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: FederatedTypeConfig
metadata:
  name: services
spec:
  federatedType:
    group: types.kubefed.io
    kind: FederatedService
    pluralName: federatedservices
    scope: Namespaced
    version: v1beta1
  propagation: Enabled
  targetType:
    kind: Service
    pluralName: services
    scope: Namespaced
    version: v1
---
# Source: kubefed/charts/controllermanager/templates/kubefedconfig.yaml
apiVersion: core.kubefed.io/v1beta1
kind: KubeFedConfig
metadata:
  name: kubefed
  namespace: kubefed-0.10.0.tgz
spec:
  scope: "Cluster"
  controllerDuration:
    availableDelay: "20s"
    unavailableDelay: "60s"
    cacheSyncTimeout: "5m"
  leaderElect:
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "5s"
    resourceLock: "configmaps"
  clusterHealthCheck:
    period: "10s"
    failureThreshold: 3
    successThreshold: 1
    timeout: "3s"
  syncController:
    maxConcurrentReconciles: 1
    adoptResources: "Enabled"
  statusController:
    maxConcurrentReconciles: 1
  featureGates:
  - name: PushReconciler
    configuration: "Enabled"
  - name: SchedulerPreferences
    configuration: "Enabled"
  # NOTE: Commented feature gate to fix https://github.com/kubernetes-sigs/kubefed/issues/1333
  #- name: RawResourceStatusCollection
  #  configuration: "Disabled"
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
# The same comments for ValidatingWebhookConfiguration apply here to
# MutatingWebhookConfiguration.
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: mutation.core.kubefed.io
  annotations:
webhooks:
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "kubefed-0.10.0.tgz"
      name: kubefed-admission-webhook
      path: /default-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQUxhSFl5RWs4NlRpSnNiNzlqZmx6bWd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNakF4TkRVM016VmFGdzB6TkRBMk1UZ3hORFUzTXpWYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEUlhReXV0cGJud1dFdmpCUSs0QVFmVzIrZHBlSy83SWVGaEdrbE8rZjVMM3Y0eDg1VUlDcDVrMzB2R1pGcgpaYmVPY1FWZVduMVVOMGg5cEI5VXhUOUVuTnd0QStpZHl0Y0xvNmlPakJOanIvYmVLR3puNjd2RDdtUTBuQmpjClpNM212V0JIS1lyNzBWR1JuM1ZiTHA4UHFuU1VKcDFIZm5lVFRvc3diTTFLY0w0K2xNT0NFWG80RHpkelArYmEKMnRCWmlxWGEzSytQUHdKU0N6NXNKN3lKTnNsK0VzWTVxN3NocDU2STNTQkhySXo0ZXc4OFFva2RBNEx5d2RIQgpvQWhoOXFMU1FFcVdXYWhUUUZkdWVsK3BESWJvbHZlblBoNG9YLzFPWm5id3p6YkJpVEU0RDlVSjJKOGRKRy9UCmVVa3ovd3BYdUQ4WkFkNEFiRTRzdi90VEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTFHUFVWVVNqUEdpSjdlZVhHbWlYUjZ3MGN2Y3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1IrCjdiZHVBQTBaVEs4eks2aG1sbzQrYXhTZTF0WjVaS3Q3bjNraUJWeGkreGFwdG11b0h0cWw5SHhjOU40bDVxUk8KdUFhN0hyMlZLMnBLR0F1dDFDUXNBYjBzRXhlL2grNFNNZ2RZY2VxTzN3ZGR5QmZ6bFdqcVloVytlUjNtVy9GRQpDRjRJd2FGdHIxOFRjc1E2djg2R2MyTWttUXRLUURSOWxvZzA2V2d6RnBudkdMZ3dqakZLN3FVRkFSNVNPYzlECjlEWWNCSkYwKzIzdkxLWHFkVWVXcXpZaFRhU1RUTUhxcWxlUFAyd3dldFV5SmxyQnlxU0xNTHloeTFKUFFMdWIKQUJpb0tjRG15SFdLdmhsWXY0OWRPazk5c25lQUswRWVwemQ5TlQveUM5SEZhajBiTk00b0dFY1phMmltSDZxegp3QjJRWWlGMHU1cDlVcDgxOXVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
# For namespace scoped deployments, create a unique cluster-scoped resource
# using the namespace.
  name: validations.core.kubefed.io
  annotations:
webhooks:
- name: federatedtypeconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "kubefed-0.10.0.tgz"
      name: kubefed-admission-webhook
      path: /validate-federatedtypeconfigs
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQUxhSFl5RWs4NlRpSnNiNzlqZmx6bWd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNakF4TkRVM016VmFGdzB6TkRBMk1UZ3hORFUzTXpWYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEUlhReXV0cGJud1dFdmpCUSs0QVFmVzIrZHBlSy83SWVGaEdrbE8rZjVMM3Y0eDg1VUlDcDVrMzB2R1pGcgpaYmVPY1FWZVduMVVOMGg5cEI5VXhUOUVuTnd0QStpZHl0Y0xvNmlPakJOanIvYmVLR3puNjd2RDdtUTBuQmpjClpNM212V0JIS1lyNzBWR1JuM1ZiTHA4UHFuU1VKcDFIZm5lVFRvc3diTTFLY0w0K2xNT0NFWG80RHpkelArYmEKMnRCWmlxWGEzSytQUHdKU0N6NXNKN3lKTnNsK0VzWTVxN3NocDU2STNTQkhySXo0ZXc4OFFva2RBNEx5d2RIQgpvQWhoOXFMU1FFcVdXYWhUUUZkdWVsK3BESWJvbHZlblBoNG9YLzFPWm5id3p6YkJpVEU0RDlVSjJKOGRKRy9UCmVVa3ovd3BYdUQ4WkFkNEFiRTRzdi90VEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTFHUFVWVVNqUEdpSjdlZVhHbWlYUjZ3MGN2Y3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1IrCjdiZHVBQTBaVEs4eks2aG1sbzQrYXhTZTF0WjVaS3Q3bjNraUJWeGkreGFwdG11b0h0cWw5SHhjOU40bDVxUk8KdUFhN0hyMlZLMnBLR0F1dDFDUXNBYjBzRXhlL2grNFNNZ2RZY2VxTzN3ZGR5QmZ6bFdqcVloVytlUjNtVy9GRQpDRjRJd2FGdHIxOFRjc1E2djg2R2MyTWttUXRLUURSOWxvZzA2V2d6RnBudkdMZ3dqakZLN3FVRkFSNVNPYzlECjlEWWNCSkYwKzIzdkxLWHFkVWVXcXpZaFRhU1RUTUhxcWxlUFAyd3dldFV5SmxyQnlxU0xNTHloeTFKUFFMdWIKQUJpb0tjRG15SFdLdmhsWXY0OWRPazk5c25lQUswRWVwemQ5TlQveUM5SEZhajBiTk00b0dFY1phMmltSDZxegp3QjJRWWlGMHU1cDlVcDgxOXVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - federatedtypeconfigs
    - federatedtypeconfigs/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedclusters.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "kubefed-0.10.0.tgz"
      name: kubefed-admission-webhook
      path: /validate-kubefedcluster
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQUxhSFl5RWs4NlRpSnNiNzlqZmx6bWd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNakF4TkRVM016VmFGdzB6TkRBMk1UZ3hORFUzTXpWYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEUlhReXV0cGJud1dFdmpCUSs0QVFmVzIrZHBlSy83SWVGaEdrbE8rZjVMM3Y0eDg1VUlDcDVrMzB2R1pGcgpaYmVPY1FWZVduMVVOMGg5cEI5VXhUOUVuTnd0QStpZHl0Y0xvNmlPakJOanIvYmVLR3puNjd2RDdtUTBuQmpjClpNM212V0JIS1lyNzBWR1JuM1ZiTHA4UHFuU1VKcDFIZm5lVFRvc3diTTFLY0w0K2xNT0NFWG80RHpkelArYmEKMnRCWmlxWGEzSytQUHdKU0N6NXNKN3lKTnNsK0VzWTVxN3NocDU2STNTQkhySXo0ZXc4OFFva2RBNEx5d2RIQgpvQWhoOXFMU1FFcVdXYWhUUUZkdWVsK3BESWJvbHZlblBoNG9YLzFPWm5id3p6YkJpVEU0RDlVSjJKOGRKRy9UCmVVa3ovd3BYdUQ4WkFkNEFiRTRzdi90VEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTFHUFVWVVNqUEdpSjdlZVhHbWlYUjZ3MGN2Y3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1IrCjdiZHVBQTBaVEs4eks2aG1sbzQrYXhTZTF0WjVaS3Q3bjNraUJWeGkreGFwdG11b0h0cWw5SHhjOU40bDVxUk8KdUFhN0hyMlZLMnBLR0F1dDFDUXNBYjBzRXhlL2grNFNNZ2RZY2VxTzN3ZGR5QmZ6bFdqcVloVytlUjNtVy9GRQpDRjRJd2FGdHIxOFRjc1E2djg2R2MyTWttUXRLUURSOWxvZzA2V2d6RnBudkdMZ3dqakZLN3FVRkFSNVNPYzlECjlEWWNCSkYwKzIzdkxLWHFkVWVXcXpZaFRhU1RUTUhxcWxlUFAyd3dldFV5SmxyQnlxU0xNTHloeTFKUFFMdWIKQUJpb0tjRG15SFdLdmhsWXY0OWRPazk5c25lQUswRWVwemQ5TlQveUM5SEZhajBiTk00b0dFY1phMmltSDZxegp3QjJRWWlGMHU1cDlVcDgxOXVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedclusters
    - kubefedclusters/status
  failurePolicy: Fail
  sideEffects: None
- name: kubefedconfigs.core.kubefed.io
  admissionReviewVersions:
    - v1
  clientConfig:
    service:
      namespace: "kubefed-0.10.0.tgz"
      name: kubefed-admission-webhook
      path: /validate-kubefedconfig
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lSQUxhSFl5RWs4NlRpSnNiNzlqZmx6bWd3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2EzVmlaV1psWkMxaFpHMXBjM05wYjI0dGQyVmlhRzl2YXkxallUQWVGdzB5TkRBMgpNakF4TkRVM016VmFGdzB6TkRBMk1UZ3hORFUzTXpWYU1DY3hKVEFqQmdOVkJBTVRIR3QxWW1WbVpXUXRZV1J0CmFYTnphVzl1TFhkbFltaHZiMnN0WTJFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEUlhReXV0cGJud1dFdmpCUSs0QVFmVzIrZHBlSy83SWVGaEdrbE8rZjVMM3Y0eDg1VUlDcDVrMzB2R1pGcgpaYmVPY1FWZVduMVVOMGg5cEI5VXhUOUVuTnd0QStpZHl0Y0xvNmlPakJOanIvYmVLR3puNjd2RDdtUTBuQmpjClpNM212V0JIS1lyNzBWR1JuM1ZiTHA4UHFuU1VKcDFIZm5lVFRvc3diTTFLY0w0K2xNT0NFWG80RHpkelArYmEKMnRCWmlxWGEzSytQUHdKU0N6NXNKN3lKTnNsK0VzWTVxN3NocDU2STNTQkhySXo0ZXc4OFFva2RBNEx5d2RIQgpvQWhoOXFMU1FFcVdXYWhUUUZkdWVsK3BESWJvbHZlblBoNG9YLzFPWm5id3p6YkJpVEU0RDlVSjJKOGRKRy9UCmVVa3ovd3BYdUQ4WkFkNEFiRTRzdi90VEFnTUJBQUdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVgpIUTRFRmdRVTFHUFVWVVNqUEdpSjdlZVhHbWlYUjZ3MGN2Y3dEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1IrCjdiZHVBQTBaVEs4eks2aG1sbzQrYXhTZTF0WjVaS3Q3bjNraUJWeGkreGFwdG11b0h0cWw5SHhjOU40bDVxUk8KdUFhN0hyMlZLMnBLR0F1dDFDUXNBYjBzRXhlL2grNFNNZ2RZY2VxTzN3ZGR5QmZ6bFdqcVloVytlUjNtVy9GRQpDRjRJd2FGdHIxOFRjc1E2djg2R2MyTWttUXRLUURSOWxvZzA2V2d6RnBudkdMZ3dqakZLN3FVRkFSNVNPYzlECjlEWWNCSkYwKzIzdkxLWHFkVWVXcXpZaFRhU1RUTUhxcWxlUFAyd3dldFV5SmxyQnlxU0xNTHloeTFKUFFMdWIKQUJpb0tjRG15SFdLdmhsWXY0OWRPazk5c25lQUswRWVwemQ5TlQveUM5SEZhajBiTk00b0dFY1phMmltSDZxegp3QjJRWWlGMHU1cDlVcDgxOXVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  rules:
  - operations:
    - CREATE
    - UPDATE
    apiGroups:
    - core.kubefed.io
    apiVersions:
    - v1beta1
    resources:
    - kubefedconfigs
  failurePolicy: Fail
  sideEffects: None
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubefed-config-hook
  namespace: kubefed-0.10.0.tgz
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: "my-release-kubefed-config-hook"
  namespace: "kubefed-0.10.0.tgz"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  setup.sh: |-
    #!/bin/bash
    set -euo pipefail

    kubectl patch kubefedconfig -n kubefed-0.10.0.tgz kubefed --type='json' -p='[{"op": "add", "path": "/spec/featureGates", "value":[{"configuration": "Enabled","name":"PushReconciler"},{"configuration": "Disabled","name":"RawResourceStatusCollection"},{"configuration": "Enabled","name":"SchedulerPreferences"}]}]'

    echo "Kubefedconfig patched successfully!"

    kubectl rollout restart deployment/kubefed-controller-manager -n kubefed-0.10.0.tgz
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubefed-config-hook
  namespace: kubefed-0.10.0.tgz
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["patch","get"]
  - apiGroups: ["core.kubefed.io"]
    resources: ["kubefedconfigs"]
    verbs: ["patch","get"]
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubefed-config-hook
  namespace: kubefed-0.10.0.tgz
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubefed-config-hook
subjects:
  - kind: ServiceAccount
    name: kubefed-config-hook
---
# Source: kubefed/charts/controllermanager/templates/post-install-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "my-release-uhpozq5fne"
  namespace: "kubefed-0.10.0.tgz"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "my-release"
    app.kubernetes.io/version: 0.8.1
    helm.sh/chart: "controllermanager-0.0.6"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-4"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:
  template:
    metadata:
      name: "my-release"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "my-release"
        helm.sh/chart: "controllermanager-0.0.6"
    spec:
      nodeSelector:
        {}
      tolerations:
        []
      restartPolicy: Never
      serviceAccountName: kubefed-config-hook
      automountServiceAccountToken: true
      containers:
      - name: post-install-job
        image: "bitnami/kubectl:1.17.16"
        imagePullPolicy: "IfNotPresent"
        command: ["/bin/bash"]
        args: ["/opt/scripts/setup.sh"]
        volumeMounts:
        - name: "scripts"
          mountPath: "/opt/scripts"
      volumes:
      - name: "scripts"
        configMap:
          name: "my-release-kubefed-config-hook"
