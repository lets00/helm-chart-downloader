---
# Source: arroyo/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-postgresql
  namespace: "arroyo-0.10.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
---
# Source: arroyo/charts/prometheus/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
  namespace: arroyo-0.10.3.tgz
  annotations:
    {}
---
# Source: arroyo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-arroyo
  labels:
    helm.sh/chart: arroyo-0.10.3
    app.kubernetes.io/name: arroyo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.3"
    app.kubernetes.io/managed-by: Helm
---
# Source: arroyo/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  namespace: "arroyo-0.10.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "MlhOakpJMU1IMQ=="
  password: "YXJyb3lv"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: arroyo/charts/prometheus/templates/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
  namespace: arroyo-0.10.3.tgz
data:
  allow-snippet-annotations: "false"
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 5s
      scrape_timeout: 5s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - honor_labels: true
      job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
    - honor_labels: true
      job_name: kubernetes-service-endpoints-slow
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (.+?)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: service
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: node
      scrape_interval: 5m
      scrape_timeout: 30s
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - honor_labels: true
      job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: service
    - honor_labels: true
      job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
    - honor_labels: true
      job_name: kubernetes-pods-slow
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      scrape_interval: 5m
      scrape_timeout: 30s
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: arroyo/charts/prometheus/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
  namespace: arroyo-0.10.3.tgz
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: arroyo/charts/prometheus/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: arroyo/templates/role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-arroyo
rules:
 - apiGroups:
    - ""
   resources:
    - services
    - pods
    - configmaps
   verbs:
    - create
    - get
    - list
    - watch
    - update
    - delete
    - deletecollection
 - apiGroups:
    - extensions
    - apps
   resources:
    - replicasets
    - replicasets/status
    - ingresses
    - ingresses/status
   verbs:
    - get
    - list
    - watch
    - create
    - update
    - delete
    - deletecollection
---
# Source: arroyo/charts/prometheus/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
subjects:
  - kind: ServiceAccount
    name: my-release-prometheus-server
    namespace: arroyo-0.10.3.tgz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-prometheus-server
---
# Source: arroyo/templates/role.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-release-arroyo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-release-arroyo
subjects:
- kind: ServiceAccount
  name: my-release-arroyo
  namespace: arroyo-0.10.3.tgz
---
# Source: arroyo/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-hl
  namespace: "arroyo-0.10.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: arroyo/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  namespace: "arroyo-0.10.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/component: primary
---
# Source: arroyo/charts/prometheus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
  namespace: arroyo-0.10.3.tgz
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: arroyo/templates/controller.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-arroyo
spec:
  selector:
    app: my-release-arroyo-controller
  ports:
    - name: grpc
      protocol: TCP
      port: 9190
      targetPort: 9190
    - name: admin
      protocol: TCP
      port: 8001
      targetPort: 9191
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
# Source: arroyo/charts/prometheus/templates/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: v2.43.0
    helm.sh/chart: prometheus-21.1.2
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: my-release-prometheus-server
  namespace: arroyo-0.10.3.tgz
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/version: v2.43.0
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: v2.43.0
        helm.sh/chart: prometheus-21.1.2
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: prometheus
    spec:
      enableServiceLinks: true
      serviceAccountName: my-release-prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "quay.io/prometheus-operator/prometheus-config-reloader:v0.63.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --watched-dir=/etc/config
            - --reload-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "quay.io/prometheus/prometheus:v2.43.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: my-release-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: my-release-prometheus-server
---
# Source: arroyo/templates/controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-arroyo-controller
  labels:
    helm.sh/chart: arroyo-0.10.3
    app.kubernetes.io/name: arroyo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.3"
    app.kubernetes.io/managed-by: Helm
    app: my-release-arroyo-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-release-arroyo-controller
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        helm.sh/chart: arroyo-0.10.3
        app.kubernetes.io/name: arroyo
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "0.10.3"
        app.kubernetes.io/managed-by: Helm
        app: my-release-arroyo-controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8001"
    spec:
      serviceAccountName: my-release-arroyo
      volumes:
      initContainers:
      - name: migrate-database
        image: "ghcr.io/arroyosystems/arroyo:0.10"
        imagePullPolicy: IfNotPresent
        command: [ "/app/arroyo-bin", "migrate", "--wait", "300" ]
        env:
        
        - name: DATABASE_HOST
          value: "my-release-arroyo-postgresql.arroyo-0.10.3.tgz.svc.cluster.local"
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_NAME
          value: arroyo
        - name: DATABASE_USER
          value: arroyo
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-arroyo-postgresql
              key: password
      containers:
      - name: arroyo-controller
        securityContext:
            {}
        image: "ghcr.io/arroyosystems/arroyo:0.10"
        imagePullPolicy: IfNotPresent
        command: ["/app/arroyo-bin", "cluster"]

        env:
        
        
        
        
        - name: DATABASE_HOST
          value: "my-release-arroyo-postgresql.arroyo-0.10.3.tgz.svc.cluster.local"
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_NAME
          value: arroyo
        - name: DATABASE_USER
          value: arroyo
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-release-arroyo-postgresql
              key: password
        - name: CONTROLLER_ADDR
          value: "http://my-release-arroyo:9190"
        - name: GRPC_PORT
          value: "9190"
        - name: ADMIN_PORT
          value: "8001"
        - name: HTTP_PORT
          value: "80"
        - name: COMPILER_GRPC_PORT
          value: "9000"
        - name: PROM_ENDPOINT
          value: "http://my-release-arroyo-prometheus-server.arroyo-0.10.3.tgz.svc.cluster.local"
        - name: API_METRICS_RATE
          value: "15s"
        - name: SCHEDULER
          value: "kubernetes"
        - name: ARROYO_K8S_PROGRAM_FILES
          value: "true"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_WORKER_NAME
          value: "my-release-arroyo"
        - name: K8S_WORKER_LABELS
          value: "helm.sh/chart: arroyo-0.10.3\napp.kubernetes.io/name: arroyo\napp.kubernetes.io/instance: my-release\napp.kubernetes.io/version: \"0.10.3\"\napp.kubernetes.io/managed-by: Helm"
        - name: K8S_WORKER_ANNOTATIONS
          value: "prometheus.io/path: /metrics\nprometheus.io/port: \"6901\"\nprometheus.io/scrape: \"true\""
        - name: K8S_WORKER_IMAGE
          value: "ghcr.io/arroyosystems/arroyo:0.10"
        - name: K8S_WORKER_IMAGE_PULL_POLICY
          value: "IfNotPresent"
        # TODO: image pull secret
        - name: K8S_WORKER_RESOURCES
          value: "limits: {}\nrequests:\n  cpu: 400m\n  memory: 200Mi"
        - name: K8S_WORKER_SLOTS
          value: "4"
        

        ports:
        - containerPort: 9190
          name: grpc
        - containerPort: 8001
          name: admin
        - containerPort: 80
          name: http
        livenessProbe:
          httpGet:
            path: /status
            port: admin
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: /status
            port: admin
          initialDelaySeconds: 5
        volumeMounts:
---
# Source: arroyo/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  namespace: "arroyo-0.10.3.tgz"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.6.8
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-release-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.6.8
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-release-postgresql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.3.0-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "arroyo"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "arroyo"
            # Replication
            # Initdb
            - name: POSTGRES_INITSCRIPTS_USERNAME
              value: postgres
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "arroyo" -d "dbname=arroyo" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "arroyo" -d "dbname=arroyo" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: arroyo/templates/tests/test-console-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-arroyo-test-connection"
  labels:
    helm.sh/chart: arroyo-0.10.3
    app.kubernetes.io/name: arroyo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-arroyo:80']
  restartPolicy: Never
---
# Source: arroyo/templates/tests/test-grpc-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-arroyo-controller-test-grpc-connection"
  labels:
    helm.sh/chart: arroyo-0.10.3
    app.kubernetes.io/name: arroyo
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "0.10.3"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: grpcurl
      image: fullstorydev/grpcurl:v1.8.7-alpine
      args: ['-plaintext', 'my-release-arroyo:9190','list']
  restartPolicy: Never
