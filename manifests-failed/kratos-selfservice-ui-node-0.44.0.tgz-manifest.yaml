---
# Source: kratos-selfservice-ui-node/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-kratos-selfservice-ui-node
  labels:
    app.kubernetes.io/name: kratos-selfservice-ui-node
    helm.sh/chart: kratos-selfservice-ui-node-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.13.0-4"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kratos-selfservice-ui-node
    app.kubernetes.io/instance: my-release
---
# Source: kratos-selfservice-ui-node/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-kratos-selfservice-ui-node
  namespace: kratos-selfservice-ui-node-0.44.0.tgz
  labels:
    app.kubernetes.io/name: kratos-selfservice-ui-node
    helm.sh/chart: kratos-selfservice-ui-node-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.13.0-4"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: kratos-selfservice-ui-node
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kratos-selfservice-ui-node
        helm.sh/chart: kratos-selfservice-ui-node-0.44.0
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/version: "v0.13.0-4"
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 60
      containers:
        - name: kratos-selfservice-ui-node
          image: "oryd/kratos-selfservice-ui-node:v0.13.0-20"
          imagePullPolicy: IfNotPresent
          env:
          - name: KRATOS_PUBLIC_URL
            value: "http://kratos-public"
          - name: KRATOS_BROWSER_URL
            value: "http://kratos-browserui"
          - name: PROJECT_NAME
            value: "SecureApp"
          - name: BASE_PATH
            value: ""
          - name: JWKS_URL
            value: "http://oathkeeper-api"
          - name: KRATOS_ADMIN_URL
            value: "http://kratos-admin"
          - name: SECURITY_MODE
            value: 
          - name: COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-kratos-selfservice-ui-node
                key: secretsCookie
          - name: CSRF_COOKIE_SECRET
            valueFrom:
              secretKeyRef:
                name: my-release-kratos-selfservice-ui-node
                key: secretsCSRFCookie
          - name: CSRF_COOKIE_NAME
            value: ""
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/alive
              port: http
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 10000
            runAsNonRoot: true
            runAsUser: 10000
            seLinuxOptions:
              level: s0:c123,c456
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 10000
        runAsNonRoot: true
        runAsUser: 10000
        seccompProfile:
          type: RuntimeDefault
---
# Source: kratos-selfservice-ui-node/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-kratos-selfservice-ui-node
  namespace: kratos-selfservice-ui-node-0.44.0.tgz
  labels:
    app.kubernetes.io/name: kratos-selfservice-ui-node
    helm.sh/chart: kratos-selfservice-ui-node-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.13.0-4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
    helm.sh/resource-policy: keep
type: Opaque
data:
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsCookie: "MTZTTEE3ekJwN2pKQUhPWm5sUlFRMm54NWdjQUd1UDA="
  secretsCSRFCookie: "VFdONXduNU85V084MHcwQWlTQ3p1VjluSWl3VEtmeTM="
---
# Source: kratos-selfservice-ui-node/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-kratos-selfservice-ui-node-test-connection"
  namespace: kratos-selfservice-ui-node-0.44.0.tgz
  labels:
    app.kubernetes.io/name: kratos-selfservice-ui-node
    helm.sh/chart: kratos-selfservice-ui-node-0.44.0
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "v0.13.0-4"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: "busybox:1"
      command: ['wget']
      args:  ['my-release-kratos-selfservice-ui-node:80/health/ready']
  restartPolicy: Never
