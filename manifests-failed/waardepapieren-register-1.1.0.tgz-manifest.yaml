---
# Source: waardepapieren-register/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-release-waardepapieren-register
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: waardepapieren-register/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  namespace: waardepapieren-register-1.1.0.tgz
type: Opaque
data:
  postgresql-postgres-password: "VVUyV3dnQ3ZjQg=="
  postgresql-password: "IUNoYW5nZU1lIQ=="
---
# Source: waardepapieren-register/templates/dependencies-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: waardepapieren-register-dependencies
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
stringData:
    dependencies.yaml: |
        parameters:
---
# Source: waardepapieren-register/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: waardepapieren-register
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  
  database-url: "cGdzcWw6Ly93ZWJyZXNvdXJjZWNhdGFsb2d1czohQ2hhbmdlTWUhQG15LXJlbGVhc2UtcG9zdGdyZXNxbC93ZWJyZXNvdXJjZWNhdGFsb2d1cz9zZXJ2ZXJWZXJzaW9uPTEwJnNzbG1vZGU9ZGlzYWJsZQ=="
  
  app_application_key: "NDVjMWE0YjYtNTlkMy00YTZlLTg2YmYtODhhODcyZjM1ODQ1"
---
# Source: waardepapieren-register/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: waardepapieren-register
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
data:
  app-version: "V1.0"
  app-corsAllowOrigin: "[*]"
  cache: "true"
  debug: "0"
  trusted-proxies: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
  trusted-hosts: "^.+$"
  php-service: my-release-php  
  url: "https://waardepapieren-register.local/"
---
# Source: waardepapieren-register/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: waardepapieren-register-1.1.0.tgz
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
---
# Source: waardepapieren-register/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: waardepapieren-register-1.1.0.tgz
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: my-release
    role: primary
---
# Source: waardepapieren-register/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-release-waardepapieren-register
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
---
# Source: waardepapieren-register/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-release-waardepapieren-register
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: waardepapieren-register
      app.kubernetes.io/instance: my-release
  template:
    metadata:
      labels:
        app.kubernetes.io/name: waardepapieren-register
        app.kubernetes.io/instance: my-release
    spec:
      serviceAccountName: my-release-waardepapieren-register
      securityContext:
        {}
      volumes:
        - name: dependencies
          secret:
            secretName: waardepapieren-register-dependencies
            defaultMode: 420
      containers:
        - name: waardepapieren-register-php
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
          image: "ghcr.io/conductionnl/waardepapieren-register-php:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /srv/api/config/packages/dependencies.yaml
              subPath: dependencies.yaml
              name: dependencies
              readOnly: true
          env:
            - name: JWT_SECRET_KEY
              value: '%kernel.project_dir%/config/jwt/private.pem'
            - name: JWT_PUBLIC_KEY
              value: '%kernel.project_dir%/config/jwt/public.pem'
            - name: JWT_PASSPHRASE
              value: 'bafe1dc254b45471754c221081f874aa'
            - name: APP_ENV
              value: prod
            - name: TRUSTED_HOSTS
              valueFrom:
                configMapKeyRef:
                  key: trusted-hosts
                  name: waardepapieren-register
            - name: TRUSTED_PROXIES
              valueFrom:
                configMapKeyRef:
                  key: trusted-proxies
                  name: waardepapieren-register
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: app-version
                  name: waardepapieren-register
            - name: APP_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: waardepapieren-register
            - name: APP_CACHE
              valueFrom:
                configMapKeyRef:
                  key: cache
                  name: waardepapieren-register
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  key: database-url
                  name: waardepapieren-register
            - name: CORS_ALLOW_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: app-corsAllowOrigin
                  name: waardepapieren-register
            - name: APP_APPLICATION_KEY
              valueFrom:
                secretKeyRef:
                  key: app_application_key
                  name: waardepapieren-register
            
            - name: APP_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: waardepapieren-register
          resources:
            {}
        - name: waardepapieren-register-nginx
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: false
          image: "ghcr.io/conductionnl/waardepapieren-register-nginx:latest"
          imagePullPolicy: Always
          env:
            - name: PHP_SERVICE
              value: localhost
            - name: NGINX_HOST
              value: localhost
            - name: BACKENDS
              value: localhost
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
          resources:
            {}
---
# Source: waardepapieren-register/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-release-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.10.3
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: waardepapieren-register-1.1.0.tgz
spec:
  serviceName: my-release-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: my-release
      role: primary
  template:
    metadata:
      name: my-release-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.10.3
        app.kubernetes.io/instance: my-release
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: my-release
                    app.kubernetes.io/component: primary
                namespaces:
                  - "waardepapieren-register-1.1.0.tgz"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/bitnami-shell:10-debian-10-r200
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - /bin/sh
            - -cx
            - |
              chown 1001:1001 /bitnami/postgresql
              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: my-release-postgresql
          image: docker.io/bitnami/postgresql:11
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "webresourcecatalogus"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "webresourcecatalogus"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "webresourcecatalogus" -d "dbname=webresourcecatalogus" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "webresourcecatalogus" -d "dbname=webresourcecatalogus" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: waardepapieren-register/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "my-release-waardepapieren-register-test-connection"
  labels:
    helm.sh/chart: waardepapieren-register-1.1.0
    app.kubernetes.io/name: waardepapieren-register
    app.kubernetes.io/instance: my-release
    app.kubernetes.io/version: "V1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['my-release-waardepapieren-register:80']
  restartPolicy: Never
