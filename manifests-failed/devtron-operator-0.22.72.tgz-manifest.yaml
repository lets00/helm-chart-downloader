---
# Source: devtron-operator/templates/dex.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": my-release
    "meta.helm.sh/release-namespace": devtron-operator-0.22.72.tgz
  name: argocd-dex-server
---
# Source: devtron-operator/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devtron
  namespace: devtroncd
  labels:
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
---
# Source: devtron-operator/templates/argocd-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
  annotations:
    "helm.sh/resource-policy": keep
  name: argocd-secret
  namespace: devtroncd
type: Opaque
---
# Source: devtron-operator/templates/dashboard.yaml
apiVersion: v1
kind: Secret
metadata:
  name: devtron-dashboard-secret
  labels:
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
---
# Source: devtron-operator/templates/kubelink.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubelink-secret
  labels:
    app: kubelink
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
type: Opaque
---
# Source: devtron-operator/templates/argocd-secret.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  annotations:
    "helm.sh/resource-policy": keep
  name: argocd-cm
data:
  timeout.hard.reconciliation: "0"
  timeout.reconciliation: 60s
  repositories: |-
    - name: devtron
      type: helm
      url: https://helm.devtron.ai
    - name: fluent
      type: helm
      url: https://fluent.github.io/helm-charts
    - name: nginx-ingress
      type: helm
      url: https://kubernetes.github.io/ingress-nginx
    - name: elastic
      type: helm
      url: https://helm.elastic.co
    - name: bitnami
      type: helm
      url: https://charts.bitnami.com/bitnami
    - name: prometheus-community
      type: helm
      url:  https://prometheus-community.github.io/helm-charts
    - name: jetstack
      type: helm
      url:  https://charts.jetstack.io
    - name: metrics-server
      type: helm
      url:  https://kubernetes-sigs.github.io/metrics-server
    - name: autoscaler
      type: helm
      url:  https://kubernetes.github.io/autoscaler
    - name: external-secrets
      type: helm
      url:  https://charts.external-secrets.io
    - name: kedacore
      type: helm
      url:  https://kedacore.github.io/charts
  resource.customizations: >
    kubernetes-client.io/ExternalSecret:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.status ~= nil then
              hs.status = "Degraded"
              hs.message = obj.status.status
          else
            hs.status = "Healthy"
          end
        else
          hs.status = "Healthy"
        end
        return hs
    argoproj.io/Rollout:
      health.lua: |
        function checkReplicasStatus(obj)
          hs = {}
          replicasCount = getNumberValueOrDefault(obj.spec.replicas)
          replicasStatus = getNumberValueOrDefault(obj.status.replicas)
          updatedReplicas = getNumberValueOrDefault(obj.status.updatedReplicas)
          availableReplicas = getNumberValueOrDefault(obj.status.availableReplicas)

          if updatedReplicas < replicasCount then
            hs.status = "Progressing"
            hs.message = "Waiting for roll out to finish: More replicas need to be updated"
            return hs
          end
          -- Since the scale down delay can be very high, BlueGreen does not wait for all the old replicas to scale
          -- down before marking itself healthy. As a result, only evaluate this condition if the strategy is canary.
          if obj.spec.strategy.canary ~= nil and replicasStatus > updatedReplicas then
            hs.status = "Progressing"
            hs.message = "Waiting for roll out to finish: old replicas are pending termination"
            return hs
          end
          if availableReplicas < updatedReplicas then
            hs.status = "Progressing"
            hs.message = "Waiting for roll out to finish: updated replicas are still becoming available"
            return hs
          end
          return nil
        end

        function getNumberValueOrDefault(field)
          if field ~= nil then
            return field
          end
          return 0
        end

        function checkPaused(obj)
          hs = {}
          local paused = false
          if obj.status.verifyingPreview ~= nil then
            paused = obj.status.verifyingPreview
          elseif obj.spec.paused ~= nil then
            paused = obj.spec.paused
          end

          if paused then
            hs.status = "Suspended"
            hs.message = "Rollout is paused"
            return hs
          end
          return nil
        end

        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for _, condition in ipairs(obj.status.conditions) do
              if condition.type == "InvalidSpec" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Progressing" and condition.reason == "RolloutAborted" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Progressing" and condition.reason == "ProgressDeadlineExceeded" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
            end
          end
          if obj.status.currentPodHash ~= nil then
            if obj.spec.strategy.blueGreen ~= nil then
              isPaused = checkPaused(obj)
              if isPaused ~= nil then
                return isPaused
              end
              replicasHS = checkReplicasStatus(obj)
              if replicasHS ~= nil then
                return replicasHS
              end
              if obj.status.blueGreen ~= nil and obj.status.blueGreen.activeSelector ~= nil and obj.status.blueGreen.activeSelector == obj.status.currentPodHash then
                hs.status = "Healthy"
                hs.message = "The active Service is serving traffic to the current pod spec"
                return hs
              end
              hs.status = "Progressing"
              hs.message = "The current pod spec is not receiving traffic from the active service"
              return hs
            end
            if obj.spec.strategy.recreate ~= nil then
              isPaused = checkPaused(obj)
              if isPaused ~= nil then
                return isPaused
              end
              replicasHS = checkReplicasStatus(obj)
              if replicasHS ~= nil then
                return replicasHS
              end
              if obj.status.recreate ~= nil and obj.status.recreate.currentRS ~= nil and obj.status.recreate.currentRS == obj.status.currentPodHash then
                hs.status = "Healthy"
                hs.message = "Rollout is successful"
                return hs
              end
              hs.status = "Progressing"
              hs.message = "Rollout is in progress"
              return hs
            end
            if obj.spec.strategy.canary ~= nil then
              currentRSIsStable = obj.status.canary.stableRS == obj.status.currentPodHash
              if obj.spec.strategy.canary.steps ~= nil and table.getn(obj.spec.strategy.canary.steps) > 0 then
                stepCount = table.getn(obj.spec.strategy.canary.steps)
                if obj.status.currentStepIndex ~= nil then
                  currentStepIndex = obj.status.currentStepIndex
                  isPaused = checkPaused(obj)
                  if isPaused ~= nil then
                    return isPaused
                  end
              
                  if paused then
                    hs.status = "Suspended"
                    hs.message = "Rollout is paused"
                    return hs
                  end
                  if currentRSIsStable and stepCount == currentStepIndex then
                    replicasHS = checkReplicasStatus(obj)
                    if replicasHS ~= nil then
                      return replicasHS
                    end
                    hs.status = "Healthy"
                    hs.message = "The rollout has completed all steps"
                    return hs
                  end
                end
                hs.status = "Progressing"
                hs.message = "Waiting for rollout to finish steps"
                return hs
              end

              -- The detecting the health of the Canary deployment when there are no steps
              replicasHS = checkReplicasStatus(obj)
              if replicasHS ~= nil then
                return replicasHS
              end
              if currentRSIsStable then
                hs.status = "Healthy"
                hs.message = "The rollout has completed canary deployment"
                return hs
              end
              hs.status = "Progressing"
              hs.message = "Waiting for rollout to finish canary deployment"
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for rollout to finish: status has not been reconciled."
        return hs
---
# Source: devtron-operator/templates/config-overrides.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: migrator-override-cm
  namespace:  devtroncd
data:
  override: |
---
# Source: devtron-operator/templates/dashboard.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-cm
  labels:
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
data:
  GA_ENABLED: "false"
  HOTJAR_ENABLED: "false"
  SENTRY_ENABLED: "false"
  SENTRY_ENV: "PRODUCTION"
  APPLICATION_METRICS_ENABLED: "true"
  HIDE_APPLICATION_GROUPS: "false"
  API_BATCH_SIZE: "30"
  ENABLE_BUILD_CONTEXT: "true"
  ENABLE_CI_JOB: "true"
  ENABLE_EXTERNAL_ARGO_CD: "false"
  ENABLE_RESTART_WORKLOAD: "true"
  ENABLE_SCOPED_VARIABLES: "true"
  GLOBAL_API_TIMEOUT: "60000"
  HIDE_EXCLUDE_INCLUDE_GIT_COMMITS: "false"
  SERVICE_WORKER_TIMEOUT: "1"
  TRIGGER_API_TIMEOUT: "60000"
  USE_V2: "true"
---
# Source: devtron-operator/templates/devtron.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "devtron-cm"
  labels:
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
data:
  PG_USER: postgres
  PG_ADDR: postgresql-postgresql.devtroncd
  PG_PORT: "5432"
  HELM_CLIENT_URL: kubelink-service:50051
  DASHBOARD_PORT: "80"
  DASHBOARD_HOST: dashboard-service.devtroncd
  PG_DATABASE: orchestrator
  DEX_HOST: http://argocd-dex-server.devtroncd
  DEX_PORT: "5556"
  APP_SYNC_IMAGE: quay.io/devtron/chart-sync:b67ab589-150-23082
---
# Source: devtron-operator/templates/devtron.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-custom-cm
  labels:
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
data:
  DEFAULT_CI_IMAGE: quay.io/devtron/ci-runner:6e721248-138-23081
---
# Source: devtron-operator/templates/devtron.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: devtron-cluster-components
  labels:
    release: devtron
data:
  rollout.yaml: >-
    rollout:
      resources:
        limits:
          cpu: 250m
          memory: 200Mi
        requests:
          cpu: 50m
          memory: 100Mi
---
# Source: devtron-operator/templates/kubelink.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubelink-cm
  labels:
    app: kubelink
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
data:
  ENABLE_HELM_RELEASE_CACHE: "true"
  MANIFEST_FETCH_BATCH_SIZE: "2"
  NATS_MSG_PROCESSING_BATCH_SIZE: "1"
  NATS_SERVER_HOST: nats://devtron-nats.devtroncd:4222
  PG_ADDR: postgresql-postgresql.devtroncd
  PG_DATABASE: orchestrator
  PG_LOG_QUERY: "true"
  PG_PORT: "5432"
  PG_USER: postgres
---
# Source: devtron-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    "helm.sh/resource-policy": keep
  labels:
    app.kubernetes.io/instance: devtron
  name: devtron
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
# Source: devtron-operator/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: devtron
  annotations:
    "helm.sh/resource-policy": keep
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devtron
subjects:
  - kind: ServiceAccount
    name: devtron
    namespace: devtroncd
---
# Source: devtron-operator/templates/dex.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": my-release
    "meta.helm.sh/release-namespace": devtron-operator-0.22.72.tgz
  name: argocd-dex-server
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
# Source: devtron-operator/templates/dex.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": my-release
    "meta.helm.sh/release-namespace": devtron-operator-0.22.72.tgz
  name: argocd-dex-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argocd-dex-server
subjects:
- kind: ServiceAccount
  name: argocd-dex-server
---
# Source: devtron-operator/templates/dashboard.yaml
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
  labels:
    app: dashboard
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: app
      protocol: TCP
      name: app
  selector:
    app: dashboard
---
# Source: devtron-operator/templates/devtron-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: devtron
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
  name: devtron-service
  namespace: devtroncd
spec:
  ports:
  - name: devtron
    port: 80
    protocol: TCP
    targetPort: devtron
  selector:
    app: devtron
  sessionAffinity: None
  type: LoadBalancer
---
# Source: devtron-operator/templates/dex.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": my-release
    "meta.helm.sh/release-namespace": devtron-operator-0.22.72.tgz
  name: argocd-dex-server
spec:
  ports:
  - name: http
    port: 5556
    protocol: TCP
    targetPort: 5556
  - name: grpc
    port: 5557
    protocol: TCP
    targetPort: 5557
  - name: metrics
    port: 5558
    protocol: TCP
    targetPort: 5558
  selector:
    app.kubernetes.io/name: argocd-dex-server
---
# Source: devtron-operator/templates/kubelink.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kubelink
  name: kubelink-service
  namespace: devtroncd
  annotations:
    "helm.sh/resource-policy": keep
spec:
  ports:
    - name: app
      port: 50051
      protocol: TCP
      targetPort: app
  selector:
    app: kubelink
  sessionAffinity: None
  type: ClusterIP
---
# Source: devtron-operator/templates/postgresql.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-postgresql-metrics
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
    "helm.sh/resource-policy": keep
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app: postgresql
    release: devtron
    role: master
---
# Source: devtron-operator/templates/postgresql.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/resource-policy": keep
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "devtron"
---
# Source: devtron-operator/templates/postgresql.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/resource-policy": keep
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "devtron"
    role: master
---
# Source: devtron-operator/templates/dashboard.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard
  labels:
    app: dashboard
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
spec:
  selector:
    matchLabels:
      app: dashboard
      release: devtron
  replicas: 1
  minReadySeconds: 60
  template:
    metadata:
      labels:
        app: dashboard
        release: devtron
    spec:
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
        - name: dashboard
          image: quay.io/devtron/dashboard:87aaf7ac-690-23135
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          env:
            - name: DEVTRON_APP_NAME
              value: dashboard
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
          - configMapRef:
              name: dashboard-cm
          - secretRef:
              name: devtron-dashboard-secret
          volumeMounts: []        
  revisionHistoryLimit: 3
---
# Source: devtron-operator/templates/devtron.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devtron
  labels:
    app: devtron
    release: devtron
  annotations:
    "helm.sh/resource-policy": keep
spec:
  selector:
    matchLabels:
      app: devtron
      release: devtron
  replicas: 1
  minReadySeconds: 60
  template:
    metadata:
      labels:
        app: devtron
        release: devtron
    spec:
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      serviceAccountName: devtron
      volumes:
        - configMap:
            name: devtron-cluster-components
          name: devtron-cluster-components-vol
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
        - name: devtron
          image: quay.io/devtron/hyperion:3aa7e420-280-23147
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - ' curl -X POST -H "Content-Type: application/json" -d ''{"eventType":
                  "SIG_TERM"}'' localhost:8080/orchestrator/telemetry/summary'
          ports:
            - name: devtron
              containerPort: 8080
              protocol: TCP
          env:
            - name: DEVTRON_APP_NAME
              value: devtron
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
          - configMapRef:
              name: "devtron-cm"
          - secretRef:
              name: "devtron-secret"
          - configMapRef:
              name: "devtron-custom-cm"
          - secretRef:
              name: "devtron-custom-secret"
          volumeMounts:
            - mountPath: /cluster/component
              name: devtron-cluster-components-vol
  revisionHistoryLimit: 3
---
# Source: devtron-operator/templates/dex.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: dex-server
    app.kubernetes.io/name: argocd-dex-server
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/resource-policy": keep
    "meta.helm.sh/release-name": my-release
    "meta.helm.sh/release-namespace": devtron-operator-0.22.72.tgz
  name: argocd-dex-server
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-dex-server
  minReadySeconds: 60
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-dex-server
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
      - command:
        - /shared/authenticator
        - rundex
        image: quay.io/devtron/dex:v2.30.2
        imagePullPolicy: IfNotPresent
        name: dex
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
        ports:
        - containerPort: 5556
        - containerPort: 5557
        - containerPort: 5558
        volumeMounts:
        - mountPath: /shared
          name: static-files         
      initContainers:
      - command:
        - cp
        - -n
        - /authenticator
        - /shared
        image: quay.io/devtron/authenticator:e414faff-393-13273
        imagePullPolicy: IfNotPresent
        name: copyutil
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /shared
          name: static-files           
      serviceAccountName: argocd-dex-server
      volumes:
      - emptyDir: {}
        name: static-files
---
# Source: devtron-operator/templates/kubelink.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubelink
  labels:
    app: kubelink
    chart: kubelink-4.11.1
  annotations:
    "helm.sh/resource-policy": keep
spec:
  selector:
    matchLabels:
      app: kubelink
  replicas: 1
  minReadySeconds: 60
  template:
    metadata:
      labels:
        app: kubelink
    spec:
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      serviceAccount: devtron
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
        - name: kubelink
          image: quay.io/devtron/kubelink:a810dbae-564-23055
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - name: app
              containerPort: 50051
              protocol: TCP
          env:
            - name: DEVTRON_APP_NAME
              value: kubelink
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-postgresql
                  key: postgresql-password
          envFrom:
          - configMapRef:
              name: kubelink-cm
          - secretRef:
              name: kubelink-secret                  
  revisionHistoryLimit: 3
---
# Source: devtron-operator/templates/postgresql.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/resource-policy": keep
spec:
  serviceName: postgresql-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "devtron"
      role: master
  template:
    metadata:
      name: postgresql-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.6.4
        release: "devtron"
        role: master
    spec:
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: init-chmod-data
          image: quay.io/devtron/minideb:latest
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/sh
            - -cx
            - |

              mkdir -p /bitnami/postgresql/data
              chmod 700 /bitnami/postgresql/data
              find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
                xargs chown -R 1001:1001
              chmod -R 777 /dev/shm
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
            - name: dshm
              mountPath: /dev/shm
      containers:
        - name: postgresql-postgresql
          image: quay.io/devtron/postgres:11.9.0-debian-10-r26
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "orchestrator"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: pgaudit, uuid-ossp
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "orchestrator" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "orchestrator" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath:
        - name: metrics
          image: quay.io/devtron/postgres_exporter:v0.4.7
          imagePullPolicy: "IfNotPresent"
          env:
            - name: DATA_SOURCE_URI
              value: "127.0.0.1:5432/orchestrator?sslmode=disable"
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: postgresql-postgresql
                  key: postgresql-password
            - name: DATA_SOURCE_USER
              value: postgres
          livenessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
          ports:
            - name: http-metrics
              containerPort: 9187
      volumes:
        - name: custom-init-scripts
          configMap:
            name: postgresql-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: 20Gi
---
# Source: devtron-operator/templates/app-sync-job.yaml
apiVersion: batch/v1beta1
kind: Job
metadata:
  name: app-sync-job-mafjx
spec:
  template:
    spec:
      serviceAccountName: devtron
      initContainers:
      - name: migration-wait
        image: quay.io/devtron/kubectl:latest
        command: ['sh', '-c', 'while [ ! $(kubectl -n devtroncd get $(kubectl -n devtroncd get job -l job=postgresql-migrate-devtron -o name) -o jsonpath="{.status.succeeded}")  ]; do sleep 10; done']
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
      - name: chart-sync
        image: quay.io/devtron/chart-sync:b67ab589-150-23082
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: PG_ADDR
          value: postgresql-postgresql.devtroncd
        - name: PG_DATABASE
          value: orchestrator
        - name: PG_USER
          value: postgres
        envFrom:
        - secretRef:
            name: devtron-secret
      restartPolicy: OnFailure
  backoffLimit: 4
---
# Source: devtron-operator/templates/migrator.yaml
apiVersion: batch/v1beta1
kind: Job
metadata:
  name: postgresql-migrate-devtron-eqgb4
  annotations: {}
  labels:
    job: postgresql-migrate-devtron
spec:
  template:
    spec:
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      initContainers:
        - env:
          - name: DB_TYPE
            value: postgres
          - name: PG_USER
            value: postgres
          - name: PG_ADDR
            value: postgresql-postgresql.devtroncd
          - name: DB_PORT
            value: "5432"
          - name: PG_DATABASE
            value: orchestrator
          envFrom:
            - secretRef:
                name: devtron-secret
          image: quay.io/devtron/devtron-utils:dup-chart-repo-v1.1.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          name: clean-duplicate-chart
        - command:
            - /bin/sh
            - -c
            - cp -r /scripts/. /shared/
          image: quay.io/devtron/hyperion:3aa7e420-280-23147
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          name: init-devtron
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
      containers:
        - command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi '
          env:
            - name: SCRIPT_LOCATION
              value: /shared/sql/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: orchestrator
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
            - secretRef:
                name: postgresql-migrator        
          image: quay.io/devtron/migrator:v4.16.2
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          name: postgresql-migrate-devtron
          volumeMounts:
            - mountPath: /shared
              name: shared-volume           
      restartPolicy: OnFailure
      volumes:
        - emptyDir: {}
          name: shared-volume 
  backoffLimit: 20
  activeDeadlineSeconds: 1500
---
# Source: devtron-operator/templates/migrator.yaml
apiVersion: batch/v1beta1
kind: Job
metadata:
  name: postgresql-migrate-casbin-wyyn4
  annotations: {}
spec:
  template:
    spec:
      serviceAccountName: devtron
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      containers:
      - name: devtron-rollout
        image: quay.io/devtron/kubectl:latest
        command: ['sh', '-c', 'kubectl rollout restart deployment/devtron -n devtroncd && kubectl rollout restart deployment/kubelink -n devtroncd'] 
      initContainers:
        - command:
            - /bin/sh
            - -c
            - cp -r /scripts/. /shared/
          image: quay.io/devtron/hyperion:3aa7e420-280-23147
          name: init-devtron
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
            - mountPath: /shared
              name: shared-volume
        - command:
            - /bin/sh
            - -c
            - 'if [ $(MIGRATE_TO_VERSION) -eq "0" ]; then migrate -path $(SCRIPT_LOCATION) -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable up;  else   echo $(MIGRATE_TO_VERSION); migrate -path $(SCRIPT_LOCATION)  -database postgres://$(DB_USER_NAME):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=disable goto $(MIGRATE_TO_VERSION);    fi '
          env:
            - name: SCRIPT_LOCATION
              value: /shared/casbin/
            - name: DB_TYPE
              value: postgres
            - name: DB_USER_NAME
              value: postgres
            - name: DB_HOST
              value: postgresql-postgresql.devtroncd
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: casbin
            - name: MIGRATE_TO_VERSION
              value: "0"
          envFrom:
            - secretRef:
                name: postgresql-migrator        
          image: quay.io/devtron/migrator:v4.16.2
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
          name: postgresql-migrate-casbin
          volumeMounts:
            - mountPath: /shared
              name: shared-volume  
      restartPolicy: OnFailure
      volumes:
        - emptyDir: {}
          name: shared-volume 
  backoffLimit: 20
  activeDeadlineSeconds: 1500
---
# Source: devtron-operator/templates/app-sync-job.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: app-sync-cronjob
  annotations:
    "helm.sh/resource-policy": keep
spec:
  schedule: "0 19 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            fsGroup: 1000
            runAsGroup: 1000
            runAsUser: 1000
          containers:
          - name: chart-sync
            image: quay.io/devtron/chart-sync:b67ab589-150-23082
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 1000
            env:
            - name: PG_ADDR
              value: postgresql-postgresql.devtroncd
            - name: PG_DATABASE
              value: orchestrator
            - name: PG_USER
              value: postgres
            envFrom:
            - secretRef:
                name: devtron-secret
          restartPolicy: Never
      backoffLimit: 4
---
# Source: devtron-operator/templates/workflow.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: argo
  labels:
    name: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/resource-policy": keep
---
# Source: devtron-operator/templates/workflow.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: devtron-ci
  labels:
    name: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/resource-policy": keep
---
# Source: devtron-operator/templates/workflow.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: devtron-demo
  labels:
    name: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/resource-policy": keep
---
# Source: devtron-operator/templates/workflow.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: devtron-cd
  labels:
    name: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/resource-policy": keep
---
# Source: devtron-operator/templates/configmap-secret.yaml
apiVersion: v1
kind: Secret
data:
  postgresql-password: d0pQTXlMWlhYZnFqZVZlRHFXQndTaE9hY05ZaUd6d0w=
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_DB: b3JjaGVzdHJhdG9y
metadata:
  name: postgresql-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/resource-policy": keep
type: Opaque
---
# Source: devtron-operator/templates/configmap-secret.yaml
apiVersion: v1
kind: Secret
data:
  DB_PASSWORD: d0pQTXlMWlhYZnFqZVZlRHFXQndTaE9hY05ZaUd6d0w=
metadata:
  name: postgresql-migrator
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-4"
    "helm.sh/resource-policy": keep
type: Opaque
---
# Source: devtron-operator/templates/configmap-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "devtron-secret"
  labels:
    release: devtron
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-3"
    "helm.sh/resource-policy": keep
data:
  PG_PASSWORD: d0pQTXlMWlhYZnFqZVZlRHFXQndTaE9hY05ZaUd6d0w=
type: Opaque
---
# Source: devtron-operator/templates/configmap-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "devtron-custom-secret"
  labels:
    release: devtron
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
data:
type: Opaque
---
# Source: devtron-operator/templates/postgresql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-postgresql-init-scripts
  labels:
    app: postgresql
    chart: postgresql-8.6.4
    release: "devtron"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-2"
    "helm.sh/resource-policy": keep
data:
  db_create.sql: |
    create database casbin;
    create database git_sensor;
    create database lens;
    create database clairv4
